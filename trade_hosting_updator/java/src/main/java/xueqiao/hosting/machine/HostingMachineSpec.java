/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 机器规格
 */
public class HostingMachineSpec implements org.apache.thrift.TBase<HostingMachineSpec, HostingMachineSpec._Fields>, java.io.Serializable, Cloneable, Comparable<HostingMachineSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingMachineSpec");

  private static final org.apache.thrift.protocol.TField MEMORY_GB_FIELD_DESC = new org.apache.thrift.protocol.TField("memoryGB", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField CPU_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("cpuCount", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField OUT_IF_BAND_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("outIfBandMB", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingMachineSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingMachineSpecTupleSchemeFactory());
  }

  public int memoryGB; // optional
  public int cpuCount; // optional
  public int outIfBandMB; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MEMORY_GB((short)1, "memoryGB"),
    CPU_COUNT((short)2, "cpuCount"),
    OUT_IF_BAND_MB((short)3, "outIfBandMB");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MEMORY_GB
          return MEMORY_GB;
        case 2: // CPU_COUNT
          return CPU_COUNT;
        case 3: // OUT_IF_BAND_MB
          return OUT_IF_BAND_MB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MEMORYGB_ISSET_ID = 0;
  private static final int __CPUCOUNT_ISSET_ID = 1;
  private static final int __OUTIFBANDMB_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MEMORY_GB,_Fields.CPU_COUNT,_Fields.OUT_IF_BAND_MB};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MEMORY_GB, new org.apache.thrift.meta_data.FieldMetaData("memoryGB", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CPU_COUNT, new org.apache.thrift.meta_data.FieldMetaData("cpuCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OUT_IF_BAND_MB, new org.apache.thrift.meta_data.FieldMetaData("outIfBandMB", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingMachineSpec.class, metaDataMap);
  }

  public HostingMachineSpec() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingMachineSpec(HostingMachineSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    this.memoryGB = other.memoryGB;
    this.cpuCount = other.cpuCount;
    this.outIfBandMB = other.outIfBandMB;
  }

  public HostingMachineSpec deepCopy() {
    return new HostingMachineSpec(this);
  }

  @Override
  public void clear() {
    setMemoryGBIsSet(false);
    this.memoryGB = 0;
    setCpuCountIsSet(false);
    this.cpuCount = 0;
    setOutIfBandMBIsSet(false);
    this.outIfBandMB = 0;
  }

  public int getMemoryGB() {
    return this.memoryGB;
  }

  public HostingMachineSpec setMemoryGB(int memoryGB) {
    this.memoryGB = memoryGB;
    setMemoryGBIsSet(true);
    return this;
  }

  public void unsetMemoryGB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEMORYGB_ISSET_ID);
  }

  /** Returns true if field memoryGB is set (has been assigned a value) and false otherwise */
  public boolean isSetMemoryGB() {
    return EncodingUtils.testBit(__isset_bitfield, __MEMORYGB_ISSET_ID);
  }

  public void setMemoryGBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEMORYGB_ISSET_ID, value);
  }

  public int getCpuCount() {
    return this.cpuCount;
  }

  public HostingMachineSpec setCpuCount(int cpuCount) {
    this.cpuCount = cpuCount;
    setCpuCountIsSet(true);
    return this;
  }

  public void unsetCpuCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CPUCOUNT_ISSET_ID);
  }

  /** Returns true if field cpuCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCpuCount() {
    return EncodingUtils.testBit(__isset_bitfield, __CPUCOUNT_ISSET_ID);
  }

  public void setCpuCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CPUCOUNT_ISSET_ID, value);
  }

  public int getOutIfBandMB() {
    return this.outIfBandMB;
  }

  public HostingMachineSpec setOutIfBandMB(int outIfBandMB) {
    this.outIfBandMB = outIfBandMB;
    setOutIfBandMBIsSet(true);
    return this;
  }

  public void unsetOutIfBandMB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTIFBANDMB_ISSET_ID);
  }

  /** Returns true if field outIfBandMB is set (has been assigned a value) and false otherwise */
  public boolean isSetOutIfBandMB() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTIFBANDMB_ISSET_ID);
  }

  public void setOutIfBandMBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTIFBANDMB_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MEMORY_GB:
      if (value == null) {
        unsetMemoryGB();
      } else {
        setMemoryGB((Integer)value);
      }
      break;

    case CPU_COUNT:
      if (value == null) {
        unsetCpuCount();
      } else {
        setCpuCount((Integer)value);
      }
      break;

    case OUT_IF_BAND_MB:
      if (value == null) {
        unsetOutIfBandMB();
      } else {
        setOutIfBandMB((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MEMORY_GB:
      return Integer.valueOf(getMemoryGB());

    case CPU_COUNT:
      return Integer.valueOf(getCpuCount());

    case OUT_IF_BAND_MB:
      return Integer.valueOf(getOutIfBandMB());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MEMORY_GB:
      return isSetMemoryGB();
    case CPU_COUNT:
      return isSetCpuCount();
    case OUT_IF_BAND_MB:
      return isSetOutIfBandMB();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingMachineSpec)
      return this.equals((HostingMachineSpec)that);
    return false;
  }

  public boolean equals(HostingMachineSpec that) {
    if (that == null)
      return false;

    boolean this_present_memoryGB = true && this.isSetMemoryGB();
    boolean that_present_memoryGB = true && that.isSetMemoryGB();
    if (this_present_memoryGB || that_present_memoryGB) {
      if (!(this_present_memoryGB && that_present_memoryGB))
        return false;
      if (this.memoryGB != that.memoryGB)
        return false;
    }

    boolean this_present_cpuCount = true && this.isSetCpuCount();
    boolean that_present_cpuCount = true && that.isSetCpuCount();
    if (this_present_cpuCount || that_present_cpuCount) {
      if (!(this_present_cpuCount && that_present_cpuCount))
        return false;
      if (this.cpuCount != that.cpuCount)
        return false;
    }

    boolean this_present_outIfBandMB = true && this.isSetOutIfBandMB();
    boolean that_present_outIfBandMB = true && that.isSetOutIfBandMB();
    if (this_present_outIfBandMB || that_present_outIfBandMB) {
      if (!(this_present_outIfBandMB && that_present_outIfBandMB))
        return false;
      if (this.outIfBandMB != that.outIfBandMB)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingMachineSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMemoryGB()).compareTo(other.isSetMemoryGB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemoryGB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memoryGB, other.memoryGB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCpuCount()).compareTo(other.isSetCpuCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCpuCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cpuCount, other.cpuCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutIfBandMB()).compareTo(other.isSetOutIfBandMB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutIfBandMB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outIfBandMB, other.outIfBandMB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingMachineSpec(");
    boolean first = true;

    if (isSetMemoryGB()) {
      sb.append("memoryGB:");
      sb.append(this.memoryGB);
      first = false;
    }
    if (isSetCpuCount()) {
      if (!first) sb.append(", ");
      sb.append("cpuCount:");
      sb.append(this.cpuCount);
      first = false;
    }
    if (isSetOutIfBandMB()) {
      if (!first) sb.append(", ");
      sb.append("outIfBandMB:");
      sb.append(this.outIfBandMB);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingMachineSpecStandardSchemeFactory implements SchemeFactory {
    public HostingMachineSpecStandardScheme getScheme() {
      return new HostingMachineSpecStandardScheme();
    }
  }

  private static class HostingMachineSpecStandardScheme extends StandardScheme<HostingMachineSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingMachineSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MEMORY_GB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.memoryGB = iprot.readI32();
              struct.setMemoryGBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CPU_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cpuCount = iprot.readI32();
              struct.setCpuCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUT_IF_BAND_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.outIfBandMB = iprot.readI32();
              struct.setOutIfBandMBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingMachineSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMemoryGB()) {
        oprot.writeFieldBegin(MEMORY_GB_FIELD_DESC);
        oprot.writeI32(struct.memoryGB);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCpuCount()) {
        oprot.writeFieldBegin(CPU_COUNT_FIELD_DESC);
        oprot.writeI32(struct.cpuCount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutIfBandMB()) {
        oprot.writeFieldBegin(OUT_IF_BAND_MB_FIELD_DESC);
        oprot.writeI32(struct.outIfBandMB);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingMachineSpecTupleSchemeFactory implements SchemeFactory {
    public HostingMachineSpecTupleScheme getScheme() {
      return new HostingMachineSpecTupleScheme();
    }
  }

  private static class HostingMachineSpecTupleScheme extends TupleScheme<HostingMachineSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingMachineSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMemoryGB()) {
        optionals.set(0);
      }
      if (struct.isSetCpuCount()) {
        optionals.set(1);
      }
      if (struct.isSetOutIfBandMB()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMemoryGB()) {
        oprot.writeI32(struct.memoryGB);
      }
      if (struct.isSetCpuCount()) {
        oprot.writeI32(struct.cpuCount);
      }
      if (struct.isSetOutIfBandMB()) {
        oprot.writeI32(struct.outIfBandMB);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingMachineSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.memoryGB = iprot.readI32();
        struct.setMemoryGBIsSet(true);
      }
      if (incoming.get(1)) {
        struct.cpuCount = iprot.readI32();
        struct.setCpuCountIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outIfBandMB = iprot.readI32();
        struct.setOutIfBandMBIsSet(true);
      }
    }
  }

}

