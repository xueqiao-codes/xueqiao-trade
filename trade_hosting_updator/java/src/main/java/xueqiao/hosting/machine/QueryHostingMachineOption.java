/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryHostingMachineOption implements org.apache.thrift.TBase<QueryHostingMachineOption, QueryHostingMachineOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryHostingMachineOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryHostingMachineOption");

  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MACHINE_INNER_IPPARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInnerIPPartical", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MACHINE_INNER_IPWHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInnerIPWhole", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MACHINE_OUTER_IPPARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("machineOuterIPPartical", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MACHINE_OUTER_IPWHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("machineOuterIPWhole", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MACHINE_HOSTNAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("machineHostnamePartical", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField MACHINE_HOSTNAME_WHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("machineHostnameWhole", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MACHINE_ASSIGN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("machineAssignStatus", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryHostingMachineOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryHostingMachineOptionTupleSchemeFactory());
  }

  public long machineId; // optional
  public String machineInnerIPPartical; // optional
  public String machineInnerIPWhole; // optional
  public String machineOuterIPPartical; // optional
  public String machineOuterIPWhole; // optional
  public String machineHostnamePartical; // optional
  public String machineHostnameWhole; // optional
  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public HostingMachineAssignStatus machineAssignStatus; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MACHINE_ID((short)1, "machineId"),
    MACHINE_INNER_IPPARTICAL((short)2, "machineInnerIPPartical"),
    MACHINE_INNER_IPWHOLE((short)3, "machineInnerIPWhole"),
    MACHINE_OUTER_IPPARTICAL((short)4, "machineOuterIPPartical"),
    MACHINE_OUTER_IPWHOLE((short)5, "machineOuterIPWhole"),
    MACHINE_HOSTNAME_PARTICAL((short)6, "machineHostnamePartical"),
    MACHINE_HOSTNAME_WHOLE((short)7, "machineHostnameWhole"),
    /**
     * 
     * @see HostingMachineAssignStatus
     */
    MACHINE_ASSIGN_STATUS((short)8, "machineAssignStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MACHINE_ID
          return MACHINE_ID;
        case 2: // MACHINE_INNER_IPPARTICAL
          return MACHINE_INNER_IPPARTICAL;
        case 3: // MACHINE_INNER_IPWHOLE
          return MACHINE_INNER_IPWHOLE;
        case 4: // MACHINE_OUTER_IPPARTICAL
          return MACHINE_OUTER_IPPARTICAL;
        case 5: // MACHINE_OUTER_IPWHOLE
          return MACHINE_OUTER_IPWHOLE;
        case 6: // MACHINE_HOSTNAME_PARTICAL
          return MACHINE_HOSTNAME_PARTICAL;
        case 7: // MACHINE_HOSTNAME_WHOLE
          return MACHINE_HOSTNAME_WHOLE;
        case 8: // MACHINE_ASSIGN_STATUS
          return MACHINE_ASSIGN_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MACHINEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MACHINE_ID,_Fields.MACHINE_INNER_IPPARTICAL,_Fields.MACHINE_INNER_IPWHOLE,_Fields.MACHINE_OUTER_IPPARTICAL,_Fields.MACHINE_OUTER_IPWHOLE,_Fields.MACHINE_HOSTNAME_PARTICAL,_Fields.MACHINE_HOSTNAME_WHOLE,_Fields.MACHINE_ASSIGN_STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MACHINE_INNER_IPPARTICAL, new org.apache.thrift.meta_data.FieldMetaData("machineInnerIPPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_INNER_IPWHOLE, new org.apache.thrift.meta_data.FieldMetaData("machineInnerIPWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_OUTER_IPPARTICAL, new org.apache.thrift.meta_data.FieldMetaData("machineOuterIPPartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_OUTER_IPWHOLE, new org.apache.thrift.meta_data.FieldMetaData("machineOuterIPWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_HOSTNAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("machineHostnamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_HOSTNAME_WHOLE, new org.apache.thrift.meta_data.FieldMetaData("machineHostnameWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_ASSIGN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("machineAssignStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingMachineAssignStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryHostingMachineOption.class, metaDataMap);
  }

  public QueryHostingMachineOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryHostingMachineOption(QueryHostingMachineOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.machineId = other.machineId;
    if (other.isSetMachineInnerIPPartical()) {
      this.machineInnerIPPartical = other.machineInnerIPPartical;
    }
    if (other.isSetMachineInnerIPWhole()) {
      this.machineInnerIPWhole = other.machineInnerIPWhole;
    }
    if (other.isSetMachineOuterIPPartical()) {
      this.machineOuterIPPartical = other.machineOuterIPPartical;
    }
    if (other.isSetMachineOuterIPWhole()) {
      this.machineOuterIPWhole = other.machineOuterIPWhole;
    }
    if (other.isSetMachineHostnamePartical()) {
      this.machineHostnamePartical = other.machineHostnamePartical;
    }
    if (other.isSetMachineHostnameWhole()) {
      this.machineHostnameWhole = other.machineHostnameWhole;
    }
    if (other.isSetMachineAssignStatus()) {
      this.machineAssignStatus = other.machineAssignStatus;
    }
  }

  public QueryHostingMachineOption deepCopy() {
    return new QueryHostingMachineOption(this);
  }

  @Override
  public void clear() {
    setMachineIdIsSet(false);
    this.machineId = 0;
    this.machineInnerIPPartical = null;
    this.machineInnerIPWhole = null;
    this.machineOuterIPPartical = null;
    this.machineOuterIPWhole = null;
    this.machineHostnamePartical = null;
    this.machineHostnameWhole = null;
    this.machineAssignStatus = null;
  }

  public long getMachineId() {
    return this.machineId;
  }

  public QueryHostingMachineOption setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public String getMachineInnerIPPartical() {
    return this.machineInnerIPPartical;
  }

  public QueryHostingMachineOption setMachineInnerIPPartical(String machineInnerIPPartical) {
    this.machineInnerIPPartical = machineInnerIPPartical;
    return this;
  }

  public void unsetMachineInnerIPPartical() {
    this.machineInnerIPPartical = null;
  }

  /** Returns true if field machineInnerIPPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInnerIPPartical() {
    return this.machineInnerIPPartical != null;
  }

  public void setMachineInnerIPParticalIsSet(boolean value) {
    if (!value) {
      this.machineInnerIPPartical = null;
    }
  }

  public String getMachineInnerIPWhole() {
    return this.machineInnerIPWhole;
  }

  public QueryHostingMachineOption setMachineInnerIPWhole(String machineInnerIPWhole) {
    this.machineInnerIPWhole = machineInnerIPWhole;
    return this;
  }

  public void unsetMachineInnerIPWhole() {
    this.machineInnerIPWhole = null;
  }

  /** Returns true if field machineInnerIPWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInnerIPWhole() {
    return this.machineInnerIPWhole != null;
  }

  public void setMachineInnerIPWholeIsSet(boolean value) {
    if (!value) {
      this.machineInnerIPWhole = null;
    }
  }

  public String getMachineOuterIPPartical() {
    return this.machineOuterIPPartical;
  }

  public QueryHostingMachineOption setMachineOuterIPPartical(String machineOuterIPPartical) {
    this.machineOuterIPPartical = machineOuterIPPartical;
    return this;
  }

  public void unsetMachineOuterIPPartical() {
    this.machineOuterIPPartical = null;
  }

  /** Returns true if field machineOuterIPPartical is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineOuterIPPartical() {
    return this.machineOuterIPPartical != null;
  }

  public void setMachineOuterIPParticalIsSet(boolean value) {
    if (!value) {
      this.machineOuterIPPartical = null;
    }
  }

  public String getMachineOuterIPWhole() {
    return this.machineOuterIPWhole;
  }

  public QueryHostingMachineOption setMachineOuterIPWhole(String machineOuterIPWhole) {
    this.machineOuterIPWhole = machineOuterIPWhole;
    return this;
  }

  public void unsetMachineOuterIPWhole() {
    this.machineOuterIPWhole = null;
  }

  /** Returns true if field machineOuterIPWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineOuterIPWhole() {
    return this.machineOuterIPWhole != null;
  }

  public void setMachineOuterIPWholeIsSet(boolean value) {
    if (!value) {
      this.machineOuterIPWhole = null;
    }
  }

  public String getMachineHostnamePartical() {
    return this.machineHostnamePartical;
  }

  public QueryHostingMachineOption setMachineHostnamePartical(String machineHostnamePartical) {
    this.machineHostnamePartical = machineHostnamePartical;
    return this;
  }

  public void unsetMachineHostnamePartical() {
    this.machineHostnamePartical = null;
  }

  /** Returns true if field machineHostnamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineHostnamePartical() {
    return this.machineHostnamePartical != null;
  }

  public void setMachineHostnameParticalIsSet(boolean value) {
    if (!value) {
      this.machineHostnamePartical = null;
    }
  }

  public String getMachineHostnameWhole() {
    return this.machineHostnameWhole;
  }

  public QueryHostingMachineOption setMachineHostnameWhole(String machineHostnameWhole) {
    this.machineHostnameWhole = machineHostnameWhole;
    return this;
  }

  public void unsetMachineHostnameWhole() {
    this.machineHostnameWhole = null;
  }

  /** Returns true if field machineHostnameWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineHostnameWhole() {
    return this.machineHostnameWhole != null;
  }

  public void setMachineHostnameWholeIsSet(boolean value) {
    if (!value) {
      this.machineHostnameWhole = null;
    }
  }

  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public HostingMachineAssignStatus getMachineAssignStatus() {
    return this.machineAssignStatus;
  }

  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public QueryHostingMachineOption setMachineAssignStatus(HostingMachineAssignStatus machineAssignStatus) {
    this.machineAssignStatus = machineAssignStatus;
    return this;
  }

  public void unsetMachineAssignStatus() {
    this.machineAssignStatus = null;
  }

  /** Returns true if field machineAssignStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineAssignStatus() {
    return this.machineAssignStatus != null;
  }

  public void setMachineAssignStatusIsSet(boolean value) {
    if (!value) {
      this.machineAssignStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case MACHINE_INNER_IPPARTICAL:
      if (value == null) {
        unsetMachineInnerIPPartical();
      } else {
        setMachineInnerIPPartical((String)value);
      }
      break;

    case MACHINE_INNER_IPWHOLE:
      if (value == null) {
        unsetMachineInnerIPWhole();
      } else {
        setMachineInnerIPWhole((String)value);
      }
      break;

    case MACHINE_OUTER_IPPARTICAL:
      if (value == null) {
        unsetMachineOuterIPPartical();
      } else {
        setMachineOuterIPPartical((String)value);
      }
      break;

    case MACHINE_OUTER_IPWHOLE:
      if (value == null) {
        unsetMachineOuterIPWhole();
      } else {
        setMachineOuterIPWhole((String)value);
      }
      break;

    case MACHINE_HOSTNAME_PARTICAL:
      if (value == null) {
        unsetMachineHostnamePartical();
      } else {
        setMachineHostnamePartical((String)value);
      }
      break;

    case MACHINE_HOSTNAME_WHOLE:
      if (value == null) {
        unsetMachineHostnameWhole();
      } else {
        setMachineHostnameWhole((String)value);
      }
      break;

    case MACHINE_ASSIGN_STATUS:
      if (value == null) {
        unsetMachineAssignStatus();
      } else {
        setMachineAssignStatus((HostingMachineAssignStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case MACHINE_INNER_IPPARTICAL:
      return getMachineInnerIPPartical();

    case MACHINE_INNER_IPWHOLE:
      return getMachineInnerIPWhole();

    case MACHINE_OUTER_IPPARTICAL:
      return getMachineOuterIPPartical();

    case MACHINE_OUTER_IPWHOLE:
      return getMachineOuterIPWhole();

    case MACHINE_HOSTNAME_PARTICAL:
      return getMachineHostnamePartical();

    case MACHINE_HOSTNAME_WHOLE:
      return getMachineHostnameWhole();

    case MACHINE_ASSIGN_STATUS:
      return getMachineAssignStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MACHINE_ID:
      return isSetMachineId();
    case MACHINE_INNER_IPPARTICAL:
      return isSetMachineInnerIPPartical();
    case MACHINE_INNER_IPWHOLE:
      return isSetMachineInnerIPWhole();
    case MACHINE_OUTER_IPPARTICAL:
      return isSetMachineOuterIPPartical();
    case MACHINE_OUTER_IPWHOLE:
      return isSetMachineOuterIPWhole();
    case MACHINE_HOSTNAME_PARTICAL:
      return isSetMachineHostnamePartical();
    case MACHINE_HOSTNAME_WHOLE:
      return isSetMachineHostnameWhole();
    case MACHINE_ASSIGN_STATUS:
      return isSetMachineAssignStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryHostingMachineOption)
      return this.equals((QueryHostingMachineOption)that);
    return false;
  }

  public boolean equals(QueryHostingMachineOption that) {
    if (that == null)
      return false;

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_machineInnerIPPartical = true && this.isSetMachineInnerIPPartical();
    boolean that_present_machineInnerIPPartical = true && that.isSetMachineInnerIPPartical();
    if (this_present_machineInnerIPPartical || that_present_machineInnerIPPartical) {
      if (!(this_present_machineInnerIPPartical && that_present_machineInnerIPPartical))
        return false;
      if (!this.machineInnerIPPartical.equals(that.machineInnerIPPartical))
        return false;
    }

    boolean this_present_machineInnerIPWhole = true && this.isSetMachineInnerIPWhole();
    boolean that_present_machineInnerIPWhole = true && that.isSetMachineInnerIPWhole();
    if (this_present_machineInnerIPWhole || that_present_machineInnerIPWhole) {
      if (!(this_present_machineInnerIPWhole && that_present_machineInnerIPWhole))
        return false;
      if (!this.machineInnerIPWhole.equals(that.machineInnerIPWhole))
        return false;
    }

    boolean this_present_machineOuterIPPartical = true && this.isSetMachineOuterIPPartical();
    boolean that_present_machineOuterIPPartical = true && that.isSetMachineOuterIPPartical();
    if (this_present_machineOuterIPPartical || that_present_machineOuterIPPartical) {
      if (!(this_present_machineOuterIPPartical && that_present_machineOuterIPPartical))
        return false;
      if (!this.machineOuterIPPartical.equals(that.machineOuterIPPartical))
        return false;
    }

    boolean this_present_machineOuterIPWhole = true && this.isSetMachineOuterIPWhole();
    boolean that_present_machineOuterIPWhole = true && that.isSetMachineOuterIPWhole();
    if (this_present_machineOuterIPWhole || that_present_machineOuterIPWhole) {
      if (!(this_present_machineOuterIPWhole && that_present_machineOuterIPWhole))
        return false;
      if (!this.machineOuterIPWhole.equals(that.machineOuterIPWhole))
        return false;
    }

    boolean this_present_machineHostnamePartical = true && this.isSetMachineHostnamePartical();
    boolean that_present_machineHostnamePartical = true && that.isSetMachineHostnamePartical();
    if (this_present_machineHostnamePartical || that_present_machineHostnamePartical) {
      if (!(this_present_machineHostnamePartical && that_present_machineHostnamePartical))
        return false;
      if (!this.machineHostnamePartical.equals(that.machineHostnamePartical))
        return false;
    }

    boolean this_present_machineHostnameWhole = true && this.isSetMachineHostnameWhole();
    boolean that_present_machineHostnameWhole = true && that.isSetMachineHostnameWhole();
    if (this_present_machineHostnameWhole || that_present_machineHostnameWhole) {
      if (!(this_present_machineHostnameWhole && that_present_machineHostnameWhole))
        return false;
      if (!this.machineHostnameWhole.equals(that.machineHostnameWhole))
        return false;
    }

    boolean this_present_machineAssignStatus = true && this.isSetMachineAssignStatus();
    boolean that_present_machineAssignStatus = true && that.isSetMachineAssignStatus();
    if (this_present_machineAssignStatus || that_present_machineAssignStatus) {
      if (!(this_present_machineAssignStatus && that_present_machineAssignStatus))
        return false;
      if (!this.machineAssignStatus.equals(that.machineAssignStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryHostingMachineOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInnerIPPartical()).compareTo(other.isSetMachineInnerIPPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInnerIPPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInnerIPPartical, other.machineInnerIPPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInnerIPWhole()).compareTo(other.isSetMachineInnerIPWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInnerIPWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInnerIPWhole, other.machineInnerIPWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineOuterIPPartical()).compareTo(other.isSetMachineOuterIPPartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineOuterIPPartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineOuterIPPartical, other.machineOuterIPPartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineOuterIPWhole()).compareTo(other.isSetMachineOuterIPWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineOuterIPWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineOuterIPWhole, other.machineOuterIPWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineHostnamePartical()).compareTo(other.isSetMachineHostnamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineHostnamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineHostnamePartical, other.machineHostnamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineHostnameWhole()).compareTo(other.isSetMachineHostnameWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineHostnameWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineHostnameWhole, other.machineHostnameWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineAssignStatus()).compareTo(other.isSetMachineAssignStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineAssignStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineAssignStatus, other.machineAssignStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryHostingMachineOption(");
    boolean first = true;

    if (isSetMachineId()) {
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetMachineInnerIPPartical()) {
      if (!first) sb.append(", ");
      sb.append("machineInnerIPPartical:");
      if (this.machineInnerIPPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.machineInnerIPPartical);
      }
      first = false;
    }
    if (isSetMachineInnerIPWhole()) {
      if (!first) sb.append(", ");
      sb.append("machineInnerIPWhole:");
      if (this.machineInnerIPWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.machineInnerIPWhole);
      }
      first = false;
    }
    if (isSetMachineOuterIPPartical()) {
      if (!first) sb.append(", ");
      sb.append("machineOuterIPPartical:");
      if (this.machineOuterIPPartical == null) {
        sb.append("null");
      } else {
        sb.append(this.machineOuterIPPartical);
      }
      first = false;
    }
    if (isSetMachineOuterIPWhole()) {
      if (!first) sb.append(", ");
      sb.append("machineOuterIPWhole:");
      if (this.machineOuterIPWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.machineOuterIPWhole);
      }
      first = false;
    }
    if (isSetMachineHostnamePartical()) {
      if (!first) sb.append(", ");
      sb.append("machineHostnamePartical:");
      if (this.machineHostnamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.machineHostnamePartical);
      }
      first = false;
    }
    if (isSetMachineHostnameWhole()) {
      if (!first) sb.append(", ");
      sb.append("machineHostnameWhole:");
      if (this.machineHostnameWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.machineHostnameWhole);
      }
      first = false;
    }
    if (isSetMachineAssignStatus()) {
      if (!first) sb.append(", ");
      sb.append("machineAssignStatus:");
      if (this.machineAssignStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.machineAssignStatus);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryHostingMachineOptionStandardSchemeFactory implements SchemeFactory {
    public QueryHostingMachineOptionStandardScheme getScheme() {
      return new QueryHostingMachineOptionStandardScheme();
    }
  }

  private static class QueryHostingMachineOptionStandardScheme extends StandardScheme<QueryHostingMachineOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryHostingMachineOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MACHINE_INNER_IPPARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineInnerIPPartical = iprot.readString();
              struct.setMachineInnerIPParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MACHINE_INNER_IPWHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineInnerIPWhole = iprot.readString();
              struct.setMachineInnerIPWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MACHINE_OUTER_IPPARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineOuterIPPartical = iprot.readString();
              struct.setMachineOuterIPParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MACHINE_OUTER_IPWHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineOuterIPWhole = iprot.readString();
              struct.setMachineOuterIPWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MACHINE_HOSTNAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineHostnamePartical = iprot.readString();
              struct.setMachineHostnameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MACHINE_HOSTNAME_WHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineHostnameWhole = iprot.readString();
              struct.setMachineHostnameWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MACHINE_ASSIGN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.machineAssignStatus = HostingMachineAssignStatus.findByValue(iprot.readI32());
              struct.setMachineAssignStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryHostingMachineOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.machineInnerIPPartical != null) {
        if (struct.isSetMachineInnerIPPartical()) {
          oprot.writeFieldBegin(MACHINE_INNER_IPPARTICAL_FIELD_DESC);
          oprot.writeString(struct.machineInnerIPPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineInnerIPWhole != null) {
        if (struct.isSetMachineInnerIPWhole()) {
          oprot.writeFieldBegin(MACHINE_INNER_IPWHOLE_FIELD_DESC);
          oprot.writeString(struct.machineInnerIPWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineOuterIPPartical != null) {
        if (struct.isSetMachineOuterIPPartical()) {
          oprot.writeFieldBegin(MACHINE_OUTER_IPPARTICAL_FIELD_DESC);
          oprot.writeString(struct.machineOuterIPPartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineOuterIPWhole != null) {
        if (struct.isSetMachineOuterIPWhole()) {
          oprot.writeFieldBegin(MACHINE_OUTER_IPWHOLE_FIELD_DESC);
          oprot.writeString(struct.machineOuterIPWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineHostnamePartical != null) {
        if (struct.isSetMachineHostnamePartical()) {
          oprot.writeFieldBegin(MACHINE_HOSTNAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.machineHostnamePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineHostnameWhole != null) {
        if (struct.isSetMachineHostnameWhole()) {
          oprot.writeFieldBegin(MACHINE_HOSTNAME_WHOLE_FIELD_DESC);
          oprot.writeString(struct.machineHostnameWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineAssignStatus != null) {
        if (struct.isSetMachineAssignStatus()) {
          oprot.writeFieldBegin(MACHINE_ASSIGN_STATUS_FIELD_DESC);
          oprot.writeI32(struct.machineAssignStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryHostingMachineOptionTupleSchemeFactory implements SchemeFactory {
    public QueryHostingMachineOptionTupleScheme getScheme() {
      return new QueryHostingMachineOptionTupleScheme();
    }
  }

  private static class QueryHostingMachineOptionTupleScheme extends TupleScheme<QueryHostingMachineOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryHostingMachineOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMachineId()) {
        optionals.set(0);
      }
      if (struct.isSetMachineInnerIPPartical()) {
        optionals.set(1);
      }
      if (struct.isSetMachineInnerIPWhole()) {
        optionals.set(2);
      }
      if (struct.isSetMachineOuterIPPartical()) {
        optionals.set(3);
      }
      if (struct.isSetMachineOuterIPWhole()) {
        optionals.set(4);
      }
      if (struct.isSetMachineHostnamePartical()) {
        optionals.set(5);
      }
      if (struct.isSetMachineHostnameWhole()) {
        optionals.set(6);
      }
      if (struct.isSetMachineAssignStatus()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetMachineInnerIPPartical()) {
        oprot.writeString(struct.machineInnerIPPartical);
      }
      if (struct.isSetMachineInnerIPWhole()) {
        oprot.writeString(struct.machineInnerIPWhole);
      }
      if (struct.isSetMachineOuterIPPartical()) {
        oprot.writeString(struct.machineOuterIPPartical);
      }
      if (struct.isSetMachineOuterIPWhole()) {
        oprot.writeString(struct.machineOuterIPWhole);
      }
      if (struct.isSetMachineHostnamePartical()) {
        oprot.writeString(struct.machineHostnamePartical);
      }
      if (struct.isSetMachineHostnameWhole()) {
        oprot.writeString(struct.machineHostnameWhole);
      }
      if (struct.isSetMachineAssignStatus()) {
        oprot.writeI32(struct.machineAssignStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryHostingMachineOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.machineInnerIPPartical = iprot.readString();
        struct.setMachineInnerIPParticalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.machineInnerIPWhole = iprot.readString();
        struct.setMachineInnerIPWholeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.machineOuterIPPartical = iprot.readString();
        struct.setMachineOuterIPParticalIsSet(true);
      }
      if (incoming.get(4)) {
        struct.machineOuterIPWhole = iprot.readString();
        struct.setMachineOuterIPWholeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.machineHostnamePartical = iprot.readString();
        struct.setMachineHostnameParticalIsSet(true);
      }
      if (incoming.get(6)) {
        struct.machineHostnameWhole = iprot.readString();
        struct.setMachineHostnameWholeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.machineAssignStatus = HostingMachineAssignStatus.findByValue(iprot.readI32());
        struct.setMachineAssignStatusIsSet(true);
      }
    }
  }

}

