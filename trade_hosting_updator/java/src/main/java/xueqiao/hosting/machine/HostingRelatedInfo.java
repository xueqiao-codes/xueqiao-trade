/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机机器实体关联信息
 */
public class HostingRelatedInfo implements org.apache.thrift.TBase<HostingRelatedInfo, HostingRelatedInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingRelatedInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingRelatedInfo");

  private static final org.apache.thrift.protocol.TField RELATED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyGroupId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ACTIVED_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activedEndTimestamp", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MACHINE_INNER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInnerIP", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MACHINE_OUTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("machineOuterIP", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingRelatedInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingRelatedInfoTupleSchemeFactory());
  }

  public long relatedId; // optional
  public int companyId; // optional
  public int companyGroupId; // optional
  public long machineId; // optional
  public int activeStartTimestamp; // optional
  public int activedEndTimestamp; // optional
  public String machineInnerIP; // optional
  public String machineOuterIP; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RELATED_ID((short)1, "relatedId"),
    COMPANY_ID((short)2, "companyId"),
    COMPANY_GROUP_ID((short)3, "companyGroupId"),
    MACHINE_ID((short)4, "machineId"),
    ACTIVE_START_TIMESTAMP((short)5, "activeStartTimestamp"),
    ACTIVED_END_TIMESTAMP((short)6, "activedEndTimestamp"),
    MACHINE_INNER_IP((short)7, "machineInnerIP"),
    MACHINE_OUTER_IP((short)8, "machineOuterIP"),
    CREATE_TIMESTAMP((short)10, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)11, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RELATED_ID
          return RELATED_ID;
        case 2: // COMPANY_ID
          return COMPANY_ID;
        case 3: // COMPANY_GROUP_ID
          return COMPANY_GROUP_ID;
        case 4: // MACHINE_ID
          return MACHINE_ID;
        case 5: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 6: // ACTIVED_END_TIMESTAMP
          return ACTIVED_END_TIMESTAMP;
        case 7: // MACHINE_INNER_IP
          return MACHINE_INNER_IP;
        case 8: // MACHINE_OUTER_IP
          return MACHINE_OUTER_IP;
        case 10: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 11: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RELATEDID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __COMPANYGROUPID_ISSET_ID = 2;
  private static final int __MACHINEID_ISSET_ID = 3;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 4;
  private static final int __ACTIVEDENDTIMESTAMP_ISSET_ID = 5;
  private static final int __CREATETIMESTAMP_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.RELATED_ID,_Fields.COMPANY_ID,_Fields.COMPANY_GROUP_ID,_Fields.MACHINE_ID,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVED_END_TIMESTAMP,_Fields.MACHINE_INNER_IP,_Fields.MACHINE_OUTER_IP,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RELATED_ID, new org.apache.thrift.meta_data.FieldMetaData("relatedId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPANY_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("companyGroupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACTIVED_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activedEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MACHINE_INNER_IP, new org.apache.thrift.meta_data.FieldMetaData("machineInnerIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_OUTER_IP, new org.apache.thrift.meta_data.FieldMetaData("machineOuterIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingRelatedInfo.class, metaDataMap);
  }

  public HostingRelatedInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingRelatedInfo(HostingRelatedInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.relatedId = other.relatedId;
    this.companyId = other.companyId;
    this.companyGroupId = other.companyGroupId;
    this.machineId = other.machineId;
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activedEndTimestamp = other.activedEndTimestamp;
    if (other.isSetMachineInnerIP()) {
      this.machineInnerIP = other.machineInnerIP;
    }
    if (other.isSetMachineOuterIP()) {
      this.machineOuterIP = other.machineOuterIP;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingRelatedInfo deepCopy() {
    return new HostingRelatedInfo(this);
  }

  @Override
  public void clear() {
    setRelatedIdIsSet(false);
    this.relatedId = 0;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setCompanyGroupIdIsSet(false);
    this.companyGroupId = 0;
    setMachineIdIsSet(false);
    this.machineId = 0;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActivedEndTimestampIsSet(false);
    this.activedEndTimestamp = 0;
    this.machineInnerIP = null;
    this.machineOuterIP = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public long getRelatedId() {
    return this.relatedId;
  }

  public HostingRelatedInfo setRelatedId(long relatedId) {
    this.relatedId = relatedId;
    setRelatedIdIsSet(true);
    return this;
  }

  public void unsetRelatedId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDID_ISSET_ID);
  }

  /** Returns true if field relatedId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDID_ISSET_ID);
  }

  public void setRelatedIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDID_ISSET_ID, value);
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public HostingRelatedInfo setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getCompanyGroupId() {
    return this.companyGroupId;
  }

  public HostingRelatedInfo setCompanyGroupId(int companyGroupId) {
    this.companyGroupId = companyGroupId;
    setCompanyGroupIdIsSet(true);
    return this;
  }

  public void unsetCompanyGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID);
  }

  /** Returns true if field companyGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID);
  }

  public void setCompanyGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYGROUPID_ISSET_ID, value);
  }

  public long getMachineId() {
    return this.machineId;
  }

  public HostingRelatedInfo setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public int getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public HostingRelatedInfo setActiveStartTimestamp(int activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public int getActivedEndTimestamp() {
    return this.activedEndTimestamp;
  }

  public HostingRelatedInfo setActivedEndTimestamp(int activedEndTimestamp) {
    this.activedEndTimestamp = activedEndTimestamp;
    setActivedEndTimestampIsSet(true);
    return this;
  }

  public void unsetActivedEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEDENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activedEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActivedEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEDENDTIMESTAMP_ISSET_ID);
  }

  public void setActivedEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEDENDTIMESTAMP_ISSET_ID, value);
  }

  public String getMachineInnerIP() {
    return this.machineInnerIP;
  }

  public HostingRelatedInfo setMachineInnerIP(String machineInnerIP) {
    this.machineInnerIP = machineInnerIP;
    return this;
  }

  public void unsetMachineInnerIP() {
    this.machineInnerIP = null;
  }

  /** Returns true if field machineInnerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInnerIP() {
    return this.machineInnerIP != null;
  }

  public void setMachineInnerIPIsSet(boolean value) {
    if (!value) {
      this.machineInnerIP = null;
    }
  }

  public String getMachineOuterIP() {
    return this.machineOuterIP;
  }

  public HostingRelatedInfo setMachineOuterIP(String machineOuterIP) {
    this.machineOuterIP = machineOuterIP;
    return this;
  }

  public void unsetMachineOuterIP() {
    this.machineOuterIP = null;
  }

  /** Returns true if field machineOuterIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineOuterIP() {
    return this.machineOuterIP != null;
  }

  public void setMachineOuterIPIsSet(boolean value) {
    if (!value) {
      this.machineOuterIP = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingRelatedInfo setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingRelatedInfo setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RELATED_ID:
      if (value == null) {
        unsetRelatedId();
      } else {
        setRelatedId((Long)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case COMPANY_GROUP_ID:
      if (value == null) {
        unsetCompanyGroupId();
      } else {
        setCompanyGroupId((Integer)value);
      }
      break;

    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Integer)value);
      }
      break;

    case ACTIVED_END_TIMESTAMP:
      if (value == null) {
        unsetActivedEndTimestamp();
      } else {
        setActivedEndTimestamp((Integer)value);
      }
      break;

    case MACHINE_INNER_IP:
      if (value == null) {
        unsetMachineInnerIP();
      } else {
        setMachineInnerIP((String)value);
      }
      break;

    case MACHINE_OUTER_IP:
      if (value == null) {
        unsetMachineOuterIP();
      } else {
        setMachineOuterIP((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RELATED_ID:
      return Long.valueOf(getRelatedId());

    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case COMPANY_GROUP_ID:
      return Integer.valueOf(getCompanyGroupId());

    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case ACTIVE_START_TIMESTAMP:
      return Integer.valueOf(getActiveStartTimestamp());

    case ACTIVED_END_TIMESTAMP:
      return Integer.valueOf(getActivedEndTimestamp());

    case MACHINE_INNER_IP:
      return getMachineInnerIP();

    case MACHINE_OUTER_IP:
      return getMachineOuterIP();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RELATED_ID:
      return isSetRelatedId();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_GROUP_ID:
      return isSetCompanyGroupId();
    case MACHINE_ID:
      return isSetMachineId();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVED_END_TIMESTAMP:
      return isSetActivedEndTimestamp();
    case MACHINE_INNER_IP:
      return isSetMachineInnerIP();
    case MACHINE_OUTER_IP:
      return isSetMachineOuterIP();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingRelatedInfo)
      return this.equals((HostingRelatedInfo)that);
    return false;
  }

  public boolean equals(HostingRelatedInfo that) {
    if (that == null)
      return false;

    boolean this_present_relatedId = true && this.isSetRelatedId();
    boolean that_present_relatedId = true && that.isSetRelatedId();
    if (this_present_relatedId || that_present_relatedId) {
      if (!(this_present_relatedId && that_present_relatedId))
        return false;
      if (this.relatedId != that.relatedId)
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_companyGroupId = true && this.isSetCompanyGroupId();
    boolean that_present_companyGroupId = true && that.isSetCompanyGroupId();
    if (this_present_companyGroupId || that_present_companyGroupId) {
      if (!(this_present_companyGroupId && that_present_companyGroupId))
        return false;
      if (this.companyGroupId != that.companyGroupId)
        return false;
    }

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activedEndTimestamp = true && this.isSetActivedEndTimestamp();
    boolean that_present_activedEndTimestamp = true && that.isSetActivedEndTimestamp();
    if (this_present_activedEndTimestamp || that_present_activedEndTimestamp) {
      if (!(this_present_activedEndTimestamp && that_present_activedEndTimestamp))
        return false;
      if (this.activedEndTimestamp != that.activedEndTimestamp)
        return false;
    }

    boolean this_present_machineInnerIP = true && this.isSetMachineInnerIP();
    boolean that_present_machineInnerIP = true && that.isSetMachineInnerIP();
    if (this_present_machineInnerIP || that_present_machineInnerIP) {
      if (!(this_present_machineInnerIP && that_present_machineInnerIP))
        return false;
      if (!this.machineInnerIP.equals(that.machineInnerIP))
        return false;
    }

    boolean this_present_machineOuterIP = true && this.isSetMachineOuterIP();
    boolean that_present_machineOuterIP = true && that.isSetMachineOuterIP();
    if (this_present_machineOuterIP || that_present_machineOuterIP) {
      if (!(this_present_machineOuterIP && that_present_machineOuterIP))
        return false;
      if (!this.machineOuterIP.equals(that.machineOuterIP))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingRelatedInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRelatedId()).compareTo(other.isSetRelatedId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedId, other.relatedId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyGroupId()).compareTo(other.isSetCompanyGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyGroupId, other.companyGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActivedEndTimestamp()).compareTo(other.isSetActivedEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActivedEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activedEndTimestamp, other.activedEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInnerIP()).compareTo(other.isSetMachineInnerIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInnerIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInnerIP, other.machineInnerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineOuterIP()).compareTo(other.isSetMachineOuterIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineOuterIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineOuterIP, other.machineOuterIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingRelatedInfo(");
    boolean first = true;

    if (isSetRelatedId()) {
      sb.append("relatedId:");
      sb.append(this.relatedId);
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetCompanyGroupId()) {
      if (!first) sb.append(", ");
      sb.append("companyGroupId:");
      sb.append(this.companyGroupId);
      first = false;
    }
    if (isSetMachineId()) {
      if (!first) sb.append(", ");
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActivedEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activedEndTimestamp:");
      sb.append(this.activedEndTimestamp);
      first = false;
    }
    if (isSetMachineInnerIP()) {
      if (!first) sb.append(", ");
      sb.append("machineInnerIP:");
      if (this.machineInnerIP == null) {
        sb.append("null");
      } else {
        sb.append(this.machineInnerIP);
      }
      first = false;
    }
    if (isSetMachineOuterIP()) {
      if (!first) sb.append(", ");
      sb.append("machineOuterIP:");
      if (this.machineOuterIP == null) {
        sb.append("null");
      } else {
        sb.append(this.machineOuterIP);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingRelatedInfoStandardSchemeFactory implements SchemeFactory {
    public HostingRelatedInfoStandardScheme getScheme() {
      return new HostingRelatedInfoStandardScheme();
    }
  }

  private static class HostingRelatedInfoStandardScheme extends StandardScheme<HostingRelatedInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingRelatedInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RELATED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relatedId = iprot.readI64();
              struct.setRelatedIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyGroupId = iprot.readI32();
              struct.setCompanyGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activeStartTimestamp = iprot.readI32();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACTIVED_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.activedEndTimestamp = iprot.readI32();
              struct.setActivedEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MACHINE_INNER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineInnerIP = iprot.readString();
              struct.setMachineInnerIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MACHINE_OUTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineOuterIP = iprot.readString();
              struct.setMachineOuterIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingRelatedInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRelatedId()) {
        oprot.writeFieldBegin(RELATED_ID_FIELD_DESC);
        oprot.writeI64(struct.relatedId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyGroupId()) {
        oprot.writeFieldBegin(COMPANY_GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.companyGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActivedEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVED_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.activedEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.machineInnerIP != null) {
        if (struct.isSetMachineInnerIP()) {
          oprot.writeFieldBegin(MACHINE_INNER_IP_FIELD_DESC);
          oprot.writeString(struct.machineInnerIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineOuterIP != null) {
        if (struct.isSetMachineOuterIP()) {
          oprot.writeFieldBegin(MACHINE_OUTER_IP_FIELD_DESC);
          oprot.writeString(struct.machineOuterIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingRelatedInfoTupleSchemeFactory implements SchemeFactory {
    public HostingRelatedInfoTupleScheme getScheme() {
      return new HostingRelatedInfoTupleScheme();
    }
  }

  private static class HostingRelatedInfoTupleScheme extends TupleScheme<HostingRelatedInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingRelatedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRelatedId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyGroupId()) {
        optionals.set(2);
      }
      if (struct.isSetMachineId()) {
        optionals.set(3);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetActivedEndTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetMachineInnerIP()) {
        optionals.set(6);
      }
      if (struct.isSetMachineOuterIP()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetRelatedId()) {
        oprot.writeI64(struct.relatedId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetCompanyGroupId()) {
        oprot.writeI32(struct.companyGroupId);
      }
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI32(struct.activeStartTimestamp);
      }
      if (struct.isSetActivedEndTimestamp()) {
        oprot.writeI32(struct.activedEndTimestamp);
      }
      if (struct.isSetMachineInnerIP()) {
        oprot.writeString(struct.machineInnerIP);
      }
      if (struct.isSetMachineOuterIP()) {
        oprot.writeString(struct.machineOuterIP);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingRelatedInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.relatedId = iprot.readI64();
        struct.setRelatedIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyGroupId = iprot.readI32();
        struct.setCompanyGroupIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.activeStartTimestamp = iprot.readI32();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.activedEndTimestamp = iprot.readI32();
        struct.setActivedEndTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.machineInnerIP = iprot.readString();
        struct.setMachineInnerIPIsSet(true);
      }
      if (incoming.get(7)) {
        struct.machineOuterIP = iprot.readString();
        struct.setMachineOuterIPIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

