/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.machine;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机机器实体的描述
 */
public class HostingMachine implements org.apache.thrift.TBase<HostingMachine, HostingMachine._Fields>, java.io.Serializable, Cloneable, Comparable<HostingMachine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingMachine");

  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MACHINE_INNER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInnerIP", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField MACHINE_OUTER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("machineOuterIP", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MACHINE_HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("machineHostname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MACHINE_SPEC_FIELD_DESC = new org.apache.thrift.protocol.TField("machineSpec", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField MACHINE_RUNNING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("machineRunningStatus", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField MACHINE_ASSIGN_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("machineAssignStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingMachineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingMachineTupleSchemeFactory());
  }

  public long machineId; // optional
  public String machineInnerIP; // optional
  public String machineOuterIP; // optional
  public String machineHostname; // optional
  public HostingMachineSpec machineSpec; // optional
  /**
   * 
   * @see HostingMachineRunningStatus
   */
  public HostingMachineRunningStatus machineRunningStatus; // optional
  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public HostingMachineAssignStatus machineAssignStatus; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional
  public String instanceId; // optional
  public String regionId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MACHINE_ID((short)1, "machineId"),
    MACHINE_INNER_IP((short)2, "machineInnerIP"),
    MACHINE_OUTER_IP((short)3, "machineOuterIP"),
    MACHINE_HOSTNAME((short)4, "machineHostname"),
    MACHINE_SPEC((short)5, "machineSpec"),
    /**
     * 
     * @see HostingMachineRunningStatus
     */
    MACHINE_RUNNING_STATUS((short)6, "machineRunningStatus"),
    /**
     * 
     * @see HostingMachineAssignStatus
     */
    MACHINE_ASSIGN_STATUS((short)7, "machineAssignStatus"),
    CREATE_TIMESTAMP((short)13, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)14, "lastmodifyTimestamp"),
    INSTANCE_ID((short)21, "instanceId"),
    REGION_ID((short)22, "regionId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MACHINE_ID
          return MACHINE_ID;
        case 2: // MACHINE_INNER_IP
          return MACHINE_INNER_IP;
        case 3: // MACHINE_OUTER_IP
          return MACHINE_OUTER_IP;
        case 4: // MACHINE_HOSTNAME
          return MACHINE_HOSTNAME;
        case 5: // MACHINE_SPEC
          return MACHINE_SPEC;
        case 6: // MACHINE_RUNNING_STATUS
          return MACHINE_RUNNING_STATUS;
        case 7: // MACHINE_ASSIGN_STATUS
          return MACHINE_ASSIGN_STATUS;
        case 13: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 14: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        case 21: // INSTANCE_ID
          return INSTANCE_ID;
        case 22: // REGION_ID
          return REGION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MACHINEID_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MACHINE_ID,_Fields.MACHINE_INNER_IP,_Fields.MACHINE_OUTER_IP,_Fields.MACHINE_HOSTNAME,_Fields.MACHINE_SPEC,_Fields.MACHINE_RUNNING_STATUS,_Fields.MACHINE_ASSIGN_STATUS,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP,_Fields.INSTANCE_ID,_Fields.REGION_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MACHINE_INNER_IP, new org.apache.thrift.meta_data.FieldMetaData("machineInnerIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_OUTER_IP, new org.apache.thrift.meta_data.FieldMetaData("machineOuterIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("machineHostname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_SPEC, new org.apache.thrift.meta_data.FieldMetaData("machineSpec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingMachineSpec.class)));
    tmpMap.put(_Fields.MACHINE_RUNNING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("machineRunningStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingMachineRunningStatus.class)));
    tmpMap.put(_Fields.MACHINE_ASSIGN_STATUS, new org.apache.thrift.meta_data.FieldMetaData("machineAssignStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingMachineAssignStatus.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("instanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingMachine.class, metaDataMap);
  }

  public HostingMachine() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingMachine(HostingMachine other) {
    __isset_bitfield = other.__isset_bitfield;
    this.machineId = other.machineId;
    if (other.isSetMachineInnerIP()) {
      this.machineInnerIP = other.machineInnerIP;
    }
    if (other.isSetMachineOuterIP()) {
      this.machineOuterIP = other.machineOuterIP;
    }
    if (other.isSetMachineHostname()) {
      this.machineHostname = other.machineHostname;
    }
    if (other.isSetMachineSpec()) {
      this.machineSpec = new HostingMachineSpec(other.machineSpec);
    }
    if (other.isSetMachineRunningStatus()) {
      this.machineRunningStatus = other.machineRunningStatus;
    }
    if (other.isSetMachineAssignStatus()) {
      this.machineAssignStatus = other.machineAssignStatus;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
    if (other.isSetInstanceId()) {
      this.instanceId = other.instanceId;
    }
    if (other.isSetRegionId()) {
      this.regionId = other.regionId;
    }
  }

  public HostingMachine deepCopy() {
    return new HostingMachine(this);
  }

  @Override
  public void clear() {
    setMachineIdIsSet(false);
    this.machineId = 0;
    this.machineInnerIP = null;
    this.machineOuterIP = null;
    this.machineHostname = null;
    this.machineSpec = null;
    this.machineRunningStatus = null;
    this.machineAssignStatus = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
    this.instanceId = null;
    this.regionId = null;
  }

  public long getMachineId() {
    return this.machineId;
  }

  public HostingMachine setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public String getMachineInnerIP() {
    return this.machineInnerIP;
  }

  public HostingMachine setMachineInnerIP(String machineInnerIP) {
    this.machineInnerIP = machineInnerIP;
    return this;
  }

  public void unsetMachineInnerIP() {
    this.machineInnerIP = null;
  }

  /** Returns true if field machineInnerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInnerIP() {
    return this.machineInnerIP != null;
  }

  public void setMachineInnerIPIsSet(boolean value) {
    if (!value) {
      this.machineInnerIP = null;
    }
  }

  public String getMachineOuterIP() {
    return this.machineOuterIP;
  }

  public HostingMachine setMachineOuterIP(String machineOuterIP) {
    this.machineOuterIP = machineOuterIP;
    return this;
  }

  public void unsetMachineOuterIP() {
    this.machineOuterIP = null;
  }

  /** Returns true if field machineOuterIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineOuterIP() {
    return this.machineOuterIP != null;
  }

  public void setMachineOuterIPIsSet(boolean value) {
    if (!value) {
      this.machineOuterIP = null;
    }
  }

  public String getMachineHostname() {
    return this.machineHostname;
  }

  public HostingMachine setMachineHostname(String machineHostname) {
    this.machineHostname = machineHostname;
    return this;
  }

  public void unsetMachineHostname() {
    this.machineHostname = null;
  }

  /** Returns true if field machineHostname is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineHostname() {
    return this.machineHostname != null;
  }

  public void setMachineHostnameIsSet(boolean value) {
    if (!value) {
      this.machineHostname = null;
    }
  }

  public HostingMachineSpec getMachineSpec() {
    return this.machineSpec;
  }

  public HostingMachine setMachineSpec(HostingMachineSpec machineSpec) {
    this.machineSpec = machineSpec;
    return this;
  }

  public void unsetMachineSpec() {
    this.machineSpec = null;
  }

  /** Returns true if field machineSpec is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineSpec() {
    return this.machineSpec != null;
  }

  public void setMachineSpecIsSet(boolean value) {
    if (!value) {
      this.machineSpec = null;
    }
  }

  /**
   * 
   * @see HostingMachineRunningStatus
   */
  public HostingMachineRunningStatus getMachineRunningStatus() {
    return this.machineRunningStatus;
  }

  /**
   * 
   * @see HostingMachineRunningStatus
   */
  public HostingMachine setMachineRunningStatus(HostingMachineRunningStatus machineRunningStatus) {
    this.machineRunningStatus = machineRunningStatus;
    return this;
  }

  public void unsetMachineRunningStatus() {
    this.machineRunningStatus = null;
  }

  /** Returns true if field machineRunningStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineRunningStatus() {
    return this.machineRunningStatus != null;
  }

  public void setMachineRunningStatusIsSet(boolean value) {
    if (!value) {
      this.machineRunningStatus = null;
    }
  }

  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public HostingMachineAssignStatus getMachineAssignStatus() {
    return this.machineAssignStatus;
  }

  /**
   * 
   * @see HostingMachineAssignStatus
   */
  public HostingMachine setMachineAssignStatus(HostingMachineAssignStatus machineAssignStatus) {
    this.machineAssignStatus = machineAssignStatus;
    return this;
  }

  public void unsetMachineAssignStatus() {
    this.machineAssignStatus = null;
  }

  /** Returns true if field machineAssignStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineAssignStatus() {
    return this.machineAssignStatus != null;
  }

  public void setMachineAssignStatusIsSet(boolean value) {
    if (!value) {
      this.machineAssignStatus = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingMachine setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingMachine setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public String getInstanceId() {
    return this.instanceId;
  }

  public HostingMachine setInstanceId(String instanceId) {
    this.instanceId = instanceId;
    return this;
  }

  public void unsetInstanceId() {
    this.instanceId = null;
  }

  /** Returns true if field instanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetInstanceId() {
    return this.instanceId != null;
  }

  public void setInstanceIdIsSet(boolean value) {
    if (!value) {
      this.instanceId = null;
    }
  }

  public String getRegionId() {
    return this.regionId;
  }

  public HostingMachine setRegionId(String regionId) {
    this.regionId = regionId;
    return this;
  }

  public void unsetRegionId() {
    this.regionId = null;
  }

  /** Returns true if field regionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionId() {
    return this.regionId != null;
  }

  public void setRegionIdIsSet(boolean value) {
    if (!value) {
      this.regionId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case MACHINE_INNER_IP:
      if (value == null) {
        unsetMachineInnerIP();
      } else {
        setMachineInnerIP((String)value);
      }
      break;

    case MACHINE_OUTER_IP:
      if (value == null) {
        unsetMachineOuterIP();
      } else {
        setMachineOuterIP((String)value);
      }
      break;

    case MACHINE_HOSTNAME:
      if (value == null) {
        unsetMachineHostname();
      } else {
        setMachineHostname((String)value);
      }
      break;

    case MACHINE_SPEC:
      if (value == null) {
        unsetMachineSpec();
      } else {
        setMachineSpec((HostingMachineSpec)value);
      }
      break;

    case MACHINE_RUNNING_STATUS:
      if (value == null) {
        unsetMachineRunningStatus();
      } else {
        setMachineRunningStatus((HostingMachineRunningStatus)value);
      }
      break;

    case MACHINE_ASSIGN_STATUS:
      if (value == null) {
        unsetMachineAssignStatus();
      } else {
        setMachineAssignStatus((HostingMachineAssignStatus)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    case INSTANCE_ID:
      if (value == null) {
        unsetInstanceId();
      } else {
        setInstanceId((String)value);
      }
      break;

    case REGION_ID:
      if (value == null) {
        unsetRegionId();
      } else {
        setRegionId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case MACHINE_INNER_IP:
      return getMachineInnerIP();

    case MACHINE_OUTER_IP:
      return getMachineOuterIP();

    case MACHINE_HOSTNAME:
      return getMachineHostname();

    case MACHINE_SPEC:
      return getMachineSpec();

    case MACHINE_RUNNING_STATUS:
      return getMachineRunningStatus();

    case MACHINE_ASSIGN_STATUS:
      return getMachineAssignStatus();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    case INSTANCE_ID:
      return getInstanceId();

    case REGION_ID:
      return getRegionId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MACHINE_ID:
      return isSetMachineId();
    case MACHINE_INNER_IP:
      return isSetMachineInnerIP();
    case MACHINE_OUTER_IP:
      return isSetMachineOuterIP();
    case MACHINE_HOSTNAME:
      return isSetMachineHostname();
    case MACHINE_SPEC:
      return isSetMachineSpec();
    case MACHINE_RUNNING_STATUS:
      return isSetMachineRunningStatus();
    case MACHINE_ASSIGN_STATUS:
      return isSetMachineAssignStatus();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    case INSTANCE_ID:
      return isSetInstanceId();
    case REGION_ID:
      return isSetRegionId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingMachine)
      return this.equals((HostingMachine)that);
    return false;
  }

  public boolean equals(HostingMachine that) {
    if (that == null)
      return false;

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_machineInnerIP = true && this.isSetMachineInnerIP();
    boolean that_present_machineInnerIP = true && that.isSetMachineInnerIP();
    if (this_present_machineInnerIP || that_present_machineInnerIP) {
      if (!(this_present_machineInnerIP && that_present_machineInnerIP))
        return false;
      if (!this.machineInnerIP.equals(that.machineInnerIP))
        return false;
    }

    boolean this_present_machineOuterIP = true && this.isSetMachineOuterIP();
    boolean that_present_machineOuterIP = true && that.isSetMachineOuterIP();
    if (this_present_machineOuterIP || that_present_machineOuterIP) {
      if (!(this_present_machineOuterIP && that_present_machineOuterIP))
        return false;
      if (!this.machineOuterIP.equals(that.machineOuterIP))
        return false;
    }

    boolean this_present_machineHostname = true && this.isSetMachineHostname();
    boolean that_present_machineHostname = true && that.isSetMachineHostname();
    if (this_present_machineHostname || that_present_machineHostname) {
      if (!(this_present_machineHostname && that_present_machineHostname))
        return false;
      if (!this.machineHostname.equals(that.machineHostname))
        return false;
    }

    boolean this_present_machineSpec = true && this.isSetMachineSpec();
    boolean that_present_machineSpec = true && that.isSetMachineSpec();
    if (this_present_machineSpec || that_present_machineSpec) {
      if (!(this_present_machineSpec && that_present_machineSpec))
        return false;
      if (!this.machineSpec.equals(that.machineSpec))
        return false;
    }

    boolean this_present_machineRunningStatus = true && this.isSetMachineRunningStatus();
    boolean that_present_machineRunningStatus = true && that.isSetMachineRunningStatus();
    if (this_present_machineRunningStatus || that_present_machineRunningStatus) {
      if (!(this_present_machineRunningStatus && that_present_machineRunningStatus))
        return false;
      if (!this.machineRunningStatus.equals(that.machineRunningStatus))
        return false;
    }

    boolean this_present_machineAssignStatus = true && this.isSetMachineAssignStatus();
    boolean that_present_machineAssignStatus = true && that.isSetMachineAssignStatus();
    if (this_present_machineAssignStatus || that_present_machineAssignStatus) {
      if (!(this_present_machineAssignStatus && that_present_machineAssignStatus))
        return false;
      if (!this.machineAssignStatus.equals(that.machineAssignStatus))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    boolean this_present_instanceId = true && this.isSetInstanceId();
    boolean that_present_instanceId = true && that.isSetInstanceId();
    if (this_present_instanceId || that_present_instanceId) {
      if (!(this_present_instanceId && that_present_instanceId))
        return false;
      if (!this.instanceId.equals(that.instanceId))
        return false;
    }

    boolean this_present_regionId = true && this.isSetRegionId();
    boolean that_present_regionId = true && that.isSetRegionId();
    if (this_present_regionId || that_present_regionId) {
      if (!(this_present_regionId && that_present_regionId))
        return false;
      if (!this.regionId.equals(that.regionId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingMachine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInnerIP()).compareTo(other.isSetMachineInnerIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInnerIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInnerIP, other.machineInnerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineOuterIP()).compareTo(other.isSetMachineOuterIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineOuterIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineOuterIP, other.machineOuterIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineHostname()).compareTo(other.isSetMachineHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineHostname, other.machineHostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineSpec()).compareTo(other.isSetMachineSpec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineSpec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineSpec, other.machineSpec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineRunningStatus()).compareTo(other.isSetMachineRunningStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineRunningStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineRunningStatus, other.machineRunningStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineAssignStatus()).compareTo(other.isSetMachineAssignStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineAssignStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineAssignStatus, other.machineAssignStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInstanceId()).compareTo(other.isSetInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceId, other.instanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingMachine(");
    boolean first = true;

    if (isSetMachineId()) {
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetMachineInnerIP()) {
      if (!first) sb.append(", ");
      sb.append("machineInnerIP:");
      if (this.machineInnerIP == null) {
        sb.append("null");
      } else {
        sb.append(this.machineInnerIP);
      }
      first = false;
    }
    if (isSetMachineOuterIP()) {
      if (!first) sb.append(", ");
      sb.append("machineOuterIP:");
      if (this.machineOuterIP == null) {
        sb.append("null");
      } else {
        sb.append(this.machineOuterIP);
      }
      first = false;
    }
    if (isSetMachineHostname()) {
      if (!first) sb.append(", ");
      sb.append("machineHostname:");
      if (this.machineHostname == null) {
        sb.append("null");
      } else {
        sb.append(this.machineHostname);
      }
      first = false;
    }
    if (isSetMachineSpec()) {
      if (!first) sb.append(", ");
      sb.append("machineSpec:");
      if (this.machineSpec == null) {
        sb.append("null");
      } else {
        sb.append(this.machineSpec);
      }
      first = false;
    }
    if (isSetMachineRunningStatus()) {
      if (!first) sb.append(", ");
      sb.append("machineRunningStatus:");
      if (this.machineRunningStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.machineRunningStatus);
      }
      first = false;
    }
    if (isSetMachineAssignStatus()) {
      if (!first) sb.append(", ");
      sb.append("machineAssignStatus:");
      if (this.machineAssignStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.machineAssignStatus);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    if (isSetInstanceId()) {
      if (!first) sb.append(", ");
      sb.append("instanceId:");
      if (this.instanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceId);
      }
      first = false;
    }
    if (isSetRegionId()) {
      if (!first) sb.append(", ");
      sb.append("regionId:");
      if (this.regionId == null) {
        sb.append("null");
      } else {
        sb.append(this.regionId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (machineSpec != null) {
      machineSpec.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingMachineStandardSchemeFactory implements SchemeFactory {
    public HostingMachineStandardScheme getScheme() {
      return new HostingMachineStandardScheme();
    }
  }

  private static class HostingMachineStandardScheme extends StandardScheme<HostingMachine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingMachine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MACHINE_INNER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineInnerIP = iprot.readString();
              struct.setMachineInnerIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MACHINE_OUTER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineOuterIP = iprot.readString();
              struct.setMachineOuterIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MACHINE_HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineHostname = iprot.readString();
              struct.setMachineHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MACHINE_SPEC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.machineSpec = new HostingMachineSpec();
              struct.machineSpec.read(iprot);
              struct.setMachineSpecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MACHINE_RUNNING_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.machineRunningStatus = HostingMachineRunningStatus.findByValue(iprot.readI32());
              struct.setMachineRunningStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MACHINE_ASSIGN_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.machineAssignStatus = HostingMachineAssignStatus.findByValue(iprot.readI32());
              struct.setMachineAssignStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instanceId = iprot.readString();
              struct.setInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionId = iprot.readString();
              struct.setRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingMachine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.machineInnerIP != null) {
        if (struct.isSetMachineInnerIP()) {
          oprot.writeFieldBegin(MACHINE_INNER_IP_FIELD_DESC);
          oprot.writeString(struct.machineInnerIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineOuterIP != null) {
        if (struct.isSetMachineOuterIP()) {
          oprot.writeFieldBegin(MACHINE_OUTER_IP_FIELD_DESC);
          oprot.writeString(struct.machineOuterIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineHostname != null) {
        if (struct.isSetMachineHostname()) {
          oprot.writeFieldBegin(MACHINE_HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.machineHostname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineSpec != null) {
        if (struct.isSetMachineSpec()) {
          oprot.writeFieldBegin(MACHINE_SPEC_FIELD_DESC);
          struct.machineSpec.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineRunningStatus != null) {
        if (struct.isSetMachineRunningStatus()) {
          oprot.writeFieldBegin(MACHINE_RUNNING_STATUS_FIELD_DESC);
          oprot.writeI32(struct.machineRunningStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineAssignStatus != null) {
        if (struct.isSetMachineAssignStatus()) {
          oprot.writeFieldBegin(MACHINE_ASSIGN_STATUS_FIELD_DESC);
          oprot.writeI32(struct.machineAssignStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.instanceId != null) {
        if (struct.isSetInstanceId()) {
          oprot.writeFieldBegin(INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.instanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.regionId != null) {
        if (struct.isSetRegionId()) {
          oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
          oprot.writeString(struct.regionId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingMachineTupleSchemeFactory implements SchemeFactory {
    public HostingMachineTupleScheme getScheme() {
      return new HostingMachineTupleScheme();
    }
  }

  private static class HostingMachineTupleScheme extends TupleScheme<HostingMachine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingMachine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMachineId()) {
        optionals.set(0);
      }
      if (struct.isSetMachineInnerIP()) {
        optionals.set(1);
      }
      if (struct.isSetMachineOuterIP()) {
        optionals.set(2);
      }
      if (struct.isSetMachineHostname()) {
        optionals.set(3);
      }
      if (struct.isSetMachineSpec()) {
        optionals.set(4);
      }
      if (struct.isSetMachineRunningStatus()) {
        optionals.set(5);
      }
      if (struct.isSetMachineAssignStatus()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetInstanceId()) {
        optionals.set(9);
      }
      if (struct.isSetRegionId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetMachineInnerIP()) {
        oprot.writeString(struct.machineInnerIP);
      }
      if (struct.isSetMachineOuterIP()) {
        oprot.writeString(struct.machineOuterIP);
      }
      if (struct.isSetMachineHostname()) {
        oprot.writeString(struct.machineHostname);
      }
      if (struct.isSetMachineSpec()) {
        struct.machineSpec.write(oprot);
      }
      if (struct.isSetMachineRunningStatus()) {
        oprot.writeI32(struct.machineRunningStatus.getValue());
      }
      if (struct.isSetMachineAssignStatus()) {
        oprot.writeI32(struct.machineAssignStatus.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
      if (struct.isSetInstanceId()) {
        oprot.writeString(struct.instanceId);
      }
      if (struct.isSetRegionId()) {
        oprot.writeString(struct.regionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingMachine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.machineInnerIP = iprot.readString();
        struct.setMachineInnerIPIsSet(true);
      }
      if (incoming.get(2)) {
        struct.machineOuterIP = iprot.readString();
        struct.setMachineOuterIPIsSet(true);
      }
      if (incoming.get(3)) {
        struct.machineHostname = iprot.readString();
        struct.setMachineHostnameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.machineSpec = new HostingMachineSpec();
        struct.machineSpec.read(iprot);
        struct.setMachineSpecIsSet(true);
      }
      if (incoming.get(5)) {
        struct.machineRunningStatus = HostingMachineRunningStatus.findByValue(iprot.readI32());
        struct.setMachineRunningStatusIsSet(true);
      }
      if (incoming.get(6)) {
        struct.machineAssignStatus = HostingMachineAssignStatus.findByValue(iprot.readI32());
        struct.setMachineAssignStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.instanceId = iprot.readString();
        struct.setInstanceIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.regionId = iprot.readString();
        struct.setRegionIdIsSet(true);
      }
    }
  }

}

