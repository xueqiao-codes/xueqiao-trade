/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrder implements org.apache.thrift.TBase<HostingExecOrder, HostingExecOrder._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrder");

  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ACCOUNT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("accountSummary", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField UPSIDE_ORDER_REF_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideOrderRef", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_INPUT_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("orderInputExt", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField STATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("stateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField REVOKE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("revokeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField DEAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dealInfo", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField TRADE_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeSummary", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField NOTIFY_STATE_HANDLE_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyStateHandleInfos", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField RELATE_EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relateExecOrderId", org.apache.thrift.protocol.TType.I64, (short)18);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)22);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TTL_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("ttlTimestampMs", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField VERIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("verifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)25);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderTupleSchemeFactory());
  }

  public long execOrderId; // optional
  public int subUserId; // optional
  public HostingExecOrderDetail orderDetail; // optional
  public HostingExecOrderContractSummary contractSummary; // optional
  public HostingExecOrderTradeAccountSummary accountSummary; // optional
  public HostingExecOrderRef upsideOrderRef; // optional
  public HostingExecOrderInputExt orderInputExt; // optional
  public long subAccountId; // optional
  public HostingExecOrderStateInfo stateInfo; // optional
  public HostingExecOrderRevokeInfo revokeInfo; // optional
  public HostingExecOrderDealInfo dealInfo; // optional
  public HostingExecOrderTradeSummary tradeSummary; // optional
  public List<HostingUpsideNotifyStateHandleInfo> notifyStateHandleInfos; // optional
  public long relateExecOrderId; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public int version; // optional
  public String source; // optional
  public long ttlTimestampMs; // optional
  public long verifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_ORDER_ID((short)1, "execOrderId"),
    SUB_USER_ID((short)2, "subUserId"),
    ORDER_DETAIL((short)3, "orderDetail"),
    CONTRACT_SUMMARY((short)4, "contractSummary"),
    ACCOUNT_SUMMARY((short)5, "accountSummary"),
    UPSIDE_ORDER_REF((short)6, "upsideOrderRef"),
    ORDER_INPUT_EXT((short)7, "orderInputExt"),
    SUB_ACCOUNT_ID((short)8, "subAccountId"),
    STATE_INFO((short)11, "stateInfo"),
    REVOKE_INFO((short)12, "revokeInfo"),
    DEAL_INFO((short)15, "dealInfo"),
    TRADE_SUMMARY((short)16, "tradeSummary"),
    NOTIFY_STATE_HANDLE_INFOS((short)17, "notifyStateHandleInfos"),
    RELATE_EXEC_ORDER_ID((short)18, "relateExecOrderId"),
    CREATE_TIMESTAMP_MS((short)20, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)21, "lastmodifyTimestampMs"),
    VERSION((short)22, "version"),
    SOURCE((short)23, "source"),
    TTL_TIMESTAMP_MS((short)24, "ttlTimestampMs"),
    VERIFY_TIMESTAMP_MS((short)25, "verifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 2: // SUB_USER_ID
          return SUB_USER_ID;
        case 3: // ORDER_DETAIL
          return ORDER_DETAIL;
        case 4: // CONTRACT_SUMMARY
          return CONTRACT_SUMMARY;
        case 5: // ACCOUNT_SUMMARY
          return ACCOUNT_SUMMARY;
        case 6: // UPSIDE_ORDER_REF
          return UPSIDE_ORDER_REF;
        case 7: // ORDER_INPUT_EXT
          return ORDER_INPUT_EXT;
        case 8: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 11: // STATE_INFO
          return STATE_INFO;
        case 12: // REVOKE_INFO
          return REVOKE_INFO;
        case 15: // DEAL_INFO
          return DEAL_INFO;
        case 16: // TRADE_SUMMARY
          return TRADE_SUMMARY;
        case 17: // NOTIFY_STATE_HANDLE_INFOS
          return NOTIFY_STATE_HANDLE_INFOS;
        case 18: // RELATE_EXEC_ORDER_ID
          return RELATE_EXEC_ORDER_ID;
        case 20: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 21: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 22: // VERSION
          return VERSION;
        case 23: // SOURCE
          return SOURCE;
        case 24: // TTL_TIMESTAMP_MS
          return TTL_TIMESTAMP_MS;
        case 25: // VERIFY_TIMESTAMP_MS
          return VERIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECORDERID_ISSET_ID = 0;
  private static final int __SUBUSERID_ISSET_ID = 1;
  private static final int __SUBACCOUNTID_ISSET_ID = 2;
  private static final int __RELATEEXECORDERID_ISSET_ID = 3;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 4;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 5;
  private static final int __VERSION_ISSET_ID = 6;
  private static final int __TTLTIMESTAMPMS_ISSET_ID = 7;
  private static final int __VERIFYTIMESTAMPMS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_ORDER_ID,_Fields.SUB_USER_ID,_Fields.ORDER_DETAIL,_Fields.CONTRACT_SUMMARY,_Fields.ACCOUNT_SUMMARY,_Fields.UPSIDE_ORDER_REF,_Fields.ORDER_INPUT_EXT,_Fields.SUB_ACCOUNT_ID,_Fields.STATE_INFO,_Fields.REVOKE_INFO,_Fields.DEAL_INFO,_Fields.TRADE_SUMMARY,_Fields.NOTIFY_STATE_HANDLE_INFOS,_Fields.RELATE_EXEC_ORDER_ID,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.VERSION,_Fields.SOURCE,_Fields.TTL_TIMESTAMP_MS,_Fields.VERIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("orderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderDetail.class)));
    tmpMap.put(_Fields.CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("contractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderContractSummary.class)));
    tmpMap.put(_Fields.ACCOUNT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("accountSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderTradeAccountSummary.class)));
    tmpMap.put(_Fields.UPSIDE_ORDER_REF, new org.apache.thrift.meta_data.FieldMetaData("upsideOrderRef", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderRef.class)));
    tmpMap.put(_Fields.ORDER_INPUT_EXT, new org.apache.thrift.meta_data.FieldMetaData("orderInputExt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderInputExt.class)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("stateInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderStateInfo.class)));
    tmpMap.put(_Fields.REVOKE_INFO, new org.apache.thrift.meta_data.FieldMetaData("revokeInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderRevokeInfo.class)));
    tmpMap.put(_Fields.DEAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("dealInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderDealInfo.class)));
    tmpMap.put(_Fields.TRADE_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("tradeSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderTradeSummary.class)));
    tmpMap.put(_Fields.NOTIFY_STATE_HANDLE_INFOS, new org.apache.thrift.meta_data.FieldMetaData("notifyStateHandleInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingUpsideNotifyStateHandleInfo.class))));
    tmpMap.put(_Fields.RELATE_EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("relateExecOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TTL_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("ttlTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("verifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrder.class, metaDataMap);
  }

  public HostingExecOrder() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrder(HostingExecOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execOrderId = other.execOrderId;
    this.subUserId = other.subUserId;
    if (other.isSetOrderDetail()) {
      this.orderDetail = new HostingExecOrderDetail(other.orderDetail);
    }
    if (other.isSetContractSummary()) {
      this.contractSummary = new HostingExecOrderContractSummary(other.contractSummary);
    }
    if (other.isSetAccountSummary()) {
      this.accountSummary = new HostingExecOrderTradeAccountSummary(other.accountSummary);
    }
    if (other.isSetUpsideOrderRef()) {
      this.upsideOrderRef = new HostingExecOrderRef(other.upsideOrderRef);
    }
    if (other.isSetOrderInputExt()) {
      this.orderInputExt = new HostingExecOrderInputExt(other.orderInputExt);
    }
    this.subAccountId = other.subAccountId;
    if (other.isSetStateInfo()) {
      this.stateInfo = new HostingExecOrderStateInfo(other.stateInfo);
    }
    if (other.isSetRevokeInfo()) {
      this.revokeInfo = new HostingExecOrderRevokeInfo(other.revokeInfo);
    }
    if (other.isSetDealInfo()) {
      this.dealInfo = new HostingExecOrderDealInfo(other.dealInfo);
    }
    if (other.isSetTradeSummary()) {
      this.tradeSummary = new HostingExecOrderTradeSummary(other.tradeSummary);
    }
    if (other.isSetNotifyStateHandleInfos()) {
      List<HostingUpsideNotifyStateHandleInfo> __this__notifyStateHandleInfos = new ArrayList<HostingUpsideNotifyStateHandleInfo>(other.notifyStateHandleInfos.size());
      for (HostingUpsideNotifyStateHandleInfo other_element : other.notifyStateHandleInfos) {
        __this__notifyStateHandleInfos.add(new HostingUpsideNotifyStateHandleInfo(other_element));
      }
      this.notifyStateHandleInfos = __this__notifyStateHandleInfos;
    }
    this.relateExecOrderId = other.relateExecOrderId;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    this.version = other.version;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.ttlTimestampMs = other.ttlTimestampMs;
    this.verifyTimestampMs = other.verifyTimestampMs;
  }

  public HostingExecOrder deepCopy() {
    return new HostingExecOrder(this);
  }

  @Override
  public void clear() {
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    this.orderDetail = null;
    this.contractSummary = null;
    this.accountSummary = null;
    this.upsideOrderRef = null;
    this.orderInputExt = null;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.stateInfo = null;
    this.revokeInfo = null;
    this.dealInfo = null;
    this.tradeSummary = null;
    this.notifyStateHandleInfos = null;
    setRelateExecOrderIdIsSet(false);
    this.relateExecOrderId = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    setVersionIsSet(false);
    this.version = 0;
    this.source = null;
    setTtlTimestampMsIsSet(false);
    this.ttlTimestampMs = 0;
    setVerifyTimestampMsIsSet(false);
    this.verifyTimestampMs = 0;
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public HostingExecOrder setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingExecOrder setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public HostingExecOrderDetail getOrderDetail() {
    return this.orderDetail;
  }

  public HostingExecOrder setOrderDetail(HostingExecOrderDetail orderDetail) {
    this.orderDetail = orderDetail;
    return this;
  }

  public void unsetOrderDetail() {
    this.orderDetail = null;
  }

  /** Returns true if field orderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDetail() {
    return this.orderDetail != null;
  }

  public void setOrderDetailIsSet(boolean value) {
    if (!value) {
      this.orderDetail = null;
    }
  }

  public HostingExecOrderContractSummary getContractSummary() {
    return this.contractSummary;
  }

  public HostingExecOrder setContractSummary(HostingExecOrderContractSummary contractSummary) {
    this.contractSummary = contractSummary;
    return this;
  }

  public void unsetContractSummary() {
    this.contractSummary = null;
  }

  /** Returns true if field contractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSummary() {
    return this.contractSummary != null;
  }

  public void setContractSummaryIsSet(boolean value) {
    if (!value) {
      this.contractSummary = null;
    }
  }

  public HostingExecOrderTradeAccountSummary getAccountSummary() {
    return this.accountSummary;
  }

  public HostingExecOrder setAccountSummary(HostingExecOrderTradeAccountSummary accountSummary) {
    this.accountSummary = accountSummary;
    return this;
  }

  public void unsetAccountSummary() {
    this.accountSummary = null;
  }

  /** Returns true if field accountSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountSummary() {
    return this.accountSummary != null;
  }

  public void setAccountSummaryIsSet(boolean value) {
    if (!value) {
      this.accountSummary = null;
    }
  }

  public HostingExecOrderRef getUpsideOrderRef() {
    return this.upsideOrderRef;
  }

  public HostingExecOrder setUpsideOrderRef(HostingExecOrderRef upsideOrderRef) {
    this.upsideOrderRef = upsideOrderRef;
    return this;
  }

  public void unsetUpsideOrderRef() {
    this.upsideOrderRef = null;
  }

  /** Returns true if field upsideOrderRef is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideOrderRef() {
    return this.upsideOrderRef != null;
  }

  public void setUpsideOrderRefIsSet(boolean value) {
    if (!value) {
      this.upsideOrderRef = null;
    }
  }

  public HostingExecOrderInputExt getOrderInputExt() {
    return this.orderInputExt;
  }

  public HostingExecOrder setOrderInputExt(HostingExecOrderInputExt orderInputExt) {
    this.orderInputExt = orderInputExt;
    return this;
  }

  public void unsetOrderInputExt() {
    this.orderInputExt = null;
  }

  /** Returns true if field orderInputExt is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderInputExt() {
    return this.orderInputExt != null;
  }

  public void setOrderInputExtIsSet(boolean value) {
    if (!value) {
      this.orderInputExt = null;
    }
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingExecOrder setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public HostingExecOrderStateInfo getStateInfo() {
    return this.stateInfo;
  }

  public HostingExecOrder setStateInfo(HostingExecOrderStateInfo stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  public void unsetStateInfo() {
    this.stateInfo = null;
  }

  /** Returns true if field stateInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetStateInfo() {
    return this.stateInfo != null;
  }

  public void setStateInfoIsSet(boolean value) {
    if (!value) {
      this.stateInfo = null;
    }
  }

  public HostingExecOrderRevokeInfo getRevokeInfo() {
    return this.revokeInfo;
  }

  public HostingExecOrder setRevokeInfo(HostingExecOrderRevokeInfo revokeInfo) {
    this.revokeInfo = revokeInfo;
    return this;
  }

  public void unsetRevokeInfo() {
    this.revokeInfo = null;
  }

  /** Returns true if field revokeInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetRevokeInfo() {
    return this.revokeInfo != null;
  }

  public void setRevokeInfoIsSet(boolean value) {
    if (!value) {
      this.revokeInfo = null;
    }
  }

  public HostingExecOrderDealInfo getDealInfo() {
    return this.dealInfo;
  }

  public HostingExecOrder setDealInfo(HostingExecOrderDealInfo dealInfo) {
    this.dealInfo = dealInfo;
    return this;
  }

  public void unsetDealInfo() {
    this.dealInfo = null;
  }

  /** Returns true if field dealInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDealInfo() {
    return this.dealInfo != null;
  }

  public void setDealInfoIsSet(boolean value) {
    if (!value) {
      this.dealInfo = null;
    }
  }

  public HostingExecOrderTradeSummary getTradeSummary() {
    return this.tradeSummary;
  }

  public HostingExecOrder setTradeSummary(HostingExecOrderTradeSummary tradeSummary) {
    this.tradeSummary = tradeSummary;
    return this;
  }

  public void unsetTradeSummary() {
    this.tradeSummary = null;
  }

  /** Returns true if field tradeSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeSummary() {
    return this.tradeSummary != null;
  }

  public void setTradeSummaryIsSet(boolean value) {
    if (!value) {
      this.tradeSummary = null;
    }
  }

  public int getNotifyStateHandleInfosSize() {
    return (this.notifyStateHandleInfos == null) ? 0 : this.notifyStateHandleInfos.size();
  }

  public java.util.Iterator<HostingUpsideNotifyStateHandleInfo> getNotifyStateHandleInfosIterator() {
    return (this.notifyStateHandleInfos == null) ? null : this.notifyStateHandleInfos.iterator();
  }

  public void addToNotifyStateHandleInfos(HostingUpsideNotifyStateHandleInfo elem) {
    if (this.notifyStateHandleInfos == null) {
      this.notifyStateHandleInfos = new ArrayList<HostingUpsideNotifyStateHandleInfo>();
    }
    this.notifyStateHandleInfos.add(elem);
  }

  public List<HostingUpsideNotifyStateHandleInfo> getNotifyStateHandleInfos() {
    return this.notifyStateHandleInfos;
  }

  public HostingExecOrder setNotifyStateHandleInfos(List<HostingUpsideNotifyStateHandleInfo> notifyStateHandleInfos) {
    this.notifyStateHandleInfos = notifyStateHandleInfos;
    return this;
  }

  public void unsetNotifyStateHandleInfos() {
    this.notifyStateHandleInfos = null;
  }

  /** Returns true if field notifyStateHandleInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyStateHandleInfos() {
    return this.notifyStateHandleInfos != null;
  }

  public void setNotifyStateHandleInfosIsSet(boolean value) {
    if (!value) {
      this.notifyStateHandleInfos = null;
    }
  }

  public long getRelateExecOrderId() {
    return this.relateExecOrderId;
  }

  public HostingExecOrder setRelateExecOrderId(long relateExecOrderId) {
    this.relateExecOrderId = relateExecOrderId;
    setRelateExecOrderIdIsSet(true);
    return this;
  }

  public void unsetRelateExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEEXECORDERID_ISSET_ID);
  }

  /** Returns true if field relateExecOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEEXECORDERID_ISSET_ID);
  }

  public void setRelateExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEEXECORDERID_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingExecOrder setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingExecOrder setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public int getVersion() {
    return this.version;
  }

  public HostingExecOrder setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public HostingExecOrder setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getTtlTimestampMs() {
    return this.ttlTimestampMs;
  }

  public HostingExecOrder setTtlTimestampMs(long ttlTimestampMs) {
    this.ttlTimestampMs = ttlTimestampMs;
    setTtlTimestampMsIsSet(true);
    return this;
  }

  public void unsetTtlTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TTLTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field ttlTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetTtlTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __TTLTIMESTAMPMS_ISSET_ID);
  }

  public void setTtlTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TTLTIMESTAMPMS_ISSET_ID, value);
  }

  public long getVerifyTimestampMs() {
    return this.verifyTimestampMs;
  }

  public HostingExecOrder setVerifyTimestampMs(long verifyTimestampMs) {
    this.verifyTimestampMs = verifyTimestampMs;
    setVerifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetVerifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field verifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __VERIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setVerifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case ORDER_DETAIL:
      if (value == null) {
        unsetOrderDetail();
      } else {
        setOrderDetail((HostingExecOrderDetail)value);
      }
      break;

    case CONTRACT_SUMMARY:
      if (value == null) {
        unsetContractSummary();
      } else {
        setContractSummary((HostingExecOrderContractSummary)value);
      }
      break;

    case ACCOUNT_SUMMARY:
      if (value == null) {
        unsetAccountSummary();
      } else {
        setAccountSummary((HostingExecOrderTradeAccountSummary)value);
      }
      break;

    case UPSIDE_ORDER_REF:
      if (value == null) {
        unsetUpsideOrderRef();
      } else {
        setUpsideOrderRef((HostingExecOrderRef)value);
      }
      break;

    case ORDER_INPUT_EXT:
      if (value == null) {
        unsetOrderInputExt();
      } else {
        setOrderInputExt((HostingExecOrderInputExt)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case STATE_INFO:
      if (value == null) {
        unsetStateInfo();
      } else {
        setStateInfo((HostingExecOrderStateInfo)value);
      }
      break;

    case REVOKE_INFO:
      if (value == null) {
        unsetRevokeInfo();
      } else {
        setRevokeInfo((HostingExecOrderRevokeInfo)value);
      }
      break;

    case DEAL_INFO:
      if (value == null) {
        unsetDealInfo();
      } else {
        setDealInfo((HostingExecOrderDealInfo)value);
      }
      break;

    case TRADE_SUMMARY:
      if (value == null) {
        unsetTradeSummary();
      } else {
        setTradeSummary((HostingExecOrderTradeSummary)value);
      }
      break;

    case NOTIFY_STATE_HANDLE_INFOS:
      if (value == null) {
        unsetNotifyStateHandleInfos();
      } else {
        setNotifyStateHandleInfos((List<HostingUpsideNotifyStateHandleInfo>)value);
      }
      break;

    case RELATE_EXEC_ORDER_ID:
      if (value == null) {
        unsetRelateExecOrderId();
      } else {
        setRelateExecOrderId((Long)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case TTL_TIMESTAMP_MS:
      if (value == null) {
        unsetTtlTimestampMs();
      } else {
        setTtlTimestampMs((Long)value);
      }
      break;

    case VERIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetVerifyTimestampMs();
      } else {
        setVerifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case ORDER_DETAIL:
      return getOrderDetail();

    case CONTRACT_SUMMARY:
      return getContractSummary();

    case ACCOUNT_SUMMARY:
      return getAccountSummary();

    case UPSIDE_ORDER_REF:
      return getUpsideOrderRef();

    case ORDER_INPUT_EXT:
      return getOrderInputExt();

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case STATE_INFO:
      return getStateInfo();

    case REVOKE_INFO:
      return getRevokeInfo();

    case DEAL_INFO:
      return getDealInfo();

    case TRADE_SUMMARY:
      return getTradeSummary();

    case NOTIFY_STATE_HANDLE_INFOS:
      return getNotifyStateHandleInfos();

    case RELATE_EXEC_ORDER_ID:
      return Long.valueOf(getRelateExecOrderId());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case VERSION:
      return Integer.valueOf(getVersion());

    case SOURCE:
      return getSource();

    case TTL_TIMESTAMP_MS:
      return Long.valueOf(getTtlTimestampMs());

    case VERIFY_TIMESTAMP_MS:
      return Long.valueOf(getVerifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case ORDER_DETAIL:
      return isSetOrderDetail();
    case CONTRACT_SUMMARY:
      return isSetContractSummary();
    case ACCOUNT_SUMMARY:
      return isSetAccountSummary();
    case UPSIDE_ORDER_REF:
      return isSetUpsideOrderRef();
    case ORDER_INPUT_EXT:
      return isSetOrderInputExt();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case STATE_INFO:
      return isSetStateInfo();
    case REVOKE_INFO:
      return isSetRevokeInfo();
    case DEAL_INFO:
      return isSetDealInfo();
    case TRADE_SUMMARY:
      return isSetTradeSummary();
    case NOTIFY_STATE_HANDLE_INFOS:
      return isSetNotifyStateHandleInfos();
    case RELATE_EXEC_ORDER_ID:
      return isSetRelateExecOrderId();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case VERSION:
      return isSetVersion();
    case SOURCE:
      return isSetSource();
    case TTL_TIMESTAMP_MS:
      return isSetTtlTimestampMs();
    case VERIFY_TIMESTAMP_MS:
      return isSetVerifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrder)
      return this.equals((HostingExecOrder)that);
    return false;
  }

  public boolean equals(HostingExecOrder that) {
    if (that == null)
      return false;

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_orderDetail = true && this.isSetOrderDetail();
    boolean that_present_orderDetail = true && that.isSetOrderDetail();
    if (this_present_orderDetail || that_present_orderDetail) {
      if (!(this_present_orderDetail && that_present_orderDetail))
        return false;
      if (!this.orderDetail.equals(that.orderDetail))
        return false;
    }

    boolean this_present_contractSummary = true && this.isSetContractSummary();
    boolean that_present_contractSummary = true && that.isSetContractSummary();
    if (this_present_contractSummary || that_present_contractSummary) {
      if (!(this_present_contractSummary && that_present_contractSummary))
        return false;
      if (!this.contractSummary.equals(that.contractSummary))
        return false;
    }

    boolean this_present_accountSummary = true && this.isSetAccountSummary();
    boolean that_present_accountSummary = true && that.isSetAccountSummary();
    if (this_present_accountSummary || that_present_accountSummary) {
      if (!(this_present_accountSummary && that_present_accountSummary))
        return false;
      if (!this.accountSummary.equals(that.accountSummary))
        return false;
    }

    boolean this_present_upsideOrderRef = true && this.isSetUpsideOrderRef();
    boolean that_present_upsideOrderRef = true && that.isSetUpsideOrderRef();
    if (this_present_upsideOrderRef || that_present_upsideOrderRef) {
      if (!(this_present_upsideOrderRef && that_present_upsideOrderRef))
        return false;
      if (!this.upsideOrderRef.equals(that.upsideOrderRef))
        return false;
    }

    boolean this_present_orderInputExt = true && this.isSetOrderInputExt();
    boolean that_present_orderInputExt = true && that.isSetOrderInputExt();
    if (this_present_orderInputExt || that_present_orderInputExt) {
      if (!(this_present_orderInputExt && that_present_orderInputExt))
        return false;
      if (!this.orderInputExt.equals(that.orderInputExt))
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_stateInfo = true && this.isSetStateInfo();
    boolean that_present_stateInfo = true && that.isSetStateInfo();
    if (this_present_stateInfo || that_present_stateInfo) {
      if (!(this_present_stateInfo && that_present_stateInfo))
        return false;
      if (!this.stateInfo.equals(that.stateInfo))
        return false;
    }

    boolean this_present_revokeInfo = true && this.isSetRevokeInfo();
    boolean that_present_revokeInfo = true && that.isSetRevokeInfo();
    if (this_present_revokeInfo || that_present_revokeInfo) {
      if (!(this_present_revokeInfo && that_present_revokeInfo))
        return false;
      if (!this.revokeInfo.equals(that.revokeInfo))
        return false;
    }

    boolean this_present_dealInfo = true && this.isSetDealInfo();
    boolean that_present_dealInfo = true && that.isSetDealInfo();
    if (this_present_dealInfo || that_present_dealInfo) {
      if (!(this_present_dealInfo && that_present_dealInfo))
        return false;
      if (!this.dealInfo.equals(that.dealInfo))
        return false;
    }

    boolean this_present_tradeSummary = true && this.isSetTradeSummary();
    boolean that_present_tradeSummary = true && that.isSetTradeSummary();
    if (this_present_tradeSummary || that_present_tradeSummary) {
      if (!(this_present_tradeSummary && that_present_tradeSummary))
        return false;
      if (!this.tradeSummary.equals(that.tradeSummary))
        return false;
    }

    boolean this_present_notifyStateHandleInfos = true && this.isSetNotifyStateHandleInfos();
    boolean that_present_notifyStateHandleInfos = true && that.isSetNotifyStateHandleInfos();
    if (this_present_notifyStateHandleInfos || that_present_notifyStateHandleInfos) {
      if (!(this_present_notifyStateHandleInfos && that_present_notifyStateHandleInfos))
        return false;
      if (!this.notifyStateHandleInfos.equals(that.notifyStateHandleInfos))
        return false;
    }

    boolean this_present_relateExecOrderId = true && this.isSetRelateExecOrderId();
    boolean that_present_relateExecOrderId = true && that.isSetRelateExecOrderId();
    if (this_present_relateExecOrderId || that_present_relateExecOrderId) {
      if (!(this_present_relateExecOrderId && that_present_relateExecOrderId))
        return false;
      if (this.relateExecOrderId != that.relateExecOrderId)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_ttlTimestampMs = true && this.isSetTtlTimestampMs();
    boolean that_present_ttlTimestampMs = true && that.isSetTtlTimestampMs();
    if (this_present_ttlTimestampMs || that_present_ttlTimestampMs) {
      if (!(this_present_ttlTimestampMs && that_present_ttlTimestampMs))
        return false;
      if (this.ttlTimestampMs != that.ttlTimestampMs)
        return false;
    }

    boolean this_present_verifyTimestampMs = true && this.isSetVerifyTimestampMs();
    boolean that_present_verifyTimestampMs = true && that.isSetVerifyTimestampMs();
    if (this_present_verifyTimestampMs || that_present_verifyTimestampMs) {
      if (!(this_present_verifyTimestampMs && that_present_verifyTimestampMs))
        return false;
      if (this.verifyTimestampMs != that.verifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderDetail()).compareTo(other.isSetOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetail, other.orderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSummary()).compareTo(other.isSetContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSummary, other.contractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountSummary()).compareTo(other.isSetAccountSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountSummary, other.accountSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpsideOrderRef()).compareTo(other.isSetUpsideOrderRef());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideOrderRef()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideOrderRef, other.upsideOrderRef);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderInputExt()).compareTo(other.isSetOrderInputExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderInputExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderInputExt, other.orderInputExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateInfo()).compareTo(other.isSetStateInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateInfo, other.stateInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRevokeInfo()).compareTo(other.isSetRevokeInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevokeInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revokeInfo, other.revokeInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealInfo()).compareTo(other.isSetDealInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealInfo, other.dealInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeSummary()).compareTo(other.isSetTradeSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeSummary, other.tradeSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyStateHandleInfos()).compareTo(other.isSetNotifyStateHandleInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyStateHandleInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyStateHandleInfos, other.notifyStateHandleInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateExecOrderId()).compareTo(other.isSetRelateExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateExecOrderId, other.relateExecOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTtlTimestampMs()).compareTo(other.isSetTtlTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTtlTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ttlTimestampMs, other.ttlTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVerifyTimestampMs()).compareTo(other.isSetVerifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifyTimestampMs, other.verifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrder(");
    boolean first = true;

    if (isSetExecOrderId()) {
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetOrderDetail()) {
      if (!first) sb.append(", ");
      sb.append("orderDetail:");
      if (this.orderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDetail);
      }
      first = false;
    }
    if (isSetContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("contractSummary:");
      if (this.contractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSummary);
      }
      first = false;
    }
    if (isSetAccountSummary()) {
      if (!first) sb.append(", ");
      sb.append("accountSummary:");
      if (this.accountSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.accountSummary);
      }
      first = false;
    }
    if (isSetUpsideOrderRef()) {
      if (!first) sb.append(", ");
      sb.append("upsideOrderRef:");
      if (this.upsideOrderRef == null) {
        sb.append("null");
      } else {
        sb.append(this.upsideOrderRef);
      }
      first = false;
    }
    if (isSetOrderInputExt()) {
      if (!first) sb.append(", ");
      sb.append("orderInputExt:");
      if (this.orderInputExt == null) {
        sb.append("null");
      } else {
        sb.append(this.orderInputExt);
      }
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetStateInfo()) {
      if (!first) sb.append(", ");
      sb.append("stateInfo:");
      if (this.stateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.stateInfo);
      }
      first = false;
    }
    if (isSetRevokeInfo()) {
      if (!first) sb.append(", ");
      sb.append("revokeInfo:");
      if (this.revokeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.revokeInfo);
      }
      first = false;
    }
    if (isSetDealInfo()) {
      if (!first) sb.append(", ");
      sb.append("dealInfo:");
      if (this.dealInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.dealInfo);
      }
      first = false;
    }
    if (isSetTradeSummary()) {
      if (!first) sb.append(", ");
      sb.append("tradeSummary:");
      if (this.tradeSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeSummary);
      }
      first = false;
    }
    if (isSetNotifyStateHandleInfos()) {
      if (!first) sb.append(", ");
      sb.append("notifyStateHandleInfos:");
      if (this.notifyStateHandleInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.notifyStateHandleInfos);
      }
      first = false;
    }
    if (isSetRelateExecOrderId()) {
      if (!first) sb.append(", ");
      sb.append("relateExecOrderId:");
      sb.append(this.relateExecOrderId);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetTtlTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("ttlTimestampMs:");
      sb.append(this.ttlTimestampMs);
      first = false;
    }
    if (isSetVerifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("verifyTimestampMs:");
      sb.append(this.verifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (orderDetail != null) {
      orderDetail.validate();
    }
    if (contractSummary != null) {
      contractSummary.validate();
    }
    if (accountSummary != null) {
      accountSummary.validate();
    }
    if (upsideOrderRef != null) {
      upsideOrderRef.validate();
    }
    if (orderInputExt != null) {
      orderInputExt.validate();
    }
    if (stateInfo != null) {
      stateInfo.validate();
    }
    if (revokeInfo != null) {
      revokeInfo.validate();
    }
    if (dealInfo != null) {
      dealInfo.validate();
    }
    if (tradeSummary != null) {
      tradeSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderStandardScheme getScheme() {
      return new HostingExecOrderStandardScheme();
    }
  }

  private static class HostingExecOrderStandardScheme extends StandardScheme<HostingExecOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderDetail = new HostingExecOrderDetail();
              struct.orderDetail.read(iprot);
              struct.setOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractSummary = new HostingExecOrderContractSummary();
              struct.contractSummary.read(iprot);
              struct.setContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ACCOUNT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountSummary = new HostingExecOrderTradeAccountSummary();
              struct.accountSummary.read(iprot);
              struct.setAccountSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UPSIDE_ORDER_REF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.upsideOrderRef = new HostingExecOrderRef();
              struct.upsideOrderRef.read(iprot);
              struct.setUpsideOrderRefIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_INPUT_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderInputExt = new HostingExecOrderInputExt();
              struct.orderInputExt.read(iprot);
              struct.setOrderInputExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stateInfo = new HostingExecOrderStateInfo();
              struct.stateInfo.read(iprot);
              struct.setStateInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REVOKE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.revokeInfo = new HostingExecOrderRevokeInfo();
              struct.revokeInfo.read(iprot);
              struct.setRevokeInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dealInfo = new HostingExecOrderDealInfo();
              struct.dealInfo.read(iprot);
              struct.setDealInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRADE_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tradeSummary = new HostingExecOrderTradeSummary();
              struct.tradeSummary.read(iprot);
              struct.setTradeSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NOTIFY_STATE_HANDLE_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                struct.notifyStateHandleInfos = new ArrayList<HostingUpsideNotifyStateHandleInfo>(_list156.size);
                for (int _i157 = 0; _i157 < _list156.size; ++_i157)
                {
                  HostingUpsideNotifyStateHandleInfo _elem158;
                  _elem158 = new HostingUpsideNotifyStateHandleInfo();
                  _elem158.read(iprot);
                  struct.notifyStateHandleInfos.add(_elem158);
                }
                iprot.readListEnd();
              }
              struct.setNotifyStateHandleInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // RELATE_EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relateExecOrderId = iprot.readI64();
              struct.setRelateExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TTL_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ttlTimestampMs = iprot.readI64();
              struct.setTtlTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // VERIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.verifyTimestampMs = iprot.readI64();
              struct.setVerifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.orderDetail != null) {
        if (struct.isSetOrderDetail()) {
          oprot.writeFieldBegin(ORDER_DETAIL_FIELD_DESC);
          struct.orderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractSummary != null) {
        if (struct.isSetContractSummary()) {
          oprot.writeFieldBegin(CONTRACT_SUMMARY_FIELD_DESC);
          struct.contractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountSummary != null) {
        if (struct.isSetAccountSummary()) {
          oprot.writeFieldBegin(ACCOUNT_SUMMARY_FIELD_DESC);
          struct.accountSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.upsideOrderRef != null) {
        if (struct.isSetUpsideOrderRef()) {
          oprot.writeFieldBegin(UPSIDE_ORDER_REF_FIELD_DESC);
          struct.upsideOrderRef.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderInputExt != null) {
        if (struct.isSetOrderInputExt()) {
          oprot.writeFieldBegin(ORDER_INPUT_EXT_FIELD_DESC);
          struct.orderInputExt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.stateInfo != null) {
        if (struct.isSetStateInfo()) {
          oprot.writeFieldBegin(STATE_INFO_FIELD_DESC);
          struct.stateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.revokeInfo != null) {
        if (struct.isSetRevokeInfo()) {
          oprot.writeFieldBegin(REVOKE_INFO_FIELD_DESC);
          struct.revokeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dealInfo != null) {
        if (struct.isSetDealInfo()) {
          oprot.writeFieldBegin(DEAL_INFO_FIELD_DESC);
          struct.dealInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeSummary != null) {
        if (struct.isSetTradeSummary()) {
          oprot.writeFieldBegin(TRADE_SUMMARY_FIELD_DESC);
          struct.tradeSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.notifyStateHandleInfos != null) {
        if (struct.isSetNotifyStateHandleInfos()) {
          oprot.writeFieldBegin(NOTIFY_STATE_HANDLE_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.notifyStateHandleInfos.size()));
            for (HostingUpsideNotifyStateHandleInfo _iter159 : struct.notifyStateHandleInfos)
            {
              _iter159.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRelateExecOrderId()) {
        oprot.writeFieldBegin(RELATE_EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.relateExecOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTtlTimestampMs()) {
        oprot.writeFieldBegin(TTL_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.ttlTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVerifyTimestampMs()) {
        oprot.writeFieldBegin(VERIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.verifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderTupleScheme getScheme() {
      return new HostingExecOrderTupleScheme();
    }
  }

  private static class HostingExecOrderTupleScheme extends TupleScheme<HostingExecOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(1);
      }
      if (struct.isSetOrderDetail()) {
        optionals.set(2);
      }
      if (struct.isSetContractSummary()) {
        optionals.set(3);
      }
      if (struct.isSetAccountSummary()) {
        optionals.set(4);
      }
      if (struct.isSetUpsideOrderRef()) {
        optionals.set(5);
      }
      if (struct.isSetOrderInputExt()) {
        optionals.set(6);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(7);
      }
      if (struct.isSetStateInfo()) {
        optionals.set(8);
      }
      if (struct.isSetRevokeInfo()) {
        optionals.set(9);
      }
      if (struct.isSetDealInfo()) {
        optionals.set(10);
      }
      if (struct.isSetTradeSummary()) {
        optionals.set(11);
      }
      if (struct.isSetNotifyStateHandleInfos()) {
        optionals.set(12);
      }
      if (struct.isSetRelateExecOrderId()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(14);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(15);
      }
      if (struct.isSetVersion()) {
        optionals.set(16);
      }
      if (struct.isSetSource()) {
        optionals.set(17);
      }
      if (struct.isSetTtlTimestampMs()) {
        optionals.set(18);
      }
      if (struct.isSetVerifyTimestampMs()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetOrderDetail()) {
        struct.orderDetail.write(oprot);
      }
      if (struct.isSetContractSummary()) {
        struct.contractSummary.write(oprot);
      }
      if (struct.isSetAccountSummary()) {
        struct.accountSummary.write(oprot);
      }
      if (struct.isSetUpsideOrderRef()) {
        struct.upsideOrderRef.write(oprot);
      }
      if (struct.isSetOrderInputExt()) {
        struct.orderInputExt.write(oprot);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetStateInfo()) {
        struct.stateInfo.write(oprot);
      }
      if (struct.isSetRevokeInfo()) {
        struct.revokeInfo.write(oprot);
      }
      if (struct.isSetDealInfo()) {
        struct.dealInfo.write(oprot);
      }
      if (struct.isSetTradeSummary()) {
        struct.tradeSummary.write(oprot);
      }
      if (struct.isSetNotifyStateHandleInfos()) {
        {
          oprot.writeI32(struct.notifyStateHandleInfos.size());
          for (HostingUpsideNotifyStateHandleInfo _iter160 : struct.notifyStateHandleInfos)
          {
            _iter160.write(oprot);
          }
        }
      }
      if (struct.isSetRelateExecOrderId()) {
        oprot.writeI64(struct.relateExecOrderId);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetTtlTimestampMs()) {
        oprot.writeI64(struct.ttlTimestampMs);
      }
      if (struct.isSetVerifyTimestampMs()) {
        oprot.writeI64(struct.verifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderDetail = new HostingExecOrderDetail();
        struct.orderDetail.read(iprot);
        struct.setOrderDetailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractSummary = new HostingExecOrderContractSummary();
        struct.contractSummary.read(iprot);
        struct.setContractSummaryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.accountSummary = new HostingExecOrderTradeAccountSummary();
        struct.accountSummary.read(iprot);
        struct.setAccountSummaryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.upsideOrderRef = new HostingExecOrderRef();
        struct.upsideOrderRef.read(iprot);
        struct.setUpsideOrderRefIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderInputExt = new HostingExecOrderInputExt();
        struct.orderInputExt.read(iprot);
        struct.setOrderInputExtIsSet(true);
      }
      if (incoming.get(7)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stateInfo = new HostingExecOrderStateInfo();
        struct.stateInfo.read(iprot);
        struct.setStateInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.revokeInfo = new HostingExecOrderRevokeInfo();
        struct.revokeInfo.read(iprot);
        struct.setRevokeInfoIsSet(true);
      }
      if (incoming.get(10)) {
        struct.dealInfo = new HostingExecOrderDealInfo();
        struct.dealInfo.read(iprot);
        struct.setDealInfoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.tradeSummary = new HostingExecOrderTradeSummary();
        struct.tradeSummary.read(iprot);
        struct.setTradeSummaryIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list161 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.notifyStateHandleInfos = new ArrayList<HostingUpsideNotifyStateHandleInfo>(_list161.size);
          for (int _i162 = 0; _i162 < _list161.size; ++_i162)
          {
            HostingUpsideNotifyStateHandleInfo _elem163;
            _elem163 = new HostingUpsideNotifyStateHandleInfo();
            _elem163.read(iprot);
            struct.notifyStateHandleInfos.add(_elem163);
          }
        }
        struct.setNotifyStateHandleInfosIsSet(true);
      }
      if (incoming.get(13)) {
        struct.relateExecOrderId = iprot.readI64();
        struct.setRelateExecOrderIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(18)) {
        struct.ttlTimestampMs = iprot.readI64();
        struct.setTtlTimestampMsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.verifyTimestampMs = iprot.readI64();
        struct.setVerifyTimestampMsIsSet(true);
      }
    }
  }

}

