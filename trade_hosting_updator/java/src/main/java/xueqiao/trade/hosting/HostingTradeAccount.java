/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingTradeAccount implements org.apache.thrift.TBase<HostingTradeAccount, HostingTradeAccount._Fields>, java.io.Serializable, Cloneable, Comparable<HostingTradeAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingTradeAccount");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_BROKER_ACCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeBrokerAccessId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPassword", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("accountProperties", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeBrokerId", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BROKER_TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerTechPlatform", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountRemark", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ACCOUNT_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountState", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField INVALID_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidReason", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField INVALID_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidErrorCode", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField API_RET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("apiRetCode", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField ACCOUNT_ACCESS_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("accountAccessState", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField HAD_BEEN_ACTIVED_FIELD_DESC = new org.apache.thrift.protocol.TField("hadBeenActived", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingTradeAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingTradeAccountTupleSchemeFactory());
  }

  public long tradeAccountId; // optional
  public int tradeBrokerAccessId; // optional
  public String loginUserName; // optional
  public String loginPassword; // optional
  public Map<String,String> accountProperties; // optional
  public int tradeBrokerId; // optional
  /**
   * 
   * @see BrokerTechPlatform
   */
  public BrokerTechPlatform brokerTechPlatform; // optional
  public String tradeAccountRemark; // optional
  /**
   * 
   * @see TradeAccountState
   */
  public TradeAccountState accountState; // optional
  public String invalidReason; // optional
  public int invalidErrorCode; // optional
  public int apiRetCode; // optional
  /**
   * 
   * @see TradeAccountAccessState
   */
  public TradeAccountAccessState accountAccessState; // optional
  public boolean hadBeenActived; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT_ID((short)2, "tradeAccountId"),
    TRADE_BROKER_ACCESS_ID((short)3, "tradeBrokerAccessId"),
    LOGIN_USER_NAME((short)4, "loginUserName"),
    LOGIN_PASSWORD((short)5, "loginPassword"),
    ACCOUNT_PROPERTIES((short)6, "accountProperties"),
    TRADE_BROKER_ID((short)7, "tradeBrokerId"),
    /**
     * 
     * @see BrokerTechPlatform
     */
    BROKER_TECH_PLATFORM((short)8, "brokerTechPlatform"),
    TRADE_ACCOUNT_REMARK((short)9, "tradeAccountRemark"),
    /**
     * 
     * @see TradeAccountState
     */
    ACCOUNT_STATE((short)11, "accountState"),
    INVALID_REASON((short)12, "invalidReason"),
    INVALID_ERROR_CODE((short)13, "invalidErrorCode"),
    API_RET_CODE((short)14, "apiRetCode"),
    /**
     * 
     * @see TradeAccountAccessState
     */
    ACCOUNT_ACCESS_STATE((short)15, "accountAccessState"),
    HAD_BEEN_ACTIVED((short)16, "hadBeenActived"),
    CREATE_TIMESTAMP((short)21, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)22, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 3: // TRADE_BROKER_ACCESS_ID
          return TRADE_BROKER_ACCESS_ID;
        case 4: // LOGIN_USER_NAME
          return LOGIN_USER_NAME;
        case 5: // LOGIN_PASSWORD
          return LOGIN_PASSWORD;
        case 6: // ACCOUNT_PROPERTIES
          return ACCOUNT_PROPERTIES;
        case 7: // TRADE_BROKER_ID
          return TRADE_BROKER_ID;
        case 8: // BROKER_TECH_PLATFORM
          return BROKER_TECH_PLATFORM;
        case 9: // TRADE_ACCOUNT_REMARK
          return TRADE_ACCOUNT_REMARK;
        case 11: // ACCOUNT_STATE
          return ACCOUNT_STATE;
        case 12: // INVALID_REASON
          return INVALID_REASON;
        case 13: // INVALID_ERROR_CODE
          return INVALID_ERROR_CODE;
        case 14: // API_RET_CODE
          return API_RET_CODE;
        case 15: // ACCOUNT_ACCESS_STATE
          return ACCOUNT_ACCESS_STATE;
        case 16: // HAD_BEEN_ACTIVED
          return HAD_BEEN_ACTIVED;
        case 21: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 22: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private static final int __TRADEBROKERACCESSID_ISSET_ID = 1;
  private static final int __TRADEBROKERID_ISSET_ID = 2;
  private static final int __INVALIDERRORCODE_ISSET_ID = 3;
  private static final int __APIRETCODE_ISSET_ID = 4;
  private static final int __HADBEENACTIVED_ISSET_ID = 5;
  private static final int __CREATETIMESTAMP_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT_ID,_Fields.TRADE_BROKER_ACCESS_ID,_Fields.LOGIN_USER_NAME,_Fields.LOGIN_PASSWORD,_Fields.ACCOUNT_PROPERTIES,_Fields.TRADE_BROKER_ID,_Fields.BROKER_TECH_PLATFORM,_Fields.TRADE_ACCOUNT_REMARK,_Fields.ACCOUNT_STATE,_Fields.INVALID_REASON,_Fields.INVALID_ERROR_CODE,_Fields.API_RET_CODE,_Fields.ACCOUNT_ACCESS_STATE,_Fields.HAD_BEEN_ACTIVED,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_BROKER_ACCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeBrokerAccessId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("loginPassword", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("accountProperties", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRADE_BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeBrokerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BROKER_TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("brokerTechPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BrokerTechPlatform.class)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_REMARK, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountRemark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCOUNT_STATE, new org.apache.thrift.meta_data.FieldMetaData("accountState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TradeAccountState.class)));
    tmpMap.put(_Fields.INVALID_REASON, new org.apache.thrift.meta_data.FieldMetaData("invalidReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INVALID_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("invalidErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.API_RET_CODE, new org.apache.thrift.meta_data.FieldMetaData("apiRetCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCOUNT_ACCESS_STATE, new org.apache.thrift.meta_data.FieldMetaData("accountAccessState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TradeAccountAccessState.class)));
    tmpMap.put(_Fields.HAD_BEEN_ACTIVED, new org.apache.thrift.meta_data.FieldMetaData("hadBeenActived", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingTradeAccount.class, metaDataMap);
  }

  public HostingTradeAccount() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingTradeAccount(HostingTradeAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeAccountId = other.tradeAccountId;
    this.tradeBrokerAccessId = other.tradeBrokerAccessId;
    if (other.isSetLoginUserName()) {
      this.loginUserName = other.loginUserName;
    }
    if (other.isSetLoginPassword()) {
      this.loginPassword = other.loginPassword;
    }
    if (other.isSetAccountProperties()) {
      Map<String,String> __this__accountProperties = new HashMap<String,String>(other.accountProperties);
      this.accountProperties = __this__accountProperties;
    }
    this.tradeBrokerId = other.tradeBrokerId;
    if (other.isSetBrokerTechPlatform()) {
      this.brokerTechPlatform = other.brokerTechPlatform;
    }
    if (other.isSetTradeAccountRemark()) {
      this.tradeAccountRemark = other.tradeAccountRemark;
    }
    if (other.isSetAccountState()) {
      this.accountState = other.accountState;
    }
    if (other.isSetInvalidReason()) {
      this.invalidReason = other.invalidReason;
    }
    this.invalidErrorCode = other.invalidErrorCode;
    this.apiRetCode = other.apiRetCode;
    if (other.isSetAccountAccessState()) {
      this.accountAccessState = other.accountAccessState;
    }
    this.hadBeenActived = other.hadBeenActived;
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingTradeAccount deepCopy() {
    return new HostingTradeAccount(this);
  }

  @Override
  public void clear() {
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setTradeBrokerAccessIdIsSet(false);
    this.tradeBrokerAccessId = 0;
    this.loginUserName = null;
    this.loginPassword = null;
    this.accountProperties = null;
    setTradeBrokerIdIsSet(false);
    this.tradeBrokerId = 0;
    this.brokerTechPlatform = null;
    this.tradeAccountRemark = null;
    this.accountState = null;
    this.invalidReason = null;
    setInvalidErrorCodeIsSet(false);
    this.invalidErrorCode = 0;
    setApiRetCodeIsSet(false);
    this.apiRetCode = 0;
    this.accountAccessState = null;
    setHadBeenActivedIsSet(false);
    this.hadBeenActived = false;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public HostingTradeAccount setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public int getTradeBrokerAccessId() {
    return this.tradeBrokerAccessId;
  }

  public HostingTradeAccount setTradeBrokerAccessId(int tradeBrokerAccessId) {
    this.tradeBrokerAccessId = tradeBrokerAccessId;
    setTradeBrokerAccessIdIsSet(true);
    return this;
  }

  public void unsetTradeBrokerAccessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEBROKERACCESSID_ISSET_ID);
  }

  /** Returns true if field tradeBrokerAccessId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeBrokerAccessId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEBROKERACCESSID_ISSET_ID);
  }

  public void setTradeBrokerAccessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEBROKERACCESSID_ISSET_ID, value);
  }

  public String getLoginUserName() {
    return this.loginUserName;
  }

  public HostingTradeAccount setLoginUserName(String loginUserName) {
    this.loginUserName = loginUserName;
    return this;
  }

  public void unsetLoginUserName() {
    this.loginUserName = null;
  }

  /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginUserName() {
    return this.loginUserName != null;
  }

  public void setLoginUserNameIsSet(boolean value) {
    if (!value) {
      this.loginUserName = null;
    }
  }

  public String getLoginPassword() {
    return this.loginPassword;
  }

  public HostingTradeAccount setLoginPassword(String loginPassword) {
    this.loginPassword = loginPassword;
    return this;
  }

  public void unsetLoginPassword() {
    this.loginPassword = null;
  }

  /** Returns true if field loginPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPassword() {
    return this.loginPassword != null;
  }

  public void setLoginPasswordIsSet(boolean value) {
    if (!value) {
      this.loginPassword = null;
    }
  }

  public int getAccountPropertiesSize() {
    return (this.accountProperties == null) ? 0 : this.accountProperties.size();
  }

  public void putToAccountProperties(String key, String val) {
    if (this.accountProperties == null) {
      this.accountProperties = new HashMap<String,String>();
    }
    this.accountProperties.put(key, val);
  }

  public Map<String,String> getAccountProperties() {
    return this.accountProperties;
  }

  public HostingTradeAccount setAccountProperties(Map<String,String> accountProperties) {
    this.accountProperties = accountProperties;
    return this;
  }

  public void unsetAccountProperties() {
    this.accountProperties = null;
  }

  /** Returns true if field accountProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountProperties() {
    return this.accountProperties != null;
  }

  public void setAccountPropertiesIsSet(boolean value) {
    if (!value) {
      this.accountProperties = null;
    }
  }

  public int getTradeBrokerId() {
    return this.tradeBrokerId;
  }

  public HostingTradeAccount setTradeBrokerId(int tradeBrokerId) {
    this.tradeBrokerId = tradeBrokerId;
    setTradeBrokerIdIsSet(true);
    return this;
  }

  public void unsetTradeBrokerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEBROKERID_ISSET_ID);
  }

  /** Returns true if field tradeBrokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeBrokerId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEBROKERID_ISSET_ID);
  }

  public void setTradeBrokerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEBROKERID_ISSET_ID, value);
  }

  /**
   * 
   * @see BrokerTechPlatform
   */
  public BrokerTechPlatform getBrokerTechPlatform() {
    return this.brokerTechPlatform;
  }

  /**
   * 
   * @see BrokerTechPlatform
   */
  public HostingTradeAccount setBrokerTechPlatform(BrokerTechPlatform brokerTechPlatform) {
    this.brokerTechPlatform = brokerTechPlatform;
    return this;
  }

  public void unsetBrokerTechPlatform() {
    this.brokerTechPlatform = null;
  }

  /** Returns true if field brokerTechPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerTechPlatform() {
    return this.brokerTechPlatform != null;
  }

  public void setBrokerTechPlatformIsSet(boolean value) {
    if (!value) {
      this.brokerTechPlatform = null;
    }
  }

  public String getTradeAccountRemark() {
    return this.tradeAccountRemark;
  }

  public HostingTradeAccount setTradeAccountRemark(String tradeAccountRemark) {
    this.tradeAccountRemark = tradeAccountRemark;
    return this;
  }

  public void unsetTradeAccountRemark() {
    this.tradeAccountRemark = null;
  }

  /** Returns true if field tradeAccountRemark is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountRemark() {
    return this.tradeAccountRemark != null;
  }

  public void setTradeAccountRemarkIsSet(boolean value) {
    if (!value) {
      this.tradeAccountRemark = null;
    }
  }

  /**
   * 
   * @see TradeAccountState
   */
  public TradeAccountState getAccountState() {
    return this.accountState;
  }

  /**
   * 
   * @see TradeAccountState
   */
  public HostingTradeAccount setAccountState(TradeAccountState accountState) {
    this.accountState = accountState;
    return this;
  }

  public void unsetAccountState() {
    this.accountState = null;
  }

  /** Returns true if field accountState is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountState() {
    return this.accountState != null;
  }

  public void setAccountStateIsSet(boolean value) {
    if (!value) {
      this.accountState = null;
    }
  }

  public String getInvalidReason() {
    return this.invalidReason;
  }

  public HostingTradeAccount setInvalidReason(String invalidReason) {
    this.invalidReason = invalidReason;
    return this;
  }

  public void unsetInvalidReason() {
    this.invalidReason = null;
  }

  /** Returns true if field invalidReason is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidReason() {
    return this.invalidReason != null;
  }

  public void setInvalidReasonIsSet(boolean value) {
    if (!value) {
      this.invalidReason = null;
    }
  }

  public int getInvalidErrorCode() {
    return this.invalidErrorCode;
  }

  public HostingTradeAccount setInvalidErrorCode(int invalidErrorCode) {
    this.invalidErrorCode = invalidErrorCode;
    setInvalidErrorCodeIsSet(true);
    return this;
  }

  public void unsetInvalidErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID);
  }

  /** Returns true if field invalidErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID);
  }

  public void setInvalidErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID, value);
  }

  public int getApiRetCode() {
    return this.apiRetCode;
  }

  public HostingTradeAccount setApiRetCode(int apiRetCode) {
    this.apiRetCode = apiRetCode;
    setApiRetCodeIsSet(true);
    return this;
  }

  public void unsetApiRetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APIRETCODE_ISSET_ID);
  }

  /** Returns true if field apiRetCode is set (has been assigned a value) and false otherwise */
  public boolean isSetApiRetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __APIRETCODE_ISSET_ID);
  }

  public void setApiRetCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APIRETCODE_ISSET_ID, value);
  }

  /**
   * 
   * @see TradeAccountAccessState
   */
  public TradeAccountAccessState getAccountAccessState() {
    return this.accountAccessState;
  }

  /**
   * 
   * @see TradeAccountAccessState
   */
  public HostingTradeAccount setAccountAccessState(TradeAccountAccessState accountAccessState) {
    this.accountAccessState = accountAccessState;
    return this;
  }

  public void unsetAccountAccessState() {
    this.accountAccessState = null;
  }

  /** Returns true if field accountAccessState is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountAccessState() {
    return this.accountAccessState != null;
  }

  public void setAccountAccessStateIsSet(boolean value) {
    if (!value) {
      this.accountAccessState = null;
    }
  }

  public boolean isHadBeenActived() {
    return this.hadBeenActived;
  }

  public HostingTradeAccount setHadBeenActived(boolean hadBeenActived) {
    this.hadBeenActived = hadBeenActived;
    setHadBeenActivedIsSet(true);
    return this;
  }

  public void unsetHadBeenActived() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HADBEENACTIVED_ISSET_ID);
  }

  /** Returns true if field hadBeenActived is set (has been assigned a value) and false otherwise */
  public boolean isSetHadBeenActived() {
    return EncodingUtils.testBit(__isset_bitfield, __HADBEENACTIVED_ISSET_ID);
  }

  public void setHadBeenActivedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HADBEENACTIVED_ISSET_ID, value);
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingTradeAccount setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingTradeAccount setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case TRADE_BROKER_ACCESS_ID:
      if (value == null) {
        unsetTradeBrokerAccessId();
      } else {
        setTradeBrokerAccessId((Integer)value);
      }
      break;

    case LOGIN_USER_NAME:
      if (value == null) {
        unsetLoginUserName();
      } else {
        setLoginUserName((String)value);
      }
      break;

    case LOGIN_PASSWORD:
      if (value == null) {
        unsetLoginPassword();
      } else {
        setLoginPassword((String)value);
      }
      break;

    case ACCOUNT_PROPERTIES:
      if (value == null) {
        unsetAccountProperties();
      } else {
        setAccountProperties((Map<String,String>)value);
      }
      break;

    case TRADE_BROKER_ID:
      if (value == null) {
        unsetTradeBrokerId();
      } else {
        setTradeBrokerId((Integer)value);
      }
      break;

    case BROKER_TECH_PLATFORM:
      if (value == null) {
        unsetBrokerTechPlatform();
      } else {
        setBrokerTechPlatform((BrokerTechPlatform)value);
      }
      break;

    case TRADE_ACCOUNT_REMARK:
      if (value == null) {
        unsetTradeAccountRemark();
      } else {
        setTradeAccountRemark((String)value);
      }
      break;

    case ACCOUNT_STATE:
      if (value == null) {
        unsetAccountState();
      } else {
        setAccountState((TradeAccountState)value);
      }
      break;

    case INVALID_REASON:
      if (value == null) {
        unsetInvalidReason();
      } else {
        setInvalidReason((String)value);
      }
      break;

    case INVALID_ERROR_CODE:
      if (value == null) {
        unsetInvalidErrorCode();
      } else {
        setInvalidErrorCode((Integer)value);
      }
      break;

    case API_RET_CODE:
      if (value == null) {
        unsetApiRetCode();
      } else {
        setApiRetCode((Integer)value);
      }
      break;

    case ACCOUNT_ACCESS_STATE:
      if (value == null) {
        unsetAccountAccessState();
      } else {
        setAccountAccessState((TradeAccountAccessState)value);
      }
      break;

    case HAD_BEEN_ACTIVED:
      if (value == null) {
        unsetHadBeenActived();
      } else {
        setHadBeenActived((Boolean)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case TRADE_BROKER_ACCESS_ID:
      return Integer.valueOf(getTradeBrokerAccessId());

    case LOGIN_USER_NAME:
      return getLoginUserName();

    case LOGIN_PASSWORD:
      return getLoginPassword();

    case ACCOUNT_PROPERTIES:
      return getAccountProperties();

    case TRADE_BROKER_ID:
      return Integer.valueOf(getTradeBrokerId());

    case BROKER_TECH_PLATFORM:
      return getBrokerTechPlatform();

    case TRADE_ACCOUNT_REMARK:
      return getTradeAccountRemark();

    case ACCOUNT_STATE:
      return getAccountState();

    case INVALID_REASON:
      return getInvalidReason();

    case INVALID_ERROR_CODE:
      return Integer.valueOf(getInvalidErrorCode());

    case API_RET_CODE:
      return Integer.valueOf(getApiRetCode());

    case ACCOUNT_ACCESS_STATE:
      return getAccountAccessState();

    case HAD_BEEN_ACTIVED:
      return Boolean.valueOf(isHadBeenActived());

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case TRADE_BROKER_ACCESS_ID:
      return isSetTradeBrokerAccessId();
    case LOGIN_USER_NAME:
      return isSetLoginUserName();
    case LOGIN_PASSWORD:
      return isSetLoginPassword();
    case ACCOUNT_PROPERTIES:
      return isSetAccountProperties();
    case TRADE_BROKER_ID:
      return isSetTradeBrokerId();
    case BROKER_TECH_PLATFORM:
      return isSetBrokerTechPlatform();
    case TRADE_ACCOUNT_REMARK:
      return isSetTradeAccountRemark();
    case ACCOUNT_STATE:
      return isSetAccountState();
    case INVALID_REASON:
      return isSetInvalidReason();
    case INVALID_ERROR_CODE:
      return isSetInvalidErrorCode();
    case API_RET_CODE:
      return isSetApiRetCode();
    case ACCOUNT_ACCESS_STATE:
      return isSetAccountAccessState();
    case HAD_BEEN_ACTIVED:
      return isSetHadBeenActived();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingTradeAccount)
      return this.equals((HostingTradeAccount)that);
    return false;
  }

  public boolean equals(HostingTradeAccount that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_tradeBrokerAccessId = true && this.isSetTradeBrokerAccessId();
    boolean that_present_tradeBrokerAccessId = true && that.isSetTradeBrokerAccessId();
    if (this_present_tradeBrokerAccessId || that_present_tradeBrokerAccessId) {
      if (!(this_present_tradeBrokerAccessId && that_present_tradeBrokerAccessId))
        return false;
      if (this.tradeBrokerAccessId != that.tradeBrokerAccessId)
        return false;
    }

    boolean this_present_loginUserName = true && this.isSetLoginUserName();
    boolean that_present_loginUserName = true && that.isSetLoginUserName();
    if (this_present_loginUserName || that_present_loginUserName) {
      if (!(this_present_loginUserName && that_present_loginUserName))
        return false;
      if (!this.loginUserName.equals(that.loginUserName))
        return false;
    }

    boolean this_present_loginPassword = true && this.isSetLoginPassword();
    boolean that_present_loginPassword = true && that.isSetLoginPassword();
    if (this_present_loginPassword || that_present_loginPassword) {
      if (!(this_present_loginPassword && that_present_loginPassword))
        return false;
      if (!this.loginPassword.equals(that.loginPassword))
        return false;
    }

    boolean this_present_accountProperties = true && this.isSetAccountProperties();
    boolean that_present_accountProperties = true && that.isSetAccountProperties();
    if (this_present_accountProperties || that_present_accountProperties) {
      if (!(this_present_accountProperties && that_present_accountProperties))
        return false;
      if (!this.accountProperties.equals(that.accountProperties))
        return false;
    }

    boolean this_present_tradeBrokerId = true && this.isSetTradeBrokerId();
    boolean that_present_tradeBrokerId = true && that.isSetTradeBrokerId();
    if (this_present_tradeBrokerId || that_present_tradeBrokerId) {
      if (!(this_present_tradeBrokerId && that_present_tradeBrokerId))
        return false;
      if (this.tradeBrokerId != that.tradeBrokerId)
        return false;
    }

    boolean this_present_brokerTechPlatform = true && this.isSetBrokerTechPlatform();
    boolean that_present_brokerTechPlatform = true && that.isSetBrokerTechPlatform();
    if (this_present_brokerTechPlatform || that_present_brokerTechPlatform) {
      if (!(this_present_brokerTechPlatform && that_present_brokerTechPlatform))
        return false;
      if (!this.brokerTechPlatform.equals(that.brokerTechPlatform))
        return false;
    }

    boolean this_present_tradeAccountRemark = true && this.isSetTradeAccountRemark();
    boolean that_present_tradeAccountRemark = true && that.isSetTradeAccountRemark();
    if (this_present_tradeAccountRemark || that_present_tradeAccountRemark) {
      if (!(this_present_tradeAccountRemark && that_present_tradeAccountRemark))
        return false;
      if (!this.tradeAccountRemark.equals(that.tradeAccountRemark))
        return false;
    }

    boolean this_present_accountState = true && this.isSetAccountState();
    boolean that_present_accountState = true && that.isSetAccountState();
    if (this_present_accountState || that_present_accountState) {
      if (!(this_present_accountState && that_present_accountState))
        return false;
      if (!this.accountState.equals(that.accountState))
        return false;
    }

    boolean this_present_invalidReason = true && this.isSetInvalidReason();
    boolean that_present_invalidReason = true && that.isSetInvalidReason();
    if (this_present_invalidReason || that_present_invalidReason) {
      if (!(this_present_invalidReason && that_present_invalidReason))
        return false;
      if (!this.invalidReason.equals(that.invalidReason))
        return false;
    }

    boolean this_present_invalidErrorCode = true && this.isSetInvalidErrorCode();
    boolean that_present_invalidErrorCode = true && that.isSetInvalidErrorCode();
    if (this_present_invalidErrorCode || that_present_invalidErrorCode) {
      if (!(this_present_invalidErrorCode && that_present_invalidErrorCode))
        return false;
      if (this.invalidErrorCode != that.invalidErrorCode)
        return false;
    }

    boolean this_present_apiRetCode = true && this.isSetApiRetCode();
    boolean that_present_apiRetCode = true && that.isSetApiRetCode();
    if (this_present_apiRetCode || that_present_apiRetCode) {
      if (!(this_present_apiRetCode && that_present_apiRetCode))
        return false;
      if (this.apiRetCode != that.apiRetCode)
        return false;
    }

    boolean this_present_accountAccessState = true && this.isSetAccountAccessState();
    boolean that_present_accountAccessState = true && that.isSetAccountAccessState();
    if (this_present_accountAccessState || that_present_accountAccessState) {
      if (!(this_present_accountAccessState && that_present_accountAccessState))
        return false;
      if (!this.accountAccessState.equals(that.accountAccessState))
        return false;
    }

    boolean this_present_hadBeenActived = true && this.isSetHadBeenActived();
    boolean that_present_hadBeenActived = true && that.isSetHadBeenActived();
    if (this_present_hadBeenActived || that_present_hadBeenActived) {
      if (!(this_present_hadBeenActived && that_present_hadBeenActived))
        return false;
      if (this.hadBeenActived != that.hadBeenActived)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingTradeAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeBrokerAccessId()).compareTo(other.isSetTradeBrokerAccessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeBrokerAccessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeBrokerAccessId, other.tradeBrokerAccessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPassword()).compareTo(other.isSetLoginPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPassword, other.loginPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountProperties()).compareTo(other.isSetAccountProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountProperties, other.accountProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeBrokerId()).compareTo(other.isSetTradeBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeBrokerId, other.tradeBrokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerTechPlatform()).compareTo(other.isSetBrokerTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerTechPlatform, other.brokerTechPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountRemark()).compareTo(other.isSetTradeAccountRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountRemark, other.tradeAccountRemark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountState()).compareTo(other.isSetAccountState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountState, other.accountState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidReason()).compareTo(other.isSetInvalidReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidReason, other.invalidReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidErrorCode()).compareTo(other.isSetInvalidErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidErrorCode, other.invalidErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiRetCode()).compareTo(other.isSetApiRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiRetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiRetCode, other.apiRetCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountAccessState()).compareTo(other.isSetAccountAccessState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountAccessState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountAccessState, other.accountAccessState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHadBeenActived()).compareTo(other.isSetHadBeenActived());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHadBeenActived()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hadBeenActived, other.hadBeenActived);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingTradeAccount(");
    boolean first = true;

    if (isSetTradeAccountId()) {
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetTradeBrokerAccessId()) {
      if (!first) sb.append(", ");
      sb.append("tradeBrokerAccessId:");
      sb.append(this.tradeBrokerAccessId);
      first = false;
    }
    if (isSetLoginUserName()) {
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
    }
    if (isSetLoginPassword()) {
      if (!first) sb.append(", ");
      sb.append("loginPassword:");
      if (this.loginPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPassword);
      }
      first = false;
    }
    if (isSetAccountProperties()) {
      if (!first) sb.append(", ");
      sb.append("accountProperties:");
      if (this.accountProperties == null) {
        sb.append("null");
      } else {
        sb.append(this.accountProperties);
      }
      first = false;
    }
    if (isSetTradeBrokerId()) {
      if (!first) sb.append(", ");
      sb.append("tradeBrokerId:");
      sb.append(this.tradeBrokerId);
      first = false;
    }
    if (isSetBrokerTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("brokerTechPlatform:");
      if (this.brokerTechPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerTechPlatform);
      }
      first = false;
    }
    if (isSetTradeAccountRemark()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountRemark:");
      if (this.tradeAccountRemark == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeAccountRemark);
      }
      first = false;
    }
    if (isSetAccountState()) {
      if (!first) sb.append(", ");
      sb.append("accountState:");
      if (this.accountState == null) {
        sb.append("null");
      } else {
        sb.append(this.accountState);
      }
      first = false;
    }
    if (isSetInvalidReason()) {
      if (!first) sb.append(", ");
      sb.append("invalidReason:");
      if (this.invalidReason == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidReason);
      }
      first = false;
    }
    if (isSetInvalidErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("invalidErrorCode:");
      sb.append(this.invalidErrorCode);
      first = false;
    }
    if (isSetApiRetCode()) {
      if (!first) sb.append(", ");
      sb.append("apiRetCode:");
      sb.append(this.apiRetCode);
      first = false;
    }
    if (isSetAccountAccessState()) {
      if (!first) sb.append(", ");
      sb.append("accountAccessState:");
      if (this.accountAccessState == null) {
        sb.append("null");
      } else {
        sb.append(this.accountAccessState);
      }
      first = false;
    }
    if (isSetHadBeenActived()) {
      if (!first) sb.append(", ");
      sb.append("hadBeenActived:");
      sb.append(this.hadBeenActived);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingTradeAccountStandardSchemeFactory implements SchemeFactory {
    public HostingTradeAccountStandardScheme getScheme() {
      return new HostingTradeAccountStandardScheme();
    }
  }

  private static class HostingTradeAccountStandardScheme extends StandardScheme<HostingTradeAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingTradeAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_BROKER_ACCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeBrokerAccessId = iprot.readI32();
              struct.setTradeBrokerAccessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGIN_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginUserName = iprot.readString();
              struct.setLoginUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOGIN_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPassword = iprot.readString();
              struct.setLoginPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                struct.accountProperties = new HashMap<String,String>(2*_map46.size);
                for (int _i47 = 0; _i47 < _map46.size; ++_i47)
                {
                  String _key48;
                  String _val49;
                  _key48 = iprot.readString();
                  _val49 = iprot.readString();
                  struct.accountProperties.put(_key48, _val49);
                }
                iprot.readMapEnd();
              }
              struct.setAccountPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeBrokerId = iprot.readI32();
              struct.setTradeBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BROKER_TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerTechPlatform = BrokerTechPlatform.findByValue(iprot.readI32());
              struct.setBrokerTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADE_ACCOUNT_REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeAccountRemark = iprot.readString();
              struct.setTradeAccountRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ACCOUNT_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountState = TradeAccountState.findByValue(iprot.readI32());
              struct.setAccountStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INVALID_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invalidReason = iprot.readString();
              struct.setInvalidReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // INVALID_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invalidErrorCode = iprot.readI32();
              struct.setInvalidErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // API_RET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.apiRetCode = iprot.readI32();
              struct.setApiRetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ACCOUNT_ACCESS_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accountAccessState = TradeAccountAccessState.findByValue(iprot.readI32());
              struct.setAccountAccessStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // HAD_BEEN_ACTIVED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hadBeenActived = iprot.readBool();
              struct.setHadBeenActivedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingTradeAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeBrokerAccessId()) {
        oprot.writeFieldBegin(TRADE_BROKER_ACCESS_ID_FIELD_DESC);
        oprot.writeI32(struct.tradeBrokerAccessId);
        oprot.writeFieldEnd();
      }
      if (struct.loginUserName != null) {
        if (struct.isSetLoginUserName()) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginPassword != null) {
        if (struct.isSetLoginPassword()) {
          oprot.writeFieldBegin(LOGIN_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.loginPassword);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountProperties != null) {
        if (struct.isSetAccountProperties()) {
          oprot.writeFieldBegin(ACCOUNT_PROPERTIES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.accountProperties.size()));
            for (Map.Entry<String, String> _iter50 : struct.accountProperties.entrySet())
            {
              oprot.writeString(_iter50.getKey());
              oprot.writeString(_iter50.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeBrokerId()) {
        oprot.writeFieldBegin(TRADE_BROKER_ID_FIELD_DESC);
        oprot.writeI32(struct.tradeBrokerId);
        oprot.writeFieldEnd();
      }
      if (struct.brokerTechPlatform != null) {
        if (struct.isSetBrokerTechPlatform()) {
          oprot.writeFieldBegin(BROKER_TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.brokerTechPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeAccountRemark != null) {
        if (struct.isSetTradeAccountRemark()) {
          oprot.writeFieldBegin(TRADE_ACCOUNT_REMARK_FIELD_DESC);
          oprot.writeString(struct.tradeAccountRemark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountState != null) {
        if (struct.isSetAccountState()) {
          oprot.writeFieldBegin(ACCOUNT_STATE_FIELD_DESC);
          oprot.writeI32(struct.accountState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.invalidReason != null) {
        if (struct.isSetInvalidReason()) {
          oprot.writeFieldBegin(INVALID_REASON_FIELD_DESC);
          oprot.writeString(struct.invalidReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInvalidErrorCode()) {
        oprot.writeFieldBegin(INVALID_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.invalidErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApiRetCode()) {
        oprot.writeFieldBegin(API_RET_CODE_FIELD_DESC);
        oprot.writeI32(struct.apiRetCode);
        oprot.writeFieldEnd();
      }
      if (struct.accountAccessState != null) {
        if (struct.isSetAccountAccessState()) {
          oprot.writeFieldBegin(ACCOUNT_ACCESS_STATE_FIELD_DESC);
          oprot.writeI32(struct.accountAccessState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHadBeenActived()) {
        oprot.writeFieldBegin(HAD_BEEN_ACTIVED_FIELD_DESC);
        oprot.writeBool(struct.hadBeenActived);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingTradeAccountTupleSchemeFactory implements SchemeFactory {
    public HostingTradeAccountTupleScheme getScheme() {
      return new HostingTradeAccountTupleScheme();
    }
  }

  private static class HostingTradeAccountTupleScheme extends TupleScheme<HostingTradeAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingTradeAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetTradeBrokerAccessId()) {
        optionals.set(1);
      }
      if (struct.isSetLoginUserName()) {
        optionals.set(2);
      }
      if (struct.isSetLoginPassword()) {
        optionals.set(3);
      }
      if (struct.isSetAccountProperties()) {
        optionals.set(4);
      }
      if (struct.isSetTradeBrokerId()) {
        optionals.set(5);
      }
      if (struct.isSetBrokerTechPlatform()) {
        optionals.set(6);
      }
      if (struct.isSetTradeAccountRemark()) {
        optionals.set(7);
      }
      if (struct.isSetAccountState()) {
        optionals.set(8);
      }
      if (struct.isSetInvalidReason()) {
        optionals.set(9);
      }
      if (struct.isSetInvalidErrorCode()) {
        optionals.set(10);
      }
      if (struct.isSetApiRetCode()) {
        optionals.set(11);
      }
      if (struct.isSetAccountAccessState()) {
        optionals.set(12);
      }
      if (struct.isSetHadBeenActived()) {
        optionals.set(13);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(14);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetTradeBrokerAccessId()) {
        oprot.writeI32(struct.tradeBrokerAccessId);
      }
      if (struct.isSetLoginUserName()) {
        oprot.writeString(struct.loginUserName);
      }
      if (struct.isSetLoginPassword()) {
        oprot.writeString(struct.loginPassword);
      }
      if (struct.isSetAccountProperties()) {
        {
          oprot.writeI32(struct.accountProperties.size());
          for (Map.Entry<String, String> _iter51 : struct.accountProperties.entrySet())
          {
            oprot.writeString(_iter51.getKey());
            oprot.writeString(_iter51.getValue());
          }
        }
      }
      if (struct.isSetTradeBrokerId()) {
        oprot.writeI32(struct.tradeBrokerId);
      }
      if (struct.isSetBrokerTechPlatform()) {
        oprot.writeI32(struct.brokerTechPlatform.getValue());
      }
      if (struct.isSetTradeAccountRemark()) {
        oprot.writeString(struct.tradeAccountRemark);
      }
      if (struct.isSetAccountState()) {
        oprot.writeI32(struct.accountState.getValue());
      }
      if (struct.isSetInvalidReason()) {
        oprot.writeString(struct.invalidReason);
      }
      if (struct.isSetInvalidErrorCode()) {
        oprot.writeI32(struct.invalidErrorCode);
      }
      if (struct.isSetApiRetCode()) {
        oprot.writeI32(struct.apiRetCode);
      }
      if (struct.isSetAccountAccessState()) {
        oprot.writeI32(struct.accountAccessState.getValue());
      }
      if (struct.isSetHadBeenActived()) {
        oprot.writeBool(struct.hadBeenActived);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingTradeAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeBrokerAccessId = iprot.readI32();
        struct.setTradeBrokerAccessIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginUserName = iprot.readString();
        struct.setLoginUserNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loginPassword = iprot.readString();
        struct.setLoginPasswordIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map52 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.accountProperties = new HashMap<String,String>(2*_map52.size);
          for (int _i53 = 0; _i53 < _map52.size; ++_i53)
          {
            String _key54;
            String _val55;
            _key54 = iprot.readString();
            _val55 = iprot.readString();
            struct.accountProperties.put(_key54, _val55);
          }
        }
        struct.setAccountPropertiesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeBrokerId = iprot.readI32();
        struct.setTradeBrokerIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.brokerTechPlatform = BrokerTechPlatform.findByValue(iprot.readI32());
        struct.setBrokerTechPlatformIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tradeAccountRemark = iprot.readString();
        struct.setTradeAccountRemarkIsSet(true);
      }
      if (incoming.get(8)) {
        struct.accountState = TradeAccountState.findByValue(iprot.readI32());
        struct.setAccountStateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.invalidReason = iprot.readString();
        struct.setInvalidReasonIsSet(true);
      }
      if (incoming.get(10)) {
        struct.invalidErrorCode = iprot.readI32();
        struct.setInvalidErrorCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.apiRetCode = iprot.readI32();
        struct.setApiRetCodeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.accountAccessState = TradeAccountAccessState.findByValue(iprot.readI32());
        struct.setAccountAccessStateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.hadBeenActived = iprot.readBool();
        struct.setHadBeenActivedIsSet(true);
      }
      if (incoming.get(14)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

