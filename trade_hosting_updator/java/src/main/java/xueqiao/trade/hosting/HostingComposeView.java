/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingComposeView implements org.apache.thrift.TBase<HostingComposeView, HostingComposeView._Fields>, java.io.Serializable, Cloneable, Comparable<HostingComposeView> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingComposeView");

  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ALIAS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aliasName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VIEW_SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("viewSource", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SUBSCRIBE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("subscribeStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingComposeViewStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingComposeViewTupleSchemeFactory());
  }

  public int subUserId; // optional
  public long composeGraphId; // optional
  public String aliasName; // optional
  /**
   * 
   * @see HostingComposeViewSource
   */
  public HostingComposeViewSource viewSource; // optional
  /**
   * 
   * @see HostingComposeViewSubscribeStatus
   */
  public HostingComposeViewSubscribeStatus subscribeStatus; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_USER_ID((short)1, "subUserId"),
    COMPOSE_GRAPH_ID((short)2, "composeGraphId"),
    ALIAS_NAME((short)3, "aliasName"),
    /**
     * 
     * @see HostingComposeViewSource
     */
    VIEW_SOURCE((short)4, "viewSource"),
    /**
     * 
     * @see HostingComposeViewSubscribeStatus
     */
    SUBSCRIBE_STATUS((short)5, "subscribeStatus"),
    CREATE_TIMESTAMP((short)8, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)9, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_USER_ID
          return SUB_USER_ID;
        case 2: // COMPOSE_GRAPH_ID
          return COMPOSE_GRAPH_ID;
        case 3: // ALIAS_NAME
          return ALIAS_NAME;
        case 4: // VIEW_SOURCE
          return VIEW_SOURCE;
        case 5: // SUBSCRIBE_STATUS
          return SUBSCRIBE_STATUS;
        case 8: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 9: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBUSERID_ISSET_ID = 0;
  private static final int __COMPOSEGRAPHID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_USER_ID,_Fields.COMPOSE_GRAPH_ID,_Fields.ALIAS_NAME,_Fields.VIEW_SOURCE,_Fields.SUBSCRIBE_STATUS,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_GRAPH_ID, new org.apache.thrift.meta_data.FieldMetaData("composeGraphId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ALIAS_NAME, new org.apache.thrift.meta_data.FieldMetaData("aliasName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIEW_SOURCE, new org.apache.thrift.meta_data.FieldMetaData("viewSource", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingComposeViewSource.class)));
    tmpMap.put(_Fields.SUBSCRIBE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("subscribeStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingComposeViewSubscribeStatus.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingComposeView.class, metaDataMap);
  }

  public HostingComposeView() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingComposeView(HostingComposeView other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subUserId = other.subUserId;
    this.composeGraphId = other.composeGraphId;
    if (other.isSetAliasName()) {
      this.aliasName = other.aliasName;
    }
    if (other.isSetViewSource()) {
      this.viewSource = other.viewSource;
    }
    if (other.isSetSubscribeStatus()) {
      this.subscribeStatus = other.subscribeStatus;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingComposeView deepCopy() {
    return new HostingComposeView(this);
  }

  @Override
  public void clear() {
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setComposeGraphIdIsSet(false);
    this.composeGraphId = 0;
    this.aliasName = null;
    this.viewSource = null;
    this.subscribeStatus = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingComposeView setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public long getComposeGraphId() {
    return this.composeGraphId;
  }

  public HostingComposeView setComposeGraphId(long composeGraphId) {
    this.composeGraphId = composeGraphId;
    setComposeGraphIdIsSet(true);
    return this;
  }

  public void unsetComposeGraphId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  /** Returns true if field composeGraphId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  public void setComposeGraphIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID, value);
  }

  public String getAliasName() {
    return this.aliasName;
  }

  public HostingComposeView setAliasName(String aliasName) {
    this.aliasName = aliasName;
    return this;
  }

  public void unsetAliasName() {
    this.aliasName = null;
  }

  /** Returns true if field aliasName is set (has been assigned a value) and false otherwise */
  public boolean isSetAliasName() {
    return this.aliasName != null;
  }

  public void setAliasNameIsSet(boolean value) {
    if (!value) {
      this.aliasName = null;
    }
  }

  /**
   * 
   * @see HostingComposeViewSource
   */
  public HostingComposeViewSource getViewSource() {
    return this.viewSource;
  }

  /**
   * 
   * @see HostingComposeViewSource
   */
  public HostingComposeView setViewSource(HostingComposeViewSource viewSource) {
    this.viewSource = viewSource;
    return this;
  }

  public void unsetViewSource() {
    this.viewSource = null;
  }

  /** Returns true if field viewSource is set (has been assigned a value) and false otherwise */
  public boolean isSetViewSource() {
    return this.viewSource != null;
  }

  public void setViewSourceIsSet(boolean value) {
    if (!value) {
      this.viewSource = null;
    }
  }

  /**
   * 
   * @see HostingComposeViewSubscribeStatus
   */
  public HostingComposeViewSubscribeStatus getSubscribeStatus() {
    return this.subscribeStatus;
  }

  /**
   * 
   * @see HostingComposeViewSubscribeStatus
   */
  public HostingComposeView setSubscribeStatus(HostingComposeViewSubscribeStatus subscribeStatus) {
    this.subscribeStatus = subscribeStatus;
    return this;
  }

  public void unsetSubscribeStatus() {
    this.subscribeStatus = null;
  }

  /** Returns true if field subscribeStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscribeStatus() {
    return this.subscribeStatus != null;
  }

  public void setSubscribeStatusIsSet(boolean value) {
    if (!value) {
      this.subscribeStatus = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingComposeView setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingComposeView setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case COMPOSE_GRAPH_ID:
      if (value == null) {
        unsetComposeGraphId();
      } else {
        setComposeGraphId((Long)value);
      }
      break;

    case ALIAS_NAME:
      if (value == null) {
        unsetAliasName();
      } else {
        setAliasName((String)value);
      }
      break;

    case VIEW_SOURCE:
      if (value == null) {
        unsetViewSource();
      } else {
        setViewSource((HostingComposeViewSource)value);
      }
      break;

    case SUBSCRIBE_STATUS:
      if (value == null) {
        unsetSubscribeStatus();
      } else {
        setSubscribeStatus((HostingComposeViewSubscribeStatus)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case COMPOSE_GRAPH_ID:
      return Long.valueOf(getComposeGraphId());

    case ALIAS_NAME:
      return getAliasName();

    case VIEW_SOURCE:
      return getViewSource();

    case SUBSCRIBE_STATUS:
      return getSubscribeStatus();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_USER_ID:
      return isSetSubUserId();
    case COMPOSE_GRAPH_ID:
      return isSetComposeGraphId();
    case ALIAS_NAME:
      return isSetAliasName();
    case VIEW_SOURCE:
      return isSetViewSource();
    case SUBSCRIBE_STATUS:
      return isSetSubscribeStatus();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingComposeView)
      return this.equals((HostingComposeView)that);
    return false;
  }

  public boolean equals(HostingComposeView that) {
    if (that == null)
      return false;

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_composeGraphId = true && this.isSetComposeGraphId();
    boolean that_present_composeGraphId = true && that.isSetComposeGraphId();
    if (this_present_composeGraphId || that_present_composeGraphId) {
      if (!(this_present_composeGraphId && that_present_composeGraphId))
        return false;
      if (this.composeGraphId != that.composeGraphId)
        return false;
    }

    boolean this_present_aliasName = true && this.isSetAliasName();
    boolean that_present_aliasName = true && that.isSetAliasName();
    if (this_present_aliasName || that_present_aliasName) {
      if (!(this_present_aliasName && that_present_aliasName))
        return false;
      if (!this.aliasName.equals(that.aliasName))
        return false;
    }

    boolean this_present_viewSource = true && this.isSetViewSource();
    boolean that_present_viewSource = true && that.isSetViewSource();
    if (this_present_viewSource || that_present_viewSource) {
      if (!(this_present_viewSource && that_present_viewSource))
        return false;
      if (!this.viewSource.equals(that.viewSource))
        return false;
    }

    boolean this_present_subscribeStatus = true && this.isSetSubscribeStatus();
    boolean that_present_subscribeStatus = true && that.isSetSubscribeStatus();
    if (this_present_subscribeStatus || that_present_subscribeStatus) {
      if (!(this_present_subscribeStatus && that_present_subscribeStatus))
        return false;
      if (!this.subscribeStatus.equals(that.subscribeStatus))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingComposeView other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphId()).compareTo(other.isSetComposeGraphId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphId, other.composeGraphId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAliasName()).compareTo(other.isSetAliasName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAliasName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aliasName, other.aliasName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetViewSource()).compareTo(other.isSetViewSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewSource, other.viewSource);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubscribeStatus()).compareTo(other.isSetSubscribeStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscribeStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscribeStatus, other.subscribeStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingComposeView(");
    boolean first = true;

    if (isSetSubUserId()) {
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetComposeGraphId()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphId:");
      sb.append(this.composeGraphId);
      first = false;
    }
    if (isSetAliasName()) {
      if (!first) sb.append(", ");
      sb.append("aliasName:");
      if (this.aliasName == null) {
        sb.append("null");
      } else {
        sb.append(this.aliasName);
      }
      first = false;
    }
    if (isSetViewSource()) {
      if (!first) sb.append(", ");
      sb.append("viewSource:");
      if (this.viewSource == null) {
        sb.append("null");
      } else {
        sb.append(this.viewSource);
      }
      first = false;
    }
    if (isSetSubscribeStatus()) {
      if (!first) sb.append(", ");
      sb.append("subscribeStatus:");
      if (this.subscribeStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.subscribeStatus);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingComposeViewStandardSchemeFactory implements SchemeFactory {
    public HostingComposeViewStandardScheme getScheme() {
      return new HostingComposeViewStandardScheme();
    }
  }

  private static class HostingComposeViewStandardScheme extends StandardScheme<HostingComposeView> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingComposeView struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSE_GRAPH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.composeGraphId = iprot.readI64();
              struct.setComposeGraphIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ALIAS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.aliasName = iprot.readString();
              struct.setAliasNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIEW_SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.viewSource = HostingComposeViewSource.findByValue(iprot.readI32());
              struct.setViewSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUBSCRIBE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subscribeStatus = HostingComposeViewSubscribeStatus.findByValue(iprot.readI32());
              struct.setSubscribeStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingComposeView struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeFieldBegin(COMPOSE_GRAPH_ID_FIELD_DESC);
        oprot.writeI64(struct.composeGraphId);
        oprot.writeFieldEnd();
      }
      if (struct.aliasName != null) {
        if (struct.isSetAliasName()) {
          oprot.writeFieldBegin(ALIAS_NAME_FIELD_DESC);
          oprot.writeString(struct.aliasName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.viewSource != null) {
        if (struct.isSetViewSource()) {
          oprot.writeFieldBegin(VIEW_SOURCE_FIELD_DESC);
          oprot.writeI32(struct.viewSource.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.subscribeStatus != null) {
        if (struct.isSetSubscribeStatus()) {
          oprot.writeFieldBegin(SUBSCRIBE_STATUS_FIELD_DESC);
          oprot.writeI32(struct.subscribeStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingComposeViewTupleSchemeFactory implements SchemeFactory {
    public HostingComposeViewTupleScheme getScheme() {
      return new HostingComposeViewTupleScheme();
    }
  }

  private static class HostingComposeViewTupleScheme extends TupleScheme<HostingComposeView> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingComposeView struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubUserId()) {
        optionals.set(0);
      }
      if (struct.isSetComposeGraphId()) {
        optionals.set(1);
      }
      if (struct.isSetAliasName()) {
        optionals.set(2);
      }
      if (struct.isSetViewSource()) {
        optionals.set(3);
      }
      if (struct.isSetSubscribeStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeI64(struct.composeGraphId);
      }
      if (struct.isSetAliasName()) {
        oprot.writeString(struct.aliasName);
      }
      if (struct.isSetViewSource()) {
        oprot.writeI32(struct.viewSource.getValue());
      }
      if (struct.isSetSubscribeStatus()) {
        oprot.writeI32(struct.subscribeStatus.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingComposeView struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.composeGraphId = iprot.readI64();
        struct.setComposeGraphIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.aliasName = iprot.readString();
        struct.setAliasNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.viewSource = HostingComposeViewSource.findByValue(iprot.readI32());
        struct.setViewSourceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subscribeStatus = HostingComposeViewSubscribeStatus.findByValue(iprot.readI32());
        struct.setSubscribeStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

