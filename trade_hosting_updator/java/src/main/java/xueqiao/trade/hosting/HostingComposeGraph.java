/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingComposeGraph implements org.apache.thrift.TBase<HostingComposeGraph, HostingComposeGraph._Fields>, java.io.Serializable, Cloneable, Comparable<HostingComposeGraph> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingComposeGraph");

  private static final org.apache.thrift.protocol.TField CREATE_SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("createSubUserId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField FORMULAR_FIELD_DESC = new org.apache.thrift.protocol.TField("formular", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LEGS_FIELD_DESC = new org.apache.thrift.protocol.TField("legs", org.apache.thrift.protocol.TType.MAP, (short)4);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphEnv", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingComposeGraphStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingComposeGraphTupleSchemeFactory());
  }

  public int createSubUserId; // optional
  public long composeGraphId; // optional
  public String formular; // optional
  public Map<String,HostingComposeLeg> legs; // optional
  public String composeGraphKey; // optional
  /**
   * 
   * @see HostingComposeGraphEnv
   */
  public HostingComposeGraphEnv composeGraphEnv; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CREATE_SUB_USER_ID((short)1, "createSubUserId"),
    COMPOSE_GRAPH_ID((short)2, "composeGraphId"),
    FORMULAR((short)3, "formular"),
    LEGS((short)4, "legs"),
    COMPOSE_GRAPH_KEY((short)5, "composeGraphKey"),
    /**
     * 
     * @see HostingComposeGraphEnv
     */
    COMPOSE_GRAPH_ENV((short)6, "composeGraphEnv"),
    CREATE_TIMESTAMP((short)11, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)12, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CREATE_SUB_USER_ID
          return CREATE_SUB_USER_ID;
        case 2: // COMPOSE_GRAPH_ID
          return COMPOSE_GRAPH_ID;
        case 3: // FORMULAR
          return FORMULAR;
        case 4: // LEGS
          return LEGS;
        case 5: // COMPOSE_GRAPH_KEY
          return COMPOSE_GRAPH_KEY;
        case 6: // COMPOSE_GRAPH_ENV
          return COMPOSE_GRAPH_ENV;
        case 11: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 12: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATESUBUSERID_ISSET_ID = 0;
  private static final int __COMPOSEGRAPHID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CREATE_SUB_USER_ID,_Fields.COMPOSE_GRAPH_ID,_Fields.FORMULAR,_Fields.LEGS,_Fields.COMPOSE_GRAPH_KEY,_Fields.COMPOSE_GRAPH_ENV,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CREATE_SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("createSubUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_GRAPH_ID, new org.apache.thrift.meta_data.FieldMetaData("composeGraphId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FORMULAR, new org.apache.thrift.meta_data.FieldMetaData("formular", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEGS, new org.apache.thrift.meta_data.FieldMetaData("legs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingComposeLeg.class))));
    tmpMap.put(_Fields.COMPOSE_GRAPH_KEY, new org.apache.thrift.meta_data.FieldMetaData("composeGraphKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOSE_GRAPH_ENV, new org.apache.thrift.meta_data.FieldMetaData("composeGraphEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingComposeGraphEnv.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingComposeGraph.class, metaDataMap);
  }

  public HostingComposeGraph() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingComposeGraph(HostingComposeGraph other) {
    __isset_bitfield = other.__isset_bitfield;
    this.createSubUserId = other.createSubUserId;
    this.composeGraphId = other.composeGraphId;
    if (other.isSetFormular()) {
      this.formular = other.formular;
    }
    if (other.isSetLegs()) {
      Map<String,HostingComposeLeg> __this__legs = new HashMap<String,HostingComposeLeg>(other.legs.size());
      for (Map.Entry<String, HostingComposeLeg> other_element : other.legs.entrySet()) {

        String other_element_key = other_element.getKey();
        HostingComposeLeg other_element_value = other_element.getValue();

        String __this__legs_copy_key = other_element_key;

        HostingComposeLeg __this__legs_copy_value = new HostingComposeLeg(other_element_value);

        __this__legs.put(__this__legs_copy_key, __this__legs_copy_value);
      }
      this.legs = __this__legs;
    }
    if (other.isSetComposeGraphKey()) {
      this.composeGraphKey = other.composeGraphKey;
    }
    if (other.isSetComposeGraphEnv()) {
      this.composeGraphEnv = other.composeGraphEnv;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingComposeGraph deepCopy() {
    return new HostingComposeGraph(this);
  }

  @Override
  public void clear() {
    setCreateSubUserIdIsSet(false);
    this.createSubUserId = 0;
    setComposeGraphIdIsSet(false);
    this.composeGraphId = 0;
    this.formular = null;
    this.legs = null;
    this.composeGraphKey = null;
    this.composeGraphEnv = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public int getCreateSubUserId() {
    return this.createSubUserId;
  }

  public HostingComposeGraph setCreateSubUserId(int createSubUserId) {
    this.createSubUserId = createSubUserId;
    setCreateSubUserIdIsSet(true);
    return this;
  }

  public void unsetCreateSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATESUBUSERID_ISSET_ID);
  }

  /** Returns true if field createSubUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATESUBUSERID_ISSET_ID);
  }

  public void setCreateSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATESUBUSERID_ISSET_ID, value);
  }

  public long getComposeGraphId() {
    return this.composeGraphId;
  }

  public HostingComposeGraph setComposeGraphId(long composeGraphId) {
    this.composeGraphId = composeGraphId;
    setComposeGraphIdIsSet(true);
    return this;
  }

  public void unsetComposeGraphId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  /** Returns true if field composeGraphId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  public void setComposeGraphIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID, value);
  }

  public String getFormular() {
    return this.formular;
  }

  public HostingComposeGraph setFormular(String formular) {
    this.formular = formular;
    return this;
  }

  public void unsetFormular() {
    this.formular = null;
  }

  /** Returns true if field formular is set (has been assigned a value) and false otherwise */
  public boolean isSetFormular() {
    return this.formular != null;
  }

  public void setFormularIsSet(boolean value) {
    if (!value) {
      this.formular = null;
    }
  }

  public int getLegsSize() {
    return (this.legs == null) ? 0 : this.legs.size();
  }

  public void putToLegs(String key, HostingComposeLeg val) {
    if (this.legs == null) {
      this.legs = new HashMap<String,HostingComposeLeg>();
    }
    this.legs.put(key, val);
  }

  public Map<String,HostingComposeLeg> getLegs() {
    return this.legs;
  }

  public HostingComposeGraph setLegs(Map<String,HostingComposeLeg> legs) {
    this.legs = legs;
    return this;
  }

  public void unsetLegs() {
    this.legs = null;
  }

  /** Returns true if field legs is set (has been assigned a value) and false otherwise */
  public boolean isSetLegs() {
    return this.legs != null;
  }

  public void setLegsIsSet(boolean value) {
    if (!value) {
      this.legs = null;
    }
  }

  public String getComposeGraphKey() {
    return this.composeGraphKey;
  }

  public HostingComposeGraph setComposeGraphKey(String composeGraphKey) {
    this.composeGraphKey = composeGraphKey;
    return this;
  }

  public void unsetComposeGraphKey() {
    this.composeGraphKey = null;
  }

  /** Returns true if field composeGraphKey is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphKey() {
    return this.composeGraphKey != null;
  }

  public void setComposeGraphKeyIsSet(boolean value) {
    if (!value) {
      this.composeGraphKey = null;
    }
  }

  /**
   * 
   * @see HostingComposeGraphEnv
   */
  public HostingComposeGraphEnv getComposeGraphEnv() {
    return this.composeGraphEnv;
  }

  /**
   * 
   * @see HostingComposeGraphEnv
   */
  public HostingComposeGraph setComposeGraphEnv(HostingComposeGraphEnv composeGraphEnv) {
    this.composeGraphEnv = composeGraphEnv;
    return this;
  }

  public void unsetComposeGraphEnv() {
    this.composeGraphEnv = null;
  }

  /** Returns true if field composeGraphEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphEnv() {
    return this.composeGraphEnv != null;
  }

  public void setComposeGraphEnvIsSet(boolean value) {
    if (!value) {
      this.composeGraphEnv = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingComposeGraph setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingComposeGraph setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CREATE_SUB_USER_ID:
      if (value == null) {
        unsetCreateSubUserId();
      } else {
        setCreateSubUserId((Integer)value);
      }
      break;

    case COMPOSE_GRAPH_ID:
      if (value == null) {
        unsetComposeGraphId();
      } else {
        setComposeGraphId((Long)value);
      }
      break;

    case FORMULAR:
      if (value == null) {
        unsetFormular();
      } else {
        setFormular((String)value);
      }
      break;

    case LEGS:
      if (value == null) {
        unsetLegs();
      } else {
        setLegs((Map<String,HostingComposeLeg>)value);
      }
      break;

    case COMPOSE_GRAPH_KEY:
      if (value == null) {
        unsetComposeGraphKey();
      } else {
        setComposeGraphKey((String)value);
      }
      break;

    case COMPOSE_GRAPH_ENV:
      if (value == null) {
        unsetComposeGraphEnv();
      } else {
        setComposeGraphEnv((HostingComposeGraphEnv)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CREATE_SUB_USER_ID:
      return Integer.valueOf(getCreateSubUserId());

    case COMPOSE_GRAPH_ID:
      return Long.valueOf(getComposeGraphId());

    case FORMULAR:
      return getFormular();

    case LEGS:
      return getLegs();

    case COMPOSE_GRAPH_KEY:
      return getComposeGraphKey();

    case COMPOSE_GRAPH_ENV:
      return getComposeGraphEnv();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CREATE_SUB_USER_ID:
      return isSetCreateSubUserId();
    case COMPOSE_GRAPH_ID:
      return isSetComposeGraphId();
    case FORMULAR:
      return isSetFormular();
    case LEGS:
      return isSetLegs();
    case COMPOSE_GRAPH_KEY:
      return isSetComposeGraphKey();
    case COMPOSE_GRAPH_ENV:
      return isSetComposeGraphEnv();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingComposeGraph)
      return this.equals((HostingComposeGraph)that);
    return false;
  }

  public boolean equals(HostingComposeGraph that) {
    if (that == null)
      return false;

    boolean this_present_createSubUserId = true && this.isSetCreateSubUserId();
    boolean that_present_createSubUserId = true && that.isSetCreateSubUserId();
    if (this_present_createSubUserId || that_present_createSubUserId) {
      if (!(this_present_createSubUserId && that_present_createSubUserId))
        return false;
      if (this.createSubUserId != that.createSubUserId)
        return false;
    }

    boolean this_present_composeGraphId = true && this.isSetComposeGraphId();
    boolean that_present_composeGraphId = true && that.isSetComposeGraphId();
    if (this_present_composeGraphId || that_present_composeGraphId) {
      if (!(this_present_composeGraphId && that_present_composeGraphId))
        return false;
      if (this.composeGraphId != that.composeGraphId)
        return false;
    }

    boolean this_present_formular = true && this.isSetFormular();
    boolean that_present_formular = true && that.isSetFormular();
    if (this_present_formular || that_present_formular) {
      if (!(this_present_formular && that_present_formular))
        return false;
      if (!this.formular.equals(that.formular))
        return false;
    }

    boolean this_present_legs = true && this.isSetLegs();
    boolean that_present_legs = true && that.isSetLegs();
    if (this_present_legs || that_present_legs) {
      if (!(this_present_legs && that_present_legs))
        return false;
      if (!this.legs.equals(that.legs))
        return false;
    }

    boolean this_present_composeGraphKey = true && this.isSetComposeGraphKey();
    boolean that_present_composeGraphKey = true && that.isSetComposeGraphKey();
    if (this_present_composeGraphKey || that_present_composeGraphKey) {
      if (!(this_present_composeGraphKey && that_present_composeGraphKey))
        return false;
      if (!this.composeGraphKey.equals(that.composeGraphKey))
        return false;
    }

    boolean this_present_composeGraphEnv = true && this.isSetComposeGraphEnv();
    boolean that_present_composeGraphEnv = true && that.isSetComposeGraphEnv();
    if (this_present_composeGraphEnv || that_present_composeGraphEnv) {
      if (!(this_present_composeGraphEnv && that_present_composeGraphEnv))
        return false;
      if (!this.composeGraphEnv.equals(that.composeGraphEnv))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingComposeGraph other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCreateSubUserId()).compareTo(other.isSetCreateSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createSubUserId, other.createSubUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphId()).compareTo(other.isSetComposeGraphId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphId, other.composeGraphId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFormular()).compareTo(other.isSetFormular());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormular()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formular, other.formular);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegs()).compareTo(other.isSetLegs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legs, other.legs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphKey()).compareTo(other.isSetComposeGraphKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphKey, other.composeGraphKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphEnv()).compareTo(other.isSetComposeGraphEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphEnv, other.composeGraphEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingComposeGraph(");
    boolean first = true;

    if (isSetCreateSubUserId()) {
      sb.append("createSubUserId:");
      sb.append(this.createSubUserId);
      first = false;
    }
    if (isSetComposeGraphId()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphId:");
      sb.append(this.composeGraphId);
      first = false;
    }
    if (isSetFormular()) {
      if (!first) sb.append(", ");
      sb.append("formular:");
      if (this.formular == null) {
        sb.append("null");
      } else {
        sb.append(this.formular);
      }
      first = false;
    }
    if (isSetLegs()) {
      if (!first) sb.append(", ");
      sb.append("legs:");
      if (this.legs == null) {
        sb.append("null");
      } else {
        sb.append(this.legs);
      }
      first = false;
    }
    if (isSetComposeGraphKey()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphKey:");
      if (this.composeGraphKey == null) {
        sb.append("null");
      } else {
        sb.append(this.composeGraphKey);
      }
      first = false;
    }
    if (isSetComposeGraphEnv()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphEnv:");
      if (this.composeGraphEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.composeGraphEnv);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingComposeGraphStandardSchemeFactory implements SchemeFactory {
    public HostingComposeGraphStandardScheme getScheme() {
      return new HostingComposeGraphStandardScheme();
    }
  }

  private static class HostingComposeGraphStandardScheme extends StandardScheme<HostingComposeGraph> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingComposeGraph struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CREATE_SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createSubUserId = iprot.readI32();
              struct.setCreateSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSE_GRAPH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.composeGraphId = iprot.readI64();
              struct.setComposeGraphIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FORMULAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formular = iprot.readString();
              struct.setFormularIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEGS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.legs = new HashMap<String,HostingComposeLeg>(2*_map26.size);
                for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                {
                  String _key28;
                  HostingComposeLeg _val29;
                  _key28 = iprot.readString();
                  _val29 = new HostingComposeLeg();
                  _val29.read(iprot);
                  struct.legs.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setLegsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPOSE_GRAPH_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.composeGraphKey = iprot.readString();
              struct.setComposeGraphKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPOSE_GRAPH_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.composeGraphEnv = HostingComposeGraphEnv.findByValue(iprot.readI32());
              struct.setComposeGraphEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingComposeGraph struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCreateSubUserId()) {
        oprot.writeFieldBegin(CREATE_SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.createSubUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeFieldBegin(COMPOSE_GRAPH_ID_FIELD_DESC);
        oprot.writeI64(struct.composeGraphId);
        oprot.writeFieldEnd();
      }
      if (struct.formular != null) {
        if (struct.isSetFormular()) {
          oprot.writeFieldBegin(FORMULAR_FIELD_DESC);
          oprot.writeString(struct.formular);
          oprot.writeFieldEnd();
        }
      }
      if (struct.legs != null) {
        if (struct.isSetLegs()) {
          oprot.writeFieldBegin(LEGS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.legs.size()));
            for (Map.Entry<String, HostingComposeLeg> _iter30 : struct.legs.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              _iter30.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.composeGraphKey != null) {
        if (struct.isSetComposeGraphKey()) {
          oprot.writeFieldBegin(COMPOSE_GRAPH_KEY_FIELD_DESC);
          oprot.writeString(struct.composeGraphKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.composeGraphEnv != null) {
        if (struct.isSetComposeGraphEnv()) {
          oprot.writeFieldBegin(COMPOSE_GRAPH_ENV_FIELD_DESC);
          oprot.writeI32(struct.composeGraphEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingComposeGraphTupleSchemeFactory implements SchemeFactory {
    public HostingComposeGraphTupleScheme getScheme() {
      return new HostingComposeGraphTupleScheme();
    }
  }

  private static class HostingComposeGraphTupleScheme extends TupleScheme<HostingComposeGraph> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingComposeGraph struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCreateSubUserId()) {
        optionals.set(0);
      }
      if (struct.isSetComposeGraphId()) {
        optionals.set(1);
      }
      if (struct.isSetFormular()) {
        optionals.set(2);
      }
      if (struct.isSetLegs()) {
        optionals.set(3);
      }
      if (struct.isSetComposeGraphKey()) {
        optionals.set(4);
      }
      if (struct.isSetComposeGraphEnv()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetCreateSubUserId()) {
        oprot.writeI32(struct.createSubUserId);
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeI64(struct.composeGraphId);
      }
      if (struct.isSetFormular()) {
        oprot.writeString(struct.formular);
      }
      if (struct.isSetLegs()) {
        {
          oprot.writeI32(struct.legs.size());
          for (Map.Entry<String, HostingComposeLeg> _iter31 : struct.legs.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetComposeGraphKey()) {
        oprot.writeString(struct.composeGraphKey);
      }
      if (struct.isSetComposeGraphEnv()) {
        oprot.writeI32(struct.composeGraphEnv.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingComposeGraph struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.createSubUserId = iprot.readI32();
        struct.setCreateSubUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.composeGraphId = iprot.readI64();
        struct.setComposeGraphIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.formular = iprot.readString();
        struct.setFormularIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.legs = new HashMap<String,HostingComposeLeg>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34;
            HostingComposeLeg _val35;
            _key34 = iprot.readString();
            _val35 = new HostingComposeLeg();
            _val35.read(iprot);
            struct.legs.put(_key34, _val35);
          }
        }
        struct.setLegsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.composeGraphKey = iprot.readString();
        struct.setComposeGraphKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.composeGraphEnv = HostingComposeGraphEnv.findByValue(iprot.readI32());
        struct.setComposeGraphEnvIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

