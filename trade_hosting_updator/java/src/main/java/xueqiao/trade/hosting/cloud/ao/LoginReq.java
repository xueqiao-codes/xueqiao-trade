/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.cloud.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LoginReq implements org.apache.thrift.TBase<LoginReq, LoginReq._Fields>, java.io.Serializable, Cloneable, Comparable<LoginReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LoginReq");

  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_PASSWORD_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPasswordMd5", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LoginReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LoginReqTupleSchemeFactory());
  }

  public long machineId; // optional
  public String loginUserName; // optional
  public String loginPasswordMd5; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MACHINE_ID((short)1, "machineId"),
    LOGIN_USER_NAME((short)2, "loginUserName"),
    LOGIN_PASSWORD_MD5((short)3, "loginPasswordMd5");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MACHINE_ID
          return MACHINE_ID;
        case 2: // LOGIN_USER_NAME
          return LOGIN_USER_NAME;
        case 3: // LOGIN_PASSWORD_MD5
          return LOGIN_PASSWORD_MD5;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MACHINEID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MACHINE_ID,_Fields.LOGIN_USER_NAME,_Fields.LOGIN_PASSWORD_MD5};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIN_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASSWORD_MD5, new org.apache.thrift.meta_data.FieldMetaData("loginPasswordMd5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LoginReq.class, metaDataMap);
  }

  public LoginReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginReq(LoginReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.machineId = other.machineId;
    if (other.isSetLoginUserName()) {
      this.loginUserName = other.loginUserName;
    }
    if (other.isSetLoginPasswordMd5()) {
      this.loginPasswordMd5 = other.loginPasswordMd5;
    }
  }

  public LoginReq deepCopy() {
    return new LoginReq(this);
  }

  @Override
  public void clear() {
    setMachineIdIsSet(false);
    this.machineId = 0;
    this.loginUserName = null;
    this.loginPasswordMd5 = null;
  }

  public long getMachineId() {
    return this.machineId;
  }

  public LoginReq setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public String getLoginUserName() {
    return this.loginUserName;
  }

  public LoginReq setLoginUserName(String loginUserName) {
    this.loginUserName = loginUserName;
    return this;
  }

  public void unsetLoginUserName() {
    this.loginUserName = null;
  }

  /** Returns true if field loginUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginUserName() {
    return this.loginUserName != null;
  }

  public void setLoginUserNameIsSet(boolean value) {
    if (!value) {
      this.loginUserName = null;
    }
  }

  public String getLoginPasswordMd5() {
    return this.loginPasswordMd5;
  }

  public LoginReq setLoginPasswordMd5(String loginPasswordMd5) {
    this.loginPasswordMd5 = loginPasswordMd5;
    return this;
  }

  public void unsetLoginPasswordMd5() {
    this.loginPasswordMd5 = null;
  }

  /** Returns true if field loginPasswordMd5 is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPasswordMd5() {
    return this.loginPasswordMd5 != null;
  }

  public void setLoginPasswordMd5IsSet(boolean value) {
    if (!value) {
      this.loginPasswordMd5 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case LOGIN_USER_NAME:
      if (value == null) {
        unsetLoginUserName();
      } else {
        setLoginUserName((String)value);
      }
      break;

    case LOGIN_PASSWORD_MD5:
      if (value == null) {
        unsetLoginPasswordMd5();
      } else {
        setLoginPasswordMd5((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case LOGIN_USER_NAME:
      return getLoginUserName();

    case LOGIN_PASSWORD_MD5:
      return getLoginPasswordMd5();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MACHINE_ID:
      return isSetMachineId();
    case LOGIN_USER_NAME:
      return isSetLoginUserName();
    case LOGIN_PASSWORD_MD5:
      return isSetLoginPasswordMd5();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginReq)
      return this.equals((LoginReq)that);
    return false;
  }

  public boolean equals(LoginReq that) {
    if (that == null)
      return false;

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_loginUserName = true && this.isSetLoginUserName();
    boolean that_present_loginUserName = true && that.isSetLoginUserName();
    if (this_present_loginUserName || that_present_loginUserName) {
      if (!(this_present_loginUserName && that_present_loginUserName))
        return false;
      if (!this.loginUserName.equals(that.loginUserName))
        return false;
    }

    boolean this_present_loginPasswordMd5 = true && this.isSetLoginPasswordMd5();
    boolean that_present_loginPasswordMd5 = true && that.isSetLoginPasswordMd5();
    if (this_present_loginPasswordMd5 || that_present_loginPasswordMd5) {
      if (!(this_present_loginPasswordMd5 && that_present_loginPasswordMd5))
        return false;
      if (!this.loginPasswordMd5.equals(that.loginPasswordMd5))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(LoginReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginUserName()).compareTo(other.isSetLoginUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserName, other.loginUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPasswordMd5()).compareTo(other.isSetLoginPasswordMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPasswordMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPasswordMd5, other.loginPasswordMd5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LoginReq(");
    boolean first = true;

    if (isSetMachineId()) {
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetLoginUserName()) {
      if (!first) sb.append(", ");
      sb.append("loginUserName:");
      if (this.loginUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserName);
      }
      first = false;
    }
    if (isSetLoginPasswordMd5()) {
      if (!first) sb.append(", ");
      sb.append("loginPasswordMd5:");
      if (this.loginPasswordMd5 == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPasswordMd5);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LoginReqStandardSchemeFactory implements SchemeFactory {
    public LoginReqStandardScheme getScheme() {
      return new LoginReqStandardScheme();
    }
  }

  private static class LoginReqStandardScheme extends StandardScheme<LoginReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LoginReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginUserName = iprot.readString();
              struct.setLoginUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_PASSWORD_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPasswordMd5 = iprot.readString();
              struct.setLoginPasswordMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LoginReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.loginUserName != null) {
        if (struct.isSetLoginUserName()) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.loginUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginPasswordMd5 != null) {
        if (struct.isSetLoginPasswordMd5()) {
          oprot.writeFieldBegin(LOGIN_PASSWORD_MD5_FIELD_DESC);
          oprot.writeString(struct.loginPasswordMd5);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LoginReqTupleSchemeFactory implements SchemeFactory {
    public LoginReqTupleScheme getScheme() {
      return new LoginReqTupleScheme();
    }
  }

  private static class LoginReqTupleScheme extends TupleScheme<LoginReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LoginReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMachineId()) {
        optionals.set(0);
      }
      if (struct.isSetLoginUserName()) {
        optionals.set(1);
      }
      if (struct.isSetLoginPasswordMd5()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetLoginUserName()) {
        oprot.writeString(struct.loginUserName);
      }
      if (struct.isSetLoginPasswordMd5()) {
        oprot.writeString(struct.loginPasswordMd5);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LoginReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginUserName = iprot.readString();
        struct.setLoginUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.loginPasswordMd5 = iprot.readString();
        struct.setLoginPasswordMd5IsSet(true);
      }
    }
  }

}

