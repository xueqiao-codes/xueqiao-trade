/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 子用户Session
 */
public class HostingSession implements org.apache.thrift.TBase<HostingSession, HostingSession._Fields>, java.io.Serializable, Cloneable, Comparable<HostingSession> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingSession");

  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOGIN_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("loginIP", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingSessionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingSessionTupleSchemeFactory());
  }

  public long machineId; // optional
  public int subUserId; // optional
  public String token; // optional
  public String loginIP; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MACHINE_ID((short)1, "machineId"),
    SUB_USER_ID((short)2, "subUserId"),
    TOKEN((short)3, "token"),
    LOGIN_IP((short)4, "loginIP");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MACHINE_ID
          return MACHINE_ID;
        case 2: // SUB_USER_ID
          return SUB_USER_ID;
        case 3: // TOKEN
          return TOKEN;
        case 4: // LOGIN_IP
          return LOGIN_IP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MACHINEID_ISSET_ID = 0;
  private static final int __SUBUSERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MACHINE_ID,_Fields.SUB_USER_ID,_Fields.TOKEN,_Fields.LOGIN_IP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_IP, new org.apache.thrift.meta_data.FieldMetaData("loginIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingSession.class, metaDataMap);
  }

  public HostingSession() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingSession(HostingSession other) {
    __isset_bitfield = other.__isset_bitfield;
    this.machineId = other.machineId;
    this.subUserId = other.subUserId;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetLoginIP()) {
      this.loginIP = other.loginIP;
    }
  }

  public HostingSession deepCopy() {
    return new HostingSession(this);
  }

  @Override
  public void clear() {
    setMachineIdIsSet(false);
    this.machineId = 0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    this.token = null;
    this.loginIP = null;
  }

  public long getMachineId() {
    return this.machineId;
  }

  public HostingSession setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingSession setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public HostingSession setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getLoginIP() {
    return this.loginIP;
  }

  public HostingSession setLoginIP(String loginIP) {
    this.loginIP = loginIP;
    return this;
  }

  public void unsetLoginIP() {
    this.loginIP = null;
  }

  /** Returns true if field loginIP is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginIP() {
    return this.loginIP != null;
  }

  public void setLoginIPIsSet(boolean value) {
    if (!value) {
      this.loginIP = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case LOGIN_IP:
      if (value == null) {
        unsetLoginIP();
      } else {
        setLoginIP((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case TOKEN:
      return getToken();

    case LOGIN_IP:
      return getLoginIP();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MACHINE_ID:
      return isSetMachineId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case TOKEN:
      return isSetToken();
    case LOGIN_IP:
      return isSetLoginIP();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingSession)
      return this.equals((HostingSession)that);
    return false;
  }

  public boolean equals(HostingSession that) {
    if (that == null)
      return false;

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_loginIP = true && this.isSetLoginIP();
    boolean that_present_loginIP = true && that.isSetLoginIP();
    if (this_present_loginIP || that_present_loginIP) {
      if (!(this_present_loginIP && that_present_loginIP))
        return false;
      if (!this.loginIP.equals(that.loginIP))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingSession other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginIP()).compareTo(other.isSetLoginIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginIP, other.loginIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingSession(");
    boolean first = true;

    if (isSetMachineId()) {
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetLoginIP()) {
      if (!first) sb.append(", ");
      sb.append("loginIP:");
      if (this.loginIP == null) {
        sb.append("null");
      } else {
        sb.append(this.loginIP);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingSessionStandardSchemeFactory implements SchemeFactory {
    public HostingSessionStandardScheme getScheme() {
      return new HostingSessionStandardScheme();
    }
  }

  private static class HostingSessionStandardScheme extends StandardScheme<HostingSession> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingSession struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGIN_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginIP = iprot.readString();
              struct.setLoginIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingSession struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginIP != null) {
        if (struct.isSetLoginIP()) {
          oprot.writeFieldBegin(LOGIN_IP_FIELD_DESC);
          oprot.writeString(struct.loginIP);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingSessionTupleSchemeFactory implements SchemeFactory {
    public HostingSessionTupleScheme getScheme() {
      return new HostingSessionTupleScheme();
    }
  }

  private static class HostingSessionTupleScheme extends TupleScheme<HostingSession> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingSession struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMachineId()) {
        optionals.set(0);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(1);
      }
      if (struct.isSetToken()) {
        optionals.set(2);
      }
      if (struct.isSetLoginIP()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetLoginIP()) {
        oprot.writeString(struct.loginIP);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingSession struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.loginIP = iprot.readString();
        struct.setLoginIPIsSet(true);
      }
    }
  }

}

