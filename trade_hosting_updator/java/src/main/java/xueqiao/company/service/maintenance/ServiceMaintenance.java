/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.company.service.maintenance;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 公司服务维护信息
 */
public class ServiceMaintenance implements org.apache.thrift.TBase<ServiceMaintenance, ServiceMaintenance._Fields>, java.io.Serializable, Cloneable, Comparable<ServiceMaintenance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ServiceMaintenance");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_TIME_SPANS_FIELD_DESC = new org.apache.thrift.protocol.TField("maintenanceTimeSpans", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("maintenanceState", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("versionId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("versionTag", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ServiceMaintenanceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ServiceMaintenanceTupleSchemeFactory());
  }

  public long companyId; // optional
  public Set<MaintenanceTimeSpan> maintenanceTimeSpans; // optional
  /**
   * 
   * @see MaintenanceState
   */
  public MaintenanceState maintenanceState; // optional
  public long versionId; // optional
  public String versionTag; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "companyId"),
    MAINTENANCE_TIME_SPANS((short)2, "maintenanceTimeSpans"),
    /**
     * 
     * @see MaintenanceState
     */
    MAINTENANCE_STATE((short)3, "maintenanceState"),
    VERSION_ID((short)4, "versionId"),
    VERSION_TAG((short)5, "versionTag"),
    CREATE_TIMESTAMP((short)6, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)7, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // MAINTENANCE_TIME_SPANS
          return MAINTENANCE_TIME_SPANS;
        case 3: // MAINTENANCE_STATE
          return MAINTENANCE_STATE;
        case 4: // VERSION_ID
          return VERSION_ID;
        case 5: // VERSION_TAG
          return VERSION_TAG;
        case 6: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 7: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANYID_ISSET_ID = 0;
  private static final int __VERSIONID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.MAINTENANCE_TIME_SPANS,_Fields.MAINTENANCE_STATE,_Fields.VERSION_ID,_Fields.VERSION_TAG,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAINTENANCE_TIME_SPANS, new org.apache.thrift.meta_data.FieldMetaData("maintenanceTimeSpans", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MaintenanceTimeSpan.class))));
    tmpMap.put(_Fields.MAINTENANCE_STATE, new org.apache.thrift.meta_data.FieldMetaData("maintenanceState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MaintenanceState.class)));
    tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("versionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_TAG, new org.apache.thrift.meta_data.FieldMetaData("versionTag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ServiceMaintenance.class, metaDataMap);
  }

  public ServiceMaintenance() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceMaintenance(ServiceMaintenance other) {
    __isset_bitfield = other.__isset_bitfield;
    this.companyId = other.companyId;
    if (other.isSetMaintenanceTimeSpans()) {
      Set<MaintenanceTimeSpan> __this__maintenanceTimeSpans = new HashSet<MaintenanceTimeSpan>(other.maintenanceTimeSpans.size());
      for (MaintenanceTimeSpan other_element : other.maintenanceTimeSpans) {
        __this__maintenanceTimeSpans.add(other_element);
      }
      this.maintenanceTimeSpans = __this__maintenanceTimeSpans;
    }
    if (other.isSetMaintenanceState()) {
      this.maintenanceState = other.maintenanceState;
    }
    this.versionId = other.versionId;
    if (other.isSetVersionTag()) {
      this.versionTag = other.versionTag;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public ServiceMaintenance deepCopy() {
    return new ServiceMaintenance(this);
  }

  @Override
  public void clear() {
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.maintenanceTimeSpans = null;
    this.maintenanceState = null;
    setVersionIdIsSet(false);
    this.versionId = 0;
    this.versionTag = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getCompanyId() {
    return this.companyId;
  }

  public ServiceMaintenance setCompanyId(long companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getMaintenanceTimeSpansSize() {
    return (this.maintenanceTimeSpans == null) ? 0 : this.maintenanceTimeSpans.size();
  }

  public java.util.Iterator<MaintenanceTimeSpan> getMaintenanceTimeSpansIterator() {
    return (this.maintenanceTimeSpans == null) ? null : this.maintenanceTimeSpans.iterator();
  }

  public void addToMaintenanceTimeSpans(MaintenanceTimeSpan elem) {
    if (this.maintenanceTimeSpans == null) {
      this.maintenanceTimeSpans = new HashSet<MaintenanceTimeSpan>();
    }
    this.maintenanceTimeSpans.add(elem);
  }

  public Set<MaintenanceTimeSpan> getMaintenanceTimeSpans() {
    return this.maintenanceTimeSpans;
  }

  public ServiceMaintenance setMaintenanceTimeSpans(Set<MaintenanceTimeSpan> maintenanceTimeSpans) {
    this.maintenanceTimeSpans = maintenanceTimeSpans;
    return this;
  }

  public void unsetMaintenanceTimeSpans() {
    this.maintenanceTimeSpans = null;
  }

  /** Returns true if field maintenanceTimeSpans is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceTimeSpans() {
    return this.maintenanceTimeSpans != null;
  }

  public void setMaintenanceTimeSpansIsSet(boolean value) {
    if (!value) {
      this.maintenanceTimeSpans = null;
    }
  }

  /**
   * 
   * @see MaintenanceState
   */
  public MaintenanceState getMaintenanceState() {
    return this.maintenanceState;
  }

  /**
   * 
   * @see MaintenanceState
   */
  public ServiceMaintenance setMaintenanceState(MaintenanceState maintenanceState) {
    this.maintenanceState = maintenanceState;
    return this;
  }

  public void unsetMaintenanceState() {
    this.maintenanceState = null;
  }

  /** Returns true if field maintenanceState is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceState() {
    return this.maintenanceState != null;
  }

  public void setMaintenanceStateIsSet(boolean value) {
    if (!value) {
      this.maintenanceState = null;
    }
  }

  public long getVersionId() {
    return this.versionId;
  }

  public ServiceMaintenance setVersionId(long versionId) {
    this.versionId = versionId;
    setVersionIdIsSet(true);
    return this;
  }

  public void unsetVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  /** Returns true if field versionId is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  public void setVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONID_ISSET_ID, value);
  }

  public String getVersionTag() {
    return this.versionTag;
  }

  public ServiceMaintenance setVersionTag(String versionTag) {
    this.versionTag = versionTag;
    return this;
  }

  public void unsetVersionTag() {
    this.versionTag = null;
  }

  /** Returns true if field versionTag is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionTag() {
    return this.versionTag != null;
  }

  public void setVersionTagIsSet(boolean value) {
    if (!value) {
      this.versionTag = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public ServiceMaintenance setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public ServiceMaintenance setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Long)value);
      }
      break;

    case MAINTENANCE_TIME_SPANS:
      if (value == null) {
        unsetMaintenanceTimeSpans();
      } else {
        setMaintenanceTimeSpans((Set<MaintenanceTimeSpan>)value);
      }
      break;

    case MAINTENANCE_STATE:
      if (value == null) {
        unsetMaintenanceState();
      } else {
        setMaintenanceState((MaintenanceState)value);
      }
      break;

    case VERSION_ID:
      if (value == null) {
        unsetVersionId();
      } else {
        setVersionId((Long)value);
      }
      break;

    case VERSION_TAG:
      if (value == null) {
        unsetVersionTag();
      } else {
        setVersionTag((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return Long.valueOf(getCompanyId());

    case MAINTENANCE_TIME_SPANS:
      return getMaintenanceTimeSpans();

    case MAINTENANCE_STATE:
      return getMaintenanceState();

    case VERSION_ID:
      return Long.valueOf(getVersionId());

    case VERSION_TAG:
      return getVersionTag();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompanyId();
    case MAINTENANCE_TIME_SPANS:
      return isSetMaintenanceTimeSpans();
    case MAINTENANCE_STATE:
      return isSetMaintenanceState();
    case VERSION_ID:
      return isSetVersionId();
    case VERSION_TAG:
      return isSetVersionTag();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceMaintenance)
      return this.equals((ServiceMaintenance)that);
    return false;
  }

  public boolean equals(ServiceMaintenance that) {
    if (that == null)
      return false;

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_maintenanceTimeSpans = true && this.isSetMaintenanceTimeSpans();
    boolean that_present_maintenanceTimeSpans = true && that.isSetMaintenanceTimeSpans();
    if (this_present_maintenanceTimeSpans || that_present_maintenanceTimeSpans) {
      if (!(this_present_maintenanceTimeSpans && that_present_maintenanceTimeSpans))
        return false;
      if (!this.maintenanceTimeSpans.equals(that.maintenanceTimeSpans))
        return false;
    }

    boolean this_present_maintenanceState = true && this.isSetMaintenanceState();
    boolean that_present_maintenanceState = true && that.isSetMaintenanceState();
    if (this_present_maintenanceState || that_present_maintenanceState) {
      if (!(this_present_maintenanceState && that_present_maintenanceState))
        return false;
      if (!this.maintenanceState.equals(that.maintenanceState))
        return false;
    }

    boolean this_present_versionId = true && this.isSetVersionId();
    boolean that_present_versionId = true && that.isSetVersionId();
    if (this_present_versionId || that_present_versionId) {
      if (!(this_present_versionId && that_present_versionId))
        return false;
      if (this.versionId != that.versionId)
        return false;
    }

    boolean this_present_versionTag = true && this.isSetVersionTag();
    boolean that_present_versionTag = true && that.isSetVersionTag();
    if (this_present_versionTag || that_present_versionTag) {
      if (!(this_present_versionTag && that_present_versionTag))
        return false;
      if (!this.versionTag.equals(that.versionTag))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ServiceMaintenance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaintenanceTimeSpans()).compareTo(other.isSetMaintenanceTimeSpans());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceTimeSpans()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maintenanceTimeSpans, other.maintenanceTimeSpans);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaintenanceState()).compareTo(other.isSetMaintenanceState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maintenanceState, other.maintenanceState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionId()).compareTo(other.isSetVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionId, other.versionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionTag()).compareTo(other.isSetVersionTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionTag, other.versionTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceMaintenance(");
    boolean first = true;

    if (isSetCompanyId()) {
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetMaintenanceTimeSpans()) {
      if (!first) sb.append(", ");
      sb.append("maintenanceTimeSpans:");
      if (this.maintenanceTimeSpans == null) {
        sb.append("null");
      } else {
        sb.append(this.maintenanceTimeSpans);
      }
      first = false;
    }
    if (isSetMaintenanceState()) {
      if (!first) sb.append(", ");
      sb.append("maintenanceState:");
      if (this.maintenanceState == null) {
        sb.append("null");
      } else {
        sb.append(this.maintenanceState);
      }
      first = false;
    }
    if (isSetVersionId()) {
      if (!first) sb.append(", ");
      sb.append("versionId:");
      sb.append(this.versionId);
      first = false;
    }
    if (isSetVersionTag()) {
      if (!first) sb.append(", ");
      sb.append("versionTag:");
      if (this.versionTag == null) {
        sb.append("null");
      } else {
        sb.append(this.versionTag);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ServiceMaintenanceStandardSchemeFactory implements SchemeFactory {
    public ServiceMaintenanceStandardScheme getScheme() {
      return new ServiceMaintenanceStandardScheme();
    }
  }

  private static class ServiceMaintenanceStandardScheme extends StandardScheme<ServiceMaintenance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ServiceMaintenance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyId = iprot.readI64();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAINTENANCE_TIME_SPANS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set8 = iprot.readSetBegin();
                struct.maintenanceTimeSpans = new HashSet<MaintenanceTimeSpan>(2*_set8.size);
                for (int _i9 = 0; _i9 < _set8.size; ++_i9)
                {
                  MaintenanceTimeSpan _elem10;
                  _elem10 = MaintenanceTimeSpan.findByValue(iprot.readI32());
                  struct.maintenanceTimeSpans.add(_elem10);
                }
                iprot.readSetEnd();
              }
              struct.setMaintenanceTimeSpansIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAINTENANCE_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maintenanceState = MaintenanceState.findByValue(iprot.readI32());
              struct.setMaintenanceStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionId = iprot.readI64();
              struct.setVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionTag = iprot.readString();
              struct.setVersionTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ServiceMaintenance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.maintenanceTimeSpans != null) {
        if (struct.isSetMaintenanceTimeSpans()) {
          oprot.writeFieldBegin(MAINTENANCE_TIME_SPANS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.maintenanceTimeSpans.size()));
            for (MaintenanceTimeSpan _iter11 : struct.maintenanceTimeSpans)
            {
              oprot.writeI32(_iter11.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.maintenanceState != null) {
        if (struct.isSetMaintenanceState()) {
          oprot.writeFieldBegin(MAINTENANCE_STATE_FIELD_DESC);
          oprot.writeI32(struct.maintenanceState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersionId()) {
        oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
        oprot.writeI64(struct.versionId);
        oprot.writeFieldEnd();
      }
      if (struct.versionTag != null) {
        if (struct.isSetVersionTag()) {
          oprot.writeFieldBegin(VERSION_TAG_FIELD_DESC);
          oprot.writeString(struct.versionTag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ServiceMaintenanceTupleSchemeFactory implements SchemeFactory {
    public ServiceMaintenanceTupleScheme getScheme() {
      return new ServiceMaintenanceTupleScheme();
    }
  }

  private static class ServiceMaintenanceTupleScheme extends TupleScheme<ServiceMaintenance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ServiceMaintenance struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyId()) {
        optionals.set(0);
      }
      if (struct.isSetMaintenanceTimeSpans()) {
        optionals.set(1);
      }
      if (struct.isSetMaintenanceState()) {
        optionals.set(2);
      }
      if (struct.isSetVersionId()) {
        optionals.set(3);
      }
      if (struct.isSetVersionTag()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetCompanyId()) {
        oprot.writeI64(struct.companyId);
      }
      if (struct.isSetMaintenanceTimeSpans()) {
        {
          oprot.writeI32(struct.maintenanceTimeSpans.size());
          for (MaintenanceTimeSpan _iter12 : struct.maintenanceTimeSpans)
          {
            oprot.writeI32(_iter12.getValue());
          }
        }
      }
      if (struct.isSetMaintenanceState()) {
        oprot.writeI32(struct.maintenanceState.getValue());
      }
      if (struct.isSetVersionId()) {
        oprot.writeI64(struct.versionId);
      }
      if (struct.isSetVersionTag()) {
        oprot.writeString(struct.versionTag);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ServiceMaintenance struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.companyId = iprot.readI64();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set13 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.maintenanceTimeSpans = new HashSet<MaintenanceTimeSpan>(2*_set13.size);
          for (int _i14 = 0; _i14 < _set13.size; ++_i14)
          {
            MaintenanceTimeSpan _elem15;
            _elem15 = MaintenanceTimeSpan.findByValue(iprot.readI32());
            struct.maintenanceTimeSpans.add(_elem15);
          }
        }
        struct.setMaintenanceTimeSpansIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maintenanceState = MaintenanceState.findByValue(iprot.readI32());
        struct.setMaintenanceStateIsSet(true);
      }
      if (incoming.get(3)) {
        struct.versionId = iprot.readI64();
        struct.setVersionIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.versionTag = iprot.readString();
        struct.setVersionTagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

