#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import xueqiao.trade.hosting.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ProxyTradeType:
  REAL = 1
  SIM = 2

  _VALUES_TO_NAMES = {
    1: "REAL",
    2: "SIM",
  }

  _NAMES_TO_VALUES = {
    "REAL": 1,
    "SIM": 2,
  }

class HostingServiceStatus:
  WAITING = 0
  OPENING = 1
  UPGRADING = 2
  WORKING = 3
  EXPIRED = 4
  RELEASED = 5

  _VALUES_TO_NAMES = {
    0: "WAITING",
    1: "OPENING",
    2: "UPGRADING",
    3: "WORKING",
    4: "EXPIRED",
    5: "RELEASED",
  }

  _NAMES_TO_VALUES = {
    "WAITING": 0,
    "OPENING": 1,
    "UPGRADING": 2,
    "WORKING": 3,
    "EXPIRED": 4,
    "RELEASED": 5,
  }

class UpdateType:
  FREE_UPDATE = 0
  FORCE_UPDATE = 1

  _VALUES_TO_NAMES = {
    0: "FREE_UPDATE",
    1: "FORCE_UPDATE",
  }

  _NAMES_TO_VALUES = {
    "FREE_UPDATE": 0,
    "FORCE_UPDATE": 1,
  }


class ProxyLoginReq:
  """
  Attributes:
   - companyCode
   - userName
   - passwordMd5
   - companyGroupCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'companyCode', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'passwordMd5', None, None, ), # 3
    (4, TType.STRING, 'companyGroupCode', None, None, ), # 4
  )

  def __init__(self, companyCode=None, userName=None, passwordMd5=None, companyGroupCode=None,):
    self.companyCode = companyCode
    self.userName = userName
    self.passwordMd5 = passwordMd5
    self.companyGroupCode = companyGroupCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.companyCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwordMd5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.companyGroupCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyLoginReq')
    if self.companyCode is not None:
      oprot.writeFieldBegin('companyCode', TType.STRING, 1)
      oprot.writeString(self.companyCode)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.passwordMd5 is not None:
      oprot.writeFieldBegin('passwordMd5', TType.STRING, 3)
      oprot.writeString(self.passwordMd5)
      oprot.writeFieldEnd()
    if self.companyGroupCode is not None:
      oprot.writeFieldBegin('companyGroupCode', TType.STRING, 4)
      oprot.writeString(self.companyGroupCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyLoginResp:
  """
  Attributes:
   - hostingSession
   - hostingServerIP
   - hostingProxyPort
   - hostingTimens
   - hostingRunningMode
   - companyId
   - companyGroupId
   - loginUserInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'hostingSession', (xueqiao.trade.hosting.ttypes.HostingSession, xueqiao.trade.hosting.ttypes.HostingSession.thrift_spec), None, ), # 1
    (2, TType.STRING, 'hostingServerIP', None, None, ), # 2
    (3, TType.I32, 'hostingProxyPort', None, None, ), # 3
    (4, TType.I64, 'hostingTimens', None, None, ), # 4
    (5, TType.I32, 'hostingRunningMode', None, None, ), # 5
    (6, TType.I32, 'companyId', None, None, ), # 6
    (7, TType.I32, 'companyGroupId', None, None, ), # 7
    (8, TType.STRUCT, 'loginUserInfo', (xueqiao.trade.hosting.ttypes.HostingUser, xueqiao.trade.hosting.ttypes.HostingUser.thrift_spec), None, ), # 8
  )

  def __init__(self, hostingSession=None, hostingServerIP=None, hostingProxyPort=None, hostingTimens=None, hostingRunningMode=None, companyId=None, companyGroupId=None, loginUserInfo=None,):
    self.hostingSession = hostingSession
    self.hostingServerIP = hostingServerIP
    self.hostingProxyPort = hostingProxyPort
    self.hostingTimens = hostingTimens
    self.hostingRunningMode = hostingRunningMode
    self.companyId = companyId
    self.companyGroupId = companyGroupId
    self.loginUserInfo = loginUserInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.hostingSession = xueqiao.trade.hosting.ttypes.HostingSession()
          self.hostingSession.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hostingServerIP = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.hostingProxyPort = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.hostingTimens = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.hostingRunningMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.companyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.companyGroupId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.loginUserInfo = xueqiao.trade.hosting.ttypes.HostingUser()
          self.loginUserInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyLoginResp')
    if self.hostingSession is not None:
      oprot.writeFieldBegin('hostingSession', TType.STRUCT, 1)
      self.hostingSession.write(oprot)
      oprot.writeFieldEnd()
    if self.hostingServerIP is not None:
      oprot.writeFieldBegin('hostingServerIP', TType.STRING, 2)
      oprot.writeString(self.hostingServerIP)
      oprot.writeFieldEnd()
    if self.hostingProxyPort is not None:
      oprot.writeFieldBegin('hostingProxyPort', TType.I32, 3)
      oprot.writeI32(self.hostingProxyPort)
      oprot.writeFieldEnd()
    if self.hostingTimens is not None:
      oprot.writeFieldBegin('hostingTimens', TType.I64, 4)
      oprot.writeI64(self.hostingTimens)
      oprot.writeFieldEnd()
    if self.hostingRunningMode is not None:
      oprot.writeFieldBegin('hostingRunningMode', TType.I32, 5)
      oprot.writeI32(self.hostingRunningMode)
      oprot.writeFieldEnd()
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I32, 6)
      oprot.writeI32(self.companyId)
      oprot.writeFieldEnd()
    if self.companyGroupId is not None:
      oprot.writeFieldBegin('companyGroupId', TType.I32, 7)
      oprot.writeI32(self.companyGroupId)
      oprot.writeFieldEnd()
    if self.loginUserInfo is not None:
      oprot.writeFieldBegin('loginUserInfo', TType.STRUCT, 8)
      self.loginUserInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyFakeLoginReq:
  """
  Attributes:
   - companyCode
   - userName
   - passwordMd5
   - tradeType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'companyCode', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'passwordMd5', None, None, ), # 3
    (4, TType.I32, 'tradeType', None, None, ), # 4
  )

  def __init__(self, companyCode=None, userName=None, passwordMd5=None, tradeType=None,):
    self.companyCode = companyCode
    self.userName = userName
    self.passwordMd5 = passwordMd5
    self.tradeType = tradeType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.companyCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.passwordMd5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tradeType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyFakeLoginReq')
    if self.companyCode is not None:
      oprot.writeFieldBegin('companyCode', TType.STRING, 1)
      oprot.writeString(self.companyCode)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.passwordMd5 is not None:
      oprot.writeFieldBegin('passwordMd5', TType.STRING, 3)
      oprot.writeString(self.passwordMd5)
      oprot.writeFieldEnd()
    if self.tradeType is not None:
      oprot.writeFieldBegin('tradeType', TType.I32, 4)
      oprot.writeI32(self.tradeType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyCompanyGroup:
  """
  Attributes:
   - companyId
   - groupId
   - groupCode
   - groupName
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'companyId', None, None, ), # 1
    (2, TType.I32, 'groupId', None, None, ), # 2
    (3, TType.STRING, 'groupCode', None, None, ), # 3
    (4, TType.STRING, 'groupName', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
  )

  def __init__(self, companyId=None, groupId=None, groupCode=None, groupName=None, status=None,):
    self.companyId = companyId
    self.groupId = groupId
    self.groupCode = groupCode
    self.groupName = groupName
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.companyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.groupId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.groupCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.groupName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyCompanyGroup')
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I32, 1)
      oprot.writeI32(self.companyId)
      oprot.writeFieldEnd()
    if self.groupId is not None:
      oprot.writeFieldBegin('groupId', TType.I32, 2)
      oprot.writeI32(self.groupId)
      oprot.writeFieldEnd()
    if self.groupCode is not None:
      oprot.writeFieldBegin('groupCode', TType.STRING, 3)
      oprot.writeString(self.groupCode)
      oprot.writeFieldEnd()
    if self.groupName is not None:
      oprot.writeFieldBegin('groupName', TType.STRING, 4)
      oprot.writeString(self.groupName)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyFakeLoginResp:
  """
  Attributes:
   - companyGroups
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'companyGroups', (TType.STRUCT,(ProxyCompanyGroup, ProxyCompanyGroup.thrift_spec)), None, ), # 1
  )

  def __init__(self, companyGroups=None,):
    self.companyGroups = companyGroups

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.companyGroups = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ProxyCompanyGroup()
            _elem5.read(iprot)
            self.companyGroups.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyFakeLoginResp')
    if self.companyGroups is not None:
      oprot.writeFieldBegin('companyGroups', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.companyGroups))
      for iter6 in self.companyGroups:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProxyUpdatePasswordReq:
  """
  Attributes:
   - companyId
   - userName
   - oldPassword
   - newPassword
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'companyId', None, None, ), # 1
    (2, TType.STRING, 'userName', None, None, ), # 2
    (3, TType.STRING, 'oldPassword', None, None, ), # 3
    (4, TType.STRING, 'newPassword', None, None, ), # 4
  )

  def __init__(self, companyId=None, userName=None, oldPassword=None, newPassword=None,):
    self.companyId = companyId
    self.userName = userName
    self.oldPassword = oldPassword
    self.newPassword = newPassword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.companyId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.oldPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.newPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProxyUpdatePasswordReq')
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I32, 1)
      oprot.writeI32(self.companyId)
      oprot.writeFieldEnd()
    if self.userName is not None:
      oprot.writeFieldBegin('userName', TType.STRING, 2)
      oprot.writeString(self.userName)
      oprot.writeFieldEnd()
    if self.oldPassword is not None:
      oprot.writeFieldBegin('oldPassword', TType.STRING, 3)
      oprot.writeString(self.oldPassword)
      oprot.writeFieldEnd()
    if self.newPassword is not None:
      oprot.writeFieldBegin('newPassword', TType.STRING, 4)
      oprot.writeString(self.newPassword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.oldPassword is None:
      raise TProtocol.TProtocolException(message='Required field oldPassword is unset!')
    if self.newPassword is None:
      raise TProtocol.TProtocolException(message='Required field newPassword is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VersionNum:
  """
  Attributes:
   - majorVersionNum
   - minorVersionNum
   - buildVersionNum
   - reversionNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'majorVersionNum', None, None, ), # 1
    (2, TType.I32, 'minorVersionNum', None, None, ), # 2
    (3, TType.I32, 'buildVersionNum', None, None, ), # 3
    (4, TType.I32, 'reversionNum', None, None, ), # 4
  )

  def __init__(self, majorVersionNum=None, minorVersionNum=None, buildVersionNum=None, reversionNum=None,):
    self.majorVersionNum = majorVersionNum
    self.minorVersionNum = minorVersionNum
    self.buildVersionNum = buildVersionNum
    self.reversionNum = reversionNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.majorVersionNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.minorVersionNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.buildVersionNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.reversionNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VersionNum')
    if self.majorVersionNum is not None:
      oprot.writeFieldBegin('majorVersionNum', TType.I32, 1)
      oprot.writeI32(self.majorVersionNum)
      oprot.writeFieldEnd()
    if self.minorVersionNum is not None:
      oprot.writeFieldBegin('minorVersionNum', TType.I32, 2)
      oprot.writeI32(self.minorVersionNum)
      oprot.writeFieldEnd()
    if self.buildVersionNum is not None:
      oprot.writeFieldBegin('buildVersionNum', TType.I32, 3)
      oprot.writeI32(self.buildVersionNum)
      oprot.writeFieldEnd()
    if self.reversionNum is not None:
      oprot.writeFieldBegin('reversionNum', TType.I32, 4)
      oprot.writeI32(self.reversionNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AppVersion:
  """
  Attributes:
   - versionId
   - appId
   - appKey
   - versionKey
   - versionNum
   - versionNumTag
   - downloadUrlX32
   - downloadUrlX64
   - updateNotes
   - updateType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'versionId', None, None, ), # 1
    (2, TType.I64, 'appId', None, None, ), # 2
    (3, TType.STRING, 'appKey', None, None, ), # 3
    (4, TType.STRING, 'versionKey', None, None, ), # 4
    (5, TType.STRUCT, 'versionNum', (VersionNum, VersionNum.thrift_spec), None, ), # 5
    (6, TType.STRING, 'versionNumTag', None, None, ), # 6
    (7, TType.STRING, 'downloadUrlX32', None, None, ), # 7
    (8, TType.STRING, 'downloadUrlX64', None, None, ), # 8
    (9, TType.LIST, 'updateNotes', (TType.STRING,None), None, ), # 9
    (10, TType.I32, 'updateType', None, None, ), # 10
  )

  def __init__(self, versionId=None, appId=None, appKey=None, versionKey=None, versionNum=None, versionNumTag=None, downloadUrlX32=None, downloadUrlX64=None, updateNotes=None, updateType=None,):
    self.versionId = versionId
    self.appId = appId
    self.appKey = appKey
    self.versionKey = versionKey
    self.versionNum = versionNum
    self.versionNumTag = versionNumTag
    self.downloadUrlX32 = downloadUrlX32
    self.downloadUrlX64 = downloadUrlX64
    self.updateNotes = updateNotes
    self.updateType = updateType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.versionId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.appId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.appKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.versionKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.versionNum = VersionNum()
          self.versionNum.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.versionNumTag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.downloadUrlX32 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.downloadUrlX64 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.updateNotes = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readString();
            self.updateNotes.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.updateType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AppVersion')
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I64, 1)
      oprot.writeI64(self.versionId)
      oprot.writeFieldEnd()
    if self.appId is not None:
      oprot.writeFieldBegin('appId', TType.I64, 2)
      oprot.writeI64(self.appId)
      oprot.writeFieldEnd()
    if self.appKey is not None:
      oprot.writeFieldBegin('appKey', TType.STRING, 3)
      oprot.writeString(self.appKey)
      oprot.writeFieldEnd()
    if self.versionKey is not None:
      oprot.writeFieldBegin('versionKey', TType.STRING, 4)
      oprot.writeString(self.versionKey)
      oprot.writeFieldEnd()
    if self.versionNum is not None:
      oprot.writeFieldBegin('versionNum', TType.STRUCT, 5)
      self.versionNum.write(oprot)
      oprot.writeFieldEnd()
    if self.versionNumTag is not None:
      oprot.writeFieldBegin('versionNumTag', TType.STRING, 6)
      oprot.writeString(self.versionNumTag)
      oprot.writeFieldEnd()
    if self.downloadUrlX32 is not None:
      oprot.writeFieldBegin('downloadUrlX32', TType.STRING, 7)
      oprot.writeString(self.downloadUrlX32)
      oprot.writeFieldEnd()
    if self.downloadUrlX64 is not None:
      oprot.writeFieldBegin('downloadUrlX64', TType.STRING, 8)
      oprot.writeString(self.downloadUrlX64)
      oprot.writeFieldEnd()
    if self.updateNotes is not None:
      oprot.writeFieldBegin('updateNotes', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.updateNotes))
      for iter13 in self.updateNotes:
        oprot.writeString(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.updateType is not None:
      oprot.writeFieldBegin('updateType', TType.I32, 10)
      oprot.writeI32(self.updateType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpdateInfoReq:
  """
  Attributes:
   - companyId
   - appKey
   - versionNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'companyId', None, None, ), # 1
    (2, TType.STRING, 'appKey', None, None, ), # 2
    (3, TType.STRUCT, 'versionNum', (VersionNum, VersionNum.thrift_spec), None, ), # 3
  )

  def __init__(self, companyId=None, appKey=None, versionNum=None,):
    self.companyId = companyId
    self.appKey = appKey
    self.versionNum = versionNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.companyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.appKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.versionNum = VersionNum()
          self.versionNum.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpdateInfoReq')
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I64, 1)
      oprot.writeI64(self.companyId)
      oprot.writeFieldEnd()
    if self.appKey is not None:
      oprot.writeFieldBegin('appKey', TType.STRING, 2)
      oprot.writeString(self.appKey)
      oprot.writeFieldEnd()
    if self.versionNum is not None:
      oprot.writeFieldBegin('versionNum', TType.STRUCT, 3)
      self.versionNum.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
