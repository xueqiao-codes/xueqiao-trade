/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.taskqueue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SyncOperateCompanyUserTask implements org.apache.thrift.TBase<SyncOperateCompanyUserTask, SyncOperateCompanyUserTask._Fields>, java.io.Serializable, Cloneable, Comparable<SyncOperateCompanyUserTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncOperateCompanyUserTask");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField SYNC_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("syncOperation", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("loginName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField LOGIN_PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("loginPasswd", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nickName", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField USER_ROLE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("userRoleValue", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("email", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncOperateCompanyUserTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncOperateCompanyUserTaskTupleSchemeFactory());
  }

  public int taskId; // optional
  /**
   * 
   * @see TaskType
   */
  public TaskType taskType; // required
  public int companyId; // optional
  public int groupId; // optional
  public String syncOperation; // optional
  public String loginName; // optional
  public String loginPasswd; // optional
  public String phone; // optional
  public String nickName; // optional
  /**
   * 
   * @see UserRole
   */
  public UserRole userRoleValue; // optional
  public String email; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    /**
     * 
     * @see TaskType
     */
    TASK_TYPE((short)2, "taskType"),
    COMPANY_ID((short)3, "companyId"),
    GROUP_ID((short)4, "groupId"),
    SYNC_OPERATION((short)6, "syncOperation"),
    LOGIN_NAME((short)10, "loginName"),
    LOGIN_PASSWD((short)11, "loginPasswd"),
    PHONE((short)12, "phone"),
    NICK_NAME((short)13, "nickName"),
    /**
     * 
     * @see UserRole
     */
    USER_ROLE_VALUE((short)14, "userRoleValue"),
    EMAIL((short)15, "email");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // COMPANY_ID
          return COMPANY_ID;
        case 4: // GROUP_ID
          return GROUP_ID;
        case 6: // SYNC_OPERATION
          return SYNC_OPERATION;
        case 10: // LOGIN_NAME
          return LOGIN_NAME;
        case 11: // LOGIN_PASSWD
          return LOGIN_PASSWD;
        case 12: // PHONE
          return PHONE;
        case 13: // NICK_NAME
          return NICK_NAME;
        case 14: // USER_ROLE_VALUE
          return USER_ROLE_VALUE;
        case 15: // EMAIL
          return EMAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __GROUPID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TASK_ID,_Fields.COMPANY_ID,_Fields.GROUP_ID,_Fields.SYNC_OPERATION,_Fields.LOGIN_NAME,_Fields.LOGIN_PASSWD,_Fields.PHONE,_Fields.NICK_NAME,_Fields.USER_ROLE_VALUE,_Fields.EMAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskType.class)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SYNC_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("syncOperation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("loginName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_PASSWD, new org.apache.thrift.meta_data.FieldMetaData("loginPasswd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("nickName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ROLE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("userRoleValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserRole.class)));
    tmpMap.put(_Fields.EMAIL, new org.apache.thrift.meta_data.FieldMetaData("email", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncOperateCompanyUserTask.class, metaDataMap);
  }

  public SyncOperateCompanyUserTask() {
  }

  public SyncOperateCompanyUserTask(
    TaskType taskType)
  {
    this();
    this.taskType = taskType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncOperateCompanyUserTask(SyncOperateCompanyUserTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetTaskType()) {
      this.taskType = other.taskType;
    }
    this.companyId = other.companyId;
    this.groupId = other.groupId;
    if (other.isSetSyncOperation()) {
      this.syncOperation = other.syncOperation;
    }
    if (other.isSetLoginName()) {
      this.loginName = other.loginName;
    }
    if (other.isSetLoginPasswd()) {
      this.loginPasswd = other.loginPasswd;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetNickName()) {
      this.nickName = other.nickName;
    }
    if (other.isSetUserRoleValue()) {
      this.userRoleValue = other.userRoleValue;
    }
    if (other.isSetEmail()) {
      this.email = other.email;
    }
  }

  public SyncOperateCompanyUserTask deepCopy() {
    return new SyncOperateCompanyUserTask(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.taskType = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    this.syncOperation = null;
    this.loginName = null;
    this.loginPasswd = null;
    this.phone = null;
    this.nickName = null;
    this.userRoleValue = null;
    this.email = null;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public SyncOperateCompanyUserTask setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  /**
   * 
   * @see TaskType
   */
  public TaskType getTaskType() {
    return this.taskType;
  }

  /**
   * 
   * @see TaskType
   */
  public SyncOperateCompanyUserTask setTaskType(TaskType taskType) {
    this.taskType = taskType;
    return this;
  }

  public void unsetTaskType() {
    this.taskType = null;
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return this.taskType != null;
  }

  public void setTaskTypeIsSet(boolean value) {
    if (!value) {
      this.taskType = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public SyncOperateCompanyUserTask setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.groupId;
  }

  public SyncOperateCompanyUserTask setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public String getSyncOperation() {
    return this.syncOperation;
  }

  public SyncOperateCompanyUserTask setSyncOperation(String syncOperation) {
    this.syncOperation = syncOperation;
    return this;
  }

  public void unsetSyncOperation() {
    this.syncOperation = null;
  }

  /** Returns true if field syncOperation is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncOperation() {
    return this.syncOperation != null;
  }

  public void setSyncOperationIsSet(boolean value) {
    if (!value) {
      this.syncOperation = null;
    }
  }

  public String getLoginName() {
    return this.loginName;
  }

  public SyncOperateCompanyUserTask setLoginName(String loginName) {
    this.loginName = loginName;
    return this;
  }

  public void unsetLoginName() {
    this.loginName = null;
  }

  /** Returns true if field loginName is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginName() {
    return this.loginName != null;
  }

  public void setLoginNameIsSet(boolean value) {
    if (!value) {
      this.loginName = null;
    }
  }

  public String getLoginPasswd() {
    return this.loginPasswd;
  }

  public SyncOperateCompanyUserTask setLoginPasswd(String loginPasswd) {
    this.loginPasswd = loginPasswd;
    return this;
  }

  public void unsetLoginPasswd() {
    this.loginPasswd = null;
  }

  /** Returns true if field loginPasswd is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginPasswd() {
    return this.loginPasswd != null;
  }

  public void setLoginPasswdIsSet(boolean value) {
    if (!value) {
      this.loginPasswd = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public SyncOperateCompanyUserTask setPhone(String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  public String getNickName() {
    return this.nickName;
  }

  public SyncOperateCompanyUserTask setNickName(String nickName) {
    this.nickName = nickName;
    return this;
  }

  public void unsetNickName() {
    this.nickName = null;
  }

  /** Returns true if field nickName is set (has been assigned a value) and false otherwise */
  public boolean isSetNickName() {
    return this.nickName != null;
  }

  public void setNickNameIsSet(boolean value) {
    if (!value) {
      this.nickName = null;
    }
  }

  /**
   * 
   * @see UserRole
   */
  public UserRole getUserRoleValue() {
    return this.userRoleValue;
  }

  /**
   * 
   * @see UserRole
   */
  public SyncOperateCompanyUserTask setUserRoleValue(UserRole userRoleValue) {
    this.userRoleValue = userRoleValue;
    return this;
  }

  public void unsetUserRoleValue() {
    this.userRoleValue = null;
  }

  /** Returns true if field userRoleValue is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRoleValue() {
    return this.userRoleValue != null;
  }

  public void setUserRoleValueIsSet(boolean value) {
    if (!value) {
      this.userRoleValue = null;
    }
  }

  public String getEmail() {
    return this.email;
  }

  public SyncOperateCompanyUserTask setEmail(String email) {
    this.email = email;
    return this;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((TaskType)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case SYNC_OPERATION:
      if (value == null) {
        unsetSyncOperation();
      } else {
        setSyncOperation((String)value);
      }
      break;

    case LOGIN_NAME:
      if (value == null) {
        unsetLoginName();
      } else {
        setLoginName((String)value);
      }
      break;

    case LOGIN_PASSWD:
      if (value == null) {
        unsetLoginPasswd();
      } else {
        setLoginPasswd((String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((String)value);
      }
      break;

    case NICK_NAME:
      if (value == null) {
        unsetNickName();
      } else {
        setNickName((String)value);
      }
      break;

    case USER_ROLE_VALUE:
      if (value == null) {
        unsetUserRoleValue();
      } else {
        setUserRoleValue((UserRole)value);
      }
      break;

    case EMAIL:
      if (value == null) {
        unsetEmail();
      } else {
        setEmail((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case TASK_TYPE:
      return getTaskType();

    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case GROUP_ID:
      return Integer.valueOf(getGroupId());

    case SYNC_OPERATION:
      return getSyncOperation();

    case LOGIN_NAME:
      return getLoginName();

    case LOGIN_PASSWD:
      return getLoginPasswd();

    case PHONE:
      return getPhone();

    case NICK_NAME:
      return getNickName();

    case USER_ROLE_VALUE:
      return getUserRoleValue();

    case EMAIL:
      return getEmail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TASK_TYPE:
      return isSetTaskType();
    case COMPANY_ID:
      return isSetCompanyId();
    case GROUP_ID:
      return isSetGroupId();
    case SYNC_OPERATION:
      return isSetSyncOperation();
    case LOGIN_NAME:
      return isSetLoginName();
    case LOGIN_PASSWD:
      return isSetLoginPasswd();
    case PHONE:
      return isSetPhone();
    case NICK_NAME:
      return isSetNickName();
    case USER_ROLE_VALUE:
      return isSetUserRoleValue();
    case EMAIL:
      return isSetEmail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncOperateCompanyUserTask)
      return this.equals((SyncOperateCompanyUserTask)that);
    return false;
  }

  public boolean equals(SyncOperateCompanyUserTask that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_taskType = true && this.isSetTaskType();
    boolean that_present_taskType = true && that.isSetTaskType();
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (!this.taskType.equals(that.taskType))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_syncOperation = true && this.isSetSyncOperation();
    boolean that_present_syncOperation = true && that.isSetSyncOperation();
    if (this_present_syncOperation || that_present_syncOperation) {
      if (!(this_present_syncOperation && that_present_syncOperation))
        return false;
      if (!this.syncOperation.equals(that.syncOperation))
        return false;
    }

    boolean this_present_loginName = true && this.isSetLoginName();
    boolean that_present_loginName = true && that.isSetLoginName();
    if (this_present_loginName || that_present_loginName) {
      if (!(this_present_loginName && that_present_loginName))
        return false;
      if (!this.loginName.equals(that.loginName))
        return false;
    }

    boolean this_present_loginPasswd = true && this.isSetLoginPasswd();
    boolean that_present_loginPasswd = true && that.isSetLoginPasswd();
    if (this_present_loginPasswd || that_present_loginPasswd) {
      if (!(this_present_loginPasswd && that_present_loginPasswd))
        return false;
      if (!this.loginPasswd.equals(that.loginPasswd))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_nickName = true && this.isSetNickName();
    boolean that_present_nickName = true && that.isSetNickName();
    if (this_present_nickName || that_present_nickName) {
      if (!(this_present_nickName && that_present_nickName))
        return false;
      if (!this.nickName.equals(that.nickName))
        return false;
    }

    boolean this_present_userRoleValue = true && this.isSetUserRoleValue();
    boolean that_present_userRoleValue = true && that.isSetUserRoleValue();
    if (this_present_userRoleValue || that_present_userRoleValue) {
      if (!(this_present_userRoleValue && that_present_userRoleValue))
        return false;
      if (!this.userRoleValue.equals(that.userRoleValue))
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SyncOperateCompanyUserTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSyncOperation()).compareTo(other.isSetSyncOperation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncOperation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncOperation, other.syncOperation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginName()).compareTo(other.isSetLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginName, other.loginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginPasswd()).compareTo(other.isSetLoginPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginPasswd, other.loginPasswd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNickName()).compareTo(other.isSetNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nickName, other.nickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRoleValue()).compareTo(other.isSetUserRoleValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRoleValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRoleValue, other.userRoleValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEmail()).compareTo(other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncOperateCompanyUserTask(");
    boolean first = true;

    if (isSetTaskId()) {
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("taskType:");
    if (this.taskType == null) {
      sb.append("null");
    } else {
      sb.append(this.taskType);
    }
    first = false;
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetSyncOperation()) {
      if (!first) sb.append(", ");
      sb.append("syncOperation:");
      if (this.syncOperation == null) {
        sb.append("null");
      } else {
        sb.append(this.syncOperation);
      }
      first = false;
    }
    if (isSetLoginName()) {
      if (!first) sb.append(", ");
      sb.append("loginName:");
      if (this.loginName == null) {
        sb.append("null");
      } else {
        sb.append(this.loginName);
      }
      first = false;
    }
    if (isSetLoginPasswd()) {
      if (!first) sb.append(", ");
      sb.append("loginPasswd:");
      if (this.loginPasswd == null) {
        sb.append("null");
      } else {
        sb.append(this.loginPasswd);
      }
      first = false;
    }
    if (isSetPhone()) {
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
    }
    if (isSetNickName()) {
      if (!first) sb.append(", ");
      sb.append("nickName:");
      if (this.nickName == null) {
        sb.append("null");
      } else {
        sb.append(this.nickName);
      }
      first = false;
    }
    if (isSetUserRoleValue()) {
      if (!first) sb.append(", ");
      sb.append("userRoleValue:");
      if (this.userRoleValue == null) {
        sb.append("null");
      } else {
        sb.append(this.userRoleValue);
      }
      first = false;
    }
    if (isSetEmail()) {
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncOperateCompanyUserTaskStandardSchemeFactory implements SchemeFactory {
    public SyncOperateCompanyUserTaskStandardScheme getScheme() {
      return new SyncOperateCompanyUserTaskStandardScheme();
    }
  }

  private static class SyncOperateCompanyUserTaskStandardScheme extends StandardScheme<SyncOperateCompanyUserTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncOperateCompanyUserTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = TaskType.findByValue(iprot.readI32());
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SYNC_OPERATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncOperation = iprot.readString();
              struct.setSyncOperationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginName = iprot.readString();
              struct.setLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LOGIN_PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginPasswd = iprot.readString();
              struct.setLoginPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nickName = iprot.readString();
              struct.setNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // USER_ROLE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userRoleValue = UserRole.findByValue(iprot.readI32());
              struct.setUserRoleValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.email = iprot.readString();
              struct.setEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncOperateCompanyUserTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTaskId()) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.taskType != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.taskType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.syncOperation != null) {
        if (struct.isSetSyncOperation()) {
          oprot.writeFieldBegin(SYNC_OPERATION_FIELD_DESC);
          oprot.writeString(struct.syncOperation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginName != null) {
        if (struct.isSetLoginName()) {
          oprot.writeFieldBegin(LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.loginName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginPasswd != null) {
        if (struct.isSetLoginPasswd()) {
          oprot.writeFieldBegin(LOGIN_PASSWD_FIELD_DESC);
          oprot.writeString(struct.loginPasswd);
          oprot.writeFieldEnd();
        }
      }
      if (struct.phone != null) {
        if (struct.isSetPhone()) {
          oprot.writeFieldBegin(PHONE_FIELD_DESC);
          oprot.writeString(struct.phone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nickName != null) {
        if (struct.isSetNickName()) {
          oprot.writeFieldBegin(NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.nickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userRoleValue != null) {
        if (struct.isSetUserRoleValue()) {
          oprot.writeFieldBegin(USER_ROLE_VALUE_FIELD_DESC);
          oprot.writeI32(struct.userRoleValue.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.email != null) {
        if (struct.isSetEmail()) {
          oprot.writeFieldBegin(EMAIL_FIELD_DESC);
          oprot.writeString(struct.email);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncOperateCompanyUserTaskTupleSchemeFactory implements SchemeFactory {
    public SyncOperateCompanyUserTaskTupleScheme getScheme() {
      return new SyncOperateCompanyUserTaskTupleScheme();
    }
  }

  private static class SyncOperateCompanyUserTaskTupleScheme extends TupleScheme<SyncOperateCompanyUserTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncOperateCompanyUserTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.taskType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(1);
      }
      if (struct.isSetGroupId()) {
        optionals.set(2);
      }
      if (struct.isSetSyncOperation()) {
        optionals.set(3);
      }
      if (struct.isSetLoginName()) {
        optionals.set(4);
      }
      if (struct.isSetLoginPasswd()) {
        optionals.set(5);
      }
      if (struct.isSetPhone()) {
        optionals.set(6);
      }
      if (struct.isSetNickName()) {
        optionals.set(7);
      }
      if (struct.isSetUserRoleValue()) {
        optionals.set(8);
      }
      if (struct.isSetEmail()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetSyncOperation()) {
        oprot.writeString(struct.syncOperation);
      }
      if (struct.isSetLoginName()) {
        oprot.writeString(struct.loginName);
      }
      if (struct.isSetLoginPasswd()) {
        oprot.writeString(struct.loginPasswd);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetNickName()) {
        oprot.writeString(struct.nickName);
      }
      if (struct.isSetUserRoleValue()) {
        oprot.writeI32(struct.userRoleValue.getValue());
      }
      if (struct.isSetEmail()) {
        oprot.writeString(struct.email);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncOperateCompanyUserTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskType = TaskType.findByValue(iprot.readI32());
      struct.setTaskTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.syncOperation = iprot.readString();
        struct.setSyncOperationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.loginName = iprot.readString();
        struct.setLoginNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.loginPasswd = iprot.readString();
        struct.setLoginPasswdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nickName = iprot.readString();
        struct.setNickNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.userRoleValue = UserRole.findByValue(iprot.readI32());
        struct.setUserRoleValueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.email = iprot.readString();
        struct.setEmailIsSet(true);
      }
    }
  }

}

