/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.taskqueue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SyncInitHostingTask implements org.apache.thrift.TBase<SyncInitHostingTask, SyncInitHostingTask._Fields>, java.io.Serializable, Cloneable, Comparable<SyncInitHostingTask> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncInitHostingTask");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MACHINE_INNER_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("machineInnerIP", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField OA_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("oaUserName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MACHINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("machineId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField ADMIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("adminName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField ADMIN_PASSWD_FIELD_DESC = new org.apache.thrift.protocol.TField("adminPasswd", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField HOSTING_AES16_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("hostingAES16Key", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RUNNING_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("runningMode", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncInitHostingTaskStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncInitHostingTaskTupleSchemeFactory());
  }

  public int taskId; // optional
  /**
   * 
   * @see TaskType
   */
  public TaskType taskType; // required
  public String machineInnerIP; // optional
  public int companyId; // optional
  public int groupId; // optional
  public int orderId; // optional
  public String oaUserName; // optional
  public long machineId; // optional
  public String adminName; // optional
  public String adminPasswd; // optional
  public String hostingAES16Key; // optional
  public String runningMode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    /**
     * 
     * @see TaskType
     */
    TASK_TYPE((short)2, "taskType"),
    MACHINE_INNER_IP((short)3, "machineInnerIP"),
    COMPANY_ID((short)4, "companyId"),
    GROUP_ID((short)5, "groupId"),
    ORDER_ID((short)6, "orderId"),
    OA_USER_NAME((short)7, "oaUserName"),
    MACHINE_ID((short)8, "machineId"),
    ADMIN_NAME((short)9, "adminName"),
    ADMIN_PASSWD((short)10, "adminPasswd"),
    HOSTING_AES16_KEY((short)11, "hostingAES16Key"),
    RUNNING_MODE((short)12, "runningMode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // MACHINE_INNER_IP
          return MACHINE_INNER_IP;
        case 4: // COMPANY_ID
          return COMPANY_ID;
        case 5: // GROUP_ID
          return GROUP_ID;
        case 6: // ORDER_ID
          return ORDER_ID;
        case 7: // OA_USER_NAME
          return OA_USER_NAME;
        case 8: // MACHINE_ID
          return MACHINE_ID;
        case 9: // ADMIN_NAME
          return ADMIN_NAME;
        case 10: // ADMIN_PASSWD
          return ADMIN_PASSWD;
        case 11: // HOSTING_AES16_KEY
          return HOSTING_AES16_KEY;
        case 12: // RUNNING_MODE
          return RUNNING_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __COMPANYID_ISSET_ID = 1;
  private static final int __GROUPID_ISSET_ID = 2;
  private static final int __ORDERID_ISSET_ID = 3;
  private static final int __MACHINEID_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TASK_ID,_Fields.MACHINE_INNER_IP,_Fields.COMPANY_ID,_Fields.GROUP_ID,_Fields.ORDER_ID,_Fields.OA_USER_NAME,_Fields.MACHINE_ID,_Fields.ADMIN_NAME,_Fields.ADMIN_PASSWD,_Fields.HOSTING_AES16_KEY,_Fields.RUNNING_MODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskType.class)));
    tmpMap.put(_Fields.MACHINE_INNER_IP, new org.apache.thrift.meta_data.FieldMetaData("machineInnerIP", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OA_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("oaUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MACHINE_ID, new org.apache.thrift.meta_data.FieldMetaData("machineId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ADMIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("adminName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ADMIN_PASSWD, new org.apache.thrift.meta_data.FieldMetaData("adminPasswd", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTING_AES16_KEY, new org.apache.thrift.meta_data.FieldMetaData("hostingAES16Key", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUNNING_MODE, new org.apache.thrift.meta_data.FieldMetaData("runningMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncInitHostingTask.class, metaDataMap);
  }

  public SyncInitHostingTask() {
  }

  public SyncInitHostingTask(
    TaskType taskType)
  {
    this();
    this.taskType = taskType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncInitHostingTask(SyncInitHostingTask other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    if (other.isSetTaskType()) {
      this.taskType = other.taskType;
    }
    if (other.isSetMachineInnerIP()) {
      this.machineInnerIP = other.machineInnerIP;
    }
    this.companyId = other.companyId;
    this.groupId = other.groupId;
    this.orderId = other.orderId;
    if (other.isSetOaUserName()) {
      this.oaUserName = other.oaUserName;
    }
    this.machineId = other.machineId;
    if (other.isSetAdminName()) {
      this.adminName = other.adminName;
    }
    if (other.isSetAdminPasswd()) {
      this.adminPasswd = other.adminPasswd;
    }
    if (other.isSetHostingAES16Key()) {
      this.hostingAES16Key = other.hostingAES16Key;
    }
    if (other.isSetRunningMode()) {
      this.runningMode = other.runningMode;
    }
  }

  public SyncInitHostingTask deepCopy() {
    return new SyncInitHostingTask(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    this.taskType = null;
    this.machineInnerIP = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    setOrderIdIsSet(false);
    this.orderId = 0;
    this.oaUserName = null;
    setMachineIdIsSet(false);
    this.machineId = 0;
    this.adminName = null;
    this.adminPasswd = null;
    this.hostingAES16Key = null;
    this.runningMode = null;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public SyncInitHostingTask setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  /**
   * 
   * @see TaskType
   */
  public TaskType getTaskType() {
    return this.taskType;
  }

  /**
   * 
   * @see TaskType
   */
  public SyncInitHostingTask setTaskType(TaskType taskType) {
    this.taskType = taskType;
    return this;
  }

  public void unsetTaskType() {
    this.taskType = null;
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return this.taskType != null;
  }

  public void setTaskTypeIsSet(boolean value) {
    if (!value) {
      this.taskType = null;
    }
  }

  public String getMachineInnerIP() {
    return this.machineInnerIP;
  }

  public SyncInitHostingTask setMachineInnerIP(String machineInnerIP) {
    this.machineInnerIP = machineInnerIP;
    return this;
  }

  public void unsetMachineInnerIP() {
    this.machineInnerIP = null;
  }

  /** Returns true if field machineInnerIP is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineInnerIP() {
    return this.machineInnerIP != null;
  }

  public void setMachineInnerIPIsSet(boolean value) {
    if (!value) {
      this.machineInnerIP = null;
    }
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public SyncInitHostingTask setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.groupId;
  }

  public SyncInitHostingTask setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  public int getOrderId() {
    return this.orderId;
  }

  public SyncInitHostingTask setOrderId(int orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public String getOaUserName() {
    return this.oaUserName;
  }

  public SyncInitHostingTask setOaUserName(String oaUserName) {
    this.oaUserName = oaUserName;
    return this;
  }

  public void unsetOaUserName() {
    this.oaUserName = null;
  }

  /** Returns true if field oaUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetOaUserName() {
    return this.oaUserName != null;
  }

  public void setOaUserNameIsSet(boolean value) {
    if (!value) {
      this.oaUserName = null;
    }
  }

  public long getMachineId() {
    return this.machineId;
  }

  public SyncInitHostingTask setMachineId(long machineId) {
    this.machineId = machineId;
    setMachineIdIsSet(true);
    return this;
  }

  public void unsetMachineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  /** Returns true if field machineId is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineId() {
    return EncodingUtils.testBit(__isset_bitfield, __MACHINEID_ISSET_ID);
  }

  public void setMachineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MACHINEID_ISSET_ID, value);
  }

  public String getAdminName() {
    return this.adminName;
  }

  public SyncInitHostingTask setAdminName(String adminName) {
    this.adminName = adminName;
    return this;
  }

  public void unsetAdminName() {
    this.adminName = null;
  }

  /** Returns true if field adminName is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminName() {
    return this.adminName != null;
  }

  public void setAdminNameIsSet(boolean value) {
    if (!value) {
      this.adminName = null;
    }
  }

  public String getAdminPasswd() {
    return this.adminPasswd;
  }

  public SyncInitHostingTask setAdminPasswd(String adminPasswd) {
    this.adminPasswd = adminPasswd;
    return this;
  }

  public void unsetAdminPasswd() {
    this.adminPasswd = null;
  }

  /** Returns true if field adminPasswd is set (has been assigned a value) and false otherwise */
  public boolean isSetAdminPasswd() {
    return this.adminPasswd != null;
  }

  public void setAdminPasswdIsSet(boolean value) {
    if (!value) {
      this.adminPasswd = null;
    }
  }

  public String getHostingAES16Key() {
    return this.hostingAES16Key;
  }

  public SyncInitHostingTask setHostingAES16Key(String hostingAES16Key) {
    this.hostingAES16Key = hostingAES16Key;
    return this;
  }

  public void unsetHostingAES16Key() {
    this.hostingAES16Key = null;
  }

  /** Returns true if field hostingAES16Key is set (has been assigned a value) and false otherwise */
  public boolean isSetHostingAES16Key() {
    return this.hostingAES16Key != null;
  }

  public void setHostingAES16KeyIsSet(boolean value) {
    if (!value) {
      this.hostingAES16Key = null;
    }
  }

  public String getRunningMode() {
    return this.runningMode;
  }

  public SyncInitHostingTask setRunningMode(String runningMode) {
    this.runningMode = runningMode;
    return this;
  }

  public void unsetRunningMode() {
    this.runningMode = null;
  }

  /** Returns true if field runningMode is set (has been assigned a value) and false otherwise */
  public boolean isSetRunningMode() {
    return this.runningMode != null;
  }

  public void setRunningModeIsSet(boolean value) {
    if (!value) {
      this.runningMode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((TaskType)value);
      }
      break;

    case MACHINE_INNER_IP:
      if (value == null) {
        unsetMachineInnerIP();
      } else {
        setMachineInnerIP((String)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Integer)value);
      }
      break;

    case OA_USER_NAME:
      if (value == null) {
        unsetOaUserName();
      } else {
        setOaUserName((String)value);
      }
      break;

    case MACHINE_ID:
      if (value == null) {
        unsetMachineId();
      } else {
        setMachineId((Long)value);
      }
      break;

    case ADMIN_NAME:
      if (value == null) {
        unsetAdminName();
      } else {
        setAdminName((String)value);
      }
      break;

    case ADMIN_PASSWD:
      if (value == null) {
        unsetAdminPasswd();
      } else {
        setAdminPasswd((String)value);
      }
      break;

    case HOSTING_AES16_KEY:
      if (value == null) {
        unsetHostingAES16Key();
      } else {
        setHostingAES16Key((String)value);
      }
      break;

    case RUNNING_MODE:
      if (value == null) {
        unsetRunningMode();
      } else {
        setRunningMode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case TASK_TYPE:
      return getTaskType();

    case MACHINE_INNER_IP:
      return getMachineInnerIP();

    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case GROUP_ID:
      return Integer.valueOf(getGroupId());

    case ORDER_ID:
      return Integer.valueOf(getOrderId());

    case OA_USER_NAME:
      return getOaUserName();

    case MACHINE_ID:
      return Long.valueOf(getMachineId());

    case ADMIN_NAME:
      return getAdminName();

    case ADMIN_PASSWD:
      return getAdminPasswd();

    case HOSTING_AES16_KEY:
      return getHostingAES16Key();

    case RUNNING_MODE:
      return getRunningMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TASK_TYPE:
      return isSetTaskType();
    case MACHINE_INNER_IP:
      return isSetMachineInnerIP();
    case COMPANY_ID:
      return isSetCompanyId();
    case GROUP_ID:
      return isSetGroupId();
    case ORDER_ID:
      return isSetOrderId();
    case OA_USER_NAME:
      return isSetOaUserName();
    case MACHINE_ID:
      return isSetMachineId();
    case ADMIN_NAME:
      return isSetAdminName();
    case ADMIN_PASSWD:
      return isSetAdminPasswd();
    case HOSTING_AES16_KEY:
      return isSetHostingAES16Key();
    case RUNNING_MODE:
      return isSetRunningMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncInitHostingTask)
      return this.equals((SyncInitHostingTask)that);
    return false;
  }

  public boolean equals(SyncInitHostingTask that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_taskType = true && this.isSetTaskType();
    boolean that_present_taskType = true && that.isSetTaskType();
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (!this.taskType.equals(that.taskType))
        return false;
    }

    boolean this_present_machineInnerIP = true && this.isSetMachineInnerIP();
    boolean that_present_machineInnerIP = true && that.isSetMachineInnerIP();
    if (this_present_machineInnerIP || that_present_machineInnerIP) {
      if (!(this_present_machineInnerIP && that_present_machineInnerIP))
        return false;
      if (!this.machineInnerIP.equals(that.machineInnerIP))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_oaUserName = true && this.isSetOaUserName();
    boolean that_present_oaUserName = true && that.isSetOaUserName();
    if (this_present_oaUserName || that_present_oaUserName) {
      if (!(this_present_oaUserName && that_present_oaUserName))
        return false;
      if (!this.oaUserName.equals(that.oaUserName))
        return false;
    }

    boolean this_present_machineId = true && this.isSetMachineId();
    boolean that_present_machineId = true && that.isSetMachineId();
    if (this_present_machineId || that_present_machineId) {
      if (!(this_present_machineId && that_present_machineId))
        return false;
      if (this.machineId != that.machineId)
        return false;
    }

    boolean this_present_adminName = true && this.isSetAdminName();
    boolean that_present_adminName = true && that.isSetAdminName();
    if (this_present_adminName || that_present_adminName) {
      if (!(this_present_adminName && that_present_adminName))
        return false;
      if (!this.adminName.equals(that.adminName))
        return false;
    }

    boolean this_present_adminPasswd = true && this.isSetAdminPasswd();
    boolean that_present_adminPasswd = true && that.isSetAdminPasswd();
    if (this_present_adminPasswd || that_present_adminPasswd) {
      if (!(this_present_adminPasswd && that_present_adminPasswd))
        return false;
      if (!this.adminPasswd.equals(that.adminPasswd))
        return false;
    }

    boolean this_present_hostingAES16Key = true && this.isSetHostingAES16Key();
    boolean that_present_hostingAES16Key = true && that.isSetHostingAES16Key();
    if (this_present_hostingAES16Key || that_present_hostingAES16Key) {
      if (!(this_present_hostingAES16Key && that_present_hostingAES16Key))
        return false;
      if (!this.hostingAES16Key.equals(that.hostingAES16Key))
        return false;
    }

    boolean this_present_runningMode = true && this.isSetRunningMode();
    boolean that_present_runningMode = true && that.isSetRunningMode();
    if (this_present_runningMode || that_present_runningMode) {
      if (!(this_present_runningMode && that_present_runningMode))
        return false;
      if (!this.runningMode.equals(that.runningMode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SyncInitHostingTask other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineInnerIP()).compareTo(other.isSetMachineInnerIP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineInnerIP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineInnerIP, other.machineInnerIP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOaUserName()).compareTo(other.isSetOaUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOaUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oaUserName, other.oaUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineId()).compareTo(other.isSetMachineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineId, other.machineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdminName()).compareTo(other.isSetAdminName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminName, other.adminName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAdminPasswd()).compareTo(other.isSetAdminPasswd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdminPasswd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adminPasswd, other.adminPasswd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostingAES16Key()).compareTo(other.isSetHostingAES16Key());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostingAES16Key()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostingAES16Key, other.hostingAES16Key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunningMode()).compareTo(other.isSetRunningMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunningMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runningMode, other.runningMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncInitHostingTask(");
    boolean first = true;

    if (isSetTaskId()) {
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("taskType:");
    if (this.taskType == null) {
      sb.append("null");
    } else {
      sb.append(this.taskType);
    }
    first = false;
    if (isSetMachineInnerIP()) {
      if (!first) sb.append(", ");
      sb.append("machineInnerIP:");
      if (this.machineInnerIP == null) {
        sb.append("null");
      } else {
        sb.append(this.machineInnerIP);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetOrderId()) {
      if (!first) sb.append(", ");
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetOaUserName()) {
      if (!first) sb.append(", ");
      sb.append("oaUserName:");
      if (this.oaUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.oaUserName);
      }
      first = false;
    }
    if (isSetMachineId()) {
      if (!first) sb.append(", ");
      sb.append("machineId:");
      sb.append(this.machineId);
      first = false;
    }
    if (isSetAdminName()) {
      if (!first) sb.append(", ");
      sb.append("adminName:");
      if (this.adminName == null) {
        sb.append("null");
      } else {
        sb.append(this.adminName);
      }
      first = false;
    }
    if (isSetAdminPasswd()) {
      if (!first) sb.append(", ");
      sb.append("adminPasswd:");
      if (this.adminPasswd == null) {
        sb.append("null");
      } else {
        sb.append(this.adminPasswd);
      }
      first = false;
    }
    if (isSetHostingAES16Key()) {
      if (!first) sb.append(", ");
      sb.append("hostingAES16Key:");
      if (this.hostingAES16Key == null) {
        sb.append("null");
      } else {
        sb.append(this.hostingAES16Key);
      }
      first = false;
    }
    if (isSetRunningMode()) {
      if (!first) sb.append(", ");
      sb.append("runningMode:");
      if (this.runningMode == null) {
        sb.append("null");
      } else {
        sb.append(this.runningMode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncInitHostingTaskStandardSchemeFactory implements SchemeFactory {
    public SyncInitHostingTaskStandardScheme getScheme() {
      return new SyncInitHostingTaskStandardScheme();
    }
  }

  private static class SyncInitHostingTaskStandardScheme extends StandardScheme<SyncInitHostingTask> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncInitHostingTask struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = TaskType.findByValue(iprot.readI32());
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MACHINE_INNER_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineInnerIP = iprot.readString();
              struct.setMachineInnerIPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderId = iprot.readI32();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OA_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oaUserName = iprot.readString();
              struct.setOaUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MACHINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.machineId = iprot.readI64();
              struct.setMachineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ADMIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adminName = iprot.readString();
              struct.setAdminNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ADMIN_PASSWD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adminPasswd = iprot.readString();
              struct.setAdminPasswdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // HOSTING_AES16_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostingAES16Key = iprot.readString();
              struct.setHostingAES16KeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RUNNING_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runningMode = iprot.readString();
              struct.setRunningModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncInitHostingTask struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTaskId()) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.taskType != null) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.taskType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.machineInnerIP != null) {
        if (struct.isSetMachineInnerIP()) {
          oprot.writeFieldBegin(MACHINE_INNER_IP_FIELD_DESC);
          oprot.writeString(struct.machineInnerIP);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI32(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.oaUserName != null) {
        if (struct.isSetOaUserName()) {
          oprot.writeFieldBegin(OA_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.oaUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMachineId()) {
        oprot.writeFieldBegin(MACHINE_ID_FIELD_DESC);
        oprot.writeI64(struct.machineId);
        oprot.writeFieldEnd();
      }
      if (struct.adminName != null) {
        if (struct.isSetAdminName()) {
          oprot.writeFieldBegin(ADMIN_NAME_FIELD_DESC);
          oprot.writeString(struct.adminName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.adminPasswd != null) {
        if (struct.isSetAdminPasswd()) {
          oprot.writeFieldBegin(ADMIN_PASSWD_FIELD_DESC);
          oprot.writeString(struct.adminPasswd);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostingAES16Key != null) {
        if (struct.isSetHostingAES16Key()) {
          oprot.writeFieldBegin(HOSTING_AES16_KEY_FIELD_DESC);
          oprot.writeString(struct.hostingAES16Key);
          oprot.writeFieldEnd();
        }
      }
      if (struct.runningMode != null) {
        if (struct.isSetRunningMode()) {
          oprot.writeFieldBegin(RUNNING_MODE_FIELD_DESC);
          oprot.writeString(struct.runningMode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncInitHostingTaskTupleSchemeFactory implements SchemeFactory {
    public SyncInitHostingTaskTupleScheme getScheme() {
      return new SyncInitHostingTaskTupleScheme();
    }
  }

  private static class SyncInitHostingTaskTupleScheme extends TupleScheme<SyncInitHostingTask> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncInitHostingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.taskType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetMachineInnerIP()) {
        optionals.set(1);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(2);
      }
      if (struct.isSetGroupId()) {
        optionals.set(3);
      }
      if (struct.isSetOrderId()) {
        optionals.set(4);
      }
      if (struct.isSetOaUserName()) {
        optionals.set(5);
      }
      if (struct.isSetMachineId()) {
        optionals.set(6);
      }
      if (struct.isSetAdminName()) {
        optionals.set(7);
      }
      if (struct.isSetAdminPasswd()) {
        optionals.set(8);
      }
      if (struct.isSetHostingAES16Key()) {
        optionals.set(9);
      }
      if (struct.isSetRunningMode()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetMachineInnerIP()) {
        oprot.writeString(struct.machineInnerIP);
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetOrderId()) {
        oprot.writeI32(struct.orderId);
      }
      if (struct.isSetOaUserName()) {
        oprot.writeString(struct.oaUserName);
      }
      if (struct.isSetMachineId()) {
        oprot.writeI64(struct.machineId);
      }
      if (struct.isSetAdminName()) {
        oprot.writeString(struct.adminName);
      }
      if (struct.isSetAdminPasswd()) {
        oprot.writeString(struct.adminPasswd);
      }
      if (struct.isSetHostingAES16Key()) {
        oprot.writeString(struct.hostingAES16Key);
      }
      if (struct.isSetRunningMode()) {
        oprot.writeString(struct.runningMode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncInitHostingTask struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskType = TaskType.findByValue(iprot.readI32());
      struct.setTaskTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.machineInnerIP = iprot.readString();
        struct.setMachineInnerIPIsSet(true);
      }
      if (incoming.get(2)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderId = iprot.readI32();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.oaUserName = iprot.readString();
        struct.setOaUserNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.machineId = iprot.readI64();
        struct.setMachineIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.adminName = iprot.readString();
        struct.setAdminNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.adminPasswd = iprot.readString();
        struct.setAdminPasswdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.hostingAES16Key = iprot.readString();
        struct.setHostingAES16KeyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.runningMode = iprot.readString();
        struct.setRunningModeIsSet(true);
      }
    }
  }

}

