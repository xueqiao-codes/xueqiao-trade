/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrderInputExt implements org.apache.thrift.TBase<HostingExecOrderInputExt, HostingExecOrderInputExt._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrderInputExt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrderInputExt");

  private static final org.apache.thrift.protocol.TField CTP_INPUT_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("ctpInputExt", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ESUNNY3_INPUT_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny3InputExt", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ESUNNY9_INPUT_EXT_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny9InputExt", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderInputExtStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderInputExtTupleSchemeFactory());
  }

  public CTPOrderInputExt ctpInputExt; // optional
  public ESunny3OrderInputExt esunny3InputExt; // optional
  public ESunny9OrderInputExt esunny9InputExt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CTP_INPUT_EXT((short)1, "ctpInputExt"),
    ESUNNY3_INPUT_EXT((short)2, "esunny3InputExt"),
    ESUNNY9_INPUT_EXT((short)3, "esunny9InputExt");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CTP_INPUT_EXT
          return CTP_INPUT_EXT;
        case 2: // ESUNNY3_INPUT_EXT
          return ESUNNY3_INPUT_EXT;
        case 3: // ESUNNY9_INPUT_EXT
          return ESUNNY9_INPUT_EXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CTP_INPUT_EXT,_Fields.ESUNNY3_INPUT_EXT,_Fields.ESUNNY9_INPUT_EXT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CTP_INPUT_EXT, new org.apache.thrift.meta_data.FieldMetaData("ctpInputExt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPOrderInputExt.class)));
    tmpMap.put(_Fields.ESUNNY3_INPUT_EXT, new org.apache.thrift.meta_data.FieldMetaData("esunny3InputExt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ESunny3OrderInputExt.class)));
    tmpMap.put(_Fields.ESUNNY9_INPUT_EXT, new org.apache.thrift.meta_data.FieldMetaData("esunny9InputExt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ESunny9OrderInputExt.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrderInputExt.class, metaDataMap);
  }

  public HostingExecOrderInputExt() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrderInputExt(HostingExecOrderInputExt other) {
    if (other.isSetCtpInputExt()) {
      this.ctpInputExt = new CTPOrderInputExt(other.ctpInputExt);
    }
    if (other.isSetEsunny3InputExt()) {
      this.esunny3InputExt = new ESunny3OrderInputExt(other.esunny3InputExt);
    }
    if (other.isSetEsunny9InputExt()) {
      this.esunny9InputExt = new ESunny9OrderInputExt(other.esunny9InputExt);
    }
  }

  public HostingExecOrderInputExt deepCopy() {
    return new HostingExecOrderInputExt(this);
  }

  @Override
  public void clear() {
    this.ctpInputExt = null;
    this.esunny3InputExt = null;
    this.esunny9InputExt = null;
  }

  public CTPOrderInputExt getCtpInputExt() {
    return this.ctpInputExt;
  }

  public HostingExecOrderInputExt setCtpInputExt(CTPOrderInputExt ctpInputExt) {
    this.ctpInputExt = ctpInputExt;
    return this;
  }

  public void unsetCtpInputExt() {
    this.ctpInputExt = null;
  }

  /** Returns true if field ctpInputExt is set (has been assigned a value) and false otherwise */
  public boolean isSetCtpInputExt() {
    return this.ctpInputExt != null;
  }

  public void setCtpInputExtIsSet(boolean value) {
    if (!value) {
      this.ctpInputExt = null;
    }
  }

  public ESunny3OrderInputExt getEsunny3InputExt() {
    return this.esunny3InputExt;
  }

  public HostingExecOrderInputExt setEsunny3InputExt(ESunny3OrderInputExt esunny3InputExt) {
    this.esunny3InputExt = esunny3InputExt;
    return this;
  }

  public void unsetEsunny3InputExt() {
    this.esunny3InputExt = null;
  }

  /** Returns true if field esunny3InputExt is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny3InputExt() {
    return this.esunny3InputExt != null;
  }

  public void setEsunny3InputExtIsSet(boolean value) {
    if (!value) {
      this.esunny3InputExt = null;
    }
  }

  public ESunny9OrderInputExt getEsunny9InputExt() {
    return this.esunny9InputExt;
  }

  public HostingExecOrderInputExt setEsunny9InputExt(ESunny9OrderInputExt esunny9InputExt) {
    this.esunny9InputExt = esunny9InputExt;
    return this;
  }

  public void unsetEsunny9InputExt() {
    this.esunny9InputExt = null;
  }

  /** Returns true if field esunny9InputExt is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny9InputExt() {
    return this.esunny9InputExt != null;
  }

  public void setEsunny9InputExtIsSet(boolean value) {
    if (!value) {
      this.esunny9InputExt = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CTP_INPUT_EXT:
      if (value == null) {
        unsetCtpInputExt();
      } else {
        setCtpInputExt((CTPOrderInputExt)value);
      }
      break;

    case ESUNNY3_INPUT_EXT:
      if (value == null) {
        unsetEsunny3InputExt();
      } else {
        setEsunny3InputExt((ESunny3OrderInputExt)value);
      }
      break;

    case ESUNNY9_INPUT_EXT:
      if (value == null) {
        unsetEsunny9InputExt();
      } else {
        setEsunny9InputExt((ESunny9OrderInputExt)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CTP_INPUT_EXT:
      return getCtpInputExt();

    case ESUNNY3_INPUT_EXT:
      return getEsunny3InputExt();

    case ESUNNY9_INPUT_EXT:
      return getEsunny9InputExt();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CTP_INPUT_EXT:
      return isSetCtpInputExt();
    case ESUNNY3_INPUT_EXT:
      return isSetEsunny3InputExt();
    case ESUNNY9_INPUT_EXT:
      return isSetEsunny9InputExt();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrderInputExt)
      return this.equals((HostingExecOrderInputExt)that);
    return false;
  }

  public boolean equals(HostingExecOrderInputExt that) {
    if (that == null)
      return false;

    boolean this_present_ctpInputExt = true && this.isSetCtpInputExt();
    boolean that_present_ctpInputExt = true && that.isSetCtpInputExt();
    if (this_present_ctpInputExt || that_present_ctpInputExt) {
      if (!(this_present_ctpInputExt && that_present_ctpInputExt))
        return false;
      if (!this.ctpInputExt.equals(that.ctpInputExt))
        return false;
    }

    boolean this_present_esunny3InputExt = true && this.isSetEsunny3InputExt();
    boolean that_present_esunny3InputExt = true && that.isSetEsunny3InputExt();
    if (this_present_esunny3InputExt || that_present_esunny3InputExt) {
      if (!(this_present_esunny3InputExt && that_present_esunny3InputExt))
        return false;
      if (!this.esunny3InputExt.equals(that.esunny3InputExt))
        return false;
    }

    boolean this_present_esunny9InputExt = true && this.isSetEsunny9InputExt();
    boolean that_present_esunny9InputExt = true && that.isSetEsunny9InputExt();
    if (this_present_esunny9InputExt || that_present_esunny9InputExt) {
      if (!(this_present_esunny9InputExt && that_present_esunny9InputExt))
        return false;
      if (!this.esunny9InputExt.equals(that.esunny9InputExt))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrderInputExt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCtpInputExt()).compareTo(other.isSetCtpInputExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtpInputExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctpInputExt, other.ctpInputExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny3InputExt()).compareTo(other.isSetEsunny3InputExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny3InputExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny3InputExt, other.esunny3InputExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny9InputExt()).compareTo(other.isSetEsunny9InputExt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny9InputExt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny9InputExt, other.esunny9InputExt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrderInputExt(");
    boolean first = true;

    if (isSetCtpInputExt()) {
      sb.append("ctpInputExt:");
      if (this.ctpInputExt == null) {
        sb.append("null");
      } else {
        sb.append(this.ctpInputExt);
      }
      first = false;
    }
    if (isSetEsunny3InputExt()) {
      if (!first) sb.append(", ");
      sb.append("esunny3InputExt:");
      if (this.esunny3InputExt == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny3InputExt);
      }
      first = false;
    }
    if (isSetEsunny9InputExt()) {
      if (!first) sb.append(", ");
      sb.append("esunny9InputExt:");
      if (this.esunny9InputExt == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny9InputExt);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ctpInputExt != null) {
      ctpInputExt.validate();
    }
    if (esunny3InputExt != null) {
      esunny3InputExt.validate();
    }
    if (esunny9InputExt != null) {
      esunny9InputExt.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderInputExtStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderInputExtStandardScheme getScheme() {
      return new HostingExecOrderInputExtStandardScheme();
    }
  }

  private static class HostingExecOrderInputExtStandardScheme extends StandardScheme<HostingExecOrderInputExt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrderInputExt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CTP_INPUT_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ctpInputExt = new CTPOrderInputExt();
              struct.ctpInputExt.read(iprot);
              struct.setCtpInputExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ESUNNY3_INPUT_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny3InputExt = new ESunny3OrderInputExt();
              struct.esunny3InputExt.read(iprot);
              struct.setEsunny3InputExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ESUNNY9_INPUT_EXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny9InputExt = new ESunny9OrderInputExt();
              struct.esunny9InputExt.read(iprot);
              struct.setEsunny9InputExtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrderInputExt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ctpInputExt != null) {
        if (struct.isSetCtpInputExt()) {
          oprot.writeFieldBegin(CTP_INPUT_EXT_FIELD_DESC);
          struct.ctpInputExt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny3InputExt != null) {
        if (struct.isSetEsunny3InputExt()) {
          oprot.writeFieldBegin(ESUNNY3_INPUT_EXT_FIELD_DESC);
          struct.esunny3InputExt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny9InputExt != null) {
        if (struct.isSetEsunny9InputExt()) {
          oprot.writeFieldBegin(ESUNNY9_INPUT_EXT_FIELD_DESC);
          struct.esunny9InputExt.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderInputExtTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderInputExtTupleScheme getScheme() {
      return new HostingExecOrderInputExtTupleScheme();
    }
  }

  private static class HostingExecOrderInputExtTupleScheme extends TupleScheme<HostingExecOrderInputExt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderInputExt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCtpInputExt()) {
        optionals.set(0);
      }
      if (struct.isSetEsunny3InputExt()) {
        optionals.set(1);
      }
      if (struct.isSetEsunny9InputExt()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCtpInputExt()) {
        struct.ctpInputExt.write(oprot);
      }
      if (struct.isSetEsunny3InputExt()) {
        struct.esunny3InputExt.write(oprot);
      }
      if (struct.isSetEsunny9InputExt()) {
        struct.esunny9InputExt.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderInputExt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ctpInputExt = new CTPOrderInputExt();
        struct.ctpInputExt.read(iprot);
        struct.setCtpInputExtIsSet(true);
      }
      if (incoming.get(1)) {
        struct.esunny3InputExt = new ESunny3OrderInputExt();
        struct.esunny3InputExt.read(iprot);
        struct.setEsunny3InputExtIsSet(true);
      }
      if (incoming.get(2)) {
        struct.esunny9InputExt = new ESunny9OrderInputExt();
        struct.esunny9InputExt.read(iprot);
        struct.setEsunny9InputExtIsSet(true);
      }
    }
  }

}

