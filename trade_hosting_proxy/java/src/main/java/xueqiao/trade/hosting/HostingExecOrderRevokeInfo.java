/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrderRevokeInfo implements org.apache.thrift.TBase<HostingExecOrderRevokeInfo, HostingExecOrderRevokeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrderRevokeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrderRevokeInfo");

  private static final org.apache.thrift.protocol.TField LAST_REVOKE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRevokeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LAST_REVOKE_FAILED_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRevokeFailedErrorCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_REVOKE_UPSIDE_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRevokeUpsideErrorCode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_REVOKE_UPSIDE_REJECT_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("lastRevokeUpsideRejectReason", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderRevokeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderRevokeInfoTupleSchemeFactory());
  }

  public long lastRevokeTimestampMs; // optional
  public int lastRevokeFailedErrorCode; // optional
  public int lastRevokeUpsideErrorCode; // optional
  public String lastRevokeUpsideRejectReason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_REVOKE_TIMESTAMP_MS((short)1, "lastRevokeTimestampMs"),
    LAST_REVOKE_FAILED_ERROR_CODE((short)2, "lastRevokeFailedErrorCode"),
    LAST_REVOKE_UPSIDE_ERROR_CODE((short)3, "lastRevokeUpsideErrorCode"),
    LAST_REVOKE_UPSIDE_REJECT_REASON((short)4, "lastRevokeUpsideRejectReason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_REVOKE_TIMESTAMP_MS
          return LAST_REVOKE_TIMESTAMP_MS;
        case 2: // LAST_REVOKE_FAILED_ERROR_CODE
          return LAST_REVOKE_FAILED_ERROR_CODE;
        case 3: // LAST_REVOKE_UPSIDE_ERROR_CODE
          return LAST_REVOKE_UPSIDE_ERROR_CODE;
        case 4: // LAST_REVOKE_UPSIDE_REJECT_REASON
          return LAST_REVOKE_UPSIDE_REJECT_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTREVOKETIMESTAMPMS_ISSET_ID = 0;
  private static final int __LASTREVOKEFAILEDERRORCODE_ISSET_ID = 1;
  private static final int __LASTREVOKEUPSIDEERRORCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LAST_REVOKE_TIMESTAMP_MS,_Fields.LAST_REVOKE_FAILED_ERROR_CODE,_Fields.LAST_REVOKE_UPSIDE_ERROR_CODE,_Fields.LAST_REVOKE_UPSIDE_REJECT_REASON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_REVOKE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastRevokeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_REVOKE_FAILED_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("lastRevokeFailedErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_REVOKE_UPSIDE_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("lastRevokeUpsideErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_REVOKE_UPSIDE_REJECT_REASON, new org.apache.thrift.meta_data.FieldMetaData("lastRevokeUpsideRejectReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrderRevokeInfo.class, metaDataMap);
  }

  public HostingExecOrderRevokeInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrderRevokeInfo(HostingExecOrderRevokeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lastRevokeTimestampMs = other.lastRevokeTimestampMs;
    this.lastRevokeFailedErrorCode = other.lastRevokeFailedErrorCode;
    this.lastRevokeUpsideErrorCode = other.lastRevokeUpsideErrorCode;
    if (other.isSetLastRevokeUpsideRejectReason()) {
      this.lastRevokeUpsideRejectReason = other.lastRevokeUpsideRejectReason;
    }
  }

  public HostingExecOrderRevokeInfo deepCopy() {
    return new HostingExecOrderRevokeInfo(this);
  }

  @Override
  public void clear() {
    setLastRevokeTimestampMsIsSet(false);
    this.lastRevokeTimestampMs = 0;
    setLastRevokeFailedErrorCodeIsSet(false);
    this.lastRevokeFailedErrorCode = 0;
    setLastRevokeUpsideErrorCodeIsSet(false);
    this.lastRevokeUpsideErrorCode = 0;
    this.lastRevokeUpsideRejectReason = null;
  }

  public long getLastRevokeTimestampMs() {
    return this.lastRevokeTimestampMs;
  }

  public HostingExecOrderRevokeInfo setLastRevokeTimestampMs(long lastRevokeTimestampMs) {
    this.lastRevokeTimestampMs = lastRevokeTimestampMs;
    setLastRevokeTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastRevokeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTREVOKETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastRevokeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRevokeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTREVOKETIMESTAMPMS_ISSET_ID);
  }

  public void setLastRevokeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTREVOKETIMESTAMPMS_ISSET_ID, value);
  }

  public int getLastRevokeFailedErrorCode() {
    return this.lastRevokeFailedErrorCode;
  }

  public HostingExecOrderRevokeInfo setLastRevokeFailedErrorCode(int lastRevokeFailedErrorCode) {
    this.lastRevokeFailedErrorCode = lastRevokeFailedErrorCode;
    setLastRevokeFailedErrorCodeIsSet(true);
    return this;
  }

  public void unsetLastRevokeFailedErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTREVOKEFAILEDERRORCODE_ISSET_ID);
  }

  /** Returns true if field lastRevokeFailedErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRevokeFailedErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTREVOKEFAILEDERRORCODE_ISSET_ID);
  }

  public void setLastRevokeFailedErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTREVOKEFAILEDERRORCODE_ISSET_ID, value);
  }

  public int getLastRevokeUpsideErrorCode() {
    return this.lastRevokeUpsideErrorCode;
  }

  public HostingExecOrderRevokeInfo setLastRevokeUpsideErrorCode(int lastRevokeUpsideErrorCode) {
    this.lastRevokeUpsideErrorCode = lastRevokeUpsideErrorCode;
    setLastRevokeUpsideErrorCodeIsSet(true);
    return this;
  }

  public void unsetLastRevokeUpsideErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTREVOKEUPSIDEERRORCODE_ISSET_ID);
  }

  /** Returns true if field lastRevokeUpsideErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRevokeUpsideErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTREVOKEUPSIDEERRORCODE_ISSET_ID);
  }

  public void setLastRevokeUpsideErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTREVOKEUPSIDEERRORCODE_ISSET_ID, value);
  }

  public String getLastRevokeUpsideRejectReason() {
    return this.lastRevokeUpsideRejectReason;
  }

  public HostingExecOrderRevokeInfo setLastRevokeUpsideRejectReason(String lastRevokeUpsideRejectReason) {
    this.lastRevokeUpsideRejectReason = lastRevokeUpsideRejectReason;
    return this;
  }

  public void unsetLastRevokeUpsideRejectReason() {
    this.lastRevokeUpsideRejectReason = null;
  }

  /** Returns true if field lastRevokeUpsideRejectReason is set (has been assigned a value) and false otherwise */
  public boolean isSetLastRevokeUpsideRejectReason() {
    return this.lastRevokeUpsideRejectReason != null;
  }

  public void setLastRevokeUpsideRejectReasonIsSet(boolean value) {
    if (!value) {
      this.lastRevokeUpsideRejectReason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_REVOKE_TIMESTAMP_MS:
      if (value == null) {
        unsetLastRevokeTimestampMs();
      } else {
        setLastRevokeTimestampMs((Long)value);
      }
      break;

    case LAST_REVOKE_FAILED_ERROR_CODE:
      if (value == null) {
        unsetLastRevokeFailedErrorCode();
      } else {
        setLastRevokeFailedErrorCode((Integer)value);
      }
      break;

    case LAST_REVOKE_UPSIDE_ERROR_CODE:
      if (value == null) {
        unsetLastRevokeUpsideErrorCode();
      } else {
        setLastRevokeUpsideErrorCode((Integer)value);
      }
      break;

    case LAST_REVOKE_UPSIDE_REJECT_REASON:
      if (value == null) {
        unsetLastRevokeUpsideRejectReason();
      } else {
        setLastRevokeUpsideRejectReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_REVOKE_TIMESTAMP_MS:
      return Long.valueOf(getLastRevokeTimestampMs());

    case LAST_REVOKE_FAILED_ERROR_CODE:
      return Integer.valueOf(getLastRevokeFailedErrorCode());

    case LAST_REVOKE_UPSIDE_ERROR_CODE:
      return Integer.valueOf(getLastRevokeUpsideErrorCode());

    case LAST_REVOKE_UPSIDE_REJECT_REASON:
      return getLastRevokeUpsideRejectReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_REVOKE_TIMESTAMP_MS:
      return isSetLastRevokeTimestampMs();
    case LAST_REVOKE_FAILED_ERROR_CODE:
      return isSetLastRevokeFailedErrorCode();
    case LAST_REVOKE_UPSIDE_ERROR_CODE:
      return isSetLastRevokeUpsideErrorCode();
    case LAST_REVOKE_UPSIDE_REJECT_REASON:
      return isSetLastRevokeUpsideRejectReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrderRevokeInfo)
      return this.equals((HostingExecOrderRevokeInfo)that);
    return false;
  }

  public boolean equals(HostingExecOrderRevokeInfo that) {
    if (that == null)
      return false;

    boolean this_present_lastRevokeTimestampMs = true && this.isSetLastRevokeTimestampMs();
    boolean that_present_lastRevokeTimestampMs = true && that.isSetLastRevokeTimestampMs();
    if (this_present_lastRevokeTimestampMs || that_present_lastRevokeTimestampMs) {
      if (!(this_present_lastRevokeTimestampMs && that_present_lastRevokeTimestampMs))
        return false;
      if (this.lastRevokeTimestampMs != that.lastRevokeTimestampMs)
        return false;
    }

    boolean this_present_lastRevokeFailedErrorCode = true && this.isSetLastRevokeFailedErrorCode();
    boolean that_present_lastRevokeFailedErrorCode = true && that.isSetLastRevokeFailedErrorCode();
    if (this_present_lastRevokeFailedErrorCode || that_present_lastRevokeFailedErrorCode) {
      if (!(this_present_lastRevokeFailedErrorCode && that_present_lastRevokeFailedErrorCode))
        return false;
      if (this.lastRevokeFailedErrorCode != that.lastRevokeFailedErrorCode)
        return false;
    }

    boolean this_present_lastRevokeUpsideErrorCode = true && this.isSetLastRevokeUpsideErrorCode();
    boolean that_present_lastRevokeUpsideErrorCode = true && that.isSetLastRevokeUpsideErrorCode();
    if (this_present_lastRevokeUpsideErrorCode || that_present_lastRevokeUpsideErrorCode) {
      if (!(this_present_lastRevokeUpsideErrorCode && that_present_lastRevokeUpsideErrorCode))
        return false;
      if (this.lastRevokeUpsideErrorCode != that.lastRevokeUpsideErrorCode)
        return false;
    }

    boolean this_present_lastRevokeUpsideRejectReason = true && this.isSetLastRevokeUpsideRejectReason();
    boolean that_present_lastRevokeUpsideRejectReason = true && that.isSetLastRevokeUpsideRejectReason();
    if (this_present_lastRevokeUpsideRejectReason || that_present_lastRevokeUpsideRejectReason) {
      if (!(this_present_lastRevokeUpsideRejectReason && that_present_lastRevokeUpsideRejectReason))
        return false;
      if (!this.lastRevokeUpsideRejectReason.equals(that.lastRevokeUpsideRejectReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrderRevokeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLastRevokeTimestampMs()).compareTo(other.isSetLastRevokeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRevokeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRevokeTimestampMs, other.lastRevokeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastRevokeFailedErrorCode()).compareTo(other.isSetLastRevokeFailedErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRevokeFailedErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRevokeFailedErrorCode, other.lastRevokeFailedErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastRevokeUpsideErrorCode()).compareTo(other.isSetLastRevokeUpsideErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRevokeUpsideErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRevokeUpsideErrorCode, other.lastRevokeUpsideErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastRevokeUpsideRejectReason()).compareTo(other.isSetLastRevokeUpsideRejectReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastRevokeUpsideRejectReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastRevokeUpsideRejectReason, other.lastRevokeUpsideRejectReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrderRevokeInfo(");
    boolean first = true;

    if (isSetLastRevokeTimestampMs()) {
      sb.append("lastRevokeTimestampMs:");
      sb.append(this.lastRevokeTimestampMs);
      first = false;
    }
    if (isSetLastRevokeFailedErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("lastRevokeFailedErrorCode:");
      sb.append(this.lastRevokeFailedErrorCode);
      first = false;
    }
    if (isSetLastRevokeUpsideErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("lastRevokeUpsideErrorCode:");
      sb.append(this.lastRevokeUpsideErrorCode);
      first = false;
    }
    if (isSetLastRevokeUpsideRejectReason()) {
      if (!first) sb.append(", ");
      sb.append("lastRevokeUpsideRejectReason:");
      if (this.lastRevokeUpsideRejectReason == null) {
        sb.append("null");
      } else {
        sb.append(this.lastRevokeUpsideRejectReason);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderRevokeInfoStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderRevokeInfoStandardScheme getScheme() {
      return new HostingExecOrderRevokeInfoStandardScheme();
    }
  }

  private static class HostingExecOrderRevokeInfoStandardScheme extends StandardScheme<HostingExecOrderRevokeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrderRevokeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_REVOKE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastRevokeTimestampMs = iprot.readI64();
              struct.setLastRevokeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LAST_REVOKE_FAILED_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastRevokeFailedErrorCode = iprot.readI32();
              struct.setLastRevokeFailedErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_REVOKE_UPSIDE_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastRevokeUpsideErrorCode = iprot.readI32();
              struct.setLastRevokeUpsideErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_REVOKE_UPSIDE_REJECT_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastRevokeUpsideRejectReason = iprot.readString();
              struct.setLastRevokeUpsideRejectReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrderRevokeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLastRevokeTimestampMs()) {
        oprot.writeFieldBegin(LAST_REVOKE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastRevokeTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastRevokeFailedErrorCode()) {
        oprot.writeFieldBegin(LAST_REVOKE_FAILED_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.lastRevokeFailedErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastRevokeUpsideErrorCode()) {
        oprot.writeFieldBegin(LAST_REVOKE_UPSIDE_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.lastRevokeUpsideErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.lastRevokeUpsideRejectReason != null) {
        if (struct.isSetLastRevokeUpsideRejectReason()) {
          oprot.writeFieldBegin(LAST_REVOKE_UPSIDE_REJECT_REASON_FIELD_DESC);
          oprot.writeString(struct.lastRevokeUpsideRejectReason);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderRevokeInfoTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderRevokeInfoTupleScheme getScheme() {
      return new HostingExecOrderRevokeInfoTupleScheme();
    }
  }

  private static class HostingExecOrderRevokeInfoTupleScheme extends TupleScheme<HostingExecOrderRevokeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderRevokeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastRevokeTimestampMs()) {
        optionals.set(0);
      }
      if (struct.isSetLastRevokeFailedErrorCode()) {
        optionals.set(1);
      }
      if (struct.isSetLastRevokeUpsideErrorCode()) {
        optionals.set(2);
      }
      if (struct.isSetLastRevokeUpsideRejectReason()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetLastRevokeTimestampMs()) {
        oprot.writeI64(struct.lastRevokeTimestampMs);
      }
      if (struct.isSetLastRevokeFailedErrorCode()) {
        oprot.writeI32(struct.lastRevokeFailedErrorCode);
      }
      if (struct.isSetLastRevokeUpsideErrorCode()) {
        oprot.writeI32(struct.lastRevokeUpsideErrorCode);
      }
      if (struct.isSetLastRevokeUpsideRejectReason()) {
        oprot.writeString(struct.lastRevokeUpsideRejectReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderRevokeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.lastRevokeTimestampMs = iprot.readI64();
        struct.setLastRevokeTimestampMsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lastRevokeFailedErrorCode = iprot.readI32();
        struct.setLastRevokeFailedErrorCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastRevokeUpsideErrorCode = iprot.readI32();
        struct.setLastRevokeUpsideErrorCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastRevokeUpsideRejectReason = iprot.readString();
        struct.setLastRevokeUpsideRejectReasonIsSet(true);
      }
    }
  }

}

