/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdOrderInputField implements org.apache.thrift.TBase<StdOrderInputField, StdOrderInputField._Fields>, java.io.Serializable, Cloneable, Comparable<StdOrderInputField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdOrderInputField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField ORDER_WAY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderWay", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField ORDER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMode", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField VALID_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("validTimestamp", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField HEDGE_FIELD_DESC = new org.apache.thrift.protocol.TField("hedge", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField CONTINGENT_CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("contingentCondition", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField TRIGGER_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField ORDER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderPriceType", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField SAVE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("saveString", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdOrderInputFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdOrderInputFieldTupleSchemeFactory());
  }

  public String sledId; // optional
  public int sledAccountId; // optional
  public int userId; // optional
  public int sledContractId; // optional
  public double price; // optional
  public int quantity; // optional
  /**
   * 
   * @see StdDirectionType
   */
  public StdDirectionType direction; // optional
  /**
   * 
   * @see StdOrderType
   */
  public StdOrderType orderType; // optional
  /**
   * 
   * @see StdOrderWayType
   */
  public StdOrderWayType orderWay; // optional
  /**
   * 
   * @see StdOrderModeType
   */
  public StdOrderModeType orderMode; // optional
  public long validTimestamp; // optional
  /**
   * 
   * @see StdOrderHedgeType
   */
  public StdOrderHedgeType hedge; // optional
  /**
   * 
   * @see StdOrderContingentConditionType
   */
  public StdOrderContingentConditionType contingentCondition; // optional
  public double triggerPrice; // optional
  /**
   * 
   * @see StdOrderPriceType
   */
  public StdOrderPriceType orderPriceType; // optional
  public long timestamp; // optional
  public String saveString; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    SLED_CONTRACT_ID((short)4, "sledContractId"),
    PRICE((short)5, "price"),
    QUANTITY((short)6, "quantity"),
    /**
     * 
     * @see StdDirectionType
     */
    DIRECTION((short)7, "direction"),
    /**
     * 
     * @see StdOrderType
     */
    ORDER_TYPE((short)8, "orderType"),
    /**
     * 
     * @see StdOrderWayType
     */
    ORDER_WAY((short)9, "orderWay"),
    /**
     * 
     * @see StdOrderModeType
     */
    ORDER_MODE((short)10, "orderMode"),
    VALID_TIMESTAMP((short)11, "validTimestamp"),
    /**
     * 
     * @see StdOrderHedgeType
     */
    HEDGE((short)12, "hedge"),
    /**
     * 
     * @see StdOrderContingentConditionType
     */
    CONTINGENT_CONDITION((short)13, "contingentCondition"),
    TRIGGER_PRICE((short)14, "triggerPrice"),
    /**
     * 
     * @see StdOrderPriceType
     */
    ORDER_PRICE_TYPE((short)15, "orderPriceType"),
    TIMESTAMP((short)16, "timestamp"),
    SAVE_STRING((short)17, "saveString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 5: // PRICE
          return PRICE;
        case 6: // QUANTITY
          return QUANTITY;
        case 7: // DIRECTION
          return DIRECTION;
        case 8: // ORDER_TYPE
          return ORDER_TYPE;
        case 9: // ORDER_WAY
          return ORDER_WAY;
        case 10: // ORDER_MODE
          return ORDER_MODE;
        case 11: // VALID_TIMESTAMP
          return VALID_TIMESTAMP;
        case 12: // HEDGE
          return HEDGE;
        case 13: // CONTINGENT_CONDITION
          return CONTINGENT_CONDITION;
        case 14: // TRIGGER_PRICE
          return TRIGGER_PRICE;
        case 15: // ORDER_PRICE_TYPE
          return ORDER_PRICE_TYPE;
        case 16: // TIMESTAMP
          return TIMESTAMP;
        case 17: // SAVE_STRING
          return SAVE_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __SLEDCONTRACTID_ISSET_ID = 2;
  private static final int __PRICE_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __VALIDTIMESTAMP_ISSET_ID = 5;
  private static final int __TRIGGERPRICE_ISSET_ID = 6;
  private static final int __TIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ID,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.SLED_CONTRACT_ID,_Fields.PRICE,_Fields.QUANTITY,_Fields.DIRECTION,_Fields.ORDER_TYPE,_Fields.ORDER_WAY,_Fields.ORDER_MODE,_Fields.VALID_TIMESTAMP,_Fields.HEDGE,_Fields.CONTINGENT_CONDITION,_Fields.TRIGGER_PRICE,_Fields.ORDER_PRICE_TYPE,_Fields.TIMESTAMP,_Fields.SAVE_STRING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdDirectionType.class)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderType.class)));
    tmpMap.put(_Fields.ORDER_WAY, new org.apache.thrift.meta_data.FieldMetaData("orderWay", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderWayType.class)));
    tmpMap.put(_Fields.ORDER_MODE, new org.apache.thrift.meta_data.FieldMetaData("orderMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderModeType.class)));
    tmpMap.put(_Fields.VALID_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("validTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HEDGE, new org.apache.thrift.meta_data.FieldMetaData("hedge", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderHedgeType.class)));
    tmpMap.put(_Fields.CONTINGENT_CONDITION, new org.apache.thrift.meta_data.FieldMetaData("contingentCondition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderContingentConditionType.class)));
    tmpMap.put(_Fields.TRIGGER_PRICE, new org.apache.thrift.meta_data.FieldMetaData("triggerPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ORDER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderPriceType.class)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAVE_STRING, new org.apache.thrift.meta_data.FieldMetaData("saveString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdOrderInputField.class, metaDataMap);
  }

  public StdOrderInputField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdOrderInputField(StdOrderInputField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.sledContractId = other.sledContractId;
    this.price = other.price;
    this.quantity = other.quantity;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetOrderWay()) {
      this.orderWay = other.orderWay;
    }
    if (other.isSetOrderMode()) {
      this.orderMode = other.orderMode;
    }
    this.validTimestamp = other.validTimestamp;
    if (other.isSetHedge()) {
      this.hedge = other.hedge;
    }
    if (other.isSetContingentCondition()) {
      this.contingentCondition = other.contingentCondition;
    }
    this.triggerPrice = other.triggerPrice;
    if (other.isSetOrderPriceType()) {
      this.orderPriceType = other.orderPriceType;
    }
    this.timestamp = other.timestamp;
    if (other.isSetSaveString()) {
      this.saveString = other.saveString;
    }
  }

  public StdOrderInputField deepCopy() {
    return new StdOrderInputField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.direction = null;
    this.orderType = null;
    this.orderWay = null;
    this.orderMode = null;
    setValidTimestampIsSet(false);
    this.validTimestamp = 0;
    this.hedge = null;
    this.contingentCondition = null;
    setTriggerPriceIsSet(false);
    this.triggerPrice = 0.0;
    this.orderPriceType = null;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.saveString = null;
  }

  public String getSledId() {
    return this.sledId;
  }

  public StdOrderInputField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public StdOrderInputField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public StdOrderInputField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public StdOrderInputField setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public StdOrderInputField setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getQuantity() {
    return this.quantity;
  }

  public StdOrderInputField setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * 
   * @see StdDirectionType
   */
  public StdDirectionType getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see StdDirectionType
   */
  public StdOrderInputField setDirection(StdDirectionType direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  /**
   * 
   * @see StdOrderType
   */
  public StdOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see StdOrderType
   */
  public StdOrderInputField setOrderType(StdOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 
   * @see StdOrderWayType
   */
  public StdOrderWayType getOrderWay() {
    return this.orderWay;
  }

  /**
   * 
   * @see StdOrderWayType
   */
  public StdOrderInputField setOrderWay(StdOrderWayType orderWay) {
    this.orderWay = orderWay;
    return this;
  }

  public void unsetOrderWay() {
    this.orderWay = null;
  }

  /** Returns true if field orderWay is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderWay() {
    return this.orderWay != null;
  }

  public void setOrderWayIsSet(boolean value) {
    if (!value) {
      this.orderWay = null;
    }
  }

  /**
   * 
   * @see StdOrderModeType
   */
  public StdOrderModeType getOrderMode() {
    return this.orderMode;
  }

  /**
   * 
   * @see StdOrderModeType
   */
  public StdOrderInputField setOrderMode(StdOrderModeType orderMode) {
    this.orderMode = orderMode;
    return this;
  }

  public void unsetOrderMode() {
    this.orderMode = null;
  }

  /** Returns true if field orderMode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMode() {
    return this.orderMode != null;
  }

  public void setOrderModeIsSet(boolean value) {
    if (!value) {
      this.orderMode = null;
    }
  }

  public long getValidTimestamp() {
    return this.validTimestamp;
  }

  public StdOrderInputField setValidTimestamp(long validTimestamp) {
    this.validTimestamp = validTimestamp;
    setValidTimestampIsSet(true);
    return this;
  }

  public void unsetValidTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALIDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field validTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetValidTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __VALIDTIMESTAMP_ISSET_ID);
  }

  public void setValidTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALIDTIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see StdOrderHedgeType
   */
  public StdOrderHedgeType getHedge() {
    return this.hedge;
  }

  /**
   * 
   * @see StdOrderHedgeType
   */
  public StdOrderInputField setHedge(StdOrderHedgeType hedge) {
    this.hedge = hedge;
    return this;
  }

  public void unsetHedge() {
    this.hedge = null;
  }

  /** Returns true if field hedge is set (has been assigned a value) and false otherwise */
  public boolean isSetHedge() {
    return this.hedge != null;
  }

  public void setHedgeIsSet(boolean value) {
    if (!value) {
      this.hedge = null;
    }
  }

  /**
   * 
   * @see StdOrderContingentConditionType
   */
  public StdOrderContingentConditionType getContingentCondition() {
    return this.contingentCondition;
  }

  /**
   * 
   * @see StdOrderContingentConditionType
   */
  public StdOrderInputField setContingentCondition(StdOrderContingentConditionType contingentCondition) {
    this.contingentCondition = contingentCondition;
    return this;
  }

  public void unsetContingentCondition() {
    this.contingentCondition = null;
  }

  /** Returns true if field contingentCondition is set (has been assigned a value) and false otherwise */
  public boolean isSetContingentCondition() {
    return this.contingentCondition != null;
  }

  public void setContingentConditionIsSet(boolean value) {
    if (!value) {
      this.contingentCondition = null;
    }
  }

  public double getTriggerPrice() {
    return this.triggerPrice;
  }

  public StdOrderInputField setTriggerPrice(double triggerPrice) {
    this.triggerPrice = triggerPrice;
    setTriggerPriceIsSet(true);
    return this;
  }

  public void unsetTriggerPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  /** Returns true if field triggerPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID);
  }

  public void setTriggerPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRIGGERPRICE_ISSET_ID, value);
  }

  /**
   * 
   * @see StdOrderPriceType
   */
  public StdOrderPriceType getOrderPriceType() {
    return this.orderPriceType;
  }

  /**
   * 
   * @see StdOrderPriceType
   */
  public StdOrderInputField setOrderPriceType(StdOrderPriceType orderPriceType) {
    this.orderPriceType = orderPriceType;
    return this;
  }

  public void unsetOrderPriceType() {
    this.orderPriceType = null;
  }

  /** Returns true if field orderPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderPriceType() {
    return this.orderPriceType != null;
  }

  public void setOrderPriceTypeIsSet(boolean value) {
    if (!value) {
      this.orderPriceType = null;
    }
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public StdOrderInputField setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public String getSaveString() {
    return this.saveString;
  }

  public StdOrderInputField setSaveString(String saveString) {
    this.saveString = saveString;
    return this;
  }

  public void unsetSaveString() {
    this.saveString = null;
  }

  /** Returns true if field saveString is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveString() {
    return this.saveString != null;
  }

  public void setSaveStringIsSet(boolean value) {
    if (!value) {
      this.saveString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((StdDirectionType)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((StdOrderType)value);
      }
      break;

    case ORDER_WAY:
      if (value == null) {
        unsetOrderWay();
      } else {
        setOrderWay((StdOrderWayType)value);
      }
      break;

    case ORDER_MODE:
      if (value == null) {
        unsetOrderMode();
      } else {
        setOrderMode((StdOrderModeType)value);
      }
      break;

    case VALID_TIMESTAMP:
      if (value == null) {
        unsetValidTimestamp();
      } else {
        setValidTimestamp((Long)value);
      }
      break;

    case HEDGE:
      if (value == null) {
        unsetHedge();
      } else {
        setHedge((StdOrderHedgeType)value);
      }
      break;

    case CONTINGENT_CONDITION:
      if (value == null) {
        unsetContingentCondition();
      } else {
        setContingentCondition((StdOrderContingentConditionType)value);
      }
      break;

    case TRIGGER_PRICE:
      if (value == null) {
        unsetTriggerPrice();
      } else {
        setTriggerPrice((Double)value);
      }
      break;

    case ORDER_PRICE_TYPE:
      if (value == null) {
        unsetOrderPriceType();
      } else {
        setOrderPriceType((StdOrderPriceType)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case SAVE_STRING:
      if (value == null) {
        unsetSaveString();
      } else {
        setSaveString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    case PRICE:
      return Double.valueOf(getPrice());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case DIRECTION:
      return getDirection();

    case ORDER_TYPE:
      return getOrderType();

    case ORDER_WAY:
      return getOrderWay();

    case ORDER_MODE:
      return getOrderMode();

    case VALID_TIMESTAMP:
      return Long.valueOf(getValidTimestamp());

    case HEDGE:
      return getHedge();

    case CONTINGENT_CONDITION:
      return getContingentCondition();

    case TRIGGER_PRICE:
      return Double.valueOf(getTriggerPrice());

    case ORDER_PRICE_TYPE:
      return getOrderPriceType();

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case SAVE_STRING:
      return getSaveString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case PRICE:
      return isSetPrice();
    case QUANTITY:
      return isSetQuantity();
    case DIRECTION:
      return isSetDirection();
    case ORDER_TYPE:
      return isSetOrderType();
    case ORDER_WAY:
      return isSetOrderWay();
    case ORDER_MODE:
      return isSetOrderMode();
    case VALID_TIMESTAMP:
      return isSetValidTimestamp();
    case HEDGE:
      return isSetHedge();
    case CONTINGENT_CONDITION:
      return isSetContingentCondition();
    case TRIGGER_PRICE:
      return isSetTriggerPrice();
    case ORDER_PRICE_TYPE:
      return isSetOrderPriceType();
    case TIMESTAMP:
      return isSetTimestamp();
    case SAVE_STRING:
      return isSetSaveString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdOrderInputField)
      return this.equals((StdOrderInputField)that);
    return false;
  }

  public boolean equals(StdOrderInputField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_orderWay = true && this.isSetOrderWay();
    boolean that_present_orderWay = true && that.isSetOrderWay();
    if (this_present_orderWay || that_present_orderWay) {
      if (!(this_present_orderWay && that_present_orderWay))
        return false;
      if (!this.orderWay.equals(that.orderWay))
        return false;
    }

    boolean this_present_orderMode = true && this.isSetOrderMode();
    boolean that_present_orderMode = true && that.isSetOrderMode();
    if (this_present_orderMode || that_present_orderMode) {
      if (!(this_present_orderMode && that_present_orderMode))
        return false;
      if (!this.orderMode.equals(that.orderMode))
        return false;
    }

    boolean this_present_validTimestamp = true && this.isSetValidTimestamp();
    boolean that_present_validTimestamp = true && that.isSetValidTimestamp();
    if (this_present_validTimestamp || that_present_validTimestamp) {
      if (!(this_present_validTimestamp && that_present_validTimestamp))
        return false;
      if (this.validTimestamp != that.validTimestamp)
        return false;
    }

    boolean this_present_hedge = true && this.isSetHedge();
    boolean that_present_hedge = true && that.isSetHedge();
    if (this_present_hedge || that_present_hedge) {
      if (!(this_present_hedge && that_present_hedge))
        return false;
      if (!this.hedge.equals(that.hedge))
        return false;
    }

    boolean this_present_contingentCondition = true && this.isSetContingentCondition();
    boolean that_present_contingentCondition = true && that.isSetContingentCondition();
    if (this_present_contingentCondition || that_present_contingentCondition) {
      if (!(this_present_contingentCondition && that_present_contingentCondition))
        return false;
      if (!this.contingentCondition.equals(that.contingentCondition))
        return false;
    }

    boolean this_present_triggerPrice = true && this.isSetTriggerPrice();
    boolean that_present_triggerPrice = true && that.isSetTriggerPrice();
    if (this_present_triggerPrice || that_present_triggerPrice) {
      if (!(this_present_triggerPrice && that_present_triggerPrice))
        return false;
      if (this.triggerPrice != that.triggerPrice)
        return false;
    }

    boolean this_present_orderPriceType = true && this.isSetOrderPriceType();
    boolean that_present_orderPriceType = true && that.isSetOrderPriceType();
    if (this_present_orderPriceType || that_present_orderPriceType) {
      if (!(this_present_orderPriceType && that_present_orderPriceType))
        return false;
      if (!this.orderPriceType.equals(that.orderPriceType))
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_saveString = true && this.isSetSaveString();
    boolean that_present_saveString = true && that.isSetSaveString();
    if (this_present_saveString || that_present_saveString) {
      if (!(this_present_saveString && that_present_saveString))
        return false;
      if (!this.saveString.equals(that.saveString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdOrderInputField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderWay()).compareTo(other.isSetOrderWay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderWay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderWay, other.orderWay);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMode()).compareTo(other.isSetOrderMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMode, other.orderMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValidTimestamp()).compareTo(other.isSetValidTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validTimestamp, other.validTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHedge()).compareTo(other.isSetHedge());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHedge()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hedge, other.hedge);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContingentCondition()).compareTo(other.isSetContingentCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContingentCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contingentCondition, other.contingentCondition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerPrice()).compareTo(other.isSetTriggerPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerPrice, other.triggerPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderPriceType()).compareTo(other.isSetOrderPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderPriceType, other.orderPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveString()).compareTo(other.isSetSaveString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveString, other.saveString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdOrderInputField(");
    boolean first = true;

    if (isSetSledId()) {
      sb.append("sledId:");
      if (this.sledId == null) {
        sb.append("null");
      } else {
        sb.append(this.sledId);
      }
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetOrderWay()) {
      if (!first) sb.append(", ");
      sb.append("orderWay:");
      if (this.orderWay == null) {
        sb.append("null");
      } else {
        sb.append(this.orderWay);
      }
      first = false;
    }
    if (isSetOrderMode()) {
      if (!first) sb.append(", ");
      sb.append("orderMode:");
      if (this.orderMode == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMode);
      }
      first = false;
    }
    if (isSetValidTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("validTimestamp:");
      sb.append(this.validTimestamp);
      first = false;
    }
    if (isSetHedge()) {
      if (!first) sb.append(", ");
      sb.append("hedge:");
      if (this.hedge == null) {
        sb.append("null");
      } else {
        sb.append(this.hedge);
      }
      first = false;
    }
    if (isSetContingentCondition()) {
      if (!first) sb.append(", ");
      sb.append("contingentCondition:");
      if (this.contingentCondition == null) {
        sb.append("null");
      } else {
        sb.append(this.contingentCondition);
      }
      first = false;
    }
    if (isSetTriggerPrice()) {
      if (!first) sb.append(", ");
      sb.append("triggerPrice:");
      sb.append(this.triggerPrice);
      first = false;
    }
    if (isSetOrderPriceType()) {
      if (!first) sb.append(", ");
      sb.append("orderPriceType:");
      if (this.orderPriceType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderPriceType);
      }
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetSaveString()) {
      if (!first) sb.append(", ");
      sb.append("saveString:");
      if (this.saveString == null) {
        sb.append("null");
      } else {
        sb.append(this.saveString);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdOrderInputFieldStandardSchemeFactory implements SchemeFactory {
    public StdOrderInputFieldStandardScheme getScheme() {
      return new StdOrderInputFieldStandardScheme();
    }
  }

  private static class StdOrderInputFieldStandardScheme extends StandardScheme<StdOrderInputField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdOrderInputField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = StdDirectionType.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = StdOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORDER_WAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderWay = StdOrderWayType.findByValue(iprot.readI32());
              struct.setOrderWayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ORDER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderMode = StdOrderModeType.findByValue(iprot.readI32());
              struct.setOrderModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VALID_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validTimestamp = iprot.readI64();
              struct.setValidTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // HEDGE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hedge = StdOrderHedgeType.findByValue(iprot.readI32());
              struct.setHedgeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CONTINGENT_CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contingentCondition = StdOrderContingentConditionType.findByValue(iprot.readI32());
              struct.setContingentConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TRIGGER_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.triggerPrice = iprot.readDouble();
              struct.setTriggerPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // ORDER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderPriceType = StdOrderPriceType.findByValue(iprot.readI32());
              struct.setOrderPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // SAVE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveString = iprot.readString();
              struct.setSaveStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdOrderInputField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        if (struct.isSetSledId()) {
          oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
          oprot.writeString(struct.sledId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderWay != null) {
        if (struct.isSetOrderWay()) {
          oprot.writeFieldBegin(ORDER_WAY_FIELD_DESC);
          oprot.writeI32(struct.orderWay.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderMode != null) {
        if (struct.isSetOrderMode()) {
          oprot.writeFieldBegin(ORDER_MODE_FIELD_DESC);
          oprot.writeI32(struct.orderMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetValidTimestamp()) {
        oprot.writeFieldBegin(VALID_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.validTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.hedge != null) {
        if (struct.isSetHedge()) {
          oprot.writeFieldBegin(HEDGE_FIELD_DESC);
          oprot.writeI32(struct.hedge.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.contingentCondition != null) {
        if (struct.isSetContingentCondition()) {
          oprot.writeFieldBegin(CONTINGENT_CONDITION_FIELD_DESC);
          oprot.writeI32(struct.contingentCondition.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeFieldBegin(TRIGGER_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.triggerPrice);
        oprot.writeFieldEnd();
      }
      if (struct.orderPriceType != null) {
        if (struct.isSetOrderPriceType()) {
          oprot.writeFieldBegin(ORDER_PRICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderPriceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.saveString != null) {
        if (struct.isSetSaveString()) {
          oprot.writeFieldBegin(SAVE_STRING_FIELD_DESC);
          oprot.writeString(struct.saveString);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdOrderInputFieldTupleSchemeFactory implements SchemeFactory {
    public StdOrderInputFieldTupleScheme getScheme() {
      return new StdOrderInputFieldTupleScheme();
    }
  }

  private static class StdOrderInputFieldTupleScheme extends TupleScheme<StdOrderInputField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdOrderInputField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledId()) {
        optionals.set(0);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetQuantity()) {
        optionals.set(5);
      }
      if (struct.isSetDirection()) {
        optionals.set(6);
      }
      if (struct.isSetOrderType()) {
        optionals.set(7);
      }
      if (struct.isSetOrderWay()) {
        optionals.set(8);
      }
      if (struct.isSetOrderMode()) {
        optionals.set(9);
      }
      if (struct.isSetValidTimestamp()) {
        optionals.set(10);
      }
      if (struct.isSetHedge()) {
        optionals.set(11);
      }
      if (struct.isSetContingentCondition()) {
        optionals.set(12);
      }
      if (struct.isSetTriggerPrice()) {
        optionals.set(13);
      }
      if (struct.isSetOrderPriceType()) {
        optionals.set(14);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(15);
      }
      if (struct.isSetSaveString()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSledId()) {
        oprot.writeString(struct.sledId);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetOrderWay()) {
        oprot.writeI32(struct.orderWay.getValue());
      }
      if (struct.isSetOrderMode()) {
        oprot.writeI32(struct.orderMode.getValue());
      }
      if (struct.isSetValidTimestamp()) {
        oprot.writeI64(struct.validTimestamp);
      }
      if (struct.isSetHedge()) {
        oprot.writeI32(struct.hedge.getValue());
      }
      if (struct.isSetContingentCondition()) {
        oprot.writeI32(struct.contingentCondition.getValue());
      }
      if (struct.isSetTriggerPrice()) {
        oprot.writeDouble(struct.triggerPrice);
      }
      if (struct.isSetOrderPriceType()) {
        oprot.writeI32(struct.orderPriceType.getValue());
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetSaveString()) {
        oprot.writeString(struct.saveString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdOrderInputField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.sledId = iprot.readString();
        struct.setSledIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.direction = StdDirectionType.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderType = StdOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.orderWay = StdOrderWayType.findByValue(iprot.readI32());
        struct.setOrderWayIsSet(true);
      }
      if (incoming.get(9)) {
        struct.orderMode = StdOrderModeType.findByValue(iprot.readI32());
        struct.setOrderModeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.validTimestamp = iprot.readI64();
        struct.setValidTimestampIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hedge = StdOrderHedgeType.findByValue(iprot.readI32());
        struct.setHedgeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.contingentCondition = StdOrderContingentConditionType.findByValue(iprot.readI32());
        struct.setContingentConditionIsSet(true);
      }
      if (incoming.get(13)) {
        struct.triggerPrice = iprot.readDouble();
        struct.setTriggerPriceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.orderPriceType = StdOrderPriceType.findByValue(iprot.readI32());
        struct.setOrderPriceTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(16)) {
        struct.saveString = iprot.readString();
        struct.setSaveStringIsSet(true);
      }
    }
  }

}

