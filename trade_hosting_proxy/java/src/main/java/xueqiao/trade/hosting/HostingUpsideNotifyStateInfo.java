/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingUpsideNotifyStateInfo implements org.apache.thrift.TBase<HostingUpsideNotifyStateInfo, HostingUpsideNotifyStateInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingUpsideNotifyStateInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingUpsideNotifyStateInfo");

  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEAL_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("dealInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField VOLUME_TRADED_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeTraded", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField VOLUME_RESTING_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeResting", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField TRADE_AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAveragePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_USEFUL_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusUsefulMsg", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingUpsideNotifyStateInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingUpsideNotifyStateInfoTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingUpsideNotifyStateType
   */
  public HostingUpsideNotifyStateType state; // optional
  public HostingExecOrderDealInfo dealInfo; // optional
  public int volumeTraded; // optional
  public int volumeResting; // optional
  public double tradeAveragePrice; // optional
  public String statusUsefulMsg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingUpsideNotifyStateType
     */
    STATE((short)1, "state"),
    DEAL_INFO((short)2, "dealInfo"),
    VOLUME_TRADED((short)6, "volumeTraded"),
    VOLUME_RESTING((short)7, "volumeResting"),
    TRADE_AVERAGE_PRICE((short)8, "tradeAveragePrice"),
    STATUS_USEFUL_MSG((short)9, "statusUsefulMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE
          return STATE;
        case 2: // DEAL_INFO
          return DEAL_INFO;
        case 6: // VOLUME_TRADED
          return VOLUME_TRADED;
        case 7: // VOLUME_RESTING
          return VOLUME_RESTING;
        case 8: // TRADE_AVERAGE_PRICE
          return TRADE_AVERAGE_PRICE;
        case 9: // STATUS_USEFUL_MSG
          return STATUS_USEFUL_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VOLUMETRADED_ISSET_ID = 0;
  private static final int __VOLUMERESTING_ISSET_ID = 1;
  private static final int __TRADEAVERAGEPRICE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STATE,_Fields.DEAL_INFO,_Fields.VOLUME_TRADED,_Fields.VOLUME_RESTING,_Fields.TRADE_AVERAGE_PRICE,_Fields.STATUS_USEFUL_MSG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingUpsideNotifyStateType.class)));
    tmpMap.put(_Fields.DEAL_INFO, new org.apache.thrift.meta_data.FieldMetaData("dealInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderDealInfo.class)));
    tmpMap.put(_Fields.VOLUME_TRADED, new org.apache.thrift.meta_data.FieldMetaData("volumeTraded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VOLUME_RESTING, new org.apache.thrift.meta_data.FieldMetaData("volumeResting", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradeAveragePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STATUS_USEFUL_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusUsefulMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingUpsideNotifyStateInfo.class, metaDataMap);
  }

  public HostingUpsideNotifyStateInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingUpsideNotifyStateInfo(HostingUpsideNotifyStateInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetDealInfo()) {
      this.dealInfo = new HostingExecOrderDealInfo(other.dealInfo);
    }
    this.volumeTraded = other.volumeTraded;
    this.volumeResting = other.volumeResting;
    this.tradeAveragePrice = other.tradeAveragePrice;
    if (other.isSetStatusUsefulMsg()) {
      this.statusUsefulMsg = other.statusUsefulMsg;
    }
  }

  public HostingUpsideNotifyStateInfo deepCopy() {
    return new HostingUpsideNotifyStateInfo(this);
  }

  @Override
  public void clear() {
    this.state = null;
    this.dealInfo = null;
    setVolumeTradedIsSet(false);
    this.volumeTraded = 0;
    setVolumeRestingIsSet(false);
    this.volumeResting = 0;
    setTradeAveragePriceIsSet(false);
    this.tradeAveragePrice = 0.0;
    this.statusUsefulMsg = null;
  }

  /**
   * 
   * @see HostingUpsideNotifyStateType
   */
  public HostingUpsideNotifyStateType getState() {
    return this.state;
  }

  /**
   * 
   * @see HostingUpsideNotifyStateType
   */
  public HostingUpsideNotifyStateInfo setState(HostingUpsideNotifyStateType state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public HostingExecOrderDealInfo getDealInfo() {
    return this.dealInfo;
  }

  public HostingUpsideNotifyStateInfo setDealInfo(HostingExecOrderDealInfo dealInfo) {
    this.dealInfo = dealInfo;
    return this;
  }

  public void unsetDealInfo() {
    this.dealInfo = null;
  }

  /** Returns true if field dealInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetDealInfo() {
    return this.dealInfo != null;
  }

  public void setDealInfoIsSet(boolean value) {
    if (!value) {
      this.dealInfo = null;
    }
  }

  public int getVolumeTraded() {
    return this.volumeTraded;
  }

  public HostingUpsideNotifyStateInfo setVolumeTraded(int volumeTraded) {
    this.volumeTraded = volumeTraded;
    setVolumeTradedIsSet(true);
    return this;
  }

  public void unsetVolumeTraded() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  /** Returns true if field volumeTraded is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeTraded() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID);
  }

  public void setVolumeTradedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMETRADED_ISSET_ID, value);
  }

  public int getVolumeResting() {
    return this.volumeResting;
  }

  public HostingUpsideNotifyStateInfo setVolumeResting(int volumeResting) {
    this.volumeResting = volumeResting;
    setVolumeRestingIsSet(true);
    return this;
  }

  public void unsetVolumeResting() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMERESTING_ISSET_ID);
  }

  /** Returns true if field volumeResting is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumeResting() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMERESTING_ISSET_ID);
  }

  public void setVolumeRestingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMERESTING_ISSET_ID, value);
  }

  public double getTradeAveragePrice() {
    return this.tradeAveragePrice;
  }

  public HostingUpsideNotifyStateInfo setTradeAveragePrice(double tradeAveragePrice) {
    this.tradeAveragePrice = tradeAveragePrice;
    setTradeAveragePriceIsSet(true);
    return this;
  }

  public void unsetTradeAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEAVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field tradeAveragePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEAVERAGEPRICE_ISSET_ID);
  }

  public void setTradeAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEAVERAGEPRICE_ISSET_ID, value);
  }

  public String getStatusUsefulMsg() {
    return this.statusUsefulMsg;
  }

  public HostingUpsideNotifyStateInfo setStatusUsefulMsg(String statusUsefulMsg) {
    this.statusUsefulMsg = statusUsefulMsg;
    return this;
  }

  public void unsetStatusUsefulMsg() {
    this.statusUsefulMsg = null;
  }

  /** Returns true if field statusUsefulMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusUsefulMsg() {
    return this.statusUsefulMsg != null;
  }

  public void setStatusUsefulMsgIsSet(boolean value) {
    if (!value) {
      this.statusUsefulMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((HostingUpsideNotifyStateType)value);
      }
      break;

    case DEAL_INFO:
      if (value == null) {
        unsetDealInfo();
      } else {
        setDealInfo((HostingExecOrderDealInfo)value);
      }
      break;

    case VOLUME_TRADED:
      if (value == null) {
        unsetVolumeTraded();
      } else {
        setVolumeTraded((Integer)value);
      }
      break;

    case VOLUME_RESTING:
      if (value == null) {
        unsetVolumeResting();
      } else {
        setVolumeResting((Integer)value);
      }
      break;

    case TRADE_AVERAGE_PRICE:
      if (value == null) {
        unsetTradeAveragePrice();
      } else {
        setTradeAveragePrice((Double)value);
      }
      break;

    case STATUS_USEFUL_MSG:
      if (value == null) {
        unsetStatusUsefulMsg();
      } else {
        setStatusUsefulMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE:
      return getState();

    case DEAL_INFO:
      return getDealInfo();

    case VOLUME_TRADED:
      return Integer.valueOf(getVolumeTraded());

    case VOLUME_RESTING:
      return Integer.valueOf(getVolumeResting());

    case TRADE_AVERAGE_PRICE:
      return Double.valueOf(getTradeAveragePrice());

    case STATUS_USEFUL_MSG:
      return getStatusUsefulMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE:
      return isSetState();
    case DEAL_INFO:
      return isSetDealInfo();
    case VOLUME_TRADED:
      return isSetVolumeTraded();
    case VOLUME_RESTING:
      return isSetVolumeResting();
    case TRADE_AVERAGE_PRICE:
      return isSetTradeAveragePrice();
    case STATUS_USEFUL_MSG:
      return isSetStatusUsefulMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingUpsideNotifyStateInfo)
      return this.equals((HostingUpsideNotifyStateInfo)that);
    return false;
  }

  public boolean equals(HostingUpsideNotifyStateInfo that) {
    if (that == null)
      return false;

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_dealInfo = true && this.isSetDealInfo();
    boolean that_present_dealInfo = true && that.isSetDealInfo();
    if (this_present_dealInfo || that_present_dealInfo) {
      if (!(this_present_dealInfo && that_present_dealInfo))
        return false;
      if (!this.dealInfo.equals(that.dealInfo))
        return false;
    }

    boolean this_present_volumeTraded = true && this.isSetVolumeTraded();
    boolean that_present_volumeTraded = true && that.isSetVolumeTraded();
    if (this_present_volumeTraded || that_present_volumeTraded) {
      if (!(this_present_volumeTraded && that_present_volumeTraded))
        return false;
      if (this.volumeTraded != that.volumeTraded)
        return false;
    }

    boolean this_present_volumeResting = true && this.isSetVolumeResting();
    boolean that_present_volumeResting = true && that.isSetVolumeResting();
    if (this_present_volumeResting || that_present_volumeResting) {
      if (!(this_present_volumeResting && that_present_volumeResting))
        return false;
      if (this.volumeResting != that.volumeResting)
        return false;
    }

    boolean this_present_tradeAveragePrice = true && this.isSetTradeAveragePrice();
    boolean that_present_tradeAveragePrice = true && that.isSetTradeAveragePrice();
    if (this_present_tradeAveragePrice || that_present_tradeAveragePrice) {
      if (!(this_present_tradeAveragePrice && that_present_tradeAveragePrice))
        return false;
      if (this.tradeAveragePrice != that.tradeAveragePrice)
        return false;
    }

    boolean this_present_statusUsefulMsg = true && this.isSetStatusUsefulMsg();
    boolean that_present_statusUsefulMsg = true && that.isSetStatusUsefulMsg();
    if (this_present_statusUsefulMsg || that_present_statusUsefulMsg) {
      if (!(this_present_statusUsefulMsg && that_present_statusUsefulMsg))
        return false;
      if (!this.statusUsefulMsg.equals(that.statusUsefulMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingUpsideNotifyStateInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDealInfo()).compareTo(other.isSetDealInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDealInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dealInfo, other.dealInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeTraded()).compareTo(other.isSetVolumeTraded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeTraded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeTraded, other.volumeTraded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumeResting()).compareTo(other.isSetVolumeResting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumeResting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeResting, other.volumeResting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAveragePrice()).compareTo(other.isSetTradeAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAveragePrice, other.tradeAveragePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusUsefulMsg()).compareTo(other.isSetStatusUsefulMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusUsefulMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusUsefulMsg, other.statusUsefulMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingUpsideNotifyStateInfo(");
    boolean first = true;

    if (isSetState()) {
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetDealInfo()) {
      if (!first) sb.append(", ");
      sb.append("dealInfo:");
      if (this.dealInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.dealInfo);
      }
      first = false;
    }
    if (isSetVolumeTraded()) {
      if (!first) sb.append(", ");
      sb.append("volumeTraded:");
      sb.append(this.volumeTraded);
      first = false;
    }
    if (isSetVolumeResting()) {
      if (!first) sb.append(", ");
      sb.append("volumeResting:");
      sb.append(this.volumeResting);
      first = false;
    }
    if (isSetTradeAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradeAveragePrice:");
      sb.append(this.tradeAveragePrice);
      first = false;
    }
    if (isSetStatusUsefulMsg()) {
      if (!first) sb.append(", ");
      sb.append("statusUsefulMsg:");
      if (this.statusUsefulMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.statusUsefulMsg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dealInfo != null) {
      dealInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingUpsideNotifyStateInfoStandardSchemeFactory implements SchemeFactory {
    public HostingUpsideNotifyStateInfoStandardScheme getScheme() {
      return new HostingUpsideNotifyStateInfoStandardScheme();
    }
  }

  private static class HostingUpsideNotifyStateInfoStandardScheme extends StandardScheme<HostingUpsideNotifyStateInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingUpsideNotifyStateInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = HostingUpsideNotifyStateType.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEAL_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dealInfo = new HostingExecOrderDealInfo();
              struct.dealInfo.read(iprot);
              struct.setDealInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VOLUME_TRADED
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeTraded = iprot.readI32();
              struct.setVolumeTradedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VOLUME_RESTING
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volumeResting = iprot.readI32();
              struct.setVolumeRestingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRADE_AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradeAveragePrice = iprot.readDouble();
              struct.setTradeAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS_USEFUL_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusUsefulMsg = iprot.readString();
              struct.setStatusUsefulMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingUpsideNotifyStateInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.dealInfo != null) {
        if (struct.isSetDealInfo()) {
          oprot.writeFieldBegin(DEAL_INFO_FIELD_DESC);
          struct.dealInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolumeTraded()) {
        oprot.writeFieldBegin(VOLUME_TRADED_FIELD_DESC);
        oprot.writeI32(struct.volumeTraded);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumeResting()) {
        oprot.writeFieldBegin(VOLUME_RESTING_FIELD_DESC);
        oprot.writeI32(struct.volumeResting);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeAveragePrice()) {
        oprot.writeFieldBegin(TRADE_AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradeAveragePrice);
        oprot.writeFieldEnd();
      }
      if (struct.statusUsefulMsg != null) {
        if (struct.isSetStatusUsefulMsg()) {
          oprot.writeFieldBegin(STATUS_USEFUL_MSG_FIELD_DESC);
          oprot.writeString(struct.statusUsefulMsg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingUpsideNotifyStateInfoTupleSchemeFactory implements SchemeFactory {
    public HostingUpsideNotifyStateInfoTupleScheme getScheme() {
      return new HostingUpsideNotifyStateInfoTupleScheme();
    }
  }

  private static class HostingUpsideNotifyStateInfoTupleScheme extends TupleScheme<HostingUpsideNotifyStateInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingUpsideNotifyStateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetState()) {
        optionals.set(0);
      }
      if (struct.isSetDealInfo()) {
        optionals.set(1);
      }
      if (struct.isSetVolumeTraded()) {
        optionals.set(2);
      }
      if (struct.isSetVolumeResting()) {
        optionals.set(3);
      }
      if (struct.isSetTradeAveragePrice()) {
        optionals.set(4);
      }
      if (struct.isSetStatusUsefulMsg()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetDealInfo()) {
        struct.dealInfo.write(oprot);
      }
      if (struct.isSetVolumeTraded()) {
        oprot.writeI32(struct.volumeTraded);
      }
      if (struct.isSetVolumeResting()) {
        oprot.writeI32(struct.volumeResting);
      }
      if (struct.isSetTradeAveragePrice()) {
        oprot.writeDouble(struct.tradeAveragePrice);
      }
      if (struct.isSetStatusUsefulMsg()) {
        oprot.writeString(struct.statusUsefulMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingUpsideNotifyStateInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.state = HostingUpsideNotifyStateType.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dealInfo = new HostingExecOrderDealInfo();
        struct.dealInfo.read(iprot);
        struct.setDealInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.volumeTraded = iprot.readI32();
        struct.setVolumeTradedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.volumeResting = iprot.readI32();
        struct.setVolumeRestingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeAveragePrice = iprot.readDouble();
        struct.setTradeAveragePriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.statusUsefulMsg = iprot.readString();
        struct.setStatusUsefulMsgIsSet(true);
      }
    }
  }

}

