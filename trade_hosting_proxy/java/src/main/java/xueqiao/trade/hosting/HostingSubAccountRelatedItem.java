/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机子账户关联条目
 */
public class HostingSubAccountRelatedItem implements org.apache.thrift.TBase<HostingSubAccountRelatedItem, HostingSubAccountRelatedItem._Fields>, java.io.Serializable, Cloneable, Comparable<HostingSubAccountRelatedItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingSubAccountRelatedItem");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RELATED_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTimestamp", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SUB_USER_LOGIN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserLoginName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_USER_NICK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserNickName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingSubAccountRelatedItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingSubAccountRelatedItemTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public int subUserId; // optional
  public int relatedTimestamp; // optional
  public String subAccountName; // optional
  public String subUserLoginName; // optional
  public String subUserNickName; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    SUB_USER_ID((short)2, "subUserId"),
    RELATED_TIMESTAMP((short)3, "relatedTimestamp"),
    SUB_ACCOUNT_NAME((short)4, "subAccountName"),
    SUB_USER_LOGIN_NAME((short)5, "subUserLoginName"),
    SUB_USER_NICK_NAME((short)6, "subUserNickName"),
    LASTMODIFY_TIMESTAMP((short)7, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // SUB_USER_ID
          return SUB_USER_ID;
        case 3: // RELATED_TIMESTAMP
          return RELATED_TIMESTAMP;
        case 4: // SUB_ACCOUNT_NAME
          return SUB_ACCOUNT_NAME;
        case 5: // SUB_USER_LOGIN_NAME
          return SUB_USER_LOGIN_NAME;
        case 6: // SUB_USER_NICK_NAME
          return SUB_USER_NICK_NAME;
        case 7: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __SUBUSERID_ISSET_ID = 1;
  private static final int __RELATEDTIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.SUB_USER_ID,_Fields.RELATED_TIMESTAMP,_Fields.SUB_ACCOUNT_NAME,_Fields.SUB_USER_LOGIN_NAME,_Fields.SUB_USER_NICK_NAME,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RELATED_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("relatedTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("subAccountName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_USER_LOGIN_NAME, new org.apache.thrift.meta_data.FieldMetaData("subUserLoginName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_USER_NICK_NAME, new org.apache.thrift.meta_data.FieldMetaData("subUserNickName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingSubAccountRelatedItem.class, metaDataMap);
  }

  public HostingSubAccountRelatedItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingSubAccountRelatedItem(HostingSubAccountRelatedItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    this.subUserId = other.subUserId;
    this.relatedTimestamp = other.relatedTimestamp;
    if (other.isSetSubAccountName()) {
      this.subAccountName = other.subAccountName;
    }
    if (other.isSetSubUserLoginName()) {
      this.subUserLoginName = other.subUserLoginName;
    }
    if (other.isSetSubUserNickName()) {
      this.subUserNickName = other.subUserNickName;
    }
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingSubAccountRelatedItem deepCopy() {
    return new HostingSubAccountRelatedItem(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setRelatedTimestampIsSet(false);
    this.relatedTimestamp = 0;
    this.subAccountName = null;
    this.subUserLoginName = null;
    this.subUserNickName = null;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingSubAccountRelatedItem setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingSubAccountRelatedItem setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public int getRelatedTimestamp() {
    return this.relatedTimestamp;
  }

  public HostingSubAccountRelatedItem setRelatedTimestamp(int relatedTimestamp) {
    this.relatedTimestamp = relatedTimestamp;
    setRelatedTimestampIsSet(true);
    return this;
  }

  public void unsetRelatedTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field relatedTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDTIMESTAMP_ISSET_ID);
  }

  public void setRelatedTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDTIMESTAMP_ISSET_ID, value);
  }

  public String getSubAccountName() {
    return this.subAccountName;
  }

  public HostingSubAccountRelatedItem setSubAccountName(String subAccountName) {
    this.subAccountName = subAccountName;
    return this;
  }

  public void unsetSubAccountName() {
    this.subAccountName = null;
  }

  /** Returns true if field subAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountName() {
    return this.subAccountName != null;
  }

  public void setSubAccountNameIsSet(boolean value) {
    if (!value) {
      this.subAccountName = null;
    }
  }

  public String getSubUserLoginName() {
    return this.subUserLoginName;
  }

  public HostingSubAccountRelatedItem setSubUserLoginName(String subUserLoginName) {
    this.subUserLoginName = subUserLoginName;
    return this;
  }

  public void unsetSubUserLoginName() {
    this.subUserLoginName = null;
  }

  /** Returns true if field subUserLoginName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserLoginName() {
    return this.subUserLoginName != null;
  }

  public void setSubUserLoginNameIsSet(boolean value) {
    if (!value) {
      this.subUserLoginName = null;
    }
  }

  public String getSubUserNickName() {
    return this.subUserNickName;
  }

  public HostingSubAccountRelatedItem setSubUserNickName(String subUserNickName) {
    this.subUserNickName = subUserNickName;
    return this;
  }

  public void unsetSubUserNickName() {
    this.subUserNickName = null;
  }

  /** Returns true if field subUserNickName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserNickName() {
    return this.subUserNickName != null;
  }

  public void setSubUserNickNameIsSet(boolean value) {
    if (!value) {
      this.subUserNickName = null;
    }
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingSubAccountRelatedItem setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case RELATED_TIMESTAMP:
      if (value == null) {
        unsetRelatedTimestamp();
      } else {
        setRelatedTimestamp((Integer)value);
      }
      break;

    case SUB_ACCOUNT_NAME:
      if (value == null) {
        unsetSubAccountName();
      } else {
        setSubAccountName((String)value);
      }
      break;

    case SUB_USER_LOGIN_NAME:
      if (value == null) {
        unsetSubUserLoginName();
      } else {
        setSubUserLoginName((String)value);
      }
      break;

    case SUB_USER_NICK_NAME:
      if (value == null) {
        unsetSubUserNickName();
      } else {
        setSubUserNickName((String)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case RELATED_TIMESTAMP:
      return Integer.valueOf(getRelatedTimestamp());

    case SUB_ACCOUNT_NAME:
      return getSubAccountName();

    case SUB_USER_LOGIN_NAME:
      return getSubUserLoginName();

    case SUB_USER_NICK_NAME:
      return getSubUserNickName();

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case RELATED_TIMESTAMP:
      return isSetRelatedTimestamp();
    case SUB_ACCOUNT_NAME:
      return isSetSubAccountName();
    case SUB_USER_LOGIN_NAME:
      return isSetSubUserLoginName();
    case SUB_USER_NICK_NAME:
      return isSetSubUserNickName();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingSubAccountRelatedItem)
      return this.equals((HostingSubAccountRelatedItem)that);
    return false;
  }

  public boolean equals(HostingSubAccountRelatedItem that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_relatedTimestamp = true && this.isSetRelatedTimestamp();
    boolean that_present_relatedTimestamp = true && that.isSetRelatedTimestamp();
    if (this_present_relatedTimestamp || that_present_relatedTimestamp) {
      if (!(this_present_relatedTimestamp && that_present_relatedTimestamp))
        return false;
      if (this.relatedTimestamp != that.relatedTimestamp)
        return false;
    }

    boolean this_present_subAccountName = true && this.isSetSubAccountName();
    boolean that_present_subAccountName = true && that.isSetSubAccountName();
    if (this_present_subAccountName || that_present_subAccountName) {
      if (!(this_present_subAccountName && that_present_subAccountName))
        return false;
      if (!this.subAccountName.equals(that.subAccountName))
        return false;
    }

    boolean this_present_subUserLoginName = true && this.isSetSubUserLoginName();
    boolean that_present_subUserLoginName = true && that.isSetSubUserLoginName();
    if (this_present_subUserLoginName || that_present_subUserLoginName) {
      if (!(this_present_subUserLoginName && that_present_subUserLoginName))
        return false;
      if (!this.subUserLoginName.equals(that.subUserLoginName))
        return false;
    }

    boolean this_present_subUserNickName = true && this.isSetSubUserNickName();
    boolean that_present_subUserNickName = true && that.isSetSubUserNickName();
    if (this_present_subUserNickName || that_present_subUserNickName) {
      if (!(this_present_subUserNickName && that_present_subUserNickName))
        return false;
      if (!this.subUserNickName.equals(that.subUserNickName))
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingSubAccountRelatedItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTimestamp()).compareTo(other.isSetRelatedTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTimestamp, other.relatedTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountName()).compareTo(other.isSetSubAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountName, other.subAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserLoginName()).compareTo(other.isSetSubUserLoginName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserLoginName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserLoginName, other.subUserLoginName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserNickName()).compareTo(other.isSetSubUserNickName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserNickName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserNickName, other.subUserNickName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingSubAccountRelatedItem(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetRelatedTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("relatedTimestamp:");
      sb.append(this.relatedTimestamp);
      first = false;
    }
    if (isSetSubAccountName()) {
      if (!first) sb.append(", ");
      sb.append("subAccountName:");
      if (this.subAccountName == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountName);
      }
      first = false;
    }
    if (isSetSubUserLoginName()) {
      if (!first) sb.append(", ");
      sb.append("subUserLoginName:");
      if (this.subUserLoginName == null) {
        sb.append("null");
      } else {
        sb.append(this.subUserLoginName);
      }
      first = false;
    }
    if (isSetSubUserNickName()) {
      if (!first) sb.append(", ");
      sb.append("subUserNickName:");
      if (this.subUserNickName == null) {
        sb.append("null");
      } else {
        sb.append(this.subUserNickName);
      }
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingSubAccountRelatedItemStandardSchemeFactory implements SchemeFactory {
    public HostingSubAccountRelatedItemStandardScheme getScheme() {
      return new HostingSubAccountRelatedItemStandardScheme();
    }
  }

  private static class HostingSubAccountRelatedItemStandardScheme extends StandardScheme<HostingSubAccountRelatedItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingSubAccountRelatedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATED_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relatedTimestamp = iprot.readI32();
              struct.setRelatedTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subAccountName = iprot.readString();
              struct.setSubAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUB_USER_LOGIN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subUserLoginName = iprot.readString();
              struct.setSubUserLoginNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_USER_NICK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subUserNickName = iprot.readString();
              struct.setSubUserNickNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingSubAccountRelatedItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRelatedTimestamp()) {
        oprot.writeFieldBegin(RELATED_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.relatedTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.subAccountName != null) {
        if (struct.isSetSubAccountName()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.subAccountName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subUserLoginName != null) {
        if (struct.isSetSubUserLoginName()) {
          oprot.writeFieldBegin(SUB_USER_LOGIN_NAME_FIELD_DESC);
          oprot.writeString(struct.subUserLoginName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subUserNickName != null) {
        if (struct.isSetSubUserNickName()) {
          oprot.writeFieldBegin(SUB_USER_NICK_NAME_FIELD_DESC);
          oprot.writeString(struct.subUserNickName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingSubAccountRelatedItemTupleSchemeFactory implements SchemeFactory {
    public HostingSubAccountRelatedItemTupleScheme getScheme() {
      return new HostingSubAccountRelatedItemTupleScheme();
    }
  }

  private static class HostingSubAccountRelatedItemTupleScheme extends TupleScheme<HostingSubAccountRelatedItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountRelatedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(1);
      }
      if (struct.isSetRelatedTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetSubAccountName()) {
        optionals.set(3);
      }
      if (struct.isSetSubUserLoginName()) {
        optionals.set(4);
      }
      if (struct.isSetSubUserNickName()) {
        optionals.set(5);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetRelatedTimestamp()) {
        oprot.writeI32(struct.relatedTimestamp);
      }
      if (struct.isSetSubAccountName()) {
        oprot.writeString(struct.subAccountName);
      }
      if (struct.isSetSubUserLoginName()) {
        oprot.writeString(struct.subUserLoginName);
      }
      if (struct.isSetSubUserNickName()) {
        oprot.writeString(struct.subUserNickName);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountRelatedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.relatedTimestamp = iprot.readI32();
        struct.setRelatedTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subAccountName = iprot.readString();
        struct.setSubAccountNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.subUserLoginName = iprot.readString();
        struct.setSubUserLoginNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subUserNickName = iprot.readString();
        struct.setSubUserNickNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

