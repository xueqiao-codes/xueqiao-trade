/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.proxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateInfoReq implements org.apache.thrift.TBase<UpdateInfoReq, UpdateInfoReq._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateInfoReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateInfoReq");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNum", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField COMPANY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("companyCode", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateInfoReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateInfoReqTupleSchemeFactory());
  }

  public long companyId; // optional
  public String appKey; // optional
  public VersionNum versionNum; // optional
  public String companyCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "companyId"),
    APP_KEY((short)2, "appKey"),
    VERSION_NUM((short)3, "versionNum"),
    COMPANY_CODE((short)4, "companyCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // APP_KEY
          return APP_KEY;
        case 3: // VERSION_NUM
          return VERSION_NUM;
        case 4: // COMPANY_CODE
          return COMPANY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.APP_KEY,_Fields.VERSION_NUM,_Fields.COMPANY_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("versionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VersionNum.class)));
    tmpMap.put(_Fields.COMPANY_CODE, new org.apache.thrift.meta_data.FieldMetaData("companyCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateInfoReq.class, metaDataMap);
  }

  public UpdateInfoReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateInfoReq(UpdateInfoReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.companyId = other.companyId;
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetVersionNum()) {
      this.versionNum = new VersionNum(other.versionNum);
    }
    if (other.isSetCompanyCode()) {
      this.companyCode = other.companyCode;
    }
  }

  public UpdateInfoReq deepCopy() {
    return new UpdateInfoReq(this);
  }

  @Override
  public void clear() {
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.appKey = null;
    this.versionNum = null;
    this.companyCode = null;
  }

  public long getCompanyId() {
    return this.companyId;
  }

  public UpdateInfoReq setCompanyId(long companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getAppKey() {
    return this.appKey;
  }

  public UpdateInfoReq setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  public VersionNum getVersionNum() {
    return this.versionNum;
  }

  public UpdateInfoReq setVersionNum(VersionNum versionNum) {
    this.versionNum = versionNum;
    return this;
  }

  public void unsetVersionNum() {
    this.versionNum = null;
  }

  /** Returns true if field versionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNum() {
    return this.versionNum != null;
  }

  public void setVersionNumIsSet(boolean value) {
    if (!value) {
      this.versionNum = null;
    }
  }

  public String getCompanyCode() {
    return this.companyCode;
  }

  public UpdateInfoReq setCompanyCode(String companyCode) {
    this.companyCode = companyCode;
    return this;
  }

  public void unsetCompanyCode() {
    this.companyCode = null;
  }

  /** Returns true if field companyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyCode() {
    return this.companyCode != null;
  }

  public void setCompanyCodeIsSet(boolean value) {
    if (!value) {
      this.companyCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Long)value);
      }
      break;

    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case VERSION_NUM:
      if (value == null) {
        unsetVersionNum();
      } else {
        setVersionNum((VersionNum)value);
      }
      break;

    case COMPANY_CODE:
      if (value == null) {
        unsetCompanyCode();
      } else {
        setCompanyCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return Long.valueOf(getCompanyId());

    case APP_KEY:
      return getAppKey();

    case VERSION_NUM:
      return getVersionNum();

    case COMPANY_CODE:
      return getCompanyCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompanyId();
    case APP_KEY:
      return isSetAppKey();
    case VERSION_NUM:
      return isSetVersionNum();
    case COMPANY_CODE:
      return isSetCompanyCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateInfoReq)
      return this.equals((UpdateInfoReq)that);
    return false;
  }

  public boolean equals(UpdateInfoReq that) {
    if (that == null)
      return false;

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_versionNum = true && this.isSetVersionNum();
    boolean that_present_versionNum = true && that.isSetVersionNum();
    if (this_present_versionNum || that_present_versionNum) {
      if (!(this_present_versionNum && that_present_versionNum))
        return false;
      if (!this.versionNum.equals(that.versionNum))
        return false;
    }

    boolean this_present_companyCode = true && this.isSetCompanyCode();
    boolean that_present_companyCode = true && that.isSetCompanyCode();
    if (this_present_companyCode || that_present_companyCode) {
      if (!(this_present_companyCode && that_present_companyCode))
        return false;
      if (!this.companyCode.equals(that.companyCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateInfoReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionNum()).compareTo(other.isSetVersionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNum, other.versionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyCode()).compareTo(other.isSetCompanyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyCode, other.companyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateInfoReq(");
    boolean first = true;

    if (isSetCompanyId()) {
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetAppKey()) {
      if (!first) sb.append(", ");
      sb.append("appKey:");
      if (this.appKey == null) {
        sb.append("null");
      } else {
        sb.append(this.appKey);
      }
      first = false;
    }
    if (isSetVersionNum()) {
      if (!first) sb.append(", ");
      sb.append("versionNum:");
      if (this.versionNum == null) {
        sb.append("null");
      } else {
        sb.append(this.versionNum);
      }
      first = false;
    }
    if (isSetCompanyCode()) {
      if (!first) sb.append(", ");
      sb.append("companyCode:");
      if (this.companyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.companyCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (versionNum != null) {
      versionNum.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateInfoReqStandardSchemeFactory implements SchemeFactory {
    public UpdateInfoReqStandardScheme getScheme() {
      return new UpdateInfoReqStandardScheme();
    }
  }

  private static class UpdateInfoReqStandardScheme extends StandardScheme<UpdateInfoReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateInfoReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyId = iprot.readI64();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.versionNum = new VersionNum();
              struct.versionNum.read(iprot);
              struct.setVersionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMPANY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyCode = iprot.readString();
              struct.setCompanyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateInfoReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.appKey != null) {
        if (struct.isSetAppKey()) {
          oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
          oprot.writeString(struct.appKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionNum != null) {
        if (struct.isSetVersionNum()) {
          oprot.writeFieldBegin(VERSION_NUM_FIELD_DESC);
          struct.versionNum.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyCode != null) {
        if (struct.isSetCompanyCode()) {
          oprot.writeFieldBegin(COMPANY_CODE_FIELD_DESC);
          oprot.writeString(struct.companyCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateInfoReqTupleSchemeFactory implements SchemeFactory {
    public UpdateInfoReqTupleScheme getScheme() {
      return new UpdateInfoReqTupleScheme();
    }
  }

  private static class UpdateInfoReqTupleScheme extends TupleScheme<UpdateInfoReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateInfoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyId()) {
        optionals.set(0);
      }
      if (struct.isSetAppKey()) {
        optionals.set(1);
      }
      if (struct.isSetVersionNum()) {
        optionals.set(2);
      }
      if (struct.isSetCompanyCode()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCompanyId()) {
        oprot.writeI64(struct.companyId);
      }
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetVersionNum()) {
        struct.versionNum.write(oprot);
      }
      if (struct.isSetCompanyCode()) {
        oprot.writeString(struct.companyCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateInfoReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.companyId = iprot.readI64();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.versionNum = new VersionNum();
        struct.versionNum.read(iprot);
        struct.setVersionNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.companyCode = iprot.readString();
        struct.setCompanyCodeIsSet(true);
      }
    }
  }

}

