/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;


import java.util.Map;
import java.util.HashMap;
import org.apache.thrift.TEnum;

public enum StdOrderContingentConditionType implements org.apache.thrift.TEnum {
  IMMEDIATELY(1),
  TOUCH(2),
  TOUCH_PROFIT(3),
  PARKED_ORDER(4),
  LAST_PRICE_GREATER_THAN_STOP_PRICE(5),
  LAST_PRICE_GREATER_EQUAL_STOP_PRICE(6),
  LAST_PRICE_LESSER_THAN_STOP_PRICE(7),
  LAST_PRICE_LESSER_EQUAL_STOP_PRICE(8),
  ASK_PRICE_GREATER_THAN_STOP_PRICE(9),
  ASK_PRICE_GREATER_EQUAL_STOP_PRICE(10),
  ASK_PRICE_LESSER_THAN_STOP_PRICE(11),
  ASK_PRICE_LESSER_EQUAL_STOP_PRICE(12),
  BID_PRICE_GREATER_THAN_STOP_PRICE(13),
  BID_PRICE_GREATER_EQUAL_STOP_PRICE(14),
  BID_PRICE_LESSER_THAN_STOP_PRICE(15),
  BID_PRICE_LESSER_EQUAL_STOP_PRICE(16);

  private final int value;

  private StdOrderContingentConditionType(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static StdOrderContingentConditionType findByValue(int value) { 
    switch (value) {
      case 1:
        return IMMEDIATELY;
      case 2:
        return TOUCH;
      case 3:
        return TOUCH_PROFIT;
      case 4:
        return PARKED_ORDER;
      case 5:
        return LAST_PRICE_GREATER_THAN_STOP_PRICE;
      case 6:
        return LAST_PRICE_GREATER_EQUAL_STOP_PRICE;
      case 7:
        return LAST_PRICE_LESSER_THAN_STOP_PRICE;
      case 8:
        return LAST_PRICE_LESSER_EQUAL_STOP_PRICE;
      case 9:
        return ASK_PRICE_GREATER_THAN_STOP_PRICE;
      case 10:
        return ASK_PRICE_GREATER_EQUAL_STOP_PRICE;
      case 11:
        return ASK_PRICE_LESSER_THAN_STOP_PRICE;
      case 12:
        return ASK_PRICE_LESSER_EQUAL_STOP_PRICE;
      case 13:
        return BID_PRICE_GREATER_THAN_STOP_PRICE;
      case 14:
        return BID_PRICE_GREATER_EQUAL_STOP_PRICE;
      case 15:
        return BID_PRICE_LESSER_THAN_STOP_PRICE;
      case 16:
        return BID_PRICE_LESSER_EQUAL_STOP_PRICE;
      default:
        return null;
    }
  }
}
