/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecTradeLegInfo implements org.apache.thrift.TBase<HostingExecTradeLegInfo, HostingExecTradeLegInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecTradeLegInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecTradeLegInfo");

  private static final org.apache.thrift.protocol.TField LEG_TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("legTradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField LEG_TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("legTradeVolume", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LEG_TRADE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("legTradeDateTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LEG_UPSIDE_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("legUpsideTradeId", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField LEG_UPSIDE_TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("legUpsideTradeDirection", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecTradeLegInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecTradeLegInfoTupleSchemeFactory());
  }

  public double legTradePrice; // optional
  public int legTradeVolume; // optional
  public String legTradeDateTime; // optional
  public HostingExecUpsideTradeID legUpsideTradeId; // optional
  /**
   * 
   * @see HostingExecTradeDirection
   */
  public HostingExecTradeDirection legUpsideTradeDirection; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEG_TRADE_PRICE((short)1, "legTradePrice"),
    LEG_TRADE_VOLUME((short)2, "legTradeVolume"),
    LEG_TRADE_DATE_TIME((short)3, "legTradeDateTime"),
    LEG_UPSIDE_TRADE_ID((short)4, "legUpsideTradeId"),
    /**
     * 
     * @see HostingExecTradeDirection
     */
    LEG_UPSIDE_TRADE_DIRECTION((short)5, "legUpsideTradeDirection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEG_TRADE_PRICE
          return LEG_TRADE_PRICE;
        case 2: // LEG_TRADE_VOLUME
          return LEG_TRADE_VOLUME;
        case 3: // LEG_TRADE_DATE_TIME
          return LEG_TRADE_DATE_TIME;
        case 4: // LEG_UPSIDE_TRADE_ID
          return LEG_UPSIDE_TRADE_ID;
        case 5: // LEG_UPSIDE_TRADE_DIRECTION
          return LEG_UPSIDE_TRADE_DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEGTRADEPRICE_ISSET_ID = 0;
  private static final int __LEGTRADEVOLUME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LEG_TRADE_PRICE,_Fields.LEG_TRADE_VOLUME,_Fields.LEG_TRADE_DATE_TIME,_Fields.LEG_UPSIDE_TRADE_ID,_Fields.LEG_UPSIDE_TRADE_DIRECTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEG_TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("legTradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEG_TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("legTradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEG_TRADE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("legTradeDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEG_UPSIDE_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("legUpsideTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecUpsideTradeID.class)));
    tmpMap.put(_Fields.LEG_UPSIDE_TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("legUpsideTradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecTradeDirection.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecTradeLegInfo.class, metaDataMap);
  }

  public HostingExecTradeLegInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecTradeLegInfo(HostingExecTradeLegInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.legTradePrice = other.legTradePrice;
    this.legTradeVolume = other.legTradeVolume;
    if (other.isSetLegTradeDateTime()) {
      this.legTradeDateTime = other.legTradeDateTime;
    }
    if (other.isSetLegUpsideTradeId()) {
      this.legUpsideTradeId = new HostingExecUpsideTradeID(other.legUpsideTradeId);
    }
    if (other.isSetLegUpsideTradeDirection()) {
      this.legUpsideTradeDirection = other.legUpsideTradeDirection;
    }
  }

  public HostingExecTradeLegInfo deepCopy() {
    return new HostingExecTradeLegInfo(this);
  }

  @Override
  public void clear() {
    setLegTradePriceIsSet(false);
    this.legTradePrice = 0.0;
    setLegTradeVolumeIsSet(false);
    this.legTradeVolume = 0;
    this.legTradeDateTime = null;
    this.legUpsideTradeId = null;
    this.legUpsideTradeDirection = null;
  }

  public double getLegTradePrice() {
    return this.legTradePrice;
  }

  public HostingExecTradeLegInfo setLegTradePrice(double legTradePrice) {
    this.legTradePrice = legTradePrice;
    setLegTradePriceIsSet(true);
    return this;
  }

  public void unsetLegTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGTRADEPRICE_ISSET_ID);
  }

  /** Returns true if field legTradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLegTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGTRADEPRICE_ISSET_ID);
  }

  public void setLegTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGTRADEPRICE_ISSET_ID, value);
  }

  public int getLegTradeVolume() {
    return this.legTradeVolume;
  }

  public HostingExecTradeLegInfo setLegTradeVolume(int legTradeVolume) {
    this.legTradeVolume = legTradeVolume;
    setLegTradeVolumeIsSet(true);
    return this;
  }

  public void unsetLegTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGTRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field legTradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetLegTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGTRADEVOLUME_ISSET_ID);
  }

  public void setLegTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGTRADEVOLUME_ISSET_ID, value);
  }

  public String getLegTradeDateTime() {
    return this.legTradeDateTime;
  }

  public HostingExecTradeLegInfo setLegTradeDateTime(String legTradeDateTime) {
    this.legTradeDateTime = legTradeDateTime;
    return this;
  }

  public void unsetLegTradeDateTime() {
    this.legTradeDateTime = null;
  }

  /** Returns true if field legTradeDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLegTradeDateTime() {
    return this.legTradeDateTime != null;
  }

  public void setLegTradeDateTimeIsSet(boolean value) {
    if (!value) {
      this.legTradeDateTime = null;
    }
  }

  public HostingExecUpsideTradeID getLegUpsideTradeId() {
    return this.legUpsideTradeId;
  }

  public HostingExecTradeLegInfo setLegUpsideTradeId(HostingExecUpsideTradeID legUpsideTradeId) {
    this.legUpsideTradeId = legUpsideTradeId;
    return this;
  }

  public void unsetLegUpsideTradeId() {
    this.legUpsideTradeId = null;
  }

  /** Returns true if field legUpsideTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetLegUpsideTradeId() {
    return this.legUpsideTradeId != null;
  }

  public void setLegUpsideTradeIdIsSet(boolean value) {
    if (!value) {
      this.legUpsideTradeId = null;
    }
  }

  /**
   * 
   * @see HostingExecTradeDirection
   */
  public HostingExecTradeDirection getLegUpsideTradeDirection() {
    return this.legUpsideTradeDirection;
  }

  /**
   * 
   * @see HostingExecTradeDirection
   */
  public HostingExecTradeLegInfo setLegUpsideTradeDirection(HostingExecTradeDirection legUpsideTradeDirection) {
    this.legUpsideTradeDirection = legUpsideTradeDirection;
    return this;
  }

  public void unsetLegUpsideTradeDirection() {
    this.legUpsideTradeDirection = null;
  }

  /** Returns true if field legUpsideTradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetLegUpsideTradeDirection() {
    return this.legUpsideTradeDirection != null;
  }

  public void setLegUpsideTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.legUpsideTradeDirection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEG_TRADE_PRICE:
      if (value == null) {
        unsetLegTradePrice();
      } else {
        setLegTradePrice((Double)value);
      }
      break;

    case LEG_TRADE_VOLUME:
      if (value == null) {
        unsetLegTradeVolume();
      } else {
        setLegTradeVolume((Integer)value);
      }
      break;

    case LEG_TRADE_DATE_TIME:
      if (value == null) {
        unsetLegTradeDateTime();
      } else {
        setLegTradeDateTime((String)value);
      }
      break;

    case LEG_UPSIDE_TRADE_ID:
      if (value == null) {
        unsetLegUpsideTradeId();
      } else {
        setLegUpsideTradeId((HostingExecUpsideTradeID)value);
      }
      break;

    case LEG_UPSIDE_TRADE_DIRECTION:
      if (value == null) {
        unsetLegUpsideTradeDirection();
      } else {
        setLegUpsideTradeDirection((HostingExecTradeDirection)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEG_TRADE_PRICE:
      return Double.valueOf(getLegTradePrice());

    case LEG_TRADE_VOLUME:
      return Integer.valueOf(getLegTradeVolume());

    case LEG_TRADE_DATE_TIME:
      return getLegTradeDateTime();

    case LEG_UPSIDE_TRADE_ID:
      return getLegUpsideTradeId();

    case LEG_UPSIDE_TRADE_DIRECTION:
      return getLegUpsideTradeDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEG_TRADE_PRICE:
      return isSetLegTradePrice();
    case LEG_TRADE_VOLUME:
      return isSetLegTradeVolume();
    case LEG_TRADE_DATE_TIME:
      return isSetLegTradeDateTime();
    case LEG_UPSIDE_TRADE_ID:
      return isSetLegUpsideTradeId();
    case LEG_UPSIDE_TRADE_DIRECTION:
      return isSetLegUpsideTradeDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecTradeLegInfo)
      return this.equals((HostingExecTradeLegInfo)that);
    return false;
  }

  public boolean equals(HostingExecTradeLegInfo that) {
    if (that == null)
      return false;

    boolean this_present_legTradePrice = true && this.isSetLegTradePrice();
    boolean that_present_legTradePrice = true && that.isSetLegTradePrice();
    if (this_present_legTradePrice || that_present_legTradePrice) {
      if (!(this_present_legTradePrice && that_present_legTradePrice))
        return false;
      if (this.legTradePrice != that.legTradePrice)
        return false;
    }

    boolean this_present_legTradeVolume = true && this.isSetLegTradeVolume();
    boolean that_present_legTradeVolume = true && that.isSetLegTradeVolume();
    if (this_present_legTradeVolume || that_present_legTradeVolume) {
      if (!(this_present_legTradeVolume && that_present_legTradeVolume))
        return false;
      if (this.legTradeVolume != that.legTradeVolume)
        return false;
    }

    boolean this_present_legTradeDateTime = true && this.isSetLegTradeDateTime();
    boolean that_present_legTradeDateTime = true && that.isSetLegTradeDateTime();
    if (this_present_legTradeDateTime || that_present_legTradeDateTime) {
      if (!(this_present_legTradeDateTime && that_present_legTradeDateTime))
        return false;
      if (!this.legTradeDateTime.equals(that.legTradeDateTime))
        return false;
    }

    boolean this_present_legUpsideTradeId = true && this.isSetLegUpsideTradeId();
    boolean that_present_legUpsideTradeId = true && that.isSetLegUpsideTradeId();
    if (this_present_legUpsideTradeId || that_present_legUpsideTradeId) {
      if (!(this_present_legUpsideTradeId && that_present_legUpsideTradeId))
        return false;
      if (!this.legUpsideTradeId.equals(that.legUpsideTradeId))
        return false;
    }

    boolean this_present_legUpsideTradeDirection = true && this.isSetLegUpsideTradeDirection();
    boolean that_present_legUpsideTradeDirection = true && that.isSetLegUpsideTradeDirection();
    if (this_present_legUpsideTradeDirection || that_present_legUpsideTradeDirection) {
      if (!(this_present_legUpsideTradeDirection && that_present_legUpsideTradeDirection))
        return false;
      if (!this.legUpsideTradeDirection.equals(that.legUpsideTradeDirection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecTradeLegInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLegTradePrice()).compareTo(other.isSetLegTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legTradePrice, other.legTradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegTradeVolume()).compareTo(other.isSetLegTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legTradeVolume, other.legTradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegTradeDateTime()).compareTo(other.isSetLegTradeDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegTradeDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legTradeDateTime, other.legTradeDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegUpsideTradeId()).compareTo(other.isSetLegUpsideTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegUpsideTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legUpsideTradeId, other.legUpsideTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegUpsideTradeDirection()).compareTo(other.isSetLegUpsideTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegUpsideTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legUpsideTradeDirection, other.legUpsideTradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecTradeLegInfo(");
    boolean first = true;

    if (isSetLegTradePrice()) {
      sb.append("legTradePrice:");
      sb.append(this.legTradePrice);
      first = false;
    }
    if (isSetLegTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("legTradeVolume:");
      sb.append(this.legTradeVolume);
      first = false;
    }
    if (isSetLegTradeDateTime()) {
      if (!first) sb.append(", ");
      sb.append("legTradeDateTime:");
      if (this.legTradeDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.legTradeDateTime);
      }
      first = false;
    }
    if (isSetLegUpsideTradeId()) {
      if (!first) sb.append(", ");
      sb.append("legUpsideTradeId:");
      if (this.legUpsideTradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.legUpsideTradeId);
      }
      first = false;
    }
    if (isSetLegUpsideTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("legUpsideTradeDirection:");
      if (this.legUpsideTradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.legUpsideTradeDirection);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (legUpsideTradeId != null) {
      legUpsideTradeId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecTradeLegInfoStandardSchemeFactory implements SchemeFactory {
    public HostingExecTradeLegInfoStandardScheme getScheme() {
      return new HostingExecTradeLegInfoStandardScheme();
    }
  }

  private static class HostingExecTradeLegInfoStandardScheme extends StandardScheme<HostingExecTradeLegInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecTradeLegInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEG_TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.legTradePrice = iprot.readDouble();
              struct.setLegTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEG_TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legTradeVolume = iprot.readI32();
              struct.setLegTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEG_TRADE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legTradeDateTime = iprot.readString();
              struct.setLegTradeDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEG_UPSIDE_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.legUpsideTradeId = new HostingExecUpsideTradeID();
              struct.legUpsideTradeId.read(iprot);
              struct.setLegUpsideTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEG_UPSIDE_TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.legUpsideTradeDirection = HostingExecTradeDirection.findByValue(iprot.readI32());
              struct.setLegUpsideTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecTradeLegInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLegTradePrice()) {
        oprot.writeFieldBegin(LEG_TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.legTradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLegTradeVolume()) {
        oprot.writeFieldBegin(LEG_TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.legTradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.legTradeDateTime != null) {
        if (struct.isSetLegTradeDateTime()) {
          oprot.writeFieldBegin(LEG_TRADE_DATE_TIME_FIELD_DESC);
          oprot.writeString(struct.legTradeDateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.legUpsideTradeId != null) {
        if (struct.isSetLegUpsideTradeId()) {
          oprot.writeFieldBegin(LEG_UPSIDE_TRADE_ID_FIELD_DESC);
          struct.legUpsideTradeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.legUpsideTradeDirection != null) {
        if (struct.isSetLegUpsideTradeDirection()) {
          oprot.writeFieldBegin(LEG_UPSIDE_TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.legUpsideTradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecTradeLegInfoTupleSchemeFactory implements SchemeFactory {
    public HostingExecTradeLegInfoTupleScheme getScheme() {
      return new HostingExecTradeLegInfoTupleScheme();
    }
  }

  private static class HostingExecTradeLegInfoTupleScheme extends TupleScheme<HostingExecTradeLegInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeLegInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLegTradePrice()) {
        optionals.set(0);
      }
      if (struct.isSetLegTradeVolume()) {
        optionals.set(1);
      }
      if (struct.isSetLegTradeDateTime()) {
        optionals.set(2);
      }
      if (struct.isSetLegUpsideTradeId()) {
        optionals.set(3);
      }
      if (struct.isSetLegUpsideTradeDirection()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetLegTradePrice()) {
        oprot.writeDouble(struct.legTradePrice);
      }
      if (struct.isSetLegTradeVolume()) {
        oprot.writeI32(struct.legTradeVolume);
      }
      if (struct.isSetLegTradeDateTime()) {
        oprot.writeString(struct.legTradeDateTime);
      }
      if (struct.isSetLegUpsideTradeId()) {
        struct.legUpsideTradeId.write(oprot);
      }
      if (struct.isSetLegUpsideTradeDirection()) {
        oprot.writeI32(struct.legUpsideTradeDirection.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeLegInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.legTradePrice = iprot.readDouble();
        struct.setLegTradePriceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.legTradeVolume = iprot.readI32();
        struct.setLegTradeVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.legTradeDateTime = iprot.readString();
        struct.setLegTradeDateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.legUpsideTradeId = new HostingExecUpsideTradeID();
        struct.legUpsideTradeId.read(iprot);
        struct.setLegUpsideTradeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legUpsideTradeDirection = HostingExecTradeDirection.findByValue(iprot.readI32());
        struct.setLegUpsideTradeDirectionIsSet(true);
      }
    }
  }

}

