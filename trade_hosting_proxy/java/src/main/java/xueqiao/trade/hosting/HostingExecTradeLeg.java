/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecTradeLeg implements org.apache.thrift.TBase<HostingExecTradeLeg, HostingExecTradeLeg._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecTradeLeg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecTradeLeg");

  private static final org.apache.thrift.protocol.TField EXEC_TRADE_LEG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeLegId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RELATED_EXEC_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedExecTradeId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LEG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("legIndex", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField LEG_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("legContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_LEG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeLegInfo", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ACCOUNT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("accountSummary", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecTradeLegStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecTradeLegTupleSchemeFactory());
  }

  public long execTradeLegId; // optional
  public long execOrderId; // optional
  public long relatedExecTradeId; // optional
  public short legIndex; // optional
  public HostingExecOrderLegContractSummary legContractSummary; // optional
  public HostingExecTradeLegInfo tradeLegInfo; // optional
  public HostingExecOrderTradeAccountSummary accountSummary; // optional
  public int subUserId; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public long subAccountId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_TRADE_LEG_ID((short)1, "execTradeLegId"),
    EXEC_ORDER_ID((short)2, "execOrderId"),
    RELATED_EXEC_TRADE_ID((short)3, "relatedExecTradeId"),
    LEG_INDEX((short)4, "legIndex"),
    LEG_CONTRACT_SUMMARY((short)5, "legContractSummary"),
    TRADE_LEG_INFO((short)6, "tradeLegInfo"),
    ACCOUNT_SUMMARY((short)7, "accountSummary"),
    SUB_USER_ID((short)8, "subUserId"),
    CREATE_TIMESTAMP_MS((short)9, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)10, "lastmodifyTimestampMs"),
    SUB_ACCOUNT_ID((short)11, "subAccountId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_TRADE_LEG_ID
          return EXEC_TRADE_LEG_ID;
        case 2: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 3: // RELATED_EXEC_TRADE_ID
          return RELATED_EXEC_TRADE_ID;
        case 4: // LEG_INDEX
          return LEG_INDEX;
        case 5: // LEG_CONTRACT_SUMMARY
          return LEG_CONTRACT_SUMMARY;
        case 6: // TRADE_LEG_INFO
          return TRADE_LEG_INFO;
        case 7: // ACCOUNT_SUMMARY
          return ACCOUNT_SUMMARY;
        case 8: // SUB_USER_ID
          return SUB_USER_ID;
        case 9: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 10: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 11: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECTRADELEGID_ISSET_ID = 0;
  private static final int __EXECORDERID_ISSET_ID = 1;
  private static final int __RELATEDEXECTRADEID_ISSET_ID = 2;
  private static final int __LEGINDEX_ISSET_ID = 3;
  private static final int __SUBUSERID_ISSET_ID = 4;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 5;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 6;
  private static final int __SUBACCOUNTID_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_TRADE_LEG_ID,_Fields.EXEC_ORDER_ID,_Fields.RELATED_EXEC_TRADE_ID,_Fields.LEG_INDEX,_Fields.LEG_CONTRACT_SUMMARY,_Fields.TRADE_LEG_INFO,_Fields.ACCOUNT_SUMMARY,_Fields.SUB_USER_ID,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.SUB_ACCOUNT_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_TRADE_LEG_ID, new org.apache.thrift.meta_data.FieldMetaData("execTradeLegId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RELATED_EXEC_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("relatedExecTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("legIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEG_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("legContractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderLegContractSummary.class)));
    tmpMap.put(_Fields.TRADE_LEG_INFO, new org.apache.thrift.meta_data.FieldMetaData("tradeLegInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecTradeLegInfo.class)));
    tmpMap.put(_Fields.ACCOUNT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("accountSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderTradeAccountSummary.class)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecTradeLeg.class, metaDataMap);
  }

  public HostingExecTradeLeg() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecTradeLeg(HostingExecTradeLeg other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execTradeLegId = other.execTradeLegId;
    this.execOrderId = other.execOrderId;
    this.relatedExecTradeId = other.relatedExecTradeId;
    this.legIndex = other.legIndex;
    if (other.isSetLegContractSummary()) {
      this.legContractSummary = new HostingExecOrderLegContractSummary(other.legContractSummary);
    }
    if (other.isSetTradeLegInfo()) {
      this.tradeLegInfo = new HostingExecTradeLegInfo(other.tradeLegInfo);
    }
    if (other.isSetAccountSummary()) {
      this.accountSummary = new HostingExecOrderTradeAccountSummary(other.accountSummary);
    }
    this.subUserId = other.subUserId;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    this.subAccountId = other.subAccountId;
  }

  public HostingExecTradeLeg deepCopy() {
    return new HostingExecTradeLeg(this);
  }

  @Override
  public void clear() {
    setExecTradeLegIdIsSet(false);
    this.execTradeLegId = 0;
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    setRelatedExecTradeIdIsSet(false);
    this.relatedExecTradeId = 0;
    setLegIndexIsSet(false);
    this.legIndex = 0;
    this.legContractSummary = null;
    this.tradeLegInfo = null;
    this.accountSummary = null;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
  }

  public long getExecTradeLegId() {
    return this.execTradeLegId;
  }

  public HostingExecTradeLeg setExecTradeLegId(long execTradeLegId) {
    this.execTradeLegId = execTradeLegId;
    setExecTradeLegIdIsSet(true);
    return this;
  }

  public void unsetExecTradeLegId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID);
  }

  /** Returns true if field execTradeLegId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeLegId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID);
  }

  public void setExecTradeLegIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID, value);
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public HostingExecTradeLeg setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public long getRelatedExecTradeId() {
    return this.relatedExecTradeId;
  }

  public HostingExecTradeLeg setRelatedExecTradeId(long relatedExecTradeId) {
    this.relatedExecTradeId = relatedExecTradeId;
    setRelatedExecTradeIdIsSet(true);
    return this;
  }

  public void unsetRelatedExecTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDEXECTRADEID_ISSET_ID);
  }

  /** Returns true if field relatedExecTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedExecTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDEXECTRADEID_ISSET_ID);
  }

  public void setRelatedExecTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDEXECTRADEID_ISSET_ID, value);
  }

  public short getLegIndex() {
    return this.legIndex;
  }

  public HostingExecTradeLeg setLegIndex(short legIndex) {
    this.legIndex = legIndex;
    setLegIndexIsSet(true);
    return this;
  }

  public void unsetLegIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGINDEX_ISSET_ID);
  }

  /** Returns true if field legIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetLegIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGINDEX_ISSET_ID);
  }

  public void setLegIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGINDEX_ISSET_ID, value);
  }

  public HostingExecOrderLegContractSummary getLegContractSummary() {
    return this.legContractSummary;
  }

  public HostingExecTradeLeg setLegContractSummary(HostingExecOrderLegContractSummary legContractSummary) {
    this.legContractSummary = legContractSummary;
    return this;
  }

  public void unsetLegContractSummary() {
    this.legContractSummary = null;
  }

  /** Returns true if field legContractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetLegContractSummary() {
    return this.legContractSummary != null;
  }

  public void setLegContractSummaryIsSet(boolean value) {
    if (!value) {
      this.legContractSummary = null;
    }
  }

  public HostingExecTradeLegInfo getTradeLegInfo() {
    return this.tradeLegInfo;
  }

  public HostingExecTradeLeg setTradeLegInfo(HostingExecTradeLegInfo tradeLegInfo) {
    this.tradeLegInfo = tradeLegInfo;
    return this;
  }

  public void unsetTradeLegInfo() {
    this.tradeLegInfo = null;
  }

  /** Returns true if field tradeLegInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeLegInfo() {
    return this.tradeLegInfo != null;
  }

  public void setTradeLegInfoIsSet(boolean value) {
    if (!value) {
      this.tradeLegInfo = null;
    }
  }

  public HostingExecOrderTradeAccountSummary getAccountSummary() {
    return this.accountSummary;
  }

  public HostingExecTradeLeg setAccountSummary(HostingExecOrderTradeAccountSummary accountSummary) {
    this.accountSummary = accountSummary;
    return this;
  }

  public void unsetAccountSummary() {
    this.accountSummary = null;
  }

  /** Returns true if field accountSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountSummary() {
    return this.accountSummary != null;
  }

  public void setAccountSummaryIsSet(boolean value) {
    if (!value) {
      this.accountSummary = null;
    }
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingExecTradeLeg setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingExecTradeLeg setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingExecTradeLeg setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingExecTradeLeg setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_TRADE_LEG_ID:
      if (value == null) {
        unsetExecTradeLegId();
      } else {
        setExecTradeLegId((Long)value);
      }
      break;

    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case RELATED_EXEC_TRADE_ID:
      if (value == null) {
        unsetRelatedExecTradeId();
      } else {
        setRelatedExecTradeId((Long)value);
      }
      break;

    case LEG_INDEX:
      if (value == null) {
        unsetLegIndex();
      } else {
        setLegIndex((Short)value);
      }
      break;

    case LEG_CONTRACT_SUMMARY:
      if (value == null) {
        unsetLegContractSummary();
      } else {
        setLegContractSummary((HostingExecOrderLegContractSummary)value);
      }
      break;

    case TRADE_LEG_INFO:
      if (value == null) {
        unsetTradeLegInfo();
      } else {
        setTradeLegInfo((HostingExecTradeLegInfo)value);
      }
      break;

    case ACCOUNT_SUMMARY:
      if (value == null) {
        unsetAccountSummary();
      } else {
        setAccountSummary((HostingExecOrderTradeAccountSummary)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_TRADE_LEG_ID:
      return Long.valueOf(getExecTradeLegId());

    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case RELATED_EXEC_TRADE_ID:
      return Long.valueOf(getRelatedExecTradeId());

    case LEG_INDEX:
      return Short.valueOf(getLegIndex());

    case LEG_CONTRACT_SUMMARY:
      return getLegContractSummary();

    case TRADE_LEG_INFO:
      return getTradeLegInfo();

    case ACCOUNT_SUMMARY:
      return getAccountSummary();

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_TRADE_LEG_ID:
      return isSetExecTradeLegId();
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case RELATED_EXEC_TRADE_ID:
      return isSetRelatedExecTradeId();
    case LEG_INDEX:
      return isSetLegIndex();
    case LEG_CONTRACT_SUMMARY:
      return isSetLegContractSummary();
    case TRADE_LEG_INFO:
      return isSetTradeLegInfo();
    case ACCOUNT_SUMMARY:
      return isSetAccountSummary();
    case SUB_USER_ID:
      return isSetSubUserId();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecTradeLeg)
      return this.equals((HostingExecTradeLeg)that);
    return false;
  }

  public boolean equals(HostingExecTradeLeg that) {
    if (that == null)
      return false;

    boolean this_present_execTradeLegId = true && this.isSetExecTradeLegId();
    boolean that_present_execTradeLegId = true && that.isSetExecTradeLegId();
    if (this_present_execTradeLegId || that_present_execTradeLegId) {
      if (!(this_present_execTradeLegId && that_present_execTradeLegId))
        return false;
      if (this.execTradeLegId != that.execTradeLegId)
        return false;
    }

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_relatedExecTradeId = true && this.isSetRelatedExecTradeId();
    boolean that_present_relatedExecTradeId = true && that.isSetRelatedExecTradeId();
    if (this_present_relatedExecTradeId || that_present_relatedExecTradeId) {
      if (!(this_present_relatedExecTradeId && that_present_relatedExecTradeId))
        return false;
      if (this.relatedExecTradeId != that.relatedExecTradeId)
        return false;
    }

    boolean this_present_legIndex = true && this.isSetLegIndex();
    boolean that_present_legIndex = true && that.isSetLegIndex();
    if (this_present_legIndex || that_present_legIndex) {
      if (!(this_present_legIndex && that_present_legIndex))
        return false;
      if (this.legIndex != that.legIndex)
        return false;
    }

    boolean this_present_legContractSummary = true && this.isSetLegContractSummary();
    boolean that_present_legContractSummary = true && that.isSetLegContractSummary();
    if (this_present_legContractSummary || that_present_legContractSummary) {
      if (!(this_present_legContractSummary && that_present_legContractSummary))
        return false;
      if (!this.legContractSummary.equals(that.legContractSummary))
        return false;
    }

    boolean this_present_tradeLegInfo = true && this.isSetTradeLegInfo();
    boolean that_present_tradeLegInfo = true && that.isSetTradeLegInfo();
    if (this_present_tradeLegInfo || that_present_tradeLegInfo) {
      if (!(this_present_tradeLegInfo && that_present_tradeLegInfo))
        return false;
      if (!this.tradeLegInfo.equals(that.tradeLegInfo))
        return false;
    }

    boolean this_present_accountSummary = true && this.isSetAccountSummary();
    boolean that_present_accountSummary = true && that.isSetAccountSummary();
    if (this_present_accountSummary || that_present_accountSummary) {
      if (!(this_present_accountSummary && that_present_accountSummary))
        return false;
      if (!this.accountSummary.equals(that.accountSummary))
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecTradeLeg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecTradeLegId()).compareTo(other.isSetExecTradeLegId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeLegId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeLegId, other.execTradeLegId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedExecTradeId()).compareTo(other.isSetRelatedExecTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedExecTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedExecTradeId, other.relatedExecTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegIndex()).compareTo(other.isSetLegIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legIndex, other.legIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegContractSummary()).compareTo(other.isSetLegContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legContractSummary, other.legContractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeLegInfo()).compareTo(other.isSetTradeLegInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeLegInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeLegInfo, other.tradeLegInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountSummary()).compareTo(other.isSetAccountSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountSummary, other.accountSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecTradeLeg(");
    boolean first = true;

    if (isSetExecTradeLegId()) {
      sb.append("execTradeLegId:");
      sb.append(this.execTradeLegId);
      first = false;
    }
    if (isSetExecOrderId()) {
      if (!first) sb.append(", ");
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetRelatedExecTradeId()) {
      if (!first) sb.append(", ");
      sb.append("relatedExecTradeId:");
      sb.append(this.relatedExecTradeId);
      first = false;
    }
    if (isSetLegIndex()) {
      if (!first) sb.append(", ");
      sb.append("legIndex:");
      sb.append(this.legIndex);
      first = false;
    }
    if (isSetLegContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("legContractSummary:");
      if (this.legContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.legContractSummary);
      }
      first = false;
    }
    if (isSetTradeLegInfo()) {
      if (!first) sb.append(", ");
      sb.append("tradeLegInfo:");
      if (this.tradeLegInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeLegInfo);
      }
      first = false;
    }
    if (isSetAccountSummary()) {
      if (!first) sb.append(", ");
      sb.append("accountSummary:");
      if (this.accountSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.accountSummary);
      }
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (legContractSummary != null) {
      legContractSummary.validate();
    }
    if (tradeLegInfo != null) {
      tradeLegInfo.validate();
    }
    if (accountSummary != null) {
      accountSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecTradeLegStandardSchemeFactory implements SchemeFactory {
    public HostingExecTradeLegStandardScheme getScheme() {
      return new HostingExecTradeLegStandardScheme();
    }
  }

  private static class HostingExecTradeLegStandardScheme extends StandardScheme<HostingExecTradeLeg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecTradeLeg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_TRADE_LEG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTradeLegId = iprot.readI64();
              struct.setExecTradeLegIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELATED_EXEC_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.relatedExecTradeId = iprot.readI64();
              struct.setRelatedExecTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEG_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.legIndex = iprot.readI16();
              struct.setLegIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEG_CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.legContractSummary = new HostingExecOrderLegContractSummary();
              struct.legContractSummary.read(iprot);
              struct.setLegContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_LEG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tradeLegInfo = new HostingExecTradeLegInfo();
              struct.tradeLegInfo.read(iprot);
              struct.setTradeLegInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ACCOUNT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountSummary = new HostingExecOrderTradeAccountSummary();
              struct.accountSummary.read(iprot);
              struct.setAccountSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecTradeLeg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecTradeLegId()) {
        oprot.writeFieldBegin(EXEC_TRADE_LEG_ID_FIELD_DESC);
        oprot.writeI64(struct.execTradeLegId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRelatedExecTradeId()) {
        oprot.writeFieldBegin(RELATED_EXEC_TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.relatedExecTradeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLegIndex()) {
        oprot.writeFieldBegin(LEG_INDEX_FIELD_DESC);
        oprot.writeI16(struct.legIndex);
        oprot.writeFieldEnd();
      }
      if (struct.legContractSummary != null) {
        if (struct.isSetLegContractSummary()) {
          oprot.writeFieldBegin(LEG_CONTRACT_SUMMARY_FIELD_DESC);
          struct.legContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeLegInfo != null) {
        if (struct.isSetTradeLegInfo()) {
          oprot.writeFieldBegin(TRADE_LEG_INFO_FIELD_DESC);
          struct.tradeLegInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountSummary != null) {
        if (struct.isSetAccountSummary()) {
          oprot.writeFieldBegin(ACCOUNT_SUMMARY_FIELD_DESC);
          struct.accountSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecTradeLegTupleSchemeFactory implements SchemeFactory {
    public HostingExecTradeLegTupleScheme getScheme() {
      return new HostingExecTradeLegTupleScheme();
    }
  }

  private static class HostingExecTradeLegTupleScheme extends TupleScheme<HostingExecTradeLeg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeLeg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecTradeLegId()) {
        optionals.set(0);
      }
      if (struct.isSetExecOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetRelatedExecTradeId()) {
        optionals.set(2);
      }
      if (struct.isSetLegIndex()) {
        optionals.set(3);
      }
      if (struct.isSetLegContractSummary()) {
        optionals.set(4);
      }
      if (struct.isSetTradeLegInfo()) {
        optionals.set(5);
      }
      if (struct.isSetAccountSummary()) {
        optionals.set(6);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(8);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(9);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetExecTradeLegId()) {
        oprot.writeI64(struct.execTradeLegId);
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetRelatedExecTradeId()) {
        oprot.writeI64(struct.relatedExecTradeId);
      }
      if (struct.isSetLegIndex()) {
        oprot.writeI16(struct.legIndex);
      }
      if (struct.isSetLegContractSummary()) {
        struct.legContractSummary.write(oprot);
      }
      if (struct.isSetTradeLegInfo()) {
        struct.tradeLegInfo.write(oprot);
      }
      if (struct.isSetAccountSummary()) {
        struct.accountSummary.write(oprot);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeLeg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.execTradeLegId = iprot.readI64();
        struct.setExecTradeLegIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.relatedExecTradeId = iprot.readI64();
        struct.setRelatedExecTradeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.legIndex = iprot.readI16();
        struct.setLegIndexIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legContractSummary = new HostingExecOrderLegContractSummary();
        struct.legContractSummary.read(iprot);
        struct.setLegContractSummaryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeLegInfo = new HostingExecTradeLegInfo();
        struct.tradeLegInfo.read(iprot);
        struct.setTradeLegInfoIsSet(true);
      }
      if (incoming.get(6)) {
        struct.accountSummary = new HostingExecOrderTradeAccountSummary();
        struct.accountSummary.read(iprot);
        struct.setAccountSummaryIsSet(true);
      }
      if (incoming.get(7)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
    }
  }

}

