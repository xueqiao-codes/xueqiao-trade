/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecTradeInfo implements org.apache.thrift.TBase<HostingExecTradeInfo, HostingExecTradeInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecTradeInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecTradeInfo");

  private static final org.apache.thrift.protocol.TField TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVolume", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDateTime", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField UPSIDE_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideTradeId", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecTradeInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecTradeInfoTupleSchemeFactory());
  }

  public double tradePrice; // optional
  public int tradeVolume; // optional
  public String tradeDateTime; // optional
  public HostingExecUpsideTradeID upsideTradeId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_PRICE((short)1, "tradePrice"),
    TRADE_VOLUME((short)2, "tradeVolume"),
    TRADE_DATE_TIME((short)3, "tradeDateTime"),
    UPSIDE_TRADE_ID((short)4, "upsideTradeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_PRICE
          return TRADE_PRICE;
        case 2: // TRADE_VOLUME
          return TRADE_VOLUME;
        case 3: // TRADE_DATE_TIME
          return TRADE_DATE_TIME;
        case 4: // UPSIDE_TRADE_ID
          return UPSIDE_TRADE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEPRICE_ISSET_ID = 0;
  private static final int __TRADEVOLUME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_PRICE,_Fields.TRADE_VOLUME,_Fields.TRADE_DATE_TIME,_Fields.UPSIDE_TRADE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tradeDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPSIDE_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("upsideTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecUpsideTradeID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecTradeInfo.class, metaDataMap);
  }

  public HostingExecTradeInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecTradeInfo(HostingExecTradeInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradePrice = other.tradePrice;
    this.tradeVolume = other.tradeVolume;
    if (other.isSetTradeDateTime()) {
      this.tradeDateTime = other.tradeDateTime;
    }
    if (other.isSetUpsideTradeId()) {
      this.upsideTradeId = new HostingExecUpsideTradeID(other.upsideTradeId);
    }
  }

  public HostingExecTradeInfo deepCopy() {
    return new HostingExecTradeInfo(this);
  }

  @Override
  public void clear() {
    setTradePriceIsSet(false);
    this.tradePrice = 0.0;
    setTradeVolumeIsSet(false);
    this.tradeVolume = 0;
    this.tradeDateTime = null;
    this.upsideTradeId = null;
  }

  public double getTradePrice() {
    return this.tradePrice;
  }

  public HostingExecTradeInfo setTradePrice(double tradePrice) {
    this.tradePrice = tradePrice;
    setTradePriceIsSet(true);
    return this;
  }

  public void unsetTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  /** Returns true if field tradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  public void setTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEPRICE_ISSET_ID, value);
  }

  public int getTradeVolume() {
    return this.tradeVolume;
  }

  public HostingExecTradeInfo setTradeVolume(int tradeVolume) {
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    return this;
  }

  public void unsetTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  public void setTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID, value);
  }

  public String getTradeDateTime() {
    return this.tradeDateTime;
  }

  public HostingExecTradeInfo setTradeDateTime(String tradeDateTime) {
    this.tradeDateTime = tradeDateTime;
    return this;
  }

  public void unsetTradeDateTime() {
    this.tradeDateTime = null;
  }

  /** Returns true if field tradeDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDateTime() {
    return this.tradeDateTime != null;
  }

  public void setTradeDateTimeIsSet(boolean value) {
    if (!value) {
      this.tradeDateTime = null;
    }
  }

  public HostingExecUpsideTradeID getUpsideTradeId() {
    return this.upsideTradeId;
  }

  public HostingExecTradeInfo setUpsideTradeId(HostingExecUpsideTradeID upsideTradeId) {
    this.upsideTradeId = upsideTradeId;
    return this;
  }

  public void unsetUpsideTradeId() {
    this.upsideTradeId = null;
  }

  /** Returns true if field upsideTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideTradeId() {
    return this.upsideTradeId != null;
  }

  public void setUpsideTradeIdIsSet(boolean value) {
    if (!value) {
      this.upsideTradeId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_PRICE:
      if (value == null) {
        unsetTradePrice();
      } else {
        setTradePrice((Double)value);
      }
      break;

    case TRADE_VOLUME:
      if (value == null) {
        unsetTradeVolume();
      } else {
        setTradeVolume((Integer)value);
      }
      break;

    case TRADE_DATE_TIME:
      if (value == null) {
        unsetTradeDateTime();
      } else {
        setTradeDateTime((String)value);
      }
      break;

    case UPSIDE_TRADE_ID:
      if (value == null) {
        unsetUpsideTradeId();
      } else {
        setUpsideTradeId((HostingExecUpsideTradeID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_PRICE:
      return Double.valueOf(getTradePrice());

    case TRADE_VOLUME:
      return Integer.valueOf(getTradeVolume());

    case TRADE_DATE_TIME:
      return getTradeDateTime();

    case UPSIDE_TRADE_ID:
      return getUpsideTradeId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_PRICE:
      return isSetTradePrice();
    case TRADE_VOLUME:
      return isSetTradeVolume();
    case TRADE_DATE_TIME:
      return isSetTradeDateTime();
    case UPSIDE_TRADE_ID:
      return isSetUpsideTradeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecTradeInfo)
      return this.equals((HostingExecTradeInfo)that);
    return false;
  }

  public boolean equals(HostingExecTradeInfo that) {
    if (that == null)
      return false;

    boolean this_present_tradePrice = true && this.isSetTradePrice();
    boolean that_present_tradePrice = true && that.isSetTradePrice();
    if (this_present_tradePrice || that_present_tradePrice) {
      if (!(this_present_tradePrice && that_present_tradePrice))
        return false;
      if (this.tradePrice != that.tradePrice)
        return false;
    }

    boolean this_present_tradeVolume = true && this.isSetTradeVolume();
    boolean that_present_tradeVolume = true && that.isSetTradeVolume();
    if (this_present_tradeVolume || that_present_tradeVolume) {
      if (!(this_present_tradeVolume && that_present_tradeVolume))
        return false;
      if (this.tradeVolume != that.tradeVolume)
        return false;
    }

    boolean this_present_tradeDateTime = true && this.isSetTradeDateTime();
    boolean that_present_tradeDateTime = true && that.isSetTradeDateTime();
    if (this_present_tradeDateTime || that_present_tradeDateTime) {
      if (!(this_present_tradeDateTime && that_present_tradeDateTime))
        return false;
      if (!this.tradeDateTime.equals(that.tradeDateTime))
        return false;
    }

    boolean this_present_upsideTradeId = true && this.isSetUpsideTradeId();
    boolean that_present_upsideTradeId = true && that.isSetUpsideTradeId();
    if (this_present_upsideTradeId || that_present_upsideTradeId) {
      if (!(this_present_upsideTradeId && that_present_upsideTradeId))
        return false;
      if (!this.upsideTradeId.equals(that.upsideTradeId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecTradeInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradePrice()).compareTo(other.isSetTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradePrice, other.tradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVolume()).compareTo(other.isSetTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVolume, other.tradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDateTime()).compareTo(other.isSetTradeDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDateTime, other.tradeDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpsideTradeId()).compareTo(other.isSetUpsideTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideTradeId, other.upsideTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecTradeInfo(");
    boolean first = true;

    if (isSetTradePrice()) {
      sb.append("tradePrice:");
      sb.append(this.tradePrice);
      first = false;
    }
    if (isSetTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("tradeVolume:");
      sb.append(this.tradeVolume);
      first = false;
    }
    if (isSetTradeDateTime()) {
      if (!first) sb.append(", ");
      sb.append("tradeDateTime:");
      if (this.tradeDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDateTime);
      }
      first = false;
    }
    if (isSetUpsideTradeId()) {
      if (!first) sb.append(", ");
      sb.append("upsideTradeId:");
      if (this.upsideTradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.upsideTradeId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (upsideTradeId != null) {
      upsideTradeId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecTradeInfoStandardSchemeFactory implements SchemeFactory {
    public HostingExecTradeInfoStandardScheme getScheme() {
      return new HostingExecTradeInfoStandardScheme();
    }
  }

  private static class HostingExecTradeInfoStandardScheme extends StandardScheme<HostingExecTradeInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecTradeInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradePrice = iprot.readDouble();
              struct.setTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVolume = iprot.readI32();
              struct.setTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeDateTime = iprot.readString();
              struct.setTradeDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UPSIDE_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.upsideTradeId = new HostingExecUpsideTradeID();
              struct.upsideTradeId.read(iprot);
              struct.setUpsideTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecTradeInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradePrice()) {
        oprot.writeFieldBegin(TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeFieldBegin(TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.tradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDateTime != null) {
        if (struct.isSetTradeDateTime()) {
          oprot.writeFieldBegin(TRADE_DATE_TIME_FIELD_DESC);
          oprot.writeString(struct.tradeDateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.upsideTradeId != null) {
        if (struct.isSetUpsideTradeId()) {
          oprot.writeFieldBegin(UPSIDE_TRADE_ID_FIELD_DESC);
          struct.upsideTradeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecTradeInfoTupleSchemeFactory implements SchemeFactory {
    public HostingExecTradeInfoTupleScheme getScheme() {
      return new HostingExecTradeInfoTupleScheme();
    }
  }

  private static class HostingExecTradeInfoTupleScheme extends TupleScheme<HostingExecTradeInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradePrice()) {
        optionals.set(0);
      }
      if (struct.isSetTradeVolume()) {
        optionals.set(1);
      }
      if (struct.isSetTradeDateTime()) {
        optionals.set(2);
      }
      if (struct.isSetUpsideTradeId()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTradePrice()) {
        oprot.writeDouble(struct.tradePrice);
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeI32(struct.tradeVolume);
      }
      if (struct.isSetTradeDateTime()) {
        oprot.writeString(struct.tradeDateTime);
      }
      if (struct.isSetUpsideTradeId()) {
        struct.upsideTradeId.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecTradeInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tradePrice = iprot.readDouble();
        struct.setTradePriceIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeVolume = iprot.readI32();
        struct.setTradeVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeDateTime = iprot.readString();
        struct.setTradeDateTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.upsideTradeId = new HostingExecUpsideTradeID();
        struct.upsideTradeId.read(iprot);
        struct.setUpsideTradeIdIsSet(true);
      }
    }
  }

}

