/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.proxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProxyUpdatePasswordReq implements org.apache.thrift.TBase<ProxyUpdatePasswordReq, ProxyUpdatePasswordReq._Fields>, java.io.Serializable, Cloneable, Comparable<ProxyUpdatePasswordReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProxyUpdatePasswordReq");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPassword", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("newPassword", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProxyUpdatePasswordReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProxyUpdatePasswordReqTupleSchemeFactory());
  }

  public int companyId; // optional
  public String userName; // optional
  public String oldPassword; // required
  public String newPassword; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "companyId"),
    USER_NAME((short)2, "userName"),
    OLD_PASSWORD((short)3, "oldPassword"),
    NEW_PASSWORD((short)4, "newPassword");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // OLD_PASSWORD
          return OLD_PASSWORD;
        case 4: // NEW_PASSWORD
          return NEW_PASSWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.USER_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OLD_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("oldPassword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("newPassword", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProxyUpdatePasswordReq.class, metaDataMap);
  }

  public ProxyUpdatePasswordReq() {
  }

  public ProxyUpdatePasswordReq(
    String oldPassword,
    String newPassword)
  {
    this();
    this.oldPassword = oldPassword;
    this.newPassword = newPassword;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProxyUpdatePasswordReq(ProxyUpdatePasswordReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.companyId = other.companyId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetOldPassword()) {
      this.oldPassword = other.oldPassword;
    }
    if (other.isSetNewPassword()) {
      this.newPassword = other.newPassword;
    }
  }

  public ProxyUpdatePasswordReq deepCopy() {
    return new ProxyUpdatePasswordReq(this);
  }

  @Override
  public void clear() {
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.userName = null;
    this.oldPassword = null;
    this.newPassword = null;
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public ProxyUpdatePasswordReq setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public ProxyUpdatePasswordReq setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getOldPassword() {
    return this.oldPassword;
  }

  public ProxyUpdatePasswordReq setOldPassword(String oldPassword) {
    this.oldPassword = oldPassword;
    return this;
  }

  public void unsetOldPassword() {
    this.oldPassword = null;
  }

  /** Returns true if field oldPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetOldPassword() {
    return this.oldPassword != null;
  }

  public void setOldPasswordIsSet(boolean value) {
    if (!value) {
      this.oldPassword = null;
    }
  }

  public String getNewPassword() {
    return this.newPassword;
  }

  public ProxyUpdatePasswordReq setNewPassword(String newPassword) {
    this.newPassword = newPassword;
    return this;
  }

  public void unsetNewPassword() {
    this.newPassword = null;
  }

  /** Returns true if field newPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPassword() {
    return this.newPassword != null;
  }

  public void setNewPasswordIsSet(boolean value) {
    if (!value) {
      this.newPassword = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case OLD_PASSWORD:
      if (value == null) {
        unsetOldPassword();
      } else {
        setOldPassword((String)value);
      }
      break;

    case NEW_PASSWORD:
      if (value == null) {
        unsetNewPassword();
      } else {
        setNewPassword((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case USER_NAME:
      return getUserName();

    case OLD_PASSWORD:
      return getOldPassword();

    case NEW_PASSWORD:
      return getNewPassword();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompanyId();
    case USER_NAME:
      return isSetUserName();
    case OLD_PASSWORD:
      return isSetOldPassword();
    case NEW_PASSWORD:
      return isSetNewPassword();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProxyUpdatePasswordReq)
      return this.equals((ProxyUpdatePasswordReq)that);
    return false;
  }

  public boolean equals(ProxyUpdatePasswordReq that) {
    if (that == null)
      return false;

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_oldPassword = true && this.isSetOldPassword();
    boolean that_present_oldPassword = true && that.isSetOldPassword();
    if (this_present_oldPassword || that_present_oldPassword) {
      if (!(this_present_oldPassword && that_present_oldPassword))
        return false;
      if (!this.oldPassword.equals(that.oldPassword))
        return false;
    }

    boolean this_present_newPassword = true && this.isSetNewPassword();
    boolean that_present_newPassword = true && that.isSetNewPassword();
    if (this_present_newPassword || that_present_newPassword) {
      if (!(this_present_newPassword && that_present_newPassword))
        return false;
      if (!this.newPassword.equals(that.newPassword))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProxyUpdatePasswordReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOldPassword()).compareTo(other.isSetOldPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPassword, other.oldPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewPassword()).compareTo(other.isSetNewPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPassword, other.newPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProxyUpdatePasswordReq(");
    boolean first = true;

    if (isSetCompanyId()) {
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("oldPassword:");
    if (this.oldPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.oldPassword);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newPassword:");
    if (this.newPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.newPassword);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (oldPassword == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'oldPassword' was not present! Struct: " + toString());
    }
    if (newPassword == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPassword' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProxyUpdatePasswordReqStandardSchemeFactory implements SchemeFactory {
    public ProxyUpdatePasswordReqStandardScheme getScheme() {
      return new ProxyUpdatePasswordReqStandardScheme();
    }
  }

  private static class ProxyUpdatePasswordReqStandardScheme extends StandardScheme<ProxyUpdatePasswordReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProxyUpdatePasswordReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oldPassword = iprot.readString();
              struct.setOldPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newPassword = iprot.readString();
              struct.setNewPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProxyUpdatePasswordReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.oldPassword != null) {
        oprot.writeFieldBegin(OLD_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.oldPassword);
        oprot.writeFieldEnd();
      }
      if (struct.newPassword != null) {
        oprot.writeFieldBegin(NEW_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.newPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProxyUpdatePasswordReqTupleSchemeFactory implements SchemeFactory {
    public ProxyUpdatePasswordReqTupleScheme getScheme() {
      return new ProxyUpdatePasswordReqTupleScheme();
    }
  }

  private static class ProxyUpdatePasswordReqTupleScheme extends TupleScheme<ProxyUpdatePasswordReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProxyUpdatePasswordReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.oldPassword);
      oprot.writeString(struct.newPassword);
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProxyUpdatePasswordReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.oldPassword = iprot.readString();
      struct.setOldPasswordIsSet(true);
      struct.newPassword = iprot.readString();
      struct.setNewPasswordIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
    }
  }

}

