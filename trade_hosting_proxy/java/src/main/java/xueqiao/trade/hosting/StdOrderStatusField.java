/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StdOrderStatusField implements org.apache.thrift.TBase<StdOrderStatusField, StdOrderStatusField._Fields>, java.io.Serializable, Cloneable, Comparable<StdOrderStatusField> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StdOrderStatusField");

  private static final org.apache.thrift.protocol.TField SLED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledAccountId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ALREADY_TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("alreadyTradeVolume", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LEFT_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("leftVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField AVG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("avgPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField INSERT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("insertTimestamp", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTimestamp", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CANCEL_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelTimestamp", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField SAVE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("saveString", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField ORDER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderState", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField STATUS_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("statusMsg", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StdOrderStatusFieldStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StdOrderStatusFieldTupleSchemeFactory());
  }

  public String sledId; // optional
  public int sledAccountId; // optional
  public int userId; // optional
  public int sledContractId; // optional
  public double price; // optional
  public int quantity; // optional
  /**
   * 
   * @see StdDirectionType
   */
  public StdDirectionType direction; // optional
  public int alreadyTradeVolume; // optional
  public int leftVolume; // optional
  public double avgPrice; // optional
  public long timestamp; // optional
  public long insertTimestamp; // optional
  public long updateTimestamp; // optional
  public long cancelTimestamp; // optional
  public String saveString; // optional
  /**
   * 
   * @see StdOrderStateType
   */
  public StdOrderStateType orderState; // optional
  public String statusMsg; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_ID((short)1, "sledId"),
    SLED_ACCOUNT_ID((short)2, "sledAccountId"),
    USER_ID((short)3, "userId"),
    SLED_CONTRACT_ID((short)4, "sledContractId"),
    PRICE((short)5, "price"),
    QUANTITY((short)6, "quantity"),
    /**
     * 
     * @see StdDirectionType
     */
    DIRECTION((short)7, "direction"),
    ALREADY_TRADE_VOLUME((short)8, "alreadyTradeVolume"),
    LEFT_VOLUME((short)9, "leftVolume"),
    AVG_PRICE((short)10, "avgPrice"),
    TIMESTAMP((short)11, "timestamp"),
    INSERT_TIMESTAMP((short)12, "insertTimestamp"),
    UPDATE_TIMESTAMP((short)13, "updateTimestamp"),
    CANCEL_TIMESTAMP((short)14, "cancelTimestamp"),
    SAVE_STRING((short)15, "saveString"),
    /**
     * 
     * @see StdOrderStateType
     */
    ORDER_STATE((short)16, "orderState"),
    STATUS_MSG((short)17, "statusMsg");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_ID
          return SLED_ID;
        case 2: // SLED_ACCOUNT_ID
          return SLED_ACCOUNT_ID;
        case 3: // USER_ID
          return USER_ID;
        case 4: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 5: // PRICE
          return PRICE;
        case 6: // QUANTITY
          return QUANTITY;
        case 7: // DIRECTION
          return DIRECTION;
        case 8: // ALREADY_TRADE_VOLUME
          return ALREADY_TRADE_VOLUME;
        case 9: // LEFT_VOLUME
          return LEFT_VOLUME;
        case 10: // AVG_PRICE
          return AVG_PRICE;
        case 11: // TIMESTAMP
          return TIMESTAMP;
        case 12: // INSERT_TIMESTAMP
          return INSERT_TIMESTAMP;
        case 13: // UPDATE_TIMESTAMP
          return UPDATE_TIMESTAMP;
        case 14: // CANCEL_TIMESTAMP
          return CANCEL_TIMESTAMP;
        case 15: // SAVE_STRING
          return SAVE_STRING;
        case 16: // ORDER_STATE
          return ORDER_STATE;
        case 17: // STATUS_MSG
          return STATUS_MSG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDACCOUNTID_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __SLEDCONTRACTID_ISSET_ID = 2;
  private static final int __PRICE_ISSET_ID = 3;
  private static final int __QUANTITY_ISSET_ID = 4;
  private static final int __ALREADYTRADEVOLUME_ISSET_ID = 5;
  private static final int __LEFTVOLUME_ISSET_ID = 6;
  private static final int __AVGPRICE_ISSET_ID = 7;
  private static final int __TIMESTAMP_ISSET_ID = 8;
  private static final int __INSERTTIMESTAMP_ISSET_ID = 9;
  private static final int __UPDATETIMESTAMP_ISSET_ID = 10;
  private static final int __CANCELTIMESTAMP_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_ID,_Fields.SLED_ACCOUNT_ID,_Fields.USER_ID,_Fields.SLED_CONTRACT_ID,_Fields.PRICE,_Fields.QUANTITY,_Fields.DIRECTION,_Fields.ALREADY_TRADE_VOLUME,_Fields.LEFT_VOLUME,_Fields.AVG_PRICE,_Fields.TIMESTAMP,_Fields.INSERT_TIMESTAMP,_Fields.UPDATE_TIMESTAMP,_Fields.CANCEL_TIMESTAMP,_Fields.SAVE_STRING,_Fields.ORDER_STATE,_Fields.STATUS_MSG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_ID, new org.apache.thrift.meta_data.FieldMetaData("sledId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdDirectionType.class)));
    tmpMap.put(_Fields.ALREADY_TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("alreadyTradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LEFT_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("leftVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("avgPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INSERT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("insertTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPDATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("updateTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CANCEL_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("cancelTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAVE_STRING, new org.apache.thrift.meta_data.FieldMetaData("saveString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_STATE, new org.apache.thrift.meta_data.FieldMetaData("orderState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StdOrderStateType.class)));
    tmpMap.put(_Fields.STATUS_MSG, new org.apache.thrift.meta_data.FieldMetaData("statusMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StdOrderStatusField.class, metaDataMap);
  }

  public StdOrderStatusField() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StdOrderStatusField(StdOrderStatusField other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledId()) {
      this.sledId = other.sledId;
    }
    this.sledAccountId = other.sledAccountId;
    this.userId = other.userId;
    this.sledContractId = other.sledContractId;
    this.price = other.price;
    this.quantity = other.quantity;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    this.alreadyTradeVolume = other.alreadyTradeVolume;
    this.leftVolume = other.leftVolume;
    this.avgPrice = other.avgPrice;
    this.timestamp = other.timestamp;
    this.insertTimestamp = other.insertTimestamp;
    this.updateTimestamp = other.updateTimestamp;
    this.cancelTimestamp = other.cancelTimestamp;
    if (other.isSetSaveString()) {
      this.saveString = other.saveString;
    }
    if (other.isSetOrderState()) {
      this.orderState = other.orderState;
    }
    if (other.isSetStatusMsg()) {
      this.statusMsg = other.statusMsg;
    }
  }

  public StdOrderStatusField deepCopy() {
    return new StdOrderStatusField(this);
  }

  @Override
  public void clear() {
    this.sledId = null;
    setSledAccountIdIsSet(false);
    this.sledAccountId = 0;
    setUserIdIsSet(false);
    this.userId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.direction = null;
    setAlreadyTradeVolumeIsSet(false);
    this.alreadyTradeVolume = 0;
    setLeftVolumeIsSet(false);
    this.leftVolume = 0;
    setAvgPriceIsSet(false);
    this.avgPrice = 0.0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    setInsertTimestampIsSet(false);
    this.insertTimestamp = 0;
    setUpdateTimestampIsSet(false);
    this.updateTimestamp = 0;
    setCancelTimestampIsSet(false);
    this.cancelTimestamp = 0;
    this.saveString = null;
    this.orderState = null;
    this.statusMsg = null;
  }

  public String getSledId() {
    return this.sledId;
  }

  public StdOrderStatusField setSledId(String sledId) {
    this.sledId = sledId;
    return this;
  }

  public void unsetSledId() {
    this.sledId = null;
  }

  /** Returns true if field sledId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledId() {
    return this.sledId != null;
  }

  public void setSledIdIsSet(boolean value) {
    if (!value) {
      this.sledId = null;
    }
  }

  public int getSledAccountId() {
    return this.sledAccountId;
  }

  public StdOrderStatusField setSledAccountId(int sledAccountId) {
    this.sledAccountId = sledAccountId;
    setSledAccountIdIsSet(true);
    return this;
  }

  public void unsetSledAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  /** Returns true if field sledAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID);
  }

  public void setSledAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDACCOUNTID_ISSET_ID, value);
  }

  public int getUserId() {
    return this.userId;
  }

  public StdOrderStatusField setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public StdOrderStatusField setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public StdOrderStatusField setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getQuantity() {
    return this.quantity;
  }

  public StdOrderStatusField setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * 
   * @see StdDirectionType
   */
  public StdDirectionType getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see StdDirectionType
   */
  public StdOrderStatusField setDirection(StdDirectionType direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public int getAlreadyTradeVolume() {
    return this.alreadyTradeVolume;
  }

  public StdOrderStatusField setAlreadyTradeVolume(int alreadyTradeVolume) {
    this.alreadyTradeVolume = alreadyTradeVolume;
    setAlreadyTradeVolumeIsSet(true);
    return this;
  }

  public void unsetAlreadyTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALREADYTRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field alreadyTradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetAlreadyTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ALREADYTRADEVOLUME_ISSET_ID);
  }

  public void setAlreadyTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALREADYTRADEVOLUME_ISSET_ID, value);
  }

  public int getLeftVolume() {
    return this.leftVolume;
  }

  public StdOrderStatusField setLeftVolume(int leftVolume) {
    this.leftVolume = leftVolume;
    setLeftVolumeIsSet(true);
    return this;
  }

  public void unsetLeftVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEFTVOLUME_ISSET_ID);
  }

  /** Returns true if field leftVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetLeftVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __LEFTVOLUME_ISSET_ID);
  }

  public void setLeftVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEFTVOLUME_ISSET_ID, value);
  }

  public double getAvgPrice() {
    return this.avgPrice;
  }

  public StdOrderStatusField setAvgPrice(double avgPrice) {
    this.avgPrice = avgPrice;
    setAvgPriceIsSet(true);
    return this;
  }

  public void unsetAvgPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVGPRICE_ISSET_ID);
  }

  /** Returns true if field avgPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAvgPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVGPRICE_ISSET_ID);
  }

  public void setAvgPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVGPRICE_ISSET_ID, value);
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public StdOrderStatusField setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  public long getInsertTimestamp() {
    return this.insertTimestamp;
  }

  public StdOrderStatusField setInsertTimestamp(long insertTimestamp) {
    this.insertTimestamp = insertTimestamp;
    setInsertTimestampIsSet(true);
    return this;
  }

  public void unsetInsertTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field insertTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetInsertTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID);
  }

  public void setInsertTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INSERTTIMESTAMP_ISSET_ID, value);
  }

  public long getUpdateTimestamp() {
    return this.updateTimestamp;
  }

  public StdOrderStatusField setUpdateTimestamp(long updateTimestamp) {
    this.updateTimestamp = updateTimestamp;
    setUpdateTimestampIsSet(true);
    return this;
  }

  public void unsetUpdateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field updateTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIMESTAMP_ISSET_ID);
  }

  public void setUpdateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIMESTAMP_ISSET_ID, value);
  }

  public long getCancelTimestamp() {
    return this.cancelTimestamp;
  }

  public StdOrderStatusField setCancelTimestamp(long cancelTimestamp) {
    this.cancelTimestamp = cancelTimestamp;
    setCancelTimestampIsSet(true);
    return this;
  }

  public void unsetCancelTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field cancelTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELTIMESTAMP_ISSET_ID);
  }

  public void setCancelTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELTIMESTAMP_ISSET_ID, value);
  }

  public String getSaveString() {
    return this.saveString;
  }

  public StdOrderStatusField setSaveString(String saveString) {
    this.saveString = saveString;
    return this;
  }

  public void unsetSaveString() {
    this.saveString = null;
  }

  /** Returns true if field saveString is set (has been assigned a value) and false otherwise */
  public boolean isSetSaveString() {
    return this.saveString != null;
  }

  public void setSaveStringIsSet(boolean value) {
    if (!value) {
      this.saveString = null;
    }
  }

  /**
   * 
   * @see StdOrderStateType
   */
  public StdOrderStateType getOrderState() {
    return this.orderState;
  }

  /**
   * 
   * @see StdOrderStateType
   */
  public StdOrderStatusField setOrderState(StdOrderStateType orderState) {
    this.orderState = orderState;
    return this;
  }

  public void unsetOrderState() {
    this.orderState = null;
  }

  /** Returns true if field orderState is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return this.orderState != null;
  }

  public void setOrderStateIsSet(boolean value) {
    if (!value) {
      this.orderState = null;
    }
  }

  public String getStatusMsg() {
    return this.statusMsg;
  }

  public StdOrderStatusField setStatusMsg(String statusMsg) {
    this.statusMsg = statusMsg;
    return this;
  }

  public void unsetStatusMsg() {
    this.statusMsg = null;
  }

  /** Returns true if field statusMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusMsg() {
    return this.statusMsg != null;
  }

  public void setStatusMsgIsSet(boolean value) {
    if (!value) {
      this.statusMsg = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_ID:
      if (value == null) {
        unsetSledId();
      } else {
        setSledId((String)value);
      }
      break;

    case SLED_ACCOUNT_ID:
      if (value == null) {
        unsetSledAccountId();
      } else {
        setSledAccountId((Integer)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((StdDirectionType)value);
      }
      break;

    case ALREADY_TRADE_VOLUME:
      if (value == null) {
        unsetAlreadyTradeVolume();
      } else {
        setAlreadyTradeVolume((Integer)value);
      }
      break;

    case LEFT_VOLUME:
      if (value == null) {
        unsetLeftVolume();
      } else {
        setLeftVolume((Integer)value);
      }
      break;

    case AVG_PRICE:
      if (value == null) {
        unsetAvgPrice();
      } else {
        setAvgPrice((Double)value);
      }
      break;

    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case INSERT_TIMESTAMP:
      if (value == null) {
        unsetInsertTimestamp();
      } else {
        setInsertTimestamp((Long)value);
      }
      break;

    case UPDATE_TIMESTAMP:
      if (value == null) {
        unsetUpdateTimestamp();
      } else {
        setUpdateTimestamp((Long)value);
      }
      break;

    case CANCEL_TIMESTAMP:
      if (value == null) {
        unsetCancelTimestamp();
      } else {
        setCancelTimestamp((Long)value);
      }
      break;

    case SAVE_STRING:
      if (value == null) {
        unsetSaveString();
      } else {
        setSaveString((String)value);
      }
      break;

    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((StdOrderStateType)value);
      }
      break;

    case STATUS_MSG:
      if (value == null) {
        unsetStatusMsg();
      } else {
        setStatusMsg((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_ID:
      return getSledId();

    case SLED_ACCOUNT_ID:
      return Integer.valueOf(getSledAccountId());

    case USER_ID:
      return Integer.valueOf(getUserId());

    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    case PRICE:
      return Double.valueOf(getPrice());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case DIRECTION:
      return getDirection();

    case ALREADY_TRADE_VOLUME:
      return Integer.valueOf(getAlreadyTradeVolume());

    case LEFT_VOLUME:
      return Integer.valueOf(getLeftVolume());

    case AVG_PRICE:
      return Double.valueOf(getAvgPrice());

    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case INSERT_TIMESTAMP:
      return Long.valueOf(getInsertTimestamp());

    case UPDATE_TIMESTAMP:
      return Long.valueOf(getUpdateTimestamp());

    case CANCEL_TIMESTAMP:
      return Long.valueOf(getCancelTimestamp());

    case SAVE_STRING:
      return getSaveString();

    case ORDER_STATE:
      return getOrderState();

    case STATUS_MSG:
      return getStatusMsg();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_ID:
      return isSetSledId();
    case SLED_ACCOUNT_ID:
      return isSetSledAccountId();
    case USER_ID:
      return isSetUserId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case PRICE:
      return isSetPrice();
    case QUANTITY:
      return isSetQuantity();
    case DIRECTION:
      return isSetDirection();
    case ALREADY_TRADE_VOLUME:
      return isSetAlreadyTradeVolume();
    case LEFT_VOLUME:
      return isSetLeftVolume();
    case AVG_PRICE:
      return isSetAvgPrice();
    case TIMESTAMP:
      return isSetTimestamp();
    case INSERT_TIMESTAMP:
      return isSetInsertTimestamp();
    case UPDATE_TIMESTAMP:
      return isSetUpdateTimestamp();
    case CANCEL_TIMESTAMP:
      return isSetCancelTimestamp();
    case SAVE_STRING:
      return isSetSaveString();
    case ORDER_STATE:
      return isSetOrderState();
    case STATUS_MSG:
      return isSetStatusMsg();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StdOrderStatusField)
      return this.equals((StdOrderStatusField)that);
    return false;
  }

  public boolean equals(StdOrderStatusField that) {
    if (that == null)
      return false;

    boolean this_present_sledId = true && this.isSetSledId();
    boolean that_present_sledId = true && that.isSetSledId();
    if (this_present_sledId || that_present_sledId) {
      if (!(this_present_sledId && that_present_sledId))
        return false;
      if (!this.sledId.equals(that.sledId))
        return false;
    }

    boolean this_present_sledAccountId = true && this.isSetSledAccountId();
    boolean that_present_sledAccountId = true && that.isSetSledAccountId();
    if (this_present_sledAccountId || that_present_sledAccountId) {
      if (!(this_present_sledAccountId && that_present_sledAccountId))
        return false;
      if (this.sledAccountId != that.sledAccountId)
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_alreadyTradeVolume = true && this.isSetAlreadyTradeVolume();
    boolean that_present_alreadyTradeVolume = true && that.isSetAlreadyTradeVolume();
    if (this_present_alreadyTradeVolume || that_present_alreadyTradeVolume) {
      if (!(this_present_alreadyTradeVolume && that_present_alreadyTradeVolume))
        return false;
      if (this.alreadyTradeVolume != that.alreadyTradeVolume)
        return false;
    }

    boolean this_present_leftVolume = true && this.isSetLeftVolume();
    boolean that_present_leftVolume = true && that.isSetLeftVolume();
    if (this_present_leftVolume || that_present_leftVolume) {
      if (!(this_present_leftVolume && that_present_leftVolume))
        return false;
      if (this.leftVolume != that.leftVolume)
        return false;
    }

    boolean this_present_avgPrice = true && this.isSetAvgPrice();
    boolean that_present_avgPrice = true && that.isSetAvgPrice();
    if (this_present_avgPrice || that_present_avgPrice) {
      if (!(this_present_avgPrice && that_present_avgPrice))
        return false;
      if (this.avgPrice != that.avgPrice)
        return false;
    }

    boolean this_present_timestamp = true && this.isSetTimestamp();
    boolean that_present_timestamp = true && that.isSetTimestamp();
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_insertTimestamp = true && this.isSetInsertTimestamp();
    boolean that_present_insertTimestamp = true && that.isSetInsertTimestamp();
    if (this_present_insertTimestamp || that_present_insertTimestamp) {
      if (!(this_present_insertTimestamp && that_present_insertTimestamp))
        return false;
      if (this.insertTimestamp != that.insertTimestamp)
        return false;
    }

    boolean this_present_updateTimestamp = true && this.isSetUpdateTimestamp();
    boolean that_present_updateTimestamp = true && that.isSetUpdateTimestamp();
    if (this_present_updateTimestamp || that_present_updateTimestamp) {
      if (!(this_present_updateTimestamp && that_present_updateTimestamp))
        return false;
      if (this.updateTimestamp != that.updateTimestamp)
        return false;
    }

    boolean this_present_cancelTimestamp = true && this.isSetCancelTimestamp();
    boolean that_present_cancelTimestamp = true && that.isSetCancelTimestamp();
    if (this_present_cancelTimestamp || that_present_cancelTimestamp) {
      if (!(this_present_cancelTimestamp && that_present_cancelTimestamp))
        return false;
      if (this.cancelTimestamp != that.cancelTimestamp)
        return false;
    }

    boolean this_present_saveString = true && this.isSetSaveString();
    boolean that_present_saveString = true && that.isSetSaveString();
    if (this_present_saveString || that_present_saveString) {
      if (!(this_present_saveString && that_present_saveString))
        return false;
      if (!this.saveString.equals(that.saveString))
        return false;
    }

    boolean this_present_orderState = true && this.isSetOrderState();
    boolean that_present_orderState = true && that.isSetOrderState();
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (!this.orderState.equals(that.orderState))
        return false;
    }

    boolean this_present_statusMsg = true && this.isSetStatusMsg();
    boolean that_present_statusMsg = true && that.isSetStatusMsg();
    if (this_present_statusMsg || that_present_statusMsg) {
      if (!(this_present_statusMsg && that_present_statusMsg))
        return false;
      if (!this.statusMsg.equals(that.statusMsg))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StdOrderStatusField other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledId()).compareTo(other.isSetSledId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledId, other.sledId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledAccountId()).compareTo(other.isSetSledAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledAccountId, other.sledAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlreadyTradeVolume()).compareTo(other.isSetAlreadyTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlreadyTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alreadyTradeVolume, other.alreadyTradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeftVolume()).compareTo(other.isSetLeftVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeftVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leftVolume, other.leftVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvgPrice()).compareTo(other.isSetAvgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvgPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.avgPrice, other.avgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInsertTimestamp()).compareTo(other.isSetInsertTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInsertTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.insertTimestamp, other.insertTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTimestamp()).compareTo(other.isSetUpdateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTimestamp, other.updateTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelTimestamp()).compareTo(other.isSetCancelTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelTimestamp, other.cancelTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSaveString()).compareTo(other.isSetSaveString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaveString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saveString, other.saveString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(other.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderState, other.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusMsg()).compareTo(other.isSetStatusMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusMsg, other.statusMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StdOrderStatusField(");
    boolean first = true;

    if (isSetSledId()) {
      sb.append("sledId:");
      if (this.sledId == null) {
        sb.append("null");
      } else {
        sb.append(this.sledId);
      }
      first = false;
    }
    if (isSetSledAccountId()) {
      if (!first) sb.append(", ");
      sb.append("sledAccountId:");
      sb.append(this.sledAccountId);
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetAlreadyTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("alreadyTradeVolume:");
      sb.append(this.alreadyTradeVolume);
      first = false;
    }
    if (isSetLeftVolume()) {
      if (!first) sb.append(", ");
      sb.append("leftVolume:");
      sb.append(this.leftVolume);
      first = false;
    }
    if (isSetAvgPrice()) {
      if (!first) sb.append(", ");
      sb.append("avgPrice:");
      sb.append(this.avgPrice);
      first = false;
    }
    if (isSetTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
    }
    if (isSetInsertTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("insertTimestamp:");
      sb.append(this.insertTimestamp);
      first = false;
    }
    if (isSetUpdateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("updateTimestamp:");
      sb.append(this.updateTimestamp);
      first = false;
    }
    if (isSetCancelTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("cancelTimestamp:");
      sb.append(this.cancelTimestamp);
      first = false;
    }
    if (isSetSaveString()) {
      if (!first) sb.append(", ");
      sb.append("saveString:");
      if (this.saveString == null) {
        sb.append("null");
      } else {
        sb.append(this.saveString);
      }
      first = false;
    }
    if (isSetOrderState()) {
      if (!first) sb.append(", ");
      sb.append("orderState:");
      if (this.orderState == null) {
        sb.append("null");
      } else {
        sb.append(this.orderState);
      }
      first = false;
    }
    if (isSetStatusMsg()) {
      if (!first) sb.append(", ");
      sb.append("statusMsg:");
      if (this.statusMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.statusMsg);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StdOrderStatusFieldStandardSchemeFactory implements SchemeFactory {
    public StdOrderStatusFieldStandardScheme getScheme() {
      return new StdOrderStatusFieldStandardScheme();
    }
  }

  private static class StdOrderStatusFieldStandardScheme extends StandardScheme<StdOrderStatusField> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StdOrderStatusField struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledId = iprot.readString();
              struct.setSledIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledAccountId = iprot.readI32();
              struct.setSledAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = StdDirectionType.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ALREADY_TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.alreadyTradeVolume = iprot.readI32();
              struct.setAlreadyTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LEFT_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leftVolume = iprot.readI32();
              struct.setLeftVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AVG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.avgPrice = iprot.readDouble();
              struct.setAvgPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // INSERT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.insertTimestamp = iprot.readI64();
              struct.setInsertTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTimestamp = iprot.readI64();
              struct.setUpdateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CANCEL_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.cancelTimestamp = iprot.readI64();
              struct.setCancelTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // SAVE_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saveString = iprot.readString();
              struct.setSaveStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // ORDER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderState = StdOrderStateType.findByValue(iprot.readI32());
              struct.setOrderStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // STATUS_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.statusMsg = iprot.readString();
              struct.setStatusMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StdOrderStatusField struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledId != null) {
        if (struct.isSetSledId()) {
          oprot.writeFieldBegin(SLED_ID_FIELD_DESC);
          oprot.writeString(struct.sledId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeFieldBegin(SLED_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUserId()) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlreadyTradeVolume()) {
        oprot.writeFieldBegin(ALREADY_TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.alreadyTradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeftVolume()) {
        oprot.writeFieldBegin(LEFT_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.leftVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvgPrice()) {
        oprot.writeFieldBegin(AVG_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.avgPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimestamp()) {
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInsertTimestamp()) {
        oprot.writeFieldBegin(INSERT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.insertTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTimestamp()) {
        oprot.writeFieldBegin(UPDATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.updateTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCancelTimestamp()) {
        oprot.writeFieldBegin(CANCEL_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.cancelTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.saveString != null) {
        if (struct.isSetSaveString()) {
          oprot.writeFieldBegin(SAVE_STRING_FIELD_DESC);
          oprot.writeString(struct.saveString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderState != null) {
        if (struct.isSetOrderState()) {
          oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
          oprot.writeI32(struct.orderState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.statusMsg != null) {
        if (struct.isSetStatusMsg()) {
          oprot.writeFieldBegin(STATUS_MSG_FIELD_DESC);
          oprot.writeString(struct.statusMsg);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StdOrderStatusFieldTupleSchemeFactory implements SchemeFactory {
    public StdOrderStatusFieldTupleScheme getScheme() {
      return new StdOrderStatusFieldTupleScheme();
    }
  }

  private static class StdOrderStatusFieldTupleScheme extends TupleScheme<StdOrderStatusField> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StdOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledId()) {
        optionals.set(0);
      }
      if (struct.isSetSledAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetUserId()) {
        optionals.set(2);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(3);
      }
      if (struct.isSetPrice()) {
        optionals.set(4);
      }
      if (struct.isSetQuantity()) {
        optionals.set(5);
      }
      if (struct.isSetDirection()) {
        optionals.set(6);
      }
      if (struct.isSetAlreadyTradeVolume()) {
        optionals.set(7);
      }
      if (struct.isSetLeftVolume()) {
        optionals.set(8);
      }
      if (struct.isSetAvgPrice()) {
        optionals.set(9);
      }
      if (struct.isSetTimestamp()) {
        optionals.set(10);
      }
      if (struct.isSetInsertTimestamp()) {
        optionals.set(11);
      }
      if (struct.isSetUpdateTimestamp()) {
        optionals.set(12);
      }
      if (struct.isSetCancelTimestamp()) {
        optionals.set(13);
      }
      if (struct.isSetSaveString()) {
        optionals.set(14);
      }
      if (struct.isSetOrderState()) {
        optionals.set(15);
      }
      if (struct.isSetStatusMsg()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSledId()) {
        oprot.writeString(struct.sledId);
      }
      if (struct.isSetSledAccountId()) {
        oprot.writeI32(struct.sledAccountId);
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetAlreadyTradeVolume()) {
        oprot.writeI32(struct.alreadyTradeVolume);
      }
      if (struct.isSetLeftVolume()) {
        oprot.writeI32(struct.leftVolume);
      }
      if (struct.isSetAvgPrice()) {
        oprot.writeDouble(struct.avgPrice);
      }
      if (struct.isSetTimestamp()) {
        oprot.writeI64(struct.timestamp);
      }
      if (struct.isSetInsertTimestamp()) {
        oprot.writeI64(struct.insertTimestamp);
      }
      if (struct.isSetUpdateTimestamp()) {
        oprot.writeI64(struct.updateTimestamp);
      }
      if (struct.isSetCancelTimestamp()) {
        oprot.writeI64(struct.cancelTimestamp);
      }
      if (struct.isSetSaveString()) {
        oprot.writeString(struct.saveString);
      }
      if (struct.isSetOrderState()) {
        oprot.writeI32(struct.orderState.getValue());
      }
      if (struct.isSetStatusMsg()) {
        oprot.writeString(struct.statusMsg);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StdOrderStatusField struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.sledId = iprot.readString();
        struct.setSledIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledAccountId = iprot.readI32();
        struct.setSledAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.direction = StdDirectionType.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.alreadyTradeVolume = iprot.readI32();
        struct.setAlreadyTradeVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.leftVolume = iprot.readI32();
        struct.setLeftVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.avgPrice = iprot.readDouble();
        struct.setAvgPriceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.timestamp = iprot.readI64();
        struct.setTimestampIsSet(true);
      }
      if (incoming.get(11)) {
        struct.insertTimestamp = iprot.readI64();
        struct.setInsertTimestampIsSet(true);
      }
      if (incoming.get(12)) {
        struct.updateTimestamp = iprot.readI64();
        struct.setUpdateTimestampIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cancelTimestamp = iprot.readI64();
        struct.setCancelTimestampIsSet(true);
      }
      if (incoming.get(14)) {
        struct.saveString = iprot.readString();
        struct.setSaveStringIsSet(true);
      }
      if (incoming.get(15)) {
        struct.orderState = StdOrderStateType.findByValue(iprot.readI32());
        struct.setOrderStateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.statusMsg = iprot.readString();
        struct.setStatusMsgIsSet(true);
      }
    }
  }

}

