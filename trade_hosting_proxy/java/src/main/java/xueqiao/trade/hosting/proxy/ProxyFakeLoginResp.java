/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.proxy;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ProxyFakeLoginResp implements org.apache.thrift.TBase<ProxyFakeLoginResp, ProxyFakeLoginResp._Fields>, java.io.Serializable, Cloneable, Comparable<ProxyFakeLoginResp> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProxyFakeLoginResp");

  private static final org.apache.thrift.protocol.TField COMPANY_GROUPS_FIELD_DESC = new org.apache.thrift.protocol.TField("companyGroups", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("companyCode", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ProxyFakeLoginRespStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ProxyFakeLoginRespTupleSchemeFactory());
  }

  public List<ProxyCompanyGroup> companyGroups; // optional
  public String companyCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_GROUPS((short)1, "companyGroups"),
    COMPANY_CODE((short)2, "companyCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_GROUPS
          return COMPANY_GROUPS;
        case 2: // COMPANY_CODE
          return COMPANY_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.COMPANY_GROUPS,_Fields.COMPANY_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_GROUPS, new org.apache.thrift.meta_data.FieldMetaData("companyGroups", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProxyCompanyGroup.class))));
    tmpMap.put(_Fields.COMPANY_CODE, new org.apache.thrift.meta_data.FieldMetaData("companyCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProxyFakeLoginResp.class, metaDataMap);
  }

  public ProxyFakeLoginResp() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProxyFakeLoginResp(ProxyFakeLoginResp other) {
    if (other.isSetCompanyGroups()) {
      List<ProxyCompanyGroup> __this__companyGroups = new ArrayList<ProxyCompanyGroup>(other.companyGroups.size());
      for (ProxyCompanyGroup other_element : other.companyGroups) {
        __this__companyGroups.add(new ProxyCompanyGroup(other_element));
      }
      this.companyGroups = __this__companyGroups;
    }
    if (other.isSetCompanyCode()) {
      this.companyCode = other.companyCode;
    }
  }

  public ProxyFakeLoginResp deepCopy() {
    return new ProxyFakeLoginResp(this);
  }

  @Override
  public void clear() {
    this.companyGroups = null;
    this.companyCode = null;
  }

  public int getCompanyGroupsSize() {
    return (this.companyGroups == null) ? 0 : this.companyGroups.size();
  }

  public java.util.Iterator<ProxyCompanyGroup> getCompanyGroupsIterator() {
    return (this.companyGroups == null) ? null : this.companyGroups.iterator();
  }

  public void addToCompanyGroups(ProxyCompanyGroup elem) {
    if (this.companyGroups == null) {
      this.companyGroups = new ArrayList<ProxyCompanyGroup>();
    }
    this.companyGroups.add(elem);
  }

  public List<ProxyCompanyGroup> getCompanyGroups() {
    return this.companyGroups;
  }

  public ProxyFakeLoginResp setCompanyGroups(List<ProxyCompanyGroup> companyGroups) {
    this.companyGroups = companyGroups;
    return this;
  }

  public void unsetCompanyGroups() {
    this.companyGroups = null;
  }

  /** Returns true if field companyGroups is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyGroups() {
    return this.companyGroups != null;
  }

  public void setCompanyGroupsIsSet(boolean value) {
    if (!value) {
      this.companyGroups = null;
    }
  }

  public String getCompanyCode() {
    return this.companyCode;
  }

  public ProxyFakeLoginResp setCompanyCode(String companyCode) {
    this.companyCode = companyCode;
    return this;
  }

  public void unsetCompanyCode() {
    this.companyCode = null;
  }

  /** Returns true if field companyCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyCode() {
    return this.companyCode != null;
  }

  public void setCompanyCodeIsSet(boolean value) {
    if (!value) {
      this.companyCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_GROUPS:
      if (value == null) {
        unsetCompanyGroups();
      } else {
        setCompanyGroups((List<ProxyCompanyGroup>)value);
      }
      break;

    case COMPANY_CODE:
      if (value == null) {
        unsetCompanyCode();
      } else {
        setCompanyCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_GROUPS:
      return getCompanyGroups();

    case COMPANY_CODE:
      return getCompanyCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_GROUPS:
      return isSetCompanyGroups();
    case COMPANY_CODE:
      return isSetCompanyCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProxyFakeLoginResp)
      return this.equals((ProxyFakeLoginResp)that);
    return false;
  }

  public boolean equals(ProxyFakeLoginResp that) {
    if (that == null)
      return false;

    boolean this_present_companyGroups = true && this.isSetCompanyGroups();
    boolean that_present_companyGroups = true && that.isSetCompanyGroups();
    if (this_present_companyGroups || that_present_companyGroups) {
      if (!(this_present_companyGroups && that_present_companyGroups))
        return false;
      if (!this.companyGroups.equals(that.companyGroups))
        return false;
    }

    boolean this_present_companyCode = true && this.isSetCompanyCode();
    boolean that_present_companyCode = true && that.isSetCompanyCode();
    if (this_present_companyCode || that_present_companyCode) {
      if (!(this_present_companyCode && that_present_companyCode))
        return false;
      if (!this.companyCode.equals(that.companyCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ProxyFakeLoginResp other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyGroups()).compareTo(other.isSetCompanyGroups());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyGroups()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyGroups, other.companyGroups);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyCode()).compareTo(other.isSetCompanyCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyCode, other.companyCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ProxyFakeLoginResp(");
    boolean first = true;

    if (isSetCompanyGroups()) {
      sb.append("companyGroups:");
      if (this.companyGroups == null) {
        sb.append("null");
      } else {
        sb.append(this.companyGroups);
      }
      first = false;
    }
    if (isSetCompanyCode()) {
      if (!first) sb.append(", ");
      sb.append("companyCode:");
      if (this.companyCode == null) {
        sb.append("null");
      } else {
        sb.append(this.companyCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProxyFakeLoginRespStandardSchemeFactory implements SchemeFactory {
    public ProxyFakeLoginRespStandardScheme getScheme() {
      return new ProxyFakeLoginRespStandardScheme();
    }
  }

  private static class ProxyFakeLoginRespStandardScheme extends StandardScheme<ProxyFakeLoginResp> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProxyFakeLoginResp struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_GROUPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.companyGroups = new ArrayList<ProxyCompanyGroup>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  ProxyCompanyGroup _elem2;
                  _elem2 = new ProxyCompanyGroup();
                  _elem2.read(iprot);
                  struct.companyGroups.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setCompanyGroupsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.companyCode = iprot.readString();
              struct.setCompanyCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProxyFakeLoginResp struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.companyGroups != null) {
        if (struct.isSetCompanyGroups()) {
          oprot.writeFieldBegin(COMPANY_GROUPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.companyGroups.size()));
            for (ProxyCompanyGroup _iter3 : struct.companyGroups)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyCode != null) {
        if (struct.isSetCompanyCode()) {
          oprot.writeFieldBegin(COMPANY_CODE_FIELD_DESC);
          oprot.writeString(struct.companyCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProxyFakeLoginRespTupleSchemeFactory implements SchemeFactory {
    public ProxyFakeLoginRespTupleScheme getScheme() {
      return new ProxyFakeLoginRespTupleScheme();
    }
  }

  private static class ProxyFakeLoginRespTupleScheme extends TupleScheme<ProxyFakeLoginResp> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProxyFakeLoginResp struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyGroups()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyCode()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCompanyGroups()) {
        {
          oprot.writeI32(struct.companyGroups.size());
          for (ProxyCompanyGroup _iter4 : struct.companyGroups)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetCompanyCode()) {
        oprot.writeString(struct.companyCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProxyFakeLoginResp struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.companyGroups = new ArrayList<ProxyCompanyGroup>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            ProxyCompanyGroup _elem7;
            _elem7 = new ProxyCompanyGroup();
            _elem7.read(iprot);
            struct.companyGroups.add(_elem7);
          }
        }
        struct.setCompanyGroupsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyCode = iprot.readString();
        struct.setCompanyCodeIsSet(true);
      }
    }
  }

}

