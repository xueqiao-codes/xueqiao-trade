/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.company;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 公司组配置信息(会根据购买的配置改变)
 */
public class CompanyGroupSpec implements org.apache.thrift.TBase<CompanyGroupSpec, CompanyGroupSpec._Fields>, java.io.Serializable, Cloneable, Comparable<CompanyGroupSpec> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompanyGroupSpec");

  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HOSTING_SERVICE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostingServiceStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SERVICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SPEC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("specName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXPIRED_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("expiredTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RELEASE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseTimestamp", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField OPERATE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("operateDescription", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompanyGroupSpecStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompanyGroupSpecTupleSchemeFactory());
  }

  public int companyId; // optional
  public int groupId; // optional
  /**
   * 
   * @see HostingServiceStatus
   */
  public HostingServiceStatus hostingServiceStatus; // optional
  /**
   * 
   * @see TradeType
   */
  public TradeType serviceType; // optional
  public String specName; // optional
  public long expiredTimestamp; // optional
  public long releaseTimestamp; // optional
  public String operateDescription; // optional
  public long createTimestamp; // optional
  public long lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_ID((short)1, "companyId"),
    GROUP_ID((short)2, "groupId"),
    /**
     * 
     * @see HostingServiceStatus
     */
    HOSTING_SERVICE_STATUS((short)5, "hostingServiceStatus"),
    /**
     * 
     * @see TradeType
     */
    SERVICE_TYPE((short)6, "serviceType"),
    SPEC_NAME((short)7, "specName"),
    EXPIRED_TIMESTAMP((short)8, "expiredTimestamp"),
    RELEASE_TIMESTAMP((short)10, "releaseTimestamp"),
    OPERATE_DESCRIPTION((short)11, "operateDescription"),
    CREATE_TIMESTAMP((short)20, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)21, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_ID
          return COMPANY_ID;
        case 2: // GROUP_ID
          return GROUP_ID;
        case 5: // HOSTING_SERVICE_STATUS
          return HOSTING_SERVICE_STATUS;
        case 6: // SERVICE_TYPE
          return SERVICE_TYPE;
        case 7: // SPEC_NAME
          return SPEC_NAME;
        case 8: // EXPIRED_TIMESTAMP
          return EXPIRED_TIMESTAMP;
        case 10: // RELEASE_TIMESTAMP
          return RELEASE_TIMESTAMP;
        case 11: // OPERATE_DESCRIPTION
          return OPERATE_DESCRIPTION;
        case 20: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 21: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPANYID_ISSET_ID = 0;
  private static final int __GROUPID_ISSET_ID = 1;
  private static final int __EXPIREDTIMESTAMP_ISSET_ID = 2;
  private static final int __RELEASETIMESTAMP_ISSET_ID = 3;
  private static final int __CREATETIMESTAMP_ISSET_ID = 4;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPANY_ID,_Fields.GROUP_ID,_Fields.HOSTING_SERVICE_STATUS,_Fields.SERVICE_TYPE,_Fields.SPEC_NAME,_Fields.EXPIRED_TIMESTAMP,_Fields.RELEASE_TIMESTAMP,_Fields.OPERATE_DESCRIPTION,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HOSTING_SERVICE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("hostingServiceStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingServiceStatus.class)));
    tmpMap.put(_Fields.SERVICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("serviceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TradeType.class)));
    tmpMap.put(_Fields.SPEC_NAME, new org.apache.thrift.meta_data.FieldMetaData("specName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPIRED_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("expiredTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RELEASE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("releaseTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPERATE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("operateDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompanyGroupSpec.class, metaDataMap);
  }

  public CompanyGroupSpec() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompanyGroupSpec(CompanyGroupSpec other) {
    __isset_bitfield = other.__isset_bitfield;
    this.companyId = other.companyId;
    this.groupId = other.groupId;
    if (other.isSetHostingServiceStatus()) {
      this.hostingServiceStatus = other.hostingServiceStatus;
    }
    if (other.isSetServiceType()) {
      this.serviceType = other.serviceType;
    }
    if (other.isSetSpecName()) {
      this.specName = other.specName;
    }
    this.expiredTimestamp = other.expiredTimestamp;
    this.releaseTimestamp = other.releaseTimestamp;
    if (other.isSetOperateDescription()) {
      this.operateDescription = other.operateDescription;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public CompanyGroupSpec deepCopy() {
    return new CompanyGroupSpec(this);
  }

  @Override
  public void clear() {
    setCompanyIdIsSet(false);
    this.companyId = 0;
    setGroupIdIsSet(false);
    this.groupId = 0;
    this.hostingServiceStatus = null;
    this.serviceType = null;
    this.specName = null;
    setExpiredTimestampIsSet(false);
    this.expiredTimestamp = 0;
    setReleaseTimestampIsSet(false);
    this.releaseTimestamp = 0;
    this.operateDescription = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public int getCompanyId() {
    return this.companyId;
  }

  public CompanyGroupSpec setCompanyId(int companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getGroupId() {
    return this.groupId;
  }

  public CompanyGroupSpec setGroupId(int groupId) {
    this.groupId = groupId;
    setGroupIdIsSet(true);
    return this;
  }

  public void unsetGroupId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return EncodingUtils.testBit(__isset_bitfield, __GROUPID_ISSET_ID);
  }

  public void setGroupIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GROUPID_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingServiceStatus
   */
  public HostingServiceStatus getHostingServiceStatus() {
    return this.hostingServiceStatus;
  }

  /**
   * 
   * @see HostingServiceStatus
   */
  public CompanyGroupSpec setHostingServiceStatus(HostingServiceStatus hostingServiceStatus) {
    this.hostingServiceStatus = hostingServiceStatus;
    return this;
  }

  public void unsetHostingServiceStatus() {
    this.hostingServiceStatus = null;
  }

  /** Returns true if field hostingServiceStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetHostingServiceStatus() {
    return this.hostingServiceStatus != null;
  }

  public void setHostingServiceStatusIsSet(boolean value) {
    if (!value) {
      this.hostingServiceStatus = null;
    }
  }

  /**
   * 
   * @see TradeType
   */
  public TradeType getServiceType() {
    return this.serviceType;
  }

  /**
   * 
   * @see TradeType
   */
  public CompanyGroupSpec setServiceType(TradeType serviceType) {
    this.serviceType = serviceType;
    return this;
  }

  public void unsetServiceType() {
    this.serviceType = null;
  }

  /** Returns true if field serviceType is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceType() {
    return this.serviceType != null;
  }

  public void setServiceTypeIsSet(boolean value) {
    if (!value) {
      this.serviceType = null;
    }
  }

  public String getSpecName() {
    return this.specName;
  }

  public CompanyGroupSpec setSpecName(String specName) {
    this.specName = specName;
    return this;
  }

  public void unsetSpecName() {
    this.specName = null;
  }

  /** Returns true if field specName is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecName() {
    return this.specName != null;
  }

  public void setSpecNameIsSet(boolean value) {
    if (!value) {
      this.specName = null;
    }
  }

  public long getExpiredTimestamp() {
    return this.expiredTimestamp;
  }

  public CompanyGroupSpec setExpiredTimestamp(long expiredTimestamp) {
    this.expiredTimestamp = expiredTimestamp;
    setExpiredTimestampIsSet(true);
    return this;
  }

  public void unsetExpiredTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXPIREDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field expiredTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiredTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __EXPIREDTIMESTAMP_ISSET_ID);
  }

  public void setExpiredTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXPIREDTIMESTAMP_ISSET_ID, value);
  }

  public long getReleaseTimestamp() {
    return this.releaseTimestamp;
  }

  public CompanyGroupSpec setReleaseTimestamp(long releaseTimestamp) {
    this.releaseTimestamp = releaseTimestamp;
    setReleaseTimestampIsSet(true);
    return this;
  }

  public void unsetReleaseTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELEASETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field releaseTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __RELEASETIMESTAMP_ISSET_ID);
  }

  public void setReleaseTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELEASETIMESTAMP_ISSET_ID, value);
  }

  public String getOperateDescription() {
    return this.operateDescription;
  }

  public CompanyGroupSpec setOperateDescription(String operateDescription) {
    this.operateDescription = operateDescription;
    return this;
  }

  public void unsetOperateDescription() {
    this.operateDescription = null;
  }

  /** Returns true if field operateDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetOperateDescription() {
    return this.operateDescription != null;
  }

  public void setOperateDescriptionIsSet(boolean value) {
    if (!value) {
      this.operateDescription = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public CompanyGroupSpec setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public CompanyGroupSpec setLastmodifyTimestamp(long lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Integer)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((Integer)value);
      }
      break;

    case HOSTING_SERVICE_STATUS:
      if (value == null) {
        unsetHostingServiceStatus();
      } else {
        setHostingServiceStatus((HostingServiceStatus)value);
      }
      break;

    case SERVICE_TYPE:
      if (value == null) {
        unsetServiceType();
      } else {
        setServiceType((TradeType)value);
      }
      break;

    case SPEC_NAME:
      if (value == null) {
        unsetSpecName();
      } else {
        setSpecName((String)value);
      }
      break;

    case EXPIRED_TIMESTAMP:
      if (value == null) {
        unsetExpiredTimestamp();
      } else {
        setExpiredTimestamp((Long)value);
      }
      break;

    case RELEASE_TIMESTAMP:
      if (value == null) {
        unsetReleaseTimestamp();
      } else {
        setReleaseTimestamp((Long)value);
      }
      break;

    case OPERATE_DESCRIPTION:
      if (value == null) {
        unsetOperateDescription();
      } else {
        setOperateDescription((String)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_ID:
      return Integer.valueOf(getCompanyId());

    case GROUP_ID:
      return Integer.valueOf(getGroupId());

    case HOSTING_SERVICE_STATUS:
      return getHostingServiceStatus();

    case SERVICE_TYPE:
      return getServiceType();

    case SPEC_NAME:
      return getSpecName();

    case EXPIRED_TIMESTAMP:
      return Long.valueOf(getExpiredTimestamp());

    case RELEASE_TIMESTAMP:
      return Long.valueOf(getReleaseTimestamp());

    case OPERATE_DESCRIPTION:
      return getOperateDescription();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Long.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_ID:
      return isSetCompanyId();
    case GROUP_ID:
      return isSetGroupId();
    case HOSTING_SERVICE_STATUS:
      return isSetHostingServiceStatus();
    case SERVICE_TYPE:
      return isSetServiceType();
    case SPEC_NAME:
      return isSetSpecName();
    case EXPIRED_TIMESTAMP:
      return isSetExpiredTimestamp();
    case RELEASE_TIMESTAMP:
      return isSetReleaseTimestamp();
    case OPERATE_DESCRIPTION:
      return isSetOperateDescription();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompanyGroupSpec)
      return this.equals((CompanyGroupSpec)that);
    return false;
  }

  public boolean equals(CompanyGroupSpec that) {
    if (that == null)
      return false;

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (this.groupId != that.groupId)
        return false;
    }

    boolean this_present_hostingServiceStatus = true && this.isSetHostingServiceStatus();
    boolean that_present_hostingServiceStatus = true && that.isSetHostingServiceStatus();
    if (this_present_hostingServiceStatus || that_present_hostingServiceStatus) {
      if (!(this_present_hostingServiceStatus && that_present_hostingServiceStatus))
        return false;
      if (!this.hostingServiceStatus.equals(that.hostingServiceStatus))
        return false;
    }

    boolean this_present_serviceType = true && this.isSetServiceType();
    boolean that_present_serviceType = true && that.isSetServiceType();
    if (this_present_serviceType || that_present_serviceType) {
      if (!(this_present_serviceType && that_present_serviceType))
        return false;
      if (!this.serviceType.equals(that.serviceType))
        return false;
    }

    boolean this_present_specName = true && this.isSetSpecName();
    boolean that_present_specName = true && that.isSetSpecName();
    if (this_present_specName || that_present_specName) {
      if (!(this_present_specName && that_present_specName))
        return false;
      if (!this.specName.equals(that.specName))
        return false;
    }

    boolean this_present_expiredTimestamp = true && this.isSetExpiredTimestamp();
    boolean that_present_expiredTimestamp = true && that.isSetExpiredTimestamp();
    if (this_present_expiredTimestamp || that_present_expiredTimestamp) {
      if (!(this_present_expiredTimestamp && that_present_expiredTimestamp))
        return false;
      if (this.expiredTimestamp != that.expiredTimestamp)
        return false;
    }

    boolean this_present_releaseTimestamp = true && this.isSetReleaseTimestamp();
    boolean that_present_releaseTimestamp = true && that.isSetReleaseTimestamp();
    if (this_present_releaseTimestamp || that_present_releaseTimestamp) {
      if (!(this_present_releaseTimestamp && that_present_releaseTimestamp))
        return false;
      if (this.releaseTimestamp != that.releaseTimestamp)
        return false;
    }

    boolean this_present_operateDescription = true && this.isSetOperateDescription();
    boolean that_present_operateDescription = true && that.isSetOperateDescription();
    if (this_present_operateDescription || that_present_operateDescription) {
      if (!(this_present_operateDescription && that_present_operateDescription))
        return false;
      if (!this.operateDescription.equals(that.operateDescription))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CompanyGroupSpec other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostingServiceStatus()).compareTo(other.isSetHostingServiceStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostingServiceStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostingServiceStatus, other.hostingServiceStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServiceType()).compareTo(other.isSetServiceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceType, other.serviceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecName()).compareTo(other.isSetSpecName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specName, other.specName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExpiredTimestamp()).compareTo(other.isSetExpiredTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiredTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expiredTimestamp, other.expiredTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReleaseTimestamp()).compareTo(other.isSetReleaseTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseTimestamp, other.releaseTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperateDescription()).compareTo(other.isSetOperateDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperateDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operateDescription, other.operateDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompanyGroupSpec(");
    boolean first = true;

    if (isSetCompanyId()) {
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetGroupId()) {
      if (!first) sb.append(", ");
      sb.append("groupId:");
      sb.append(this.groupId);
      first = false;
    }
    if (isSetHostingServiceStatus()) {
      if (!first) sb.append(", ");
      sb.append("hostingServiceStatus:");
      if (this.hostingServiceStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.hostingServiceStatus);
      }
      first = false;
    }
    if (isSetServiceType()) {
      if (!first) sb.append(", ");
      sb.append("serviceType:");
      if (this.serviceType == null) {
        sb.append("null");
      } else {
        sb.append(this.serviceType);
      }
      first = false;
    }
    if (isSetSpecName()) {
      if (!first) sb.append(", ");
      sb.append("specName:");
      if (this.specName == null) {
        sb.append("null");
      } else {
        sb.append(this.specName);
      }
      first = false;
    }
    if (isSetExpiredTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("expiredTimestamp:");
      sb.append(this.expiredTimestamp);
      first = false;
    }
    if (isSetReleaseTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("releaseTimestamp:");
      sb.append(this.releaseTimestamp);
      first = false;
    }
    if (isSetOperateDescription()) {
      if (!first) sb.append(", ");
      sb.append("operateDescription:");
      if (this.operateDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.operateDescription);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompanyGroupSpecStandardSchemeFactory implements SchemeFactory {
    public CompanyGroupSpecStandardScheme getScheme() {
      return new CompanyGroupSpecStandardScheme();
    }
  }

  private static class CompanyGroupSpecStandardScheme extends StandardScheme<CompanyGroupSpec> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompanyGroupSpec struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.companyId = iprot.readI32();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.groupId = iprot.readI32();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // HOSTING_SERVICE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hostingServiceStatus = HostingServiceStatus.findByValue(iprot.readI32());
              struct.setHostingServiceStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SERVICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serviceType = TradeType.findByValue(iprot.readI32());
              struct.setServiceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SPEC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.specName = iprot.readString();
              struct.setSpecNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXPIRED_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expiredTimestamp = iprot.readI64();
              struct.setExpiredTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RELEASE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.releaseTimestamp = iprot.readI64();
              struct.setReleaseTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPERATE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operateDescription = iprot.readString();
              struct.setOperateDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestamp = iprot.readI64();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompanyGroupSpec struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI32(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGroupId()) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeI32(struct.groupId);
        oprot.writeFieldEnd();
      }
      if (struct.hostingServiceStatus != null) {
        if (struct.isSetHostingServiceStatus()) {
          oprot.writeFieldBegin(HOSTING_SERVICE_STATUS_FIELD_DESC);
          oprot.writeI32(struct.hostingServiceStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.serviceType != null) {
        if (struct.isSetServiceType()) {
          oprot.writeFieldBegin(SERVICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.serviceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.specName != null) {
        if (struct.isSetSpecName()) {
          oprot.writeFieldBegin(SPEC_NAME_FIELD_DESC);
          oprot.writeString(struct.specName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExpiredTimestamp()) {
        oprot.writeFieldBegin(EXPIRED_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.expiredTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReleaseTimestamp()) {
        oprot.writeFieldBegin(RELEASE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.releaseTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.operateDescription != null) {
        if (struct.isSetOperateDescription()) {
          oprot.writeFieldBegin(OPERATE_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.operateDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompanyGroupSpecTupleSchemeFactory implements SchemeFactory {
    public CompanyGroupSpecTupleScheme getScheme() {
      return new CompanyGroupSpecTupleScheme();
    }
  }

  private static class CompanyGroupSpecTupleScheme extends TupleScheme<CompanyGroupSpec> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompanyGroupSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyId()) {
        optionals.set(0);
      }
      if (struct.isSetGroupId()) {
        optionals.set(1);
      }
      if (struct.isSetHostingServiceStatus()) {
        optionals.set(2);
      }
      if (struct.isSetServiceType()) {
        optionals.set(3);
      }
      if (struct.isSetSpecName()) {
        optionals.set(4);
      }
      if (struct.isSetExpiredTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetReleaseTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetOperateDescription()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetCompanyId()) {
        oprot.writeI32(struct.companyId);
      }
      if (struct.isSetGroupId()) {
        oprot.writeI32(struct.groupId);
      }
      if (struct.isSetHostingServiceStatus()) {
        oprot.writeI32(struct.hostingServiceStatus.getValue());
      }
      if (struct.isSetServiceType()) {
        oprot.writeI32(struct.serviceType.getValue());
      }
      if (struct.isSetSpecName()) {
        oprot.writeString(struct.specName);
      }
      if (struct.isSetExpiredTimestamp()) {
        oprot.writeI64(struct.expiredTimestamp);
      }
      if (struct.isSetReleaseTimestamp()) {
        oprot.writeI64(struct.releaseTimestamp);
      }
      if (struct.isSetOperateDescription()) {
        oprot.writeString(struct.operateDescription);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI64(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompanyGroupSpec struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.companyId = iprot.readI32();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.groupId = iprot.readI32();
        struct.setGroupIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostingServiceStatus = HostingServiceStatus.findByValue(iprot.readI32());
        struct.setHostingServiceStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.serviceType = TradeType.findByValue(iprot.readI32());
        struct.setServiceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.specName = iprot.readString();
        struct.setSpecNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.expiredTimestamp = iprot.readI64();
        struct.setExpiredTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.releaseTimestamp = iprot.readI64();
        struct.setReleaseTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.operateDescription = iprot.readString();
        struct.setOperateDescriptionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastmodifyTimestamp = iprot.readI64();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

