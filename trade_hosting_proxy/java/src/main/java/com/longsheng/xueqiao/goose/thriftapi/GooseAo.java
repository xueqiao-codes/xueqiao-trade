/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.goose.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GooseAo {

  /**
   * 短信验证ao
   */
  public interface Iface {

    /**
     * 发送短信验证码
     * 
     * @param platformArgs
     * @param mobileNo
     */
    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 验证验证码
     * 
     * @param platformArgs
     * @param mobileNo
     * @param smsCode
     */
    public boolean verifySmsCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 发送用户通知短信
     * 
     * @param platformArgs
     * @param mobileNo
     * @param msg
     */
    public void sendUserNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 发送运维通知短信（发送给公司运维人员）
     * 运维人员的电话号码由QCONF配置
     * 
     * @param platformArgs
     * @param msg
     */
    public void sendMaintenanceNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 发送信箱消息短信
     * 
     * @param platformArgs
     * @param tel
     * @param userName
     * @param content
     */
    public void sendMailboxMessage(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 验证验证码
     * 
     * @param platformArgs
     * @param mobileNo
     * @param smsCode
     * @param clear
     */
    public boolean verifySmsCodeForClear(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifySmsCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendUserNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMaintenanceNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMailboxMessage(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void verifySmsCodeForClear(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_sendVerifyCode(platformArgs, mobileNo);
      recv_sendVerifyCode();
    }

    public void send_sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo) throws org.apache.thrift.TException
    {
      sendVerifyCode_args args = new sendVerifyCode_args();
      args.setPlatformArgs(platformArgs);
      args.setMobileNo(mobileNo);
      sendBase("sendVerifyCode", args);
    }

    public void recv_sendVerifyCode() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      sendVerifyCode_result result = new sendVerifyCode_result();
      receiveBase(result, "sendVerifyCode");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public boolean verifySmsCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_verifySmsCode(platformArgs, mobileNo, smsCode);
      return recv_verifySmsCode();
    }

    public void send_verifySmsCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode) throws org.apache.thrift.TException
    {
      verifySmsCode_args args = new verifySmsCode_args();
      args.setPlatformArgs(platformArgs);
      args.setMobileNo(mobileNo);
      args.setSmsCode(smsCode);
      sendBase("verifySmsCode", args);
    }

    public boolean recv_verifySmsCode() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      verifySmsCode_result result = new verifySmsCode_result();
      receiveBase(result, "verifySmsCode");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifySmsCode failed: unknown result");
    }

    public void sendUserNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_sendUserNotificationSms(platformArgs, mobileNo, msg);
      recv_sendUserNotificationSms();
    }

    public void send_sendUserNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg) throws org.apache.thrift.TException
    {
      sendUserNotificationSms_args args = new sendUserNotificationSms_args();
      args.setPlatformArgs(platformArgs);
      args.setMobileNo(mobileNo);
      args.setMsg(msg);
      sendBase("sendUserNotificationSms", args);
    }

    public void recv_sendUserNotificationSms() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      sendUserNotificationSms_result result = new sendUserNotificationSms_result();
      receiveBase(result, "sendUserNotificationSms");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void sendMaintenanceNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_sendMaintenanceNotificationSms(platformArgs, msg);
      recv_sendMaintenanceNotificationSms();
    }

    public void send_sendMaintenanceNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg) throws org.apache.thrift.TException
    {
      sendMaintenanceNotificationSms_args args = new sendMaintenanceNotificationSms_args();
      args.setPlatformArgs(platformArgs);
      args.setMsg(msg);
      sendBase("sendMaintenanceNotificationSms", args);
    }

    public void recv_sendMaintenanceNotificationSms() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      sendMaintenanceNotificationSms_result result = new sendMaintenanceNotificationSms_result();
      receiveBase(result, "sendMaintenanceNotificationSms");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void sendMailboxMessage(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_sendMailboxMessage(platformArgs, tel, userName, content);
      recv_sendMailboxMessage();
    }

    public void send_sendMailboxMessage(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content) throws org.apache.thrift.TException
    {
      sendMailboxMessage_args args = new sendMailboxMessage_args();
      args.setPlatformArgs(platformArgs);
      args.setTel(tel);
      args.setUserName(userName);
      args.setContent(content);
      sendBase("sendMailboxMessage", args);
    }

    public void recv_sendMailboxMessage() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      sendMailboxMessage_result result = new sendMailboxMessage_result();
      receiveBase(result, "sendMailboxMessage");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public boolean verifySmsCodeForClear(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_verifySmsCodeForClear(platformArgs, mobileNo, smsCode, clear);
      return recv_verifySmsCodeForClear();
    }

    public void send_verifySmsCodeForClear(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear) throws org.apache.thrift.TException
    {
      verifySmsCodeForClear_args args = new verifySmsCodeForClear_args();
      args.setPlatformArgs(platformArgs);
      args.setMobileNo(mobileNo);
      args.setSmsCode(smsCode);
      args.setClear(clear);
      sendBase("verifySmsCodeForClear", args);
    }

    public boolean recv_verifySmsCodeForClear() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      verifySmsCodeForClear_result result = new verifySmsCodeForClear_result();
      receiveBase(result, "verifySmsCodeForClear");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifySmsCodeForClear failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendVerifyCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendVerifyCode_call method_call = new sendVerifyCode_call(platformArgs, mobileNo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendVerifyCode_call extends org.apache.thrift.async.TAsyncMethodCall <sendVerifyCode_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String mobileNo;
      public sendVerifyCode_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.mobileNo = mobileNo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendVerifyCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendVerifyCode_args args = new sendVerifyCode_args();
        args.setPlatformArgs(platformArgs);
        args.setMobileNo(mobileNo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendVerifyCode();
      }
    }

    public void verifySmsCode(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifySmsCode_call method_call = new verifySmsCode_call(platformArgs, mobileNo, smsCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifySmsCode_call extends org.apache.thrift.async.TAsyncMethodCall <verifySmsCode_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String mobileNo;
      private String smsCode;
      public verifySmsCode_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.mobileNo = mobileNo;
        this.smsCode = smsCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifySmsCode", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifySmsCode_args args = new verifySmsCode_args();
        args.setPlatformArgs(platformArgs);
        args.setMobileNo(mobileNo);
        args.setSmsCode(smsCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifySmsCode();
      }
    }

    public void sendUserNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendUserNotificationSms_call method_call = new sendUserNotificationSms_call(platformArgs, mobileNo, msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendUserNotificationSms_call extends org.apache.thrift.async.TAsyncMethodCall <sendUserNotificationSms_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String mobileNo;
      private String msg;
      public sendUserNotificationSms_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.mobileNo = mobileNo;
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendUserNotificationSms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendUserNotificationSms_args args = new sendUserNotificationSms_args();
        args.setPlatformArgs(platformArgs);
        args.setMobileNo(mobileNo);
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendUserNotificationSms();
      }
    }

    public void sendMaintenanceNotificationSms(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMaintenanceNotificationSms_call method_call = new sendMaintenanceNotificationSms_call(platformArgs, msg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMaintenanceNotificationSms_call extends org.apache.thrift.async.TAsyncMethodCall <sendMaintenanceNotificationSms_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String msg;
      public sendMaintenanceNotificationSms_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String msg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.msg = msg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMaintenanceNotificationSms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMaintenanceNotificationSms_args args = new sendMaintenanceNotificationSms_args();
        args.setPlatformArgs(platformArgs);
        args.setMsg(msg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendMaintenanceNotificationSms();
      }
    }

    public void sendMailboxMessage(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMailboxMessage_call method_call = new sendMailboxMessage_call(platformArgs, tel, userName, content, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMailboxMessage_call extends org.apache.thrift.async.TAsyncMethodCall <sendMailboxMessage_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String tel;
      private String userName;
      private String content;
      public sendMailboxMessage_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String tel, String userName, String content, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.tel = tel;
        this.userName = userName;
        this.content = content;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMailboxMessage", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMailboxMessage_args args = new sendMailboxMessage_args();
        args.setPlatformArgs(platformArgs);
        args.setTel(tel);
        args.setUserName(userName);
        args.setContent(content);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendMailboxMessage();
      }
    }

    public void verifySmsCodeForClear(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifySmsCodeForClear_call method_call = new verifySmsCodeForClear_call(platformArgs, mobileNo, smsCode, clear, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifySmsCodeForClear_call extends org.apache.thrift.async.TAsyncMethodCall <verifySmsCodeForClear_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String mobileNo;
      private String smsCode;
      private boolean clear;
      public verifySmsCodeForClear_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String mobileNo, String smsCode, boolean clear, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.mobileNo = mobileNo;
        this.smsCode = smsCode;
        this.clear = clear;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifySmsCodeForClear", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifySmsCodeForClear_args args = new verifySmsCodeForClear_args();
        args.setPlatformArgs(platformArgs);
        args.setMobileNo(mobileNo);
        args.setSmsCode(smsCode);
        args.setClear(clear);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifySmsCodeForClear();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendVerifyCode", new sendVerifyCode());
      processMap.put("verifySmsCode", new verifySmsCode());
      processMap.put("sendUserNotificationSms", new sendUserNotificationSms());
      processMap.put("sendMaintenanceNotificationSms", new sendMaintenanceNotificationSms());
      processMap.put("sendMailboxMessage", new sendMailboxMessage());
      processMap.put("verifySmsCodeForClear", new verifySmsCodeForClear());
      return processMap;
    }

    public static class sendVerifyCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendVerifyCode_args> {
      public sendVerifyCode() {
        super("sendVerifyCode");
      }

      public sendVerifyCode_args getEmptyArgsInstance() {
        return new sendVerifyCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendVerifyCode_result getResult(I iface, sendVerifyCode_args args) throws org.apache.thrift.TException {
        sendVerifyCode_result result = new sendVerifyCode_result();
        try {
          iface.sendVerifyCode(args.platformArgs, args.mobileNo);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class verifySmsCode<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifySmsCode_args> {
      public verifySmsCode() {
        super("verifySmsCode");
      }

      public verifySmsCode_args getEmptyArgsInstance() {
        return new verifySmsCode_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifySmsCode_result getResult(I iface, verifySmsCode_args args) throws org.apache.thrift.TException {
        verifySmsCode_result result = new verifySmsCode_result();
        try {
          result.success = iface.verifySmsCode(args.platformArgs, args.mobileNo, args.smsCode);
          result.setSuccessIsSet(true);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sendUserNotificationSms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendUserNotificationSms_args> {
      public sendUserNotificationSms() {
        super("sendUserNotificationSms");
      }

      public sendUserNotificationSms_args getEmptyArgsInstance() {
        return new sendUserNotificationSms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendUserNotificationSms_result getResult(I iface, sendUserNotificationSms_args args) throws org.apache.thrift.TException {
        sendUserNotificationSms_result result = new sendUserNotificationSms_result();
        try {
          iface.sendUserNotificationSms(args.platformArgs, args.mobileNo, args.msg);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sendMaintenanceNotificationSms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMaintenanceNotificationSms_args> {
      public sendMaintenanceNotificationSms() {
        super("sendMaintenanceNotificationSms");
      }

      public sendMaintenanceNotificationSms_args getEmptyArgsInstance() {
        return new sendMaintenanceNotificationSms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMaintenanceNotificationSms_result getResult(I iface, sendMaintenanceNotificationSms_args args) throws org.apache.thrift.TException {
        sendMaintenanceNotificationSms_result result = new sendMaintenanceNotificationSms_result();
        try {
          iface.sendMaintenanceNotificationSms(args.platformArgs, args.msg);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class sendMailboxMessage<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMailboxMessage_args> {
      public sendMailboxMessage() {
        super("sendMailboxMessage");
      }

      public sendMailboxMessage_args getEmptyArgsInstance() {
        return new sendMailboxMessage_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMailboxMessage_result getResult(I iface, sendMailboxMessage_args args) throws org.apache.thrift.TException {
        sendMailboxMessage_result result = new sendMailboxMessage_result();
        try {
          iface.sendMailboxMessage(args.platformArgs, args.tel, args.userName, args.content);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class verifySmsCodeForClear<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifySmsCodeForClear_args> {
      public verifySmsCodeForClear() {
        super("verifySmsCodeForClear");
      }

      public verifySmsCodeForClear_args getEmptyArgsInstance() {
        return new verifySmsCodeForClear_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public verifySmsCodeForClear_result getResult(I iface, verifySmsCodeForClear_args args) throws org.apache.thrift.TException {
        verifySmsCodeForClear_result result = new verifySmsCodeForClear_result();
        try {
          result.success = iface.verifySmsCodeForClear(args.platformArgs, args.mobileNo, args.smsCode, args.clear);
          result.setSuccessIsSet(true);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendVerifyCode", new sendVerifyCode());
      processMap.put("verifySmsCode", new verifySmsCode());
      processMap.put("sendUserNotificationSms", new sendUserNotificationSms());
      processMap.put("sendMaintenanceNotificationSms", new sendMaintenanceNotificationSms());
      processMap.put("sendMailboxMessage", new sendMailboxMessage());
      processMap.put("verifySmsCodeForClear", new verifySmsCodeForClear());
      return processMap;
    }

    public static class sendVerifyCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendVerifyCode_args, Void> {
      public sendVerifyCode() {
        super("sendVerifyCode");
      }

      public sendVerifyCode_args getEmptyArgsInstance() {
        return new sendVerifyCode_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendVerifyCode_result result = new sendVerifyCode_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendVerifyCode_result result = new sendVerifyCode_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendVerifyCode_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendVerifyCode(args.platformArgs, args.mobileNo,resultHandler);
      }
    }

    public static class verifySmsCode<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifySmsCode_args, Boolean> {
      public verifySmsCode() {
        super("verifySmsCode");
      }

      public verifySmsCode_args getEmptyArgsInstance() {
        return new verifySmsCode_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            verifySmsCode_result result = new verifySmsCode_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifySmsCode_result result = new verifySmsCode_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifySmsCode_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.verifySmsCode(args.platformArgs, args.mobileNo, args.smsCode,resultHandler);
      }
    }

    public static class sendUserNotificationSms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendUserNotificationSms_args, Void> {
      public sendUserNotificationSms() {
        super("sendUserNotificationSms");
      }

      public sendUserNotificationSms_args getEmptyArgsInstance() {
        return new sendUserNotificationSms_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendUserNotificationSms_result result = new sendUserNotificationSms_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendUserNotificationSms_result result = new sendUserNotificationSms_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendUserNotificationSms_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendUserNotificationSms(args.platformArgs, args.mobileNo, args.msg,resultHandler);
      }
    }

    public static class sendMaintenanceNotificationSms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMaintenanceNotificationSms_args, Void> {
      public sendMaintenanceNotificationSms() {
        super("sendMaintenanceNotificationSms");
      }

      public sendMaintenanceNotificationSms_args getEmptyArgsInstance() {
        return new sendMaintenanceNotificationSms_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendMaintenanceNotificationSms_result result = new sendMaintenanceNotificationSms_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMaintenanceNotificationSms_result result = new sendMaintenanceNotificationSms_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMaintenanceNotificationSms_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendMaintenanceNotificationSms(args.platformArgs, args.msg,resultHandler);
      }
    }

    public static class sendMailboxMessage<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMailboxMessage_args, Void> {
      public sendMailboxMessage() {
        super("sendMailboxMessage");
      }

      public sendMailboxMessage_args getEmptyArgsInstance() {
        return new sendMailboxMessage_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendMailboxMessage_result result = new sendMailboxMessage_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMailboxMessage_result result = new sendMailboxMessage_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMailboxMessage_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendMailboxMessage(args.platformArgs, args.tel, args.userName, args.content,resultHandler);
      }
    }

    public static class verifySmsCodeForClear<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifySmsCodeForClear_args, Boolean> {
      public verifySmsCodeForClear() {
        super("verifySmsCodeForClear");
      }

      public verifySmsCodeForClear_args getEmptyArgsInstance() {
        return new verifySmsCodeForClear_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            verifySmsCodeForClear_result result = new verifySmsCodeForClear_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            verifySmsCodeForClear_result result = new verifySmsCodeForClear_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifySmsCodeForClear_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.verifySmsCodeForClear(args.platformArgs, args.mobileNo, args.smsCode, args.clear,resultHandler);
      }
    }

  }

  public static class sendVerifyCode_args implements org.apache.thrift.TBase<sendVerifyCode_args, sendVerifyCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendVerifyCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVerifyCode_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNo", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVerifyCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVerifyCode_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String mobileNo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      MOBILE_NO((short)2, "mobileNo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // MOBILE_NO
            return MOBILE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.MOBILE_NO, new org.apache.thrift.meta_data.FieldMetaData("mobileNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVerifyCode_args.class, metaDataMap);
    }

    public sendVerifyCode_args() {
    }

    public sendVerifyCode_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String mobileNo)
    {
      this();
      this.platformArgs = platformArgs;
      this.mobileNo = mobileNo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVerifyCode_args(sendVerifyCode_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetMobileNo()) {
        this.mobileNo = other.mobileNo;
      }
    }

    public sendVerifyCode_args deepCopy() {
      return new sendVerifyCode_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.mobileNo = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public sendVerifyCode_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getMobileNo() {
      return this.mobileNo;
    }

    public sendVerifyCode_args setMobileNo(String mobileNo) {
      this.mobileNo = mobileNo;
      return this;
    }

    public void unsetMobileNo() {
      this.mobileNo = null;
    }

    /** Returns true if field mobileNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNo() {
      return this.mobileNo != null;
    }

    public void setMobileNoIsSet(boolean value) {
      if (!value) {
        this.mobileNo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case MOBILE_NO:
        if (value == null) {
          unsetMobileNo();
        } else {
          setMobileNo((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case MOBILE_NO:
        return getMobileNo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case MOBILE_NO:
        return isSetMobileNo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVerifyCode_args)
        return this.equals((sendVerifyCode_args)that);
      return false;
    }

    public boolean equals(sendVerifyCode_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_mobileNo = true && this.isSetMobileNo();
      boolean that_present_mobileNo = true && that.isSetMobileNo();
      if (this_present_mobileNo || that_present_mobileNo) {
        if (!(this_present_mobileNo && that_present_mobileNo))
          return false;
        if (!this.mobileNo.equals(that.mobileNo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendVerifyCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileNo()).compareTo(other.isSetMobileNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNo, other.mobileNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVerifyCode_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileNo:");
      if (this.mobileNo == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVerifyCode_argsStandardSchemeFactory implements SchemeFactory {
      public sendVerifyCode_argsStandardScheme getScheme() {
        return new sendVerifyCode_argsStandardScheme();
      }
    }

    private static class sendVerifyCode_argsStandardScheme extends StandardScheme<sendVerifyCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNo = iprot.readString();
                struct.setMobileNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mobileNo != null) {
          oprot.writeFieldBegin(MOBILE_NO_FIELD_DESC);
          oprot.writeString(struct.mobileNo);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVerifyCode_argsTupleSchemeFactory implements SchemeFactory {
      public sendVerifyCode_argsTupleScheme getScheme() {
        return new sendVerifyCode_argsTupleScheme();
      }
    }

    private static class sendVerifyCode_argsTupleScheme extends TupleScheme<sendVerifyCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetMobileNo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetMobileNo()) {
          oprot.writeString(struct.mobileNo);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobileNo = iprot.readString();
          struct.setMobileNoIsSet(true);
        }
      }
    }

  }

  public static class sendVerifyCode_result implements org.apache.thrift.TBase<sendVerifyCode_result, sendVerifyCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendVerifyCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendVerifyCode_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendVerifyCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendVerifyCode_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendVerifyCode_result.class, metaDataMap);
    }

    public sendVerifyCode_result() {
    }

    public sendVerifyCode_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendVerifyCode_result(sendVerifyCode_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public sendVerifyCode_result deepCopy() {
      return new sendVerifyCode_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public sendVerifyCode_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendVerifyCode_result)
        return this.equals((sendVerifyCode_result)that);
      return false;
    }

    public boolean equals(sendVerifyCode_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendVerifyCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendVerifyCode_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendVerifyCode_resultStandardSchemeFactory implements SchemeFactory {
      public sendVerifyCode_resultStandardScheme getScheme() {
        return new sendVerifyCode_resultStandardScheme();
      }
    }

    private static class sendVerifyCode_resultStandardScheme extends StandardScheme<sendVerifyCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendVerifyCode_resultTupleSchemeFactory implements SchemeFactory {
      public sendVerifyCode_resultTupleScheme getScheme() {
        return new sendVerifyCode_resultTupleScheme();
      }
    }

    private static class sendVerifyCode_resultTupleScheme extends TupleScheme<sendVerifyCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendVerifyCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class verifySmsCode_args implements org.apache.thrift.TBase<verifySmsCode_args, verifySmsCode_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifySmsCode_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySmsCode_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SMS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("smsCode", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySmsCode_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySmsCode_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String mobileNo; // required
    public String smsCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      MOBILE_NO((short)2, "mobileNo"),
      SMS_CODE((short)3, "smsCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // MOBILE_NO
            return MOBILE_NO;
          case 3: // SMS_CODE
            return SMS_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.MOBILE_NO, new org.apache.thrift.meta_data.FieldMetaData("mobileNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMS_CODE, new org.apache.thrift.meta_data.FieldMetaData("smsCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySmsCode_args.class, metaDataMap);
    }

    public verifySmsCode_args() {
    }

    public verifySmsCode_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String mobileNo,
      String smsCode)
    {
      this();
      this.platformArgs = platformArgs;
      this.mobileNo = mobileNo;
      this.smsCode = smsCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySmsCode_args(verifySmsCode_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetMobileNo()) {
        this.mobileNo = other.mobileNo;
      }
      if (other.isSetSmsCode()) {
        this.smsCode = other.smsCode;
      }
    }

    public verifySmsCode_args deepCopy() {
      return new verifySmsCode_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.mobileNo = null;
      this.smsCode = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public verifySmsCode_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getMobileNo() {
      return this.mobileNo;
    }

    public verifySmsCode_args setMobileNo(String mobileNo) {
      this.mobileNo = mobileNo;
      return this;
    }

    public void unsetMobileNo() {
      this.mobileNo = null;
    }

    /** Returns true if field mobileNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNo() {
      return this.mobileNo != null;
    }

    public void setMobileNoIsSet(boolean value) {
      if (!value) {
        this.mobileNo = null;
      }
    }

    public String getSmsCode() {
      return this.smsCode;
    }

    public verifySmsCode_args setSmsCode(String smsCode) {
      this.smsCode = smsCode;
      return this;
    }

    public void unsetSmsCode() {
      this.smsCode = null;
    }

    /** Returns true if field smsCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsCode() {
      return this.smsCode != null;
    }

    public void setSmsCodeIsSet(boolean value) {
      if (!value) {
        this.smsCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case MOBILE_NO:
        if (value == null) {
          unsetMobileNo();
        } else {
          setMobileNo((String)value);
        }
        break;

      case SMS_CODE:
        if (value == null) {
          unsetSmsCode();
        } else {
          setSmsCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case MOBILE_NO:
        return getMobileNo();

      case SMS_CODE:
        return getSmsCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case MOBILE_NO:
        return isSetMobileNo();
      case SMS_CODE:
        return isSetSmsCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySmsCode_args)
        return this.equals((verifySmsCode_args)that);
      return false;
    }

    public boolean equals(verifySmsCode_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_mobileNo = true && this.isSetMobileNo();
      boolean that_present_mobileNo = true && that.isSetMobileNo();
      if (this_present_mobileNo || that_present_mobileNo) {
        if (!(this_present_mobileNo && that_present_mobileNo))
          return false;
        if (!this.mobileNo.equals(that.mobileNo))
          return false;
      }

      boolean this_present_smsCode = true && this.isSetSmsCode();
      boolean that_present_smsCode = true && that.isSetSmsCode();
      if (this_present_smsCode || that_present_smsCode) {
        if (!(this_present_smsCode && that_present_smsCode))
          return false;
        if (!this.smsCode.equals(that.smsCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifySmsCode_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileNo()).compareTo(other.isSetMobileNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNo, other.mobileNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsCode()).compareTo(other.isSetSmsCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsCode, other.smsCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySmsCode_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileNo:");
      if (this.mobileNo == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsCode:");
      if (this.smsCode == null) {
        sb.append("null");
      } else {
        sb.append(this.smsCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySmsCode_argsStandardSchemeFactory implements SchemeFactory {
      public verifySmsCode_argsStandardScheme getScheme() {
        return new verifySmsCode_argsStandardScheme();
      }
    }

    private static class verifySmsCode_argsStandardScheme extends StandardScheme<verifySmsCode_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySmsCode_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNo = iprot.readString();
                struct.setMobileNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SMS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.smsCode = iprot.readString();
                struct.setSmsCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySmsCode_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mobileNo != null) {
          oprot.writeFieldBegin(MOBILE_NO_FIELD_DESC);
          oprot.writeString(struct.mobileNo);
          oprot.writeFieldEnd();
        }
        if (struct.smsCode != null) {
          oprot.writeFieldBegin(SMS_CODE_FIELD_DESC);
          oprot.writeString(struct.smsCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySmsCode_argsTupleSchemeFactory implements SchemeFactory {
      public verifySmsCode_argsTupleScheme getScheme() {
        return new verifySmsCode_argsTupleScheme();
      }
    }

    private static class verifySmsCode_argsTupleScheme extends TupleScheme<verifySmsCode_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySmsCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetMobileNo()) {
          optionals.set(1);
        }
        if (struct.isSetSmsCode()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetMobileNo()) {
          oprot.writeString(struct.mobileNo);
        }
        if (struct.isSetSmsCode()) {
          oprot.writeString(struct.smsCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySmsCode_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobileNo = iprot.readString();
          struct.setMobileNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.smsCode = iprot.readString();
          struct.setSmsCodeIsSet(true);
        }
      }
    }

  }

  public static class verifySmsCode_result implements org.apache.thrift.TBase<verifySmsCode_result, verifySmsCode_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifySmsCode_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySmsCode_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySmsCode_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySmsCode_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySmsCode_result.class, metaDataMap);
    }

    public verifySmsCode_result() {
    }

    public verifySmsCode_result(
      boolean success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySmsCode_result(verifySmsCode_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public verifySmsCode_result deepCopy() {
      return new verifySmsCode_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.err = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifySmsCode_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public verifySmsCode_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySmsCode_result)
        return this.equals((verifySmsCode_result)that);
      return false;
    }

    public boolean equals(verifySmsCode_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifySmsCode_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySmsCode_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySmsCode_resultStandardSchemeFactory implements SchemeFactory {
      public verifySmsCode_resultStandardScheme getScheme() {
        return new verifySmsCode_resultStandardScheme();
      }
    }

    private static class verifySmsCode_resultStandardScheme extends StandardScheme<verifySmsCode_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySmsCode_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySmsCode_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySmsCode_resultTupleSchemeFactory implements SchemeFactory {
      public verifySmsCode_resultTupleScheme getScheme() {
        return new verifySmsCode_resultTupleScheme();
      }
    }

    private static class verifySmsCode_resultTupleScheme extends TupleScheme<verifySmsCode_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySmsCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySmsCode_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sendUserNotificationSms_args implements org.apache.thrift.TBase<sendUserNotificationSms_args, sendUserNotificationSms_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendUserNotificationSms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendUserNotificationSms_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendUserNotificationSms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendUserNotificationSms_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String mobileNo; // required
    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      MOBILE_NO((short)2, "mobileNo"),
      MSG((short)3, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // MOBILE_NO
            return MOBILE_NO;
          case 3: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.MOBILE_NO, new org.apache.thrift.meta_data.FieldMetaData("mobileNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendUserNotificationSms_args.class, metaDataMap);
    }

    public sendUserNotificationSms_args() {
    }

    public sendUserNotificationSms_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String mobileNo,
      String msg)
    {
      this();
      this.platformArgs = platformArgs;
      this.mobileNo = mobileNo;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendUserNotificationSms_args(sendUserNotificationSms_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetMobileNo()) {
        this.mobileNo = other.mobileNo;
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public sendUserNotificationSms_args deepCopy() {
      return new sendUserNotificationSms_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.mobileNo = null;
      this.msg = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public sendUserNotificationSms_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getMobileNo() {
      return this.mobileNo;
    }

    public sendUserNotificationSms_args setMobileNo(String mobileNo) {
      this.mobileNo = mobileNo;
      return this;
    }

    public void unsetMobileNo() {
      this.mobileNo = null;
    }

    /** Returns true if field mobileNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNo() {
      return this.mobileNo != null;
    }

    public void setMobileNoIsSet(boolean value) {
      if (!value) {
        this.mobileNo = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendUserNotificationSms_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case MOBILE_NO:
        if (value == null) {
          unsetMobileNo();
        } else {
          setMobileNo((String)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case MOBILE_NO:
        return getMobileNo();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case MOBILE_NO:
        return isSetMobileNo();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendUserNotificationSms_args)
        return this.equals((sendUserNotificationSms_args)that);
      return false;
    }

    public boolean equals(sendUserNotificationSms_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_mobileNo = true && this.isSetMobileNo();
      boolean that_present_mobileNo = true && that.isSetMobileNo();
      if (this_present_mobileNo || that_present_mobileNo) {
        if (!(this_present_mobileNo && that_present_mobileNo))
          return false;
        if (!this.mobileNo.equals(that.mobileNo))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendUserNotificationSms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileNo()).compareTo(other.isSetMobileNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNo, other.mobileNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendUserNotificationSms_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileNo:");
      if (this.mobileNo == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendUserNotificationSms_argsStandardSchemeFactory implements SchemeFactory {
      public sendUserNotificationSms_argsStandardScheme getScheme() {
        return new sendUserNotificationSms_argsStandardScheme();
      }
    }

    private static class sendUserNotificationSms_argsStandardScheme extends StandardScheme<sendUserNotificationSms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendUserNotificationSms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNo = iprot.readString();
                struct.setMobileNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendUserNotificationSms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mobileNo != null) {
          oprot.writeFieldBegin(MOBILE_NO_FIELD_DESC);
          oprot.writeString(struct.mobileNo);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendUserNotificationSms_argsTupleSchemeFactory implements SchemeFactory {
      public sendUserNotificationSms_argsTupleScheme getScheme() {
        return new sendUserNotificationSms_argsTupleScheme();
      }
    }

    private static class sendUserNotificationSms_argsTupleScheme extends TupleScheme<sendUserNotificationSms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendUserNotificationSms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetMobileNo()) {
          optionals.set(1);
        }
        if (struct.isSetMsg()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetMobileNo()) {
          oprot.writeString(struct.mobileNo);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendUserNotificationSms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobileNo = iprot.readString();
          struct.setMobileNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class sendUserNotificationSms_result implements org.apache.thrift.TBase<sendUserNotificationSms_result, sendUserNotificationSms_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendUserNotificationSms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendUserNotificationSms_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendUserNotificationSms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendUserNotificationSms_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendUserNotificationSms_result.class, metaDataMap);
    }

    public sendUserNotificationSms_result() {
    }

    public sendUserNotificationSms_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendUserNotificationSms_result(sendUserNotificationSms_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public sendUserNotificationSms_result deepCopy() {
      return new sendUserNotificationSms_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public sendUserNotificationSms_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendUserNotificationSms_result)
        return this.equals((sendUserNotificationSms_result)that);
      return false;
    }

    public boolean equals(sendUserNotificationSms_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendUserNotificationSms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendUserNotificationSms_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendUserNotificationSms_resultStandardSchemeFactory implements SchemeFactory {
      public sendUserNotificationSms_resultStandardScheme getScheme() {
        return new sendUserNotificationSms_resultStandardScheme();
      }
    }

    private static class sendUserNotificationSms_resultStandardScheme extends StandardScheme<sendUserNotificationSms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendUserNotificationSms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendUserNotificationSms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendUserNotificationSms_resultTupleSchemeFactory implements SchemeFactory {
      public sendUserNotificationSms_resultTupleScheme getScheme() {
        return new sendUserNotificationSms_resultTupleScheme();
      }
    }

    private static class sendUserNotificationSms_resultTupleScheme extends TupleScheme<sendUserNotificationSms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendUserNotificationSms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendUserNotificationSms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sendMaintenanceNotificationSms_args implements org.apache.thrift.TBase<sendMaintenanceNotificationSms_args, sendMaintenanceNotificationSms_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMaintenanceNotificationSms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMaintenanceNotificationSms_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMaintenanceNotificationSms_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMaintenanceNotificationSms_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String msg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      MSG((short)2, "msg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // MSG
            return MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMaintenanceNotificationSms_args.class, metaDataMap);
    }

    public sendMaintenanceNotificationSms_args() {
    }

    public sendMaintenanceNotificationSms_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String msg)
    {
      this();
      this.platformArgs = platformArgs;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMaintenanceNotificationSms_args(sendMaintenanceNotificationSms_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetMsg()) {
        this.msg = other.msg;
      }
    }

    public sendMaintenanceNotificationSms_args deepCopy() {
      return new sendMaintenanceNotificationSms_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.msg = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public sendMaintenanceNotificationSms_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getMsg() {
      return this.msg;
    }

    public sendMaintenanceNotificationSms_args setMsg(String msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case MSG:
        return getMsg();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case MSG:
        return isSetMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMaintenanceNotificationSms_args)
        return this.equals((sendMaintenanceNotificationSms_args)that);
      return false;
    }

    public boolean equals(sendMaintenanceNotificationSms_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMaintenanceNotificationSms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMaintenanceNotificationSms_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMaintenanceNotificationSms_argsStandardSchemeFactory implements SchemeFactory {
      public sendMaintenanceNotificationSms_argsStandardScheme getScheme() {
        return new sendMaintenanceNotificationSms_argsStandardScheme();
      }
    }

    private static class sendMaintenanceNotificationSms_argsStandardScheme extends StandardScheme<sendMaintenanceNotificationSms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMaintenanceNotificationSms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.msg = iprot.readString();
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMaintenanceNotificationSms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          oprot.writeString(struct.msg);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMaintenanceNotificationSms_argsTupleSchemeFactory implements SchemeFactory {
      public sendMaintenanceNotificationSms_argsTupleScheme getScheme() {
        return new sendMaintenanceNotificationSms_argsTupleScheme();
      }
    }

    private static class sendMaintenanceNotificationSms_argsTupleScheme extends TupleScheme<sendMaintenanceNotificationSms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMaintenanceNotificationSms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetMsg()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetMsg()) {
          oprot.writeString(struct.msg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMaintenanceNotificationSms_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.msg = iprot.readString();
          struct.setMsgIsSet(true);
        }
      }
    }

  }

  public static class sendMaintenanceNotificationSms_result implements org.apache.thrift.TBase<sendMaintenanceNotificationSms_result, sendMaintenanceNotificationSms_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMaintenanceNotificationSms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMaintenanceNotificationSms_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMaintenanceNotificationSms_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMaintenanceNotificationSms_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMaintenanceNotificationSms_result.class, metaDataMap);
    }

    public sendMaintenanceNotificationSms_result() {
    }

    public sendMaintenanceNotificationSms_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMaintenanceNotificationSms_result(sendMaintenanceNotificationSms_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public sendMaintenanceNotificationSms_result deepCopy() {
      return new sendMaintenanceNotificationSms_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public sendMaintenanceNotificationSms_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMaintenanceNotificationSms_result)
        return this.equals((sendMaintenanceNotificationSms_result)that);
      return false;
    }

    public boolean equals(sendMaintenanceNotificationSms_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMaintenanceNotificationSms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMaintenanceNotificationSms_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMaintenanceNotificationSms_resultStandardSchemeFactory implements SchemeFactory {
      public sendMaintenanceNotificationSms_resultStandardScheme getScheme() {
        return new sendMaintenanceNotificationSms_resultStandardScheme();
      }
    }

    private static class sendMaintenanceNotificationSms_resultStandardScheme extends StandardScheme<sendMaintenanceNotificationSms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMaintenanceNotificationSms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMaintenanceNotificationSms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMaintenanceNotificationSms_resultTupleSchemeFactory implements SchemeFactory {
      public sendMaintenanceNotificationSms_resultTupleScheme getScheme() {
        return new sendMaintenanceNotificationSms_resultTupleScheme();
      }
    }

    private static class sendMaintenanceNotificationSms_resultTupleScheme extends TupleScheme<sendMaintenanceNotificationSms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMaintenanceNotificationSms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMaintenanceNotificationSms_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class sendMailboxMessage_args implements org.apache.thrift.TBase<sendMailboxMessage_args, sendMailboxMessage_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMailboxMessage_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMailboxMessage_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMailboxMessage_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMailboxMessage_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String tel; // required
    public String userName; // required
    public String content; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      TEL((short)2, "tel"),
      USER_NAME((short)3, "userName"),
      CONTENT((short)4, "content");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // TEL
            return TEL;
          case 3: // USER_NAME
            return USER_NAME;
          case 4: // CONTENT
            return CONTENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMailboxMessage_args.class, metaDataMap);
    }

    public sendMailboxMessage_args() {
    }

    public sendMailboxMessage_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String tel,
      String userName,
      String content)
    {
      this();
      this.platformArgs = platformArgs;
      this.tel = tel;
      this.userName = userName;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMailboxMessage_args(sendMailboxMessage_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetTel()) {
        this.tel = other.tel;
      }
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
    }

    public sendMailboxMessage_args deepCopy() {
      return new sendMailboxMessage_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.tel = null;
      this.userName = null;
      this.content = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public sendMailboxMessage_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getTel() {
      return this.tel;
    }

    public sendMailboxMessage_args setTel(String tel) {
      this.tel = tel;
      return this;
    }

    public void unsetTel() {
      this.tel = null;
    }

    /** Returns true if field tel is set (has been assigned a value) and false otherwise */
    public boolean isSetTel() {
      return this.tel != null;
    }

    public void setTelIsSet(boolean value) {
      if (!value) {
        this.tel = null;
      }
    }

    public String getUserName() {
      return this.userName;
    }

    public sendMailboxMessage_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public String getContent() {
      return this.content;
    }

    public sendMailboxMessage_args setContent(String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case TEL:
        if (value == null) {
          unsetTel();
        } else {
          setTel((String)value);
        }
        break;

      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case TEL:
        return getTel();

      case USER_NAME:
        return getUserName();

      case CONTENT:
        return getContent();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case TEL:
        return isSetTel();
      case USER_NAME:
        return isSetUserName();
      case CONTENT:
        return isSetContent();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMailboxMessage_args)
        return this.equals((sendMailboxMessage_args)that);
      return false;
    }

    public boolean equals(sendMailboxMessage_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_tel = true && this.isSetTel();
      boolean that_present_tel = true && that.isSetTel();
      if (this_present_tel || that_present_tel) {
        if (!(this_present_tel && that_present_tel))
          return false;
        if (!this.tel.equals(that.tel))
          return false;
      }

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMailboxMessage_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTel()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMailboxMessage_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tel:");
      if (this.tel == null) {
        sb.append("null");
      } else {
        sb.append(this.tel);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMailboxMessage_argsStandardSchemeFactory implements SchemeFactory {
      public sendMailboxMessage_argsStandardScheme getScheme() {
        return new sendMailboxMessage_argsStandardScheme();
      }
    }

    private static class sendMailboxMessage_argsStandardScheme extends StandardScheme<sendMailboxMessage_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMailboxMessage_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TEL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tel = iprot.readString();
                struct.setTelIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMailboxMessage_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.tel != null) {
          oprot.writeFieldBegin(TEL_FIELD_DESC);
          oprot.writeString(struct.tel);
          oprot.writeFieldEnd();
        }
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMailboxMessage_argsTupleSchemeFactory implements SchemeFactory {
      public sendMailboxMessage_argsTupleScheme getScheme() {
        return new sendMailboxMessage_argsTupleScheme();
      }
    }

    private static class sendMailboxMessage_argsTupleScheme extends TupleScheme<sendMailboxMessage_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMailboxMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetTel()) {
          optionals.set(1);
        }
        if (struct.isSetUserName()) {
          optionals.set(2);
        }
        if (struct.isSetContent()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetTel()) {
          oprot.writeString(struct.tel);
        }
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMailboxMessage_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tel = iprot.readString();
          struct.setTelIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
      }
    }

  }

  public static class sendMailboxMessage_result implements org.apache.thrift.TBase<sendMailboxMessage_result, sendMailboxMessage_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMailboxMessage_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMailboxMessage_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMailboxMessage_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMailboxMessage_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMailboxMessage_result.class, metaDataMap);
    }

    public sendMailboxMessage_result() {
    }

    public sendMailboxMessage_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMailboxMessage_result(sendMailboxMessage_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public sendMailboxMessage_result deepCopy() {
      return new sendMailboxMessage_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public sendMailboxMessage_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMailboxMessage_result)
        return this.equals((sendMailboxMessage_result)that);
      return false;
    }

    public boolean equals(sendMailboxMessage_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMailboxMessage_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMailboxMessage_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMailboxMessage_resultStandardSchemeFactory implements SchemeFactory {
      public sendMailboxMessage_resultStandardScheme getScheme() {
        return new sendMailboxMessage_resultStandardScheme();
      }
    }

    private static class sendMailboxMessage_resultStandardScheme extends StandardScheme<sendMailboxMessage_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMailboxMessage_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMailboxMessage_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMailboxMessage_resultTupleSchemeFactory implements SchemeFactory {
      public sendMailboxMessage_resultTupleScheme getScheme() {
        return new sendMailboxMessage_resultTupleScheme();
      }
    }

    private static class sendMailboxMessage_resultTupleScheme extends TupleScheme<sendMailboxMessage_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMailboxMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMailboxMessage_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class verifySmsCodeForClear_args implements org.apache.thrift.TBase<verifySmsCodeForClear_args, verifySmsCodeForClear_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifySmsCodeForClear_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySmsCodeForClear_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MOBILE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("mobileNo", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SMS_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("smsCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("clear", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySmsCodeForClear_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySmsCodeForClear_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String mobileNo; // required
    public String smsCode; // required
    public boolean clear; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      MOBILE_NO((short)2, "mobileNo"),
      SMS_CODE((short)3, "smsCode"),
      CLEAR((short)4, "clear");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // MOBILE_NO
            return MOBILE_NO;
          case 3: // SMS_CODE
            return SMS_CODE;
          case 4: // CLEAR
            return CLEAR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLEAR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.MOBILE_NO, new org.apache.thrift.meta_data.FieldMetaData("mobileNo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SMS_CODE, new org.apache.thrift.meta_data.FieldMetaData("smsCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLEAR, new org.apache.thrift.meta_data.FieldMetaData("clear", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySmsCodeForClear_args.class, metaDataMap);
    }

    public verifySmsCodeForClear_args() {
    }

    public verifySmsCodeForClear_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String mobileNo,
      String smsCode,
      boolean clear)
    {
      this();
      this.platformArgs = platformArgs;
      this.mobileNo = mobileNo;
      this.smsCode = smsCode;
      this.clear = clear;
      setClearIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySmsCodeForClear_args(verifySmsCodeForClear_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetMobileNo()) {
        this.mobileNo = other.mobileNo;
      }
      if (other.isSetSmsCode()) {
        this.smsCode = other.smsCode;
      }
      this.clear = other.clear;
    }

    public verifySmsCodeForClear_args deepCopy() {
      return new verifySmsCodeForClear_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.mobileNo = null;
      this.smsCode = null;
      setClearIsSet(false);
      this.clear = false;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public verifySmsCodeForClear_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getMobileNo() {
      return this.mobileNo;
    }

    public verifySmsCodeForClear_args setMobileNo(String mobileNo) {
      this.mobileNo = mobileNo;
      return this;
    }

    public void unsetMobileNo() {
      this.mobileNo = null;
    }

    /** Returns true if field mobileNo is set (has been assigned a value) and false otherwise */
    public boolean isSetMobileNo() {
      return this.mobileNo != null;
    }

    public void setMobileNoIsSet(boolean value) {
      if (!value) {
        this.mobileNo = null;
      }
    }

    public String getSmsCode() {
      return this.smsCode;
    }

    public verifySmsCodeForClear_args setSmsCode(String smsCode) {
      this.smsCode = smsCode;
      return this;
    }

    public void unsetSmsCode() {
      this.smsCode = null;
    }

    /** Returns true if field smsCode is set (has been assigned a value) and false otherwise */
    public boolean isSetSmsCode() {
      return this.smsCode != null;
    }

    public void setSmsCodeIsSet(boolean value) {
      if (!value) {
        this.smsCode = null;
      }
    }

    public boolean isClear() {
      return this.clear;
    }

    public verifySmsCodeForClear_args setClear(boolean clear) {
      this.clear = clear;
      setClearIsSet(true);
      return this;
    }

    public void unsetClear() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLEAR_ISSET_ID);
    }

    /** Returns true if field clear is set (has been assigned a value) and false otherwise */
    public boolean isSetClear() {
      return EncodingUtils.testBit(__isset_bitfield, __CLEAR_ISSET_ID);
    }

    public void setClearIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLEAR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case MOBILE_NO:
        if (value == null) {
          unsetMobileNo();
        } else {
          setMobileNo((String)value);
        }
        break;

      case SMS_CODE:
        if (value == null) {
          unsetSmsCode();
        } else {
          setSmsCode((String)value);
        }
        break;

      case CLEAR:
        if (value == null) {
          unsetClear();
        } else {
          setClear((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case MOBILE_NO:
        return getMobileNo();

      case SMS_CODE:
        return getSmsCode();

      case CLEAR:
        return Boolean.valueOf(isClear());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case MOBILE_NO:
        return isSetMobileNo();
      case SMS_CODE:
        return isSetSmsCode();
      case CLEAR:
        return isSetClear();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySmsCodeForClear_args)
        return this.equals((verifySmsCodeForClear_args)that);
      return false;
    }

    public boolean equals(verifySmsCodeForClear_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_mobileNo = true && this.isSetMobileNo();
      boolean that_present_mobileNo = true && that.isSetMobileNo();
      if (this_present_mobileNo || that_present_mobileNo) {
        if (!(this_present_mobileNo && that_present_mobileNo))
          return false;
        if (!this.mobileNo.equals(that.mobileNo))
          return false;
      }

      boolean this_present_smsCode = true && this.isSetSmsCode();
      boolean that_present_smsCode = true && that.isSetSmsCode();
      if (this_present_smsCode || that_present_smsCode) {
        if (!(this_present_smsCode && that_present_smsCode))
          return false;
        if (!this.smsCode.equals(that.smsCode))
          return false;
      }

      boolean this_present_clear = true;
      boolean that_present_clear = true;
      if (this_present_clear || that_present_clear) {
        if (!(this_present_clear && that_present_clear))
          return false;
        if (this.clear != that.clear)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifySmsCodeForClear_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMobileNo()).compareTo(other.isSetMobileNo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobileNo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobileNo, other.mobileNo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSmsCode()).compareTo(other.isSetSmsCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSmsCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.smsCode, other.smsCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClear()).compareTo(other.isSetClear());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClear()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clear, other.clear);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySmsCodeForClear_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mobileNo:");
      if (this.mobileNo == null) {
        sb.append("null");
      } else {
        sb.append(this.mobileNo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("smsCode:");
      if (this.smsCode == null) {
        sb.append("null");
      } else {
        sb.append(this.smsCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clear:");
      sb.append(this.clear);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySmsCodeForClear_argsStandardSchemeFactory implements SchemeFactory {
      public verifySmsCodeForClear_argsStandardScheme getScheme() {
        return new verifySmsCodeForClear_argsStandardScheme();
      }
    }

    private static class verifySmsCodeForClear_argsStandardScheme extends StandardScheme<verifySmsCodeForClear_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySmsCodeForClear_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MOBILE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobileNo = iprot.readString();
                struct.setMobileNoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SMS_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.smsCode = iprot.readString();
                struct.setSmsCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLEAR
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.clear = iprot.readBool();
                struct.setClearIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySmsCodeForClear_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.mobileNo != null) {
          oprot.writeFieldBegin(MOBILE_NO_FIELD_DESC);
          oprot.writeString(struct.mobileNo);
          oprot.writeFieldEnd();
        }
        if (struct.smsCode != null) {
          oprot.writeFieldBegin(SMS_CODE_FIELD_DESC);
          oprot.writeString(struct.smsCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CLEAR_FIELD_DESC);
        oprot.writeBool(struct.clear);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySmsCodeForClear_argsTupleSchemeFactory implements SchemeFactory {
      public verifySmsCodeForClear_argsTupleScheme getScheme() {
        return new verifySmsCodeForClear_argsTupleScheme();
      }
    }

    private static class verifySmsCodeForClear_argsTupleScheme extends TupleScheme<verifySmsCodeForClear_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySmsCodeForClear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetMobileNo()) {
          optionals.set(1);
        }
        if (struct.isSetSmsCode()) {
          optionals.set(2);
        }
        if (struct.isSetClear()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetMobileNo()) {
          oprot.writeString(struct.mobileNo);
        }
        if (struct.isSetSmsCode()) {
          oprot.writeString(struct.smsCode);
        }
        if (struct.isSetClear()) {
          oprot.writeBool(struct.clear);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySmsCodeForClear_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mobileNo = iprot.readString();
          struct.setMobileNoIsSet(true);
        }
        if (incoming.get(2)) {
          struct.smsCode = iprot.readString();
          struct.setSmsCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clear = iprot.readBool();
          struct.setClearIsSet(true);
        }
      }
    }

  }

  public static class verifySmsCodeForClear_result implements org.apache.thrift.TBase<verifySmsCodeForClear_result, verifySmsCodeForClear_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifySmsCodeForClear_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifySmsCodeForClear_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new verifySmsCodeForClear_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new verifySmsCodeForClear_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifySmsCodeForClear_result.class, metaDataMap);
    }

    public verifySmsCodeForClear_result() {
    }

    public verifySmsCodeForClear_result(
      boolean success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifySmsCodeForClear_result(verifySmsCodeForClear_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public verifySmsCodeForClear_result deepCopy() {
      return new verifySmsCodeForClear_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.err = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public verifySmsCodeForClear_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public verifySmsCodeForClear_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifySmsCodeForClear_result)
        return this.equals((verifySmsCodeForClear_result)that);
      return false;
    }

    public boolean equals(verifySmsCodeForClear_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(verifySmsCodeForClear_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("verifySmsCodeForClear_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifySmsCodeForClear_resultStandardSchemeFactory implements SchemeFactory {
      public verifySmsCodeForClear_resultStandardScheme getScheme() {
        return new verifySmsCodeForClear_resultStandardScheme();
      }
    }

    private static class verifySmsCodeForClear_resultStandardScheme extends StandardScheme<verifySmsCodeForClear_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifySmsCodeForClear_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifySmsCodeForClear_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifySmsCodeForClear_resultTupleSchemeFactory implements SchemeFactory {
      public verifySmsCodeForClear_resultTupleScheme getScheme() {
        return new verifySmsCodeForClear_resultTupleScheme();
      }
    }

    private static class verifySmsCodeForClear_resultTupleScheme extends TupleScheme<verifySmsCodeForClear_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifySmsCodeForClear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifySmsCodeForClear_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
