/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.svr_platform.comm;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 平台级参数，方便以后进行治理和查错
 */
public class PlatformArgs implements org.apache.thrift.TBase<PlatformArgs, PlatformArgs._Fields>, java.io.Serializable, Cloneable, Comparable<PlatformArgs> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PlatformArgs");

  private static final org.apache.thrift.protocol.TField SOURCE_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceDesc", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SOURCE_IP_V4_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIpV4", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REMOTE_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("remoteAddress", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REMOTE_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("remotePort", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField X_FORWARD_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("xForwardAddress", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SOURCE_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceIp", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMEOUT_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("timeoutMs", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CLIENT_LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("clientLang", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PlatformArgsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PlatformArgsTupleSchemeFactory());
  }

  public String sourceDesc; // optional
  public int sourceIpV4; // optional
  public String remoteAddress; // optional
  public int remotePort; // optional
  public String xForwardAddress; // optional
  public String sourceIp; // optional
  public int timeoutMs; // optional
  /**
   * 
   * @see EClientLang
   */
  public EClientLang clientLang; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SOURCE_DESC((short)1, "sourceDesc"),
    SOURCE_IP_V4((short)2, "sourceIpV4"),
    REMOTE_ADDRESS((short)3, "remoteAddress"),
    REMOTE_PORT((short)4, "remotePort"),
    X_FORWARD_ADDRESS((short)5, "xForwardAddress"),
    SOURCE_IP((short)6, "sourceIp"),
    TIMEOUT_MS((short)7, "timeoutMs"),
    /**
     * 
     * @see EClientLang
     */
    CLIENT_LANG((short)8, "clientLang");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SOURCE_DESC
          return SOURCE_DESC;
        case 2: // SOURCE_IP_V4
          return SOURCE_IP_V4;
        case 3: // REMOTE_ADDRESS
          return REMOTE_ADDRESS;
        case 4: // REMOTE_PORT
          return REMOTE_PORT;
        case 5: // X_FORWARD_ADDRESS
          return X_FORWARD_ADDRESS;
        case 6: // SOURCE_IP
          return SOURCE_IP;
        case 7: // TIMEOUT_MS
          return TIMEOUT_MS;
        case 8: // CLIENT_LANG
          return CLIENT_LANG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SOURCEIPV4_ISSET_ID = 0;
  private static final int __REMOTEPORT_ISSET_ID = 1;
  private static final int __TIMEOUTMS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SOURCE_DESC,_Fields.SOURCE_IP_V4,_Fields.REMOTE_ADDRESS,_Fields.REMOTE_PORT,_Fields.X_FORWARD_ADDRESS,_Fields.SOURCE_IP,_Fields.TIMEOUT_MS,_Fields.CLIENT_LANG};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SOURCE_DESC, new org.apache.thrift.meta_data.FieldMetaData("sourceDesc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_IP_V4, new org.apache.thrift.meta_data.FieldMetaData("sourceIpV4", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REMOTE_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("remoteAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMOTE_PORT, new org.apache.thrift.meta_data.FieldMetaData("remotePort", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.X_FORWARD_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("xForwardAddress", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SOURCE_IP, new org.apache.thrift.meta_data.FieldMetaData("sourceIp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEOUT_MS, new org.apache.thrift.meta_data.FieldMetaData("timeoutMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLIENT_LANG, new org.apache.thrift.meta_data.FieldMetaData("clientLang", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EClientLang.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PlatformArgs.class, metaDataMap);
  }

  public PlatformArgs() {
    this.clientLang = org.soldier.platform.svr_platform.comm.EClientLang.CN;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PlatformArgs(PlatformArgs other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSourceDesc()) {
      this.sourceDesc = other.sourceDesc;
    }
    this.sourceIpV4 = other.sourceIpV4;
    if (other.isSetRemoteAddress()) {
      this.remoteAddress = other.remoteAddress;
    }
    this.remotePort = other.remotePort;
    if (other.isSetXForwardAddress()) {
      this.xForwardAddress = other.xForwardAddress;
    }
    if (other.isSetSourceIp()) {
      this.sourceIp = other.sourceIp;
    }
    this.timeoutMs = other.timeoutMs;
    if (other.isSetClientLang()) {
      this.clientLang = other.clientLang;
    }
  }

  public PlatformArgs deepCopy() {
    return new PlatformArgs(this);
  }

  @Override
  public void clear() {
    this.sourceDesc = null;
    setSourceIpV4IsSet(false);
    this.sourceIpV4 = 0;
    this.remoteAddress = null;
    setRemotePortIsSet(false);
    this.remotePort = 0;
    this.xForwardAddress = null;
    this.sourceIp = null;
    setTimeoutMsIsSet(false);
    this.timeoutMs = 0;
    this.clientLang = org.soldier.platform.svr_platform.comm.EClientLang.CN;

  }

  public String getSourceDesc() {
    return this.sourceDesc;
  }

  public PlatformArgs setSourceDesc(String sourceDesc) {
    this.sourceDesc = sourceDesc;
    return this;
  }

  public void unsetSourceDesc() {
    this.sourceDesc = null;
  }

  /** Returns true if field sourceDesc is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceDesc() {
    return this.sourceDesc != null;
  }

  public void setSourceDescIsSet(boolean value) {
    if (!value) {
      this.sourceDesc = null;
    }
  }

  public int getSourceIpV4() {
    return this.sourceIpV4;
  }

  public PlatformArgs setSourceIpV4(int sourceIpV4) {
    this.sourceIpV4 = sourceIpV4;
    setSourceIpV4IsSet(true);
    return this;
  }

  public void unsetSourceIpV4() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SOURCEIPV4_ISSET_ID);
  }

  /** Returns true if field sourceIpV4 is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceIpV4() {
    return EncodingUtils.testBit(__isset_bitfield, __SOURCEIPV4_ISSET_ID);
  }

  public void setSourceIpV4IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SOURCEIPV4_ISSET_ID, value);
  }

  public String getRemoteAddress() {
    return this.remoteAddress;
  }

  public PlatformArgs setRemoteAddress(String remoteAddress) {
    this.remoteAddress = remoteAddress;
    return this;
  }

  public void unsetRemoteAddress() {
    this.remoteAddress = null;
  }

  /** Returns true if field remoteAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoteAddress() {
    return this.remoteAddress != null;
  }

  public void setRemoteAddressIsSet(boolean value) {
    if (!value) {
      this.remoteAddress = null;
    }
  }

  public int getRemotePort() {
    return this.remotePort;
  }

  public PlatformArgs setRemotePort(int remotePort) {
    this.remotePort = remotePort;
    setRemotePortIsSet(true);
    return this;
  }

  public void unsetRemotePort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REMOTEPORT_ISSET_ID);
  }

  /** Returns true if field remotePort is set (has been assigned a value) and false otherwise */
  public boolean isSetRemotePort() {
    return EncodingUtils.testBit(__isset_bitfield, __REMOTEPORT_ISSET_ID);
  }

  public void setRemotePortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REMOTEPORT_ISSET_ID, value);
  }

  public String getXForwardAddress() {
    return this.xForwardAddress;
  }

  public PlatformArgs setXForwardAddress(String xForwardAddress) {
    this.xForwardAddress = xForwardAddress;
    return this;
  }

  public void unsetXForwardAddress() {
    this.xForwardAddress = null;
  }

  /** Returns true if field xForwardAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetXForwardAddress() {
    return this.xForwardAddress != null;
  }

  public void setXForwardAddressIsSet(boolean value) {
    if (!value) {
      this.xForwardAddress = null;
    }
  }

  public String getSourceIp() {
    return this.sourceIp;
  }

  public PlatformArgs setSourceIp(String sourceIp) {
    this.sourceIp = sourceIp;
    return this;
  }

  public void unsetSourceIp() {
    this.sourceIp = null;
  }

  /** Returns true if field sourceIp is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceIp() {
    return this.sourceIp != null;
  }

  public void setSourceIpIsSet(boolean value) {
    if (!value) {
      this.sourceIp = null;
    }
  }

  public int getTimeoutMs() {
    return this.timeoutMs;
  }

  public PlatformArgs setTimeoutMs(int timeoutMs) {
    this.timeoutMs = timeoutMs;
    setTimeoutMsIsSet(true);
    return this;
  }

  public void unsetTimeoutMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
  }

  /** Returns true if field timeoutMs is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeoutMs() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID);
  }

  public void setTimeoutMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMEOUTMS_ISSET_ID, value);
  }

  /**
   * 
   * @see EClientLang
   */
  public EClientLang getClientLang() {
    return this.clientLang;
  }

  /**
   * 
   * @see EClientLang
   */
  public PlatformArgs setClientLang(EClientLang clientLang) {
    this.clientLang = clientLang;
    return this;
  }

  public void unsetClientLang() {
    this.clientLang = null;
  }

  /** Returns true if field clientLang is set (has been assigned a value) and false otherwise */
  public boolean isSetClientLang() {
    return this.clientLang != null;
  }

  public void setClientLangIsSet(boolean value) {
    if (!value) {
      this.clientLang = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SOURCE_DESC:
      if (value == null) {
        unsetSourceDesc();
      } else {
        setSourceDesc((String)value);
      }
      break;

    case SOURCE_IP_V4:
      if (value == null) {
        unsetSourceIpV4();
      } else {
        setSourceIpV4((Integer)value);
      }
      break;

    case REMOTE_ADDRESS:
      if (value == null) {
        unsetRemoteAddress();
      } else {
        setRemoteAddress((String)value);
      }
      break;

    case REMOTE_PORT:
      if (value == null) {
        unsetRemotePort();
      } else {
        setRemotePort((Integer)value);
      }
      break;

    case X_FORWARD_ADDRESS:
      if (value == null) {
        unsetXForwardAddress();
      } else {
        setXForwardAddress((String)value);
      }
      break;

    case SOURCE_IP:
      if (value == null) {
        unsetSourceIp();
      } else {
        setSourceIp((String)value);
      }
      break;

    case TIMEOUT_MS:
      if (value == null) {
        unsetTimeoutMs();
      } else {
        setTimeoutMs((Integer)value);
      }
      break;

    case CLIENT_LANG:
      if (value == null) {
        unsetClientLang();
      } else {
        setClientLang((EClientLang)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SOURCE_DESC:
      return getSourceDesc();

    case SOURCE_IP_V4:
      return Integer.valueOf(getSourceIpV4());

    case REMOTE_ADDRESS:
      return getRemoteAddress();

    case REMOTE_PORT:
      return Integer.valueOf(getRemotePort());

    case X_FORWARD_ADDRESS:
      return getXForwardAddress();

    case SOURCE_IP:
      return getSourceIp();

    case TIMEOUT_MS:
      return Integer.valueOf(getTimeoutMs());

    case CLIENT_LANG:
      return getClientLang();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SOURCE_DESC:
      return isSetSourceDesc();
    case SOURCE_IP_V4:
      return isSetSourceIpV4();
    case REMOTE_ADDRESS:
      return isSetRemoteAddress();
    case REMOTE_PORT:
      return isSetRemotePort();
    case X_FORWARD_ADDRESS:
      return isSetXForwardAddress();
    case SOURCE_IP:
      return isSetSourceIp();
    case TIMEOUT_MS:
      return isSetTimeoutMs();
    case CLIENT_LANG:
      return isSetClientLang();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PlatformArgs)
      return this.equals((PlatformArgs)that);
    return false;
  }

  public boolean equals(PlatformArgs that) {
    if (that == null)
      return false;

    boolean this_present_sourceDesc = true && this.isSetSourceDesc();
    boolean that_present_sourceDesc = true && that.isSetSourceDesc();
    if (this_present_sourceDesc || that_present_sourceDesc) {
      if (!(this_present_sourceDesc && that_present_sourceDesc))
        return false;
      if (!this.sourceDesc.equals(that.sourceDesc))
        return false;
    }

    boolean this_present_sourceIpV4 = true && this.isSetSourceIpV4();
    boolean that_present_sourceIpV4 = true && that.isSetSourceIpV4();
    if (this_present_sourceIpV4 || that_present_sourceIpV4) {
      if (!(this_present_sourceIpV4 && that_present_sourceIpV4))
        return false;
      if (this.sourceIpV4 != that.sourceIpV4)
        return false;
    }

    boolean this_present_remoteAddress = true && this.isSetRemoteAddress();
    boolean that_present_remoteAddress = true && that.isSetRemoteAddress();
    if (this_present_remoteAddress || that_present_remoteAddress) {
      if (!(this_present_remoteAddress && that_present_remoteAddress))
        return false;
      if (!this.remoteAddress.equals(that.remoteAddress))
        return false;
    }

    boolean this_present_remotePort = true && this.isSetRemotePort();
    boolean that_present_remotePort = true && that.isSetRemotePort();
    if (this_present_remotePort || that_present_remotePort) {
      if (!(this_present_remotePort && that_present_remotePort))
        return false;
      if (this.remotePort != that.remotePort)
        return false;
    }

    boolean this_present_xForwardAddress = true && this.isSetXForwardAddress();
    boolean that_present_xForwardAddress = true && that.isSetXForwardAddress();
    if (this_present_xForwardAddress || that_present_xForwardAddress) {
      if (!(this_present_xForwardAddress && that_present_xForwardAddress))
        return false;
      if (!this.xForwardAddress.equals(that.xForwardAddress))
        return false;
    }

    boolean this_present_sourceIp = true && this.isSetSourceIp();
    boolean that_present_sourceIp = true && that.isSetSourceIp();
    if (this_present_sourceIp || that_present_sourceIp) {
      if (!(this_present_sourceIp && that_present_sourceIp))
        return false;
      if (!this.sourceIp.equals(that.sourceIp))
        return false;
    }

    boolean this_present_timeoutMs = true && this.isSetTimeoutMs();
    boolean that_present_timeoutMs = true && that.isSetTimeoutMs();
    if (this_present_timeoutMs || that_present_timeoutMs) {
      if (!(this_present_timeoutMs && that_present_timeoutMs))
        return false;
      if (this.timeoutMs != that.timeoutMs)
        return false;
    }

    boolean this_present_clientLang = true && this.isSetClientLang();
    boolean that_present_clientLang = true && that.isSetClientLang();
    if (this_present_clientLang || that_present_clientLang) {
      if (!(this_present_clientLang && that_present_clientLang))
        return false;
      if (!this.clientLang.equals(that.clientLang))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PlatformArgs other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSourceDesc()).compareTo(other.isSetSourceDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceDesc, other.sourceDesc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceIpV4()).compareTo(other.isSetSourceIpV4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceIpV4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIpV4, other.sourceIpV4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemoteAddress()).compareTo(other.isSetRemoteAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoteAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remoteAddress, other.remoteAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemotePort()).compareTo(other.isSetRemotePort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemotePort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remotePort, other.remotePort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXForwardAddress()).compareTo(other.isSetXForwardAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXForwardAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xForwardAddress, other.xForwardAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceIp()).compareTo(other.isSetSourceIp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceIp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceIp, other.sourceIp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeoutMs()).compareTo(other.isSetTimeoutMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeoutMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeoutMs, other.timeoutMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClientLang()).compareTo(other.isSetClientLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientLang, other.clientLang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PlatformArgs(");
    boolean first = true;

    if (isSetSourceDesc()) {
      sb.append("sourceDesc:");
      if (this.sourceDesc == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceDesc);
      }
      first = false;
    }
    if (isSetSourceIpV4()) {
      if (!first) sb.append(", ");
      sb.append("sourceIpV4:");
      sb.append(this.sourceIpV4);
      first = false;
    }
    if (isSetRemoteAddress()) {
      if (!first) sb.append(", ");
      sb.append("remoteAddress:");
      if (this.remoteAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteAddress);
      }
      first = false;
    }
    if (isSetRemotePort()) {
      if (!first) sb.append(", ");
      sb.append("remotePort:");
      sb.append(this.remotePort);
      first = false;
    }
    if (isSetXForwardAddress()) {
      if (!first) sb.append(", ");
      sb.append("xForwardAddress:");
      if (this.xForwardAddress == null) {
        sb.append("null");
      } else {
        sb.append(this.xForwardAddress);
      }
      first = false;
    }
    if (isSetSourceIp()) {
      if (!first) sb.append(", ");
      sb.append("sourceIp:");
      if (this.sourceIp == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceIp);
      }
      first = false;
    }
    if (isSetTimeoutMs()) {
      if (!first) sb.append(", ");
      sb.append("timeoutMs:");
      sb.append(this.timeoutMs);
      first = false;
    }
    if (isSetClientLang()) {
      if (!first) sb.append(", ");
      sb.append("clientLang:");
      if (this.clientLang == null) {
        sb.append("null");
      } else {
        sb.append(this.clientLang);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PlatformArgsStandardSchemeFactory implements SchemeFactory {
    public PlatformArgsStandardScheme getScheme() {
      return new PlatformArgsStandardScheme();
    }
  }

  private static class PlatformArgsStandardScheme extends StandardScheme<PlatformArgs> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PlatformArgs struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SOURCE_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceDesc = iprot.readString();
              struct.setSourceDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SOURCE_IP_V4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sourceIpV4 = iprot.readI32();
              struct.setSourceIpV4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REMOTE_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remoteAddress = iprot.readString();
              struct.setRemoteAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REMOTE_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.remotePort = iprot.readI32();
              struct.setRemotePortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // X_FORWARD_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.xForwardAddress = iprot.readString();
              struct.setXForwardAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SOURCE_IP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceIp = iprot.readString();
              struct.setSourceIpIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMEOUT_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeoutMs = iprot.readI32();
              struct.setTimeoutMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLIENT_LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.clientLang = EClientLang.findByValue(iprot.readI32());
              struct.setClientLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PlatformArgs struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sourceDesc != null) {
        if (struct.isSetSourceDesc()) {
          oprot.writeFieldBegin(SOURCE_DESC_FIELD_DESC);
          oprot.writeString(struct.sourceDesc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSourceIpV4()) {
        oprot.writeFieldBegin(SOURCE_IP_V4_FIELD_DESC);
        oprot.writeI32(struct.sourceIpV4);
        oprot.writeFieldEnd();
      }
      if (struct.remoteAddress != null) {
        if (struct.isSetRemoteAddress()) {
          oprot.writeFieldBegin(REMOTE_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.remoteAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRemotePort()) {
        oprot.writeFieldBegin(REMOTE_PORT_FIELD_DESC);
        oprot.writeI32(struct.remotePort);
        oprot.writeFieldEnd();
      }
      if (struct.xForwardAddress != null) {
        if (struct.isSetXForwardAddress()) {
          oprot.writeFieldBegin(X_FORWARD_ADDRESS_FIELD_DESC);
          oprot.writeString(struct.xForwardAddress);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceIp != null) {
        if (struct.isSetSourceIp()) {
          oprot.writeFieldBegin(SOURCE_IP_FIELD_DESC);
          oprot.writeString(struct.sourceIp);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTimeoutMs()) {
        oprot.writeFieldBegin(TIMEOUT_MS_FIELD_DESC);
        oprot.writeI32(struct.timeoutMs);
        oprot.writeFieldEnd();
      }
      if (struct.clientLang != null) {
        if (struct.isSetClientLang()) {
          oprot.writeFieldBegin(CLIENT_LANG_FIELD_DESC);
          oprot.writeI32(struct.clientLang.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PlatformArgsTupleSchemeFactory implements SchemeFactory {
    public PlatformArgsTupleScheme getScheme() {
      return new PlatformArgsTupleScheme();
    }
  }

  private static class PlatformArgsTupleScheme extends TupleScheme<PlatformArgs> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PlatformArgs struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSourceDesc()) {
        optionals.set(0);
      }
      if (struct.isSetSourceIpV4()) {
        optionals.set(1);
      }
      if (struct.isSetRemoteAddress()) {
        optionals.set(2);
      }
      if (struct.isSetRemotePort()) {
        optionals.set(3);
      }
      if (struct.isSetXForwardAddress()) {
        optionals.set(4);
      }
      if (struct.isSetSourceIp()) {
        optionals.set(5);
      }
      if (struct.isSetTimeoutMs()) {
        optionals.set(6);
      }
      if (struct.isSetClientLang()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSourceDesc()) {
        oprot.writeString(struct.sourceDesc);
      }
      if (struct.isSetSourceIpV4()) {
        oprot.writeI32(struct.sourceIpV4);
      }
      if (struct.isSetRemoteAddress()) {
        oprot.writeString(struct.remoteAddress);
      }
      if (struct.isSetRemotePort()) {
        oprot.writeI32(struct.remotePort);
      }
      if (struct.isSetXForwardAddress()) {
        oprot.writeString(struct.xForwardAddress);
      }
      if (struct.isSetSourceIp()) {
        oprot.writeString(struct.sourceIp);
      }
      if (struct.isSetTimeoutMs()) {
        oprot.writeI32(struct.timeoutMs);
      }
      if (struct.isSetClientLang()) {
        oprot.writeI32(struct.clientLang.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PlatformArgs struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.sourceDesc = iprot.readString();
        struct.setSourceDescIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sourceIpV4 = iprot.readI32();
        struct.setSourceIpV4IsSet(true);
      }
      if (incoming.get(2)) {
        struct.remoteAddress = iprot.readString();
        struct.setRemoteAddressIsSet(true);
      }
      if (incoming.get(3)) {
        struct.remotePort = iprot.readI32();
        struct.setRemotePortIsSet(true);
      }
      if (incoming.get(4)) {
        struct.xForwardAddress = iprot.readString();
        struct.setXForwardAddressIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sourceIp = iprot.readString();
        struct.setSourceIpIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timeoutMs = iprot.readI32();
        struct.setTimeoutMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.clientLang = EClientLang.findByValue(iprot.readI32());
        struct.setClientLangIsSet(true);
      }
    }
  }

}

