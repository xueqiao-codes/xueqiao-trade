/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppVersion implements org.apache.thrift.TBase<AppVersion, AppVersion._Fields>, java.io.Serializable, Cloneable, Comparable<AppVersion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AppVersion");

  private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("versionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField VERSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("versionKey", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNum", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_NUM_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNumTag", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_X32_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrlX32", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField DOWNLOAD_URL_X64_FIELD_DESC = new org.apache.thrift.protocol.TField("downloadUrlX64", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField UPDATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("updateType", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField EXTRA_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("extraInfo", org.apache.thrift.protocol.TType.MAP, (short)11);
  private static final org.apache.thrift.protocol.TField OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("operator", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField UPDATE_NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("updateNotes", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField VERSION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionState", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AppVersionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AppVersionTupleSchemeFactory());
  }

  public long versionId; // optional
  public long appId; // optional
  /**
   * 
   * @see AppType
   */
  public AppType appType; // optional
  public String appKey; // optional
  public String versionKey; // optional
  public VersionNum versionNum; // optional
  public String versionNumTag; // optional
  public String downloadUrlX32; // optional
  public String downloadUrlX64; // optional
  /**
   * 
   * @see UpdateType
   */
  public UpdateType updateType; // optional
  public Map<String,String> extraInfo; // optional
  public String operator; // optional
  public String note; // optional
  public List<String> updateNotes; // optional
  /**
   * 
   * @see VersionState
   */
  public VersionState versionState; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_ID((short)1, "versionId"),
    APP_ID((short)2, "appId"),
    /**
     * 
     * @see AppType
     */
    APP_TYPE((short)3, "appType"),
    APP_KEY((short)4, "appKey"),
    VERSION_KEY((short)5, "versionKey"),
    VERSION_NUM((short)6, "versionNum"),
    VERSION_NUM_TAG((short)7, "versionNumTag"),
    DOWNLOAD_URL_X32((short)8, "downloadUrlX32"),
    DOWNLOAD_URL_X64((short)9, "downloadUrlX64"),
    /**
     * 
     * @see UpdateType
     */
    UPDATE_TYPE((short)10, "updateType"),
    EXTRA_INFO((short)11, "extraInfo"),
    OPERATOR((short)13, "operator"),
    NOTE((short)14, "note"),
    UPDATE_NOTES((short)15, "updateNotes"),
    /**
     * 
     * @see VersionState
     */
    VERSION_STATE((short)16, "versionState"),
    CREATE_TIMESTAMP((short)17, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)18, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_ID
          return VERSION_ID;
        case 2: // APP_ID
          return APP_ID;
        case 3: // APP_TYPE
          return APP_TYPE;
        case 4: // APP_KEY
          return APP_KEY;
        case 5: // VERSION_KEY
          return VERSION_KEY;
        case 6: // VERSION_NUM
          return VERSION_NUM;
        case 7: // VERSION_NUM_TAG
          return VERSION_NUM_TAG;
        case 8: // DOWNLOAD_URL_X32
          return DOWNLOAD_URL_X32;
        case 9: // DOWNLOAD_URL_X64
          return DOWNLOAD_URL_X64;
        case 10: // UPDATE_TYPE
          return UPDATE_TYPE;
        case 11: // EXTRA_INFO
          return EXTRA_INFO;
        case 13: // OPERATOR
          return OPERATOR;
        case 14: // NOTE
          return NOTE;
        case 15: // UPDATE_NOTES
          return UPDATE_NOTES;
        case 16: // VERSION_STATE
          return VERSION_STATE;
        case 17: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 18: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSIONID_ISSET_ID = 0;
  private static final int __APPID_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION_ID,_Fields.APP_ID,_Fields.APP_TYPE,_Fields.APP_KEY,_Fields.VERSION_KEY,_Fields.VERSION_NUM,_Fields.VERSION_NUM_TAG,_Fields.DOWNLOAD_URL_X32,_Fields.DOWNLOAD_URL_X64,_Fields.UPDATE_TYPE,_Fields.EXTRA_INFO,_Fields.OPERATOR,_Fields.NOTE,_Fields.UPDATE_NOTES,_Fields.VERSION_STATE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("versionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AppType.class)));
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("versionKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("versionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, VersionNum.class)));
    tmpMap.put(_Fields.VERSION_NUM_TAG, new org.apache.thrift.meta_data.FieldMetaData("versionNumTag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_URL_X32, new org.apache.thrift.meta_data.FieldMetaData("downloadUrlX32", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DOWNLOAD_URL_X64, new org.apache.thrift.meta_data.FieldMetaData("downloadUrlX64", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("updateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UpdateType.class)));
    tmpMap.put(_Fields.EXTRA_INFO, new org.apache.thrift.meta_data.FieldMetaData("extraInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("operator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UPDATE_NOTES, new org.apache.thrift.meta_data.FieldMetaData("updateNotes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.VERSION_STATE, new org.apache.thrift.meta_data.FieldMetaData("versionState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, VersionState.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AppVersion.class, metaDataMap);
  }

  public AppVersion() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AppVersion(AppVersion other) {
    __isset_bitfield = other.__isset_bitfield;
    this.versionId = other.versionId;
    this.appId = other.appId;
    if (other.isSetAppType()) {
      this.appType = other.appType;
    }
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetVersionKey()) {
      this.versionKey = other.versionKey;
    }
    if (other.isSetVersionNum()) {
      this.versionNum = new VersionNum(other.versionNum);
    }
    if (other.isSetVersionNumTag()) {
      this.versionNumTag = other.versionNumTag;
    }
    if (other.isSetDownloadUrlX32()) {
      this.downloadUrlX32 = other.downloadUrlX32;
    }
    if (other.isSetDownloadUrlX64()) {
      this.downloadUrlX64 = other.downloadUrlX64;
    }
    if (other.isSetUpdateType()) {
      this.updateType = other.updateType;
    }
    if (other.isSetExtraInfo()) {
      Map<String,String> __this__extraInfo = new HashMap<String,String>(other.extraInfo);
      this.extraInfo = __this__extraInfo;
    }
    if (other.isSetOperator()) {
      this.operator = other.operator;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
    if (other.isSetUpdateNotes()) {
      List<String> __this__updateNotes = new ArrayList<String>(other.updateNotes);
      this.updateNotes = __this__updateNotes;
    }
    if (other.isSetVersionState()) {
      this.versionState = other.versionState;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public AppVersion deepCopy() {
    return new AppVersion(this);
  }

  @Override
  public void clear() {
    setVersionIdIsSet(false);
    this.versionId = 0;
    setAppIdIsSet(false);
    this.appId = 0;
    this.appType = null;
    this.appKey = null;
    this.versionKey = null;
    this.versionNum = null;
    this.versionNumTag = null;
    this.downloadUrlX32 = null;
    this.downloadUrlX64 = null;
    this.updateType = null;
    this.extraInfo = null;
    this.operator = null;
    this.note = null;
    this.updateNotes = null;
    this.versionState = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public long getVersionId() {
    return this.versionId;
  }

  public AppVersion setVersionId(long versionId) {
    this.versionId = versionId;
    setVersionIdIsSet(true);
    return this;
  }

  public void unsetVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  /** Returns true if field versionId is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  public void setVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONID_ISSET_ID, value);
  }

  public long getAppId() {
    return this.appId;
  }

  public AppVersion setAppId(long appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  /**
   * 
   * @see AppType
   */
  public AppType getAppType() {
    return this.appType;
  }

  /**
   * 
   * @see AppType
   */
  public AppVersion setAppType(AppType appType) {
    this.appType = appType;
    return this;
  }

  public void unsetAppType() {
    this.appType = null;
  }

  /** Returns true if field appType is set (has been assigned a value) and false otherwise */
  public boolean isSetAppType() {
    return this.appType != null;
  }

  public void setAppTypeIsSet(boolean value) {
    if (!value) {
      this.appType = null;
    }
  }

  public String getAppKey() {
    return this.appKey;
  }

  public AppVersion setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  public String getVersionKey() {
    return this.versionKey;
  }

  public AppVersion setVersionKey(String versionKey) {
    this.versionKey = versionKey;
    return this;
  }

  public void unsetVersionKey() {
    this.versionKey = null;
  }

  /** Returns true if field versionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionKey() {
    return this.versionKey != null;
  }

  public void setVersionKeyIsSet(boolean value) {
    if (!value) {
      this.versionKey = null;
    }
  }

  public VersionNum getVersionNum() {
    return this.versionNum;
  }

  public AppVersion setVersionNum(VersionNum versionNum) {
    this.versionNum = versionNum;
    return this;
  }

  public void unsetVersionNum() {
    this.versionNum = null;
  }

  /** Returns true if field versionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNum() {
    return this.versionNum != null;
  }

  public void setVersionNumIsSet(boolean value) {
    if (!value) {
      this.versionNum = null;
    }
  }

  public String getVersionNumTag() {
    return this.versionNumTag;
  }

  public AppVersion setVersionNumTag(String versionNumTag) {
    this.versionNumTag = versionNumTag;
    return this;
  }

  public void unsetVersionNumTag() {
    this.versionNumTag = null;
  }

  /** Returns true if field versionNumTag is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNumTag() {
    return this.versionNumTag != null;
  }

  public void setVersionNumTagIsSet(boolean value) {
    if (!value) {
      this.versionNumTag = null;
    }
  }

  public String getDownloadUrlX32() {
    return this.downloadUrlX32;
  }

  public AppVersion setDownloadUrlX32(String downloadUrlX32) {
    this.downloadUrlX32 = downloadUrlX32;
    return this;
  }

  public void unsetDownloadUrlX32() {
    this.downloadUrlX32 = null;
  }

  /** Returns true if field downloadUrlX32 is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadUrlX32() {
    return this.downloadUrlX32 != null;
  }

  public void setDownloadUrlX32IsSet(boolean value) {
    if (!value) {
      this.downloadUrlX32 = null;
    }
  }

  public String getDownloadUrlX64() {
    return this.downloadUrlX64;
  }

  public AppVersion setDownloadUrlX64(String downloadUrlX64) {
    this.downloadUrlX64 = downloadUrlX64;
    return this;
  }

  public void unsetDownloadUrlX64() {
    this.downloadUrlX64 = null;
  }

  /** Returns true if field downloadUrlX64 is set (has been assigned a value) and false otherwise */
  public boolean isSetDownloadUrlX64() {
    return this.downloadUrlX64 != null;
  }

  public void setDownloadUrlX64IsSet(boolean value) {
    if (!value) {
      this.downloadUrlX64 = null;
    }
  }

  /**
   * 
   * @see UpdateType
   */
  public UpdateType getUpdateType() {
    return this.updateType;
  }

  /**
   * 
   * @see UpdateType
   */
  public AppVersion setUpdateType(UpdateType updateType) {
    this.updateType = updateType;
    return this;
  }

  public void unsetUpdateType() {
    this.updateType = null;
  }

  /** Returns true if field updateType is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateType() {
    return this.updateType != null;
  }

  public void setUpdateTypeIsSet(boolean value) {
    if (!value) {
      this.updateType = null;
    }
  }

  public int getExtraInfoSize() {
    return (this.extraInfo == null) ? 0 : this.extraInfo.size();
  }

  public void putToExtraInfo(String key, String val) {
    if (this.extraInfo == null) {
      this.extraInfo = new HashMap<String,String>();
    }
    this.extraInfo.put(key, val);
  }

  public Map<String,String> getExtraInfo() {
    return this.extraInfo;
  }

  public AppVersion setExtraInfo(Map<String,String> extraInfo) {
    this.extraInfo = extraInfo;
    return this;
  }

  public void unsetExtraInfo() {
    this.extraInfo = null;
  }

  /** Returns true if field extraInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetExtraInfo() {
    return this.extraInfo != null;
  }

  public void setExtraInfoIsSet(boolean value) {
    if (!value) {
      this.extraInfo = null;
    }
  }

  public String getOperator() {
    return this.operator;
  }

  public AppVersion setOperator(String operator) {
    this.operator = operator;
    return this;
  }

  public void unsetOperator() {
    this.operator = null;
  }

  /** Returns true if field operator is set (has been assigned a value) and false otherwise */
  public boolean isSetOperator() {
    return this.operator != null;
  }

  public void setOperatorIsSet(boolean value) {
    if (!value) {
      this.operator = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public AppVersion setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public int getUpdateNotesSize() {
    return (this.updateNotes == null) ? 0 : this.updateNotes.size();
  }

  public java.util.Iterator<String> getUpdateNotesIterator() {
    return (this.updateNotes == null) ? null : this.updateNotes.iterator();
  }

  public void addToUpdateNotes(String elem) {
    if (this.updateNotes == null) {
      this.updateNotes = new ArrayList<String>();
    }
    this.updateNotes.add(elem);
  }

  public List<String> getUpdateNotes() {
    return this.updateNotes;
  }

  public AppVersion setUpdateNotes(List<String> updateNotes) {
    this.updateNotes = updateNotes;
    return this;
  }

  public void unsetUpdateNotes() {
    this.updateNotes = null;
  }

  /** Returns true if field updateNotes is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateNotes() {
    return this.updateNotes != null;
  }

  public void setUpdateNotesIsSet(boolean value) {
    if (!value) {
      this.updateNotes = null;
    }
  }

  /**
   * 
   * @see VersionState
   */
  public VersionState getVersionState() {
    return this.versionState;
  }

  /**
   * 
   * @see VersionState
   */
  public AppVersion setVersionState(VersionState versionState) {
    this.versionState = versionState;
    return this;
  }

  public void unsetVersionState() {
    this.versionState = null;
  }

  /** Returns true if field versionState is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionState() {
    return this.versionState != null;
  }

  public void setVersionStateIsSet(boolean value) {
    if (!value) {
      this.versionState = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public AppVersion setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public AppVersion setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_ID:
      if (value == null) {
        unsetVersionId();
      } else {
        setVersionId((Long)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Long)value);
      }
      break;

    case APP_TYPE:
      if (value == null) {
        unsetAppType();
      } else {
        setAppType((AppType)value);
      }
      break;

    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case VERSION_KEY:
      if (value == null) {
        unsetVersionKey();
      } else {
        setVersionKey((String)value);
      }
      break;

    case VERSION_NUM:
      if (value == null) {
        unsetVersionNum();
      } else {
        setVersionNum((VersionNum)value);
      }
      break;

    case VERSION_NUM_TAG:
      if (value == null) {
        unsetVersionNumTag();
      } else {
        setVersionNumTag((String)value);
      }
      break;

    case DOWNLOAD_URL_X32:
      if (value == null) {
        unsetDownloadUrlX32();
      } else {
        setDownloadUrlX32((String)value);
      }
      break;

    case DOWNLOAD_URL_X64:
      if (value == null) {
        unsetDownloadUrlX64();
      } else {
        setDownloadUrlX64((String)value);
      }
      break;

    case UPDATE_TYPE:
      if (value == null) {
        unsetUpdateType();
      } else {
        setUpdateType((UpdateType)value);
      }
      break;

    case EXTRA_INFO:
      if (value == null) {
        unsetExtraInfo();
      } else {
        setExtraInfo((Map<String,String>)value);
      }
      break;

    case OPERATOR:
      if (value == null) {
        unsetOperator();
      } else {
        setOperator((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case UPDATE_NOTES:
      if (value == null) {
        unsetUpdateNotes();
      } else {
        setUpdateNotes((List<String>)value);
      }
      break;

    case VERSION_STATE:
      if (value == null) {
        unsetVersionState();
      } else {
        setVersionState((VersionState)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_ID:
      return Long.valueOf(getVersionId());

    case APP_ID:
      return Long.valueOf(getAppId());

    case APP_TYPE:
      return getAppType();

    case APP_KEY:
      return getAppKey();

    case VERSION_KEY:
      return getVersionKey();

    case VERSION_NUM:
      return getVersionNum();

    case VERSION_NUM_TAG:
      return getVersionNumTag();

    case DOWNLOAD_URL_X32:
      return getDownloadUrlX32();

    case DOWNLOAD_URL_X64:
      return getDownloadUrlX64();

    case UPDATE_TYPE:
      return getUpdateType();

    case EXTRA_INFO:
      return getExtraInfo();

    case OPERATOR:
      return getOperator();

    case NOTE:
      return getNote();

    case UPDATE_NOTES:
      return getUpdateNotes();

    case VERSION_STATE:
      return getVersionState();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_ID:
      return isSetVersionId();
    case APP_ID:
      return isSetAppId();
    case APP_TYPE:
      return isSetAppType();
    case APP_KEY:
      return isSetAppKey();
    case VERSION_KEY:
      return isSetVersionKey();
    case VERSION_NUM:
      return isSetVersionNum();
    case VERSION_NUM_TAG:
      return isSetVersionNumTag();
    case DOWNLOAD_URL_X32:
      return isSetDownloadUrlX32();
    case DOWNLOAD_URL_X64:
      return isSetDownloadUrlX64();
    case UPDATE_TYPE:
      return isSetUpdateType();
    case EXTRA_INFO:
      return isSetExtraInfo();
    case OPERATOR:
      return isSetOperator();
    case NOTE:
      return isSetNote();
    case UPDATE_NOTES:
      return isSetUpdateNotes();
    case VERSION_STATE:
      return isSetVersionState();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AppVersion)
      return this.equals((AppVersion)that);
    return false;
  }

  public boolean equals(AppVersion that) {
    if (that == null)
      return false;

    boolean this_present_versionId = true && this.isSetVersionId();
    boolean that_present_versionId = true && that.isSetVersionId();
    if (this_present_versionId || that_present_versionId) {
      if (!(this_present_versionId && that_present_versionId))
        return false;
      if (this.versionId != that.versionId)
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_appType = true && this.isSetAppType();
    boolean that_present_appType = true && that.isSetAppType();
    if (this_present_appType || that_present_appType) {
      if (!(this_present_appType && that_present_appType))
        return false;
      if (!this.appType.equals(that.appType))
        return false;
    }

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_versionKey = true && this.isSetVersionKey();
    boolean that_present_versionKey = true && that.isSetVersionKey();
    if (this_present_versionKey || that_present_versionKey) {
      if (!(this_present_versionKey && that_present_versionKey))
        return false;
      if (!this.versionKey.equals(that.versionKey))
        return false;
    }

    boolean this_present_versionNum = true && this.isSetVersionNum();
    boolean that_present_versionNum = true && that.isSetVersionNum();
    if (this_present_versionNum || that_present_versionNum) {
      if (!(this_present_versionNum && that_present_versionNum))
        return false;
      if (!this.versionNum.equals(that.versionNum))
        return false;
    }

    boolean this_present_versionNumTag = true && this.isSetVersionNumTag();
    boolean that_present_versionNumTag = true && that.isSetVersionNumTag();
    if (this_present_versionNumTag || that_present_versionNumTag) {
      if (!(this_present_versionNumTag && that_present_versionNumTag))
        return false;
      if (!this.versionNumTag.equals(that.versionNumTag))
        return false;
    }

    boolean this_present_downloadUrlX32 = true && this.isSetDownloadUrlX32();
    boolean that_present_downloadUrlX32 = true && that.isSetDownloadUrlX32();
    if (this_present_downloadUrlX32 || that_present_downloadUrlX32) {
      if (!(this_present_downloadUrlX32 && that_present_downloadUrlX32))
        return false;
      if (!this.downloadUrlX32.equals(that.downloadUrlX32))
        return false;
    }

    boolean this_present_downloadUrlX64 = true && this.isSetDownloadUrlX64();
    boolean that_present_downloadUrlX64 = true && that.isSetDownloadUrlX64();
    if (this_present_downloadUrlX64 || that_present_downloadUrlX64) {
      if (!(this_present_downloadUrlX64 && that_present_downloadUrlX64))
        return false;
      if (!this.downloadUrlX64.equals(that.downloadUrlX64))
        return false;
    }

    boolean this_present_updateType = true && this.isSetUpdateType();
    boolean that_present_updateType = true && that.isSetUpdateType();
    if (this_present_updateType || that_present_updateType) {
      if (!(this_present_updateType && that_present_updateType))
        return false;
      if (!this.updateType.equals(that.updateType))
        return false;
    }

    boolean this_present_extraInfo = true && this.isSetExtraInfo();
    boolean that_present_extraInfo = true && that.isSetExtraInfo();
    if (this_present_extraInfo || that_present_extraInfo) {
      if (!(this_present_extraInfo && that_present_extraInfo))
        return false;
      if (!this.extraInfo.equals(that.extraInfo))
        return false;
    }

    boolean this_present_operator = true && this.isSetOperator();
    boolean that_present_operator = true && that.isSetOperator();
    if (this_present_operator || that_present_operator) {
      if (!(this_present_operator && that_present_operator))
        return false;
      if (!this.operator.equals(that.operator))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_updateNotes = true && this.isSetUpdateNotes();
    boolean that_present_updateNotes = true && that.isSetUpdateNotes();
    if (this_present_updateNotes || that_present_updateNotes) {
      if (!(this_present_updateNotes && that_present_updateNotes))
        return false;
      if (!this.updateNotes.equals(that.updateNotes))
        return false;
    }

    boolean this_present_versionState = true && this.isSetVersionState();
    boolean that_present_versionState = true && that.isSetVersionState();
    if (this_present_versionState || that_present_versionState) {
      if (!(this_present_versionState && that_present_versionState))
        return false;
      if (!this.versionState.equals(that.versionState))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AppVersion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersionId()).compareTo(other.isSetVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionId, other.versionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionKey()).compareTo(other.isSetVersionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionKey, other.versionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionNum()).compareTo(other.isSetVersionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNum, other.versionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionNumTag()).compareTo(other.isSetVersionNumTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNumTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNumTag, other.versionNumTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadUrlX32()).compareTo(other.isSetDownloadUrlX32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadUrlX32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrlX32, other.downloadUrlX32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDownloadUrlX64()).compareTo(other.isSetDownloadUrlX64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDownloadUrlX64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.downloadUrlX64, other.downloadUrlX64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateType()).compareTo(other.isSetUpdateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateType, other.updateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtraInfo()).compareTo(other.isSetExtraInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtraInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extraInfo, other.extraInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperator()).compareTo(other.isSetOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operator, other.operator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateNotes()).compareTo(other.isSetUpdateNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateNotes, other.updateNotes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionState()).compareTo(other.isSetVersionState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionState, other.versionState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AppVersion(");
    boolean first = true;

    if (isSetVersionId()) {
      sb.append("versionId:");
      sb.append(this.versionId);
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetAppType()) {
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
    }
    if (isSetAppKey()) {
      if (!first) sb.append(", ");
      sb.append("appKey:");
      if (this.appKey == null) {
        sb.append("null");
      } else {
        sb.append(this.appKey);
      }
      first = false;
    }
    if (isSetVersionKey()) {
      if (!first) sb.append(", ");
      sb.append("versionKey:");
      if (this.versionKey == null) {
        sb.append("null");
      } else {
        sb.append(this.versionKey);
      }
      first = false;
    }
    if (isSetVersionNum()) {
      if (!first) sb.append(", ");
      sb.append("versionNum:");
      if (this.versionNum == null) {
        sb.append("null");
      } else {
        sb.append(this.versionNum);
      }
      first = false;
    }
    if (isSetVersionNumTag()) {
      if (!first) sb.append(", ");
      sb.append("versionNumTag:");
      if (this.versionNumTag == null) {
        sb.append("null");
      } else {
        sb.append(this.versionNumTag);
      }
      first = false;
    }
    if (isSetDownloadUrlX32()) {
      if (!first) sb.append(", ");
      sb.append("downloadUrlX32:");
      if (this.downloadUrlX32 == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadUrlX32);
      }
      first = false;
    }
    if (isSetDownloadUrlX64()) {
      if (!first) sb.append(", ");
      sb.append("downloadUrlX64:");
      if (this.downloadUrlX64 == null) {
        sb.append("null");
      } else {
        sb.append(this.downloadUrlX64);
      }
      first = false;
    }
    if (isSetUpdateType()) {
      if (!first) sb.append(", ");
      sb.append("updateType:");
      if (this.updateType == null) {
        sb.append("null");
      } else {
        sb.append(this.updateType);
      }
      first = false;
    }
    if (isSetExtraInfo()) {
      if (!first) sb.append(", ");
      sb.append("extraInfo:");
      if (this.extraInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.extraInfo);
      }
      first = false;
    }
    if (isSetOperator()) {
      if (!first) sb.append(", ");
      sb.append("operator:");
      if (this.operator == null) {
        sb.append("null");
      } else {
        sb.append(this.operator);
      }
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetUpdateNotes()) {
      if (!first) sb.append(", ");
      sb.append("updateNotes:");
      if (this.updateNotes == null) {
        sb.append("null");
      } else {
        sb.append(this.updateNotes);
      }
      first = false;
    }
    if (isSetVersionState()) {
      if (!first) sb.append(", ");
      sb.append("versionState:");
      if (this.versionState == null) {
        sb.append("null");
      } else {
        sb.append(this.versionState);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (versionNum != null) {
      versionNum.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AppVersionStandardSchemeFactory implements SchemeFactory {
    public AppVersionStandardScheme getScheme() {
      return new AppVersionStandardScheme();
    }
  }

  private static class AppVersionStandardScheme extends StandardScheme<AppVersion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AppVersion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionId = iprot.readI64();
              struct.setVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appId = iprot.readI64();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appType = AppType.findByValue(iprot.readI32());
              struct.setAppTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // VERSION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionKey = iprot.readString();
              struct.setVersionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.versionNum = new VersionNum();
              struct.versionNum.read(iprot);
              struct.setVersionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_NUM_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionNumTag = iprot.readString();
              struct.setVersionNumTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DOWNLOAD_URL_X32
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadUrlX32 = iprot.readString();
              struct.setDownloadUrlX32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DOWNLOAD_URL_X64
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.downloadUrlX64 = iprot.readString();
              struct.setDownloadUrlX64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // UPDATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.updateType = UpdateType.findByValue(iprot.readI32());
              struct.setUpdateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXTRA_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map18 = iprot.readMapBegin();
                struct.extraInfo = new HashMap<String,String>(2*_map18.size);
                for (int _i19 = 0; _i19 < _map18.size; ++_i19)
                {
                  String _key20;
                  String _val21;
                  _key20 = iprot.readString();
                  _val21 = iprot.readString();
                  struct.extraInfo.put(_key20, _val21);
                }
                iprot.readMapEnd();
              }
              struct.setExtraInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operator = iprot.readString();
              struct.setOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPDATE_NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list22 = iprot.readListBegin();
                struct.updateNotes = new ArrayList<String>(_list22.size);
                for (int _i23 = 0; _i23 < _list22.size; ++_i23)
                {
                  String _elem24;
                  _elem24 = iprot.readString();
                  struct.updateNotes.add(_elem24);
                }
                iprot.readListEnd();
              }
              struct.setUpdateNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // VERSION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionState = VersionState.findByValue(iprot.readI32());
              struct.setVersionStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AppVersion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVersionId()) {
        oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
        oprot.writeI64(struct.versionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI64(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.appType != null) {
        if (struct.isSetAppType()) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.appKey != null) {
        if (struct.isSetAppKey()) {
          oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
          oprot.writeString(struct.appKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionKey != null) {
        if (struct.isSetVersionKey()) {
          oprot.writeFieldBegin(VERSION_KEY_FIELD_DESC);
          oprot.writeString(struct.versionKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionNum != null) {
        if (struct.isSetVersionNum()) {
          oprot.writeFieldBegin(VERSION_NUM_FIELD_DESC);
          struct.versionNum.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionNumTag != null) {
        if (struct.isSetVersionNumTag()) {
          oprot.writeFieldBegin(VERSION_NUM_TAG_FIELD_DESC);
          oprot.writeString(struct.versionNumTag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downloadUrlX32 != null) {
        if (struct.isSetDownloadUrlX32()) {
          oprot.writeFieldBegin(DOWNLOAD_URL_X32_FIELD_DESC);
          oprot.writeString(struct.downloadUrlX32);
          oprot.writeFieldEnd();
        }
      }
      if (struct.downloadUrlX64 != null) {
        if (struct.isSetDownloadUrlX64()) {
          oprot.writeFieldBegin(DOWNLOAD_URL_X64_FIELD_DESC);
          oprot.writeString(struct.downloadUrlX64);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateType != null) {
        if (struct.isSetUpdateType()) {
          oprot.writeFieldBegin(UPDATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.updateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.extraInfo != null) {
        if (struct.isSetExtraInfo()) {
          oprot.writeFieldBegin(EXTRA_INFO_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.extraInfo.size()));
            for (Map.Entry<String, String> _iter25 : struct.extraInfo.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.operator != null) {
        if (struct.isSetOperator()) {
          oprot.writeFieldBegin(OPERATOR_FIELD_DESC);
          oprot.writeString(struct.operator);
          oprot.writeFieldEnd();
        }
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.updateNotes != null) {
        if (struct.isSetUpdateNotes()) {
          oprot.writeFieldBegin(UPDATE_NOTES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.updateNotes.size()));
            for (String _iter26 : struct.updateNotes)
            {
              oprot.writeString(_iter26);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionState != null) {
        if (struct.isSetVersionState()) {
          oprot.writeFieldBegin(VERSION_STATE_FIELD_DESC);
          oprot.writeI32(struct.versionState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AppVersionTupleSchemeFactory implements SchemeFactory {
    public AppVersionTupleScheme getScheme() {
      return new AppVersionTupleScheme();
    }
  }

  private static class AppVersionTupleScheme extends TupleScheme<AppVersion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AppVersion struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersionId()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetAppType()) {
        optionals.set(2);
      }
      if (struct.isSetAppKey()) {
        optionals.set(3);
      }
      if (struct.isSetVersionKey()) {
        optionals.set(4);
      }
      if (struct.isSetVersionNum()) {
        optionals.set(5);
      }
      if (struct.isSetVersionNumTag()) {
        optionals.set(6);
      }
      if (struct.isSetDownloadUrlX32()) {
        optionals.set(7);
      }
      if (struct.isSetDownloadUrlX64()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateType()) {
        optionals.set(9);
      }
      if (struct.isSetExtraInfo()) {
        optionals.set(10);
      }
      if (struct.isSetOperator()) {
        optionals.set(11);
      }
      if (struct.isSetNote()) {
        optionals.set(12);
      }
      if (struct.isSetUpdateNotes()) {
        optionals.set(13);
      }
      if (struct.isSetVersionState()) {
        optionals.set(14);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(15);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetVersionId()) {
        oprot.writeI64(struct.versionId);
      }
      if (struct.isSetAppId()) {
        oprot.writeI64(struct.appId);
      }
      if (struct.isSetAppType()) {
        oprot.writeI32(struct.appType.getValue());
      }
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetVersionKey()) {
        oprot.writeString(struct.versionKey);
      }
      if (struct.isSetVersionNum()) {
        struct.versionNum.write(oprot);
      }
      if (struct.isSetVersionNumTag()) {
        oprot.writeString(struct.versionNumTag);
      }
      if (struct.isSetDownloadUrlX32()) {
        oprot.writeString(struct.downloadUrlX32);
      }
      if (struct.isSetDownloadUrlX64()) {
        oprot.writeString(struct.downloadUrlX64);
      }
      if (struct.isSetUpdateType()) {
        oprot.writeI32(struct.updateType.getValue());
      }
      if (struct.isSetExtraInfo()) {
        {
          oprot.writeI32(struct.extraInfo.size());
          for (Map.Entry<String, String> _iter27 : struct.extraInfo.entrySet())
          {
            oprot.writeString(_iter27.getKey());
            oprot.writeString(_iter27.getValue());
          }
        }
      }
      if (struct.isSetOperator()) {
        oprot.writeString(struct.operator);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetUpdateNotes()) {
        {
          oprot.writeI32(struct.updateNotes.size());
          for (String _iter28 : struct.updateNotes)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetVersionState()) {
        oprot.writeI32(struct.versionState.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AppVersion struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.versionId = iprot.readI64();
        struct.setVersionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readI64();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appType = AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.versionKey = iprot.readString();
        struct.setVersionKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.versionNum = new VersionNum();
        struct.versionNum.read(iprot);
        struct.setVersionNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionNumTag = iprot.readString();
        struct.setVersionNumTagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.downloadUrlX32 = iprot.readString();
        struct.setDownloadUrlX32IsSet(true);
      }
      if (incoming.get(8)) {
        struct.downloadUrlX64 = iprot.readString();
        struct.setDownloadUrlX64IsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateType = UpdateType.findByValue(iprot.readI32());
        struct.setUpdateTypeIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map29 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.extraInfo = new HashMap<String,String>(2*_map29.size);
          for (int _i30 = 0; _i30 < _map29.size; ++_i30)
          {
            String _key31;
            String _val32;
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.extraInfo.put(_key31, _val32);
          }
        }
        struct.setExtraInfoIsSet(true);
      }
      if (incoming.get(11)) {
        struct.operator = iprot.readString();
        struct.setOperatorIsSet(true);
      }
      if (incoming.get(12)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list33 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.updateNotes = new ArrayList<String>(_list33.size);
          for (int _i34 = 0; _i34 < _list33.size; ++_i34)
          {
            String _elem35;
            _elem35 = iprot.readString();
            struct.updateNotes.add(_elem35);
          }
        }
        struct.setUpdateNotesIsSet(true);
      }
      if (incoming.get(14)) {
        struct.versionState = VersionState.findByValue(iprot.readI32());
        struct.setVersionStateIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

