/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 版本查询条件
 * start, end version num 可以根据版本号区间查询，结果包含区间边界
 */
public class ReqAppVersionOption implements org.apache.thrift.TBase<ReqAppVersionOption, ReqAppVersionOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqAppVersionOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqAppVersionOption");

  private static final org.apache.thrift.protocol.TField VERSION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("versionIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("appId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VERSION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("versionKey", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_VERSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("startVersionNum", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField END_VERSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("endVersionNum", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("versionState", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqAppVersionOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqAppVersionOptionTupleSchemeFactory());
  }

  public Set<Long> versionIds; // optional
  public long appId; // optional
  public String appKey; // optional
  public String versionKey; // optional
  public org.soldier.platform.app.manager.thriftapi.VersionNum startVersionNum; // optional
  public org.soldier.platform.app.manager.thriftapi.VersionNum endVersionNum; // optional
  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.VersionState
   */
  public org.soldier.platform.app.manager.thriftapi.VersionState versionState; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_IDS((short)1, "versionIds"),
    APP_ID((short)2, "appId"),
    APP_KEY((short)3, "appKey"),
    VERSION_KEY((short)4, "versionKey"),
    START_VERSION_NUM((short)5, "startVersionNum"),
    END_VERSION_NUM((short)6, "endVersionNum"),
    /**
     * 
     * @see org.soldier.platform.app.manager.thriftapi.VersionState
     */
    VERSION_STATE((short)7, "versionState");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_IDS
          return VERSION_IDS;
        case 2: // APP_ID
          return APP_ID;
        case 3: // APP_KEY
          return APP_KEY;
        case 4: // VERSION_KEY
          return VERSION_KEY;
        case 5: // START_VERSION_NUM
          return START_VERSION_NUM;
        case 6: // END_VERSION_NUM
          return END_VERSION_NUM;
        case 7: // VERSION_STATE
          return VERSION_STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION_IDS,_Fields.APP_ID,_Fields.APP_KEY,_Fields.VERSION_KEY,_Fields.START_VERSION_NUM,_Fields.END_VERSION_NUM,_Fields.VERSION_STATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_IDS, new org.apache.thrift.meta_data.FieldMetaData("versionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.APP_ID, new org.apache.thrift.meta_data.FieldMetaData("appId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_KEY, new org.apache.thrift.meta_data.FieldMetaData("versionKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_VERSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("startVersionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.app.manager.thriftapi.VersionNum.class)));
    tmpMap.put(_Fields.END_VERSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("endVersionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.app.manager.thriftapi.VersionNum.class)));
    tmpMap.put(_Fields.VERSION_STATE, new org.apache.thrift.meta_data.FieldMetaData("versionState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.soldier.platform.app.manager.thriftapi.VersionState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqAppVersionOption.class, metaDataMap);
  }

  public ReqAppVersionOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqAppVersionOption(ReqAppVersionOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetVersionIds()) {
      Set<Long> __this__versionIds = new HashSet<Long>(other.versionIds);
      this.versionIds = __this__versionIds;
    }
    this.appId = other.appId;
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetVersionKey()) {
      this.versionKey = other.versionKey;
    }
    if (other.isSetStartVersionNum()) {
      this.startVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum(other.startVersionNum);
    }
    if (other.isSetEndVersionNum()) {
      this.endVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum(other.endVersionNum);
    }
    if (other.isSetVersionState()) {
      this.versionState = other.versionState;
    }
  }

  public ReqAppVersionOption deepCopy() {
    return new ReqAppVersionOption(this);
  }

  @Override
  public void clear() {
    this.versionIds = null;
    setAppIdIsSet(false);
    this.appId = 0;
    this.appKey = null;
    this.versionKey = null;
    this.startVersionNum = null;
    this.endVersionNum = null;
    this.versionState = null;
  }

  public int getVersionIdsSize() {
    return (this.versionIds == null) ? 0 : this.versionIds.size();
  }

  public java.util.Iterator<Long> getVersionIdsIterator() {
    return (this.versionIds == null) ? null : this.versionIds.iterator();
  }

  public void addToVersionIds(long elem) {
    if (this.versionIds == null) {
      this.versionIds = new HashSet<Long>();
    }
    this.versionIds.add(elem);
  }

  public Set<Long> getVersionIds() {
    return this.versionIds;
  }

  public ReqAppVersionOption setVersionIds(Set<Long> versionIds) {
    this.versionIds = versionIds;
    return this;
  }

  public void unsetVersionIds() {
    this.versionIds = null;
  }

  /** Returns true if field versionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionIds() {
    return this.versionIds != null;
  }

  public void setVersionIdsIsSet(boolean value) {
    if (!value) {
      this.versionIds = null;
    }
  }

  public long getAppId() {
    return this.appId;
  }

  public ReqAppVersionOption setAppId(long appId) {
    this.appId = appId;
    setAppIdIsSet(true);
    return this;
  }

  public void unsetAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  /** Returns true if field appId is set (has been assigned a value) and false otherwise */
  public boolean isSetAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __APPID_ISSET_ID);
  }

  public void setAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APPID_ISSET_ID, value);
  }

  public String getAppKey() {
    return this.appKey;
  }

  public ReqAppVersionOption setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  public String getVersionKey() {
    return this.versionKey;
  }

  public ReqAppVersionOption setVersionKey(String versionKey) {
    this.versionKey = versionKey;
    return this;
  }

  public void unsetVersionKey() {
    this.versionKey = null;
  }

  /** Returns true if field versionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionKey() {
    return this.versionKey != null;
  }

  public void setVersionKeyIsSet(boolean value) {
    if (!value) {
      this.versionKey = null;
    }
  }

  public org.soldier.platform.app.manager.thriftapi.VersionNum getStartVersionNum() {
    return this.startVersionNum;
  }

  public ReqAppVersionOption setStartVersionNum(org.soldier.platform.app.manager.thriftapi.VersionNum startVersionNum) {
    this.startVersionNum = startVersionNum;
    return this;
  }

  public void unsetStartVersionNum() {
    this.startVersionNum = null;
  }

  /** Returns true if field startVersionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStartVersionNum() {
    return this.startVersionNum != null;
  }

  public void setStartVersionNumIsSet(boolean value) {
    if (!value) {
      this.startVersionNum = null;
    }
  }

  public org.soldier.platform.app.manager.thriftapi.VersionNum getEndVersionNum() {
    return this.endVersionNum;
  }

  public ReqAppVersionOption setEndVersionNum(org.soldier.platform.app.manager.thriftapi.VersionNum endVersionNum) {
    this.endVersionNum = endVersionNum;
    return this;
  }

  public void unsetEndVersionNum() {
    this.endVersionNum = null;
  }

  /** Returns true if field endVersionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetEndVersionNum() {
    return this.endVersionNum != null;
  }

  public void setEndVersionNumIsSet(boolean value) {
    if (!value) {
      this.endVersionNum = null;
    }
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.VersionState
   */
  public org.soldier.platform.app.manager.thriftapi.VersionState getVersionState() {
    return this.versionState;
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.VersionState
   */
  public ReqAppVersionOption setVersionState(org.soldier.platform.app.manager.thriftapi.VersionState versionState) {
    this.versionState = versionState;
    return this;
  }

  public void unsetVersionState() {
    this.versionState = null;
  }

  /** Returns true if field versionState is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionState() {
    return this.versionState != null;
  }

  public void setVersionStateIsSet(boolean value) {
    if (!value) {
      this.versionState = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_IDS:
      if (value == null) {
        unsetVersionIds();
      } else {
        setVersionIds((Set<Long>)value);
      }
      break;

    case APP_ID:
      if (value == null) {
        unsetAppId();
      } else {
        setAppId((Long)value);
      }
      break;

    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case VERSION_KEY:
      if (value == null) {
        unsetVersionKey();
      } else {
        setVersionKey((String)value);
      }
      break;

    case START_VERSION_NUM:
      if (value == null) {
        unsetStartVersionNum();
      } else {
        setStartVersionNum((org.soldier.platform.app.manager.thriftapi.VersionNum)value);
      }
      break;

    case END_VERSION_NUM:
      if (value == null) {
        unsetEndVersionNum();
      } else {
        setEndVersionNum((org.soldier.platform.app.manager.thriftapi.VersionNum)value);
      }
      break;

    case VERSION_STATE:
      if (value == null) {
        unsetVersionState();
      } else {
        setVersionState((org.soldier.platform.app.manager.thriftapi.VersionState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_IDS:
      return getVersionIds();

    case APP_ID:
      return Long.valueOf(getAppId());

    case APP_KEY:
      return getAppKey();

    case VERSION_KEY:
      return getVersionKey();

    case START_VERSION_NUM:
      return getStartVersionNum();

    case END_VERSION_NUM:
      return getEndVersionNum();

    case VERSION_STATE:
      return getVersionState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_IDS:
      return isSetVersionIds();
    case APP_ID:
      return isSetAppId();
    case APP_KEY:
      return isSetAppKey();
    case VERSION_KEY:
      return isSetVersionKey();
    case START_VERSION_NUM:
      return isSetStartVersionNum();
    case END_VERSION_NUM:
      return isSetEndVersionNum();
    case VERSION_STATE:
      return isSetVersionState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqAppVersionOption)
      return this.equals((ReqAppVersionOption)that);
    return false;
  }

  public boolean equals(ReqAppVersionOption that) {
    if (that == null)
      return false;

    boolean this_present_versionIds = true && this.isSetVersionIds();
    boolean that_present_versionIds = true && that.isSetVersionIds();
    if (this_present_versionIds || that_present_versionIds) {
      if (!(this_present_versionIds && that_present_versionIds))
        return false;
      if (!this.versionIds.equals(that.versionIds))
        return false;
    }

    boolean this_present_appId = true && this.isSetAppId();
    boolean that_present_appId = true && that.isSetAppId();
    if (this_present_appId || that_present_appId) {
      if (!(this_present_appId && that_present_appId))
        return false;
      if (this.appId != that.appId)
        return false;
    }

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_versionKey = true && this.isSetVersionKey();
    boolean that_present_versionKey = true && that.isSetVersionKey();
    if (this_present_versionKey || that_present_versionKey) {
      if (!(this_present_versionKey && that_present_versionKey))
        return false;
      if (!this.versionKey.equals(that.versionKey))
        return false;
    }

    boolean this_present_startVersionNum = true && this.isSetStartVersionNum();
    boolean that_present_startVersionNum = true && that.isSetStartVersionNum();
    if (this_present_startVersionNum || that_present_startVersionNum) {
      if (!(this_present_startVersionNum && that_present_startVersionNum))
        return false;
      if (!this.startVersionNum.equals(that.startVersionNum))
        return false;
    }

    boolean this_present_endVersionNum = true && this.isSetEndVersionNum();
    boolean that_present_endVersionNum = true && that.isSetEndVersionNum();
    if (this_present_endVersionNum || that_present_endVersionNum) {
      if (!(this_present_endVersionNum && that_present_endVersionNum))
        return false;
      if (!this.endVersionNum.equals(that.endVersionNum))
        return false;
    }

    boolean this_present_versionState = true && this.isSetVersionState();
    boolean that_present_versionState = true && that.isSetVersionState();
    if (this_present_versionState || that_present_versionState) {
      if (!(this_present_versionState && that_present_versionState))
        return false;
      if (!this.versionState.equals(that.versionState))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqAppVersionOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersionIds()).compareTo(other.isSetVersionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionIds, other.versionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppId()).compareTo(other.isSetAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appId, other.appId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionKey()).compareTo(other.isSetVersionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionKey, other.versionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartVersionNum()).compareTo(other.isSetStartVersionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartVersionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startVersionNum, other.startVersionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndVersionNum()).compareTo(other.isSetEndVersionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndVersionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endVersionNum, other.endVersionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionState()).compareTo(other.isSetVersionState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionState, other.versionState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqAppVersionOption(");
    boolean first = true;

    if (isSetVersionIds()) {
      sb.append("versionIds:");
      if (this.versionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.versionIds);
      }
      first = false;
    }
    if (isSetAppId()) {
      if (!first) sb.append(", ");
      sb.append("appId:");
      sb.append(this.appId);
      first = false;
    }
    if (isSetAppKey()) {
      if (!first) sb.append(", ");
      sb.append("appKey:");
      if (this.appKey == null) {
        sb.append("null");
      } else {
        sb.append(this.appKey);
      }
      first = false;
    }
    if (isSetVersionKey()) {
      if (!first) sb.append(", ");
      sb.append("versionKey:");
      if (this.versionKey == null) {
        sb.append("null");
      } else {
        sb.append(this.versionKey);
      }
      first = false;
    }
    if (isSetStartVersionNum()) {
      if (!first) sb.append(", ");
      sb.append("startVersionNum:");
      if (this.startVersionNum == null) {
        sb.append("null");
      } else {
        sb.append(this.startVersionNum);
      }
      first = false;
    }
    if (isSetEndVersionNum()) {
      if (!first) sb.append(", ");
      sb.append("endVersionNum:");
      if (this.endVersionNum == null) {
        sb.append("null");
      } else {
        sb.append(this.endVersionNum);
      }
      first = false;
    }
    if (isSetVersionState()) {
      if (!first) sb.append(", ");
      sb.append("versionState:");
      if (this.versionState == null) {
        sb.append("null");
      } else {
        sb.append(this.versionState);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startVersionNum != null) {
      startVersionNum.validate();
    }
    if (endVersionNum != null) {
      endVersionNum.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqAppVersionOptionStandardSchemeFactory implements SchemeFactory {
    public ReqAppVersionOptionStandardScheme getScheme() {
      return new ReqAppVersionOptionStandardScheme();
    }
  }

  private static class ReqAppVersionOptionStandardScheme extends StandardScheme<ReqAppVersionOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqAppVersionOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set40 = iprot.readSetBegin();
                struct.versionIds = new HashSet<Long>(2*_set40.size);
                for (int _i41 = 0; _i41 < _set40.size; ++_i41)
                {
                  long _elem42;
                  _elem42 = iprot.readI64();
                  struct.versionIds.add(_elem42);
                }
                iprot.readSetEnd();
              }
              struct.setVersionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.appId = iprot.readI64();
              struct.setAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VERSION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.versionKey = iprot.readString();
              struct.setVersionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_VERSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
              struct.startVersionNum.read(iprot);
              struct.setStartVersionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_VERSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
              struct.endVersionNum.read(iprot);
              struct.setEndVersionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionState = org.soldier.platform.app.manager.thriftapi.VersionState.findByValue(iprot.readI32());
              struct.setVersionStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqAppVersionOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.versionIds != null) {
        if (struct.isSetVersionIds()) {
          oprot.writeFieldBegin(VERSION_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.versionIds.size()));
            for (long _iter43 : struct.versionIds)
            {
              oprot.writeI64(_iter43);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAppId()) {
        oprot.writeFieldBegin(APP_ID_FIELD_DESC);
        oprot.writeI64(struct.appId);
        oprot.writeFieldEnd();
      }
      if (struct.appKey != null) {
        if (struct.isSetAppKey()) {
          oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
          oprot.writeString(struct.appKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionKey != null) {
        if (struct.isSetVersionKey()) {
          oprot.writeFieldBegin(VERSION_KEY_FIELD_DESC);
          oprot.writeString(struct.versionKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.startVersionNum != null) {
        if (struct.isSetStartVersionNum()) {
          oprot.writeFieldBegin(START_VERSION_NUM_FIELD_DESC);
          struct.startVersionNum.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endVersionNum != null) {
        if (struct.isSetEndVersionNum()) {
          oprot.writeFieldBegin(END_VERSION_NUM_FIELD_DESC);
          struct.endVersionNum.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.versionState != null) {
        if (struct.isSetVersionState()) {
          oprot.writeFieldBegin(VERSION_STATE_FIELD_DESC);
          oprot.writeI32(struct.versionState.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqAppVersionOptionTupleSchemeFactory implements SchemeFactory {
    public ReqAppVersionOptionTupleScheme getScheme() {
      return new ReqAppVersionOptionTupleScheme();
    }
  }

  private static class ReqAppVersionOptionTupleScheme extends TupleScheme<ReqAppVersionOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqAppVersionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersionIds()) {
        optionals.set(0);
      }
      if (struct.isSetAppId()) {
        optionals.set(1);
      }
      if (struct.isSetAppKey()) {
        optionals.set(2);
      }
      if (struct.isSetVersionKey()) {
        optionals.set(3);
      }
      if (struct.isSetStartVersionNum()) {
        optionals.set(4);
      }
      if (struct.isSetEndVersionNum()) {
        optionals.set(5);
      }
      if (struct.isSetVersionState()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetVersionIds()) {
        {
          oprot.writeI32(struct.versionIds.size());
          for (long _iter44 : struct.versionIds)
          {
            oprot.writeI64(_iter44);
          }
        }
      }
      if (struct.isSetAppId()) {
        oprot.writeI64(struct.appId);
      }
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetVersionKey()) {
        oprot.writeString(struct.versionKey);
      }
      if (struct.isSetStartVersionNum()) {
        struct.startVersionNum.write(oprot);
      }
      if (struct.isSetEndVersionNum()) {
        struct.endVersionNum.write(oprot);
      }
      if (struct.isSetVersionState()) {
        oprot.writeI32(struct.versionState.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqAppVersionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.versionIds = new HashSet<Long>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            long _elem47;
            _elem47 = iprot.readI64();
            struct.versionIds.add(_elem47);
          }
        }
        struct.setVersionIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appId = iprot.readI64();
        struct.setAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.versionKey = iprot.readString();
        struct.setVersionKeyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.startVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
        struct.startVersionNum.read(iprot);
        struct.setStartVersionNumIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endVersionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
        struct.endVersionNum.read(iprot);
        struct.setEndVersionNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionState = org.soldier.platform.app.manager.thriftapi.VersionState.findByValue(iprot.readI32());
        struct.setVersionStateIsSet(true);
      }
    }
  }

}

