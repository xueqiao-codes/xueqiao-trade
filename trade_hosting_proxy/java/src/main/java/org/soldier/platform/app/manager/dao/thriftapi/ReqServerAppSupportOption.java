/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqServerAppSupportOption implements org.apache.thrift.TBase<ReqServerAppSupportOption, ReqServerAppSupportOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqServerAppSupportOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqServerAppSupportOption");

  private static final org.apache.thrift.protocol.TField SERVER_VERSION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("serverVersionIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField SUPPORT_CLIENT_APP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supportClientAppId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField VERSION_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNum", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqServerAppSupportOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqServerAppSupportOptionTupleSchemeFactory());
  }

  public Set<Long> serverVersionIds; // optional
  public long supportClientAppId; // optional
  public org.soldier.platform.app.manager.thriftapi.VersionNum versionNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SERVER_VERSION_IDS((short)1, "serverVersionIds"),
    SUPPORT_CLIENT_APP_ID((short)2, "supportClientAppId"),
    VERSION_NUM((short)3, "versionNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SERVER_VERSION_IDS
          return SERVER_VERSION_IDS;
        case 2: // SUPPORT_CLIENT_APP_ID
          return SUPPORT_CLIENT_APP_ID;
        case 3: // VERSION_NUM
          return VERSION_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUPPORTCLIENTAPPID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SERVER_VERSION_IDS,_Fields.SUPPORT_CLIENT_APP_ID,_Fields.VERSION_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SERVER_VERSION_IDS, new org.apache.thrift.meta_data.FieldMetaData("serverVersionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.SUPPORT_CLIENT_APP_ID, new org.apache.thrift.meta_data.FieldMetaData("supportClientAppId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NUM, new org.apache.thrift.meta_data.FieldMetaData("versionNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.app.manager.thriftapi.VersionNum.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqServerAppSupportOption.class, metaDataMap);
  }

  public ReqServerAppSupportOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqServerAppSupportOption(ReqServerAppSupportOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetServerVersionIds()) {
      Set<Long> __this__serverVersionIds = new HashSet<Long>(other.serverVersionIds);
      this.serverVersionIds = __this__serverVersionIds;
    }
    this.supportClientAppId = other.supportClientAppId;
    if (other.isSetVersionNum()) {
      this.versionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum(other.versionNum);
    }
  }

  public ReqServerAppSupportOption deepCopy() {
    return new ReqServerAppSupportOption(this);
  }

  @Override
  public void clear() {
    this.serverVersionIds = null;
    setSupportClientAppIdIsSet(false);
    this.supportClientAppId = 0;
    this.versionNum = null;
  }

  public int getServerVersionIdsSize() {
    return (this.serverVersionIds == null) ? 0 : this.serverVersionIds.size();
  }

  public java.util.Iterator<Long> getServerVersionIdsIterator() {
    return (this.serverVersionIds == null) ? null : this.serverVersionIds.iterator();
  }

  public void addToServerVersionIds(long elem) {
    if (this.serverVersionIds == null) {
      this.serverVersionIds = new HashSet<Long>();
    }
    this.serverVersionIds.add(elem);
  }

  public Set<Long> getServerVersionIds() {
    return this.serverVersionIds;
  }

  public ReqServerAppSupportOption setServerVersionIds(Set<Long> serverVersionIds) {
    this.serverVersionIds = serverVersionIds;
    return this;
  }

  public void unsetServerVersionIds() {
    this.serverVersionIds = null;
  }

  /** Returns true if field serverVersionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetServerVersionIds() {
    return this.serverVersionIds != null;
  }

  public void setServerVersionIdsIsSet(boolean value) {
    if (!value) {
      this.serverVersionIds = null;
    }
  }

  public long getSupportClientAppId() {
    return this.supportClientAppId;
  }

  public ReqServerAppSupportOption setSupportClientAppId(long supportClientAppId) {
    this.supportClientAppId = supportClientAppId;
    setSupportClientAppIdIsSet(true);
    return this;
  }

  public void unsetSupportClientAppId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUPPORTCLIENTAPPID_ISSET_ID);
  }

  /** Returns true if field supportClientAppId is set (has been assigned a value) and false otherwise */
  public boolean isSetSupportClientAppId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUPPORTCLIENTAPPID_ISSET_ID);
  }

  public void setSupportClientAppIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUPPORTCLIENTAPPID_ISSET_ID, value);
  }

  public org.soldier.platform.app.manager.thriftapi.VersionNum getVersionNum() {
    return this.versionNum;
  }

  public ReqServerAppSupportOption setVersionNum(org.soldier.platform.app.manager.thriftapi.VersionNum versionNum) {
    this.versionNum = versionNum;
    return this;
  }

  public void unsetVersionNum() {
    this.versionNum = null;
  }

  /** Returns true if field versionNum is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNum() {
    return this.versionNum != null;
  }

  public void setVersionNumIsSet(boolean value) {
    if (!value) {
      this.versionNum = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SERVER_VERSION_IDS:
      if (value == null) {
        unsetServerVersionIds();
      } else {
        setServerVersionIds((Set<Long>)value);
      }
      break;

    case SUPPORT_CLIENT_APP_ID:
      if (value == null) {
        unsetSupportClientAppId();
      } else {
        setSupportClientAppId((Long)value);
      }
      break;

    case VERSION_NUM:
      if (value == null) {
        unsetVersionNum();
      } else {
        setVersionNum((org.soldier.platform.app.manager.thriftapi.VersionNum)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SERVER_VERSION_IDS:
      return getServerVersionIds();

    case SUPPORT_CLIENT_APP_ID:
      return Long.valueOf(getSupportClientAppId());

    case VERSION_NUM:
      return getVersionNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SERVER_VERSION_IDS:
      return isSetServerVersionIds();
    case SUPPORT_CLIENT_APP_ID:
      return isSetSupportClientAppId();
    case VERSION_NUM:
      return isSetVersionNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqServerAppSupportOption)
      return this.equals((ReqServerAppSupportOption)that);
    return false;
  }

  public boolean equals(ReqServerAppSupportOption that) {
    if (that == null)
      return false;

    boolean this_present_serverVersionIds = true && this.isSetServerVersionIds();
    boolean that_present_serverVersionIds = true && that.isSetServerVersionIds();
    if (this_present_serverVersionIds || that_present_serverVersionIds) {
      if (!(this_present_serverVersionIds && that_present_serverVersionIds))
        return false;
      if (!this.serverVersionIds.equals(that.serverVersionIds))
        return false;
    }

    boolean this_present_supportClientAppId = true && this.isSetSupportClientAppId();
    boolean that_present_supportClientAppId = true && that.isSetSupportClientAppId();
    if (this_present_supportClientAppId || that_present_supportClientAppId) {
      if (!(this_present_supportClientAppId && that_present_supportClientAppId))
        return false;
      if (this.supportClientAppId != that.supportClientAppId)
        return false;
    }

    boolean this_present_versionNum = true && this.isSetVersionNum();
    boolean that_present_versionNum = true && that.isSetVersionNum();
    if (this_present_versionNum || that_present_versionNum) {
      if (!(this_present_versionNum && that_present_versionNum))
        return false;
      if (!this.versionNum.equals(that.versionNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqServerAppSupportOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetServerVersionIds()).compareTo(other.isSetServerVersionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerVersionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverVersionIds, other.serverVersionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSupportClientAppId()).compareTo(other.isSetSupportClientAppId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupportClientAppId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supportClientAppId, other.supportClientAppId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersionNum()).compareTo(other.isSetVersionNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNum, other.versionNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqServerAppSupportOption(");
    boolean first = true;

    if (isSetServerVersionIds()) {
      sb.append("serverVersionIds:");
      if (this.serverVersionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.serverVersionIds);
      }
      first = false;
    }
    if (isSetSupportClientAppId()) {
      if (!first) sb.append(", ");
      sb.append("supportClientAppId:");
      sb.append(this.supportClientAppId);
      first = false;
    }
    if (isSetVersionNum()) {
      if (!first) sb.append(", ");
      sb.append("versionNum:");
      if (this.versionNum == null) {
        sb.append("null");
      } else {
        sb.append(this.versionNum);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (versionNum != null) {
      versionNum.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqServerAppSupportOptionStandardSchemeFactory implements SchemeFactory {
    public ReqServerAppSupportOptionStandardScheme getScheme() {
      return new ReqServerAppSupportOptionStandardScheme();
    }
  }

  private static class ReqServerAppSupportOptionStandardScheme extends StandardScheme<ReqServerAppSupportOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqServerAppSupportOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SERVER_VERSION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set56 = iprot.readSetBegin();
                struct.serverVersionIds = new HashSet<Long>(2*_set56.size);
                for (int _i57 = 0; _i57 < _set56.size; ++_i57)
                {
                  long _elem58;
                  _elem58 = iprot.readI64();
                  struct.serverVersionIds.add(_elem58);
                }
                iprot.readSetEnd();
              }
              struct.setServerVersionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUPPORT_CLIENT_APP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.supportClientAppId = iprot.readI64();
              struct.setSupportClientAppIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSION_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.versionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
              struct.versionNum.read(iprot);
              struct.setVersionNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqServerAppSupportOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.serverVersionIds != null) {
        if (struct.isSetServerVersionIds()) {
          oprot.writeFieldBegin(SERVER_VERSION_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.serverVersionIds.size()));
            for (long _iter59 : struct.serverVersionIds)
            {
              oprot.writeI64(_iter59);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSupportClientAppId()) {
        oprot.writeFieldBegin(SUPPORT_CLIENT_APP_ID_FIELD_DESC);
        oprot.writeI64(struct.supportClientAppId);
        oprot.writeFieldEnd();
      }
      if (struct.versionNum != null) {
        if (struct.isSetVersionNum()) {
          oprot.writeFieldBegin(VERSION_NUM_FIELD_DESC);
          struct.versionNum.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqServerAppSupportOptionTupleSchemeFactory implements SchemeFactory {
    public ReqServerAppSupportOptionTupleScheme getScheme() {
      return new ReqServerAppSupportOptionTupleScheme();
    }
  }

  private static class ReqServerAppSupportOptionTupleScheme extends TupleScheme<ReqServerAppSupportOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqServerAppSupportOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetServerVersionIds()) {
        optionals.set(0);
      }
      if (struct.isSetSupportClientAppId()) {
        optionals.set(1);
      }
      if (struct.isSetVersionNum()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetServerVersionIds()) {
        {
          oprot.writeI32(struct.serverVersionIds.size());
          for (long _iter60 : struct.serverVersionIds)
          {
            oprot.writeI64(_iter60);
          }
        }
      }
      if (struct.isSetSupportClientAppId()) {
        oprot.writeI64(struct.supportClientAppId);
      }
      if (struct.isSetVersionNum()) {
        struct.versionNum.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqServerAppSupportOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set61 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.serverVersionIds = new HashSet<Long>(2*_set61.size);
          for (int _i62 = 0; _i62 < _set61.size; ++_i62)
          {
            long _elem63;
            _elem63 = iprot.readI64();
            struct.serverVersionIds.add(_elem63);
          }
        }
        struct.setServerVersionIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.supportClientAppId = iprot.readI64();
        struct.setSupportClientAppIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.versionNum = new org.soldier.platform.app.manager.thriftapi.VersionNum();
        struct.versionNum.read(iprot);
        struct.setVersionNumIsSet(true);
      }
    }
  }

}

