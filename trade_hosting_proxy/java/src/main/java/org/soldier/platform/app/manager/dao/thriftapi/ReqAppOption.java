/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.soldier.platform.app.manager.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqAppOption implements org.apache.thrift.TBase<ReqAppOption, ReqAppOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqAppOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqAppOption");

  private static final org.apache.thrift.protocol.TField APP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("appIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField APP_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("appKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField APP_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("appType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField PROJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("projectId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OS_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("osPlatform", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField APP_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("appNamePartical", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqAppOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqAppOptionTupleSchemeFactory());
  }

  public Set<Long> appIds; // optional
  public String appKey; // optional
  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.AppType
   */
  public org.soldier.platform.app.manager.thriftapi.AppType appType; // optional
  public long projectId; // optional
  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.OSPlatform
   */
  public org.soldier.platform.app.manager.thriftapi.OSPlatform osPlatform; // optional
  public String appNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APP_IDS((short)1, "appIds"),
    APP_KEY((short)2, "appKey"),
    /**
     * 
     * @see org.soldier.platform.app.manager.thriftapi.AppType
     */
    APP_TYPE((short)3, "appType"),
    PROJECT_ID((short)4, "projectId"),
    /**
     * 
     * @see org.soldier.platform.app.manager.thriftapi.OSPlatform
     */
    OS_PLATFORM((short)5, "osPlatform"),
    APP_NAME_PARTICAL((short)6, "appNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APP_IDS
          return APP_IDS;
        case 2: // APP_KEY
          return APP_KEY;
        case 3: // APP_TYPE
          return APP_TYPE;
        case 4: // PROJECT_ID
          return PROJECT_ID;
        case 5: // OS_PLATFORM
          return OS_PLATFORM;
        case 6: // APP_NAME_PARTICAL
          return APP_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PROJECTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.APP_IDS,_Fields.APP_KEY,_Fields.APP_TYPE,_Fields.PROJECT_ID,_Fields.OS_PLATFORM,_Fields.APP_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APP_IDS, new org.apache.thrift.meta_data.FieldMetaData("appIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.APP_KEY, new org.apache.thrift.meta_data.FieldMetaData("appKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_TYPE, new org.apache.thrift.meta_data.FieldMetaData("appType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.soldier.platform.app.manager.thriftapi.AppType.class)));
    tmpMap.put(_Fields.PROJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("projectId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OS_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("osPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, org.soldier.platform.app.manager.thriftapi.OSPlatform.class)));
    tmpMap.put(_Fields.APP_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("appNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqAppOption.class, metaDataMap);
  }

  public ReqAppOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqAppOption(ReqAppOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAppIds()) {
      Set<Long> __this__appIds = new HashSet<Long>(other.appIds);
      this.appIds = __this__appIds;
    }
    if (other.isSetAppKey()) {
      this.appKey = other.appKey;
    }
    if (other.isSetAppType()) {
      this.appType = other.appType;
    }
    this.projectId = other.projectId;
    if (other.isSetOsPlatform()) {
      this.osPlatform = other.osPlatform;
    }
    if (other.isSetAppNamePartical()) {
      this.appNamePartical = other.appNamePartical;
    }
  }

  public ReqAppOption deepCopy() {
    return new ReqAppOption(this);
  }

  @Override
  public void clear() {
    this.appIds = null;
    this.appKey = null;
    this.appType = null;
    setProjectIdIsSet(false);
    this.projectId = 0;
    this.osPlatform = null;
    this.appNamePartical = null;
  }

  public int getAppIdsSize() {
    return (this.appIds == null) ? 0 : this.appIds.size();
  }

  public java.util.Iterator<Long> getAppIdsIterator() {
    return (this.appIds == null) ? null : this.appIds.iterator();
  }

  public void addToAppIds(long elem) {
    if (this.appIds == null) {
      this.appIds = new HashSet<Long>();
    }
    this.appIds.add(elem);
  }

  public Set<Long> getAppIds() {
    return this.appIds;
  }

  public ReqAppOption setAppIds(Set<Long> appIds) {
    this.appIds = appIds;
    return this;
  }

  public void unsetAppIds() {
    this.appIds = null;
  }

  /** Returns true if field appIds is set (has been assigned a value) and false otherwise */
  public boolean isSetAppIds() {
    return this.appIds != null;
  }

  public void setAppIdsIsSet(boolean value) {
    if (!value) {
      this.appIds = null;
    }
  }

  public String getAppKey() {
    return this.appKey;
  }

  public ReqAppOption setAppKey(String appKey) {
    this.appKey = appKey;
    return this;
  }

  public void unsetAppKey() {
    this.appKey = null;
  }

  /** Returns true if field appKey is set (has been assigned a value) and false otherwise */
  public boolean isSetAppKey() {
    return this.appKey != null;
  }

  public void setAppKeyIsSet(boolean value) {
    if (!value) {
      this.appKey = null;
    }
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.AppType
   */
  public org.soldier.platform.app.manager.thriftapi.AppType getAppType() {
    return this.appType;
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.AppType
   */
  public ReqAppOption setAppType(org.soldier.platform.app.manager.thriftapi.AppType appType) {
    this.appType = appType;
    return this;
  }

  public void unsetAppType() {
    this.appType = null;
  }

  /** Returns true if field appType is set (has been assigned a value) and false otherwise */
  public boolean isSetAppType() {
    return this.appType != null;
  }

  public void setAppTypeIsSet(boolean value) {
    if (!value) {
      this.appType = null;
    }
  }

  public long getProjectId() {
    return this.projectId;
  }

  public ReqAppOption setProjectId(long projectId) {
    this.projectId = projectId;
    setProjectIdIsSet(true);
    return this;
  }

  public void unsetProjectId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  /** Returns true if field projectId is set (has been assigned a value) and false otherwise */
  public boolean isSetProjectId() {
    return EncodingUtils.testBit(__isset_bitfield, __PROJECTID_ISSET_ID);
  }

  public void setProjectIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROJECTID_ISSET_ID, value);
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.OSPlatform
   */
  public org.soldier.platform.app.manager.thriftapi.OSPlatform getOsPlatform() {
    return this.osPlatform;
  }

  /**
   * 
   * @see org.soldier.platform.app.manager.thriftapi.OSPlatform
   */
  public ReqAppOption setOsPlatform(org.soldier.platform.app.manager.thriftapi.OSPlatform osPlatform) {
    this.osPlatform = osPlatform;
    return this;
  }

  public void unsetOsPlatform() {
    this.osPlatform = null;
  }

  /** Returns true if field osPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetOsPlatform() {
    return this.osPlatform != null;
  }

  public void setOsPlatformIsSet(boolean value) {
    if (!value) {
      this.osPlatform = null;
    }
  }

  public String getAppNamePartical() {
    return this.appNamePartical;
  }

  public ReqAppOption setAppNamePartical(String appNamePartical) {
    this.appNamePartical = appNamePartical;
    return this;
  }

  public void unsetAppNamePartical() {
    this.appNamePartical = null;
  }

  /** Returns true if field appNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetAppNamePartical() {
    return this.appNamePartical != null;
  }

  public void setAppNameParticalIsSet(boolean value) {
    if (!value) {
      this.appNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APP_IDS:
      if (value == null) {
        unsetAppIds();
      } else {
        setAppIds((Set<Long>)value);
      }
      break;

    case APP_KEY:
      if (value == null) {
        unsetAppKey();
      } else {
        setAppKey((String)value);
      }
      break;

    case APP_TYPE:
      if (value == null) {
        unsetAppType();
      } else {
        setAppType((org.soldier.platform.app.manager.thriftapi.AppType)value);
      }
      break;

    case PROJECT_ID:
      if (value == null) {
        unsetProjectId();
      } else {
        setProjectId((Long)value);
      }
      break;

    case OS_PLATFORM:
      if (value == null) {
        unsetOsPlatform();
      } else {
        setOsPlatform((org.soldier.platform.app.manager.thriftapi.OSPlatform)value);
      }
      break;

    case APP_NAME_PARTICAL:
      if (value == null) {
        unsetAppNamePartical();
      } else {
        setAppNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APP_IDS:
      return getAppIds();

    case APP_KEY:
      return getAppKey();

    case APP_TYPE:
      return getAppType();

    case PROJECT_ID:
      return Long.valueOf(getProjectId());

    case OS_PLATFORM:
      return getOsPlatform();

    case APP_NAME_PARTICAL:
      return getAppNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APP_IDS:
      return isSetAppIds();
    case APP_KEY:
      return isSetAppKey();
    case APP_TYPE:
      return isSetAppType();
    case PROJECT_ID:
      return isSetProjectId();
    case OS_PLATFORM:
      return isSetOsPlatform();
    case APP_NAME_PARTICAL:
      return isSetAppNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqAppOption)
      return this.equals((ReqAppOption)that);
    return false;
  }

  public boolean equals(ReqAppOption that) {
    if (that == null)
      return false;

    boolean this_present_appIds = true && this.isSetAppIds();
    boolean that_present_appIds = true && that.isSetAppIds();
    if (this_present_appIds || that_present_appIds) {
      if (!(this_present_appIds && that_present_appIds))
        return false;
      if (!this.appIds.equals(that.appIds))
        return false;
    }

    boolean this_present_appKey = true && this.isSetAppKey();
    boolean that_present_appKey = true && that.isSetAppKey();
    if (this_present_appKey || that_present_appKey) {
      if (!(this_present_appKey && that_present_appKey))
        return false;
      if (!this.appKey.equals(that.appKey))
        return false;
    }

    boolean this_present_appType = true && this.isSetAppType();
    boolean that_present_appType = true && that.isSetAppType();
    if (this_present_appType || that_present_appType) {
      if (!(this_present_appType && that_present_appType))
        return false;
      if (!this.appType.equals(that.appType))
        return false;
    }

    boolean this_present_projectId = true && this.isSetProjectId();
    boolean that_present_projectId = true && that.isSetProjectId();
    if (this_present_projectId || that_present_projectId) {
      if (!(this_present_projectId && that_present_projectId))
        return false;
      if (this.projectId != that.projectId)
        return false;
    }

    boolean this_present_osPlatform = true && this.isSetOsPlatform();
    boolean that_present_osPlatform = true && that.isSetOsPlatform();
    if (this_present_osPlatform || that_present_osPlatform) {
      if (!(this_present_osPlatform && that_present_osPlatform))
        return false;
      if (!this.osPlatform.equals(that.osPlatform))
        return false;
    }

    boolean this_present_appNamePartical = true && this.isSetAppNamePartical();
    boolean that_present_appNamePartical = true && that.isSetAppNamePartical();
    if (this_present_appNamePartical || that_present_appNamePartical) {
      if (!(this_present_appNamePartical && that_present_appNamePartical))
        return false;
      if (!this.appNamePartical.equals(that.appNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqAppOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAppIds()).compareTo(other.isSetAppIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appIds, other.appIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppKey()).compareTo(other.isSetAppKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appKey, other.appKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppType()).compareTo(other.isSetAppType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appType, other.appType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProjectId()).compareTo(other.isSetProjectId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProjectId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.projectId, other.projectId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOsPlatform()).compareTo(other.isSetOsPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osPlatform, other.osPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppNamePartical()).compareTo(other.isSetAppNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appNamePartical, other.appNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqAppOption(");
    boolean first = true;

    if (isSetAppIds()) {
      sb.append("appIds:");
      if (this.appIds == null) {
        sb.append("null");
      } else {
        sb.append(this.appIds);
      }
      first = false;
    }
    if (isSetAppKey()) {
      if (!first) sb.append(", ");
      sb.append("appKey:");
      if (this.appKey == null) {
        sb.append("null");
      } else {
        sb.append(this.appKey);
      }
      first = false;
    }
    if (isSetAppType()) {
      if (!first) sb.append(", ");
      sb.append("appType:");
      if (this.appType == null) {
        sb.append("null");
      } else {
        sb.append(this.appType);
      }
      first = false;
    }
    if (isSetProjectId()) {
      if (!first) sb.append(", ");
      sb.append("projectId:");
      sb.append(this.projectId);
      first = false;
    }
    if (isSetOsPlatform()) {
      if (!first) sb.append(", ");
      sb.append("osPlatform:");
      if (this.osPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.osPlatform);
      }
      first = false;
    }
    if (isSetAppNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("appNamePartical:");
      if (this.appNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.appNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqAppOptionStandardSchemeFactory implements SchemeFactory {
    public ReqAppOptionStandardScheme getScheme() {
      return new ReqAppOptionStandardScheme();
    }
  }

  private static class ReqAppOptionStandardScheme extends StandardScheme<ReqAppOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqAppOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.appIds = new HashSet<Long>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.appIds.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setAppIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appKey = iprot.readString();
              struct.setAppKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APP_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appType = org.soldier.platform.app.manager.thriftapi.AppType.findByValue(iprot.readI32());
              struct.setAppTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROJECT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.projectId = iprot.readI64();
              struct.setProjectIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OS_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osPlatform = org.soldier.platform.app.manager.thriftapi.OSPlatform.findByValue(iprot.readI32());
              struct.setOsPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // APP_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appNamePartical = iprot.readString();
              struct.setAppNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqAppOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.appIds != null) {
        if (struct.isSetAppIds()) {
          oprot.writeFieldBegin(APP_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.appIds.size()));
            for (long _iter27 : struct.appIds)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.appKey != null) {
        if (struct.isSetAppKey()) {
          oprot.writeFieldBegin(APP_KEY_FIELD_DESC);
          oprot.writeString(struct.appKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appType != null) {
        if (struct.isSetAppType()) {
          oprot.writeFieldBegin(APP_TYPE_FIELD_DESC);
          oprot.writeI32(struct.appType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProjectId()) {
        oprot.writeFieldBegin(PROJECT_ID_FIELD_DESC);
        oprot.writeI64(struct.projectId);
        oprot.writeFieldEnd();
      }
      if (struct.osPlatform != null) {
        if (struct.isSetOsPlatform()) {
          oprot.writeFieldBegin(OS_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.osPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.appNamePartical != null) {
        if (struct.isSetAppNamePartical()) {
          oprot.writeFieldBegin(APP_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.appNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqAppOptionTupleSchemeFactory implements SchemeFactory {
    public ReqAppOptionTupleScheme getScheme() {
      return new ReqAppOptionTupleScheme();
    }
  }

  private static class ReqAppOptionTupleScheme extends TupleScheme<ReqAppOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqAppOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAppIds()) {
        optionals.set(0);
      }
      if (struct.isSetAppKey()) {
        optionals.set(1);
      }
      if (struct.isSetAppType()) {
        optionals.set(2);
      }
      if (struct.isSetProjectId()) {
        optionals.set(3);
      }
      if (struct.isSetOsPlatform()) {
        optionals.set(4);
      }
      if (struct.isSetAppNamePartical()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetAppIds()) {
        {
          oprot.writeI32(struct.appIds.size());
          for (long _iter28 : struct.appIds)
          {
            oprot.writeI64(_iter28);
          }
        }
      }
      if (struct.isSetAppKey()) {
        oprot.writeString(struct.appKey);
      }
      if (struct.isSetAppType()) {
        oprot.writeI32(struct.appType.getValue());
      }
      if (struct.isSetProjectId()) {
        oprot.writeI64(struct.projectId);
      }
      if (struct.isSetOsPlatform()) {
        oprot.writeI32(struct.osPlatform.getValue());
      }
      if (struct.isSetAppNamePartical()) {
        oprot.writeString(struct.appNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqAppOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.appIds = new HashSet<Long>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            long _elem31;
            _elem31 = iprot.readI64();
            struct.appIds.add(_elem31);
          }
        }
        struct.setAppIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appKey = iprot.readString();
        struct.setAppKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.appType = org.soldier.platform.app.manager.thriftapi.AppType.findByValue(iprot.readI32());
        struct.setAppTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.projectId = iprot.readI64();
        struct.setProjectIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.osPlatform = org.soldier.platform.app.manager.thriftapi.OSPlatform.findByValue(iprot.readI32());
        struct.setOsPlatformIsSet(true);
      }
      if (incoming.get(5)) {
        struct.appNamePartical = iprot.readString();
        struct.setAppNameParticalIsSet(true);
      }
    }
  }

}

