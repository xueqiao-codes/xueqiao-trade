/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingUpsideNotifyStateHandleInfo implements org.apache.thrift.TBase<HostingUpsideNotifyStateHandleInfo, HostingUpsideNotifyStateHandleInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingUpsideNotifyStateHandleInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingUpsideNotifyStateHandleInfo");

  private static final org.apache.thrift.protocol.TField STATE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("stateInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventCreateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField HANDLED_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("handledTimestampMs", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingUpsideNotifyStateHandleInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingUpsideNotifyStateHandleInfoTupleSchemeFactory());
  }

  public HostingUpsideNotifyStateInfo stateInfo; // optional
  public long eventCreateTimestampMs; // optional
  public long handledTimestampMs; // optional
  /**
   * 
   * @see HostingUpsideNotifyStateSource
   */
  public HostingUpsideNotifyStateSource source; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE_INFO((short)1, "stateInfo"),
    EVENT_CREATE_TIMESTAMP_MS((short)2, "eventCreateTimestampMs"),
    HANDLED_TIMESTAMP_MS((short)3, "handledTimestampMs"),
    /**
     * 
     * @see HostingUpsideNotifyStateSource
     */
    SOURCE((short)4, "source");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE_INFO
          return STATE_INFO;
        case 2: // EVENT_CREATE_TIMESTAMP_MS
          return EVENT_CREATE_TIMESTAMP_MS;
        case 3: // HANDLED_TIMESTAMP_MS
          return HANDLED_TIMESTAMP_MS;
        case 4: // SOURCE
          return SOURCE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EVENTCREATETIMESTAMPMS_ISSET_ID = 0;
  private static final int __HANDLEDTIMESTAMPMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STATE_INFO,_Fields.EVENT_CREATE_TIMESTAMP_MS,_Fields.HANDLED_TIMESTAMP_MS,_Fields.SOURCE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE_INFO, new org.apache.thrift.meta_data.FieldMetaData("stateInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingUpsideNotifyStateInfo.class)));
    tmpMap.put(_Fields.EVENT_CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("eventCreateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.HANDLED_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("handledTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingUpsideNotifyStateSource.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingUpsideNotifyStateHandleInfo.class, metaDataMap);
  }

  public HostingUpsideNotifyStateHandleInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingUpsideNotifyStateHandleInfo(HostingUpsideNotifyStateHandleInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStateInfo()) {
      this.stateInfo = new HostingUpsideNotifyStateInfo(other.stateInfo);
    }
    this.eventCreateTimestampMs = other.eventCreateTimestampMs;
    this.handledTimestampMs = other.handledTimestampMs;
    if (other.isSetSource()) {
      this.source = other.source;
    }
  }

  public HostingUpsideNotifyStateHandleInfo deepCopy() {
    return new HostingUpsideNotifyStateHandleInfo(this);
  }

  @Override
  public void clear() {
    this.stateInfo = null;
    setEventCreateTimestampMsIsSet(false);
    this.eventCreateTimestampMs = 0;
    setHandledTimestampMsIsSet(false);
    this.handledTimestampMs = 0;
    this.source = null;
  }

  public HostingUpsideNotifyStateInfo getStateInfo() {
    return this.stateInfo;
  }

  public HostingUpsideNotifyStateHandleInfo setStateInfo(HostingUpsideNotifyStateInfo stateInfo) {
    this.stateInfo = stateInfo;
    return this;
  }

  public void unsetStateInfo() {
    this.stateInfo = null;
  }

  /** Returns true if field stateInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetStateInfo() {
    return this.stateInfo != null;
  }

  public void setStateInfoIsSet(boolean value) {
    if (!value) {
      this.stateInfo = null;
    }
  }

  public long getEventCreateTimestampMs() {
    return this.eventCreateTimestampMs;
  }

  public HostingUpsideNotifyStateHandleInfo setEventCreateTimestampMs(long eventCreateTimestampMs) {
    this.eventCreateTimestampMs = eventCreateTimestampMs;
    setEventCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetEventCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field eventCreateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEventCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  public void setEventCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getHandledTimestampMs() {
    return this.handledTimestampMs;
  }

  public HostingUpsideNotifyStateHandleInfo setHandledTimestampMs(long handledTimestampMs) {
    this.handledTimestampMs = handledTimestampMs;
    setHandledTimestampMsIsSet(true);
    return this;
  }

  public void unsetHandledTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HANDLEDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field handledTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetHandledTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __HANDLEDTIMESTAMPMS_ISSET_ID);
  }

  public void setHandledTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HANDLEDTIMESTAMPMS_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingUpsideNotifyStateSource
   */
  public HostingUpsideNotifyStateSource getSource() {
    return this.source;
  }

  /**
   * 
   * @see HostingUpsideNotifyStateSource
   */
  public HostingUpsideNotifyStateHandleInfo setSource(HostingUpsideNotifyStateSource source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE_INFO:
      if (value == null) {
        unsetStateInfo();
      } else {
        setStateInfo((HostingUpsideNotifyStateInfo)value);
      }
      break;

    case EVENT_CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetEventCreateTimestampMs();
      } else {
        setEventCreateTimestampMs((Long)value);
      }
      break;

    case HANDLED_TIMESTAMP_MS:
      if (value == null) {
        unsetHandledTimestampMs();
      } else {
        setHandledTimestampMs((Long)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((HostingUpsideNotifyStateSource)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE_INFO:
      return getStateInfo();

    case EVENT_CREATE_TIMESTAMP_MS:
      return Long.valueOf(getEventCreateTimestampMs());

    case HANDLED_TIMESTAMP_MS:
      return Long.valueOf(getHandledTimestampMs());

    case SOURCE:
      return getSource();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE_INFO:
      return isSetStateInfo();
    case EVENT_CREATE_TIMESTAMP_MS:
      return isSetEventCreateTimestampMs();
    case HANDLED_TIMESTAMP_MS:
      return isSetHandledTimestampMs();
    case SOURCE:
      return isSetSource();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingUpsideNotifyStateHandleInfo)
      return this.equals((HostingUpsideNotifyStateHandleInfo)that);
    return false;
  }

  public boolean equals(HostingUpsideNotifyStateHandleInfo that) {
    if (that == null)
      return false;

    boolean this_present_stateInfo = true && this.isSetStateInfo();
    boolean that_present_stateInfo = true && that.isSetStateInfo();
    if (this_present_stateInfo || that_present_stateInfo) {
      if (!(this_present_stateInfo && that_present_stateInfo))
        return false;
      if (!this.stateInfo.equals(that.stateInfo))
        return false;
    }

    boolean this_present_eventCreateTimestampMs = true && this.isSetEventCreateTimestampMs();
    boolean that_present_eventCreateTimestampMs = true && that.isSetEventCreateTimestampMs();
    if (this_present_eventCreateTimestampMs || that_present_eventCreateTimestampMs) {
      if (!(this_present_eventCreateTimestampMs && that_present_eventCreateTimestampMs))
        return false;
      if (this.eventCreateTimestampMs != that.eventCreateTimestampMs)
        return false;
    }

    boolean this_present_handledTimestampMs = true && this.isSetHandledTimestampMs();
    boolean that_present_handledTimestampMs = true && that.isSetHandledTimestampMs();
    if (this_present_handledTimestampMs || that_present_handledTimestampMs) {
      if (!(this_present_handledTimestampMs && that_present_handledTimestampMs))
        return false;
      if (this.handledTimestampMs != that.handledTimestampMs)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingUpsideNotifyStateHandleInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStateInfo()).compareTo(other.isSetStateInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateInfo, other.stateInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventCreateTimestampMs()).compareTo(other.isSetEventCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventCreateTimestampMs, other.eventCreateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHandledTimestampMs()).compareTo(other.isSetHandledTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHandledTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.handledTimestampMs, other.handledTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingUpsideNotifyStateHandleInfo(");
    boolean first = true;

    if (isSetStateInfo()) {
      sb.append("stateInfo:");
      if (this.stateInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.stateInfo);
      }
      first = false;
    }
    if (isSetEventCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("eventCreateTimestampMs:");
      sb.append(this.eventCreateTimestampMs);
      first = false;
    }
    if (isSetHandledTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("handledTimestampMs:");
      sb.append(this.handledTimestampMs);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (stateInfo != null) {
      stateInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingUpsideNotifyStateHandleInfoStandardSchemeFactory implements SchemeFactory {
    public HostingUpsideNotifyStateHandleInfoStandardScheme getScheme() {
      return new HostingUpsideNotifyStateHandleInfoStandardScheme();
    }
  }

  private static class HostingUpsideNotifyStateHandleInfoStandardScheme extends StandardScheme<HostingUpsideNotifyStateHandleInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingUpsideNotifyStateHandleInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.stateInfo = new HostingUpsideNotifyStateInfo();
              struct.stateInfo.read(iprot);
              struct.setStateInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EVENT_CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventCreateTimestampMs = iprot.readI64();
              struct.setEventCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HANDLED_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.handledTimestampMs = iprot.readI64();
              struct.setHandledTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.source = HostingUpsideNotifyStateSource.findByValue(iprot.readI32());
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingUpsideNotifyStateHandleInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stateInfo != null) {
        if (struct.isSetStateInfo()) {
          oprot.writeFieldBegin(STATE_INFO_FIELD_DESC);
          struct.stateInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeFieldBegin(EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.eventCreateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHandledTimestampMs()) {
        oprot.writeFieldBegin(HANDLED_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.handledTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeI32(struct.source.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingUpsideNotifyStateHandleInfoTupleSchemeFactory implements SchemeFactory {
    public HostingUpsideNotifyStateHandleInfoTupleScheme getScheme() {
      return new HostingUpsideNotifyStateHandleInfoTupleScheme();
    }
  }

  private static class HostingUpsideNotifyStateHandleInfoTupleScheme extends TupleScheme<HostingUpsideNotifyStateHandleInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingUpsideNotifyStateHandleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStateInfo()) {
        optionals.set(0);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        optionals.set(1);
      }
      if (struct.isSetHandledTimestampMs()) {
        optionals.set(2);
      }
      if (struct.isSetSource()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetStateInfo()) {
        struct.stateInfo.write(oprot);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeI64(struct.eventCreateTimestampMs);
      }
      if (struct.isSetHandledTimestampMs()) {
        oprot.writeI64(struct.handledTimestampMs);
      }
      if (struct.isSetSource()) {
        oprot.writeI32(struct.source.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingUpsideNotifyStateHandleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.stateInfo = new HostingUpsideNotifyStateInfo();
        struct.stateInfo.read(iprot);
        struct.setStateInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.eventCreateTimestampMs = iprot.readI64();
        struct.setEventCreateTimestampMsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.handledTimestampMs = iprot.readI64();
        struct.setHandledTimestampMsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.source = HostingUpsideNotifyStateSource.findByValue(iprot.readI32());
        struct.setSourceIsSet(true);
      }
    }
  }

}

