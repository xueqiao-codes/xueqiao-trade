/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrderLegContractSummary implements org.apache.thrift.TBase<HostingExecOrderLegContractSummary, HostingExecOrderLegContractSummary._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrderLegContractSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrderLegContractSummary");

  private static final org.apache.thrift.protocol.TField LEG_SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledContractId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LEG_SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledContractCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LEG_SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledCommodityId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LEG_SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledCommodityType", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField LEG_SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LEG_SLED_EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("legSledExchangeMic", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderLegContractSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderLegContractSummaryTupleSchemeFactory());
  }

  public long legSledContractId; // optional
  public String legSledContractCode; // optional
  public long legSledCommodityId; // optional
  public short legSledCommodityType; // optional
  public String legSledCommodityCode; // optional
  public String legSledExchangeMic; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEG_SLED_CONTRACT_ID((short)1, "legSledContractId"),
    LEG_SLED_CONTRACT_CODE((short)2, "legSledContractCode"),
    LEG_SLED_COMMODITY_ID((short)3, "legSledCommodityId"),
    LEG_SLED_COMMODITY_TYPE((short)4, "legSledCommodityType"),
    LEG_SLED_COMMODITY_CODE((short)5, "legSledCommodityCode"),
    LEG_SLED_EXCHANGE_MIC((short)6, "legSledExchangeMic");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEG_SLED_CONTRACT_ID
          return LEG_SLED_CONTRACT_ID;
        case 2: // LEG_SLED_CONTRACT_CODE
          return LEG_SLED_CONTRACT_CODE;
        case 3: // LEG_SLED_COMMODITY_ID
          return LEG_SLED_COMMODITY_ID;
        case 4: // LEG_SLED_COMMODITY_TYPE
          return LEG_SLED_COMMODITY_TYPE;
        case 5: // LEG_SLED_COMMODITY_CODE
          return LEG_SLED_COMMODITY_CODE;
        case 6: // LEG_SLED_EXCHANGE_MIC
          return LEG_SLED_EXCHANGE_MIC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LEGSLEDCONTRACTID_ISSET_ID = 0;
  private static final int __LEGSLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __LEGSLEDCOMMODITYTYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LEG_SLED_CONTRACT_ID,_Fields.LEG_SLED_CONTRACT_CODE,_Fields.LEG_SLED_COMMODITY_ID,_Fields.LEG_SLED_COMMODITY_TYPE,_Fields.LEG_SLED_COMMODITY_CODE,_Fields.LEG_SLED_EXCHANGE_MIC};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEG_SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("legSledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEG_SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("legSledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEG_SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("legSledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEG_SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("legSledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEG_SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("legSledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LEG_SLED_EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("legSledExchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrderLegContractSummary.class, metaDataMap);
  }

  public HostingExecOrderLegContractSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrderLegContractSummary(HostingExecOrderLegContractSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.legSledContractId = other.legSledContractId;
    if (other.isSetLegSledContractCode()) {
      this.legSledContractCode = other.legSledContractCode;
    }
    this.legSledCommodityId = other.legSledCommodityId;
    this.legSledCommodityType = other.legSledCommodityType;
    if (other.isSetLegSledCommodityCode()) {
      this.legSledCommodityCode = other.legSledCommodityCode;
    }
    if (other.isSetLegSledExchangeMic()) {
      this.legSledExchangeMic = other.legSledExchangeMic;
    }
  }

  public HostingExecOrderLegContractSummary deepCopy() {
    return new HostingExecOrderLegContractSummary(this);
  }

  @Override
  public void clear() {
    setLegSledContractIdIsSet(false);
    this.legSledContractId = 0;
    this.legSledContractCode = null;
    setLegSledCommodityIdIsSet(false);
    this.legSledCommodityId = 0;
    setLegSledCommodityTypeIsSet(false);
    this.legSledCommodityType = 0;
    this.legSledCommodityCode = null;
    this.legSledExchangeMic = null;
  }

  public long getLegSledContractId() {
    return this.legSledContractId;
  }

  public HostingExecOrderLegContractSummary setLegSledContractId(long legSledContractId) {
    this.legSledContractId = legSledContractId;
    setLegSledContractIdIsSet(true);
    return this;
  }

  public void unsetLegSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGSLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field legSledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGSLEDCONTRACTID_ISSET_ID);
  }

  public void setLegSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGSLEDCONTRACTID_ISSET_ID, value);
  }

  public String getLegSledContractCode() {
    return this.legSledContractCode;
  }

  public HostingExecOrderLegContractSummary setLegSledContractCode(String legSledContractCode) {
    this.legSledContractCode = legSledContractCode;
    return this;
  }

  public void unsetLegSledContractCode() {
    this.legSledContractCode = null;
  }

  /** Returns true if field legSledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledContractCode() {
    return this.legSledContractCode != null;
  }

  public void setLegSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.legSledContractCode = null;
    }
  }

  public long getLegSledCommodityId() {
    return this.legSledCommodityId;
  }

  public HostingExecOrderLegContractSummary setLegSledCommodityId(long legSledCommodityId) {
    this.legSledCommodityId = legSledCommodityId;
    setLegSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetLegSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGSLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field legSledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGSLEDCOMMODITYID_ISSET_ID);
  }

  public void setLegSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGSLEDCOMMODITYID_ISSET_ID, value);
  }

  public short getLegSledCommodityType() {
    return this.legSledCommodityType;
  }

  public HostingExecOrderLegContractSummary setLegSledCommodityType(short legSledCommodityType) {
    this.legSledCommodityType = legSledCommodityType;
    setLegSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetLegSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEGSLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field legSledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __LEGSLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setLegSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEGSLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getLegSledCommodityCode() {
    return this.legSledCommodityCode;
  }

  public HostingExecOrderLegContractSummary setLegSledCommodityCode(String legSledCommodityCode) {
    this.legSledCommodityCode = legSledCommodityCode;
    return this;
  }

  public void unsetLegSledCommodityCode() {
    this.legSledCommodityCode = null;
  }

  /** Returns true if field legSledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledCommodityCode() {
    return this.legSledCommodityCode != null;
  }

  public void setLegSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.legSledCommodityCode = null;
    }
  }

  public String getLegSledExchangeMic() {
    return this.legSledExchangeMic;
  }

  public HostingExecOrderLegContractSummary setLegSledExchangeMic(String legSledExchangeMic) {
    this.legSledExchangeMic = legSledExchangeMic;
    return this;
  }

  public void unsetLegSledExchangeMic() {
    this.legSledExchangeMic = null;
  }

  /** Returns true if field legSledExchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSledExchangeMic() {
    return this.legSledExchangeMic != null;
  }

  public void setLegSledExchangeMicIsSet(boolean value) {
    if (!value) {
      this.legSledExchangeMic = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEG_SLED_CONTRACT_ID:
      if (value == null) {
        unsetLegSledContractId();
      } else {
        setLegSledContractId((Long)value);
      }
      break;

    case LEG_SLED_CONTRACT_CODE:
      if (value == null) {
        unsetLegSledContractCode();
      } else {
        setLegSledContractCode((String)value);
      }
      break;

    case LEG_SLED_COMMODITY_ID:
      if (value == null) {
        unsetLegSledCommodityId();
      } else {
        setLegSledCommodityId((Long)value);
      }
      break;

    case LEG_SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetLegSledCommodityType();
      } else {
        setLegSledCommodityType((Short)value);
      }
      break;

    case LEG_SLED_COMMODITY_CODE:
      if (value == null) {
        unsetLegSledCommodityCode();
      } else {
        setLegSledCommodityCode((String)value);
      }
      break;

    case LEG_SLED_EXCHANGE_MIC:
      if (value == null) {
        unsetLegSledExchangeMic();
      } else {
        setLegSledExchangeMic((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEG_SLED_CONTRACT_ID:
      return Long.valueOf(getLegSledContractId());

    case LEG_SLED_CONTRACT_CODE:
      return getLegSledContractCode();

    case LEG_SLED_COMMODITY_ID:
      return Long.valueOf(getLegSledCommodityId());

    case LEG_SLED_COMMODITY_TYPE:
      return Short.valueOf(getLegSledCommodityType());

    case LEG_SLED_COMMODITY_CODE:
      return getLegSledCommodityCode();

    case LEG_SLED_EXCHANGE_MIC:
      return getLegSledExchangeMic();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEG_SLED_CONTRACT_ID:
      return isSetLegSledContractId();
    case LEG_SLED_CONTRACT_CODE:
      return isSetLegSledContractCode();
    case LEG_SLED_COMMODITY_ID:
      return isSetLegSledCommodityId();
    case LEG_SLED_COMMODITY_TYPE:
      return isSetLegSledCommodityType();
    case LEG_SLED_COMMODITY_CODE:
      return isSetLegSledCommodityCode();
    case LEG_SLED_EXCHANGE_MIC:
      return isSetLegSledExchangeMic();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrderLegContractSummary)
      return this.equals((HostingExecOrderLegContractSummary)that);
    return false;
  }

  public boolean equals(HostingExecOrderLegContractSummary that) {
    if (that == null)
      return false;

    boolean this_present_legSledContractId = true && this.isSetLegSledContractId();
    boolean that_present_legSledContractId = true && that.isSetLegSledContractId();
    if (this_present_legSledContractId || that_present_legSledContractId) {
      if (!(this_present_legSledContractId && that_present_legSledContractId))
        return false;
      if (this.legSledContractId != that.legSledContractId)
        return false;
    }

    boolean this_present_legSledContractCode = true && this.isSetLegSledContractCode();
    boolean that_present_legSledContractCode = true && that.isSetLegSledContractCode();
    if (this_present_legSledContractCode || that_present_legSledContractCode) {
      if (!(this_present_legSledContractCode && that_present_legSledContractCode))
        return false;
      if (!this.legSledContractCode.equals(that.legSledContractCode))
        return false;
    }

    boolean this_present_legSledCommodityId = true && this.isSetLegSledCommodityId();
    boolean that_present_legSledCommodityId = true && that.isSetLegSledCommodityId();
    if (this_present_legSledCommodityId || that_present_legSledCommodityId) {
      if (!(this_present_legSledCommodityId && that_present_legSledCommodityId))
        return false;
      if (this.legSledCommodityId != that.legSledCommodityId)
        return false;
    }

    boolean this_present_legSledCommodityType = true && this.isSetLegSledCommodityType();
    boolean that_present_legSledCommodityType = true && that.isSetLegSledCommodityType();
    if (this_present_legSledCommodityType || that_present_legSledCommodityType) {
      if (!(this_present_legSledCommodityType && that_present_legSledCommodityType))
        return false;
      if (this.legSledCommodityType != that.legSledCommodityType)
        return false;
    }

    boolean this_present_legSledCommodityCode = true && this.isSetLegSledCommodityCode();
    boolean that_present_legSledCommodityCode = true && that.isSetLegSledCommodityCode();
    if (this_present_legSledCommodityCode || that_present_legSledCommodityCode) {
      if (!(this_present_legSledCommodityCode && that_present_legSledCommodityCode))
        return false;
      if (!this.legSledCommodityCode.equals(that.legSledCommodityCode))
        return false;
    }

    boolean this_present_legSledExchangeMic = true && this.isSetLegSledExchangeMic();
    boolean that_present_legSledExchangeMic = true && that.isSetLegSledExchangeMic();
    if (this_present_legSledExchangeMic || that_present_legSledExchangeMic) {
      if (!(this_present_legSledExchangeMic && that_present_legSledExchangeMic))
        return false;
      if (!this.legSledExchangeMic.equals(that.legSledExchangeMic))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrderLegContractSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLegSledContractId()).compareTo(other.isSetLegSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledContractId, other.legSledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSledContractCode()).compareTo(other.isSetLegSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledContractCode, other.legSledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSledCommodityId()).compareTo(other.isSetLegSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledCommodityId, other.legSledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSledCommodityType()).compareTo(other.isSetLegSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledCommodityType, other.legSledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSledCommodityCode()).compareTo(other.isSetLegSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledCommodityCode, other.legSledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSledExchangeMic()).compareTo(other.isSetLegSledExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSledExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSledExchangeMic, other.legSledExchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrderLegContractSummary(");
    boolean first = true;

    if (isSetLegSledContractId()) {
      sb.append("legSledContractId:");
      sb.append(this.legSledContractId);
      first = false;
    }
    if (isSetLegSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("legSledContractCode:");
      if (this.legSledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.legSledContractCode);
      }
      first = false;
    }
    if (isSetLegSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("legSledCommodityId:");
      sb.append(this.legSledCommodityId);
      first = false;
    }
    if (isSetLegSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("legSledCommodityType:");
      sb.append(this.legSledCommodityType);
      first = false;
    }
    if (isSetLegSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("legSledCommodityCode:");
      if (this.legSledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.legSledCommodityCode);
      }
      first = false;
    }
    if (isSetLegSledExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("legSledExchangeMic:");
      if (this.legSledExchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.legSledExchangeMic);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderLegContractSummaryStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderLegContractSummaryStandardScheme getScheme() {
      return new HostingExecOrderLegContractSummaryStandardScheme();
    }
  }

  private static class HostingExecOrderLegContractSummaryStandardScheme extends StandardScheme<HostingExecOrderLegContractSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrderLegContractSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEG_SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.legSledContractId = iprot.readI64();
              struct.setLegSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEG_SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legSledContractCode = iprot.readString();
              struct.setLegSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEG_SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.legSledCommodityId = iprot.readI64();
              struct.setLegSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEG_SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.legSledCommodityType = iprot.readI16();
              struct.setLegSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LEG_SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legSledCommodityCode = iprot.readString();
              struct.setLegSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEG_SLED_EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.legSledExchangeMic = iprot.readString();
              struct.setLegSledExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrderLegContractSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetLegSledContractId()) {
        oprot.writeFieldBegin(LEG_SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.legSledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.legSledContractCode != null) {
        if (struct.isSetLegSledContractCode()) {
          oprot.writeFieldBegin(LEG_SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.legSledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLegSledCommodityId()) {
        oprot.writeFieldBegin(LEG_SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.legSledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLegSledCommodityType()) {
        oprot.writeFieldBegin(LEG_SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.legSledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.legSledCommodityCode != null) {
        if (struct.isSetLegSledCommodityCode()) {
          oprot.writeFieldBegin(LEG_SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.legSledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.legSledExchangeMic != null) {
        if (struct.isSetLegSledExchangeMic()) {
          oprot.writeFieldBegin(LEG_SLED_EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.legSledExchangeMic);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderLegContractSummaryTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderLegContractSummaryTupleScheme getScheme() {
      return new HostingExecOrderLegContractSummaryTupleScheme();
    }
  }

  private static class HostingExecOrderLegContractSummaryTupleScheme extends TupleScheme<HostingExecOrderLegContractSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderLegContractSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLegSledContractId()) {
        optionals.set(0);
      }
      if (struct.isSetLegSledContractCode()) {
        optionals.set(1);
      }
      if (struct.isSetLegSledCommodityId()) {
        optionals.set(2);
      }
      if (struct.isSetLegSledCommodityType()) {
        optionals.set(3);
      }
      if (struct.isSetLegSledCommodityCode()) {
        optionals.set(4);
      }
      if (struct.isSetLegSledExchangeMic()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLegSledContractId()) {
        oprot.writeI64(struct.legSledContractId);
      }
      if (struct.isSetLegSledContractCode()) {
        oprot.writeString(struct.legSledContractCode);
      }
      if (struct.isSetLegSledCommodityId()) {
        oprot.writeI64(struct.legSledCommodityId);
      }
      if (struct.isSetLegSledCommodityType()) {
        oprot.writeI16(struct.legSledCommodityType);
      }
      if (struct.isSetLegSledCommodityCode()) {
        oprot.writeString(struct.legSledCommodityCode);
      }
      if (struct.isSetLegSledExchangeMic()) {
        oprot.writeString(struct.legSledExchangeMic);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderLegContractSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.legSledContractId = iprot.readI64();
        struct.setLegSledContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.legSledContractCode = iprot.readString();
        struct.setLegSledContractCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.legSledCommodityId = iprot.readI64();
        struct.setLegSledCommodityIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.legSledCommodityType = iprot.readI16();
        struct.setLegSledCommodityTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.legSledCommodityCode = iprot.readString();
        struct.setLegSledCommodityCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.legSledExchangeMic = iprot.readString();
        struct.setLegSledExchangeMicIsSet(true);
      }
    }
  }

}

