/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CTPOrderInputExt implements org.apache.thrift.TBase<CTPOrderInputExt, CTPOrderInputExt._Fields>, java.io.Serializable, Cloneable, Comparable<CTPOrderInputExt> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CTPOrderInputExt");

  private static final org.apache.thrift.protocol.TField CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMB_OFFSET_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combOffsetFlag", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MIN_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("minVolume", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField COMB_HEDGE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("combHedgeFlag", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDirection", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CTPOrderInputExtStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CTPOrderInputExtTupleSchemeFactory());
  }

  public CTPContractSummary contractSummary; // optional
  /**
   * 
   * @see CTPCombOffsetFlagType
   */
  public CTPCombOffsetFlagType combOffsetFlag; // optional
  public int minVolume; // optional
  /**
   * 
   * @see CTPCombHedgeFlagType
   */
  public CTPCombHedgeFlagType combHedgeFlag; // optional
  /**
   * 
   * @see CTPTradeDirection
   */
  public CTPTradeDirection tradeDirection; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_SUMMARY((short)1, "contractSummary"),
    /**
     * 
     * @see CTPCombOffsetFlagType
     */
    COMB_OFFSET_FLAG((short)2, "combOffsetFlag"),
    MIN_VOLUME((short)3, "minVolume"),
    /**
     * 
     * @see CTPCombHedgeFlagType
     */
    COMB_HEDGE_FLAG((short)4, "combHedgeFlag"),
    /**
     * 
     * @see CTPTradeDirection
     */
    TRADE_DIRECTION((short)5, "tradeDirection");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_SUMMARY
          return CONTRACT_SUMMARY;
        case 2: // COMB_OFFSET_FLAG
          return COMB_OFFSET_FLAG;
        case 3: // MIN_VOLUME
          return MIN_VOLUME;
        case 4: // COMB_HEDGE_FLAG
          return COMB_HEDGE_FLAG;
        case 5: // TRADE_DIRECTION
          return TRADE_DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MINVOLUME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONTRACT_SUMMARY,_Fields.COMB_OFFSET_FLAG,_Fields.MIN_VOLUME,_Fields.COMB_HEDGE_FLAG,_Fields.TRADE_DIRECTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("contractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPContractSummary.class)));
    tmpMap.put(_Fields.COMB_OFFSET_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combOffsetFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPCombOffsetFlagType.class)));
    tmpMap.put(_Fields.MIN_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("minVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMB_HEDGE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("combHedgeFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPCombHedgeFlagType.class)));
    tmpMap.put(_Fields.TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("tradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPTradeDirection.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CTPOrderInputExt.class, metaDataMap);
  }

  public CTPOrderInputExt() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CTPOrderInputExt(CTPOrderInputExt other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetContractSummary()) {
      this.contractSummary = new CTPContractSummary(other.contractSummary);
    }
    if (other.isSetCombOffsetFlag()) {
      this.combOffsetFlag = other.combOffsetFlag;
    }
    this.minVolume = other.minVolume;
    if (other.isSetCombHedgeFlag()) {
      this.combHedgeFlag = other.combHedgeFlag;
    }
    if (other.isSetTradeDirection()) {
      this.tradeDirection = other.tradeDirection;
    }
  }

  public CTPOrderInputExt deepCopy() {
    return new CTPOrderInputExt(this);
  }

  @Override
  public void clear() {
    this.contractSummary = null;
    this.combOffsetFlag = null;
    setMinVolumeIsSet(false);
    this.minVolume = 0;
    this.combHedgeFlag = null;
    this.tradeDirection = null;
  }

  public CTPContractSummary getContractSummary() {
    return this.contractSummary;
  }

  public CTPOrderInputExt setContractSummary(CTPContractSummary contractSummary) {
    this.contractSummary = contractSummary;
    return this;
  }

  public void unsetContractSummary() {
    this.contractSummary = null;
  }

  /** Returns true if field contractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSummary() {
    return this.contractSummary != null;
  }

  public void setContractSummaryIsSet(boolean value) {
    if (!value) {
      this.contractSummary = null;
    }
  }

  /**
   * 
   * @see CTPCombOffsetFlagType
   */
  public CTPCombOffsetFlagType getCombOffsetFlag() {
    return this.combOffsetFlag;
  }

  /**
   * 
   * @see CTPCombOffsetFlagType
   */
  public CTPOrderInputExt setCombOffsetFlag(CTPCombOffsetFlagType combOffsetFlag) {
    this.combOffsetFlag = combOffsetFlag;
    return this;
  }

  public void unsetCombOffsetFlag() {
    this.combOffsetFlag = null;
  }

  /** Returns true if field combOffsetFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombOffsetFlag() {
    return this.combOffsetFlag != null;
  }

  public void setCombOffsetFlagIsSet(boolean value) {
    if (!value) {
      this.combOffsetFlag = null;
    }
  }

  public int getMinVolume() {
    return this.minVolume;
  }

  public CTPOrderInputExt setMinVolume(int minVolume) {
    this.minVolume = minVolume;
    setMinVolumeIsSet(true);
    return this;
  }

  public void unsetMinVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  /** Returns true if field minVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetMinVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __MINVOLUME_ISSET_ID);
  }

  public void setMinVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINVOLUME_ISSET_ID, value);
  }

  /**
   * 
   * @see CTPCombHedgeFlagType
   */
  public CTPCombHedgeFlagType getCombHedgeFlag() {
    return this.combHedgeFlag;
  }

  /**
   * 
   * @see CTPCombHedgeFlagType
   */
  public CTPOrderInputExt setCombHedgeFlag(CTPCombHedgeFlagType combHedgeFlag) {
    this.combHedgeFlag = combHedgeFlag;
    return this;
  }

  public void unsetCombHedgeFlag() {
    this.combHedgeFlag = null;
  }

  /** Returns true if field combHedgeFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCombHedgeFlag() {
    return this.combHedgeFlag != null;
  }

  public void setCombHedgeFlagIsSet(boolean value) {
    if (!value) {
      this.combHedgeFlag = null;
    }
  }

  /**
   * 
   * @see CTPTradeDirection
   */
  public CTPTradeDirection getTradeDirection() {
    return this.tradeDirection;
  }

  /**
   * 
   * @see CTPTradeDirection
   */
  public CTPOrderInputExt setTradeDirection(CTPTradeDirection tradeDirection) {
    this.tradeDirection = tradeDirection;
    return this;
  }

  public void unsetTradeDirection() {
    this.tradeDirection = null;
  }

  /** Returns true if field tradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDirection() {
    return this.tradeDirection != null;
  }

  public void setTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.tradeDirection = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_SUMMARY:
      if (value == null) {
        unsetContractSummary();
      } else {
        setContractSummary((CTPContractSummary)value);
      }
      break;

    case COMB_OFFSET_FLAG:
      if (value == null) {
        unsetCombOffsetFlag();
      } else {
        setCombOffsetFlag((CTPCombOffsetFlagType)value);
      }
      break;

    case MIN_VOLUME:
      if (value == null) {
        unsetMinVolume();
      } else {
        setMinVolume((Integer)value);
      }
      break;

    case COMB_HEDGE_FLAG:
      if (value == null) {
        unsetCombHedgeFlag();
      } else {
        setCombHedgeFlag((CTPCombHedgeFlagType)value);
      }
      break;

    case TRADE_DIRECTION:
      if (value == null) {
        unsetTradeDirection();
      } else {
        setTradeDirection((CTPTradeDirection)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_SUMMARY:
      return getContractSummary();

    case COMB_OFFSET_FLAG:
      return getCombOffsetFlag();

    case MIN_VOLUME:
      return Integer.valueOf(getMinVolume());

    case COMB_HEDGE_FLAG:
      return getCombHedgeFlag();

    case TRADE_DIRECTION:
      return getTradeDirection();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_SUMMARY:
      return isSetContractSummary();
    case COMB_OFFSET_FLAG:
      return isSetCombOffsetFlag();
    case MIN_VOLUME:
      return isSetMinVolume();
    case COMB_HEDGE_FLAG:
      return isSetCombHedgeFlag();
    case TRADE_DIRECTION:
      return isSetTradeDirection();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CTPOrderInputExt)
      return this.equals((CTPOrderInputExt)that);
    return false;
  }

  public boolean equals(CTPOrderInputExt that) {
    if (that == null)
      return false;

    boolean this_present_contractSummary = true && this.isSetContractSummary();
    boolean that_present_contractSummary = true && that.isSetContractSummary();
    if (this_present_contractSummary || that_present_contractSummary) {
      if (!(this_present_contractSummary && that_present_contractSummary))
        return false;
      if (!this.contractSummary.equals(that.contractSummary))
        return false;
    }

    boolean this_present_combOffsetFlag = true && this.isSetCombOffsetFlag();
    boolean that_present_combOffsetFlag = true && that.isSetCombOffsetFlag();
    if (this_present_combOffsetFlag || that_present_combOffsetFlag) {
      if (!(this_present_combOffsetFlag && that_present_combOffsetFlag))
        return false;
      if (!this.combOffsetFlag.equals(that.combOffsetFlag))
        return false;
    }

    boolean this_present_minVolume = true && this.isSetMinVolume();
    boolean that_present_minVolume = true && that.isSetMinVolume();
    if (this_present_minVolume || that_present_minVolume) {
      if (!(this_present_minVolume && that_present_minVolume))
        return false;
      if (this.minVolume != that.minVolume)
        return false;
    }

    boolean this_present_combHedgeFlag = true && this.isSetCombHedgeFlag();
    boolean that_present_combHedgeFlag = true && that.isSetCombHedgeFlag();
    if (this_present_combHedgeFlag || that_present_combHedgeFlag) {
      if (!(this_present_combHedgeFlag && that_present_combHedgeFlag))
        return false;
      if (!this.combHedgeFlag.equals(that.combHedgeFlag))
        return false;
    }

    boolean this_present_tradeDirection = true && this.isSetTradeDirection();
    boolean that_present_tradeDirection = true && that.isSetTradeDirection();
    if (this_present_tradeDirection || that_present_tradeDirection) {
      if (!(this_present_tradeDirection && that_present_tradeDirection))
        return false;
      if (!this.tradeDirection.equals(that.tradeDirection))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CTPOrderInputExt other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractSummary()).compareTo(other.isSetContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSummary, other.contractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombOffsetFlag()).compareTo(other.isSetCombOffsetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombOffsetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combOffsetFlag, other.combOffsetFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinVolume()).compareTo(other.isSetMinVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minVolume, other.minVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombHedgeFlag()).compareTo(other.isSetCombHedgeFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombHedgeFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combHedgeFlag, other.combHedgeFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDirection()).compareTo(other.isSetTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDirection, other.tradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CTPOrderInputExt(");
    boolean first = true;

    if (isSetContractSummary()) {
      sb.append("contractSummary:");
      if (this.contractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSummary);
      }
      first = false;
    }
    if (isSetCombOffsetFlag()) {
      if (!first) sb.append(", ");
      sb.append("combOffsetFlag:");
      if (this.combOffsetFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.combOffsetFlag);
      }
      first = false;
    }
    if (isSetMinVolume()) {
      if (!first) sb.append(", ");
      sb.append("minVolume:");
      sb.append(this.minVolume);
      first = false;
    }
    if (isSetCombHedgeFlag()) {
      if (!first) sb.append(", ");
      sb.append("combHedgeFlag:");
      if (this.combHedgeFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.combHedgeFlag);
      }
      first = false;
    }
    if (isSetTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("tradeDirection:");
      if (this.tradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDirection);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (contractSummary != null) {
      contractSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CTPOrderInputExtStandardSchemeFactory implements SchemeFactory {
    public CTPOrderInputExtStandardScheme getScheme() {
      return new CTPOrderInputExtStandardScheme();
    }
  }

  private static class CTPOrderInputExtStandardScheme extends StandardScheme<CTPOrderInputExt> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CTPOrderInputExt struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractSummary = new CTPContractSummary();
              struct.contractSummary.read(iprot);
              struct.setContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMB_OFFSET_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.combOffsetFlag = CTPCombOffsetFlagType.findByValue(iprot.readI32());
              struct.setCombOffsetFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MIN_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.minVolume = iprot.readI32();
              struct.setMinVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMB_HEDGE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.combHedgeFlag = CTPCombHedgeFlagType.findByValue(iprot.readI32());
              struct.setCombHedgeFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeDirection = CTPTradeDirection.findByValue(iprot.readI32());
              struct.setTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CTPOrderInputExt struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contractSummary != null) {
        if (struct.isSetContractSummary()) {
          oprot.writeFieldBegin(CONTRACT_SUMMARY_FIELD_DESC);
          struct.contractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.combOffsetFlag != null) {
        if (struct.isSetCombOffsetFlag()) {
          oprot.writeFieldBegin(COMB_OFFSET_FLAG_FIELD_DESC);
          oprot.writeI32(struct.combOffsetFlag.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinVolume()) {
        oprot.writeFieldBegin(MIN_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.minVolume);
        oprot.writeFieldEnd();
      }
      if (struct.combHedgeFlag != null) {
        if (struct.isSetCombHedgeFlag()) {
          oprot.writeFieldBegin(COMB_HEDGE_FLAG_FIELD_DESC);
          oprot.writeI32(struct.combHedgeFlag.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeDirection != null) {
        if (struct.isSetTradeDirection()) {
          oprot.writeFieldBegin(TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.tradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CTPOrderInputExtTupleSchemeFactory implements SchemeFactory {
    public CTPOrderInputExtTupleScheme getScheme() {
      return new CTPOrderInputExtTupleScheme();
    }
  }

  private static class CTPOrderInputExtTupleScheme extends TupleScheme<CTPOrderInputExt> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CTPOrderInputExt struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractSummary()) {
        optionals.set(0);
      }
      if (struct.isSetCombOffsetFlag()) {
        optionals.set(1);
      }
      if (struct.isSetMinVolume()) {
        optionals.set(2);
      }
      if (struct.isSetCombHedgeFlag()) {
        optionals.set(3);
      }
      if (struct.isSetTradeDirection()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetContractSummary()) {
        struct.contractSummary.write(oprot);
      }
      if (struct.isSetCombOffsetFlag()) {
        oprot.writeI32(struct.combOffsetFlag.getValue());
      }
      if (struct.isSetMinVolume()) {
        oprot.writeI32(struct.minVolume);
      }
      if (struct.isSetCombHedgeFlag()) {
        oprot.writeI32(struct.combHedgeFlag.getValue());
      }
      if (struct.isSetTradeDirection()) {
        oprot.writeI32(struct.tradeDirection.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CTPOrderInputExt struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.contractSummary = new CTPContractSummary();
        struct.contractSummary.read(iprot);
        struct.setContractSummaryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.combOffsetFlag = CTPCombOffsetFlagType.findByValue(iprot.readI32());
        struct.setCombOffsetFlagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.minVolume = iprot.readI32();
        struct.setMinVolumeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.combHedgeFlag = CTPCombHedgeFlagType.findByValue(iprot.readI32());
        struct.setCombHedgeFlagIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeDirection = CTPTradeDirection.findByValue(iprot.readI32());
        struct.setTradeDirectionIsSet(true);
      }
    }
  }

}

