/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingOrderRouteTree implements org.apache.thrift.TBase<HostingOrderRouteTree, HostingOrderRouteTree._Fields>, java.io.Serializable, Cloneable, Comparable<HostingOrderRouteTree> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingOrderRouteTree");

  private static final org.apache.thrift.protocol.TField CONFIG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("configVersion", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_EXCHANGE_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("subExchangeNodes", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingOrderRouteTreeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingOrderRouteTreeTupleSchemeFactory());
  }

  public int configVersion; // optional
  public Map<String,HostingOrderRouteExchangeNode> subExchangeNodes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIG_VERSION((short)1, "configVersion"),
    SUB_EXCHANGE_NODES((short)2, "subExchangeNodes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIG_VERSION
          return CONFIG_VERSION;
        case 2: // SUB_EXCHANGE_NODES
          return SUB_EXCHANGE_NODES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIGVERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONFIG_VERSION,_Fields.SUB_EXCHANGE_NODES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("configVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_EXCHANGE_NODES, new org.apache.thrift.meta_data.FieldMetaData("subExchangeNodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingOrderRouteExchangeNode.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingOrderRouteTree.class, metaDataMap);
  }

  public HostingOrderRouteTree() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingOrderRouteTree(HostingOrderRouteTree other) {
    __isset_bitfield = other.__isset_bitfield;
    this.configVersion = other.configVersion;
    if (other.isSetSubExchangeNodes()) {
      Map<String,HostingOrderRouteExchangeNode> __this__subExchangeNodes = new HashMap<String,HostingOrderRouteExchangeNode>(other.subExchangeNodes.size());
      for (Map.Entry<String, HostingOrderRouteExchangeNode> other_element : other.subExchangeNodes.entrySet()) {

        String other_element_key = other_element.getKey();
        HostingOrderRouteExchangeNode other_element_value = other_element.getValue();

        String __this__subExchangeNodes_copy_key = other_element_key;

        HostingOrderRouteExchangeNode __this__subExchangeNodes_copy_value = new HostingOrderRouteExchangeNode(other_element_value);

        __this__subExchangeNodes.put(__this__subExchangeNodes_copy_key, __this__subExchangeNodes_copy_value);
      }
      this.subExchangeNodes = __this__subExchangeNodes;
    }
  }

  public HostingOrderRouteTree deepCopy() {
    return new HostingOrderRouteTree(this);
  }

  @Override
  public void clear() {
    setConfigVersionIsSet(false);
    this.configVersion = 0;
    this.subExchangeNodes = null;
  }

  public int getConfigVersion() {
    return this.configVersion;
  }

  public HostingOrderRouteTree setConfigVersion(int configVersion) {
    this.configVersion = configVersion;
    setConfigVersionIsSet(true);
    return this;
  }

  public void unsetConfigVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  /** Returns true if field configVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  public void setConfigVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID, value);
  }

  public int getSubExchangeNodesSize() {
    return (this.subExchangeNodes == null) ? 0 : this.subExchangeNodes.size();
  }

  public void putToSubExchangeNodes(String key, HostingOrderRouteExchangeNode val) {
    if (this.subExchangeNodes == null) {
      this.subExchangeNodes = new HashMap<String,HostingOrderRouteExchangeNode>();
    }
    this.subExchangeNodes.put(key, val);
  }

  public Map<String,HostingOrderRouteExchangeNode> getSubExchangeNodes() {
    return this.subExchangeNodes;
  }

  public HostingOrderRouteTree setSubExchangeNodes(Map<String,HostingOrderRouteExchangeNode> subExchangeNodes) {
    this.subExchangeNodes = subExchangeNodes;
    return this;
  }

  public void unsetSubExchangeNodes() {
    this.subExchangeNodes = null;
  }

  /** Returns true if field subExchangeNodes is set (has been assigned a value) and false otherwise */
  public boolean isSetSubExchangeNodes() {
    return this.subExchangeNodes != null;
  }

  public void setSubExchangeNodesIsSet(boolean value) {
    if (!value) {
      this.subExchangeNodes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIG_VERSION:
      if (value == null) {
        unsetConfigVersion();
      } else {
        setConfigVersion((Integer)value);
      }
      break;

    case SUB_EXCHANGE_NODES:
      if (value == null) {
        unsetSubExchangeNodes();
      } else {
        setSubExchangeNodes((Map<String,HostingOrderRouteExchangeNode>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIG_VERSION:
      return Integer.valueOf(getConfigVersion());

    case SUB_EXCHANGE_NODES:
      return getSubExchangeNodes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIG_VERSION:
      return isSetConfigVersion();
    case SUB_EXCHANGE_NODES:
      return isSetSubExchangeNodes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingOrderRouteTree)
      return this.equals((HostingOrderRouteTree)that);
    return false;
  }

  public boolean equals(HostingOrderRouteTree that) {
    if (that == null)
      return false;

    boolean this_present_configVersion = true && this.isSetConfigVersion();
    boolean that_present_configVersion = true && that.isSetConfigVersion();
    if (this_present_configVersion || that_present_configVersion) {
      if (!(this_present_configVersion && that_present_configVersion))
        return false;
      if (this.configVersion != that.configVersion)
        return false;
    }

    boolean this_present_subExchangeNodes = true && this.isSetSubExchangeNodes();
    boolean that_present_subExchangeNodes = true && that.isSetSubExchangeNodes();
    if (this_present_subExchangeNodes || that_present_subExchangeNodes) {
      if (!(this_present_subExchangeNodes && that_present_subExchangeNodes))
        return false;
      if (!this.subExchangeNodes.equals(that.subExchangeNodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingOrderRouteTree other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConfigVersion()).compareTo(other.isSetConfigVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configVersion, other.configVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubExchangeNodes()).compareTo(other.isSetSubExchangeNodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubExchangeNodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subExchangeNodes, other.subExchangeNodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingOrderRouteTree(");
    boolean first = true;

    if (isSetConfigVersion()) {
      sb.append("configVersion:");
      sb.append(this.configVersion);
      first = false;
    }
    if (isSetSubExchangeNodes()) {
      if (!first) sb.append(", ");
      sb.append("subExchangeNodes:");
      if (this.subExchangeNodes == null) {
        sb.append("null");
      } else {
        sb.append(this.subExchangeNodes);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingOrderRouteTreeStandardSchemeFactory implements SchemeFactory {
    public HostingOrderRouteTreeStandardScheme getScheme() {
      return new HostingOrderRouteTreeStandardScheme();
    }
  }

  private static class HostingOrderRouteTreeStandardScheme extends StandardScheme<HostingOrderRouteTree> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingOrderRouteTree struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configVersion = iprot.readI32();
              struct.setConfigVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_EXCHANGE_NODES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map106 = iprot.readMapBegin();
                struct.subExchangeNodes = new HashMap<String,HostingOrderRouteExchangeNode>(2*_map106.size);
                for (int _i107 = 0; _i107 < _map106.size; ++_i107)
                {
                  String _key108;
                  HostingOrderRouteExchangeNode _val109;
                  _key108 = iprot.readString();
                  _val109 = new HostingOrderRouteExchangeNode();
                  _val109.read(iprot);
                  struct.subExchangeNodes.put(_key108, _val109);
                }
                iprot.readMapEnd();
              }
              struct.setSubExchangeNodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingOrderRouteTree struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetConfigVersion()) {
        oprot.writeFieldBegin(CONFIG_VERSION_FIELD_DESC);
        oprot.writeI32(struct.configVersion);
        oprot.writeFieldEnd();
      }
      if (struct.subExchangeNodes != null) {
        if (struct.isSetSubExchangeNodes()) {
          oprot.writeFieldBegin(SUB_EXCHANGE_NODES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.subExchangeNodes.size()));
            for (Map.Entry<String, HostingOrderRouteExchangeNode> _iter110 : struct.subExchangeNodes.entrySet())
            {
              oprot.writeString(_iter110.getKey());
              _iter110.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingOrderRouteTreeTupleSchemeFactory implements SchemeFactory {
    public HostingOrderRouteTreeTupleScheme getScheme() {
      return new HostingOrderRouteTreeTupleScheme();
    }
  }

  private static class HostingOrderRouteTreeTupleScheme extends TupleScheme<HostingOrderRouteTree> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingOrderRouteTree struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConfigVersion()) {
        optionals.set(0);
      }
      if (struct.isSetSubExchangeNodes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConfigVersion()) {
        oprot.writeI32(struct.configVersion);
      }
      if (struct.isSetSubExchangeNodes()) {
        {
          oprot.writeI32(struct.subExchangeNodes.size());
          for (Map.Entry<String, HostingOrderRouteExchangeNode> _iter111 : struct.subExchangeNodes.entrySet())
          {
            oprot.writeString(_iter111.getKey());
            _iter111.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingOrderRouteTree struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.configVersion = iprot.readI32();
        struct.setConfigVersionIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map112 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.subExchangeNodes = new HashMap<String,HostingOrderRouteExchangeNode>(2*_map112.size);
          for (int _i113 = 0; _i113 < _map112.size; ++_i113)
          {
            String _key114;
            HostingOrderRouteExchangeNode _val115;
            _key114 = iprot.readString();
            _val115 = new HostingOrderRouteExchangeNode();
            _val115.read(iprot);
            struct.subExchangeNodes.put(_key114, _val115);
          }
        }
        struct.setSubExchangeNodesIsSet(true);
      }
    }
  }

}

