/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecUpsideTradeID implements org.apache.thrift.TBase<HostingExecUpsideTradeID, HostingExecUpsideTradeID._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecUpsideTradeID> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecUpsideTradeID");

  private static final org.apache.thrift.protocol.TField CTP_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ctpTradeId", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ESUNNY3_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny3TradeId", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ESUNNY9_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny9TradeId", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecUpsideTradeIDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecUpsideTradeIDTupleSchemeFactory());
  }

  public CTPTradeID ctpTradeId; // optional
  public ESunny3TradeID esunny3TradeId; // optional
  public ESunny9TradeID esunny9TradeId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CTP_TRADE_ID((short)1, "ctpTradeId"),
    ESUNNY3_TRADE_ID((short)2, "esunny3TradeId"),
    ESUNNY9_TRADE_ID((short)3, "esunny9TradeId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CTP_TRADE_ID
          return CTP_TRADE_ID;
        case 2: // ESUNNY3_TRADE_ID
          return ESUNNY3_TRADE_ID;
        case 3: // ESUNNY9_TRADE_ID
          return ESUNNY9_TRADE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CTP_TRADE_ID,_Fields.ESUNNY3_TRADE_ID,_Fields.ESUNNY9_TRADE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CTP_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("ctpTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPTradeID.class)));
    tmpMap.put(_Fields.ESUNNY3_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("esunny3TradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ESunny3TradeID.class)));
    tmpMap.put(_Fields.ESUNNY9_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("esunny9TradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ESunny9TradeID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecUpsideTradeID.class, metaDataMap);
  }

  public HostingExecUpsideTradeID() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecUpsideTradeID(HostingExecUpsideTradeID other) {
    if (other.isSetCtpTradeId()) {
      this.ctpTradeId = new CTPTradeID(other.ctpTradeId);
    }
    if (other.isSetEsunny3TradeId()) {
      this.esunny3TradeId = new ESunny3TradeID(other.esunny3TradeId);
    }
    if (other.isSetEsunny9TradeId()) {
      this.esunny9TradeId = new ESunny9TradeID(other.esunny9TradeId);
    }
  }

  public HostingExecUpsideTradeID deepCopy() {
    return new HostingExecUpsideTradeID(this);
  }

  @Override
  public void clear() {
    this.ctpTradeId = null;
    this.esunny3TradeId = null;
    this.esunny9TradeId = null;
  }

  public CTPTradeID getCtpTradeId() {
    return this.ctpTradeId;
  }

  public HostingExecUpsideTradeID setCtpTradeId(CTPTradeID ctpTradeId) {
    this.ctpTradeId = ctpTradeId;
    return this;
  }

  public void unsetCtpTradeId() {
    this.ctpTradeId = null;
  }

  /** Returns true if field ctpTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetCtpTradeId() {
    return this.ctpTradeId != null;
  }

  public void setCtpTradeIdIsSet(boolean value) {
    if (!value) {
      this.ctpTradeId = null;
    }
  }

  public ESunny3TradeID getEsunny3TradeId() {
    return this.esunny3TradeId;
  }

  public HostingExecUpsideTradeID setEsunny3TradeId(ESunny3TradeID esunny3TradeId) {
    this.esunny3TradeId = esunny3TradeId;
    return this;
  }

  public void unsetEsunny3TradeId() {
    this.esunny3TradeId = null;
  }

  /** Returns true if field esunny3TradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny3TradeId() {
    return this.esunny3TradeId != null;
  }

  public void setEsunny3TradeIdIsSet(boolean value) {
    if (!value) {
      this.esunny3TradeId = null;
    }
  }

  public ESunny9TradeID getEsunny9TradeId() {
    return this.esunny9TradeId;
  }

  public HostingExecUpsideTradeID setEsunny9TradeId(ESunny9TradeID esunny9TradeId) {
    this.esunny9TradeId = esunny9TradeId;
    return this;
  }

  public void unsetEsunny9TradeId() {
    this.esunny9TradeId = null;
  }

  /** Returns true if field esunny9TradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny9TradeId() {
    return this.esunny9TradeId != null;
  }

  public void setEsunny9TradeIdIsSet(boolean value) {
    if (!value) {
      this.esunny9TradeId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CTP_TRADE_ID:
      if (value == null) {
        unsetCtpTradeId();
      } else {
        setCtpTradeId((CTPTradeID)value);
      }
      break;

    case ESUNNY3_TRADE_ID:
      if (value == null) {
        unsetEsunny3TradeId();
      } else {
        setEsunny3TradeId((ESunny3TradeID)value);
      }
      break;

    case ESUNNY9_TRADE_ID:
      if (value == null) {
        unsetEsunny9TradeId();
      } else {
        setEsunny9TradeId((ESunny9TradeID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CTP_TRADE_ID:
      return getCtpTradeId();

    case ESUNNY3_TRADE_ID:
      return getEsunny3TradeId();

    case ESUNNY9_TRADE_ID:
      return getEsunny9TradeId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CTP_TRADE_ID:
      return isSetCtpTradeId();
    case ESUNNY3_TRADE_ID:
      return isSetEsunny3TradeId();
    case ESUNNY9_TRADE_ID:
      return isSetEsunny9TradeId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecUpsideTradeID)
      return this.equals((HostingExecUpsideTradeID)that);
    return false;
  }

  public boolean equals(HostingExecUpsideTradeID that) {
    if (that == null)
      return false;

    boolean this_present_ctpTradeId = true && this.isSetCtpTradeId();
    boolean that_present_ctpTradeId = true && that.isSetCtpTradeId();
    if (this_present_ctpTradeId || that_present_ctpTradeId) {
      if (!(this_present_ctpTradeId && that_present_ctpTradeId))
        return false;
      if (!this.ctpTradeId.equals(that.ctpTradeId))
        return false;
    }

    boolean this_present_esunny3TradeId = true && this.isSetEsunny3TradeId();
    boolean that_present_esunny3TradeId = true && that.isSetEsunny3TradeId();
    if (this_present_esunny3TradeId || that_present_esunny3TradeId) {
      if (!(this_present_esunny3TradeId && that_present_esunny3TradeId))
        return false;
      if (!this.esunny3TradeId.equals(that.esunny3TradeId))
        return false;
    }

    boolean this_present_esunny9TradeId = true && this.isSetEsunny9TradeId();
    boolean that_present_esunny9TradeId = true && that.isSetEsunny9TradeId();
    if (this_present_esunny9TradeId || that_present_esunny9TradeId) {
      if (!(this_present_esunny9TradeId && that_present_esunny9TradeId))
        return false;
      if (!this.esunny9TradeId.equals(that.esunny9TradeId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecUpsideTradeID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCtpTradeId()).compareTo(other.isSetCtpTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtpTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctpTradeId, other.ctpTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny3TradeId()).compareTo(other.isSetEsunny3TradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny3TradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny3TradeId, other.esunny3TradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny9TradeId()).compareTo(other.isSetEsunny9TradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny9TradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny9TradeId, other.esunny9TradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecUpsideTradeID(");
    boolean first = true;

    if (isSetCtpTradeId()) {
      sb.append("ctpTradeId:");
      if (this.ctpTradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ctpTradeId);
      }
      first = false;
    }
    if (isSetEsunny3TradeId()) {
      if (!first) sb.append(", ");
      sb.append("esunny3TradeId:");
      if (this.esunny3TradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny3TradeId);
      }
      first = false;
    }
    if (isSetEsunny9TradeId()) {
      if (!first) sb.append(", ");
      sb.append("esunny9TradeId:");
      if (this.esunny9TradeId == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny9TradeId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ctpTradeId != null) {
      ctpTradeId.validate();
    }
    if (esunny3TradeId != null) {
      esunny3TradeId.validate();
    }
    if (esunny9TradeId != null) {
      esunny9TradeId.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecUpsideTradeIDStandardSchemeFactory implements SchemeFactory {
    public HostingExecUpsideTradeIDStandardScheme getScheme() {
      return new HostingExecUpsideTradeIDStandardScheme();
    }
  }

  private static class HostingExecUpsideTradeIDStandardScheme extends StandardScheme<HostingExecUpsideTradeID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecUpsideTradeID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CTP_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ctpTradeId = new CTPTradeID();
              struct.ctpTradeId.read(iprot);
              struct.setCtpTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ESUNNY3_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny3TradeId = new ESunny3TradeID();
              struct.esunny3TradeId.read(iprot);
              struct.setEsunny3TradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ESUNNY9_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny9TradeId = new ESunny9TradeID();
              struct.esunny9TradeId.read(iprot);
              struct.setEsunny9TradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecUpsideTradeID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ctpTradeId != null) {
        if (struct.isSetCtpTradeId()) {
          oprot.writeFieldBegin(CTP_TRADE_ID_FIELD_DESC);
          struct.ctpTradeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny3TradeId != null) {
        if (struct.isSetEsunny3TradeId()) {
          oprot.writeFieldBegin(ESUNNY3_TRADE_ID_FIELD_DESC);
          struct.esunny3TradeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny9TradeId != null) {
        if (struct.isSetEsunny9TradeId()) {
          oprot.writeFieldBegin(ESUNNY9_TRADE_ID_FIELD_DESC);
          struct.esunny9TradeId.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecUpsideTradeIDTupleSchemeFactory implements SchemeFactory {
    public HostingExecUpsideTradeIDTupleScheme getScheme() {
      return new HostingExecUpsideTradeIDTupleScheme();
    }
  }

  private static class HostingExecUpsideTradeIDTupleScheme extends TupleScheme<HostingExecUpsideTradeID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecUpsideTradeID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCtpTradeId()) {
        optionals.set(0);
      }
      if (struct.isSetEsunny3TradeId()) {
        optionals.set(1);
      }
      if (struct.isSetEsunny9TradeId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCtpTradeId()) {
        struct.ctpTradeId.write(oprot);
      }
      if (struct.isSetEsunny3TradeId()) {
        struct.esunny3TradeId.write(oprot);
      }
      if (struct.isSetEsunny9TradeId()) {
        struct.esunny9TradeId.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecUpsideTradeID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ctpTradeId = new CTPTradeID();
        struct.ctpTradeId.read(iprot);
        struct.setCtpTradeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.esunny3TradeId = new ESunny3TradeID();
        struct.esunny3TradeId.read(iprot);
        struct.setEsunny3TradeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.esunny9TradeId = new ESunny9TradeID();
        struct.esunny9TradeId.read(iprot);
        struct.setEsunny9TradeIdIsSet(true);
      }
    }
  }

}

