/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.storage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpdateConfigDescription implements org.apache.thrift.TBase<UpdateConfigDescription, UpdateConfigDescription._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateConfigDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateConfigDescription");

  private static final org.apache.thrift.protocol.TField CONFIG_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("configArea", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONFIG_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("configKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONFIG_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("configVersion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CONFIG_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("configContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NOTIFY_EVENT_CLASS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyEventClassName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTIFY_EVENT_BINARY_FIELD_DESC = new org.apache.thrift.protocol.TField("notifyEventBinary", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpdateConfigDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpdateConfigDescriptionTupleSchemeFactory());
  }

  public String configArea; // optional
  public String configKey; // optional
  public int configVersion; // optional
  public ByteBuffer configContent; // optional
  public String notifyEventClassName; // optional
  public ByteBuffer notifyEventBinary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIG_AREA((short)1, "configArea"),
    CONFIG_KEY((short)2, "configKey"),
    CONFIG_VERSION((short)3, "configVersion"),
    CONFIG_CONTENT((short)4, "configContent"),
    NOTIFY_EVENT_CLASS_NAME((short)5, "notifyEventClassName"),
    NOTIFY_EVENT_BINARY((short)6, "notifyEventBinary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIG_AREA
          return CONFIG_AREA;
        case 2: // CONFIG_KEY
          return CONFIG_KEY;
        case 3: // CONFIG_VERSION
          return CONFIG_VERSION;
        case 4: // CONFIG_CONTENT
          return CONFIG_CONTENT;
        case 5: // NOTIFY_EVENT_CLASS_NAME
          return NOTIFY_EVENT_CLASS_NAME;
        case 6: // NOTIFY_EVENT_BINARY
          return NOTIFY_EVENT_BINARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIGVERSION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONFIG_AREA,_Fields.CONFIG_KEY,_Fields.CONFIG_VERSION,_Fields.CONFIG_CONTENT,_Fields.NOTIFY_EVENT_CLASS_NAME,_Fields.NOTIFY_EVENT_BINARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIG_AREA, new org.apache.thrift.meta_data.FieldMetaData("configArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIG_KEY, new org.apache.thrift.meta_data.FieldMetaData("configKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONFIG_VERSION, new org.apache.thrift.meta_data.FieldMetaData("configVersion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CONFIG_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("configContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.NOTIFY_EVENT_CLASS_NAME, new org.apache.thrift.meta_data.FieldMetaData("notifyEventClassName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFY_EVENT_BINARY, new org.apache.thrift.meta_data.FieldMetaData("notifyEventBinary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateConfigDescription.class, metaDataMap);
  }

  public UpdateConfigDescription() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateConfigDescription(UpdateConfigDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetConfigArea()) {
      this.configArea = other.configArea;
    }
    if (other.isSetConfigKey()) {
      this.configKey = other.configKey;
    }
    this.configVersion = other.configVersion;
    if (other.isSetConfigContent()) {
      this.configContent = org.apache.thrift.TBaseHelper.copyBinary(other.configContent);
;
    }
    if (other.isSetNotifyEventClassName()) {
      this.notifyEventClassName = other.notifyEventClassName;
    }
    if (other.isSetNotifyEventBinary()) {
      this.notifyEventBinary = org.apache.thrift.TBaseHelper.copyBinary(other.notifyEventBinary);
;
    }
  }

  public UpdateConfigDescription deepCopy() {
    return new UpdateConfigDescription(this);
  }

  @Override
  public void clear() {
    this.configArea = null;
    this.configKey = null;
    setConfigVersionIsSet(false);
    this.configVersion = 0;
    this.configContent = null;
    this.notifyEventClassName = null;
    this.notifyEventBinary = null;
  }

  public String getConfigArea() {
    return this.configArea;
  }

  public UpdateConfigDescription setConfigArea(String configArea) {
    this.configArea = configArea;
    return this;
  }

  public void unsetConfigArea() {
    this.configArea = null;
  }

  /** Returns true if field configArea is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigArea() {
    return this.configArea != null;
  }

  public void setConfigAreaIsSet(boolean value) {
    if (!value) {
      this.configArea = null;
    }
  }

  public String getConfigKey() {
    return this.configKey;
  }

  public UpdateConfigDescription setConfigKey(String configKey) {
    this.configKey = configKey;
    return this;
  }

  public void unsetConfigKey() {
    this.configKey = null;
  }

  /** Returns true if field configKey is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigKey() {
    return this.configKey != null;
  }

  public void setConfigKeyIsSet(boolean value) {
    if (!value) {
      this.configKey = null;
    }
  }

  public int getConfigVersion() {
    return this.configVersion;
  }

  public UpdateConfigDescription setConfigVersion(int configVersion) {
    this.configVersion = configVersion;
    setConfigVersionIsSet(true);
    return this;
  }

  public void unsetConfigVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  /** Returns true if field configVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID);
  }

  public void setConfigVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGVERSION_ISSET_ID, value);
  }

  public byte[] getConfigContent() {
    setConfigContent(org.apache.thrift.TBaseHelper.rightSize(configContent));
    return configContent == null ? null : configContent.array();
  }

  public ByteBuffer bufferForConfigContent() {
    return configContent;
  }

  public UpdateConfigDescription setConfigContent(byte[] configContent) {
    setConfigContent(configContent == null ? (ByteBuffer)null : ByteBuffer.wrap(configContent));
    return this;
  }

  public UpdateConfigDescription setConfigContent(ByteBuffer configContent) {
    this.configContent = configContent;
    return this;
  }

  public void unsetConfigContent() {
    this.configContent = null;
  }

  /** Returns true if field configContent is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigContent() {
    return this.configContent != null;
  }

  public void setConfigContentIsSet(boolean value) {
    if (!value) {
      this.configContent = null;
    }
  }

  public String getNotifyEventClassName() {
    return this.notifyEventClassName;
  }

  public UpdateConfigDescription setNotifyEventClassName(String notifyEventClassName) {
    this.notifyEventClassName = notifyEventClassName;
    return this;
  }

  public void unsetNotifyEventClassName() {
    this.notifyEventClassName = null;
  }

  /** Returns true if field notifyEventClassName is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyEventClassName() {
    return this.notifyEventClassName != null;
  }

  public void setNotifyEventClassNameIsSet(boolean value) {
    if (!value) {
      this.notifyEventClassName = null;
    }
  }

  public byte[] getNotifyEventBinary() {
    setNotifyEventBinary(org.apache.thrift.TBaseHelper.rightSize(notifyEventBinary));
    return notifyEventBinary == null ? null : notifyEventBinary.array();
  }

  public ByteBuffer bufferForNotifyEventBinary() {
    return notifyEventBinary;
  }

  public UpdateConfigDescription setNotifyEventBinary(byte[] notifyEventBinary) {
    setNotifyEventBinary(notifyEventBinary == null ? (ByteBuffer)null : ByteBuffer.wrap(notifyEventBinary));
    return this;
  }

  public UpdateConfigDescription setNotifyEventBinary(ByteBuffer notifyEventBinary) {
    this.notifyEventBinary = notifyEventBinary;
    return this;
  }

  public void unsetNotifyEventBinary() {
    this.notifyEventBinary = null;
  }

  /** Returns true if field notifyEventBinary is set (has been assigned a value) and false otherwise */
  public boolean isSetNotifyEventBinary() {
    return this.notifyEventBinary != null;
  }

  public void setNotifyEventBinaryIsSet(boolean value) {
    if (!value) {
      this.notifyEventBinary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIG_AREA:
      if (value == null) {
        unsetConfigArea();
      } else {
        setConfigArea((String)value);
      }
      break;

    case CONFIG_KEY:
      if (value == null) {
        unsetConfigKey();
      } else {
        setConfigKey((String)value);
      }
      break;

    case CONFIG_VERSION:
      if (value == null) {
        unsetConfigVersion();
      } else {
        setConfigVersion((Integer)value);
      }
      break;

    case CONFIG_CONTENT:
      if (value == null) {
        unsetConfigContent();
      } else {
        setConfigContent((ByteBuffer)value);
      }
      break;

    case NOTIFY_EVENT_CLASS_NAME:
      if (value == null) {
        unsetNotifyEventClassName();
      } else {
        setNotifyEventClassName((String)value);
      }
      break;

    case NOTIFY_EVENT_BINARY:
      if (value == null) {
        unsetNotifyEventBinary();
      } else {
        setNotifyEventBinary((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIG_AREA:
      return getConfigArea();

    case CONFIG_KEY:
      return getConfigKey();

    case CONFIG_VERSION:
      return Integer.valueOf(getConfigVersion());

    case CONFIG_CONTENT:
      return getConfigContent();

    case NOTIFY_EVENT_CLASS_NAME:
      return getNotifyEventClassName();

    case NOTIFY_EVENT_BINARY:
      return getNotifyEventBinary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIG_AREA:
      return isSetConfigArea();
    case CONFIG_KEY:
      return isSetConfigKey();
    case CONFIG_VERSION:
      return isSetConfigVersion();
    case CONFIG_CONTENT:
      return isSetConfigContent();
    case NOTIFY_EVENT_CLASS_NAME:
      return isSetNotifyEventClassName();
    case NOTIFY_EVENT_BINARY:
      return isSetNotifyEventBinary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateConfigDescription)
      return this.equals((UpdateConfigDescription)that);
    return false;
  }

  public boolean equals(UpdateConfigDescription that) {
    if (that == null)
      return false;

    boolean this_present_configArea = true && this.isSetConfigArea();
    boolean that_present_configArea = true && that.isSetConfigArea();
    if (this_present_configArea || that_present_configArea) {
      if (!(this_present_configArea && that_present_configArea))
        return false;
      if (!this.configArea.equals(that.configArea))
        return false;
    }

    boolean this_present_configKey = true && this.isSetConfigKey();
    boolean that_present_configKey = true && that.isSetConfigKey();
    if (this_present_configKey || that_present_configKey) {
      if (!(this_present_configKey && that_present_configKey))
        return false;
      if (!this.configKey.equals(that.configKey))
        return false;
    }

    boolean this_present_configVersion = true && this.isSetConfigVersion();
    boolean that_present_configVersion = true && that.isSetConfigVersion();
    if (this_present_configVersion || that_present_configVersion) {
      if (!(this_present_configVersion && that_present_configVersion))
        return false;
      if (this.configVersion != that.configVersion)
        return false;
    }

    boolean this_present_configContent = true && this.isSetConfigContent();
    boolean that_present_configContent = true && that.isSetConfigContent();
    if (this_present_configContent || that_present_configContent) {
      if (!(this_present_configContent && that_present_configContent))
        return false;
      if (!this.configContent.equals(that.configContent))
        return false;
    }

    boolean this_present_notifyEventClassName = true && this.isSetNotifyEventClassName();
    boolean that_present_notifyEventClassName = true && that.isSetNotifyEventClassName();
    if (this_present_notifyEventClassName || that_present_notifyEventClassName) {
      if (!(this_present_notifyEventClassName && that_present_notifyEventClassName))
        return false;
      if (!this.notifyEventClassName.equals(that.notifyEventClassName))
        return false;
    }

    boolean this_present_notifyEventBinary = true && this.isSetNotifyEventBinary();
    boolean that_present_notifyEventBinary = true && that.isSetNotifyEventBinary();
    if (this_present_notifyEventBinary || that_present_notifyEventBinary) {
      if (!(this_present_notifyEventBinary && that_present_notifyEventBinary))
        return false;
      if (!this.notifyEventBinary.equals(that.notifyEventBinary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpdateConfigDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConfigArea()).compareTo(other.isSetConfigArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configArea, other.configArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigKey()).compareTo(other.isSetConfigKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configKey, other.configKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigVersion()).compareTo(other.isSetConfigVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configVersion, other.configVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfigContent()).compareTo(other.isSetConfigContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configContent, other.configContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyEventClassName()).compareTo(other.isSetNotifyEventClassName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyEventClassName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyEventClassName, other.notifyEventClassName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotifyEventBinary()).compareTo(other.isSetNotifyEventBinary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotifyEventBinary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notifyEventBinary, other.notifyEventBinary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpdateConfigDescription(");
    boolean first = true;

    if (isSetConfigArea()) {
      sb.append("configArea:");
      if (this.configArea == null) {
        sb.append("null");
      } else {
        sb.append(this.configArea);
      }
      first = false;
    }
    if (isSetConfigKey()) {
      if (!first) sb.append(", ");
      sb.append("configKey:");
      if (this.configKey == null) {
        sb.append("null");
      } else {
        sb.append(this.configKey);
      }
      first = false;
    }
    if (isSetConfigVersion()) {
      if (!first) sb.append(", ");
      sb.append("configVersion:");
      sb.append(this.configVersion);
      first = false;
    }
    if (isSetConfigContent()) {
      if (!first) sb.append(", ");
      sb.append("configContent:");
      if (this.configContent == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.configContent, sb);
      }
      first = false;
    }
    if (isSetNotifyEventClassName()) {
      if (!first) sb.append(", ");
      sb.append("notifyEventClassName:");
      if (this.notifyEventClassName == null) {
        sb.append("null");
      } else {
        sb.append(this.notifyEventClassName);
      }
      first = false;
    }
    if (isSetNotifyEventBinary()) {
      if (!first) sb.append(", ");
      sb.append("notifyEventBinary:");
      if (this.notifyEventBinary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.notifyEventBinary, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateConfigDescriptionStandardSchemeFactory implements SchemeFactory {
    public UpdateConfigDescriptionStandardScheme getScheme() {
      return new UpdateConfigDescriptionStandardScheme();
    }
  }

  private static class UpdateConfigDescriptionStandardScheme extends StandardScheme<UpdateConfigDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateConfigDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIG_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.configArea = iprot.readString();
              struct.setConfigAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONFIG_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.configKey = iprot.readString();
              struct.setConfigKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONFIG_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configVersion = iprot.readI32();
              struct.setConfigVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONFIG_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.configContent = iprot.readBinary();
              struct.setConfigContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NOTIFY_EVENT_CLASS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyEventClassName = iprot.readString();
              struct.setNotifyEventClassNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTIFY_EVENT_BINARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notifyEventBinary = iprot.readBinary();
              struct.setNotifyEventBinaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateConfigDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.configArea != null) {
        if (struct.isSetConfigArea()) {
          oprot.writeFieldBegin(CONFIG_AREA_FIELD_DESC);
          oprot.writeString(struct.configArea);
          oprot.writeFieldEnd();
        }
      }
      if (struct.configKey != null) {
        if (struct.isSetConfigKey()) {
          oprot.writeFieldBegin(CONFIG_KEY_FIELD_DESC);
          oprot.writeString(struct.configKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConfigVersion()) {
        oprot.writeFieldBegin(CONFIG_VERSION_FIELD_DESC);
        oprot.writeI32(struct.configVersion);
        oprot.writeFieldEnd();
      }
      if (struct.configContent != null) {
        if (struct.isSetConfigContent()) {
          oprot.writeFieldBegin(CONFIG_CONTENT_FIELD_DESC);
          oprot.writeBinary(struct.configContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.notifyEventClassName != null) {
        if (struct.isSetNotifyEventClassName()) {
          oprot.writeFieldBegin(NOTIFY_EVENT_CLASS_NAME_FIELD_DESC);
          oprot.writeString(struct.notifyEventClassName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.notifyEventBinary != null) {
        if (struct.isSetNotifyEventBinary()) {
          oprot.writeFieldBegin(NOTIFY_EVENT_BINARY_FIELD_DESC);
          oprot.writeBinary(struct.notifyEventBinary);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateConfigDescriptionTupleSchemeFactory implements SchemeFactory {
    public UpdateConfigDescriptionTupleScheme getScheme() {
      return new UpdateConfigDescriptionTupleScheme();
    }
  }

  private static class UpdateConfigDescriptionTupleScheme extends TupleScheme<UpdateConfigDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateConfigDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConfigArea()) {
        optionals.set(0);
      }
      if (struct.isSetConfigKey()) {
        optionals.set(1);
      }
      if (struct.isSetConfigVersion()) {
        optionals.set(2);
      }
      if (struct.isSetConfigContent()) {
        optionals.set(3);
      }
      if (struct.isSetNotifyEventClassName()) {
        optionals.set(4);
      }
      if (struct.isSetNotifyEventBinary()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetConfigArea()) {
        oprot.writeString(struct.configArea);
      }
      if (struct.isSetConfigKey()) {
        oprot.writeString(struct.configKey);
      }
      if (struct.isSetConfigVersion()) {
        oprot.writeI32(struct.configVersion);
      }
      if (struct.isSetConfigContent()) {
        oprot.writeBinary(struct.configContent);
      }
      if (struct.isSetNotifyEventClassName()) {
        oprot.writeString(struct.notifyEventClassName);
      }
      if (struct.isSetNotifyEventBinary()) {
        oprot.writeBinary(struct.notifyEventBinary);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateConfigDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.configArea = iprot.readString();
        struct.setConfigAreaIsSet(true);
      }
      if (incoming.get(1)) {
        struct.configKey = iprot.readString();
        struct.setConfigKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.configVersion = iprot.readI32();
        struct.setConfigVersionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.configContent = iprot.readBinary();
        struct.setConfigContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notifyEventClassName = iprot.readString();
        struct.setNotifyEventClassNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notifyEventBinary = iprot.readBinary();
        struct.setNotifyEventBinaryIsSet(true);
      }
    }
  }

}

