/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.events;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class UpsideNotifyForwardTradeEvent implements org.apache.thrift.TBase<UpsideNotifyForwardTradeEvent, UpsideNotifyForwardTradeEvent._Fields>, java.io.Serializable, Cloneable, Comparable<UpsideNotifyForwardTradeEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpsideNotifyForwardTradeEvent");

  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField FORWARD_TRADE_LEG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardTradeLegInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVED_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedTimestampMs", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventCreateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FORWARD_TRADE_LEG_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("forwardTradeLegContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UpsideNotifyForwardTradeEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UpsideNotifyForwardTradeEventTupleSchemeFactory());
  }

  public long execOrderId; // optional
  public xueqiao.trade.hosting.HostingExecTradeLegInfo forwardTradeLegInfo; // optional
  public long receivedTimestampMs; // optional
  public long eventCreateTimestampMs; // optional
  public xueqiao.trade.hosting.HostingExecOrderLegContractSummary forwardTradeLegContractSummary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_ORDER_ID((short)1, "execOrderId"),
    FORWARD_TRADE_LEG_INFO((short)2, "forwardTradeLegInfo"),
    RECEIVED_TIMESTAMP_MS((short)3, "receivedTimestampMs"),
    EVENT_CREATE_TIMESTAMP_MS((short)4, "eventCreateTimestampMs"),
    FORWARD_TRADE_LEG_CONTRACT_SUMMARY((short)5, "forwardTradeLegContractSummary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 2: // FORWARD_TRADE_LEG_INFO
          return FORWARD_TRADE_LEG_INFO;
        case 3: // RECEIVED_TIMESTAMP_MS
          return RECEIVED_TIMESTAMP_MS;
        case 4: // EVENT_CREATE_TIMESTAMP_MS
          return EVENT_CREATE_TIMESTAMP_MS;
        case 5: // FORWARD_TRADE_LEG_CONTRACT_SUMMARY
          return FORWARD_TRADE_LEG_CONTRACT_SUMMARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECORDERID_ISSET_ID = 0;
  private static final int __RECEIVEDTIMESTAMPMS_ISSET_ID = 1;
  private static final int __EVENTCREATETIMESTAMPMS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_ORDER_ID,_Fields.FORWARD_TRADE_LEG_INFO,_Fields.RECEIVED_TIMESTAMP_MS,_Fields.EVENT_CREATE_TIMESTAMP_MS,_Fields.FORWARD_TRADE_LEG_CONTRACT_SUMMARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FORWARD_TRADE_LEG_INFO, new org.apache.thrift.meta_data.FieldMetaData("forwardTradeLegInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecTradeLegInfo.class)));
    tmpMap.put(_Fields.RECEIVED_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("receivedTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENT_CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("eventCreateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FORWARD_TRADE_LEG_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("forwardTradeLegContractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrderLegContractSummary.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpsideNotifyForwardTradeEvent.class, metaDataMap);
  }

  public UpsideNotifyForwardTradeEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpsideNotifyForwardTradeEvent(UpsideNotifyForwardTradeEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execOrderId = other.execOrderId;
    if (other.isSetForwardTradeLegInfo()) {
      this.forwardTradeLegInfo = new xueqiao.trade.hosting.HostingExecTradeLegInfo(other.forwardTradeLegInfo);
    }
    this.receivedTimestampMs = other.receivedTimestampMs;
    this.eventCreateTimestampMs = other.eventCreateTimestampMs;
    if (other.isSetForwardTradeLegContractSummary()) {
      this.forwardTradeLegContractSummary = new xueqiao.trade.hosting.HostingExecOrderLegContractSummary(other.forwardTradeLegContractSummary);
    }
  }

  public UpsideNotifyForwardTradeEvent deepCopy() {
    return new UpsideNotifyForwardTradeEvent(this);
  }

  @Override
  public void clear() {
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    this.forwardTradeLegInfo = null;
    setReceivedTimestampMsIsSet(false);
    this.receivedTimestampMs = 0;
    setEventCreateTimestampMsIsSet(false);
    this.eventCreateTimestampMs = 0;
    this.forwardTradeLegContractSummary = null;
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public UpsideNotifyForwardTradeEvent setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public xueqiao.trade.hosting.HostingExecTradeLegInfo getForwardTradeLegInfo() {
    return this.forwardTradeLegInfo;
  }

  public UpsideNotifyForwardTradeEvent setForwardTradeLegInfo(xueqiao.trade.hosting.HostingExecTradeLegInfo forwardTradeLegInfo) {
    this.forwardTradeLegInfo = forwardTradeLegInfo;
    return this;
  }

  public void unsetForwardTradeLegInfo() {
    this.forwardTradeLegInfo = null;
  }

  /** Returns true if field forwardTradeLegInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardTradeLegInfo() {
    return this.forwardTradeLegInfo != null;
  }

  public void setForwardTradeLegInfoIsSet(boolean value) {
    if (!value) {
      this.forwardTradeLegInfo = null;
    }
  }

  public long getReceivedTimestampMs() {
    return this.receivedTimestampMs;
  }

  public UpsideNotifyForwardTradeEvent setReceivedTimestampMs(long receivedTimestampMs) {
    this.receivedTimestampMs = receivedTimestampMs;
    setReceivedTimestampMsIsSet(true);
    return this;
  }

  public void unsetReceivedTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field receivedTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID);
  }

  public void setReceivedTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID, value);
  }

  public long getEventCreateTimestampMs() {
    return this.eventCreateTimestampMs;
  }

  public UpsideNotifyForwardTradeEvent setEventCreateTimestampMs(long eventCreateTimestampMs) {
    this.eventCreateTimestampMs = eventCreateTimestampMs;
    setEventCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetEventCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field eventCreateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEventCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  public void setEventCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID, value);
  }

  public xueqiao.trade.hosting.HostingExecOrderLegContractSummary getForwardTradeLegContractSummary() {
    return this.forwardTradeLegContractSummary;
  }

  public UpsideNotifyForwardTradeEvent setForwardTradeLegContractSummary(xueqiao.trade.hosting.HostingExecOrderLegContractSummary forwardTradeLegContractSummary) {
    this.forwardTradeLegContractSummary = forwardTradeLegContractSummary;
    return this;
  }

  public void unsetForwardTradeLegContractSummary() {
    this.forwardTradeLegContractSummary = null;
  }

  /** Returns true if field forwardTradeLegContractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetForwardTradeLegContractSummary() {
    return this.forwardTradeLegContractSummary != null;
  }

  public void setForwardTradeLegContractSummaryIsSet(boolean value) {
    if (!value) {
      this.forwardTradeLegContractSummary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case FORWARD_TRADE_LEG_INFO:
      if (value == null) {
        unsetForwardTradeLegInfo();
      } else {
        setForwardTradeLegInfo((xueqiao.trade.hosting.HostingExecTradeLegInfo)value);
      }
      break;

    case RECEIVED_TIMESTAMP_MS:
      if (value == null) {
        unsetReceivedTimestampMs();
      } else {
        setReceivedTimestampMs((Long)value);
      }
      break;

    case EVENT_CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetEventCreateTimestampMs();
      } else {
        setEventCreateTimestampMs((Long)value);
      }
      break;

    case FORWARD_TRADE_LEG_CONTRACT_SUMMARY:
      if (value == null) {
        unsetForwardTradeLegContractSummary();
      } else {
        setForwardTradeLegContractSummary((xueqiao.trade.hosting.HostingExecOrderLegContractSummary)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case FORWARD_TRADE_LEG_INFO:
      return getForwardTradeLegInfo();

    case RECEIVED_TIMESTAMP_MS:
      return Long.valueOf(getReceivedTimestampMs());

    case EVENT_CREATE_TIMESTAMP_MS:
      return Long.valueOf(getEventCreateTimestampMs());

    case FORWARD_TRADE_LEG_CONTRACT_SUMMARY:
      return getForwardTradeLegContractSummary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case FORWARD_TRADE_LEG_INFO:
      return isSetForwardTradeLegInfo();
    case RECEIVED_TIMESTAMP_MS:
      return isSetReceivedTimestampMs();
    case EVENT_CREATE_TIMESTAMP_MS:
      return isSetEventCreateTimestampMs();
    case FORWARD_TRADE_LEG_CONTRACT_SUMMARY:
      return isSetForwardTradeLegContractSummary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpsideNotifyForwardTradeEvent)
      return this.equals((UpsideNotifyForwardTradeEvent)that);
    return false;
  }

  public boolean equals(UpsideNotifyForwardTradeEvent that) {
    if (that == null)
      return false;

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_forwardTradeLegInfo = true && this.isSetForwardTradeLegInfo();
    boolean that_present_forwardTradeLegInfo = true && that.isSetForwardTradeLegInfo();
    if (this_present_forwardTradeLegInfo || that_present_forwardTradeLegInfo) {
      if (!(this_present_forwardTradeLegInfo && that_present_forwardTradeLegInfo))
        return false;
      if (!this.forwardTradeLegInfo.equals(that.forwardTradeLegInfo))
        return false;
    }

    boolean this_present_receivedTimestampMs = true && this.isSetReceivedTimestampMs();
    boolean that_present_receivedTimestampMs = true && that.isSetReceivedTimestampMs();
    if (this_present_receivedTimestampMs || that_present_receivedTimestampMs) {
      if (!(this_present_receivedTimestampMs && that_present_receivedTimestampMs))
        return false;
      if (this.receivedTimestampMs != that.receivedTimestampMs)
        return false;
    }

    boolean this_present_eventCreateTimestampMs = true && this.isSetEventCreateTimestampMs();
    boolean that_present_eventCreateTimestampMs = true && that.isSetEventCreateTimestampMs();
    if (this_present_eventCreateTimestampMs || that_present_eventCreateTimestampMs) {
      if (!(this_present_eventCreateTimestampMs && that_present_eventCreateTimestampMs))
        return false;
      if (this.eventCreateTimestampMs != that.eventCreateTimestampMs)
        return false;
    }

    boolean this_present_forwardTradeLegContractSummary = true && this.isSetForwardTradeLegContractSummary();
    boolean that_present_forwardTradeLegContractSummary = true && that.isSetForwardTradeLegContractSummary();
    if (this_present_forwardTradeLegContractSummary || that_present_forwardTradeLegContractSummary) {
      if (!(this_present_forwardTradeLegContractSummary && that_present_forwardTradeLegContractSummary))
        return false;
      if (!this.forwardTradeLegContractSummary.equals(that.forwardTradeLegContractSummary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(UpsideNotifyForwardTradeEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardTradeLegInfo()).compareTo(other.isSetForwardTradeLegInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardTradeLegInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardTradeLegInfo, other.forwardTradeLegInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedTimestampMs()).compareTo(other.isSetReceivedTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedTimestampMs, other.receivedTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventCreateTimestampMs()).compareTo(other.isSetEventCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventCreateTimestampMs, other.eventCreateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForwardTradeLegContractSummary()).compareTo(other.isSetForwardTradeLegContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForwardTradeLegContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forwardTradeLegContractSummary, other.forwardTradeLegContractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpsideNotifyForwardTradeEvent(");
    boolean first = true;

    if (isSetExecOrderId()) {
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetForwardTradeLegInfo()) {
      if (!first) sb.append(", ");
      sb.append("forwardTradeLegInfo:");
      if (this.forwardTradeLegInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.forwardTradeLegInfo);
      }
      first = false;
    }
    if (isSetReceivedTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("receivedTimestampMs:");
      sb.append(this.receivedTimestampMs);
      first = false;
    }
    if (isSetEventCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("eventCreateTimestampMs:");
      sb.append(this.eventCreateTimestampMs);
      first = false;
    }
    if (isSetForwardTradeLegContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("forwardTradeLegContractSummary:");
      if (this.forwardTradeLegContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.forwardTradeLegContractSummary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (forwardTradeLegInfo != null) {
      forwardTradeLegInfo.validate();
    }
    if (forwardTradeLegContractSummary != null) {
      forwardTradeLegContractSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpsideNotifyForwardTradeEventStandardSchemeFactory implements SchemeFactory {
    public UpsideNotifyForwardTradeEventStandardScheme getScheme() {
      return new UpsideNotifyForwardTradeEventStandardScheme();
    }
  }

  private static class UpsideNotifyForwardTradeEventStandardScheme extends StandardScheme<UpsideNotifyForwardTradeEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpsideNotifyForwardTradeEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FORWARD_TRADE_LEG_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.forwardTradeLegInfo = new xueqiao.trade.hosting.HostingExecTradeLegInfo();
              struct.forwardTradeLegInfo.read(iprot);
              struct.setForwardTradeLegInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVED_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedTimestampMs = iprot.readI64();
              struct.setReceivedTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventCreateTimestampMs = iprot.readI64();
              struct.setEventCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FORWARD_TRADE_LEG_CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.forwardTradeLegContractSummary = new xueqiao.trade.hosting.HostingExecOrderLegContractSummary();
              struct.forwardTradeLegContractSummary.read(iprot);
              struct.setForwardTradeLegContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpsideNotifyForwardTradeEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.forwardTradeLegInfo != null) {
        if (struct.isSetForwardTradeLegInfo()) {
          oprot.writeFieldBegin(FORWARD_TRADE_LEG_INFO_FIELD_DESC);
          struct.forwardTradeLegInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceivedTimestampMs()) {
        oprot.writeFieldBegin(RECEIVED_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.receivedTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeFieldBegin(EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.eventCreateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.forwardTradeLegContractSummary != null) {
        if (struct.isSetForwardTradeLegContractSummary()) {
          oprot.writeFieldBegin(FORWARD_TRADE_LEG_CONTRACT_SUMMARY_FIELD_DESC);
          struct.forwardTradeLegContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpsideNotifyForwardTradeEventTupleSchemeFactory implements SchemeFactory {
    public UpsideNotifyForwardTradeEventTupleScheme getScheme() {
      return new UpsideNotifyForwardTradeEventTupleScheme();
    }
  }

  private static class UpsideNotifyForwardTradeEventTupleScheme extends TupleScheme<UpsideNotifyForwardTradeEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpsideNotifyForwardTradeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetForwardTradeLegInfo()) {
        optionals.set(1);
      }
      if (struct.isSetReceivedTimestampMs()) {
        optionals.set(2);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        optionals.set(3);
      }
      if (struct.isSetForwardTradeLegContractSummary()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetForwardTradeLegInfo()) {
        struct.forwardTradeLegInfo.write(oprot);
      }
      if (struct.isSetReceivedTimestampMs()) {
        oprot.writeI64(struct.receivedTimestampMs);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeI64(struct.eventCreateTimestampMs);
      }
      if (struct.isSetForwardTradeLegContractSummary()) {
        struct.forwardTradeLegContractSummary.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpsideNotifyForwardTradeEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.forwardTradeLegInfo = new xueqiao.trade.hosting.HostingExecTradeLegInfo();
        struct.forwardTradeLegInfo.read(iprot);
        struct.setForwardTradeLegInfoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receivedTimestampMs = iprot.readI64();
        struct.setReceivedTimestampMsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventCreateTimestampMs = iprot.readI64();
        struct.setEventCreateTimestampMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.forwardTradeLegContractSummary = new xueqiao.trade.hosting.HostingExecOrderLegContractSummary();
        struct.forwardTradeLegContractSummary.read(iprot);
        struct.setForwardTradeLegContractSummaryIsSet(true);
      }
    }
  }

}

