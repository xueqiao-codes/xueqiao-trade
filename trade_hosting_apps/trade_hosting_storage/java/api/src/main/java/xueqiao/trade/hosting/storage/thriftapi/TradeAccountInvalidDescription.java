/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.storage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeAccountInvalidDescription implements org.apache.thrift.TBase<TradeAccountInvalidDescription, TradeAccountInvalidDescription._Fields>, java.io.Serializable, Cloneable, Comparable<TradeAccountInvalidDescription> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeAccountInvalidDescription");

  private static final org.apache.thrift.protocol.TField INVALID_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidErrorCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField API_RET_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("apiRetCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INVALID_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("invalidReason", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeAccountInvalidDescriptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeAccountInvalidDescriptionTupleSchemeFactory());
  }

  public int invalidErrorCode; // optional
  public int apiRetCode; // optional
  public String invalidReason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INVALID_ERROR_CODE((short)1, "invalidErrorCode"),
    API_RET_CODE((short)2, "apiRetCode"),
    INVALID_REASON((short)3, "invalidReason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INVALID_ERROR_CODE
          return INVALID_ERROR_CODE;
        case 2: // API_RET_CODE
          return API_RET_CODE;
        case 3: // INVALID_REASON
          return INVALID_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INVALIDERRORCODE_ISSET_ID = 0;
  private static final int __APIRETCODE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INVALID_ERROR_CODE,_Fields.API_RET_CODE,_Fields.INVALID_REASON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INVALID_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("invalidErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.API_RET_CODE, new org.apache.thrift.meta_data.FieldMetaData("apiRetCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INVALID_REASON, new org.apache.thrift.meta_data.FieldMetaData("invalidReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeAccountInvalidDescription.class, metaDataMap);
  }

  public TradeAccountInvalidDescription() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeAccountInvalidDescription(TradeAccountInvalidDescription other) {
    __isset_bitfield = other.__isset_bitfield;
    this.invalidErrorCode = other.invalidErrorCode;
    this.apiRetCode = other.apiRetCode;
    if (other.isSetInvalidReason()) {
      this.invalidReason = other.invalidReason;
    }
  }

  public TradeAccountInvalidDescription deepCopy() {
    return new TradeAccountInvalidDescription(this);
  }

  @Override
  public void clear() {
    setInvalidErrorCodeIsSet(false);
    this.invalidErrorCode = 0;
    setApiRetCodeIsSet(false);
    this.apiRetCode = 0;
    this.invalidReason = null;
  }

  public int getInvalidErrorCode() {
    return this.invalidErrorCode;
  }

  public TradeAccountInvalidDescription setInvalidErrorCode(int invalidErrorCode) {
    this.invalidErrorCode = invalidErrorCode;
    setInvalidErrorCodeIsSet(true);
    return this;
  }

  public void unsetInvalidErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID);
  }

  /** Returns true if field invalidErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID);
  }

  public void setInvalidErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INVALIDERRORCODE_ISSET_ID, value);
  }

  public int getApiRetCode() {
    return this.apiRetCode;
  }

  public TradeAccountInvalidDescription setApiRetCode(int apiRetCode) {
    this.apiRetCode = apiRetCode;
    setApiRetCodeIsSet(true);
    return this;
  }

  public void unsetApiRetCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __APIRETCODE_ISSET_ID);
  }

  /** Returns true if field apiRetCode is set (has been assigned a value) and false otherwise */
  public boolean isSetApiRetCode() {
    return EncodingUtils.testBit(__isset_bitfield, __APIRETCODE_ISSET_ID);
  }

  public void setApiRetCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __APIRETCODE_ISSET_ID, value);
  }

  public String getInvalidReason() {
    return this.invalidReason;
  }

  public TradeAccountInvalidDescription setInvalidReason(String invalidReason) {
    this.invalidReason = invalidReason;
    return this;
  }

  public void unsetInvalidReason() {
    this.invalidReason = null;
  }

  /** Returns true if field invalidReason is set (has been assigned a value) and false otherwise */
  public boolean isSetInvalidReason() {
    return this.invalidReason != null;
  }

  public void setInvalidReasonIsSet(boolean value) {
    if (!value) {
      this.invalidReason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INVALID_ERROR_CODE:
      if (value == null) {
        unsetInvalidErrorCode();
      } else {
        setInvalidErrorCode((Integer)value);
      }
      break;

    case API_RET_CODE:
      if (value == null) {
        unsetApiRetCode();
      } else {
        setApiRetCode((Integer)value);
      }
      break;

    case INVALID_REASON:
      if (value == null) {
        unsetInvalidReason();
      } else {
        setInvalidReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INVALID_ERROR_CODE:
      return Integer.valueOf(getInvalidErrorCode());

    case API_RET_CODE:
      return Integer.valueOf(getApiRetCode());

    case INVALID_REASON:
      return getInvalidReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INVALID_ERROR_CODE:
      return isSetInvalidErrorCode();
    case API_RET_CODE:
      return isSetApiRetCode();
    case INVALID_REASON:
      return isSetInvalidReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeAccountInvalidDescription)
      return this.equals((TradeAccountInvalidDescription)that);
    return false;
  }

  public boolean equals(TradeAccountInvalidDescription that) {
    if (that == null)
      return false;

    boolean this_present_invalidErrorCode = true && this.isSetInvalidErrorCode();
    boolean that_present_invalidErrorCode = true && that.isSetInvalidErrorCode();
    if (this_present_invalidErrorCode || that_present_invalidErrorCode) {
      if (!(this_present_invalidErrorCode && that_present_invalidErrorCode))
        return false;
      if (this.invalidErrorCode != that.invalidErrorCode)
        return false;
    }

    boolean this_present_apiRetCode = true && this.isSetApiRetCode();
    boolean that_present_apiRetCode = true && that.isSetApiRetCode();
    if (this_present_apiRetCode || that_present_apiRetCode) {
      if (!(this_present_apiRetCode && that_present_apiRetCode))
        return false;
      if (this.apiRetCode != that.apiRetCode)
        return false;
    }

    boolean this_present_invalidReason = true && this.isSetInvalidReason();
    boolean that_present_invalidReason = true && that.isSetInvalidReason();
    if (this_present_invalidReason || that_present_invalidReason) {
      if (!(this_present_invalidReason && that_present_invalidReason))
        return false;
      if (!this.invalidReason.equals(that.invalidReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeAccountInvalidDescription other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInvalidErrorCode()).compareTo(other.isSetInvalidErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidErrorCode, other.invalidErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetApiRetCode()).compareTo(other.isSetApiRetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApiRetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiRetCode, other.apiRetCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInvalidReason()).compareTo(other.isSetInvalidReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvalidReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.invalidReason, other.invalidReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeAccountInvalidDescription(");
    boolean first = true;

    if (isSetInvalidErrorCode()) {
      sb.append("invalidErrorCode:");
      sb.append(this.invalidErrorCode);
      first = false;
    }
    if (isSetApiRetCode()) {
      if (!first) sb.append(", ");
      sb.append("apiRetCode:");
      sb.append(this.apiRetCode);
      first = false;
    }
    if (isSetInvalidReason()) {
      if (!first) sb.append(", ");
      sb.append("invalidReason:");
      if (this.invalidReason == null) {
        sb.append("null");
      } else {
        sb.append(this.invalidReason);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeAccountInvalidDescriptionStandardSchemeFactory implements SchemeFactory {
    public TradeAccountInvalidDescriptionStandardScheme getScheme() {
      return new TradeAccountInvalidDescriptionStandardScheme();
    }
  }

  private static class TradeAccountInvalidDescriptionStandardScheme extends StandardScheme<TradeAccountInvalidDescription> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeAccountInvalidDescription struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INVALID_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.invalidErrorCode = iprot.readI32();
              struct.setInvalidErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // API_RET_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.apiRetCode = iprot.readI32();
              struct.setApiRetCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INVALID_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.invalidReason = iprot.readString();
              struct.setInvalidReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeAccountInvalidDescription struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetInvalidErrorCode()) {
        oprot.writeFieldBegin(INVALID_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.invalidErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetApiRetCode()) {
        oprot.writeFieldBegin(API_RET_CODE_FIELD_DESC);
        oprot.writeI32(struct.apiRetCode);
        oprot.writeFieldEnd();
      }
      if (struct.invalidReason != null) {
        if (struct.isSetInvalidReason()) {
          oprot.writeFieldBegin(INVALID_REASON_FIELD_DESC);
          oprot.writeString(struct.invalidReason);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeAccountInvalidDescriptionTupleSchemeFactory implements SchemeFactory {
    public TradeAccountInvalidDescriptionTupleScheme getScheme() {
      return new TradeAccountInvalidDescriptionTupleScheme();
    }
  }

  private static class TradeAccountInvalidDescriptionTupleScheme extends TupleScheme<TradeAccountInvalidDescription> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeAccountInvalidDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInvalidErrorCode()) {
        optionals.set(0);
      }
      if (struct.isSetApiRetCode()) {
        optionals.set(1);
      }
      if (struct.isSetInvalidReason()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetInvalidErrorCode()) {
        oprot.writeI32(struct.invalidErrorCode);
      }
      if (struct.isSetApiRetCode()) {
        oprot.writeI32(struct.apiRetCode);
      }
      if (struct.isSetInvalidReason()) {
        oprot.writeString(struct.invalidReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeAccountInvalidDescription struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.invalidErrorCode = iprot.readI32();
        struct.setInvalidErrorCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.apiRetCode = iprot.readI32();
        struct.setApiRetCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.invalidReason = iprot.readString();
        struct.setInvalidReasonIsSet(true);
      }
    }
  }

}

