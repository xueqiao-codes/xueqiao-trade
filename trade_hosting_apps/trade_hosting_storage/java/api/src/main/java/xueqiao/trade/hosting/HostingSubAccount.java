/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机子账户
 */
public class HostingSubAccount implements org.apache.thrift.TBase<HostingSubAccount, HostingSubAccount._Fields>, java.io.Serializable, Cloneable, Comparable<HostingSubAccount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingSubAccount");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IN_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("inAmount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField OUT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("outAmount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingSubAccountStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingSubAccountTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public String subAccountName; // optional
  public long inAmount; // optional
  public long outAmount; // optional
  public int createTimestamp; // optional
  public int lastmodifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    SUB_ACCOUNT_NAME((short)2, "subAccountName"),
    IN_AMOUNT((short)3, "inAmount"),
    OUT_AMOUNT((short)4, "outAmount"),
    CREATE_TIMESTAMP((short)8, "createTimestamp"),
    LASTMODIFY_TIMESTAMP((short)9, "lastmodifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // SUB_ACCOUNT_NAME
          return SUB_ACCOUNT_NAME;
        case 3: // IN_AMOUNT
          return IN_AMOUNT;
        case 4: // OUT_AMOUNT
          return OUT_AMOUNT;
        case 8: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 9: // LASTMODIFY_TIMESTAMP
          return LASTMODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __INAMOUNT_ISSET_ID = 1;
  private static final int __OUTAMOUNT_ISSET_ID = 2;
  private static final int __CREATETIMESTAMP_ISSET_ID = 3;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.SUB_ACCOUNT_NAME,_Fields.IN_AMOUNT,_Fields.OUT_AMOUNT,_Fields.CREATE_TIMESTAMP,_Fields.LASTMODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_NAME, new org.apache.thrift.meta_data.FieldMetaData("subAccountName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("inAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("outAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingSubAccount.class, metaDataMap);
  }

  public HostingSubAccount() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingSubAccount(HostingSubAccount other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetSubAccountName()) {
      this.subAccountName = other.subAccountName;
    }
    this.inAmount = other.inAmount;
    this.outAmount = other.outAmount;
    this.createTimestamp = other.createTimestamp;
    this.lastmodifyTimestamp = other.lastmodifyTimestamp;
  }

  public HostingSubAccount deepCopy() {
    return new HostingSubAccount(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.subAccountName = null;
    setInAmountIsSet(false);
    this.inAmount = 0;
    setOutAmountIsSet(false);
    this.outAmount = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastmodifyTimestampIsSet(false);
    this.lastmodifyTimestamp = 0;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingSubAccount setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public String getSubAccountName() {
    return this.subAccountName;
  }

  public HostingSubAccount setSubAccountName(String subAccountName) {
    this.subAccountName = subAccountName;
    return this;
  }

  public void unsetSubAccountName() {
    this.subAccountName = null;
  }

  /** Returns true if field subAccountName is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountName() {
    return this.subAccountName != null;
  }

  public void setSubAccountNameIsSet(boolean value) {
    if (!value) {
      this.subAccountName = null;
    }
  }

  public long getInAmount() {
    return this.inAmount;
  }

  public HostingSubAccount setInAmount(long inAmount) {
    this.inAmount = inAmount;
    setInAmountIsSet(true);
    return this;
  }

  public void unsetInAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INAMOUNT_ISSET_ID);
  }

  /** Returns true if field inAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetInAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __INAMOUNT_ISSET_ID);
  }

  public void setInAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INAMOUNT_ISSET_ID, value);
  }

  public long getOutAmount() {
    return this.outAmount;
  }

  public HostingSubAccount setOutAmount(long outAmount) {
    this.outAmount = outAmount;
    setOutAmountIsSet(true);
    return this;
  }

  public void unsetOutAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTAMOUNT_ISSET_ID);
  }

  /** Returns true if field outAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetOutAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTAMOUNT_ISSET_ID);
  }

  public void setOutAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTAMOUNT_ISSET_ID, value);
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public HostingSubAccount setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastmodifyTimestamp() {
    return this.lastmodifyTimestamp;
  }

  public HostingSubAccount setLastmodifyTimestamp(int lastmodifyTimestamp) {
    this.lastmodifyTimestamp = lastmodifyTimestamp;
    setLastmodifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastmodifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case SUB_ACCOUNT_NAME:
      if (value == null) {
        unsetSubAccountName();
      } else {
        setSubAccountName((String)value);
      }
      break;

    case IN_AMOUNT:
      if (value == null) {
        unsetInAmount();
      } else {
        setInAmount((Long)value);
      }
      break;

    case OUT_AMOUNT:
      if (value == null) {
        unsetOutAmount();
      } else {
        setOutAmount((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastmodifyTimestamp();
      } else {
        setLastmodifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case SUB_ACCOUNT_NAME:
      return getSubAccountName();

    case IN_AMOUNT:
      return Long.valueOf(getInAmount());

    case OUT_AMOUNT:
      return Long.valueOf(getOutAmount());

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LASTMODIFY_TIMESTAMP:
      return Integer.valueOf(getLastmodifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case SUB_ACCOUNT_NAME:
      return isSetSubAccountName();
    case IN_AMOUNT:
      return isSetInAmount();
    case OUT_AMOUNT:
      return isSetOutAmount();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LASTMODIFY_TIMESTAMP:
      return isSetLastmodifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingSubAccount)
      return this.equals((HostingSubAccount)that);
    return false;
  }

  public boolean equals(HostingSubAccount that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_subAccountName = true && this.isSetSubAccountName();
    boolean that_present_subAccountName = true && that.isSetSubAccountName();
    if (this_present_subAccountName || that_present_subAccountName) {
      if (!(this_present_subAccountName && that_present_subAccountName))
        return false;
      if (!this.subAccountName.equals(that.subAccountName))
        return false;
    }

    boolean this_present_inAmount = true && this.isSetInAmount();
    boolean that_present_inAmount = true && that.isSetInAmount();
    if (this_present_inAmount || that_present_inAmount) {
      if (!(this_present_inAmount && that_present_inAmount))
        return false;
      if (this.inAmount != that.inAmount)
        return false;
    }

    boolean this_present_outAmount = true && this.isSetOutAmount();
    boolean that_present_outAmount = true && that.isSetOutAmount();
    if (this_present_outAmount || that_present_outAmount) {
      if (!(this_present_outAmount && that_present_outAmount))
        return false;
      if (this.outAmount != that.outAmount)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastmodifyTimestamp = true && this.isSetLastmodifyTimestamp();
    boolean that_present_lastmodifyTimestamp = true && that.isSetLastmodifyTimestamp();
    if (this_present_lastmodifyTimestamp || that_present_lastmodifyTimestamp) {
      if (!(this_present_lastmodifyTimestamp && that_present_lastmodifyTimestamp))
        return false;
      if (this.lastmodifyTimestamp != that.lastmodifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingSubAccount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountName()).compareTo(other.isSetSubAccountName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountName, other.subAccountName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInAmount()).compareTo(other.isSetInAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inAmount, other.inAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutAmount()).compareTo(other.isSetOutAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outAmount, other.outAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestamp()).compareTo(other.isSetLastmodifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestamp, other.lastmodifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingSubAccount(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetSubAccountName()) {
      if (!first) sb.append(", ");
      sb.append("subAccountName:");
      if (this.subAccountName == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountName);
      }
      first = false;
    }
    if (isSetInAmount()) {
      if (!first) sb.append(", ");
      sb.append("inAmount:");
      sb.append(this.inAmount);
      first = false;
    }
    if (isSetOutAmount()) {
      if (!first) sb.append(", ");
      sb.append("outAmount:");
      sb.append(this.outAmount);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastmodifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestamp:");
      sb.append(this.lastmodifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingSubAccountStandardSchemeFactory implements SchemeFactory {
    public HostingSubAccountStandardScheme getScheme() {
      return new HostingSubAccountStandardScheme();
    }
  }

  private static class HostingSubAccountStandardScheme extends StandardScheme<HostingSubAccount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingSubAccount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subAccountName = iprot.readString();
              struct.setSubAccountNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IN_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inAmount = iprot.readI64();
              struct.setInAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outAmount = iprot.readI64();
              struct.setOutAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LASTMODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastmodifyTimestamp = iprot.readI32();
              struct.setLastmodifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingSubAccount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.subAccountName != null) {
        if (struct.isSetSubAccountName()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_NAME_FIELD_DESC);
          oprot.writeString(struct.subAccountName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInAmount()) {
        oprot.writeFieldBegin(IN_AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.inAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutAmount()) {
        oprot.writeFieldBegin(OUT_AMOUNT_FIELD_DESC);
        oprot.writeI64(struct.outAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastmodifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingSubAccountTupleSchemeFactory implements SchemeFactory {
    public HostingSubAccountTupleScheme getScheme() {
      return new HostingSubAccountTupleScheme();
    }
  }

  private static class HostingSubAccountTupleScheme extends TupleScheme<HostingSubAccount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingSubAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountName()) {
        optionals.set(1);
      }
      if (struct.isSetInAmount()) {
        optionals.set(2);
      }
      if (struct.isSetOutAmount()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetSubAccountName()) {
        oprot.writeString(struct.subAccountName);
      }
      if (struct.isSetInAmount()) {
        oprot.writeI64(struct.inAmount);
      }
      if (struct.isSetOutAmount()) {
        oprot.writeI64(struct.outAmount);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastmodifyTimestamp()) {
        oprot.writeI32(struct.lastmodifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingSubAccount struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountName = iprot.readString();
        struct.setSubAccountNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inAmount = iprot.readI64();
        struct.setInAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.outAmount = iprot.readI64();
        struct.setOutAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastmodifyTimestamp = iprot.readI32();
        struct.setLastmodifyTimestampIsSet(true);
      }
    }
  }

}

