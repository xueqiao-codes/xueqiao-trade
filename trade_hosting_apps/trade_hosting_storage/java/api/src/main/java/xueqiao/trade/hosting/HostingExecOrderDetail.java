/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrderDetail implements org.apache.thrift.TBase<HostingExecOrderDetail, HostingExecOrderDetail._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrderDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrderDetail");

  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDirection", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_CREATOR_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderCreatorType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderMode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EFFECTIVE_DATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("effectiveDateTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("condition", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CONDITION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderDetailTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingExecOrderType
   */
  public HostingExecOrderType orderType; // optional
  public double limitPrice; // optional
  public int quantity; // optional
  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecOrderTradeDirection tradeDirection; // optional
  /**
   * 
   * @see HostingExecOrderCreatorType
   */
  public HostingExecOrderCreatorType orderCreatorType; // optional
  /**
   * 
   * @see HostingExecOrderMode
   */
  public HostingExecOrderMode orderMode; // optional
  public String effectiveDateTime; // optional
  /**
   * 
   * @see HostingExecOrderCondition
   */
  public HostingExecOrderCondition condition; // optional
  public double conditionPrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingExecOrderType
     */
    ORDER_TYPE((short)1, "orderType"),
    LIMIT_PRICE((short)2, "limitPrice"),
    QUANTITY((short)3, "quantity"),
    /**
     * 
     * @see HostingExecOrderTradeDirection
     */
    TRADE_DIRECTION((short)4, "tradeDirection"),
    /**
     * 
     * @see HostingExecOrderCreatorType
     */
    ORDER_CREATOR_TYPE((short)5, "orderCreatorType"),
    /**
     * 
     * @see HostingExecOrderMode
     */
    ORDER_MODE((short)6, "orderMode"),
    EFFECTIVE_DATE_TIME((short)7, "effectiveDateTime"),
    /**
     * 
     * @see HostingExecOrderCondition
     */
    CONDITION((short)8, "condition"),
    CONDITION_PRICE((short)9, "conditionPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_TYPE
          return ORDER_TYPE;
        case 2: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // TRADE_DIRECTION
          return TRADE_DIRECTION;
        case 5: // ORDER_CREATOR_TYPE
          return ORDER_CREATOR_TYPE;
        case 6: // ORDER_MODE
          return ORDER_MODE;
        case 7: // EFFECTIVE_DATE_TIME
          return EFFECTIVE_DATE_TIME;
        case 8: // CONDITION
          return CONDITION;
        case 9: // CONDITION_PRICE
          return CONDITION_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITPRICE_ISSET_ID = 0;
  private static final int __QUANTITY_ISSET_ID = 1;
  private static final int __CONDITIONPRICE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_TYPE,_Fields.LIMIT_PRICE,_Fields.QUANTITY,_Fields.TRADE_DIRECTION,_Fields.ORDER_CREATOR_TYPE,_Fields.ORDER_MODE,_Fields.EFFECTIVE_DATE_TIME,_Fields.CONDITION,_Fields.CONDITION_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderType.class)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("tradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderTradeDirection.class)));
    tmpMap.put(_Fields.ORDER_CREATOR_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderCreatorType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderCreatorType.class)));
    tmpMap.put(_Fields.ORDER_MODE, new org.apache.thrift.meta_data.FieldMetaData("orderMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderMode.class)));
    tmpMap.put(_Fields.EFFECTIVE_DATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("effectiveDateTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONDITION, new org.apache.thrift.meta_data.FieldMetaData("condition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderCondition.class)));
    tmpMap.put(_Fields.CONDITION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("conditionPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrderDetail.class, metaDataMap);
  }

  public HostingExecOrderDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrderDetail(HostingExecOrderDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    this.limitPrice = other.limitPrice;
    this.quantity = other.quantity;
    if (other.isSetTradeDirection()) {
      this.tradeDirection = other.tradeDirection;
    }
    if (other.isSetOrderCreatorType()) {
      this.orderCreatorType = other.orderCreatorType;
    }
    if (other.isSetOrderMode()) {
      this.orderMode = other.orderMode;
    }
    if (other.isSetEffectiveDateTime()) {
      this.effectiveDateTime = other.effectiveDateTime;
    }
    if (other.isSetCondition()) {
      this.condition = other.condition;
    }
    this.conditionPrice = other.conditionPrice;
  }

  public HostingExecOrderDetail deepCopy() {
    return new HostingExecOrderDetail(this);
  }

  @Override
  public void clear() {
    this.orderType = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.tradeDirection = null;
    this.orderCreatorType = null;
    this.orderMode = null;
    this.effectiveDateTime = null;
    this.condition = null;
    setConditionPriceIsSet(false);
    this.conditionPrice = 0.0;
  }

  /**
   * 
   * @see HostingExecOrderType
   */
  public HostingExecOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see HostingExecOrderType
   */
  public HostingExecOrderDetail setOrderType(HostingExecOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public HostingExecOrderDetail setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getQuantity() {
    return this.quantity;
  }

  public HostingExecOrderDetail setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecOrderTradeDirection getTradeDirection() {
    return this.tradeDirection;
  }

  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecOrderDetail setTradeDirection(HostingExecOrderTradeDirection tradeDirection) {
    this.tradeDirection = tradeDirection;
    return this;
  }

  public void unsetTradeDirection() {
    this.tradeDirection = null;
  }

  /** Returns true if field tradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDirection() {
    return this.tradeDirection != null;
  }

  public void setTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.tradeDirection = null;
    }
  }

  /**
   * 
   * @see HostingExecOrderCreatorType
   */
  public HostingExecOrderCreatorType getOrderCreatorType() {
    return this.orderCreatorType;
  }

  /**
   * 
   * @see HostingExecOrderCreatorType
   */
  public HostingExecOrderDetail setOrderCreatorType(HostingExecOrderCreatorType orderCreatorType) {
    this.orderCreatorType = orderCreatorType;
    return this;
  }

  public void unsetOrderCreatorType() {
    this.orderCreatorType = null;
  }

  /** Returns true if field orderCreatorType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderCreatorType() {
    return this.orderCreatorType != null;
  }

  public void setOrderCreatorTypeIsSet(boolean value) {
    if (!value) {
      this.orderCreatorType = null;
    }
  }

  /**
   * 
   * @see HostingExecOrderMode
   */
  public HostingExecOrderMode getOrderMode() {
    return this.orderMode;
  }

  /**
   * 
   * @see HostingExecOrderMode
   */
  public HostingExecOrderDetail setOrderMode(HostingExecOrderMode orderMode) {
    this.orderMode = orderMode;
    return this;
  }

  public void unsetOrderMode() {
    this.orderMode = null;
  }

  /** Returns true if field orderMode is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderMode() {
    return this.orderMode != null;
  }

  public void setOrderModeIsSet(boolean value) {
    if (!value) {
      this.orderMode = null;
    }
  }

  public String getEffectiveDateTime() {
    return this.effectiveDateTime;
  }

  public HostingExecOrderDetail setEffectiveDateTime(String effectiveDateTime) {
    this.effectiveDateTime = effectiveDateTime;
    return this;
  }

  public void unsetEffectiveDateTime() {
    this.effectiveDateTime = null;
  }

  /** Returns true if field effectiveDateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectiveDateTime() {
    return this.effectiveDateTime != null;
  }

  public void setEffectiveDateTimeIsSet(boolean value) {
    if (!value) {
      this.effectiveDateTime = null;
    }
  }

  /**
   * 
   * @see HostingExecOrderCondition
   */
  public HostingExecOrderCondition getCondition() {
    return this.condition;
  }

  /**
   * 
   * @see HostingExecOrderCondition
   */
  public HostingExecOrderDetail setCondition(HostingExecOrderCondition condition) {
    this.condition = condition;
    return this;
  }

  public void unsetCondition() {
    this.condition = null;
  }

  /** Returns true if field condition is set (has been assigned a value) and false otherwise */
  public boolean isSetCondition() {
    return this.condition != null;
  }

  public void setConditionIsSet(boolean value) {
    if (!value) {
      this.condition = null;
    }
  }

  public double getConditionPrice() {
    return this.conditionPrice;
  }

  public HostingExecOrderDetail setConditionPrice(double conditionPrice) {
    this.conditionPrice = conditionPrice;
    setConditionPriceIsSet(true);
    return this;
  }

  public void unsetConditionPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID);
  }

  /** Returns true if field conditionPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID);
  }

  public void setConditionPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((HostingExecOrderType)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case TRADE_DIRECTION:
      if (value == null) {
        unsetTradeDirection();
      } else {
        setTradeDirection((HostingExecOrderTradeDirection)value);
      }
      break;

    case ORDER_CREATOR_TYPE:
      if (value == null) {
        unsetOrderCreatorType();
      } else {
        setOrderCreatorType((HostingExecOrderCreatorType)value);
      }
      break;

    case ORDER_MODE:
      if (value == null) {
        unsetOrderMode();
      } else {
        setOrderMode((HostingExecOrderMode)value);
      }
      break;

    case EFFECTIVE_DATE_TIME:
      if (value == null) {
        unsetEffectiveDateTime();
      } else {
        setEffectiveDateTime((String)value);
      }
      break;

    case CONDITION:
      if (value == null) {
        unsetCondition();
      } else {
        setCondition((HostingExecOrderCondition)value);
      }
      break;

    case CONDITION_PRICE:
      if (value == null) {
        unsetConditionPrice();
      } else {
        setConditionPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_TYPE:
      return getOrderType();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case TRADE_DIRECTION:
      return getTradeDirection();

    case ORDER_CREATOR_TYPE:
      return getOrderCreatorType();

    case ORDER_MODE:
      return getOrderMode();

    case EFFECTIVE_DATE_TIME:
      return getEffectiveDateTime();

    case CONDITION:
      return getCondition();

    case CONDITION_PRICE:
      return Double.valueOf(getConditionPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_TYPE:
      return isSetOrderType();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case QUANTITY:
      return isSetQuantity();
    case TRADE_DIRECTION:
      return isSetTradeDirection();
    case ORDER_CREATOR_TYPE:
      return isSetOrderCreatorType();
    case ORDER_MODE:
      return isSetOrderMode();
    case EFFECTIVE_DATE_TIME:
      return isSetEffectiveDateTime();
    case CONDITION:
      return isSetCondition();
    case CONDITION_PRICE:
      return isSetConditionPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrderDetail)
      return this.equals((HostingExecOrderDetail)that);
    return false;
  }

  public boolean equals(HostingExecOrderDetail that) {
    if (that == null)
      return false;

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_tradeDirection = true && this.isSetTradeDirection();
    boolean that_present_tradeDirection = true && that.isSetTradeDirection();
    if (this_present_tradeDirection || that_present_tradeDirection) {
      if (!(this_present_tradeDirection && that_present_tradeDirection))
        return false;
      if (!this.tradeDirection.equals(that.tradeDirection))
        return false;
    }

    boolean this_present_orderCreatorType = true && this.isSetOrderCreatorType();
    boolean that_present_orderCreatorType = true && that.isSetOrderCreatorType();
    if (this_present_orderCreatorType || that_present_orderCreatorType) {
      if (!(this_present_orderCreatorType && that_present_orderCreatorType))
        return false;
      if (!this.orderCreatorType.equals(that.orderCreatorType))
        return false;
    }

    boolean this_present_orderMode = true && this.isSetOrderMode();
    boolean that_present_orderMode = true && that.isSetOrderMode();
    if (this_present_orderMode || that_present_orderMode) {
      if (!(this_present_orderMode && that_present_orderMode))
        return false;
      if (!this.orderMode.equals(that.orderMode))
        return false;
    }

    boolean this_present_effectiveDateTime = true && this.isSetEffectiveDateTime();
    boolean that_present_effectiveDateTime = true && that.isSetEffectiveDateTime();
    if (this_present_effectiveDateTime || that_present_effectiveDateTime) {
      if (!(this_present_effectiveDateTime && that_present_effectiveDateTime))
        return false;
      if (!this.effectiveDateTime.equals(that.effectiveDateTime))
        return false;
    }

    boolean this_present_condition = true && this.isSetCondition();
    boolean that_present_condition = true && that.isSetCondition();
    if (this_present_condition || that_present_condition) {
      if (!(this_present_condition && that_present_condition))
        return false;
      if (!this.condition.equals(that.condition))
        return false;
    }

    boolean this_present_conditionPrice = true && this.isSetConditionPrice();
    boolean that_present_conditionPrice = true && that.isSetConditionPrice();
    if (this_present_conditionPrice || that_present_conditionPrice) {
      if (!(this_present_conditionPrice && that_present_conditionPrice))
        return false;
      if (this.conditionPrice != that.conditionPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrderDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDirection()).compareTo(other.isSetTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDirection, other.tradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderCreatorType()).compareTo(other.isSetOrderCreatorType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderCreatorType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderCreatorType, other.orderCreatorType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderMode()).compareTo(other.isSetOrderMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderMode, other.orderMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectiveDateTime()).compareTo(other.isSetEffectiveDateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectiveDateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectiveDateTime, other.effectiveDateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCondition()).compareTo(other.isSetCondition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCondition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.condition, other.condition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionPrice()).compareTo(other.isSetConditionPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionPrice, other.conditionPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrderDetail(");
    boolean first = true;

    if (isSetOrderType()) {
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("tradeDirection:");
      if (this.tradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDirection);
      }
      first = false;
    }
    if (isSetOrderCreatorType()) {
      if (!first) sb.append(", ");
      sb.append("orderCreatorType:");
      if (this.orderCreatorType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderCreatorType);
      }
      first = false;
    }
    if (isSetOrderMode()) {
      if (!first) sb.append(", ");
      sb.append("orderMode:");
      if (this.orderMode == null) {
        sb.append("null");
      } else {
        sb.append(this.orderMode);
      }
      first = false;
    }
    if (isSetEffectiveDateTime()) {
      if (!first) sb.append(", ");
      sb.append("effectiveDateTime:");
      if (this.effectiveDateTime == null) {
        sb.append("null");
      } else {
        sb.append(this.effectiveDateTime);
      }
      first = false;
    }
    if (isSetCondition()) {
      if (!first) sb.append(", ");
      sb.append("condition:");
      if (this.condition == null) {
        sb.append("null");
      } else {
        sb.append(this.condition);
      }
      first = false;
    }
    if (isSetConditionPrice()) {
      if (!first) sb.append(", ");
      sb.append("conditionPrice:");
      sb.append(this.conditionPrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderDetailStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderDetailStandardScheme getScheme() {
      return new HostingExecOrderDetailStandardScheme();
    }
  }

  private static class HostingExecOrderDetailStandardScheme extends StandardScheme<HostingExecOrderDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrderDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = HostingExecOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeDirection = HostingExecOrderTradeDirection.findByValue(iprot.readI32());
              struct.setTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_CREATOR_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderCreatorType = HostingExecOrderCreatorType.findByValue(iprot.readI32());
              struct.setOrderCreatorTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderMode = HostingExecOrderMode.findByValue(iprot.readI32());
              struct.setOrderModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EFFECTIVE_DATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.effectiveDateTime = iprot.readString();
              struct.setEffectiveDateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONDITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.condition = HostingExecOrderCondition.findByValue(iprot.readI32());
              struct.setConditionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONDITION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.conditionPrice = iprot.readDouble();
              struct.setConditionPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrderDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDirection != null) {
        if (struct.isSetTradeDirection()) {
          oprot.writeFieldBegin(TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.tradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderCreatorType != null) {
        if (struct.isSetOrderCreatorType()) {
          oprot.writeFieldBegin(ORDER_CREATOR_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderCreatorType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderMode != null) {
        if (struct.isSetOrderMode()) {
          oprot.writeFieldBegin(ORDER_MODE_FIELD_DESC);
          oprot.writeI32(struct.orderMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.effectiveDateTime != null) {
        if (struct.isSetEffectiveDateTime()) {
          oprot.writeFieldBegin(EFFECTIVE_DATE_TIME_FIELD_DESC);
          oprot.writeString(struct.effectiveDateTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.condition != null) {
        if (struct.isSetCondition()) {
          oprot.writeFieldBegin(CONDITION_FIELD_DESC);
          oprot.writeI32(struct.condition.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConditionPrice()) {
        oprot.writeFieldBegin(CONDITION_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.conditionPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderDetailTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderDetailTupleScheme getScheme() {
      return new HostingExecOrderDetailTupleScheme();
    }
  }

  private static class HostingExecOrderDetailTupleScheme extends TupleScheme<HostingExecOrderDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderType()) {
        optionals.set(0);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetTradeDirection()) {
        optionals.set(3);
      }
      if (struct.isSetOrderCreatorType()) {
        optionals.set(4);
      }
      if (struct.isSetOrderMode()) {
        optionals.set(5);
      }
      if (struct.isSetEffectiveDateTime()) {
        optionals.set(6);
      }
      if (struct.isSetCondition()) {
        optionals.set(7);
      }
      if (struct.isSetConditionPrice()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetTradeDirection()) {
        oprot.writeI32(struct.tradeDirection.getValue());
      }
      if (struct.isSetOrderCreatorType()) {
        oprot.writeI32(struct.orderCreatorType.getValue());
      }
      if (struct.isSetOrderMode()) {
        oprot.writeI32(struct.orderMode.getValue());
      }
      if (struct.isSetEffectiveDateTime()) {
        oprot.writeString(struct.effectiveDateTime);
      }
      if (struct.isSetCondition()) {
        oprot.writeI32(struct.condition.getValue());
      }
      if (struct.isSetConditionPrice()) {
        oprot.writeDouble(struct.conditionPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.orderType = HostingExecOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradeDirection = HostingExecOrderTradeDirection.findByValue(iprot.readI32());
        struct.setTradeDirectionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderCreatorType = HostingExecOrderCreatorType.findByValue(iprot.readI32());
        struct.setOrderCreatorTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderMode = HostingExecOrderMode.findByValue(iprot.readI32());
        struct.setOrderModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.effectiveDateTime = iprot.readString();
        struct.setEffectiveDateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.condition = HostingExecOrderCondition.findByValue(iprot.readI32());
        struct.setConditionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.conditionPrice = iprot.readDouble();
        struct.setConditionPriceIsSet(true);
      }
    }
  }

}

