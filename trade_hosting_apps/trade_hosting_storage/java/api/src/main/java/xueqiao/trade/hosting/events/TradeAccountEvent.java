/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.events;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeAccountEvent implements org.apache.thrift.TBase<TradeAccountEvent, TradeAccountEvent._Fields>, java.io.Serializable, Cloneable, Comparable<TradeAccountEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeAccountEvent");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DELETED_TRADE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("deletedTradeAccount", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeAccountEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeAccountEventTupleSchemeFactory());
  }

  /**
   * 
   * @see TradeAccountEventType
   */
  public TradeAccountEventType type; // optional
  public long tradeAccountId; // optional
  public xueqiao.trade.hosting.HostingTradeAccount deletedTradeAccount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TradeAccountEventType
     */
    TYPE((short)1, "type"),
    TRADE_ACCOUNT_ID((short)2, "tradeAccountId"),
    DELETED_TRADE_ACCOUNT((short)3, "deletedTradeAccount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 3: // DELETED_TRADE_ACCOUNT
          return DELETED_TRADE_ACCOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TYPE,_Fields.TRADE_ACCOUNT_ID,_Fields.DELETED_TRADE_ACCOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TradeAccountEventType.class)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELETED_TRADE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("deletedTradeAccount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingTradeAccount.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeAccountEvent.class, metaDataMap);
  }

  public TradeAccountEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeAccountEvent(TradeAccountEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.tradeAccountId = other.tradeAccountId;
    if (other.isSetDeletedTradeAccount()) {
      this.deletedTradeAccount = new xueqiao.trade.hosting.HostingTradeAccount(other.deletedTradeAccount);
    }
  }

  public TradeAccountEvent deepCopy() {
    return new TradeAccountEvent(this);
  }

  @Override
  public void clear() {
    this.type = null;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    this.deletedTradeAccount = null;
  }

  /**
   * 
   * @see TradeAccountEventType
   */
  public TradeAccountEventType getType() {
    return this.type;
  }

  /**
   * 
   * @see TradeAccountEventType
   */
  public TradeAccountEvent setType(TradeAccountEventType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public TradeAccountEvent setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public xueqiao.trade.hosting.HostingTradeAccount getDeletedTradeAccount() {
    return this.deletedTradeAccount;
  }

  public TradeAccountEvent setDeletedTradeAccount(xueqiao.trade.hosting.HostingTradeAccount deletedTradeAccount) {
    this.deletedTradeAccount = deletedTradeAccount;
    return this;
  }

  public void unsetDeletedTradeAccount() {
    this.deletedTradeAccount = null;
  }

  /** Returns true if field deletedTradeAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetDeletedTradeAccount() {
    return this.deletedTradeAccount != null;
  }

  public void setDeletedTradeAccountIsSet(boolean value) {
    if (!value) {
      this.deletedTradeAccount = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((TradeAccountEventType)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case DELETED_TRADE_ACCOUNT:
      if (value == null) {
        unsetDeletedTradeAccount();
      } else {
        setDeletedTradeAccount((xueqiao.trade.hosting.HostingTradeAccount)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case DELETED_TRADE_ACCOUNT:
      return getDeletedTradeAccount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case DELETED_TRADE_ACCOUNT:
      return isSetDeletedTradeAccount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeAccountEvent)
      return this.equals((TradeAccountEvent)that);
    return false;
  }

  public boolean equals(TradeAccountEvent that) {
    if (that == null)
      return false;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_deletedTradeAccount = true && this.isSetDeletedTradeAccount();
    boolean that_present_deletedTradeAccount = true && that.isSetDeletedTradeAccount();
    if (this_present_deletedTradeAccount || that_present_deletedTradeAccount) {
      if (!(this_present_deletedTradeAccount && that_present_deletedTradeAccount))
        return false;
      if (!this.deletedTradeAccount.equals(that.deletedTradeAccount))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeAccountEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeletedTradeAccount()).compareTo(other.isSetDeletedTradeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeletedTradeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deletedTradeAccount, other.deletedTradeAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeAccountEvent(");
    boolean first = true;

    if (isSetType()) {
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetDeletedTradeAccount()) {
      if (!first) sb.append(", ");
      sb.append("deletedTradeAccount:");
      if (this.deletedTradeAccount == null) {
        sb.append("null");
      } else {
        sb.append(this.deletedTradeAccount);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (deletedTradeAccount != null) {
      deletedTradeAccount.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeAccountEventStandardSchemeFactory implements SchemeFactory {
    public TradeAccountEventStandardScheme getScheme() {
      return new TradeAccountEventStandardScheme();
    }
  }

  private static class TradeAccountEventStandardScheme extends StandardScheme<TradeAccountEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeAccountEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = TradeAccountEventType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DELETED_TRADE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.deletedTradeAccount = new xueqiao.trade.hosting.HostingTradeAccount();
              struct.deletedTradeAccount.read(iprot);
              struct.setDeletedTradeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeAccountEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.deletedTradeAccount != null) {
        if (struct.isSetDeletedTradeAccount()) {
          oprot.writeFieldBegin(DELETED_TRADE_ACCOUNT_FIELD_DESC);
          struct.deletedTradeAccount.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeAccountEventTupleSchemeFactory implements SchemeFactory {
    public TradeAccountEventTupleScheme getScheme() {
      return new TradeAccountEventTupleScheme();
    }
  }

  private static class TradeAccountEventTupleScheme extends TupleScheme<TradeAccountEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeAccountEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetDeletedTradeAccount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetDeletedTradeAccount()) {
        struct.deletedTradeAccount.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeAccountEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.type = TradeAccountEventType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deletedTradeAccount = new xueqiao.trade.hosting.HostingTradeAccount();
        struct.deletedTradeAccount.read(iprot);
        struct.setDeletedTradeAccountIsSet(true);
      }
    }
  }

}

