/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecTrade implements org.apache.thrift.TBase<HostingExecTrade, HostingExecTrade._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecTrade> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecTrade");

  private static final org.apache.thrift.protocol.TField EXEC_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ACCOUNT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("accountSummary", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegIds", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_PRICES_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegPrices", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField ORDER_TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTradeDirection", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_TRADE_DIRECTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegTradeDirections", org.apache.thrift.protocol.TType.LIST, (short)14);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_CONTRACT_SUMMARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegContractSummaries", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_VOLUMES_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegVolumes", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_LEG_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeLegCount", org.apache.thrift.protocol.TType.I32, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecTradeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecTradeTupleSchemeFactory());
  }

  public long execTradeId; // optional
  public long execOrderId; // optional
  public int subUserId; // optional
  public long subAccountId; // optional
  public HostingExecOrderContractSummary contractSummary; // optional
  public HostingExecOrderTradeAccountSummary accountSummary; // optional
  public List<Long> relatedTradeLegIds; // optional
  public double tradePrice; // optional
  public int tradeVolume; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public List<Double> relatedTradeLegPrices; // optional
  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecOrderTradeDirection orderTradeDirection; // optional
  public List<HostingExecTradeDirection> relatedTradeLegTradeDirections; // optional
  public List<HostingExecOrderLegContractSummary> relatedTradeLegContractSummaries; // optional
  public List<Integer> relatedTradeLegVolumes; // optional
  public int relatedTradeLegCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_TRADE_ID((short)1, "execTradeId"),
    EXEC_ORDER_ID((short)2, "execOrderId"),
    SUB_USER_ID((short)3, "subUserId"),
    SUB_ACCOUNT_ID((short)4, "subAccountId"),
    CONTRACT_SUMMARY((short)5, "contractSummary"),
    ACCOUNT_SUMMARY((short)6, "accountSummary"),
    RELATED_TRADE_LEG_IDS((short)7, "relatedTradeLegIds"),
    TRADE_PRICE((short)8, "tradePrice"),
    TRADE_VOLUME((short)9, "tradeVolume"),
    CREATE_TIMESTAMP_MS((short)10, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)11, "lastmodifyTimestampMs"),
    RELATED_TRADE_LEG_PRICES((short)12, "relatedTradeLegPrices"),
    /**
     * 
     * @see HostingExecOrderTradeDirection
     */
    ORDER_TRADE_DIRECTION((short)13, "orderTradeDirection"),
    RELATED_TRADE_LEG_TRADE_DIRECTIONS((short)14, "relatedTradeLegTradeDirections"),
    RELATED_TRADE_LEG_CONTRACT_SUMMARIES((short)15, "relatedTradeLegContractSummaries"),
    RELATED_TRADE_LEG_VOLUMES((short)16, "relatedTradeLegVolumes"),
    RELATED_TRADE_LEG_COUNT((short)17, "relatedTradeLegCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_TRADE_ID
          return EXEC_TRADE_ID;
        case 2: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 3: // SUB_USER_ID
          return SUB_USER_ID;
        case 4: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 5: // CONTRACT_SUMMARY
          return CONTRACT_SUMMARY;
        case 6: // ACCOUNT_SUMMARY
          return ACCOUNT_SUMMARY;
        case 7: // RELATED_TRADE_LEG_IDS
          return RELATED_TRADE_LEG_IDS;
        case 8: // TRADE_PRICE
          return TRADE_PRICE;
        case 9: // TRADE_VOLUME
          return TRADE_VOLUME;
        case 10: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 11: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 12: // RELATED_TRADE_LEG_PRICES
          return RELATED_TRADE_LEG_PRICES;
        case 13: // ORDER_TRADE_DIRECTION
          return ORDER_TRADE_DIRECTION;
        case 14: // RELATED_TRADE_LEG_TRADE_DIRECTIONS
          return RELATED_TRADE_LEG_TRADE_DIRECTIONS;
        case 15: // RELATED_TRADE_LEG_CONTRACT_SUMMARIES
          return RELATED_TRADE_LEG_CONTRACT_SUMMARIES;
        case 16: // RELATED_TRADE_LEG_VOLUMES
          return RELATED_TRADE_LEG_VOLUMES;
        case 17: // RELATED_TRADE_LEG_COUNT
          return RELATED_TRADE_LEG_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECTRADEID_ISSET_ID = 0;
  private static final int __EXECORDERID_ISSET_ID = 1;
  private static final int __SUBUSERID_ISSET_ID = 2;
  private static final int __SUBACCOUNTID_ISSET_ID = 3;
  private static final int __TRADEPRICE_ISSET_ID = 4;
  private static final int __TRADEVOLUME_ISSET_ID = 5;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 7;
  private static final int __RELATEDTRADELEGCOUNT_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_TRADE_ID,_Fields.EXEC_ORDER_ID,_Fields.SUB_USER_ID,_Fields.SUB_ACCOUNT_ID,_Fields.CONTRACT_SUMMARY,_Fields.ACCOUNT_SUMMARY,_Fields.RELATED_TRADE_LEG_IDS,_Fields.TRADE_PRICE,_Fields.TRADE_VOLUME,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.RELATED_TRADE_LEG_PRICES,_Fields.ORDER_TRADE_DIRECTION,_Fields.RELATED_TRADE_LEG_TRADE_DIRECTIONS,_Fields.RELATED_TRADE_LEG_CONTRACT_SUMMARIES,_Fields.RELATED_TRADE_LEG_VOLUMES,_Fields.RELATED_TRADE_LEG_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("execTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("contractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderContractSummary.class)));
    tmpMap.put(_Fields.ACCOUNT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("accountSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderTradeAccountSummary.class)));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_IDS, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_PRICES, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegPrices", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ORDER_TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("orderTradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecOrderTradeDirection.class)));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_TRADE_DIRECTIONS, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegTradeDirections", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingExecTradeDirection.class))));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_CONTRACT_SUMMARIES, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegContractSummaries", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderLegContractSummary.class))));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_VOLUMES, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegVolumes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.RELATED_TRADE_LEG_COUNT, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeLegCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecTrade.class, metaDataMap);
  }

  public HostingExecTrade() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecTrade(HostingExecTrade other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execTradeId = other.execTradeId;
    this.execOrderId = other.execOrderId;
    this.subUserId = other.subUserId;
    this.subAccountId = other.subAccountId;
    if (other.isSetContractSummary()) {
      this.contractSummary = new HostingExecOrderContractSummary(other.contractSummary);
    }
    if (other.isSetAccountSummary()) {
      this.accountSummary = new HostingExecOrderTradeAccountSummary(other.accountSummary);
    }
    if (other.isSetRelatedTradeLegIds()) {
      List<Long> __this__relatedTradeLegIds = new ArrayList<Long>(other.relatedTradeLegIds);
      this.relatedTradeLegIds = __this__relatedTradeLegIds;
    }
    this.tradePrice = other.tradePrice;
    this.tradeVolume = other.tradeVolume;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    if (other.isSetRelatedTradeLegPrices()) {
      List<Double> __this__relatedTradeLegPrices = new ArrayList<Double>(other.relatedTradeLegPrices);
      this.relatedTradeLegPrices = __this__relatedTradeLegPrices;
    }
    if (other.isSetOrderTradeDirection()) {
      this.orderTradeDirection = other.orderTradeDirection;
    }
    if (other.isSetRelatedTradeLegTradeDirections()) {
      List<HostingExecTradeDirection> __this__relatedTradeLegTradeDirections = new ArrayList<HostingExecTradeDirection>(other.relatedTradeLegTradeDirections.size());
      for (HostingExecTradeDirection other_element : other.relatedTradeLegTradeDirections) {
        __this__relatedTradeLegTradeDirections.add(other_element);
      }
      this.relatedTradeLegTradeDirections = __this__relatedTradeLegTradeDirections;
    }
    if (other.isSetRelatedTradeLegContractSummaries()) {
      List<HostingExecOrderLegContractSummary> __this__relatedTradeLegContractSummaries = new ArrayList<HostingExecOrderLegContractSummary>(other.relatedTradeLegContractSummaries.size());
      for (HostingExecOrderLegContractSummary other_element : other.relatedTradeLegContractSummaries) {
        __this__relatedTradeLegContractSummaries.add(new HostingExecOrderLegContractSummary(other_element));
      }
      this.relatedTradeLegContractSummaries = __this__relatedTradeLegContractSummaries;
    }
    if (other.isSetRelatedTradeLegVolumes()) {
      List<Integer> __this__relatedTradeLegVolumes = new ArrayList<Integer>(other.relatedTradeLegVolumes);
      this.relatedTradeLegVolumes = __this__relatedTradeLegVolumes;
    }
    this.relatedTradeLegCount = other.relatedTradeLegCount;
  }

  public HostingExecTrade deepCopy() {
    return new HostingExecTrade(this);
  }

  @Override
  public void clear() {
    setExecTradeIdIsSet(false);
    this.execTradeId = 0;
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.contractSummary = null;
    this.accountSummary = null;
    this.relatedTradeLegIds = null;
    setTradePriceIsSet(false);
    this.tradePrice = 0.0;
    setTradeVolumeIsSet(false);
    this.tradeVolume = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    this.relatedTradeLegPrices = null;
    this.orderTradeDirection = null;
    this.relatedTradeLegTradeDirections = null;
    this.relatedTradeLegContractSummaries = null;
    this.relatedTradeLegVolumes = null;
    setRelatedTradeLegCountIsSet(false);
    this.relatedTradeLegCount = 0;
  }

  public long getExecTradeId() {
    return this.execTradeId;
  }

  public HostingExecTrade setExecTradeId(long execTradeId) {
    this.execTradeId = execTradeId;
    setExecTradeIdIsSet(true);
    return this;
  }

  public void unsetExecTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  /** Returns true if field execTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  public void setExecTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADEID_ISSET_ID, value);
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public HostingExecTrade setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingExecTrade setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingExecTrade setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public HostingExecOrderContractSummary getContractSummary() {
    return this.contractSummary;
  }

  public HostingExecTrade setContractSummary(HostingExecOrderContractSummary contractSummary) {
    this.contractSummary = contractSummary;
    return this;
  }

  public void unsetContractSummary() {
    this.contractSummary = null;
  }

  /** Returns true if field contractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSummary() {
    return this.contractSummary != null;
  }

  public void setContractSummaryIsSet(boolean value) {
    if (!value) {
      this.contractSummary = null;
    }
  }

  public HostingExecOrderTradeAccountSummary getAccountSummary() {
    return this.accountSummary;
  }

  public HostingExecTrade setAccountSummary(HostingExecOrderTradeAccountSummary accountSummary) {
    this.accountSummary = accountSummary;
    return this;
  }

  public void unsetAccountSummary() {
    this.accountSummary = null;
  }

  /** Returns true if field accountSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountSummary() {
    return this.accountSummary != null;
  }

  public void setAccountSummaryIsSet(boolean value) {
    if (!value) {
      this.accountSummary = null;
    }
  }

  public int getRelatedTradeLegIdsSize() {
    return (this.relatedTradeLegIds == null) ? 0 : this.relatedTradeLegIds.size();
  }

  public java.util.Iterator<Long> getRelatedTradeLegIdsIterator() {
    return (this.relatedTradeLegIds == null) ? null : this.relatedTradeLegIds.iterator();
  }

  public void addToRelatedTradeLegIds(long elem) {
    if (this.relatedTradeLegIds == null) {
      this.relatedTradeLegIds = new ArrayList<Long>();
    }
    this.relatedTradeLegIds.add(elem);
  }

  public List<Long> getRelatedTradeLegIds() {
    return this.relatedTradeLegIds;
  }

  public HostingExecTrade setRelatedTradeLegIds(List<Long> relatedTradeLegIds) {
    this.relatedTradeLegIds = relatedTradeLegIds;
    return this;
  }

  public void unsetRelatedTradeLegIds() {
    this.relatedTradeLegIds = null;
  }

  /** Returns true if field relatedTradeLegIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegIds() {
    return this.relatedTradeLegIds != null;
  }

  public void setRelatedTradeLegIdsIsSet(boolean value) {
    if (!value) {
      this.relatedTradeLegIds = null;
    }
  }

  public double getTradePrice() {
    return this.tradePrice;
  }

  public HostingExecTrade setTradePrice(double tradePrice) {
    this.tradePrice = tradePrice;
    setTradePriceIsSet(true);
    return this;
  }

  public void unsetTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  /** Returns true if field tradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  public void setTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEPRICE_ISSET_ID, value);
  }

  public int getTradeVolume() {
    return this.tradeVolume;
  }

  public HostingExecTrade setTradeVolume(int tradeVolume) {
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    return this;
  }

  public void unsetTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  public void setTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingExecTrade setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingExecTrade setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public int getRelatedTradeLegPricesSize() {
    return (this.relatedTradeLegPrices == null) ? 0 : this.relatedTradeLegPrices.size();
  }

  public java.util.Iterator<Double> getRelatedTradeLegPricesIterator() {
    return (this.relatedTradeLegPrices == null) ? null : this.relatedTradeLegPrices.iterator();
  }

  public void addToRelatedTradeLegPrices(double elem) {
    if (this.relatedTradeLegPrices == null) {
      this.relatedTradeLegPrices = new ArrayList<Double>();
    }
    this.relatedTradeLegPrices.add(elem);
  }

  public List<Double> getRelatedTradeLegPrices() {
    return this.relatedTradeLegPrices;
  }

  public HostingExecTrade setRelatedTradeLegPrices(List<Double> relatedTradeLegPrices) {
    this.relatedTradeLegPrices = relatedTradeLegPrices;
    return this;
  }

  public void unsetRelatedTradeLegPrices() {
    this.relatedTradeLegPrices = null;
  }

  /** Returns true if field relatedTradeLegPrices is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegPrices() {
    return this.relatedTradeLegPrices != null;
  }

  public void setRelatedTradeLegPricesIsSet(boolean value) {
    if (!value) {
      this.relatedTradeLegPrices = null;
    }
  }

  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecOrderTradeDirection getOrderTradeDirection() {
    return this.orderTradeDirection;
  }

  /**
   * 
   * @see HostingExecOrderTradeDirection
   */
  public HostingExecTrade setOrderTradeDirection(HostingExecOrderTradeDirection orderTradeDirection) {
    this.orderTradeDirection = orderTradeDirection;
    return this;
  }

  public void unsetOrderTradeDirection() {
    this.orderTradeDirection = null;
  }

  /** Returns true if field orderTradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTradeDirection() {
    return this.orderTradeDirection != null;
  }

  public void setOrderTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.orderTradeDirection = null;
    }
  }

  public int getRelatedTradeLegTradeDirectionsSize() {
    return (this.relatedTradeLegTradeDirections == null) ? 0 : this.relatedTradeLegTradeDirections.size();
  }

  public java.util.Iterator<HostingExecTradeDirection> getRelatedTradeLegTradeDirectionsIterator() {
    return (this.relatedTradeLegTradeDirections == null) ? null : this.relatedTradeLegTradeDirections.iterator();
  }

  public void addToRelatedTradeLegTradeDirections(HostingExecTradeDirection elem) {
    if (this.relatedTradeLegTradeDirections == null) {
      this.relatedTradeLegTradeDirections = new ArrayList<HostingExecTradeDirection>();
    }
    this.relatedTradeLegTradeDirections.add(elem);
  }

  public List<HostingExecTradeDirection> getRelatedTradeLegTradeDirections() {
    return this.relatedTradeLegTradeDirections;
  }

  public HostingExecTrade setRelatedTradeLegTradeDirections(List<HostingExecTradeDirection> relatedTradeLegTradeDirections) {
    this.relatedTradeLegTradeDirections = relatedTradeLegTradeDirections;
    return this;
  }

  public void unsetRelatedTradeLegTradeDirections() {
    this.relatedTradeLegTradeDirections = null;
  }

  /** Returns true if field relatedTradeLegTradeDirections is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegTradeDirections() {
    return this.relatedTradeLegTradeDirections != null;
  }

  public void setRelatedTradeLegTradeDirectionsIsSet(boolean value) {
    if (!value) {
      this.relatedTradeLegTradeDirections = null;
    }
  }

  public int getRelatedTradeLegContractSummariesSize() {
    return (this.relatedTradeLegContractSummaries == null) ? 0 : this.relatedTradeLegContractSummaries.size();
  }

  public java.util.Iterator<HostingExecOrderLegContractSummary> getRelatedTradeLegContractSummariesIterator() {
    return (this.relatedTradeLegContractSummaries == null) ? null : this.relatedTradeLegContractSummaries.iterator();
  }

  public void addToRelatedTradeLegContractSummaries(HostingExecOrderLegContractSummary elem) {
    if (this.relatedTradeLegContractSummaries == null) {
      this.relatedTradeLegContractSummaries = new ArrayList<HostingExecOrderLegContractSummary>();
    }
    this.relatedTradeLegContractSummaries.add(elem);
  }

  public List<HostingExecOrderLegContractSummary> getRelatedTradeLegContractSummaries() {
    return this.relatedTradeLegContractSummaries;
  }

  public HostingExecTrade setRelatedTradeLegContractSummaries(List<HostingExecOrderLegContractSummary> relatedTradeLegContractSummaries) {
    this.relatedTradeLegContractSummaries = relatedTradeLegContractSummaries;
    return this;
  }

  public void unsetRelatedTradeLegContractSummaries() {
    this.relatedTradeLegContractSummaries = null;
  }

  /** Returns true if field relatedTradeLegContractSummaries is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegContractSummaries() {
    return this.relatedTradeLegContractSummaries != null;
  }

  public void setRelatedTradeLegContractSummariesIsSet(boolean value) {
    if (!value) {
      this.relatedTradeLegContractSummaries = null;
    }
  }

  public int getRelatedTradeLegVolumesSize() {
    return (this.relatedTradeLegVolumes == null) ? 0 : this.relatedTradeLegVolumes.size();
  }

  public java.util.Iterator<Integer> getRelatedTradeLegVolumesIterator() {
    return (this.relatedTradeLegVolumes == null) ? null : this.relatedTradeLegVolumes.iterator();
  }

  public void addToRelatedTradeLegVolumes(int elem) {
    if (this.relatedTradeLegVolumes == null) {
      this.relatedTradeLegVolumes = new ArrayList<Integer>();
    }
    this.relatedTradeLegVolumes.add(elem);
  }

  public List<Integer> getRelatedTradeLegVolumes() {
    return this.relatedTradeLegVolumes;
  }

  public HostingExecTrade setRelatedTradeLegVolumes(List<Integer> relatedTradeLegVolumes) {
    this.relatedTradeLegVolumes = relatedTradeLegVolumes;
    return this;
  }

  public void unsetRelatedTradeLegVolumes() {
    this.relatedTradeLegVolumes = null;
  }

  /** Returns true if field relatedTradeLegVolumes is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegVolumes() {
    return this.relatedTradeLegVolumes != null;
  }

  public void setRelatedTradeLegVolumesIsSet(boolean value) {
    if (!value) {
      this.relatedTradeLegVolumes = null;
    }
  }

  public int getRelatedTradeLegCount() {
    return this.relatedTradeLegCount;
  }

  public HostingExecTrade setRelatedTradeLegCount(int relatedTradeLegCount) {
    this.relatedTradeLegCount = relatedTradeLegCount;
    setRelatedTradeLegCountIsSet(true);
    return this;
  }

  public void unsetRelatedTradeLegCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDTRADELEGCOUNT_ISSET_ID);
  }

  /** Returns true if field relatedTradeLegCount is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeLegCount() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDTRADELEGCOUNT_ISSET_ID);
  }

  public void setRelatedTradeLegCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDTRADELEGCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_TRADE_ID:
      if (value == null) {
        unsetExecTradeId();
      } else {
        setExecTradeId((Long)value);
      }
      break;

    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case CONTRACT_SUMMARY:
      if (value == null) {
        unsetContractSummary();
      } else {
        setContractSummary((HostingExecOrderContractSummary)value);
      }
      break;

    case ACCOUNT_SUMMARY:
      if (value == null) {
        unsetAccountSummary();
      } else {
        setAccountSummary((HostingExecOrderTradeAccountSummary)value);
      }
      break;

    case RELATED_TRADE_LEG_IDS:
      if (value == null) {
        unsetRelatedTradeLegIds();
      } else {
        setRelatedTradeLegIds((List<Long>)value);
      }
      break;

    case TRADE_PRICE:
      if (value == null) {
        unsetTradePrice();
      } else {
        setTradePrice((Double)value);
      }
      break;

    case TRADE_VOLUME:
      if (value == null) {
        unsetTradeVolume();
      } else {
        setTradeVolume((Integer)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case RELATED_TRADE_LEG_PRICES:
      if (value == null) {
        unsetRelatedTradeLegPrices();
      } else {
        setRelatedTradeLegPrices((List<Double>)value);
      }
      break;

    case ORDER_TRADE_DIRECTION:
      if (value == null) {
        unsetOrderTradeDirection();
      } else {
        setOrderTradeDirection((HostingExecOrderTradeDirection)value);
      }
      break;

    case RELATED_TRADE_LEG_TRADE_DIRECTIONS:
      if (value == null) {
        unsetRelatedTradeLegTradeDirections();
      } else {
        setRelatedTradeLegTradeDirections((List<HostingExecTradeDirection>)value);
      }
      break;

    case RELATED_TRADE_LEG_CONTRACT_SUMMARIES:
      if (value == null) {
        unsetRelatedTradeLegContractSummaries();
      } else {
        setRelatedTradeLegContractSummaries((List<HostingExecOrderLegContractSummary>)value);
      }
      break;

    case RELATED_TRADE_LEG_VOLUMES:
      if (value == null) {
        unsetRelatedTradeLegVolumes();
      } else {
        setRelatedTradeLegVolumes((List<Integer>)value);
      }
      break;

    case RELATED_TRADE_LEG_COUNT:
      if (value == null) {
        unsetRelatedTradeLegCount();
      } else {
        setRelatedTradeLegCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_TRADE_ID:
      return Long.valueOf(getExecTradeId());

    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case CONTRACT_SUMMARY:
      return getContractSummary();

    case ACCOUNT_SUMMARY:
      return getAccountSummary();

    case RELATED_TRADE_LEG_IDS:
      return getRelatedTradeLegIds();

    case TRADE_PRICE:
      return Double.valueOf(getTradePrice());

    case TRADE_VOLUME:
      return Integer.valueOf(getTradeVolume());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case RELATED_TRADE_LEG_PRICES:
      return getRelatedTradeLegPrices();

    case ORDER_TRADE_DIRECTION:
      return getOrderTradeDirection();

    case RELATED_TRADE_LEG_TRADE_DIRECTIONS:
      return getRelatedTradeLegTradeDirections();

    case RELATED_TRADE_LEG_CONTRACT_SUMMARIES:
      return getRelatedTradeLegContractSummaries();

    case RELATED_TRADE_LEG_VOLUMES:
      return getRelatedTradeLegVolumes();

    case RELATED_TRADE_LEG_COUNT:
      return Integer.valueOf(getRelatedTradeLegCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_TRADE_ID:
      return isSetExecTradeId();
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case CONTRACT_SUMMARY:
      return isSetContractSummary();
    case ACCOUNT_SUMMARY:
      return isSetAccountSummary();
    case RELATED_TRADE_LEG_IDS:
      return isSetRelatedTradeLegIds();
    case TRADE_PRICE:
      return isSetTradePrice();
    case TRADE_VOLUME:
      return isSetTradeVolume();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case RELATED_TRADE_LEG_PRICES:
      return isSetRelatedTradeLegPrices();
    case ORDER_TRADE_DIRECTION:
      return isSetOrderTradeDirection();
    case RELATED_TRADE_LEG_TRADE_DIRECTIONS:
      return isSetRelatedTradeLegTradeDirections();
    case RELATED_TRADE_LEG_CONTRACT_SUMMARIES:
      return isSetRelatedTradeLegContractSummaries();
    case RELATED_TRADE_LEG_VOLUMES:
      return isSetRelatedTradeLegVolumes();
    case RELATED_TRADE_LEG_COUNT:
      return isSetRelatedTradeLegCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecTrade)
      return this.equals((HostingExecTrade)that);
    return false;
  }

  public boolean equals(HostingExecTrade that) {
    if (that == null)
      return false;

    boolean this_present_execTradeId = true && this.isSetExecTradeId();
    boolean that_present_execTradeId = true && that.isSetExecTradeId();
    if (this_present_execTradeId || that_present_execTradeId) {
      if (!(this_present_execTradeId && that_present_execTradeId))
        return false;
      if (this.execTradeId != that.execTradeId)
        return false;
    }

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_contractSummary = true && this.isSetContractSummary();
    boolean that_present_contractSummary = true && that.isSetContractSummary();
    if (this_present_contractSummary || that_present_contractSummary) {
      if (!(this_present_contractSummary && that_present_contractSummary))
        return false;
      if (!this.contractSummary.equals(that.contractSummary))
        return false;
    }

    boolean this_present_accountSummary = true && this.isSetAccountSummary();
    boolean that_present_accountSummary = true && that.isSetAccountSummary();
    if (this_present_accountSummary || that_present_accountSummary) {
      if (!(this_present_accountSummary && that_present_accountSummary))
        return false;
      if (!this.accountSummary.equals(that.accountSummary))
        return false;
    }

    boolean this_present_relatedTradeLegIds = true && this.isSetRelatedTradeLegIds();
    boolean that_present_relatedTradeLegIds = true && that.isSetRelatedTradeLegIds();
    if (this_present_relatedTradeLegIds || that_present_relatedTradeLegIds) {
      if (!(this_present_relatedTradeLegIds && that_present_relatedTradeLegIds))
        return false;
      if (!this.relatedTradeLegIds.equals(that.relatedTradeLegIds))
        return false;
    }

    boolean this_present_tradePrice = true && this.isSetTradePrice();
    boolean that_present_tradePrice = true && that.isSetTradePrice();
    if (this_present_tradePrice || that_present_tradePrice) {
      if (!(this_present_tradePrice && that_present_tradePrice))
        return false;
      if (this.tradePrice != that.tradePrice)
        return false;
    }

    boolean this_present_tradeVolume = true && this.isSetTradeVolume();
    boolean that_present_tradeVolume = true && that.isSetTradeVolume();
    if (this_present_tradeVolume || that_present_tradeVolume) {
      if (!(this_present_tradeVolume && that_present_tradeVolume))
        return false;
      if (this.tradeVolume != that.tradeVolume)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_relatedTradeLegPrices = true && this.isSetRelatedTradeLegPrices();
    boolean that_present_relatedTradeLegPrices = true && that.isSetRelatedTradeLegPrices();
    if (this_present_relatedTradeLegPrices || that_present_relatedTradeLegPrices) {
      if (!(this_present_relatedTradeLegPrices && that_present_relatedTradeLegPrices))
        return false;
      if (!this.relatedTradeLegPrices.equals(that.relatedTradeLegPrices))
        return false;
    }

    boolean this_present_orderTradeDirection = true && this.isSetOrderTradeDirection();
    boolean that_present_orderTradeDirection = true && that.isSetOrderTradeDirection();
    if (this_present_orderTradeDirection || that_present_orderTradeDirection) {
      if (!(this_present_orderTradeDirection && that_present_orderTradeDirection))
        return false;
      if (!this.orderTradeDirection.equals(that.orderTradeDirection))
        return false;
    }

    boolean this_present_relatedTradeLegTradeDirections = true && this.isSetRelatedTradeLegTradeDirections();
    boolean that_present_relatedTradeLegTradeDirections = true && that.isSetRelatedTradeLegTradeDirections();
    if (this_present_relatedTradeLegTradeDirections || that_present_relatedTradeLegTradeDirections) {
      if (!(this_present_relatedTradeLegTradeDirections && that_present_relatedTradeLegTradeDirections))
        return false;
      if (!this.relatedTradeLegTradeDirections.equals(that.relatedTradeLegTradeDirections))
        return false;
    }

    boolean this_present_relatedTradeLegContractSummaries = true && this.isSetRelatedTradeLegContractSummaries();
    boolean that_present_relatedTradeLegContractSummaries = true && that.isSetRelatedTradeLegContractSummaries();
    if (this_present_relatedTradeLegContractSummaries || that_present_relatedTradeLegContractSummaries) {
      if (!(this_present_relatedTradeLegContractSummaries && that_present_relatedTradeLegContractSummaries))
        return false;
      if (!this.relatedTradeLegContractSummaries.equals(that.relatedTradeLegContractSummaries))
        return false;
    }

    boolean this_present_relatedTradeLegVolumes = true && this.isSetRelatedTradeLegVolumes();
    boolean that_present_relatedTradeLegVolumes = true && that.isSetRelatedTradeLegVolumes();
    if (this_present_relatedTradeLegVolumes || that_present_relatedTradeLegVolumes) {
      if (!(this_present_relatedTradeLegVolumes && that_present_relatedTradeLegVolumes))
        return false;
      if (!this.relatedTradeLegVolumes.equals(that.relatedTradeLegVolumes))
        return false;
    }

    boolean this_present_relatedTradeLegCount = true && this.isSetRelatedTradeLegCount();
    boolean that_present_relatedTradeLegCount = true && that.isSetRelatedTradeLegCount();
    if (this_present_relatedTradeLegCount || that_present_relatedTradeLegCount) {
      if (!(this_present_relatedTradeLegCount && that_present_relatedTradeLegCount))
        return false;
      if (this.relatedTradeLegCount != that.relatedTradeLegCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecTrade other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecTradeId()).compareTo(other.isSetExecTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeId, other.execTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSummary()).compareTo(other.isSetContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSummary, other.contractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccountSummary()).compareTo(other.isSetAccountSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountSummary, other.accountSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegIds()).compareTo(other.isSetRelatedTradeLegIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegIds, other.relatedTradeLegIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradePrice()).compareTo(other.isSetTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradePrice, other.tradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVolume()).compareTo(other.isSetTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVolume, other.tradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegPrices()).compareTo(other.isSetRelatedTradeLegPrices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegPrices()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegPrices, other.relatedTradeLegPrices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTradeDirection()).compareTo(other.isSetOrderTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTradeDirection, other.orderTradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegTradeDirections()).compareTo(other.isSetRelatedTradeLegTradeDirections());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegTradeDirections()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegTradeDirections, other.relatedTradeLegTradeDirections);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegContractSummaries()).compareTo(other.isSetRelatedTradeLegContractSummaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegContractSummaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegContractSummaries, other.relatedTradeLegContractSummaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegVolumes()).compareTo(other.isSetRelatedTradeLegVolumes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegVolumes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegVolumes, other.relatedTradeLegVolumes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeLegCount()).compareTo(other.isSetRelatedTradeLegCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeLegCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeLegCount, other.relatedTradeLegCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecTrade(");
    boolean first = true;

    if (isSetExecTradeId()) {
      sb.append("execTradeId:");
      sb.append(this.execTradeId);
      first = false;
    }
    if (isSetExecOrderId()) {
      if (!first) sb.append(", ");
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("contractSummary:");
      if (this.contractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSummary);
      }
      first = false;
    }
    if (isSetAccountSummary()) {
      if (!first) sb.append(", ");
      sb.append("accountSummary:");
      if (this.accountSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.accountSummary);
      }
      first = false;
    }
    if (isSetRelatedTradeLegIds()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegIds:");
      if (this.relatedTradeLegIds == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedTradeLegIds);
      }
      first = false;
    }
    if (isSetTradePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradePrice:");
      sb.append(this.tradePrice);
      first = false;
    }
    if (isSetTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("tradeVolume:");
      sb.append(this.tradeVolume);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetRelatedTradeLegPrices()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegPrices:");
      if (this.relatedTradeLegPrices == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedTradeLegPrices);
      }
      first = false;
    }
    if (isSetOrderTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("orderTradeDirection:");
      if (this.orderTradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.orderTradeDirection);
      }
      first = false;
    }
    if (isSetRelatedTradeLegTradeDirections()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegTradeDirections:");
      if (this.relatedTradeLegTradeDirections == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedTradeLegTradeDirections);
      }
      first = false;
    }
    if (isSetRelatedTradeLegContractSummaries()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegContractSummaries:");
      if (this.relatedTradeLegContractSummaries == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedTradeLegContractSummaries);
      }
      first = false;
    }
    if (isSetRelatedTradeLegVolumes()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegVolumes:");
      if (this.relatedTradeLegVolumes == null) {
        sb.append("null");
      } else {
        sb.append(this.relatedTradeLegVolumes);
      }
      first = false;
    }
    if (isSetRelatedTradeLegCount()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeLegCount:");
      sb.append(this.relatedTradeLegCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (contractSummary != null) {
      contractSummary.validate();
    }
    if (accountSummary != null) {
      accountSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecTradeStandardSchemeFactory implements SchemeFactory {
    public HostingExecTradeStandardScheme getScheme() {
      return new HostingExecTradeStandardScheme();
    }
  }

  private static class HostingExecTradeStandardScheme extends StandardScheme<HostingExecTrade> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecTrade struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTradeId = iprot.readI64();
              struct.setExecTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractSummary = new HostingExecOrderContractSummary();
              struct.contractSummary.read(iprot);
              struct.setContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ACCOUNT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountSummary = new HostingExecOrderTradeAccountSummary();
              struct.accountSummary.read(iprot);
              struct.setAccountSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // RELATED_TRADE_LEG_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list204 = iprot.readListBegin();
                struct.relatedTradeLegIds = new ArrayList<Long>(_list204.size);
                for (int _i205 = 0; _i205 < _list204.size; ++_i205)
                {
                  long _elem206;
                  _elem206 = iprot.readI64();
                  struct.relatedTradeLegIds.add(_elem206);
                }
                iprot.readListEnd();
              }
              struct.setRelatedTradeLegIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradePrice = iprot.readDouble();
              struct.setTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVolume = iprot.readI32();
              struct.setTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RELATED_TRADE_LEG_PRICES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list207 = iprot.readListBegin();
                struct.relatedTradeLegPrices = new ArrayList<Double>(_list207.size);
                for (int _i208 = 0; _i208 < _list207.size; ++_i208)
                {
                  double _elem209;
                  _elem209 = iprot.readDouble();
                  struct.relatedTradeLegPrices.add(_elem209);
                }
                iprot.readListEnd();
              }
              struct.setRelatedTradeLegPricesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ORDER_TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderTradeDirection = HostingExecOrderTradeDirection.findByValue(iprot.readI32());
              struct.setOrderTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RELATED_TRADE_LEG_TRADE_DIRECTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list210 = iprot.readListBegin();
                struct.relatedTradeLegTradeDirections = new ArrayList<HostingExecTradeDirection>(_list210.size);
                for (int _i211 = 0; _i211 < _list210.size; ++_i211)
                {
                  HostingExecTradeDirection _elem212;
                  _elem212 = HostingExecTradeDirection.findByValue(iprot.readI32());
                  struct.relatedTradeLegTradeDirections.add(_elem212);
                }
                iprot.readListEnd();
              }
              struct.setRelatedTradeLegTradeDirectionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // RELATED_TRADE_LEG_CONTRACT_SUMMARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list213 = iprot.readListBegin();
                struct.relatedTradeLegContractSummaries = new ArrayList<HostingExecOrderLegContractSummary>(_list213.size);
                for (int _i214 = 0; _i214 < _list213.size; ++_i214)
                {
                  HostingExecOrderLegContractSummary _elem215;
                  _elem215 = new HostingExecOrderLegContractSummary();
                  _elem215.read(iprot);
                  struct.relatedTradeLegContractSummaries.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setRelatedTradeLegContractSummariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RELATED_TRADE_LEG_VOLUMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.relatedTradeLegVolumes = new ArrayList<Integer>(_list216.size);
                for (int _i217 = 0; _i217 < _list216.size; ++_i217)
                {
                  int _elem218;
                  _elem218 = iprot.readI32();
                  struct.relatedTradeLegVolumes.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setRelatedTradeLegVolumesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RELATED_TRADE_LEG_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relatedTradeLegCount = iprot.readI32();
              struct.setRelatedTradeLegCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecTrade struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecTradeId()) {
        oprot.writeFieldBegin(EXEC_TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.execTradeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.contractSummary != null) {
        if (struct.isSetContractSummary()) {
          oprot.writeFieldBegin(CONTRACT_SUMMARY_FIELD_DESC);
          struct.contractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.accountSummary != null) {
        if (struct.isSetAccountSummary()) {
          oprot.writeFieldBegin(ACCOUNT_SUMMARY_FIELD_DESC);
          struct.accountSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedTradeLegIds != null) {
        if (struct.isSetRelatedTradeLegIds()) {
          oprot.writeFieldBegin(RELATED_TRADE_LEG_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.relatedTradeLegIds.size()));
            for (long _iter219 : struct.relatedTradeLegIds)
            {
              oprot.writeI64(_iter219);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradePrice()) {
        oprot.writeFieldBegin(TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeFieldBegin(TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.tradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.relatedTradeLegPrices != null) {
        if (struct.isSetRelatedTradeLegPrices()) {
          oprot.writeFieldBegin(RELATED_TRADE_LEG_PRICES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.relatedTradeLegPrices.size()));
            for (double _iter220 : struct.relatedTradeLegPrices)
            {
              oprot.writeDouble(_iter220);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderTradeDirection != null) {
        if (struct.isSetOrderTradeDirection()) {
          oprot.writeFieldBegin(ORDER_TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.orderTradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedTradeLegTradeDirections != null) {
        if (struct.isSetRelatedTradeLegTradeDirections()) {
          oprot.writeFieldBegin(RELATED_TRADE_LEG_TRADE_DIRECTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.relatedTradeLegTradeDirections.size()));
            for (HostingExecTradeDirection _iter221 : struct.relatedTradeLegTradeDirections)
            {
              oprot.writeI32(_iter221.getValue());
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedTradeLegContractSummaries != null) {
        if (struct.isSetRelatedTradeLegContractSummaries()) {
          oprot.writeFieldBegin(RELATED_TRADE_LEG_CONTRACT_SUMMARIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.relatedTradeLegContractSummaries.size()));
            for (HostingExecOrderLegContractSummary _iter222 : struct.relatedTradeLegContractSummaries)
            {
              _iter222.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.relatedTradeLegVolumes != null) {
        if (struct.isSetRelatedTradeLegVolumes()) {
          oprot.writeFieldBegin(RELATED_TRADE_LEG_VOLUMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.relatedTradeLegVolumes.size()));
            for (int _iter223 : struct.relatedTradeLegVolumes)
            {
              oprot.writeI32(_iter223);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRelatedTradeLegCount()) {
        oprot.writeFieldBegin(RELATED_TRADE_LEG_COUNT_FIELD_DESC);
        oprot.writeI32(struct.relatedTradeLegCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecTradeTupleSchemeFactory implements SchemeFactory {
    public HostingExecTradeTupleScheme getScheme() {
      return new HostingExecTradeTupleScheme();
    }
  }

  private static class HostingExecTradeTupleScheme extends TupleScheme<HostingExecTrade> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecTradeId()) {
        optionals.set(0);
      }
      if (struct.isSetExecOrderId()) {
        optionals.set(1);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(2);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(3);
      }
      if (struct.isSetContractSummary()) {
        optionals.set(4);
      }
      if (struct.isSetAccountSummary()) {
        optionals.set(5);
      }
      if (struct.isSetRelatedTradeLegIds()) {
        optionals.set(6);
      }
      if (struct.isSetTradePrice()) {
        optionals.set(7);
      }
      if (struct.isSetTradeVolume()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(9);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(10);
      }
      if (struct.isSetRelatedTradeLegPrices()) {
        optionals.set(11);
      }
      if (struct.isSetOrderTradeDirection()) {
        optionals.set(12);
      }
      if (struct.isSetRelatedTradeLegTradeDirections()) {
        optionals.set(13);
      }
      if (struct.isSetRelatedTradeLegContractSummaries()) {
        optionals.set(14);
      }
      if (struct.isSetRelatedTradeLegVolumes()) {
        optionals.set(15);
      }
      if (struct.isSetRelatedTradeLegCount()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetExecTradeId()) {
        oprot.writeI64(struct.execTradeId);
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetContractSummary()) {
        struct.contractSummary.write(oprot);
      }
      if (struct.isSetAccountSummary()) {
        struct.accountSummary.write(oprot);
      }
      if (struct.isSetRelatedTradeLegIds()) {
        {
          oprot.writeI32(struct.relatedTradeLegIds.size());
          for (long _iter224 : struct.relatedTradeLegIds)
          {
            oprot.writeI64(_iter224);
          }
        }
      }
      if (struct.isSetTradePrice()) {
        oprot.writeDouble(struct.tradePrice);
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeI32(struct.tradeVolume);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetRelatedTradeLegPrices()) {
        {
          oprot.writeI32(struct.relatedTradeLegPrices.size());
          for (double _iter225 : struct.relatedTradeLegPrices)
          {
            oprot.writeDouble(_iter225);
          }
        }
      }
      if (struct.isSetOrderTradeDirection()) {
        oprot.writeI32(struct.orderTradeDirection.getValue());
      }
      if (struct.isSetRelatedTradeLegTradeDirections()) {
        {
          oprot.writeI32(struct.relatedTradeLegTradeDirections.size());
          for (HostingExecTradeDirection _iter226 : struct.relatedTradeLegTradeDirections)
          {
            oprot.writeI32(_iter226.getValue());
          }
        }
      }
      if (struct.isSetRelatedTradeLegContractSummaries()) {
        {
          oprot.writeI32(struct.relatedTradeLegContractSummaries.size());
          for (HostingExecOrderLegContractSummary _iter227 : struct.relatedTradeLegContractSummaries)
          {
            _iter227.write(oprot);
          }
        }
      }
      if (struct.isSetRelatedTradeLegVolumes()) {
        {
          oprot.writeI32(struct.relatedTradeLegVolumes.size());
          for (int _iter228 : struct.relatedTradeLegVolumes)
          {
            oprot.writeI32(_iter228);
          }
        }
      }
      if (struct.isSetRelatedTradeLegCount()) {
        oprot.writeI32(struct.relatedTradeLegCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.execTradeId = iprot.readI64();
        struct.setExecTradeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contractSummary = new HostingExecOrderContractSummary();
        struct.contractSummary.read(iprot);
        struct.setContractSummaryIsSet(true);
      }
      if (incoming.get(5)) {
        struct.accountSummary = new HostingExecOrderTradeAccountSummary();
        struct.accountSummary.read(iprot);
        struct.setAccountSummaryIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list229 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.relatedTradeLegIds = new ArrayList<Long>(_list229.size);
          for (int _i230 = 0; _i230 < _list229.size; ++_i230)
          {
            long _elem231;
            _elem231 = iprot.readI64();
            struct.relatedTradeLegIds.add(_elem231);
          }
        }
        struct.setRelatedTradeLegIdsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tradePrice = iprot.readDouble();
        struct.setTradePriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tradeVolume = iprot.readI32();
        struct.setTradeVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(11)) {
        {
          org.apache.thrift.protocol.TList _list232 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.relatedTradeLegPrices = new ArrayList<Double>(_list232.size);
          for (int _i233 = 0; _i233 < _list232.size; ++_i233)
          {
            double _elem234;
            _elem234 = iprot.readDouble();
            struct.relatedTradeLegPrices.add(_elem234);
          }
        }
        struct.setRelatedTradeLegPricesIsSet(true);
      }
      if (incoming.get(12)) {
        struct.orderTradeDirection = HostingExecOrderTradeDirection.findByValue(iprot.readI32());
        struct.setOrderTradeDirectionIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list235 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.relatedTradeLegTradeDirections = new ArrayList<HostingExecTradeDirection>(_list235.size);
          for (int _i236 = 0; _i236 < _list235.size; ++_i236)
          {
            HostingExecTradeDirection _elem237;
            _elem237 = HostingExecTradeDirection.findByValue(iprot.readI32());
            struct.relatedTradeLegTradeDirections.add(_elem237);
          }
        }
        struct.setRelatedTradeLegTradeDirectionsIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list238 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relatedTradeLegContractSummaries = new ArrayList<HostingExecOrderLegContractSummary>(_list238.size);
          for (int _i239 = 0; _i239 < _list238.size; ++_i239)
          {
            HostingExecOrderLegContractSummary _elem240;
            _elem240 = new HostingExecOrderLegContractSummary();
            _elem240.read(iprot);
            struct.relatedTradeLegContractSummaries.add(_elem240);
          }
        }
        struct.setRelatedTradeLegContractSummariesIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.relatedTradeLegVolumes = new ArrayList<Integer>(_list241.size);
          for (int _i242 = 0; _i242 < _list241.size; ++_i242)
          {
            int _elem243;
            _elem243 = iprot.readI32();
            struct.relatedTradeLegVolumes.add(_elem243);
          }
        }
        struct.setRelatedTradeLegVolumesIsSet(true);
      }
      if (incoming.get(16)) {
        struct.relatedTradeLegCount = iprot.readI32();
        struct.setRelatedTradeLegCountIsSet(true);
      }
    }
  }

}

