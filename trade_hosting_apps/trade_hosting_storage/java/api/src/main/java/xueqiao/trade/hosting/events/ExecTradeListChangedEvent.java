/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.events;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExecTradeListChangedEvent implements org.apache.thrift.TBase<ExecTradeListChangedEvent, ExecTradeListChangedEvent._Fields>, java.io.Serializable, Cloneable, Comparable<ExecTradeListChangedEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExecTradeListChangedEvent");

  private static final org.apache.thrift.protocol.TField EXEC_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TRADE_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("newTradeList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExecTradeListChangedEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExecTradeListChangedEventTupleSchemeFactory());
  }

  public xueqiao.trade.hosting.HostingExecOrder execOrder; // optional
  public List<xueqiao.trade.hosting.HostingExecTrade> newTradeList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_ORDER((short)1, "execOrder"),
    NEW_TRADE_LIST((short)2, "newTradeList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_ORDER
          return EXEC_ORDER;
        case 2: // NEW_TRADE_LIST
          return NEW_TRADE_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXEC_ORDER,_Fields.NEW_TRADE_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_ORDER, new org.apache.thrift.meta_data.FieldMetaData("execOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrder.class)));
    tmpMap.put(_Fields.NEW_TRADE_LIST, new org.apache.thrift.meta_data.FieldMetaData("newTradeList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecTrade.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExecTradeListChangedEvent.class, metaDataMap);
  }

  public ExecTradeListChangedEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExecTradeListChangedEvent(ExecTradeListChangedEvent other) {
    if (other.isSetExecOrder()) {
      this.execOrder = new xueqiao.trade.hosting.HostingExecOrder(other.execOrder);
    }
    if (other.isSetNewTradeList()) {
      List<xueqiao.trade.hosting.HostingExecTrade> __this__newTradeList = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(other.newTradeList.size());
      for (xueqiao.trade.hosting.HostingExecTrade other_element : other.newTradeList) {
        __this__newTradeList.add(new xueqiao.trade.hosting.HostingExecTrade(other_element));
      }
      this.newTradeList = __this__newTradeList;
    }
  }

  public ExecTradeListChangedEvent deepCopy() {
    return new ExecTradeListChangedEvent(this);
  }

  @Override
  public void clear() {
    this.execOrder = null;
    this.newTradeList = null;
  }

  public xueqiao.trade.hosting.HostingExecOrder getExecOrder() {
    return this.execOrder;
  }

  public ExecTradeListChangedEvent setExecOrder(xueqiao.trade.hosting.HostingExecOrder execOrder) {
    this.execOrder = execOrder;
    return this;
  }

  public void unsetExecOrder() {
    this.execOrder = null;
  }

  /** Returns true if field execOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrder() {
    return this.execOrder != null;
  }

  public void setExecOrderIsSet(boolean value) {
    if (!value) {
      this.execOrder = null;
    }
  }

  public int getNewTradeListSize() {
    return (this.newTradeList == null) ? 0 : this.newTradeList.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.HostingExecTrade> getNewTradeListIterator() {
    return (this.newTradeList == null) ? null : this.newTradeList.iterator();
  }

  public void addToNewTradeList(xueqiao.trade.hosting.HostingExecTrade elem) {
    if (this.newTradeList == null) {
      this.newTradeList = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>();
    }
    this.newTradeList.add(elem);
  }

  public List<xueqiao.trade.hosting.HostingExecTrade> getNewTradeList() {
    return this.newTradeList;
  }

  public ExecTradeListChangedEvent setNewTradeList(List<xueqiao.trade.hosting.HostingExecTrade> newTradeList) {
    this.newTradeList = newTradeList;
    return this;
  }

  public void unsetNewTradeList() {
    this.newTradeList = null;
  }

  /** Returns true if field newTradeList is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTradeList() {
    return this.newTradeList != null;
  }

  public void setNewTradeListIsSet(boolean value) {
    if (!value) {
      this.newTradeList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_ORDER:
      if (value == null) {
        unsetExecOrder();
      } else {
        setExecOrder((xueqiao.trade.hosting.HostingExecOrder)value);
      }
      break;

    case NEW_TRADE_LIST:
      if (value == null) {
        unsetNewTradeList();
      } else {
        setNewTradeList((List<xueqiao.trade.hosting.HostingExecTrade>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_ORDER:
      return getExecOrder();

    case NEW_TRADE_LIST:
      return getNewTradeList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_ORDER:
      return isSetExecOrder();
    case NEW_TRADE_LIST:
      return isSetNewTradeList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExecTradeListChangedEvent)
      return this.equals((ExecTradeListChangedEvent)that);
    return false;
  }

  public boolean equals(ExecTradeListChangedEvent that) {
    if (that == null)
      return false;

    boolean this_present_execOrder = true && this.isSetExecOrder();
    boolean that_present_execOrder = true && that.isSetExecOrder();
    if (this_present_execOrder || that_present_execOrder) {
      if (!(this_present_execOrder && that_present_execOrder))
        return false;
      if (!this.execOrder.equals(that.execOrder))
        return false;
    }

    boolean this_present_newTradeList = true && this.isSetNewTradeList();
    boolean that_present_newTradeList = true && that.isSetNewTradeList();
    if (this_present_newTradeList || that_present_newTradeList) {
      if (!(this_present_newTradeList && that_present_newTradeList))
        return false;
      if (!this.newTradeList.equals(that.newTradeList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExecTradeListChangedEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecOrder()).compareTo(other.isSetExecOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrder, other.execOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewTradeList()).compareTo(other.isSetNewTradeList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTradeList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTradeList, other.newTradeList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExecTradeListChangedEvent(");
    boolean first = true;

    if (isSetExecOrder()) {
      sb.append("execOrder:");
      if (this.execOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.execOrder);
      }
      first = false;
    }
    if (isSetNewTradeList()) {
      if (!first) sb.append(", ");
      sb.append("newTradeList:");
      if (this.newTradeList == null) {
        sb.append("null");
      } else {
        sb.append(this.newTradeList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (execOrder != null) {
      execOrder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExecTradeListChangedEventStandardSchemeFactory implements SchemeFactory {
    public ExecTradeListChangedEventStandardScheme getScheme() {
      return new ExecTradeListChangedEventStandardScheme();
    }
  }

  private static class ExecTradeListChangedEventStandardScheme extends StandardScheme<ExecTradeListChangedEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExecTradeListChangedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.execOrder = new xueqiao.trade.hosting.HostingExecOrder();
              struct.execOrder.read(iprot);
              struct.setExecOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TRADE_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.newTradeList = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  xueqiao.trade.hosting.HostingExecTrade _elem42;
                  _elem42 = new xueqiao.trade.hosting.HostingExecTrade();
                  _elem42.read(iprot);
                  struct.newTradeList.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setNewTradeListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExecTradeListChangedEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.execOrder != null) {
        if (struct.isSetExecOrder()) {
          oprot.writeFieldBegin(EXEC_ORDER_FIELD_DESC);
          struct.execOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.newTradeList != null) {
        if (struct.isSetNewTradeList()) {
          oprot.writeFieldBegin(NEW_TRADE_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.newTradeList.size()));
            for (xueqiao.trade.hosting.HostingExecTrade _iter43 : struct.newTradeList)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExecTradeListChangedEventTupleSchemeFactory implements SchemeFactory {
    public ExecTradeListChangedEventTupleScheme getScheme() {
      return new ExecTradeListChangedEventTupleScheme();
    }
  }

  private static class ExecTradeListChangedEventTupleScheme extends TupleScheme<ExecTradeListChangedEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExecTradeListChangedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecOrder()) {
        optionals.set(0);
      }
      if (struct.isSetNewTradeList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetExecOrder()) {
        struct.execOrder.write(oprot);
      }
      if (struct.isSetNewTradeList()) {
        {
          oprot.writeI32(struct.newTradeList.size());
          for (xueqiao.trade.hosting.HostingExecTrade _iter44 : struct.newTradeList)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExecTradeListChangedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.execOrder = new xueqiao.trade.hosting.HostingExecOrder();
        struct.execOrder.read(iprot);
        struct.setExecOrderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.newTradeList = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            xueqiao.trade.hosting.HostingExecTrade _elem47;
            _elem47 = new xueqiao.trade.hosting.HostingExecTrade();
            _elem47.read(iprot);
            struct.newTradeList.add(_elem47);
          }
        }
        struct.setNewTradeListIsSet(true);
      }
    }
  }

}

