/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机出入金记录方向
 */
public class HostingSubAccountMoneyRecord implements org.apache.thrift.TBase<HostingSubAccountMoneyRecord, HostingSubAccountMoneyRecord._Fields>, java.io.Serializable, Cloneable, Comparable<HostingSubAccountMoneyRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingSubAccountMoneyRecord");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField HOW_MUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("howMuch", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField OP_SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opSubUserId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IN_AMOUNT_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("inAmountBefore", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IN_AMOUNT_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("inAmountAfter", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OUT_AMOUNT_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("outAmountBefore", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField OUT_AMOUNT_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("outAmountAfter", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField RECORD_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("recordTimestamp", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingSubAccountMoneyRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingSubAccountMoneyRecordTupleSchemeFactory());
  }

  public long subAccountId; // optional
  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecordDirection direction; // optional
  public long howMuch; // optional
  public int opSubUserId; // optional
  public long inAmountBefore; // optional
  public long inAmountAfter; // optional
  public long outAmountBefore; // optional
  public long outAmountAfter; // optional
  public int recordTimestamp; // optional
  public String ticket; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    /**
     * 
     * @see HostingSubAccountMoneyRecordDirection
     */
    DIRECTION((short)2, "direction"),
    HOW_MUCH((short)3, "howMuch"),
    OP_SUB_USER_ID((short)4, "opSubUserId"),
    IN_AMOUNT_BEFORE((short)5, "inAmountBefore"),
    IN_AMOUNT_AFTER((short)6, "inAmountAfter"),
    OUT_AMOUNT_BEFORE((short)7, "outAmountBefore"),
    OUT_AMOUNT_AFTER((short)8, "outAmountAfter"),
    RECORD_TIMESTAMP((short)9, "recordTimestamp"),
    TICKET((short)10, "ticket");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // DIRECTION
          return DIRECTION;
        case 3: // HOW_MUCH
          return HOW_MUCH;
        case 4: // OP_SUB_USER_ID
          return OP_SUB_USER_ID;
        case 5: // IN_AMOUNT_BEFORE
          return IN_AMOUNT_BEFORE;
        case 6: // IN_AMOUNT_AFTER
          return IN_AMOUNT_AFTER;
        case 7: // OUT_AMOUNT_BEFORE
          return OUT_AMOUNT_BEFORE;
        case 8: // OUT_AMOUNT_AFTER
          return OUT_AMOUNT_AFTER;
        case 9: // RECORD_TIMESTAMP
          return RECORD_TIMESTAMP;
        case 10: // TICKET
          return TICKET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __HOWMUCH_ISSET_ID = 1;
  private static final int __OPSUBUSERID_ISSET_ID = 2;
  private static final int __INAMOUNTBEFORE_ISSET_ID = 3;
  private static final int __INAMOUNTAFTER_ISSET_ID = 4;
  private static final int __OUTAMOUNTBEFORE_ISSET_ID = 5;
  private static final int __OUTAMOUNTAFTER_ISSET_ID = 6;
  private static final int __RECORDTIMESTAMP_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.DIRECTION,_Fields.HOW_MUCH,_Fields.OP_SUB_USER_ID,_Fields.IN_AMOUNT_BEFORE,_Fields.IN_AMOUNT_AFTER,_Fields.OUT_AMOUNT_BEFORE,_Fields.OUT_AMOUNT_AFTER,_Fields.RECORD_TIMESTAMP,_Fields.TICKET};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingSubAccountMoneyRecordDirection.class)));
    tmpMap.put(_Fields.HOW_MUCH, new org.apache.thrift.meta_data.FieldMetaData("howMuch", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OP_SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opSubUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IN_AMOUNT_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("inAmountBefore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IN_AMOUNT_AFTER, new org.apache.thrift.meta_data.FieldMetaData("inAmountAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_AMOUNT_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("outAmountBefore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUT_AMOUNT_AFTER, new org.apache.thrift.meta_data.FieldMetaData("outAmountAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECORD_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("recordTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TICKET, new org.apache.thrift.meta_data.FieldMetaData("ticket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingSubAccountMoneyRecord.class, metaDataMap);
  }

  public HostingSubAccountMoneyRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingSubAccountMoneyRecord(HostingSubAccountMoneyRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    this.howMuch = other.howMuch;
    this.opSubUserId = other.opSubUserId;
    this.inAmountBefore = other.inAmountBefore;
    this.inAmountAfter = other.inAmountAfter;
    this.outAmountBefore = other.outAmountBefore;
    this.outAmountAfter = other.outAmountAfter;
    this.recordTimestamp = other.recordTimestamp;
    if (other.isSetTicket()) {
      this.ticket = other.ticket;
    }
  }

  public HostingSubAccountMoneyRecord deepCopy() {
    return new HostingSubAccountMoneyRecord(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.direction = null;
    setHowMuchIsSet(false);
    this.howMuch = 0;
    setOpSubUserIdIsSet(false);
    this.opSubUserId = 0;
    setInAmountBeforeIsSet(false);
    this.inAmountBefore = 0;
    setInAmountAfterIsSet(false);
    this.inAmountAfter = 0;
    setOutAmountBeforeIsSet(false);
    this.outAmountBefore = 0;
    setOutAmountAfterIsSet(false);
    this.outAmountAfter = 0;
    setRecordTimestampIsSet(false);
    this.recordTimestamp = 0;
    this.ticket = null;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingSubAccountMoneyRecord setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecordDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecord setDirection(HostingSubAccountMoneyRecordDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public long getHowMuch() {
    return this.howMuch;
  }

  public HostingSubAccountMoneyRecord setHowMuch(long howMuch) {
    this.howMuch = howMuch;
    setHowMuchIsSet(true);
    return this;
  }

  public void unsetHowMuch() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HOWMUCH_ISSET_ID);
  }

  /** Returns true if field howMuch is set (has been assigned a value) and false otherwise */
  public boolean isSetHowMuch() {
    return EncodingUtils.testBit(__isset_bitfield, __HOWMUCH_ISSET_ID);
  }

  public void setHowMuchIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HOWMUCH_ISSET_ID, value);
  }

  public int getOpSubUserId() {
    return this.opSubUserId;
  }

  public HostingSubAccountMoneyRecord setOpSubUserId(int opSubUserId) {
    this.opSubUserId = opSubUserId;
    setOpSubUserIdIsSet(true);
    return this;
  }

  public void unsetOpSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPSUBUSERID_ISSET_ID);
  }

  /** Returns true if field opSubUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __OPSUBUSERID_ISSET_ID);
  }

  public void setOpSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPSUBUSERID_ISSET_ID, value);
  }

  public long getInAmountBefore() {
    return this.inAmountBefore;
  }

  public HostingSubAccountMoneyRecord setInAmountBefore(long inAmountBefore) {
    this.inAmountBefore = inAmountBefore;
    setInAmountBeforeIsSet(true);
    return this;
  }

  public void unsetInAmountBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INAMOUNTBEFORE_ISSET_ID);
  }

  /** Returns true if field inAmountBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetInAmountBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __INAMOUNTBEFORE_ISSET_ID);
  }

  public void setInAmountBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INAMOUNTBEFORE_ISSET_ID, value);
  }

  public long getInAmountAfter() {
    return this.inAmountAfter;
  }

  public HostingSubAccountMoneyRecord setInAmountAfter(long inAmountAfter) {
    this.inAmountAfter = inAmountAfter;
    setInAmountAfterIsSet(true);
    return this;
  }

  public void unsetInAmountAfter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INAMOUNTAFTER_ISSET_ID);
  }

  /** Returns true if field inAmountAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetInAmountAfter() {
    return EncodingUtils.testBit(__isset_bitfield, __INAMOUNTAFTER_ISSET_ID);
  }

  public void setInAmountAfterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INAMOUNTAFTER_ISSET_ID, value);
  }

  public long getOutAmountBefore() {
    return this.outAmountBefore;
  }

  public HostingSubAccountMoneyRecord setOutAmountBefore(long outAmountBefore) {
    this.outAmountBefore = outAmountBefore;
    setOutAmountBeforeIsSet(true);
    return this;
  }

  public void unsetOutAmountBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTAMOUNTBEFORE_ISSET_ID);
  }

  /** Returns true if field outAmountBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetOutAmountBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTAMOUNTBEFORE_ISSET_ID);
  }

  public void setOutAmountBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTAMOUNTBEFORE_ISSET_ID, value);
  }

  public long getOutAmountAfter() {
    return this.outAmountAfter;
  }

  public HostingSubAccountMoneyRecord setOutAmountAfter(long outAmountAfter) {
    this.outAmountAfter = outAmountAfter;
    setOutAmountAfterIsSet(true);
    return this;
  }

  public void unsetOutAmountAfter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTAMOUNTAFTER_ISSET_ID);
  }

  /** Returns true if field outAmountAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetOutAmountAfter() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTAMOUNTAFTER_ISSET_ID);
  }

  public void setOutAmountAfterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTAMOUNTAFTER_ISSET_ID, value);
  }

  public int getRecordTimestamp() {
    return this.recordTimestamp;
  }

  public HostingSubAccountMoneyRecord setRecordTimestamp(int recordTimestamp) {
    this.recordTimestamp = recordTimestamp;
    setRecordTimestampIsSet(true);
    return this;
  }

  public void unsetRecordTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field recordTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDTIMESTAMP_ISSET_ID);
  }

  public void setRecordTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDTIMESTAMP_ISSET_ID, value);
  }

  public String getTicket() {
    return this.ticket;
  }

  public HostingSubAccountMoneyRecord setTicket(String ticket) {
    this.ticket = ticket;
    return this;
  }

  public void unsetTicket() {
    this.ticket = null;
  }

  /** Returns true if field ticket is set (has been assigned a value) and false otherwise */
  public boolean isSetTicket() {
    return this.ticket != null;
  }

  public void setTicketIsSet(boolean value) {
    if (!value) {
      this.ticket = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((HostingSubAccountMoneyRecordDirection)value);
      }
      break;

    case HOW_MUCH:
      if (value == null) {
        unsetHowMuch();
      } else {
        setHowMuch((Long)value);
      }
      break;

    case OP_SUB_USER_ID:
      if (value == null) {
        unsetOpSubUserId();
      } else {
        setOpSubUserId((Integer)value);
      }
      break;

    case IN_AMOUNT_BEFORE:
      if (value == null) {
        unsetInAmountBefore();
      } else {
        setInAmountBefore((Long)value);
      }
      break;

    case IN_AMOUNT_AFTER:
      if (value == null) {
        unsetInAmountAfter();
      } else {
        setInAmountAfter((Long)value);
      }
      break;

    case OUT_AMOUNT_BEFORE:
      if (value == null) {
        unsetOutAmountBefore();
      } else {
        setOutAmountBefore((Long)value);
      }
      break;

    case OUT_AMOUNT_AFTER:
      if (value == null) {
        unsetOutAmountAfter();
      } else {
        setOutAmountAfter((Long)value);
      }
      break;

    case RECORD_TIMESTAMP:
      if (value == null) {
        unsetRecordTimestamp();
      } else {
        setRecordTimestamp((Integer)value);
      }
      break;

    case TICKET:
      if (value == null) {
        unsetTicket();
      } else {
        setTicket((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case DIRECTION:
      return getDirection();

    case HOW_MUCH:
      return Long.valueOf(getHowMuch());

    case OP_SUB_USER_ID:
      return Integer.valueOf(getOpSubUserId());

    case IN_AMOUNT_BEFORE:
      return Long.valueOf(getInAmountBefore());

    case IN_AMOUNT_AFTER:
      return Long.valueOf(getInAmountAfter());

    case OUT_AMOUNT_BEFORE:
      return Long.valueOf(getOutAmountBefore());

    case OUT_AMOUNT_AFTER:
      return Long.valueOf(getOutAmountAfter());

    case RECORD_TIMESTAMP:
      return Integer.valueOf(getRecordTimestamp());

    case TICKET:
      return getTicket();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case DIRECTION:
      return isSetDirection();
    case HOW_MUCH:
      return isSetHowMuch();
    case OP_SUB_USER_ID:
      return isSetOpSubUserId();
    case IN_AMOUNT_BEFORE:
      return isSetInAmountBefore();
    case IN_AMOUNT_AFTER:
      return isSetInAmountAfter();
    case OUT_AMOUNT_BEFORE:
      return isSetOutAmountBefore();
    case OUT_AMOUNT_AFTER:
      return isSetOutAmountAfter();
    case RECORD_TIMESTAMP:
      return isSetRecordTimestamp();
    case TICKET:
      return isSetTicket();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingSubAccountMoneyRecord)
      return this.equals((HostingSubAccountMoneyRecord)that);
    return false;
  }

  public boolean equals(HostingSubAccountMoneyRecord that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_howMuch = true && this.isSetHowMuch();
    boolean that_present_howMuch = true && that.isSetHowMuch();
    if (this_present_howMuch || that_present_howMuch) {
      if (!(this_present_howMuch && that_present_howMuch))
        return false;
      if (this.howMuch != that.howMuch)
        return false;
    }

    boolean this_present_opSubUserId = true && this.isSetOpSubUserId();
    boolean that_present_opSubUserId = true && that.isSetOpSubUserId();
    if (this_present_opSubUserId || that_present_opSubUserId) {
      if (!(this_present_opSubUserId && that_present_opSubUserId))
        return false;
      if (this.opSubUserId != that.opSubUserId)
        return false;
    }

    boolean this_present_inAmountBefore = true && this.isSetInAmountBefore();
    boolean that_present_inAmountBefore = true && that.isSetInAmountBefore();
    if (this_present_inAmountBefore || that_present_inAmountBefore) {
      if (!(this_present_inAmountBefore && that_present_inAmountBefore))
        return false;
      if (this.inAmountBefore != that.inAmountBefore)
        return false;
    }

    boolean this_present_inAmountAfter = true && this.isSetInAmountAfter();
    boolean that_present_inAmountAfter = true && that.isSetInAmountAfter();
    if (this_present_inAmountAfter || that_present_inAmountAfter) {
      if (!(this_present_inAmountAfter && that_present_inAmountAfter))
        return false;
      if (this.inAmountAfter != that.inAmountAfter)
        return false;
    }

    boolean this_present_outAmountBefore = true && this.isSetOutAmountBefore();
    boolean that_present_outAmountBefore = true && that.isSetOutAmountBefore();
    if (this_present_outAmountBefore || that_present_outAmountBefore) {
      if (!(this_present_outAmountBefore && that_present_outAmountBefore))
        return false;
      if (this.outAmountBefore != that.outAmountBefore)
        return false;
    }

    boolean this_present_outAmountAfter = true && this.isSetOutAmountAfter();
    boolean that_present_outAmountAfter = true && that.isSetOutAmountAfter();
    if (this_present_outAmountAfter || that_present_outAmountAfter) {
      if (!(this_present_outAmountAfter && that_present_outAmountAfter))
        return false;
      if (this.outAmountAfter != that.outAmountAfter)
        return false;
    }

    boolean this_present_recordTimestamp = true && this.isSetRecordTimestamp();
    boolean that_present_recordTimestamp = true && that.isSetRecordTimestamp();
    if (this_present_recordTimestamp || that_present_recordTimestamp) {
      if (!(this_present_recordTimestamp && that_present_recordTimestamp))
        return false;
      if (this.recordTimestamp != that.recordTimestamp)
        return false;
    }

    boolean this_present_ticket = true && this.isSetTicket();
    boolean that_present_ticket = true && that.isSetTicket();
    if (this_present_ticket || that_present_ticket) {
      if (!(this_present_ticket && that_present_ticket))
        return false;
      if (!this.ticket.equals(that.ticket))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingSubAccountMoneyRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHowMuch()).compareTo(other.isSetHowMuch());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHowMuch()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.howMuch, other.howMuch);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpSubUserId()).compareTo(other.isSetOpSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opSubUserId, other.opSubUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInAmountBefore()).compareTo(other.isSetInAmountBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInAmountBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inAmountBefore, other.inAmountBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInAmountAfter()).compareTo(other.isSetInAmountAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInAmountAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inAmountAfter, other.inAmountAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutAmountBefore()).compareTo(other.isSetOutAmountBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutAmountBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outAmountBefore, other.outAmountBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutAmountAfter()).compareTo(other.isSetOutAmountAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutAmountAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outAmountAfter, other.outAmountAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordTimestamp()).compareTo(other.isSetRecordTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordTimestamp, other.recordTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicket()).compareTo(other.isSetTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket, other.ticket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingSubAccountMoneyRecord(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetHowMuch()) {
      if (!first) sb.append(", ");
      sb.append("howMuch:");
      sb.append(this.howMuch);
      first = false;
    }
    if (isSetOpSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("opSubUserId:");
      sb.append(this.opSubUserId);
      first = false;
    }
    if (isSetInAmountBefore()) {
      if (!first) sb.append(", ");
      sb.append("inAmountBefore:");
      sb.append(this.inAmountBefore);
      first = false;
    }
    if (isSetInAmountAfter()) {
      if (!first) sb.append(", ");
      sb.append("inAmountAfter:");
      sb.append(this.inAmountAfter);
      first = false;
    }
    if (isSetOutAmountBefore()) {
      if (!first) sb.append(", ");
      sb.append("outAmountBefore:");
      sb.append(this.outAmountBefore);
      first = false;
    }
    if (isSetOutAmountAfter()) {
      if (!first) sb.append(", ");
      sb.append("outAmountAfter:");
      sb.append(this.outAmountAfter);
      first = false;
    }
    if (isSetRecordTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("recordTimestamp:");
      sb.append(this.recordTimestamp);
      first = false;
    }
    if (isSetTicket()) {
      if (!first) sb.append(", ");
      sb.append("ticket:");
      if (this.ticket == null) {
        sb.append("null");
      } else {
        sb.append(this.ticket);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingSubAccountMoneyRecordStandardSchemeFactory implements SchemeFactory {
    public HostingSubAccountMoneyRecordStandardScheme getScheme() {
      return new HostingSubAccountMoneyRecordStandardScheme();
    }
  }

  private static class HostingSubAccountMoneyRecordStandardScheme extends StandardScheme<HostingSubAccountMoneyRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = HostingSubAccountMoneyRecordDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOW_MUCH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.howMuch = iprot.readI64();
              struct.setHowMuchIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OP_SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.opSubUserId = iprot.readI32();
              struct.setOpSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IN_AMOUNT_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inAmountBefore = iprot.readI64();
              struct.setInAmountBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IN_AMOUNT_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inAmountAfter = iprot.readI64();
              struct.setInAmountAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUT_AMOUNT_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outAmountBefore = iprot.readI64();
              struct.setOutAmountBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OUT_AMOUNT_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outAmountAfter = iprot.readI64();
              struct.setOutAmountAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORD_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.recordTimestamp = iprot.readI32();
              struct.setRecordTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticket = iprot.readString();
              struct.setTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetHowMuch()) {
        oprot.writeFieldBegin(HOW_MUCH_FIELD_DESC);
        oprot.writeI64(struct.howMuch);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpSubUserId()) {
        oprot.writeFieldBegin(OP_SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.opSubUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInAmountBefore()) {
        oprot.writeFieldBegin(IN_AMOUNT_BEFORE_FIELD_DESC);
        oprot.writeI64(struct.inAmountBefore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInAmountAfter()) {
        oprot.writeFieldBegin(IN_AMOUNT_AFTER_FIELD_DESC);
        oprot.writeI64(struct.inAmountAfter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutAmountBefore()) {
        oprot.writeFieldBegin(OUT_AMOUNT_BEFORE_FIELD_DESC);
        oprot.writeI64(struct.outAmountBefore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutAmountAfter()) {
        oprot.writeFieldBegin(OUT_AMOUNT_AFTER_FIELD_DESC);
        oprot.writeI64(struct.outAmountAfter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecordTimestamp()) {
        oprot.writeFieldBegin(RECORD_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.recordTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.ticket != null) {
        if (struct.isSetTicket()) {
          oprot.writeFieldBegin(TICKET_FIELD_DESC);
          oprot.writeString(struct.ticket);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingSubAccountMoneyRecordTupleSchemeFactory implements SchemeFactory {
    public HostingSubAccountMoneyRecordTupleScheme getScheme() {
      return new HostingSubAccountMoneyRecordTupleScheme();
    }
  }

  private static class HostingSubAccountMoneyRecordTupleScheme extends TupleScheme<HostingSubAccountMoneyRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetDirection()) {
        optionals.set(1);
      }
      if (struct.isSetHowMuch()) {
        optionals.set(2);
      }
      if (struct.isSetOpSubUserId()) {
        optionals.set(3);
      }
      if (struct.isSetInAmountBefore()) {
        optionals.set(4);
      }
      if (struct.isSetInAmountAfter()) {
        optionals.set(5);
      }
      if (struct.isSetOutAmountBefore()) {
        optionals.set(6);
      }
      if (struct.isSetOutAmountAfter()) {
        optionals.set(7);
      }
      if (struct.isSetRecordTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetTicket()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetHowMuch()) {
        oprot.writeI64(struct.howMuch);
      }
      if (struct.isSetOpSubUserId()) {
        oprot.writeI32(struct.opSubUserId);
      }
      if (struct.isSetInAmountBefore()) {
        oprot.writeI64(struct.inAmountBefore);
      }
      if (struct.isSetInAmountAfter()) {
        oprot.writeI64(struct.inAmountAfter);
      }
      if (struct.isSetOutAmountBefore()) {
        oprot.writeI64(struct.outAmountBefore);
      }
      if (struct.isSetOutAmountAfter()) {
        oprot.writeI64(struct.outAmountAfter);
      }
      if (struct.isSetRecordTimestamp()) {
        oprot.writeI32(struct.recordTimestamp);
      }
      if (struct.isSetTicket()) {
        oprot.writeString(struct.ticket);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.direction = HostingSubAccountMoneyRecordDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.howMuch = iprot.readI64();
        struct.setHowMuchIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opSubUserId = iprot.readI32();
        struct.setOpSubUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.inAmountBefore = iprot.readI64();
        struct.setInAmountBeforeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.inAmountAfter = iprot.readI64();
        struct.setInAmountAfterIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outAmountBefore = iprot.readI64();
        struct.setOutAmountBeforeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outAmountAfter = iprot.readI64();
        struct.setOutAmountAfterIsSet(true);
      }
      if (incoming.get(8)) {
        struct.recordTimestamp = iprot.readI32();
        struct.setRecordTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ticket = iprot.readString();
        struct.setTicketIsSet(true);
      }
    }
  }

}

