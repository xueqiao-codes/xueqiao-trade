/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingExecOrderTradeSummary implements org.apache.thrift.TBase<HostingExecOrderTradeSummary, HostingExecOrderTradeSummary._Fields>, java.io.Serializable, Cloneable, Comparable<HostingExecOrderTradeSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingExecOrderTradeSummary");

  private static final org.apache.thrift.protocol.TField UPSIDE_TRADE_TOTAL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideTradeTotalVolume", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField UPSIDE_TRADE_AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideTradeAveragePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField UPSIDE_TRADE_RESTING_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideTradeRestingVolume", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TRADE_LIST_TOTAL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeListTotalVolume", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField TRADE_LIST_AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeListAveragePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingExecOrderTradeSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingExecOrderTradeSummaryTupleSchemeFactory());
  }

  public int upsideTradeTotalVolume; // optional
  public double upsideTradeAveragePrice; // optional
  public int upsideTradeRestingVolume; // optional
  public int tradeListTotalVolume; // optional
  public double tradeListAveragePrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UPSIDE_TRADE_TOTAL_VOLUME((short)1, "upsideTradeTotalVolume"),
    UPSIDE_TRADE_AVERAGE_PRICE((short)2, "upsideTradeAveragePrice"),
    UPSIDE_TRADE_RESTING_VOLUME((short)3, "upsideTradeRestingVolume"),
    TRADE_LIST_TOTAL_VOLUME((short)6, "tradeListTotalVolume"),
    TRADE_LIST_AVERAGE_PRICE((short)7, "tradeListAveragePrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UPSIDE_TRADE_TOTAL_VOLUME
          return UPSIDE_TRADE_TOTAL_VOLUME;
        case 2: // UPSIDE_TRADE_AVERAGE_PRICE
          return UPSIDE_TRADE_AVERAGE_PRICE;
        case 3: // UPSIDE_TRADE_RESTING_VOLUME
          return UPSIDE_TRADE_RESTING_VOLUME;
        case 6: // TRADE_LIST_TOTAL_VOLUME
          return TRADE_LIST_TOTAL_VOLUME;
        case 7: // TRADE_LIST_AVERAGE_PRICE
          return TRADE_LIST_AVERAGE_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __UPSIDETRADETOTALVOLUME_ISSET_ID = 0;
  private static final int __UPSIDETRADEAVERAGEPRICE_ISSET_ID = 1;
  private static final int __UPSIDETRADERESTINGVOLUME_ISSET_ID = 2;
  private static final int __TRADELISTTOTALVOLUME_ISSET_ID = 3;
  private static final int __TRADELISTAVERAGEPRICE_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.UPSIDE_TRADE_TOTAL_VOLUME,_Fields.UPSIDE_TRADE_AVERAGE_PRICE,_Fields.UPSIDE_TRADE_RESTING_VOLUME,_Fields.TRADE_LIST_TOTAL_VOLUME,_Fields.TRADE_LIST_AVERAGE_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UPSIDE_TRADE_TOTAL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("upsideTradeTotalVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPSIDE_TRADE_AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("upsideTradeAveragePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPSIDE_TRADE_RESTING_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("upsideTradeRestingVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_LIST_TOTAL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeListTotalVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_LIST_AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradeListAveragePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingExecOrderTradeSummary.class, metaDataMap);
  }

  public HostingExecOrderTradeSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingExecOrderTradeSummary(HostingExecOrderTradeSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    this.upsideTradeTotalVolume = other.upsideTradeTotalVolume;
    this.upsideTradeAveragePrice = other.upsideTradeAveragePrice;
    this.upsideTradeRestingVolume = other.upsideTradeRestingVolume;
    this.tradeListTotalVolume = other.tradeListTotalVolume;
    this.tradeListAveragePrice = other.tradeListAveragePrice;
  }

  public HostingExecOrderTradeSummary deepCopy() {
    return new HostingExecOrderTradeSummary(this);
  }

  @Override
  public void clear() {
    setUpsideTradeTotalVolumeIsSet(false);
    this.upsideTradeTotalVolume = 0;
    setUpsideTradeAveragePriceIsSet(false);
    this.upsideTradeAveragePrice = 0.0;
    setUpsideTradeRestingVolumeIsSet(false);
    this.upsideTradeRestingVolume = 0;
    setTradeListTotalVolumeIsSet(false);
    this.tradeListTotalVolume = 0;
    setTradeListAveragePriceIsSet(false);
    this.tradeListAveragePrice = 0.0;
  }

  public int getUpsideTradeTotalVolume() {
    return this.upsideTradeTotalVolume;
  }

  public HostingExecOrderTradeSummary setUpsideTradeTotalVolume(int upsideTradeTotalVolume) {
    this.upsideTradeTotalVolume = upsideTradeTotalVolume;
    setUpsideTradeTotalVolumeIsSet(true);
    return this;
  }

  public void unsetUpsideTradeTotalVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPSIDETRADETOTALVOLUME_ISSET_ID);
  }

  /** Returns true if field upsideTradeTotalVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideTradeTotalVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __UPSIDETRADETOTALVOLUME_ISSET_ID);
  }

  public void setUpsideTradeTotalVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPSIDETRADETOTALVOLUME_ISSET_ID, value);
  }

  public double getUpsideTradeAveragePrice() {
    return this.upsideTradeAveragePrice;
  }

  public HostingExecOrderTradeSummary setUpsideTradeAveragePrice(double upsideTradeAveragePrice) {
    this.upsideTradeAveragePrice = upsideTradeAveragePrice;
    setUpsideTradeAveragePriceIsSet(true);
    return this;
  }

  public void unsetUpsideTradeAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPSIDETRADEAVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field upsideTradeAveragePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideTradeAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UPSIDETRADEAVERAGEPRICE_ISSET_ID);
  }

  public void setUpsideTradeAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPSIDETRADEAVERAGEPRICE_ISSET_ID, value);
  }

  public int getUpsideTradeRestingVolume() {
    return this.upsideTradeRestingVolume;
  }

  public HostingExecOrderTradeSummary setUpsideTradeRestingVolume(int upsideTradeRestingVolume) {
    this.upsideTradeRestingVolume = upsideTradeRestingVolume;
    setUpsideTradeRestingVolumeIsSet(true);
    return this;
  }

  public void unsetUpsideTradeRestingVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPSIDETRADERESTINGVOLUME_ISSET_ID);
  }

  /** Returns true if field upsideTradeRestingVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideTradeRestingVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __UPSIDETRADERESTINGVOLUME_ISSET_ID);
  }

  public void setUpsideTradeRestingVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPSIDETRADERESTINGVOLUME_ISSET_ID, value);
  }

  public int getTradeListTotalVolume() {
    return this.tradeListTotalVolume;
  }

  public HostingExecOrderTradeSummary setTradeListTotalVolume(int tradeListTotalVolume) {
    this.tradeListTotalVolume = tradeListTotalVolume;
    setTradeListTotalVolumeIsSet(true);
    return this;
  }

  public void unsetTradeListTotalVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADELISTTOTALVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeListTotalVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeListTotalVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADELISTTOTALVOLUME_ISSET_ID);
  }

  public void setTradeListTotalVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADELISTTOTALVOLUME_ISSET_ID, value);
  }

  public double getTradeListAveragePrice() {
    return this.tradeListAveragePrice;
  }

  public HostingExecOrderTradeSummary setTradeListAveragePrice(double tradeListAveragePrice) {
    this.tradeListAveragePrice = tradeListAveragePrice;
    setTradeListAveragePriceIsSet(true);
    return this;
  }

  public void unsetTradeListAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADELISTAVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field tradeListAveragePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeListAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADELISTAVERAGEPRICE_ISSET_ID);
  }

  public void setTradeListAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADELISTAVERAGEPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UPSIDE_TRADE_TOTAL_VOLUME:
      if (value == null) {
        unsetUpsideTradeTotalVolume();
      } else {
        setUpsideTradeTotalVolume((Integer)value);
      }
      break;

    case UPSIDE_TRADE_AVERAGE_PRICE:
      if (value == null) {
        unsetUpsideTradeAveragePrice();
      } else {
        setUpsideTradeAveragePrice((Double)value);
      }
      break;

    case UPSIDE_TRADE_RESTING_VOLUME:
      if (value == null) {
        unsetUpsideTradeRestingVolume();
      } else {
        setUpsideTradeRestingVolume((Integer)value);
      }
      break;

    case TRADE_LIST_TOTAL_VOLUME:
      if (value == null) {
        unsetTradeListTotalVolume();
      } else {
        setTradeListTotalVolume((Integer)value);
      }
      break;

    case TRADE_LIST_AVERAGE_PRICE:
      if (value == null) {
        unsetTradeListAveragePrice();
      } else {
        setTradeListAveragePrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UPSIDE_TRADE_TOTAL_VOLUME:
      return Integer.valueOf(getUpsideTradeTotalVolume());

    case UPSIDE_TRADE_AVERAGE_PRICE:
      return Double.valueOf(getUpsideTradeAveragePrice());

    case UPSIDE_TRADE_RESTING_VOLUME:
      return Integer.valueOf(getUpsideTradeRestingVolume());

    case TRADE_LIST_TOTAL_VOLUME:
      return Integer.valueOf(getTradeListTotalVolume());

    case TRADE_LIST_AVERAGE_PRICE:
      return Double.valueOf(getTradeListAveragePrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UPSIDE_TRADE_TOTAL_VOLUME:
      return isSetUpsideTradeTotalVolume();
    case UPSIDE_TRADE_AVERAGE_PRICE:
      return isSetUpsideTradeAveragePrice();
    case UPSIDE_TRADE_RESTING_VOLUME:
      return isSetUpsideTradeRestingVolume();
    case TRADE_LIST_TOTAL_VOLUME:
      return isSetTradeListTotalVolume();
    case TRADE_LIST_AVERAGE_PRICE:
      return isSetTradeListAveragePrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingExecOrderTradeSummary)
      return this.equals((HostingExecOrderTradeSummary)that);
    return false;
  }

  public boolean equals(HostingExecOrderTradeSummary that) {
    if (that == null)
      return false;

    boolean this_present_upsideTradeTotalVolume = true && this.isSetUpsideTradeTotalVolume();
    boolean that_present_upsideTradeTotalVolume = true && that.isSetUpsideTradeTotalVolume();
    if (this_present_upsideTradeTotalVolume || that_present_upsideTradeTotalVolume) {
      if (!(this_present_upsideTradeTotalVolume && that_present_upsideTradeTotalVolume))
        return false;
      if (this.upsideTradeTotalVolume != that.upsideTradeTotalVolume)
        return false;
    }

    boolean this_present_upsideTradeAveragePrice = true && this.isSetUpsideTradeAveragePrice();
    boolean that_present_upsideTradeAveragePrice = true && that.isSetUpsideTradeAveragePrice();
    if (this_present_upsideTradeAveragePrice || that_present_upsideTradeAveragePrice) {
      if (!(this_present_upsideTradeAveragePrice && that_present_upsideTradeAveragePrice))
        return false;
      if (this.upsideTradeAveragePrice != that.upsideTradeAveragePrice)
        return false;
    }

    boolean this_present_upsideTradeRestingVolume = true && this.isSetUpsideTradeRestingVolume();
    boolean that_present_upsideTradeRestingVolume = true && that.isSetUpsideTradeRestingVolume();
    if (this_present_upsideTradeRestingVolume || that_present_upsideTradeRestingVolume) {
      if (!(this_present_upsideTradeRestingVolume && that_present_upsideTradeRestingVolume))
        return false;
      if (this.upsideTradeRestingVolume != that.upsideTradeRestingVolume)
        return false;
    }

    boolean this_present_tradeListTotalVolume = true && this.isSetTradeListTotalVolume();
    boolean that_present_tradeListTotalVolume = true && that.isSetTradeListTotalVolume();
    if (this_present_tradeListTotalVolume || that_present_tradeListTotalVolume) {
      if (!(this_present_tradeListTotalVolume && that_present_tradeListTotalVolume))
        return false;
      if (this.tradeListTotalVolume != that.tradeListTotalVolume)
        return false;
    }

    boolean this_present_tradeListAveragePrice = true && this.isSetTradeListAveragePrice();
    boolean that_present_tradeListAveragePrice = true && that.isSetTradeListAveragePrice();
    if (this_present_tradeListAveragePrice || that_present_tradeListAveragePrice) {
      if (!(this_present_tradeListAveragePrice && that_present_tradeListAveragePrice))
        return false;
      if (this.tradeListAveragePrice != that.tradeListAveragePrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingExecOrderTradeSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUpsideTradeTotalVolume()).compareTo(other.isSetUpsideTradeTotalVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideTradeTotalVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideTradeTotalVolume, other.upsideTradeTotalVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpsideTradeAveragePrice()).compareTo(other.isSetUpsideTradeAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideTradeAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideTradeAveragePrice, other.upsideTradeAveragePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpsideTradeRestingVolume()).compareTo(other.isSetUpsideTradeRestingVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideTradeRestingVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideTradeRestingVolume, other.upsideTradeRestingVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeListTotalVolume()).compareTo(other.isSetTradeListTotalVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeListTotalVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeListTotalVolume, other.tradeListTotalVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeListAveragePrice()).compareTo(other.isSetTradeListAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeListAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeListAveragePrice, other.tradeListAveragePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingExecOrderTradeSummary(");
    boolean first = true;

    if (isSetUpsideTradeTotalVolume()) {
      sb.append("upsideTradeTotalVolume:");
      sb.append(this.upsideTradeTotalVolume);
      first = false;
    }
    if (isSetUpsideTradeAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("upsideTradeAveragePrice:");
      sb.append(this.upsideTradeAveragePrice);
      first = false;
    }
    if (isSetUpsideTradeRestingVolume()) {
      if (!first) sb.append(", ");
      sb.append("upsideTradeRestingVolume:");
      sb.append(this.upsideTradeRestingVolume);
      first = false;
    }
    if (isSetTradeListTotalVolume()) {
      if (!first) sb.append(", ");
      sb.append("tradeListTotalVolume:");
      sb.append(this.tradeListTotalVolume);
      first = false;
    }
    if (isSetTradeListAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradeListAveragePrice:");
      sb.append(this.tradeListAveragePrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingExecOrderTradeSummaryStandardSchemeFactory implements SchemeFactory {
    public HostingExecOrderTradeSummaryStandardScheme getScheme() {
      return new HostingExecOrderTradeSummaryStandardScheme();
    }
  }

  private static class HostingExecOrderTradeSummaryStandardScheme extends StandardScheme<HostingExecOrderTradeSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingExecOrderTradeSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UPSIDE_TRADE_TOTAL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upsideTradeTotalVolume = iprot.readI32();
              struct.setUpsideTradeTotalVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UPSIDE_TRADE_AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upsideTradeAveragePrice = iprot.readDouble();
              struct.setUpsideTradeAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UPSIDE_TRADE_RESTING_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upsideTradeRestingVolume = iprot.readI32();
              struct.setUpsideTradeRestingVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_LIST_TOTAL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeListTotalVolume = iprot.readI32();
              struct.setTradeListTotalVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TRADE_LIST_AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradeListAveragePrice = iprot.readDouble();
              struct.setTradeListAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingExecOrderTradeSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUpsideTradeTotalVolume()) {
        oprot.writeFieldBegin(UPSIDE_TRADE_TOTAL_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.upsideTradeTotalVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpsideTradeAveragePrice()) {
        oprot.writeFieldBegin(UPSIDE_TRADE_AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.upsideTradeAveragePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpsideTradeRestingVolume()) {
        oprot.writeFieldBegin(UPSIDE_TRADE_RESTING_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.upsideTradeRestingVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeListTotalVolume()) {
        oprot.writeFieldBegin(TRADE_LIST_TOTAL_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.tradeListTotalVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeListAveragePrice()) {
        oprot.writeFieldBegin(TRADE_LIST_AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradeListAveragePrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingExecOrderTradeSummaryTupleSchemeFactory implements SchemeFactory {
    public HostingExecOrderTradeSummaryTupleScheme getScheme() {
      return new HostingExecOrderTradeSummaryTupleScheme();
    }
  }

  private static class HostingExecOrderTradeSummaryTupleScheme extends TupleScheme<HostingExecOrderTradeSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderTradeSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUpsideTradeTotalVolume()) {
        optionals.set(0);
      }
      if (struct.isSetUpsideTradeAveragePrice()) {
        optionals.set(1);
      }
      if (struct.isSetUpsideTradeRestingVolume()) {
        optionals.set(2);
      }
      if (struct.isSetTradeListTotalVolume()) {
        optionals.set(3);
      }
      if (struct.isSetTradeListAveragePrice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetUpsideTradeTotalVolume()) {
        oprot.writeI32(struct.upsideTradeTotalVolume);
      }
      if (struct.isSetUpsideTradeAveragePrice()) {
        oprot.writeDouble(struct.upsideTradeAveragePrice);
      }
      if (struct.isSetUpsideTradeRestingVolume()) {
        oprot.writeI32(struct.upsideTradeRestingVolume);
      }
      if (struct.isSetTradeListTotalVolume()) {
        oprot.writeI32(struct.tradeListTotalVolume);
      }
      if (struct.isSetTradeListAveragePrice()) {
        oprot.writeDouble(struct.tradeListAveragePrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingExecOrderTradeSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.upsideTradeTotalVolume = iprot.readI32();
        struct.setUpsideTradeTotalVolumeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.upsideTradeAveragePrice = iprot.readDouble();
        struct.setUpsideTradeAveragePriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.upsideTradeRestingVolume = iprot.readI32();
        struct.setUpsideTradeRestingVolumeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradeListTotalVolume = iprot.readI32();
        struct.setTradeListTotalVolumeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeListAveragePrice = iprot.readDouble();
        struct.setTradeListAveragePriceIsSet(true);
      }
    }
  }

}

