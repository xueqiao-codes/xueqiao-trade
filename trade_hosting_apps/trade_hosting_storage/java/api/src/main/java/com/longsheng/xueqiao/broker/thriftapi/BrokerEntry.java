/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.broker.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BrokerEntry implements org.apache.thrift.TBase<BrokerEntry, BrokerEntry._Fields>, java.io.Serializable, Cloneable, Comparable<BrokerEntry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BrokerEntry");

  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField NOTE_FIELD_DESC = new org.apache.thrift.protocol.TField("note", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BrokerEntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BrokerEntryTupleSchemeFactory());
  }

  public int brokerId; // optional
  public String engName; // optional
  public String cnName; // optional
  public String note; // optional
  public long lastModityTimestamp; // optional
  public long createTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ID((short)1, "brokerId"),
    ENG_NAME((short)2, "engName"),
    CN_NAME((short)3, "cnName"),
    NOTE((short)4, "note"),
    LAST_MODITY_TIMESTAMP((short)6, "lastModityTimestamp"),
    CREATE_TIMESTAMP((short)7, "createTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ID
          return BROKER_ID;
        case 2: // ENG_NAME
          return ENG_NAME;
        case 3: // CN_NAME
          return CN_NAME;
        case 4: // NOTE
          return NOTE;
        case 6: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        case 7: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BROKERID_ISSET_ID = 0;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.BROKER_ID,_Fields.ENG_NAME,_Fields.CN_NAME,_Fields.NOTE,_Fields.LAST_MODITY_TIMESTAMP,_Fields.CREATE_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE, new org.apache.thrift.meta_data.FieldMetaData("note", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BrokerEntry.class, metaDataMap);
  }

  public BrokerEntry() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BrokerEntry(BrokerEntry other) {
    __isset_bitfield = other.__isset_bitfield;
    this.brokerId = other.brokerId;
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetNote()) {
      this.note = other.note;
    }
    this.lastModityTimestamp = other.lastModityTimestamp;
    this.createTimestamp = other.createTimestamp;
  }

  public BrokerEntry deepCopy() {
    return new BrokerEntry(this);
  }

  @Override
  public void clear() {
    setBrokerIdIsSet(false);
    this.brokerId = 0;
    this.engName = null;
    this.cnName = null;
    this.note = null;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
  }

  public int getBrokerId() {
    return this.brokerId;
  }

  public BrokerEntry setBrokerId(int brokerId) {
    this.brokerId = brokerId;
    setBrokerIdIsSet(true);
    return this;
  }

  public void unsetBrokerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  /** Returns true if field brokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  public void setBrokerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERID_ISSET_ID, value);
  }

  public String getEngName() {
    return this.engName;
  }

  public BrokerEntry setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public BrokerEntry setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getNote() {
    return this.note;
  }

  public BrokerEntry setNote(String note) {
    this.note = note;
    return this;
  }

  public void unsetNote() {
    this.note = null;
  }

  /** Returns true if field note is set (has been assigned a value) and false otherwise */
  public boolean isSetNote() {
    return this.note != null;
  }

  public void setNoteIsSet(boolean value) {
    if (!value) {
      this.note = null;
    }
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public BrokerEntry setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public BrokerEntry setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ID:
      if (value == null) {
        unsetBrokerId();
      } else {
        setBrokerId((Integer)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case NOTE:
      if (value == null) {
        unsetNote();
      } else {
        setNote((String)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ID:
      return Integer.valueOf(getBrokerId());

    case ENG_NAME:
      return getEngName();

    case CN_NAME:
      return getCnName();

    case NOTE:
      return getNote();

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ID:
      return isSetBrokerId();
    case ENG_NAME:
      return isSetEngName();
    case CN_NAME:
      return isSetCnName();
    case NOTE:
      return isSetNote();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BrokerEntry)
      return this.equals((BrokerEntry)that);
    return false;
  }

  public boolean equals(BrokerEntry that) {
    if (that == null)
      return false;

    boolean this_present_brokerId = true && this.isSetBrokerId();
    boolean that_present_brokerId = true && that.isSetBrokerId();
    if (this_present_brokerId || that_present_brokerId) {
      if (!(this_present_brokerId && that_present_brokerId))
        return false;
      if (this.brokerId != that.brokerId)
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_note = true && this.isSetNote();
    boolean that_present_note = true && that.isSetNote();
    if (this_present_note || that_present_note) {
      if (!(this_present_note && that_present_note))
        return false;
      if (!this.note.equals(that.note))
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BrokerEntry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerId()).compareTo(other.isSetBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerId, other.brokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNote()).compareTo(other.isSetNote());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNote()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.note, other.note);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BrokerEntry(");
    boolean first = true;

    if (isSetBrokerId()) {
      sb.append("brokerId:");
      sb.append(this.brokerId);
      first = false;
    }
    if (isSetEngName()) {
      if (!first) sb.append(", ");
      sb.append("engName:");
      if (this.engName == null) {
        sb.append("null");
      } else {
        sb.append(this.engName);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetNote()) {
      if (!first) sb.append(", ");
      sb.append("note:");
      if (this.note == null) {
        sb.append("null");
      } else {
        sb.append(this.note);
      }
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BrokerEntryStandardSchemeFactory implements SchemeFactory {
    public BrokerEntryStandardScheme getScheme() {
      return new BrokerEntryStandardScheme();
    }
  }

  private static class BrokerEntryStandardScheme extends StandardScheme<BrokerEntry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BrokerEntry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerId = iprot.readI32();
              struct.setBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NOTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.note = iprot.readString();
              struct.setNoteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BrokerEntry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetBrokerId()) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerId);
        oprot.writeFieldEnd();
      }
      if (struct.engName != null) {
        if (struct.isSetEngName()) {
          oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.engName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.note != null) {
        if (struct.isSetNote()) {
          oprot.writeFieldBegin(NOTE_FIELD_DESC);
          oprot.writeString(struct.note);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BrokerEntryTupleSchemeFactory implements SchemeFactory {
    public BrokerEntryTupleScheme getScheme() {
      return new BrokerEntryTupleScheme();
    }
  }

  private static class BrokerEntryTupleScheme extends TupleScheme<BrokerEntry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BrokerEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerId()) {
        optionals.set(0);
      }
      if (struct.isSetEngName()) {
        optionals.set(1);
      }
      if (struct.isSetCnName()) {
        optionals.set(2);
      }
      if (struct.isSetNote()) {
        optionals.set(3);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetBrokerId()) {
        oprot.writeI32(struct.brokerId);
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetNote()) {
        oprot.writeString(struct.note);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BrokerEntry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.brokerId = iprot.readI32();
        struct.setBrokerIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.note = iprot.readString();
        struct.setNoteIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
    }
  }

}

