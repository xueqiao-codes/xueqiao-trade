/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledCommodityConfig implements org.apache.thrift.TBase<SledCommodityConfig, SledCommodityConfig._Fields>, java.io.Serializable, Cloneable, Comparable<SledCommodityConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledCommodityConfig");

  private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DELIVERY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DELIVERY_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryDays", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MAX_SINGLE_ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSingleOrderVol", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_HOLD_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHoldVol", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COMMISSION_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionCalculateMode", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField MARGIN_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginCalculateMode", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("initialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("maintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField SELL_INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellInitialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField SELL_MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellMaintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField LOCK_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lockMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField MEASURE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("measureUnit", org.apache.thrift.protocol.TType.STRING, (short)34);
  private static final org.apache.thrift.protocol.TField CHARGE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeUnit", org.apache.thrift.protocol.TType.DOUBLE, (short)35);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledCommodityConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledCommodityConfigTupleSchemeFactory());
  }

  public int configId; // optional
  /**
   * 
   * @see DeliveryMode
   */
  public DeliveryMode deliveryMode; // optional
  public int deliveryDays; // optional
  public int maxSingleOrderVol; // optional
  public int maxHoldVol; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode commissionCalculateMode; // optional
  public double openCloseFee; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode marginCalculateMode; // optional
  public double initialMargin; // optional
  public double maintenanceMargin; // optional
  public double sellInitialMargin; // optional
  public double sellMaintenanceMargin; // optional
  public double lockMargin; // optional
  public long activeStartTimestamp; // optional
  public long activeEndTimestamp; // optional
  public String measureUnit; // optional
  public double chargeUnit; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONFIG_ID((short)1, "configId"),
    /**
     * 
     * @see DeliveryMode
     */
    DELIVERY_MODE((short)12, "deliveryMode"),
    DELIVERY_DAYS((short)13, "deliveryDays"),
    MAX_SINGLE_ORDER_VOL((short)17, "maxSingleOrderVol"),
    MAX_HOLD_VOL((short)18, "maxHoldVol"),
    /**
     * 
     * @see CalculateMode
     */
    COMMISSION_CALCULATE_MODE((short)20, "commissionCalculateMode"),
    OPEN_CLOSE_FEE((short)21, "openCloseFee"),
    /**
     * 
     * @see CalculateMode
     */
    MARGIN_CALCULATE_MODE((short)26, "marginCalculateMode"),
    INITIAL_MARGIN((short)27, "initialMargin"),
    MAINTENANCE_MARGIN((short)28, "maintenanceMargin"),
    SELL_INITIAL_MARGIN((short)29, "sellInitialMargin"),
    SELL_MAINTENANCE_MARGIN((short)30, "sellMaintenanceMargin"),
    LOCK_MARGIN((short)31, "lockMargin"),
    ACTIVE_START_TIMESTAMP((short)32, "activeStartTimestamp"),
    ACTIVE_END_TIMESTAMP((short)33, "activeEndTimestamp"),
    MEASURE_UNIT((short)34, "measureUnit"),
    CHARGE_UNIT((short)35, "chargeUnit"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONFIG_ID
          return CONFIG_ID;
        case 12: // DELIVERY_MODE
          return DELIVERY_MODE;
        case 13: // DELIVERY_DAYS
          return DELIVERY_DAYS;
        case 17: // MAX_SINGLE_ORDER_VOL
          return MAX_SINGLE_ORDER_VOL;
        case 18: // MAX_HOLD_VOL
          return MAX_HOLD_VOL;
        case 20: // COMMISSION_CALCULATE_MODE
          return COMMISSION_CALCULATE_MODE;
        case 21: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 26: // MARGIN_CALCULATE_MODE
          return MARGIN_CALCULATE_MODE;
        case 27: // INITIAL_MARGIN
          return INITIAL_MARGIN;
        case 28: // MAINTENANCE_MARGIN
          return MAINTENANCE_MARGIN;
        case 29: // SELL_INITIAL_MARGIN
          return SELL_INITIAL_MARGIN;
        case 30: // SELL_MAINTENANCE_MARGIN
          return SELL_MAINTENANCE_MARGIN;
        case 31: // LOCK_MARGIN
          return LOCK_MARGIN;
        case 32: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 33: // ACTIVE_END_TIMESTAMP
          return ACTIVE_END_TIMESTAMP;
        case 34: // MEASURE_UNIT
          return MEASURE_UNIT;
        case 35: // CHARGE_UNIT
          return CHARGE_UNIT;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONFIGID_ISSET_ID = 0;
  private static final int __DELIVERYDAYS_ISSET_ID = 1;
  private static final int __MAXSINGLEORDERVOL_ISSET_ID = 2;
  private static final int __MAXHOLDVOL_ISSET_ID = 3;
  private static final int __OPENCLOSEFEE_ISSET_ID = 4;
  private static final int __INITIALMARGIN_ISSET_ID = 5;
  private static final int __MAINTENANCEMARGIN_ISSET_ID = 6;
  private static final int __SELLINITIALMARGIN_ISSET_ID = 7;
  private static final int __SELLMAINTENANCEMARGIN_ISSET_ID = 8;
  private static final int __LOCKMARGIN_ISSET_ID = 9;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 10;
  private static final int __ACTIVEENDTIMESTAMP_ISSET_ID = 11;
  private static final int __CHARGEUNIT_ISSET_ID = 12;
  private static final int __CREATETIMESTAMP_ISSET_ID = 13;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CONFIG_ID,_Fields.DELIVERY_MODE,_Fields.DELIVERY_DAYS,_Fields.MAX_SINGLE_ORDER_VOL,_Fields.MAX_HOLD_VOL,_Fields.COMMISSION_CALCULATE_MODE,_Fields.OPEN_CLOSE_FEE,_Fields.MARGIN_CALCULATE_MODE,_Fields.INITIAL_MARGIN,_Fields.MAINTENANCE_MARGIN,_Fields.SELL_INITIAL_MARGIN,_Fields.SELL_MAINTENANCE_MARGIN,_Fields.LOCK_MARGIN,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVE_END_TIMESTAMP,_Fields.MEASURE_UNIT,_Fields.CHARGE_UNIT,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DELIVERY_MODE, new org.apache.thrift.meta_data.FieldMetaData("deliveryMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DeliveryMode.class)));
    tmpMap.put(_Fields.DELIVERY_DAYS, new org.apache.thrift.meta_data.FieldMetaData("deliveryDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SINGLE_ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxSingleOrderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_HOLD_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxHoldVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMISSION_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("commissionCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARGIN_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("marginCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    tmpMap.put(_Fields.INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("initialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("maintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellInitialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellMaintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCK_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("lockMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEASURE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("measureUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHARGE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("chargeUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledCommodityConfig.class, metaDataMap);
  }

  public SledCommodityConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledCommodityConfig(SledCommodityConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.configId = other.configId;
    if (other.isSetDeliveryMode()) {
      this.deliveryMode = other.deliveryMode;
    }
    this.deliveryDays = other.deliveryDays;
    this.maxSingleOrderVol = other.maxSingleOrderVol;
    this.maxHoldVol = other.maxHoldVol;
    if (other.isSetCommissionCalculateMode()) {
      this.commissionCalculateMode = other.commissionCalculateMode;
    }
    this.openCloseFee = other.openCloseFee;
    if (other.isSetMarginCalculateMode()) {
      this.marginCalculateMode = other.marginCalculateMode;
    }
    this.initialMargin = other.initialMargin;
    this.maintenanceMargin = other.maintenanceMargin;
    this.sellInitialMargin = other.sellInitialMargin;
    this.sellMaintenanceMargin = other.sellMaintenanceMargin;
    this.lockMargin = other.lockMargin;
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activeEndTimestamp = other.activeEndTimestamp;
    if (other.isSetMeasureUnit()) {
      this.measureUnit = other.measureUnit;
    }
    this.chargeUnit = other.chargeUnit;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public SledCommodityConfig deepCopy() {
    return new SledCommodityConfig(this);
  }

  @Override
  public void clear() {
    setConfigIdIsSet(false);
    this.configId = 0;
    this.deliveryMode = null;
    setDeliveryDaysIsSet(false);
    this.deliveryDays = 0;
    setMaxSingleOrderVolIsSet(false);
    this.maxSingleOrderVol = 0;
    setMaxHoldVolIsSet(false);
    this.maxHoldVol = 0;
    this.commissionCalculateMode = null;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    this.marginCalculateMode = null;
    setInitialMarginIsSet(false);
    this.initialMargin = 0.0;
    setMaintenanceMarginIsSet(false);
    this.maintenanceMargin = 0.0;
    setSellInitialMarginIsSet(false);
    this.sellInitialMargin = 0.0;
    setSellMaintenanceMarginIsSet(false);
    this.sellMaintenanceMargin = 0.0;
    setLockMarginIsSet(false);
    this.lockMargin = 0.0;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActiveEndTimestampIsSet(false);
    this.activeEndTimestamp = 0;
    this.measureUnit = null;
    setChargeUnitIsSet(false);
    this.chargeUnit = 0.0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getConfigId() {
    return this.configId;
  }

  public SledCommodityConfig setConfigId(int configId) {
    this.configId = configId;
    setConfigIdIsSet(true);
    return this;
  }

  public void unsetConfigId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  /** Returns true if field configId is set (has been assigned a value) and false otherwise */
  public boolean isSetConfigId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONFIGID_ISSET_ID);
  }

  public void setConfigIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONFIGID_ISSET_ID, value);
  }

  /**
   * 
   * @see DeliveryMode
   */
  public DeliveryMode getDeliveryMode() {
    return this.deliveryMode;
  }

  /**
   * 
   * @see DeliveryMode
   */
  public SledCommodityConfig setDeliveryMode(DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  public void unsetDeliveryMode() {
    this.deliveryMode = null;
  }

  /** Returns true if field deliveryMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMode() {
    return this.deliveryMode != null;
  }

  public void setDeliveryModeIsSet(boolean value) {
    if (!value) {
      this.deliveryMode = null;
    }
  }

  public int getDeliveryDays() {
    return this.deliveryDays;
  }

  public SledCommodityConfig setDeliveryDays(int deliveryDays) {
    this.deliveryDays = deliveryDays;
    setDeliveryDaysIsSet(true);
    return this;
  }

  public void unsetDeliveryDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  /** Returns true if field deliveryDays is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryDays() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  public void setDeliveryDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID, value);
  }

  public int getMaxSingleOrderVol() {
    return this.maxSingleOrderVol;
  }

  public SledCommodityConfig setMaxSingleOrderVol(int maxSingleOrderVol) {
    this.maxSingleOrderVol = maxSingleOrderVol;
    setMaxSingleOrderVolIsSet(true);
    return this;
  }

  public void unsetMaxSingleOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  /** Returns true if field maxSingleOrderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSingleOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  public void setMaxSingleOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID, value);
  }

  public int getMaxHoldVol() {
    return this.maxHoldVol;
  }

  public SledCommodityConfig setMaxHoldVol(int maxHoldVol) {
    this.maxHoldVol = maxHoldVol;
    setMaxHoldVolIsSet(true);
    return this;
  }

  public void unsetMaxHoldVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  /** Returns true if field maxHoldVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHoldVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  public void setMaxHoldVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID, value);
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getCommissionCalculateMode() {
    return this.commissionCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public SledCommodityConfig setCommissionCalculateMode(CalculateMode commissionCalculateMode) {
    this.commissionCalculateMode = commissionCalculateMode;
    return this;
  }

  public void unsetCommissionCalculateMode() {
    this.commissionCalculateMode = null;
  }

  /** Returns true if field commissionCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionCalculateMode() {
    return this.commissionCalculateMode != null;
  }

  public void setCommissionCalculateModeIsSet(boolean value) {
    if (!value) {
      this.commissionCalculateMode = null;
    }
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public SledCommodityConfig setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getMarginCalculateMode() {
    return this.marginCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public SledCommodityConfig setMarginCalculateMode(CalculateMode marginCalculateMode) {
    this.marginCalculateMode = marginCalculateMode;
    return this;
  }

  public void unsetMarginCalculateMode() {
    this.marginCalculateMode = null;
  }

  /** Returns true if field marginCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginCalculateMode() {
    return this.marginCalculateMode != null;
  }

  public void setMarginCalculateModeIsSet(boolean value) {
    if (!value) {
      this.marginCalculateMode = null;
    }
  }

  public double getInitialMargin() {
    return this.initialMargin;
  }

  public SledCommodityConfig setInitialMargin(double initialMargin) {
    this.initialMargin = initialMargin;
    setInitialMarginIsSet(true);
    return this;
  }

  public void unsetInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field initialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  public void setInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID, value);
  }

  public double getMaintenanceMargin() {
    return this.maintenanceMargin;
  }

  public SledCommodityConfig setMaintenanceMargin(double maintenanceMargin) {
    this.maintenanceMargin = maintenanceMargin;
    setMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field maintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  public void setMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getSellInitialMargin() {
    return this.sellInitialMargin;
  }

  public SledCommodityConfig setSellInitialMargin(double sellInitialMargin) {
    this.sellInitialMargin = sellInitialMargin;
    setSellInitialMarginIsSet(true);
    return this;
  }

  public void unsetSellInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field sellInitialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  public void setSellInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID, value);
  }

  public double getSellMaintenanceMargin() {
    return this.sellMaintenanceMargin;
  }

  public SledCommodityConfig setSellMaintenanceMargin(double sellMaintenanceMargin) {
    this.sellMaintenanceMargin = sellMaintenanceMargin;
    setSellMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetSellMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field sellMaintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  public void setSellMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getLockMargin() {
    return this.lockMargin;
  }

  public SledCommodityConfig setLockMargin(double lockMargin) {
    this.lockMargin = lockMargin;
    setLockMarginIsSet(true);
    return this;
  }

  public void unsetLockMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  /** Returns true if field lockMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLockMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  public void setLockMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID, value);
  }

  public long getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public SledCommodityConfig setActiveStartTimestamp(long activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getActiveEndTimestamp() {
    return this.activeEndTimestamp;
  }

  public SledCommodityConfig setActiveEndTimestamp(long activeEndTimestamp) {
    this.activeEndTimestamp = activeEndTimestamp;
    setActiveEndTimestampIsSet(true);
    return this;
  }

  public void unsetActiveEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  public void setActiveEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID, value);
  }

  public String getMeasureUnit() {
    return this.measureUnit;
  }

  public SledCommodityConfig setMeasureUnit(String measureUnit) {
    this.measureUnit = measureUnit;
    return this;
  }

  public void unsetMeasureUnit() {
    this.measureUnit = null;
  }

  /** Returns true if field measureUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasureUnit() {
    return this.measureUnit != null;
  }

  public void setMeasureUnitIsSet(boolean value) {
    if (!value) {
      this.measureUnit = null;
    }
  }

  public double getChargeUnit() {
    return this.chargeUnit;
  }

  public SledCommodityConfig setChargeUnit(double chargeUnit) {
    this.chargeUnit = chargeUnit;
    setChargeUnitIsSet(true);
    return this;
  }

  public void unsetChargeUnit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID);
  }

  /** Returns true if field chargeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeUnit() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID);
  }

  public void setChargeUnitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledCommodityConfig setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public SledCommodityConfig setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONFIG_ID:
      if (value == null) {
        unsetConfigId();
      } else {
        setConfigId((Integer)value);
      }
      break;

    case DELIVERY_MODE:
      if (value == null) {
        unsetDeliveryMode();
      } else {
        setDeliveryMode((DeliveryMode)value);
      }
      break;

    case DELIVERY_DAYS:
      if (value == null) {
        unsetDeliveryDays();
      } else {
        setDeliveryDays((Integer)value);
      }
      break;

    case MAX_SINGLE_ORDER_VOL:
      if (value == null) {
        unsetMaxSingleOrderVol();
      } else {
        setMaxSingleOrderVol((Integer)value);
      }
      break;

    case MAX_HOLD_VOL:
      if (value == null) {
        unsetMaxHoldVol();
      } else {
        setMaxHoldVol((Integer)value);
      }
      break;

    case COMMISSION_CALCULATE_MODE:
      if (value == null) {
        unsetCommissionCalculateMode();
      } else {
        setCommissionCalculateMode((CalculateMode)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case MARGIN_CALCULATE_MODE:
      if (value == null) {
        unsetMarginCalculateMode();
      } else {
        setMarginCalculateMode((CalculateMode)value);
      }
      break;

    case INITIAL_MARGIN:
      if (value == null) {
        unsetInitialMargin();
      } else {
        setInitialMargin((Double)value);
      }
      break;

    case MAINTENANCE_MARGIN:
      if (value == null) {
        unsetMaintenanceMargin();
      } else {
        setMaintenanceMargin((Double)value);
      }
      break;

    case SELL_INITIAL_MARGIN:
      if (value == null) {
        unsetSellInitialMargin();
      } else {
        setSellInitialMargin((Double)value);
      }
      break;

    case SELL_MAINTENANCE_MARGIN:
      if (value == null) {
        unsetSellMaintenanceMargin();
      } else {
        setSellMaintenanceMargin((Double)value);
      }
      break;

    case LOCK_MARGIN:
      if (value == null) {
        unsetLockMargin();
      } else {
        setLockMargin((Double)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Long)value);
      }
      break;

    case ACTIVE_END_TIMESTAMP:
      if (value == null) {
        unsetActiveEndTimestamp();
      } else {
        setActiveEndTimestamp((Long)value);
      }
      break;

    case MEASURE_UNIT:
      if (value == null) {
        unsetMeasureUnit();
      } else {
        setMeasureUnit((String)value);
      }
      break;

    case CHARGE_UNIT:
      if (value == null) {
        unsetChargeUnit();
      } else {
        setChargeUnit((Double)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONFIG_ID:
      return Integer.valueOf(getConfigId());

    case DELIVERY_MODE:
      return getDeliveryMode();

    case DELIVERY_DAYS:
      return Integer.valueOf(getDeliveryDays());

    case MAX_SINGLE_ORDER_VOL:
      return Integer.valueOf(getMaxSingleOrderVol());

    case MAX_HOLD_VOL:
      return Integer.valueOf(getMaxHoldVol());

    case COMMISSION_CALCULATE_MODE:
      return getCommissionCalculateMode();

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case MARGIN_CALCULATE_MODE:
      return getMarginCalculateMode();

    case INITIAL_MARGIN:
      return Double.valueOf(getInitialMargin());

    case MAINTENANCE_MARGIN:
      return Double.valueOf(getMaintenanceMargin());

    case SELL_INITIAL_MARGIN:
      return Double.valueOf(getSellInitialMargin());

    case SELL_MAINTENANCE_MARGIN:
      return Double.valueOf(getSellMaintenanceMargin());

    case LOCK_MARGIN:
      return Double.valueOf(getLockMargin());

    case ACTIVE_START_TIMESTAMP:
      return Long.valueOf(getActiveStartTimestamp());

    case ACTIVE_END_TIMESTAMP:
      return Long.valueOf(getActiveEndTimestamp());

    case MEASURE_UNIT:
      return getMeasureUnit();

    case CHARGE_UNIT:
      return Double.valueOf(getChargeUnit());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONFIG_ID:
      return isSetConfigId();
    case DELIVERY_MODE:
      return isSetDeliveryMode();
    case DELIVERY_DAYS:
      return isSetDeliveryDays();
    case MAX_SINGLE_ORDER_VOL:
      return isSetMaxSingleOrderVol();
    case MAX_HOLD_VOL:
      return isSetMaxHoldVol();
    case COMMISSION_CALCULATE_MODE:
      return isSetCommissionCalculateMode();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case MARGIN_CALCULATE_MODE:
      return isSetMarginCalculateMode();
    case INITIAL_MARGIN:
      return isSetInitialMargin();
    case MAINTENANCE_MARGIN:
      return isSetMaintenanceMargin();
    case SELL_INITIAL_MARGIN:
      return isSetSellInitialMargin();
    case SELL_MAINTENANCE_MARGIN:
      return isSetSellMaintenanceMargin();
    case LOCK_MARGIN:
      return isSetLockMargin();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVE_END_TIMESTAMP:
      return isSetActiveEndTimestamp();
    case MEASURE_UNIT:
      return isSetMeasureUnit();
    case CHARGE_UNIT:
      return isSetChargeUnit();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledCommodityConfig)
      return this.equals((SledCommodityConfig)that);
    return false;
  }

  public boolean equals(SledCommodityConfig that) {
    if (that == null)
      return false;

    boolean this_present_configId = true && this.isSetConfigId();
    boolean that_present_configId = true && that.isSetConfigId();
    if (this_present_configId || that_present_configId) {
      if (!(this_present_configId && that_present_configId))
        return false;
      if (this.configId != that.configId)
        return false;
    }

    boolean this_present_deliveryMode = true && this.isSetDeliveryMode();
    boolean that_present_deliveryMode = true && that.isSetDeliveryMode();
    if (this_present_deliveryMode || that_present_deliveryMode) {
      if (!(this_present_deliveryMode && that_present_deliveryMode))
        return false;
      if (!this.deliveryMode.equals(that.deliveryMode))
        return false;
    }

    boolean this_present_deliveryDays = true && this.isSetDeliveryDays();
    boolean that_present_deliveryDays = true && that.isSetDeliveryDays();
    if (this_present_deliveryDays || that_present_deliveryDays) {
      if (!(this_present_deliveryDays && that_present_deliveryDays))
        return false;
      if (this.deliveryDays != that.deliveryDays)
        return false;
    }

    boolean this_present_maxSingleOrderVol = true && this.isSetMaxSingleOrderVol();
    boolean that_present_maxSingleOrderVol = true && that.isSetMaxSingleOrderVol();
    if (this_present_maxSingleOrderVol || that_present_maxSingleOrderVol) {
      if (!(this_present_maxSingleOrderVol && that_present_maxSingleOrderVol))
        return false;
      if (this.maxSingleOrderVol != that.maxSingleOrderVol)
        return false;
    }

    boolean this_present_maxHoldVol = true && this.isSetMaxHoldVol();
    boolean that_present_maxHoldVol = true && that.isSetMaxHoldVol();
    if (this_present_maxHoldVol || that_present_maxHoldVol) {
      if (!(this_present_maxHoldVol && that_present_maxHoldVol))
        return false;
      if (this.maxHoldVol != that.maxHoldVol)
        return false;
    }

    boolean this_present_commissionCalculateMode = true && this.isSetCommissionCalculateMode();
    boolean that_present_commissionCalculateMode = true && that.isSetCommissionCalculateMode();
    if (this_present_commissionCalculateMode || that_present_commissionCalculateMode) {
      if (!(this_present_commissionCalculateMode && that_present_commissionCalculateMode))
        return false;
      if (!this.commissionCalculateMode.equals(that.commissionCalculateMode))
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_marginCalculateMode = true && this.isSetMarginCalculateMode();
    boolean that_present_marginCalculateMode = true && that.isSetMarginCalculateMode();
    if (this_present_marginCalculateMode || that_present_marginCalculateMode) {
      if (!(this_present_marginCalculateMode && that_present_marginCalculateMode))
        return false;
      if (!this.marginCalculateMode.equals(that.marginCalculateMode))
        return false;
    }

    boolean this_present_initialMargin = true && this.isSetInitialMargin();
    boolean that_present_initialMargin = true && that.isSetInitialMargin();
    if (this_present_initialMargin || that_present_initialMargin) {
      if (!(this_present_initialMargin && that_present_initialMargin))
        return false;
      if (this.initialMargin != that.initialMargin)
        return false;
    }

    boolean this_present_maintenanceMargin = true && this.isSetMaintenanceMargin();
    boolean that_present_maintenanceMargin = true && that.isSetMaintenanceMargin();
    if (this_present_maintenanceMargin || that_present_maintenanceMargin) {
      if (!(this_present_maintenanceMargin && that_present_maintenanceMargin))
        return false;
      if (this.maintenanceMargin != that.maintenanceMargin)
        return false;
    }

    boolean this_present_sellInitialMargin = true && this.isSetSellInitialMargin();
    boolean that_present_sellInitialMargin = true && that.isSetSellInitialMargin();
    if (this_present_sellInitialMargin || that_present_sellInitialMargin) {
      if (!(this_present_sellInitialMargin && that_present_sellInitialMargin))
        return false;
      if (this.sellInitialMargin != that.sellInitialMargin)
        return false;
    }

    boolean this_present_sellMaintenanceMargin = true && this.isSetSellMaintenanceMargin();
    boolean that_present_sellMaintenanceMargin = true && that.isSetSellMaintenanceMargin();
    if (this_present_sellMaintenanceMargin || that_present_sellMaintenanceMargin) {
      if (!(this_present_sellMaintenanceMargin && that_present_sellMaintenanceMargin))
        return false;
      if (this.sellMaintenanceMargin != that.sellMaintenanceMargin)
        return false;
    }

    boolean this_present_lockMargin = true && this.isSetLockMargin();
    boolean that_present_lockMargin = true && that.isSetLockMargin();
    if (this_present_lockMargin || that_present_lockMargin) {
      if (!(this_present_lockMargin && that_present_lockMargin))
        return false;
      if (this.lockMargin != that.lockMargin)
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activeEndTimestamp = true && this.isSetActiveEndTimestamp();
    boolean that_present_activeEndTimestamp = true && that.isSetActiveEndTimestamp();
    if (this_present_activeEndTimestamp || that_present_activeEndTimestamp) {
      if (!(this_present_activeEndTimestamp && that_present_activeEndTimestamp))
        return false;
      if (this.activeEndTimestamp != that.activeEndTimestamp)
        return false;
    }

    boolean this_present_measureUnit = true && this.isSetMeasureUnit();
    boolean that_present_measureUnit = true && that.isSetMeasureUnit();
    if (this_present_measureUnit || that_present_measureUnit) {
      if (!(this_present_measureUnit && that_present_measureUnit))
        return false;
      if (!this.measureUnit.equals(that.measureUnit))
        return false;
    }

    boolean this_present_chargeUnit = true && this.isSetChargeUnit();
    boolean that_present_chargeUnit = true && that.isSetChargeUnit();
    if (this_present_chargeUnit || that_present_chargeUnit) {
      if (!(this_present_chargeUnit && that_present_chargeUnit))
        return false;
      if (this.chargeUnit != that.chargeUnit)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledCommodityConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(other.isSetConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, other.configId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMode()).compareTo(other.isSetDeliveryMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMode, other.deliveryMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryDays()).compareTo(other.isSetDeliveryDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryDays, other.deliveryDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSingleOrderVol()).compareTo(other.isSetMaxSingleOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSingleOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSingleOrderVol, other.maxSingleOrderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxHoldVol()).compareTo(other.isSetMaxHoldVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHoldVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHoldVol, other.maxHoldVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionCalculateMode()).compareTo(other.isSetCommissionCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionCalculateMode, other.commissionCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginCalculateMode()).compareTo(other.isSetMarginCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginCalculateMode, other.marginCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialMargin()).compareTo(other.isSetInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialMargin, other.initialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaintenanceMargin()).compareTo(other.isSetMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maintenanceMargin, other.maintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellInitialMargin()).compareTo(other.isSetSellInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellInitialMargin, other.sellInitialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellMaintenanceMargin()).compareTo(other.isSetSellMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellMaintenanceMargin, other.sellMaintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockMargin()).compareTo(other.isSetLockMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockMargin, other.lockMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveEndTimestamp()).compareTo(other.isSetActiveEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEndTimestamp, other.activeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasureUnit()).compareTo(other.isSetMeasureUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasureUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measureUnit, other.measureUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeUnit()).compareTo(other.isSetChargeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeUnit, other.chargeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledCommodityConfig(");
    boolean first = true;

    if (isSetConfigId()) {
      sb.append("configId:");
      sb.append(this.configId);
      first = false;
    }
    if (isSetDeliveryMode()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMode:");
      if (this.deliveryMode == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryMode);
      }
      first = false;
    }
    if (isSetDeliveryDays()) {
      if (!first) sb.append(", ");
      sb.append("deliveryDays:");
      sb.append(this.deliveryDays);
      first = false;
    }
    if (isSetMaxSingleOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("maxSingleOrderVol:");
      sb.append(this.maxSingleOrderVol);
      first = false;
    }
    if (isSetMaxHoldVol()) {
      if (!first) sb.append(", ");
      sb.append("maxHoldVol:");
      sb.append(this.maxHoldVol);
      first = false;
    }
    if (isSetCommissionCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("commissionCalculateMode:");
      if (this.commissionCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionCalculateMode);
      }
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetMarginCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("marginCalculateMode:");
      if (this.marginCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.marginCalculateMode);
      }
      first = false;
    }
    if (isSetInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("initialMargin:");
      sb.append(this.initialMargin);
      first = false;
    }
    if (isSetMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("maintenanceMargin:");
      sb.append(this.maintenanceMargin);
      first = false;
    }
    if (isSetSellInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellInitialMargin:");
      sb.append(this.sellInitialMargin);
      first = false;
    }
    if (isSetSellMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellMaintenanceMargin:");
      sb.append(this.sellMaintenanceMargin);
      first = false;
    }
    if (isSetLockMargin()) {
      if (!first) sb.append(", ");
      sb.append("lockMargin:");
      sb.append(this.lockMargin);
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActiveEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeEndTimestamp:");
      sb.append(this.activeEndTimestamp);
      first = false;
    }
    if (isSetMeasureUnit()) {
      if (!first) sb.append(", ");
      sb.append("measureUnit:");
      if (this.measureUnit == null) {
        sb.append("null");
      } else {
        sb.append(this.measureUnit);
      }
      first = false;
    }
    if (isSetChargeUnit()) {
      if (!first) sb.append(", ");
      sb.append("chargeUnit:");
      sb.append(this.chargeUnit);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledCommodityConfigStandardSchemeFactory implements SchemeFactory {
    public SledCommodityConfigStandardScheme getScheme() {
      return new SledCommodityConfigStandardScheme();
    }
  }

  private static class SledCommodityConfigStandardScheme extends StandardScheme<SledCommodityConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledCommodityConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.configId = iprot.readI32();
              struct.setConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELIVERY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMode = DeliveryMode.findByValue(iprot.readI32());
              struct.setDeliveryModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DELIVERY_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryDays = iprot.readI32();
              struct.setDeliveryDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_SINGLE_ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxSingleOrderVol = iprot.readI32();
              struct.setMaxSingleOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX_HOLD_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHoldVol = iprot.readI32();
              struct.setMaxHoldVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COMMISSION_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setCommissionCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MARGIN_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setMarginCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialMargin = iprot.readDouble();
              struct.setInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maintenanceMargin = iprot.readDouble();
              struct.setMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SELL_INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellInitialMargin = iprot.readDouble();
              struct.setSellInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SELL_MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellMaintenanceMargin = iprot.readDouble();
              struct.setSellMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOCK_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lockMargin = iprot.readDouble();
              struct.setLockMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeStartTimestamp = iprot.readI64();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ACTIVE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeEndTimestamp = iprot.readI64();
              struct.setActiveEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 34: // MEASURE_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.measureUnit = iprot.readString();
              struct.setMeasureUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // CHARGE_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargeUnit = iprot.readDouble();
              struct.setChargeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledCommodityConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetConfigId()) {
        oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.configId);
        oprot.writeFieldEnd();
      }
      if (struct.deliveryMode != null) {
        if (struct.isSetDeliveryMode()) {
          oprot.writeFieldBegin(DELIVERY_MODE_FIELD_DESC);
          oprot.writeI32(struct.deliveryMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeFieldBegin(DELIVERY_DAYS_FIELD_DESC);
        oprot.writeI32(struct.deliveryDays);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeFieldBegin(MAX_SINGLE_ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxSingleOrderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeFieldBegin(MAX_HOLD_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxHoldVol);
        oprot.writeFieldEnd();
      }
      if (struct.commissionCalculateMode != null) {
        if (struct.isSetCommissionCalculateMode()) {
          oprot.writeFieldBegin(COMMISSION_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.commissionCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.marginCalculateMode != null) {
        if (struct.isSetMarginCalculateMode()) {
          oprot.writeFieldBegin(MARGIN_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.marginCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeFieldBegin(INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.initialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeFieldBegin(MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.maintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeFieldBegin(SELL_INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellInitialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeFieldBegin(SELL_MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellMaintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLockMargin()) {
        oprot.writeFieldBegin(LOCK_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.lockMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.measureUnit != null) {
        if (struct.isSetMeasureUnit()) {
          oprot.writeFieldBegin(MEASURE_UNIT_FIELD_DESC);
          oprot.writeString(struct.measureUnit);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChargeUnit()) {
        oprot.writeFieldBegin(CHARGE_UNIT_FIELD_DESC);
        oprot.writeDouble(struct.chargeUnit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledCommodityConfigTupleSchemeFactory implements SchemeFactory {
    public SledCommodityConfigTupleScheme getScheme() {
      return new SledCommodityConfigTupleScheme();
    }
  }

  private static class SledCommodityConfigTupleScheme extends TupleScheme<SledCommodityConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledCommodityConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConfigId()) {
        optionals.set(0);
      }
      if (struct.isSetDeliveryMode()) {
        optionals.set(1);
      }
      if (struct.isSetDeliveryDays()) {
        optionals.set(2);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        optionals.set(3);
      }
      if (struct.isSetMaxHoldVol()) {
        optionals.set(4);
      }
      if (struct.isSetCommissionCalculateMode()) {
        optionals.set(5);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(6);
      }
      if (struct.isSetMarginCalculateMode()) {
        optionals.set(7);
      }
      if (struct.isSetInitialMargin()) {
        optionals.set(8);
      }
      if (struct.isSetMaintenanceMargin()) {
        optionals.set(9);
      }
      if (struct.isSetSellInitialMargin()) {
        optionals.set(10);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        optionals.set(11);
      }
      if (struct.isSetLockMargin()) {
        optionals.set(12);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(13);
      }
      if (struct.isSetActiveEndTimestamp()) {
        optionals.set(14);
      }
      if (struct.isSetMeasureUnit()) {
        optionals.set(15);
      }
      if (struct.isSetChargeUnit()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(17);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetConfigId()) {
        oprot.writeI32(struct.configId);
      }
      if (struct.isSetDeliveryMode()) {
        oprot.writeI32(struct.deliveryMode.getValue());
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeI32(struct.deliveryDays);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeI32(struct.maxSingleOrderVol);
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeI32(struct.maxHoldVol);
      }
      if (struct.isSetCommissionCalculateMode()) {
        oprot.writeI32(struct.commissionCalculateMode.getValue());
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetMarginCalculateMode()) {
        oprot.writeI32(struct.marginCalculateMode.getValue());
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeDouble(struct.initialMargin);
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeDouble(struct.maintenanceMargin);
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeDouble(struct.sellInitialMargin);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeDouble(struct.sellMaintenanceMargin);
      }
      if (struct.isSetLockMargin()) {
        oprot.writeDouble(struct.lockMargin);
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI64(struct.activeStartTimestamp);
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeI64(struct.activeEndTimestamp);
      }
      if (struct.isSetMeasureUnit()) {
        oprot.writeString(struct.measureUnit);
      }
      if (struct.isSetChargeUnit()) {
        oprot.writeDouble(struct.chargeUnit);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledCommodityConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.configId = iprot.readI32();
        struct.setConfigIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.deliveryMode = DeliveryMode.findByValue(iprot.readI32());
        struct.setDeliveryModeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.deliveryDays = iprot.readI32();
        struct.setDeliveryDaysIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxSingleOrderVol = iprot.readI32();
        struct.setMaxSingleOrderVolIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxHoldVol = iprot.readI32();
        struct.setMaxHoldVolIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setCommissionCalculateModeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setMarginCalculateModeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.initialMargin = iprot.readDouble();
        struct.setInitialMarginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.maintenanceMargin = iprot.readDouble();
        struct.setMaintenanceMarginIsSet(true);
      }
      if (incoming.get(10)) {
        struct.sellInitialMargin = iprot.readDouble();
        struct.setSellInitialMarginIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sellMaintenanceMargin = iprot.readDouble();
        struct.setSellMaintenanceMarginIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lockMargin = iprot.readDouble();
        struct.setLockMarginIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activeStartTimestamp = iprot.readI64();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(14)) {
        struct.activeEndTimestamp = iprot.readI64();
        struct.setActiveEndTimestampIsSet(true);
      }
      if (incoming.get(15)) {
        struct.measureUnit = iprot.readString();
        struct.setMeasureUnitIsSet(true);
      }
      if (incoming.get(16)) {
        struct.chargeUnit = iprot.readDouble();
        struct.setChargeUnitIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

