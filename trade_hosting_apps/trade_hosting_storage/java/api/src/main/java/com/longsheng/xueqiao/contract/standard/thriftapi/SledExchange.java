/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledExchange implements org.apache.thrift.TBase<SledExchange, SledExchange._Fields>, java.io.Serializable, Cloneable, Comparable<SledExchange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledExchange");

  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("country", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPERATING_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("operatingMic", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPERATING_MIC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("operatingMicType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NAME_INSTITUTION_FIELD_DESC = new org.apache.thrift.protocol.TField("nameInstitution", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("acronym", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField WEBSITE_FIELD_DESC = new org.apache.thrift.protocol.TField("website", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CN_ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("cnAcronym", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledExchangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledExchangeTupleSchemeFactory());
  }

  public int sledExchangeId; // optional
  public String exchangeMic; // optional
  public String country; // optional
  public String countryCode; // optional
  public String operatingMic; // optional
  /**
   * 
   * @see ExchangeOperatingMicType
   */
  public ExchangeOperatingMicType operatingMicType; // optional
  public String nameInstitution; // optional
  public String acronym; // optional
  public String city; // optional
  public String website; // optional
  public String cnName; // optional
  public String cnAcronym; // optional
  public String zoneId; // optional
  public long activeStartTimestamp; // optional
  public long activeEndTimestamp; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_EXCHANGE_ID((short)1, "sledExchangeId"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    COUNTRY((short)3, "country"),
    COUNTRY_CODE((short)4, "countryCode"),
    OPERATING_MIC((short)5, "operatingMic"),
    /**
     * 
     * @see ExchangeOperatingMicType
     */
    OPERATING_MIC_TYPE((short)6, "operatingMicType"),
    NAME_INSTITUTION((short)7, "nameInstitution"),
    ACRONYM((short)8, "acronym"),
    CITY((short)9, "city"),
    WEBSITE((short)10, "website"),
    CN_NAME((short)11, "cnName"),
    CN_ACRONYM((short)12, "cnAcronym"),
    ZONE_ID((short)13, "zoneId"),
    ACTIVE_START_TIMESTAMP((short)32, "activeStartTimestamp"),
    ACTIVE_END_TIMESTAMP((short)33, "activeEndTimestamp"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_EXCHANGE_ID
          return SLED_EXCHANGE_ID;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // COUNTRY
          return COUNTRY;
        case 4: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 5: // OPERATING_MIC
          return OPERATING_MIC;
        case 6: // OPERATING_MIC_TYPE
          return OPERATING_MIC_TYPE;
        case 7: // NAME_INSTITUTION
          return NAME_INSTITUTION;
        case 8: // ACRONYM
          return ACRONYM;
        case 9: // CITY
          return CITY;
        case 10: // WEBSITE
          return WEBSITE;
        case 11: // CN_NAME
          return CN_NAME;
        case 12: // CN_ACRONYM
          return CN_ACRONYM;
        case 13: // ZONE_ID
          return ZONE_ID;
        case 32: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 33: // ACTIVE_END_TIMESTAMP
          return ACTIVE_END_TIMESTAMP;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDEXCHANGEID_ISSET_ID = 0;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 1;
  private static final int __ACTIVEENDTIMESTAMP_ISSET_ID = 2;
  private static final int __CREATETIMESTAMP_ISSET_ID = 3;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_EXCHANGE_ID,_Fields.EXCHANGE_MIC,_Fields.COUNTRY,_Fields.COUNTRY_CODE,_Fields.OPERATING_MIC,_Fields.OPERATING_MIC_TYPE,_Fields.NAME_INSTITUTION,_Fields.ACRONYM,_Fields.CITY,_Fields.WEBSITE,_Fields.CN_NAME,_Fields.CN_ACRONYM,_Fields.ZONE_ID,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVE_END_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATING_MIC, new org.apache.thrift.meta_data.FieldMetaData("operatingMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPERATING_MIC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("operatingMicType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExchangeOperatingMicType.class)));
    tmpMap.put(_Fields.NAME_INSTITUTION, new org.apache.thrift.meta_data.FieldMetaData("nameInstitution", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("acronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WEBSITE, new org.apache.thrift.meta_data.FieldMetaData("website", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("cnAcronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledExchange.class, metaDataMap);
  }

  public SledExchange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledExchange(SledExchange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledExchangeId = other.sledExchangeId;
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    if (other.isSetOperatingMic()) {
      this.operatingMic = other.operatingMic;
    }
    if (other.isSetOperatingMicType()) {
      this.operatingMicType = other.operatingMicType;
    }
    if (other.isSetNameInstitution()) {
      this.nameInstitution = other.nameInstitution;
    }
    if (other.isSetAcronym()) {
      this.acronym = other.acronym;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetWebsite()) {
      this.website = other.website;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetCnAcronym()) {
      this.cnAcronym = other.cnAcronym;
    }
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activeEndTimestamp = other.activeEndTimestamp;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public SledExchange deepCopy() {
    return new SledExchange(this);
  }

  @Override
  public void clear() {
    setSledExchangeIdIsSet(false);
    this.sledExchangeId = 0;
    this.exchangeMic = null;
    this.country = null;
    this.countryCode = null;
    this.operatingMic = null;
    this.operatingMicType = null;
    this.nameInstitution = null;
    this.acronym = null;
    this.city = null;
    this.website = null;
    this.cnName = null;
    this.cnAcronym = null;
    this.zoneId = null;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActiveEndTimestampIsSet(false);
    this.activeEndTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getSledExchangeId() {
    return this.sledExchangeId;
  }

  public SledExchange setSledExchangeId(int sledExchangeId) {
    this.sledExchangeId = sledExchangeId;
    setSledExchangeIdIsSet(true);
    return this;
  }

  public void unsetSledExchangeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  /** Returns true if field sledExchangeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID);
  }

  public void setSledExchangeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDEXCHANGEID_ISSET_ID, value);
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public SledExchange setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public SledExchange setCountry(String country) {
    this.country = country;
    return this;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getCountryCode() {
    return this.countryCode;
  }

  public SledExchange setCountryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public String getOperatingMic() {
    return this.operatingMic;
  }

  public SledExchange setOperatingMic(String operatingMic) {
    this.operatingMic = operatingMic;
    return this;
  }

  public void unsetOperatingMic() {
    this.operatingMic = null;
  }

  /** Returns true if field operatingMic is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatingMic() {
    return this.operatingMic != null;
  }

  public void setOperatingMicIsSet(boolean value) {
    if (!value) {
      this.operatingMic = null;
    }
  }

  /**
   * 
   * @see ExchangeOperatingMicType
   */
  public ExchangeOperatingMicType getOperatingMicType() {
    return this.operatingMicType;
  }

  /**
   * 
   * @see ExchangeOperatingMicType
   */
  public SledExchange setOperatingMicType(ExchangeOperatingMicType operatingMicType) {
    this.operatingMicType = operatingMicType;
    return this;
  }

  public void unsetOperatingMicType() {
    this.operatingMicType = null;
  }

  /** Returns true if field operatingMicType is set (has been assigned a value) and false otherwise */
  public boolean isSetOperatingMicType() {
    return this.operatingMicType != null;
  }

  public void setOperatingMicTypeIsSet(boolean value) {
    if (!value) {
      this.operatingMicType = null;
    }
  }

  public String getNameInstitution() {
    return this.nameInstitution;
  }

  public SledExchange setNameInstitution(String nameInstitution) {
    this.nameInstitution = nameInstitution;
    return this;
  }

  public void unsetNameInstitution() {
    this.nameInstitution = null;
  }

  /** Returns true if field nameInstitution is set (has been assigned a value) and false otherwise */
  public boolean isSetNameInstitution() {
    return this.nameInstitution != null;
  }

  public void setNameInstitutionIsSet(boolean value) {
    if (!value) {
      this.nameInstitution = null;
    }
  }

  public String getAcronym() {
    return this.acronym;
  }

  public SledExchange setAcronym(String acronym) {
    this.acronym = acronym;
    return this;
  }

  public void unsetAcronym() {
    this.acronym = null;
  }

  /** Returns true if field acronym is set (has been assigned a value) and false otherwise */
  public boolean isSetAcronym() {
    return this.acronym != null;
  }

  public void setAcronymIsSet(boolean value) {
    if (!value) {
      this.acronym = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public SledExchange setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getWebsite() {
    return this.website;
  }

  public SledExchange setWebsite(String website) {
    this.website = website;
    return this;
  }

  public void unsetWebsite() {
    this.website = null;
  }

  /** Returns true if field website is set (has been assigned a value) and false otherwise */
  public boolean isSetWebsite() {
    return this.website != null;
  }

  public void setWebsiteIsSet(boolean value) {
    if (!value) {
      this.website = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public SledExchange setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getCnAcronym() {
    return this.cnAcronym;
  }

  public SledExchange setCnAcronym(String cnAcronym) {
    this.cnAcronym = cnAcronym;
    return this;
  }

  public void unsetCnAcronym() {
    this.cnAcronym = null;
  }

  /** Returns true if field cnAcronym is set (has been assigned a value) and false otherwise */
  public boolean isSetCnAcronym() {
    return this.cnAcronym != null;
  }

  public void setCnAcronymIsSet(boolean value) {
    if (!value) {
      this.cnAcronym = null;
    }
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public SledExchange setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  public long getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public SledExchange setActiveStartTimestamp(long activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getActiveEndTimestamp() {
    return this.activeEndTimestamp;
  }

  public SledExchange setActiveEndTimestamp(long activeEndTimestamp) {
    this.activeEndTimestamp = activeEndTimestamp;
    setActiveEndTimestampIsSet(true);
    return this;
  }

  public void unsetActiveEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  public void setActiveEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledExchange setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public SledExchange setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_EXCHANGE_ID:
      if (value == null) {
        unsetSledExchangeId();
      } else {
        setSledExchangeId((Integer)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case COUNTRY:
      if (value == null) {
        unsetCountry();
      } else {
        setCountry((String)value);
      }
      break;

    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((String)value);
      }
      break;

    case OPERATING_MIC:
      if (value == null) {
        unsetOperatingMic();
      } else {
        setOperatingMic((String)value);
      }
      break;

    case OPERATING_MIC_TYPE:
      if (value == null) {
        unsetOperatingMicType();
      } else {
        setOperatingMicType((ExchangeOperatingMicType)value);
      }
      break;

    case NAME_INSTITUTION:
      if (value == null) {
        unsetNameInstitution();
      } else {
        setNameInstitution((String)value);
      }
      break;

    case ACRONYM:
      if (value == null) {
        unsetAcronym();
      } else {
        setAcronym((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case WEBSITE:
      if (value == null) {
        unsetWebsite();
      } else {
        setWebsite((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case CN_ACRONYM:
      if (value == null) {
        unsetCnAcronym();
      } else {
        setCnAcronym((String)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Long)value);
      }
      break;

    case ACTIVE_END_TIMESTAMP:
      if (value == null) {
        unsetActiveEndTimestamp();
      } else {
        setActiveEndTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_EXCHANGE_ID:
      return Integer.valueOf(getSledExchangeId());

    case EXCHANGE_MIC:
      return getExchangeMic();

    case COUNTRY:
      return getCountry();

    case COUNTRY_CODE:
      return getCountryCode();

    case OPERATING_MIC:
      return getOperatingMic();

    case OPERATING_MIC_TYPE:
      return getOperatingMicType();

    case NAME_INSTITUTION:
      return getNameInstitution();

    case ACRONYM:
      return getAcronym();

    case CITY:
      return getCity();

    case WEBSITE:
      return getWebsite();

    case CN_NAME:
      return getCnName();

    case CN_ACRONYM:
      return getCnAcronym();

    case ZONE_ID:
      return getZoneId();

    case ACTIVE_START_TIMESTAMP:
      return Long.valueOf(getActiveStartTimestamp());

    case ACTIVE_END_TIMESTAMP:
      return Long.valueOf(getActiveEndTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_EXCHANGE_ID:
      return isSetSledExchangeId();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case COUNTRY:
      return isSetCountry();
    case COUNTRY_CODE:
      return isSetCountryCode();
    case OPERATING_MIC:
      return isSetOperatingMic();
    case OPERATING_MIC_TYPE:
      return isSetOperatingMicType();
    case NAME_INSTITUTION:
      return isSetNameInstitution();
    case ACRONYM:
      return isSetAcronym();
    case CITY:
      return isSetCity();
    case WEBSITE:
      return isSetWebsite();
    case CN_NAME:
      return isSetCnName();
    case CN_ACRONYM:
      return isSetCnAcronym();
    case ZONE_ID:
      return isSetZoneId();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVE_END_TIMESTAMP:
      return isSetActiveEndTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledExchange)
      return this.equals((SledExchange)that);
    return false;
  }

  public boolean equals(SledExchange that) {
    if (that == null)
      return false;

    boolean this_present_sledExchangeId = true && this.isSetSledExchangeId();
    boolean that_present_sledExchangeId = true && that.isSetSledExchangeId();
    if (this_present_sledExchangeId || that_present_sledExchangeId) {
      if (!(this_present_sledExchangeId && that_present_sledExchangeId))
        return false;
      if (this.sledExchangeId != that.sledExchangeId)
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_operatingMic = true && this.isSetOperatingMic();
    boolean that_present_operatingMic = true && that.isSetOperatingMic();
    if (this_present_operatingMic || that_present_operatingMic) {
      if (!(this_present_operatingMic && that_present_operatingMic))
        return false;
      if (!this.operatingMic.equals(that.operatingMic))
        return false;
    }

    boolean this_present_operatingMicType = true && this.isSetOperatingMicType();
    boolean that_present_operatingMicType = true && that.isSetOperatingMicType();
    if (this_present_operatingMicType || that_present_operatingMicType) {
      if (!(this_present_operatingMicType && that_present_operatingMicType))
        return false;
      if (!this.operatingMicType.equals(that.operatingMicType))
        return false;
    }

    boolean this_present_nameInstitution = true && this.isSetNameInstitution();
    boolean that_present_nameInstitution = true && that.isSetNameInstitution();
    if (this_present_nameInstitution || that_present_nameInstitution) {
      if (!(this_present_nameInstitution && that_present_nameInstitution))
        return false;
      if (!this.nameInstitution.equals(that.nameInstitution))
        return false;
    }

    boolean this_present_acronym = true && this.isSetAcronym();
    boolean that_present_acronym = true && that.isSetAcronym();
    if (this_present_acronym || that_present_acronym) {
      if (!(this_present_acronym && that_present_acronym))
        return false;
      if (!this.acronym.equals(that.acronym))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_website = true && this.isSetWebsite();
    boolean that_present_website = true && that.isSetWebsite();
    if (this_present_website || that_present_website) {
      if (!(this_present_website && that_present_website))
        return false;
      if (!this.website.equals(that.website))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_cnAcronym = true && this.isSetCnAcronym();
    boolean that_present_cnAcronym = true && that.isSetCnAcronym();
    if (this_present_cnAcronym || that_present_cnAcronym) {
      if (!(this_present_cnAcronym && that_present_cnAcronym))
        return false;
      if (!this.cnAcronym.equals(that.cnAcronym))
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activeEndTimestamp = true && this.isSetActiveEndTimestamp();
    boolean that_present_activeEndTimestamp = true && that.isSetActiveEndTimestamp();
    if (this_present_activeEndTimestamp || that_present_activeEndTimestamp) {
      if (!(this_present_activeEndTimestamp && that_present_activeEndTimestamp))
        return false;
      if (this.activeEndTimestamp != that.activeEndTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledExchange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledExchangeId()).compareTo(other.isSetSledExchangeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeId, other.sledExchangeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatingMic()).compareTo(other.isSetOperatingMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatingMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatingMic, other.operatingMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOperatingMicType()).compareTo(other.isSetOperatingMicType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperatingMicType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.operatingMicType, other.operatingMicType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNameInstitution()).compareTo(other.isSetNameInstitution());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNameInstitution()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nameInstitution, other.nameInstitution);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAcronym()).compareTo(other.isSetAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acronym, other.acronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWebsite()).compareTo(other.isSetWebsite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWebsite()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.website, other.website);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnAcronym()).compareTo(other.isSetCnAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnAcronym, other.cnAcronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveEndTimestamp()).compareTo(other.isSetActiveEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEndTimestamp, other.activeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledExchange(");
    boolean first = true;

    if (isSetSledExchangeId()) {
      sb.append("sledExchangeId:");
      sb.append(this.sledExchangeId);
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetCountry()) {
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
    }
    if (isSetCountryCode()) {
      if (!first) sb.append(", ");
      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
    }
    if (isSetOperatingMic()) {
      if (!first) sb.append(", ");
      sb.append("operatingMic:");
      if (this.operatingMic == null) {
        sb.append("null");
      } else {
        sb.append(this.operatingMic);
      }
      first = false;
    }
    if (isSetOperatingMicType()) {
      if (!first) sb.append(", ");
      sb.append("operatingMicType:");
      if (this.operatingMicType == null) {
        sb.append("null");
      } else {
        sb.append(this.operatingMicType);
      }
      first = false;
    }
    if (isSetNameInstitution()) {
      if (!first) sb.append(", ");
      sb.append("nameInstitution:");
      if (this.nameInstitution == null) {
        sb.append("null");
      } else {
        sb.append(this.nameInstitution);
      }
      first = false;
    }
    if (isSetAcronym()) {
      if (!first) sb.append(", ");
      sb.append("acronym:");
      if (this.acronym == null) {
        sb.append("null");
      } else {
        sb.append(this.acronym);
      }
      first = false;
    }
    if (isSetCity()) {
      if (!first) sb.append(", ");
      sb.append("city:");
      if (this.city == null) {
        sb.append("null");
      } else {
        sb.append(this.city);
      }
      first = false;
    }
    if (isSetWebsite()) {
      if (!first) sb.append(", ");
      sb.append("website:");
      if (this.website == null) {
        sb.append("null");
      } else {
        sb.append(this.website);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetCnAcronym()) {
      if (!first) sb.append(", ");
      sb.append("cnAcronym:");
      if (this.cnAcronym == null) {
        sb.append("null");
      } else {
        sb.append(this.cnAcronym);
      }
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActiveEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeEndTimestamp:");
      sb.append(this.activeEndTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledExchangeStandardSchemeFactory implements SchemeFactory {
    public SledExchangeStandardScheme getScheme() {
      return new SledExchangeStandardScheme();
    }
  }

  private static class SledExchangeStandardScheme extends StandardScheme<SledExchange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledExchange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledExchangeId = iprot.readI32();
              struct.setSledExchangeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.country = iprot.readString();
              struct.setCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPERATING_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.operatingMic = iprot.readString();
              struct.setOperatingMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPERATING_MIC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.operatingMicType = ExchangeOperatingMicType.findByValue(iprot.readI32());
              struct.setOperatingMicTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NAME_INSTITUTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nameInstitution = iprot.readString();
              struct.setNameInstitutionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.acronym = iprot.readString();
              struct.setAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // WEBSITE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.website = iprot.readString();
              struct.setWebsiteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CN_ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnAcronym = iprot.readString();
              struct.setCnAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeStartTimestamp = iprot.readI64();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ACTIVE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeEndTimestamp = iprot.readI64();
              struct.setActiveEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledExchange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledExchangeId()) {
        oprot.writeFieldBegin(SLED_EXCHANGE_ID_FIELD_DESC);
        oprot.writeI32(struct.sledExchangeId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.country != null) {
        if (struct.isSetCountry()) {
          oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
          oprot.writeString(struct.country);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countryCode != null) {
        if (struct.isSetCountryCode()) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operatingMic != null) {
        if (struct.isSetOperatingMic()) {
          oprot.writeFieldBegin(OPERATING_MIC_FIELD_DESC);
          oprot.writeString(struct.operatingMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.operatingMicType != null) {
        if (struct.isSetOperatingMicType()) {
          oprot.writeFieldBegin(OPERATING_MIC_TYPE_FIELD_DESC);
          oprot.writeI32(struct.operatingMicType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.nameInstitution != null) {
        if (struct.isSetNameInstitution()) {
          oprot.writeFieldBegin(NAME_INSTITUTION_FIELD_DESC);
          oprot.writeString(struct.nameInstitution);
          oprot.writeFieldEnd();
        }
      }
      if (struct.acronym != null) {
        if (struct.isSetAcronym()) {
          oprot.writeFieldBegin(ACRONYM_FIELD_DESC);
          oprot.writeString(struct.acronym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.city != null) {
        if (struct.isSetCity()) {
          oprot.writeFieldBegin(CITY_FIELD_DESC);
          oprot.writeString(struct.city);
          oprot.writeFieldEnd();
        }
      }
      if (struct.website != null) {
        if (struct.isSetWebsite()) {
          oprot.writeFieldBegin(WEBSITE_FIELD_DESC);
          oprot.writeString(struct.website);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnAcronym != null) {
        if (struct.isSetCnAcronym()) {
          oprot.writeFieldBegin(CN_ACRONYM_FIELD_DESC);
          oprot.writeString(struct.cnAcronym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledExchangeTupleSchemeFactory implements SchemeFactory {
    public SledExchangeTupleScheme getScheme() {
      return new SledExchangeTupleScheme();
    }
  }

  private static class SledExchangeTupleScheme extends TupleScheme<SledExchange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledExchange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledExchangeId()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetCountry()) {
        optionals.set(2);
      }
      if (struct.isSetCountryCode()) {
        optionals.set(3);
      }
      if (struct.isSetOperatingMic()) {
        optionals.set(4);
      }
      if (struct.isSetOperatingMicType()) {
        optionals.set(5);
      }
      if (struct.isSetNameInstitution()) {
        optionals.set(6);
      }
      if (struct.isSetAcronym()) {
        optionals.set(7);
      }
      if (struct.isSetCity()) {
        optionals.set(8);
      }
      if (struct.isSetWebsite()) {
        optionals.set(9);
      }
      if (struct.isSetCnName()) {
        optionals.set(10);
      }
      if (struct.isSetCnAcronym()) {
        optionals.set(11);
      }
      if (struct.isSetZoneId()) {
        optionals.set(12);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(13);
      }
      if (struct.isSetActiveEndTimestamp()) {
        optionals.set(14);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(15);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSledExchangeId()) {
        oprot.writeI32(struct.sledExchangeId);
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetCountry()) {
        oprot.writeString(struct.country);
      }
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
      if (struct.isSetOperatingMic()) {
        oprot.writeString(struct.operatingMic);
      }
      if (struct.isSetOperatingMicType()) {
        oprot.writeI32(struct.operatingMicType.getValue());
      }
      if (struct.isSetNameInstitution()) {
        oprot.writeString(struct.nameInstitution);
      }
      if (struct.isSetAcronym()) {
        oprot.writeString(struct.acronym);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetWebsite()) {
        oprot.writeString(struct.website);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetCnAcronym()) {
        oprot.writeString(struct.cnAcronym);
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI64(struct.activeStartTimestamp);
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeI64(struct.activeEndTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledExchange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.sledExchangeId = iprot.readI32();
        struct.setSledExchangeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.country = iprot.readString();
        struct.setCountryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.operatingMic = iprot.readString();
        struct.setOperatingMicIsSet(true);
      }
      if (incoming.get(5)) {
        struct.operatingMicType = ExchangeOperatingMicType.findByValue(iprot.readI32());
        struct.setOperatingMicTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.nameInstitution = iprot.readString();
        struct.setNameInstitutionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.acronym = iprot.readString();
        struct.setAcronymIsSet(true);
      }
      if (incoming.get(8)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(9)) {
        struct.website = iprot.readString();
        struct.setWebsiteIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.cnAcronym = iprot.readString();
        struct.setCnAcronymIsSet(true);
      }
      if (incoming.get(12)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activeStartTimestamp = iprot.readI64();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(14)) {
        struct.activeEndTimestamp = iprot.readI64();
        struct.setActiveEndTimestampIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

