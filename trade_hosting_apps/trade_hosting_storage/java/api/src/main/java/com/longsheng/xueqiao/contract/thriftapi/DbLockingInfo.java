/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DbLockingInfo implements org.apache.thrift.TBase<DbLockingInfo, DbLockingInfo._Fields>, java.io.Serializable, Cloneable, Comparable<DbLockingInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DbLockingInfo");

  private static final org.apache.thrift.protocol.TField IS_LOCKED_FIELD_DESC = new org.apache.thrift.protocol.TField("isLocked", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField LOCKED_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("lockedBy", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField START_LOCKED_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startLockedTimestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LOCK_AREA_FIELD_DESC = new org.apache.thrift.protocol.TField("lockArea", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DbLockingInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DbLockingInfoTupleSchemeFactory());
  }

  public boolean isLocked; // optional
  public String lockedBy; // optional
  public long startLockedTimestamp; // optional
  public long createTimestamp; // optional
  public String lockArea; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_LOCKED((short)1, "isLocked"),
    LOCKED_BY((short)2, "lockedBy"),
    START_LOCKED_TIMESTAMP((short)3, "startLockedTimestamp"),
    CREATE_TIMESTAMP((short)4, "createTimestamp"),
    LOCK_AREA((short)5, "lockArea");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_LOCKED
          return IS_LOCKED;
        case 2: // LOCKED_BY
          return LOCKED_BY;
        case 3: // START_LOCKED_TIMESTAMP
          return START_LOCKED_TIMESTAMP;
        case 4: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 5: // LOCK_AREA
          return LOCK_AREA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISLOCKED_ISSET_ID = 0;
  private static final int __STARTLOCKEDTIMESTAMP_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.IS_LOCKED,_Fields.LOCKED_BY,_Fields.START_LOCKED_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LOCK_AREA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_LOCKED, new org.apache.thrift.meta_data.FieldMetaData("isLocked", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LOCKED_BY, new org.apache.thrift.meta_data.FieldMetaData("lockedBy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_LOCKED_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startLockedTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOCK_AREA, new org.apache.thrift.meta_data.FieldMetaData("lockArea", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DbLockingInfo.class, metaDataMap);
  }

  public DbLockingInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DbLockingInfo(DbLockingInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isLocked = other.isLocked;
    if (other.isSetLockedBy()) {
      this.lockedBy = other.lockedBy;
    }
    this.startLockedTimestamp = other.startLockedTimestamp;
    this.createTimestamp = other.createTimestamp;
    if (other.isSetLockArea()) {
      this.lockArea = other.lockArea;
    }
  }

  public DbLockingInfo deepCopy() {
    return new DbLockingInfo(this);
  }

  @Override
  public void clear() {
    setIsLockedIsSet(false);
    this.isLocked = false;
    this.lockedBy = null;
    setStartLockedTimestampIsSet(false);
    this.startLockedTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    this.lockArea = null;
  }

  public boolean isIsLocked() {
    return this.isLocked;
  }

  public DbLockingInfo setIsLocked(boolean isLocked) {
    this.isLocked = isLocked;
    setIsLockedIsSet(true);
    return this;
  }

  public void unsetIsLocked() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISLOCKED_ISSET_ID);
  }

  /** Returns true if field isLocked is set (has been assigned a value) and false otherwise */
  public boolean isSetIsLocked() {
    return EncodingUtils.testBit(__isset_bitfield, __ISLOCKED_ISSET_ID);
  }

  public void setIsLockedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISLOCKED_ISSET_ID, value);
  }

  public String getLockedBy() {
    return this.lockedBy;
  }

  public DbLockingInfo setLockedBy(String lockedBy) {
    this.lockedBy = lockedBy;
    return this;
  }

  public void unsetLockedBy() {
    this.lockedBy = null;
  }

  /** Returns true if field lockedBy is set (has been assigned a value) and false otherwise */
  public boolean isSetLockedBy() {
    return this.lockedBy != null;
  }

  public void setLockedByIsSet(boolean value) {
    if (!value) {
      this.lockedBy = null;
    }
  }

  public long getStartLockedTimestamp() {
    return this.startLockedTimestamp;
  }

  public DbLockingInfo setStartLockedTimestamp(long startLockedTimestamp) {
    this.startLockedTimestamp = startLockedTimestamp;
    setStartLockedTimestampIsSet(true);
    return this;
  }

  public void unsetStartLockedTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTLOCKEDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startLockedTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartLockedTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTLOCKEDTIMESTAMP_ISSET_ID);
  }

  public void setStartLockedTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTLOCKEDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public DbLockingInfo setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public String getLockArea() {
    return this.lockArea;
  }

  public DbLockingInfo setLockArea(String lockArea) {
    this.lockArea = lockArea;
    return this;
  }

  public void unsetLockArea() {
    this.lockArea = null;
  }

  /** Returns true if field lockArea is set (has been assigned a value) and false otherwise */
  public boolean isSetLockArea() {
    return this.lockArea != null;
  }

  public void setLockAreaIsSet(boolean value) {
    if (!value) {
      this.lockArea = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_LOCKED:
      if (value == null) {
        unsetIsLocked();
      } else {
        setIsLocked((Boolean)value);
      }
      break;

    case LOCKED_BY:
      if (value == null) {
        unsetLockedBy();
      } else {
        setLockedBy((String)value);
      }
      break;

    case START_LOCKED_TIMESTAMP:
      if (value == null) {
        unsetStartLockedTimestamp();
      } else {
        setStartLockedTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LOCK_AREA:
      if (value == null) {
        unsetLockArea();
      } else {
        setLockArea((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_LOCKED:
      return Boolean.valueOf(isIsLocked());

    case LOCKED_BY:
      return getLockedBy();

    case START_LOCKED_TIMESTAMP:
      return Long.valueOf(getStartLockedTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LOCK_AREA:
      return getLockArea();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_LOCKED:
      return isSetIsLocked();
    case LOCKED_BY:
      return isSetLockedBy();
    case START_LOCKED_TIMESTAMP:
      return isSetStartLockedTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LOCK_AREA:
      return isSetLockArea();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DbLockingInfo)
      return this.equals((DbLockingInfo)that);
    return false;
  }

  public boolean equals(DbLockingInfo that) {
    if (that == null)
      return false;

    boolean this_present_isLocked = true && this.isSetIsLocked();
    boolean that_present_isLocked = true && that.isSetIsLocked();
    if (this_present_isLocked || that_present_isLocked) {
      if (!(this_present_isLocked && that_present_isLocked))
        return false;
      if (this.isLocked != that.isLocked)
        return false;
    }

    boolean this_present_lockedBy = true && this.isSetLockedBy();
    boolean that_present_lockedBy = true && that.isSetLockedBy();
    if (this_present_lockedBy || that_present_lockedBy) {
      if (!(this_present_lockedBy && that_present_lockedBy))
        return false;
      if (!this.lockedBy.equals(that.lockedBy))
        return false;
    }

    boolean this_present_startLockedTimestamp = true && this.isSetStartLockedTimestamp();
    boolean that_present_startLockedTimestamp = true && that.isSetStartLockedTimestamp();
    if (this_present_startLockedTimestamp || that_present_startLockedTimestamp) {
      if (!(this_present_startLockedTimestamp && that_present_startLockedTimestamp))
        return false;
      if (this.startLockedTimestamp != that.startLockedTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lockArea = true && this.isSetLockArea();
    boolean that_present_lockArea = true && that.isSetLockArea();
    if (this_present_lockArea || that_present_lockArea) {
      if (!(this_present_lockArea && that_present_lockArea))
        return false;
      if (!this.lockArea.equals(that.lockArea))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DbLockingInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsLocked()).compareTo(other.isSetIsLocked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsLocked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isLocked, other.isLocked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockedBy()).compareTo(other.isSetLockedBy());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockedBy()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockedBy, other.lockedBy);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartLockedTimestamp()).compareTo(other.isSetStartLockedTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartLockedTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startLockedTimestamp, other.startLockedTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockArea()).compareTo(other.isSetLockArea());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockArea()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockArea, other.lockArea);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DbLockingInfo(");
    boolean first = true;

    if (isSetIsLocked()) {
      sb.append("isLocked:");
      sb.append(this.isLocked);
      first = false;
    }
    if (isSetLockedBy()) {
      if (!first) sb.append(", ");
      sb.append("lockedBy:");
      if (this.lockedBy == null) {
        sb.append("null");
      } else {
        sb.append(this.lockedBy);
      }
      first = false;
    }
    if (isSetStartLockedTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("startLockedTimestamp:");
      sb.append(this.startLockedTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLockArea()) {
      if (!first) sb.append(", ");
      sb.append("lockArea:");
      if (this.lockArea == null) {
        sb.append("null");
      } else {
        sb.append(this.lockArea);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DbLockingInfoStandardSchemeFactory implements SchemeFactory {
    public DbLockingInfoStandardScheme getScheme() {
      return new DbLockingInfoStandardScheme();
    }
  }

  private static class DbLockingInfoStandardScheme extends StandardScheme<DbLockingInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DbLockingInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_LOCKED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isLocked = iprot.readBool();
              struct.setIsLockedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCKED_BY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lockedBy = iprot.readString();
              struct.setLockedByIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_LOCKED_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startLockedTimestamp = iprot.readI64();
              struct.setStartLockedTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCK_AREA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lockArea = iprot.readString();
              struct.setLockAreaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DbLockingInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetIsLocked()) {
        oprot.writeFieldBegin(IS_LOCKED_FIELD_DESC);
        oprot.writeBool(struct.isLocked);
        oprot.writeFieldEnd();
      }
      if (struct.lockedBy != null) {
        if (struct.isSetLockedBy()) {
          oprot.writeFieldBegin(LOCKED_BY_FIELD_DESC);
          oprot.writeString(struct.lockedBy);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartLockedTimestamp()) {
        oprot.writeFieldBegin(START_LOCKED_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.startLockedTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.lockArea != null) {
        if (struct.isSetLockArea()) {
          oprot.writeFieldBegin(LOCK_AREA_FIELD_DESC);
          oprot.writeString(struct.lockArea);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DbLockingInfoTupleSchemeFactory implements SchemeFactory {
    public DbLockingInfoTupleScheme getScheme() {
      return new DbLockingInfoTupleScheme();
    }
  }

  private static class DbLockingInfoTupleScheme extends TupleScheme<DbLockingInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DbLockingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsLocked()) {
        optionals.set(0);
      }
      if (struct.isSetLockedBy()) {
        optionals.set(1);
      }
      if (struct.isSetStartLockedTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetLockArea()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIsLocked()) {
        oprot.writeBool(struct.isLocked);
      }
      if (struct.isSetLockedBy()) {
        oprot.writeString(struct.lockedBy);
      }
      if (struct.isSetStartLockedTimestamp()) {
        oprot.writeI64(struct.startLockedTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLockArea()) {
        oprot.writeString(struct.lockArea);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DbLockingInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.isLocked = iprot.readBool();
        struct.setIsLockedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lockedBy = iprot.readString();
        struct.setLockedByIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startLockedTimestamp = iprot.readI64();
        struct.setStartLockedTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lockArea = iprot.readString();
        struct.setLockAreaIsSet(true);
      }
    }
  }

}

