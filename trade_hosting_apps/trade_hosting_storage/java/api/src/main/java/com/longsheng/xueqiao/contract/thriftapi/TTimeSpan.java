/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TTimeSpan implements org.apache.thrift.TBase<TTimeSpan, TTimeSpan._Fields>, java.io.Serializable, Cloneable, Comparable<TTimeSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTimeSpan");

  private static final org.apache.thrift.protocol.TField TIMESPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("timespan", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TIME_SPAN_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("timeSpanState", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField START_TIME_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimeString", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIME_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimeString", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTimeSpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTimeSpanTupleSchemeFactory());
  }

  public String timespan; // optional
  /**
   * 
   * @see TimeSpanState
   */
  public TimeSpanState timeSpanState; // optional
  public long startTimestamp; // optional
  public String startTimeString; // optional
  public long endTimestamp; // optional
  public String endTimeString; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESPAN((short)1, "timespan"),
    /**
     * 
     * @see TimeSpanState
     */
    TIME_SPAN_STATE((short)2, "timeSpanState"),
    START_TIMESTAMP((short)3, "startTimestamp"),
    START_TIME_STRING((short)4, "startTimeString"),
    END_TIMESTAMP((short)5, "endTimestamp"),
    END_TIME_STRING((short)6, "endTimeString");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESPAN
          return TIMESPAN;
        case 2: // TIME_SPAN_STATE
          return TIME_SPAN_STATE;
        case 3: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 4: // START_TIME_STRING
          return START_TIME_STRING;
        case 5: // END_TIMESTAMP
          return END_TIMESTAMP;
        case 6: // END_TIME_STRING
          return END_TIME_STRING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STARTTIMESTAMP_ISSET_ID = 0;
  private static final int __ENDTIMESTAMP_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TIMESPAN,_Fields.TIME_SPAN_STATE,_Fields.START_TIMESTAMP,_Fields.START_TIME_STRING,_Fields.END_TIMESTAMP,_Fields.END_TIME_STRING};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESPAN, new org.apache.thrift.meta_data.FieldMetaData("timespan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME_SPAN_STATE, new org.apache.thrift.meta_data.FieldMetaData("timeSpanState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TimeSpanState.class)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIME_STRING, new org.apache.thrift.meta_data.FieldMetaData("startTimeString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME_STRING, new org.apache.thrift.meta_data.FieldMetaData("endTimeString", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTimeSpan.class, metaDataMap);
  }

  public TTimeSpan() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTimeSpan(TTimeSpan other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTimespan()) {
      this.timespan = other.timespan;
    }
    if (other.isSetTimeSpanState()) {
      this.timeSpanState = other.timeSpanState;
    }
    this.startTimestamp = other.startTimestamp;
    if (other.isSetStartTimeString()) {
      this.startTimeString = other.startTimeString;
    }
    this.endTimestamp = other.endTimestamp;
    if (other.isSetEndTimeString()) {
      this.endTimeString = other.endTimeString;
    }
  }

  public TTimeSpan deepCopy() {
    return new TTimeSpan(this);
  }

  @Override
  public void clear() {
    this.timespan = null;
    this.timeSpanState = null;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    this.startTimeString = null;
    setEndTimestampIsSet(false);
    this.endTimestamp = 0;
    this.endTimeString = null;
  }

  public String getTimespan() {
    return this.timespan;
  }

  public TTimeSpan setTimespan(String timespan) {
    this.timespan = timespan;
    return this;
  }

  public void unsetTimespan() {
    this.timespan = null;
  }

  /** Returns true if field timespan is set (has been assigned a value) and false otherwise */
  public boolean isSetTimespan() {
    return this.timespan != null;
  }

  public void setTimespanIsSet(boolean value) {
    if (!value) {
      this.timespan = null;
    }
  }

  /**
   * 
   * @see TimeSpanState
   */
  public TimeSpanState getTimeSpanState() {
    return this.timeSpanState;
  }

  /**
   * 
   * @see TimeSpanState
   */
  public TTimeSpan setTimeSpanState(TimeSpanState timeSpanState) {
    this.timeSpanState = timeSpanState;
    return this;
  }

  public void unsetTimeSpanState() {
    this.timeSpanState = null;
  }

  /** Returns true if field timeSpanState is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeSpanState() {
    return this.timeSpanState != null;
  }

  public void setTimeSpanStateIsSet(boolean value) {
    if (!value) {
      this.timeSpanState = null;
    }
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public TTimeSpan setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    return this;
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public String getStartTimeString() {
    return this.startTimeString;
  }

  public TTimeSpan setStartTimeString(String startTimeString) {
    this.startTimeString = startTimeString;
    return this;
  }

  public void unsetStartTimeString() {
    this.startTimeString = null;
  }

  /** Returns true if field startTimeString is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimeString() {
    return this.startTimeString != null;
  }

  public void setStartTimeStringIsSet(boolean value) {
    if (!value) {
      this.startTimeString = null;
    }
  }

  public long getEndTimestamp() {
    return this.endTimestamp;
  }

  public TTimeSpan setEndTimestamp(long endTimestamp) {
    this.endTimestamp = endTimestamp;
    setEndTimestampIsSet(true);
    return this;
  }

  public void unsetEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  public void setEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID, value);
  }

  public String getEndTimeString() {
    return this.endTimeString;
  }

  public TTimeSpan setEndTimeString(String endTimeString) {
    this.endTimeString = endTimeString;
    return this;
  }

  public void unsetEndTimeString() {
    this.endTimeString = null;
  }

  /** Returns true if field endTimeString is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimeString() {
    return this.endTimeString != null;
  }

  public void setEndTimeStringIsSet(boolean value) {
    if (!value) {
      this.endTimeString = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESPAN:
      if (value == null) {
        unsetTimespan();
      } else {
        setTimespan((String)value);
      }
      break;

    case TIME_SPAN_STATE:
      if (value == null) {
        unsetTimeSpanState();
      } else {
        setTimeSpanState((TimeSpanState)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStartTimestamp();
      } else {
        setStartTimestamp((Long)value);
      }
      break;

    case START_TIME_STRING:
      if (value == null) {
        unsetStartTimeString();
      } else {
        setStartTimeString((String)value);
      }
      break;

    case END_TIMESTAMP:
      if (value == null) {
        unsetEndTimestamp();
      } else {
        setEndTimestamp((Long)value);
      }
      break;

    case END_TIME_STRING:
      if (value == null) {
        unsetEndTimeString();
      } else {
        setEndTimeString((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESPAN:
      return getTimespan();

    case TIME_SPAN_STATE:
      return getTimeSpanState();

    case START_TIMESTAMP:
      return Long.valueOf(getStartTimestamp());

    case START_TIME_STRING:
      return getStartTimeString();

    case END_TIMESTAMP:
      return Long.valueOf(getEndTimestamp());

    case END_TIME_STRING:
      return getEndTimeString();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESPAN:
      return isSetTimespan();
    case TIME_SPAN_STATE:
      return isSetTimeSpanState();
    case START_TIMESTAMP:
      return isSetStartTimestamp();
    case START_TIME_STRING:
      return isSetStartTimeString();
    case END_TIMESTAMP:
      return isSetEndTimestamp();
    case END_TIME_STRING:
      return isSetEndTimeString();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTimeSpan)
      return this.equals((TTimeSpan)that);
    return false;
  }

  public boolean equals(TTimeSpan that) {
    if (that == null)
      return false;

    boolean this_present_timespan = true && this.isSetTimespan();
    boolean that_present_timespan = true && that.isSetTimespan();
    if (this_present_timespan || that_present_timespan) {
      if (!(this_present_timespan && that_present_timespan))
        return false;
      if (!this.timespan.equals(that.timespan))
        return false;
    }

    boolean this_present_timeSpanState = true && this.isSetTimeSpanState();
    boolean that_present_timeSpanState = true && that.isSetTimeSpanState();
    if (this_present_timeSpanState || that_present_timeSpanState) {
      if (!(this_present_timeSpanState && that_present_timeSpanState))
        return false;
      if (!this.timeSpanState.equals(that.timeSpanState))
        return false;
    }

    boolean this_present_startTimestamp = true && this.isSetStartTimestamp();
    boolean that_present_startTimestamp = true && that.isSetStartTimestamp();
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_startTimeString = true && this.isSetStartTimeString();
    boolean that_present_startTimeString = true && that.isSetStartTimeString();
    if (this_present_startTimeString || that_present_startTimeString) {
      if (!(this_present_startTimeString && that_present_startTimeString))
        return false;
      if (!this.startTimeString.equals(that.startTimeString))
        return false;
    }

    boolean this_present_endTimestamp = true && this.isSetEndTimestamp();
    boolean that_present_endTimestamp = true && that.isSetEndTimestamp();
    if (this_present_endTimestamp || that_present_endTimestamp) {
      if (!(this_present_endTimestamp && that_present_endTimestamp))
        return false;
      if (this.endTimestamp != that.endTimestamp)
        return false;
    }

    boolean this_present_endTimeString = true && this.isSetEndTimeString();
    boolean that_present_endTimeString = true && that.isSetEndTimeString();
    if (this_present_endTimeString || that_present_endTimeString) {
      if (!(this_present_endTimeString && that_present_endTimeString))
        return false;
      if (!this.endTimeString.equals(that.endTimeString))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TTimeSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimespan()).compareTo(other.isSetTimespan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimespan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timespan, other.timespan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeSpanState()).compareTo(other.isSetTimeSpanState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeSpanState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeSpanState, other.timeSpanState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(other.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, other.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimeString()).compareTo(other.isSetStartTimeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimeString, other.startTimeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(other.isSetEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, other.endTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimeString()).compareTo(other.isSetEndTimeString());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimeString()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimeString, other.endTimeString);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTimeSpan(");
    boolean first = true;

    if (isSetTimespan()) {
      sb.append("timespan:");
      if (this.timespan == null) {
        sb.append("null");
      } else {
        sb.append(this.timespan);
      }
      first = false;
    }
    if (isSetTimeSpanState()) {
      if (!first) sb.append(", ");
      sb.append("timeSpanState:");
      if (this.timeSpanState == null) {
        sb.append("null");
      } else {
        sb.append(this.timeSpanState);
      }
      first = false;
    }
    if (isSetStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("startTimestamp:");
      sb.append(this.startTimestamp);
      first = false;
    }
    if (isSetStartTimeString()) {
      if (!first) sb.append(", ");
      sb.append("startTimeString:");
      if (this.startTimeString == null) {
        sb.append("null");
      } else {
        sb.append(this.startTimeString);
      }
      first = false;
    }
    if (isSetEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("endTimestamp:");
      sb.append(this.endTimestamp);
      first = false;
    }
    if (isSetEndTimeString()) {
      if (!first) sb.append(", ");
      sb.append("endTimeString:");
      if (this.endTimeString == null) {
        sb.append("null");
      } else {
        sb.append(this.endTimeString);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTimeSpanStandardSchemeFactory implements SchemeFactory {
    public TTimeSpanStandardScheme getScheme() {
      return new TTimeSpanStandardScheme();
    }
  }

  private static class TTimeSpanStandardScheme extends StandardScheme<TTimeSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTimeSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timespan = iprot.readString();
              struct.setTimespanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIME_SPAN_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.timeSpanState = TimeSpanState.findByValue(iprot.readI32());
              struct.setTimeSpanStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // START_TIME_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.startTimeString = iprot.readString();
              struct.setStartTimeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimestamp = iprot.readI64();
              struct.setEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIME_STRING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endTimeString = iprot.readString();
              struct.setEndTimeStringIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTimeSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.timespan != null) {
        if (struct.isSetTimespan()) {
          oprot.writeFieldBegin(TIMESPAN_FIELD_DESC);
          oprot.writeString(struct.timespan);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timeSpanState != null) {
        if (struct.isSetTimeSpanState()) {
          oprot.writeFieldBegin(TIME_SPAN_STATE_FIELD_DESC);
          oprot.writeI32(struct.timeSpanState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.startTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.startTimeString != null) {
        if (struct.isSetStartTimeString()) {
          oprot.writeFieldBegin(START_TIME_STRING_FIELD_DESC);
          oprot.writeString(struct.startTimeString);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEndTimestamp()) {
        oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.endTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.endTimeString != null) {
        if (struct.isSetEndTimeString()) {
          oprot.writeFieldBegin(END_TIME_STRING_FIELD_DESC);
          oprot.writeString(struct.endTimeString);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTimeSpanTupleSchemeFactory implements SchemeFactory {
    public TTimeSpanTupleScheme getScheme() {
      return new TTimeSpanTupleScheme();
    }
  }

  private static class TTimeSpanTupleScheme extends TupleScheme<TTimeSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTimespan()) {
        optionals.set(0);
      }
      if (struct.isSetTimeSpanState()) {
        optionals.set(1);
      }
      if (struct.isSetStartTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetStartTimeString()) {
        optionals.set(3);
      }
      if (struct.isSetEndTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetEndTimeString()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTimespan()) {
        oprot.writeString(struct.timespan);
      }
      if (struct.isSetTimeSpanState()) {
        oprot.writeI32(struct.timeSpanState.getValue());
      }
      if (struct.isSetStartTimestamp()) {
        oprot.writeI64(struct.startTimestamp);
      }
      if (struct.isSetStartTimeString()) {
        oprot.writeString(struct.startTimeString);
      }
      if (struct.isSetEndTimestamp()) {
        oprot.writeI64(struct.endTimestamp);
      }
      if (struct.isSetEndTimeString()) {
        oprot.writeString(struct.endTimeString);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.timespan = iprot.readString();
        struct.setTimespanIsSet(true);
      }
      if (incoming.get(1)) {
        struct.timeSpanState = TimeSpanState.findByValue(iprot.readI32());
        struct.setTimeSpanStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTimestamp = iprot.readI64();
        struct.setStartTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.startTimeString = iprot.readString();
        struct.setStartTimeStringIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endTimestamp = iprot.readI64();
        struct.setEndTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.endTimeString = iprot.readString();
        struct.setEndTimeStringIsSet(true);
      }
    }
  }

}

