/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqSyncMappingTaskOption implements org.apache.thrift.TBase<ReqSyncMappingTaskOption, ReqSyncMappingTaskOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqSyncMappingTaskOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqSyncMappingTaskOption");

  private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("targetIds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatformEnv", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqSyncMappingTaskOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqSyncMappingTaskOptionTupleSchemeFactory());
  }

  public List<Integer> taskIds; // optional
  public List<Integer> targetIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv techPlatformEnv; // optional
  /**
   * 
   * @see SyncTaskType
   */
  public SyncTaskType taskType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_IDS((short)1, "taskIds"),
    TARGET_IDS((short)2, "targetIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
     */
    TECH_PLATFORM_ENV((short)3, "techPlatformEnv"),
    /**
     * 
     * @see SyncTaskType
     */
    TASK_TYPE((short)4, "taskType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_IDS
          return TASK_IDS;
        case 2: // TARGET_IDS
          return TARGET_IDS;
        case 3: // TECH_PLATFORM_ENV
          return TECH_PLATFORM_ENV;
        case 4: // TASK_TYPE
          return TASK_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TASK_IDS,_Fields.TARGET_IDS,_Fields.TECH_PLATFORM_ENV,_Fields.TASK_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TARGET_IDS, new org.apache.thrift.meta_data.FieldMetaData("targetIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TECH_PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("techPlatformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.class)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SyncTaskType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqSyncMappingTaskOption.class, metaDataMap);
  }

  public ReqSyncMappingTaskOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqSyncMappingTaskOption(ReqSyncMappingTaskOption other) {
    if (other.isSetTaskIds()) {
      List<Integer> __this__taskIds = new ArrayList<Integer>(other.taskIds);
      this.taskIds = __this__taskIds;
    }
    if (other.isSetTargetIds()) {
      List<Integer> __this__targetIds = new ArrayList<Integer>(other.targetIds);
      this.targetIds = __this__targetIds;
    }
    if (other.isSetTechPlatformEnv()) {
      this.techPlatformEnv = other.techPlatformEnv;
    }
    if (other.isSetTaskType()) {
      this.taskType = other.taskType;
    }
  }

  public ReqSyncMappingTaskOption deepCopy() {
    return new ReqSyncMappingTaskOption(this);
  }

  @Override
  public void clear() {
    this.taskIds = null;
    this.targetIds = null;
    this.techPlatformEnv = null;
    this.taskType = null;
  }

  public int getTaskIdsSize() {
    return (this.taskIds == null) ? 0 : this.taskIds.size();
  }

  public java.util.Iterator<Integer> getTaskIdsIterator() {
    return (this.taskIds == null) ? null : this.taskIds.iterator();
  }

  public void addToTaskIds(int elem) {
    if (this.taskIds == null) {
      this.taskIds = new ArrayList<Integer>();
    }
    this.taskIds.add(elem);
  }

  public List<Integer> getTaskIds() {
    return this.taskIds;
  }

  public ReqSyncMappingTaskOption setTaskIds(List<Integer> taskIds) {
    this.taskIds = taskIds;
    return this;
  }

  public void unsetTaskIds() {
    this.taskIds = null;
  }

  /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskIds() {
    return this.taskIds != null;
  }

  public void setTaskIdsIsSet(boolean value) {
    if (!value) {
      this.taskIds = null;
    }
  }

  public int getTargetIdsSize() {
    return (this.targetIds == null) ? 0 : this.targetIds.size();
  }

  public java.util.Iterator<Integer> getTargetIdsIterator() {
    return (this.targetIds == null) ? null : this.targetIds.iterator();
  }

  public void addToTargetIds(int elem) {
    if (this.targetIds == null) {
      this.targetIds = new ArrayList<Integer>();
    }
    this.targetIds.add(elem);
  }

  public List<Integer> getTargetIds() {
    return this.targetIds;
  }

  public ReqSyncMappingTaskOption setTargetIds(List<Integer> targetIds) {
    this.targetIds = targetIds;
    return this;
  }

  public void unsetTargetIds() {
    this.targetIds = null;
  }

  /** Returns true if field targetIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetIds() {
    return this.targetIds != null;
  }

  public void setTargetIdsIsSet(boolean value) {
    if (!value) {
      this.targetIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv getTechPlatformEnv() {
    return this.techPlatformEnv;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv
   */
  public ReqSyncMappingTaskOption setTechPlatformEnv(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv techPlatformEnv) {
    this.techPlatformEnv = techPlatformEnv;
    return this;
  }

  public void unsetTechPlatformEnv() {
    this.techPlatformEnv = null;
  }

  /** Returns true if field techPlatformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatformEnv() {
    return this.techPlatformEnv != null;
  }

  public void setTechPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.techPlatformEnv = null;
    }
  }

  /**
   * 
   * @see SyncTaskType
   */
  public SyncTaskType getTaskType() {
    return this.taskType;
  }

  /**
   * 
   * @see SyncTaskType
   */
  public ReqSyncMappingTaskOption setTaskType(SyncTaskType taskType) {
    this.taskType = taskType;
    return this;
  }

  public void unsetTaskType() {
    this.taskType = null;
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return this.taskType != null;
  }

  public void setTaskTypeIsSet(boolean value) {
    if (!value) {
      this.taskType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_IDS:
      if (value == null) {
        unsetTaskIds();
      } else {
        setTaskIds((List<Integer>)value);
      }
      break;

    case TARGET_IDS:
      if (value == null) {
        unsetTargetIds();
      } else {
        setTargetIds((List<Integer>)value);
      }
      break;

    case TECH_PLATFORM_ENV:
      if (value == null) {
        unsetTechPlatformEnv();
      } else {
        setTechPlatformEnv((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((SyncTaskType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_IDS:
      return getTaskIds();

    case TARGET_IDS:
      return getTargetIds();

    case TECH_PLATFORM_ENV:
      return getTechPlatformEnv();

    case TASK_TYPE:
      return getTaskType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_IDS:
      return isSetTaskIds();
    case TARGET_IDS:
      return isSetTargetIds();
    case TECH_PLATFORM_ENV:
      return isSetTechPlatformEnv();
    case TASK_TYPE:
      return isSetTaskType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqSyncMappingTaskOption)
      return this.equals((ReqSyncMappingTaskOption)that);
    return false;
  }

  public boolean equals(ReqSyncMappingTaskOption that) {
    if (that == null)
      return false;

    boolean this_present_taskIds = true && this.isSetTaskIds();
    boolean that_present_taskIds = true && that.isSetTaskIds();
    if (this_present_taskIds || that_present_taskIds) {
      if (!(this_present_taskIds && that_present_taskIds))
        return false;
      if (!this.taskIds.equals(that.taskIds))
        return false;
    }

    boolean this_present_targetIds = true && this.isSetTargetIds();
    boolean that_present_targetIds = true && that.isSetTargetIds();
    if (this_present_targetIds || that_present_targetIds) {
      if (!(this_present_targetIds && that_present_targetIds))
        return false;
      if (!this.targetIds.equals(that.targetIds))
        return false;
    }

    boolean this_present_techPlatformEnv = true && this.isSetTechPlatformEnv();
    boolean that_present_techPlatformEnv = true && that.isSetTechPlatformEnv();
    if (this_present_techPlatformEnv || that_present_techPlatformEnv) {
      if (!(this_present_techPlatformEnv && that_present_techPlatformEnv))
        return false;
      if (!this.techPlatformEnv.equals(that.techPlatformEnv))
        return false;
    }

    boolean this_present_taskType = true && this.isSetTaskType();
    boolean that_present_taskType = true && that.isSetTaskType();
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (!this.taskType.equals(that.taskType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqSyncMappingTaskOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetIds()).compareTo(other.isSetTargetIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetIds, other.targetIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatformEnv()).compareTo(other.isSetTechPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatformEnv, other.techPlatformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqSyncMappingTaskOption(");
    boolean first = true;

    if (isSetTaskIds()) {
      sb.append("taskIds:");
      if (this.taskIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskIds);
      }
      first = false;
    }
    if (isSetTargetIds()) {
      if (!first) sb.append(", ");
      sb.append("targetIds:");
      if (this.targetIds == null) {
        sb.append("null");
      } else {
        sb.append(this.targetIds);
      }
      first = false;
    }
    if (isSetTechPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("techPlatformEnv:");
      if (this.techPlatformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatformEnv);
      }
      first = false;
    }
    if (isSetTaskType()) {
      if (!first) sb.append(", ");
      sb.append("taskType:");
      if (this.taskType == null) {
        sb.append("null");
      } else {
        sb.append(this.taskType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqSyncMappingTaskOptionStandardSchemeFactory implements SchemeFactory {
    public ReqSyncMappingTaskOptionStandardScheme getScheme() {
      return new ReqSyncMappingTaskOptionStandardScheme();
    }
  }

  private static class ReqSyncMappingTaskOptionStandardScheme extends StandardScheme<ReqSyncMappingTaskOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqSyncMappingTaskOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                struct.taskIds = new ArrayList<Integer>(_list112.size);
                for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                {
                  int _elem114;
                  _elem114 = iprot.readI32();
                  struct.taskIds.add(_elem114);
                }
                iprot.readListEnd();
              }
              struct.setTaskIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list115 = iprot.readListBegin();
                struct.targetIds = new ArrayList<Integer>(_list115.size);
                for (int _i116 = 0; _i116 < _list115.size; ++_i116)
                {
                  int _elem117;
                  _elem117 = iprot.readI32();
                  struct.targetIds.add(_elem117);
                }
                iprot.readListEnd();
              }
              struct.setTargetIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TECH_PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatformEnv = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
              struct.setTechPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = SyncTaskType.findByValue(iprot.readI32());
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqSyncMappingTaskOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskIds != null) {
        if (struct.isSetTaskIds()) {
          oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.taskIds.size()));
            for (int _iter118 : struct.taskIds)
            {
              oprot.writeI32(_iter118);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetIds != null) {
        if (struct.isSetTargetIds()) {
          oprot.writeFieldBegin(TARGET_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.targetIds.size()));
            for (int _iter119 : struct.targetIds)
            {
              oprot.writeI32(_iter119);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatformEnv != null) {
        if (struct.isSetTechPlatformEnv()) {
          oprot.writeFieldBegin(TECH_PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.techPlatformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskType != null) {
        if (struct.isSetTaskType()) {
          oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
          oprot.writeI32(struct.taskType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqSyncMappingTaskOptionTupleSchemeFactory implements SchemeFactory {
    public ReqSyncMappingTaskOptionTupleScheme getScheme() {
      return new ReqSyncMappingTaskOptionTupleScheme();
    }
  }

  private static class ReqSyncMappingTaskOptionTupleScheme extends TupleScheme<ReqSyncMappingTaskOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqSyncMappingTaskOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskIds()) {
        optionals.set(0);
      }
      if (struct.isSetTargetIds()) {
        optionals.set(1);
      }
      if (struct.isSetTechPlatformEnv()) {
        optionals.set(2);
      }
      if (struct.isSetTaskType()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTaskIds()) {
        {
          oprot.writeI32(struct.taskIds.size());
          for (int _iter120 : struct.taskIds)
          {
            oprot.writeI32(_iter120);
          }
        }
      }
      if (struct.isSetTargetIds()) {
        {
          oprot.writeI32(struct.targetIds.size());
          for (int _iter121 : struct.targetIds)
          {
            oprot.writeI32(_iter121);
          }
        }
      }
      if (struct.isSetTechPlatformEnv()) {
        oprot.writeI32(struct.techPlatformEnv.getValue());
      }
      if (struct.isSetTaskType()) {
        oprot.writeI32(struct.taskType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqSyncMappingTaskOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list122 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.taskIds = new ArrayList<Integer>(_list122.size);
          for (int _i123 = 0; _i123 < _list122.size; ++_i123)
          {
            int _elem124;
            _elem124 = iprot.readI32();
            struct.taskIds.add(_elem124);
          }
        }
        struct.setTaskIdsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.targetIds = new ArrayList<Integer>(_list125.size);
          for (int _i126 = 0; _i126 < _list125.size; ++_i126)
          {
            int _elem127;
            _elem127 = iprot.readI32();
            struct.targetIds.add(_elem127);
          }
        }
        struct.setTargetIdsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.techPlatformEnv = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatformEnv.findByValue(iprot.readI32());
        struct.setTechPlatformEnvIsSet(true);
      }
      if (incoming.get(3)) {
        struct.taskType = SyncTaskType.findByValue(iprot.readI32());
        struct.setTaskTypeIsSet(true);
      }
    }
  }

}

