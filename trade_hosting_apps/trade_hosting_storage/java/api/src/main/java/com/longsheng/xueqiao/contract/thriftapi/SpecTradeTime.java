/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SpecTradeTime implements org.apache.thrift.TBase<SpecTradeTime, SpecTradeTime._Fields>, java.io.Serializable, Cloneable, Comparable<SpecTradeTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpecTradeTime");

  private static final org.apache.thrift.protocol.TField SPEC_TRADE_TIME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specTradeTimeId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField NON_TRADE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("nonTradeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NON_TRADE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("nonTradeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NEXT_TRADE_OPEN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextTradeOpenType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityTypes", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityNames", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SpecTradeTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SpecTradeTimeTupleSchemeFactory());
  }

  public int specTradeTimeId; // optional
  public String exchangeMic; // optional
  public List<Integer> sledCommodityIds; // optional
  public long nonTradeStartTimestamp; // optional
  public long nonTradeEndTimestamp; // optional
  /**
   * 
   * @see NextTradeOpenType
   */
  public NextTradeOpenType nextTradeOpenType; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional
  public List<String> sledCommodityTypes; // optional
  public List<String> sledCommodityNames; // optional
  public String zoneId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SPEC_TRADE_TIME_ID((short)1, "specTradeTimeId"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    SLED_COMMODITY_IDS((short)3, "sledCommodityIds"),
    NON_TRADE_START_TIMESTAMP((short)4, "nonTradeStartTimestamp"),
    NON_TRADE_END_TIMESTAMP((short)5, "nonTradeEndTimestamp"),
    /**
     * 
     * @see NextTradeOpenType
     */
    NEXT_TRADE_OPEN_TYPE((short)6, "nextTradeOpenType"),
    CREATE_TIMESTAMP((short)7, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)8, "lastModifyTimestamp"),
    SLED_COMMODITY_TYPES((short)9, "sledCommodityTypes"),
    SLED_COMMODITY_NAMES((short)10, "sledCommodityNames"),
    ZONE_ID((short)11, "zoneId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SPEC_TRADE_TIME_ID
          return SPEC_TRADE_TIME_ID;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // SLED_COMMODITY_IDS
          return SLED_COMMODITY_IDS;
        case 4: // NON_TRADE_START_TIMESTAMP
          return NON_TRADE_START_TIMESTAMP;
        case 5: // NON_TRADE_END_TIMESTAMP
          return NON_TRADE_END_TIMESTAMP;
        case 6: // NEXT_TRADE_OPEN_TYPE
          return NEXT_TRADE_OPEN_TYPE;
        case 7: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 8: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        case 9: // SLED_COMMODITY_TYPES
          return SLED_COMMODITY_TYPES;
        case 10: // SLED_COMMODITY_NAMES
          return SLED_COMMODITY_NAMES;
        case 11: // ZONE_ID
          return ZONE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SPECTRADETIMEID_ISSET_ID = 0;
  private static final int __NONTRADESTARTTIMESTAMP_ISSET_ID = 1;
  private static final int __NONTRADEENDTIMESTAMP_ISSET_ID = 2;
  private static final int __CREATETIMESTAMP_ISSET_ID = 3;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SPEC_TRADE_TIME_ID,_Fields.EXCHANGE_MIC,_Fields.SLED_COMMODITY_IDS,_Fields.NON_TRADE_START_TIMESTAMP,_Fields.NON_TRADE_END_TIMESTAMP,_Fields.NEXT_TRADE_OPEN_TYPE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP,_Fields.SLED_COMMODITY_TYPES,_Fields.SLED_COMMODITY_NAMES,_Fields.ZONE_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SPEC_TRADE_TIME_ID, new org.apache.thrift.meta_data.FieldMetaData("specTradeTimeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.NON_TRADE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("nonTradeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NON_TRADE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("nonTradeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_TRADE_OPEN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nextTradeOpenType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NextTradeOpenType.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPES, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SLED_COMMODITY_NAMES, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpecTradeTime.class, metaDataMap);
  }

  public SpecTradeTime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpecTradeTime(SpecTradeTime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.specTradeTimeId = other.specTradeTimeId;
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    if (other.isSetSledCommodityIds()) {
      List<Integer> __this__sledCommodityIds = new ArrayList<Integer>(other.sledCommodityIds);
      this.sledCommodityIds = __this__sledCommodityIds;
    }
    this.nonTradeStartTimestamp = other.nonTradeStartTimestamp;
    this.nonTradeEndTimestamp = other.nonTradeEndTimestamp;
    if (other.isSetNextTradeOpenType()) {
      this.nextTradeOpenType = other.nextTradeOpenType;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
    if (other.isSetSledCommodityTypes()) {
      List<String> __this__sledCommodityTypes = new ArrayList<String>(other.sledCommodityTypes);
      this.sledCommodityTypes = __this__sledCommodityTypes;
    }
    if (other.isSetSledCommodityNames()) {
      List<String> __this__sledCommodityNames = new ArrayList<String>(other.sledCommodityNames);
      this.sledCommodityNames = __this__sledCommodityNames;
    }
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
  }

  public SpecTradeTime deepCopy() {
    return new SpecTradeTime(this);
  }

  @Override
  public void clear() {
    setSpecTradeTimeIdIsSet(false);
    this.specTradeTimeId = 0;
    this.exchangeMic = null;
    this.sledCommodityIds = null;
    setNonTradeStartTimestampIsSet(false);
    this.nonTradeStartTimestamp = 0;
    setNonTradeEndTimestampIsSet(false);
    this.nonTradeEndTimestamp = 0;
    this.nextTradeOpenType = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
    this.sledCommodityTypes = null;
    this.sledCommodityNames = null;
    this.zoneId = null;
  }

  public int getSpecTradeTimeId() {
    return this.specTradeTimeId;
  }

  public SpecTradeTime setSpecTradeTimeId(int specTradeTimeId) {
    this.specTradeTimeId = specTradeTimeId;
    setSpecTradeTimeIdIsSet(true);
    return this;
  }

  public void unsetSpecTradeTimeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID);
  }

  /** Returns true if field specTradeTimeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecTradeTimeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID);
  }

  public void setSpecTradeTimeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID, value);
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public SpecTradeTime setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public int getSledCommodityIdsSize() {
    return (this.sledCommodityIds == null) ? 0 : this.sledCommodityIds.size();
  }

  public java.util.Iterator<Integer> getSledCommodityIdsIterator() {
    return (this.sledCommodityIds == null) ? null : this.sledCommodityIds.iterator();
  }

  public void addToSledCommodityIds(int elem) {
    if (this.sledCommodityIds == null) {
      this.sledCommodityIds = new ArrayList<Integer>();
    }
    this.sledCommodityIds.add(elem);
  }

  public List<Integer> getSledCommodityIds() {
    return this.sledCommodityIds;
  }

  public SpecTradeTime setSledCommodityIds(List<Integer> sledCommodityIds) {
    this.sledCommodityIds = sledCommodityIds;
    return this;
  }

  public void unsetSledCommodityIds() {
    this.sledCommodityIds = null;
  }

  /** Returns true if field sledCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityIds() {
    return this.sledCommodityIds != null;
  }

  public void setSledCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.sledCommodityIds = null;
    }
  }

  public long getNonTradeStartTimestamp() {
    return this.nonTradeStartTimestamp;
  }

  public SpecTradeTime setNonTradeStartTimestamp(long nonTradeStartTimestamp) {
    this.nonTradeStartTimestamp = nonTradeStartTimestamp;
    setNonTradeStartTimestampIsSet(true);
    return this;
  }

  public void unsetNonTradeStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field nonTradeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetNonTradeStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID);
  }

  public void setNonTradeStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getNonTradeEndTimestamp() {
    return this.nonTradeEndTimestamp;
  }

  public SpecTradeTime setNonTradeEndTimestamp(long nonTradeEndTimestamp) {
    this.nonTradeEndTimestamp = nonTradeEndTimestamp;
    setNonTradeEndTimestampIsSet(true);
    return this;
  }

  public void unsetNonTradeEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field nonTradeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetNonTradeEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID);
  }

  public void setNonTradeEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see NextTradeOpenType
   */
  public NextTradeOpenType getNextTradeOpenType() {
    return this.nextTradeOpenType;
  }

  /**
   * 
   * @see NextTradeOpenType
   */
  public SpecTradeTime setNextTradeOpenType(NextTradeOpenType nextTradeOpenType) {
    this.nextTradeOpenType = nextTradeOpenType;
    return this;
  }

  public void unsetNextTradeOpenType() {
    this.nextTradeOpenType = null;
  }

  /** Returns true if field nextTradeOpenType is set (has been assigned a value) and false otherwise */
  public boolean isSetNextTradeOpenType() {
    return this.nextTradeOpenType != null;
  }

  public void setNextTradeOpenTypeIsSet(boolean value) {
    if (!value) {
      this.nextTradeOpenType = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SpecTradeTime setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SpecTradeTime setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public int getSledCommodityTypesSize() {
    return (this.sledCommodityTypes == null) ? 0 : this.sledCommodityTypes.size();
  }

  public java.util.Iterator<String> getSledCommodityTypesIterator() {
    return (this.sledCommodityTypes == null) ? null : this.sledCommodityTypes.iterator();
  }

  public void addToSledCommodityTypes(String elem) {
    if (this.sledCommodityTypes == null) {
      this.sledCommodityTypes = new ArrayList<String>();
    }
    this.sledCommodityTypes.add(elem);
  }

  public List<String> getSledCommodityTypes() {
    return this.sledCommodityTypes;
  }

  public SpecTradeTime setSledCommodityTypes(List<String> sledCommodityTypes) {
    this.sledCommodityTypes = sledCommodityTypes;
    return this;
  }

  public void unsetSledCommodityTypes() {
    this.sledCommodityTypes = null;
  }

  /** Returns true if field sledCommodityTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityTypes() {
    return this.sledCommodityTypes != null;
  }

  public void setSledCommodityTypesIsSet(boolean value) {
    if (!value) {
      this.sledCommodityTypes = null;
    }
  }

  public int getSledCommodityNamesSize() {
    return (this.sledCommodityNames == null) ? 0 : this.sledCommodityNames.size();
  }

  public java.util.Iterator<String> getSledCommodityNamesIterator() {
    return (this.sledCommodityNames == null) ? null : this.sledCommodityNames.iterator();
  }

  public void addToSledCommodityNames(String elem) {
    if (this.sledCommodityNames == null) {
      this.sledCommodityNames = new ArrayList<String>();
    }
    this.sledCommodityNames.add(elem);
  }

  public List<String> getSledCommodityNames() {
    return this.sledCommodityNames;
  }

  public SpecTradeTime setSledCommodityNames(List<String> sledCommodityNames) {
    this.sledCommodityNames = sledCommodityNames;
    return this;
  }

  public void unsetSledCommodityNames() {
    this.sledCommodityNames = null;
  }

  /** Returns true if field sledCommodityNames is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityNames() {
    return this.sledCommodityNames != null;
  }

  public void setSledCommodityNamesIsSet(boolean value) {
    if (!value) {
      this.sledCommodityNames = null;
    }
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public SpecTradeTime setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SPEC_TRADE_TIME_ID:
      if (value == null) {
        unsetSpecTradeTimeId();
      } else {
        setSpecTradeTimeId((Integer)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case SLED_COMMODITY_IDS:
      if (value == null) {
        unsetSledCommodityIds();
      } else {
        setSledCommodityIds((List<Integer>)value);
      }
      break;

    case NON_TRADE_START_TIMESTAMP:
      if (value == null) {
        unsetNonTradeStartTimestamp();
      } else {
        setNonTradeStartTimestamp((Long)value);
      }
      break;

    case NON_TRADE_END_TIMESTAMP:
      if (value == null) {
        unsetNonTradeEndTimestamp();
      } else {
        setNonTradeEndTimestamp((Long)value);
      }
      break;

    case NEXT_TRADE_OPEN_TYPE:
      if (value == null) {
        unsetNextTradeOpenType();
      } else {
        setNextTradeOpenType((NextTradeOpenType)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    case SLED_COMMODITY_TYPES:
      if (value == null) {
        unsetSledCommodityTypes();
      } else {
        setSledCommodityTypes((List<String>)value);
      }
      break;

    case SLED_COMMODITY_NAMES:
      if (value == null) {
        unsetSledCommodityNames();
      } else {
        setSledCommodityNames((List<String>)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SPEC_TRADE_TIME_ID:
      return Integer.valueOf(getSpecTradeTimeId());

    case EXCHANGE_MIC:
      return getExchangeMic();

    case SLED_COMMODITY_IDS:
      return getSledCommodityIds();

    case NON_TRADE_START_TIMESTAMP:
      return Long.valueOf(getNonTradeStartTimestamp());

    case NON_TRADE_END_TIMESTAMP:
      return Long.valueOf(getNonTradeEndTimestamp());

    case NEXT_TRADE_OPEN_TYPE:
      return getNextTradeOpenType();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    case SLED_COMMODITY_TYPES:
      return getSledCommodityTypes();

    case SLED_COMMODITY_NAMES:
      return getSledCommodityNames();

    case ZONE_ID:
      return getZoneId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SPEC_TRADE_TIME_ID:
      return isSetSpecTradeTimeId();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case SLED_COMMODITY_IDS:
      return isSetSledCommodityIds();
    case NON_TRADE_START_TIMESTAMP:
      return isSetNonTradeStartTimestamp();
    case NON_TRADE_END_TIMESTAMP:
      return isSetNonTradeEndTimestamp();
    case NEXT_TRADE_OPEN_TYPE:
      return isSetNextTradeOpenType();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    case SLED_COMMODITY_TYPES:
      return isSetSledCommodityTypes();
    case SLED_COMMODITY_NAMES:
      return isSetSledCommodityNames();
    case ZONE_ID:
      return isSetZoneId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpecTradeTime)
      return this.equals((SpecTradeTime)that);
    return false;
  }

  public boolean equals(SpecTradeTime that) {
    if (that == null)
      return false;

    boolean this_present_specTradeTimeId = true && this.isSetSpecTradeTimeId();
    boolean that_present_specTradeTimeId = true && that.isSetSpecTradeTimeId();
    if (this_present_specTradeTimeId || that_present_specTradeTimeId) {
      if (!(this_present_specTradeTimeId && that_present_specTradeTimeId))
        return false;
      if (this.specTradeTimeId != that.specTradeTimeId)
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_sledCommodityIds = true && this.isSetSledCommodityIds();
    boolean that_present_sledCommodityIds = true && that.isSetSledCommodityIds();
    if (this_present_sledCommodityIds || that_present_sledCommodityIds) {
      if (!(this_present_sledCommodityIds && that_present_sledCommodityIds))
        return false;
      if (!this.sledCommodityIds.equals(that.sledCommodityIds))
        return false;
    }

    boolean this_present_nonTradeStartTimestamp = true && this.isSetNonTradeStartTimestamp();
    boolean that_present_nonTradeStartTimestamp = true && that.isSetNonTradeStartTimestamp();
    if (this_present_nonTradeStartTimestamp || that_present_nonTradeStartTimestamp) {
      if (!(this_present_nonTradeStartTimestamp && that_present_nonTradeStartTimestamp))
        return false;
      if (this.nonTradeStartTimestamp != that.nonTradeStartTimestamp)
        return false;
    }

    boolean this_present_nonTradeEndTimestamp = true && this.isSetNonTradeEndTimestamp();
    boolean that_present_nonTradeEndTimestamp = true && that.isSetNonTradeEndTimestamp();
    if (this_present_nonTradeEndTimestamp || that_present_nonTradeEndTimestamp) {
      if (!(this_present_nonTradeEndTimestamp && that_present_nonTradeEndTimestamp))
        return false;
      if (this.nonTradeEndTimestamp != that.nonTradeEndTimestamp)
        return false;
    }

    boolean this_present_nextTradeOpenType = true && this.isSetNextTradeOpenType();
    boolean that_present_nextTradeOpenType = true && that.isSetNextTradeOpenType();
    if (this_present_nextTradeOpenType || that_present_nextTradeOpenType) {
      if (!(this_present_nextTradeOpenType && that_present_nextTradeOpenType))
        return false;
      if (!this.nextTradeOpenType.equals(that.nextTradeOpenType))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    boolean this_present_sledCommodityTypes = true && this.isSetSledCommodityTypes();
    boolean that_present_sledCommodityTypes = true && that.isSetSledCommodityTypes();
    if (this_present_sledCommodityTypes || that_present_sledCommodityTypes) {
      if (!(this_present_sledCommodityTypes && that_present_sledCommodityTypes))
        return false;
      if (!this.sledCommodityTypes.equals(that.sledCommodityTypes))
        return false;
    }

    boolean this_present_sledCommodityNames = true && this.isSetSledCommodityNames();
    boolean that_present_sledCommodityNames = true && that.isSetSledCommodityNames();
    if (this_present_sledCommodityNames || that_present_sledCommodityNames) {
      if (!(this_present_sledCommodityNames && that_present_sledCommodityNames))
        return false;
      if (!this.sledCommodityNames.equals(that.sledCommodityNames))
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SpecTradeTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSpecTradeTimeId()).compareTo(other.isSetSpecTradeTimeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecTradeTimeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specTradeTimeId, other.specTradeTimeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityIds()).compareTo(other.isSetSledCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityIds, other.sledCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonTradeStartTimestamp()).compareTo(other.isSetNonTradeStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonTradeStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonTradeStartTimestamp, other.nonTradeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonTradeEndTimestamp()).compareTo(other.isSetNonTradeEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonTradeEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonTradeEndTimestamp, other.nonTradeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextTradeOpenType()).compareTo(other.isSetNextTradeOpenType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextTradeOpenType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextTradeOpenType, other.nextTradeOpenType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityTypes()).compareTo(other.isSetSledCommodityTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityTypes, other.sledCommodityTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityNames()).compareTo(other.isSetSledCommodityNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityNames, other.sledCommodityNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SpecTradeTime(");
    boolean first = true;

    if (isSetSpecTradeTimeId()) {
      sb.append("specTradeTimeId:");
      sb.append(this.specTradeTimeId);
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetSledCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityIds:");
      if (this.sledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityIds);
      }
      first = false;
    }
    if (isSetNonTradeStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("nonTradeStartTimestamp:");
      sb.append(this.nonTradeStartTimestamp);
      first = false;
    }
    if (isSetNonTradeEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("nonTradeEndTimestamp:");
      sb.append(this.nonTradeEndTimestamp);
      first = false;
    }
    if (isSetNextTradeOpenType()) {
      if (!first) sb.append(", ");
      sb.append("nextTradeOpenType:");
      if (this.nextTradeOpenType == null) {
        sb.append("null");
      } else {
        sb.append(this.nextTradeOpenType);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    if (isSetSledCommodityTypes()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityTypes:");
      if (this.sledCommodityTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityTypes);
      }
      first = false;
    }
    if (isSetSledCommodityNames()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityNames:");
      if (this.sledCommodityNames == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityNames);
      }
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpecTradeTimeStandardSchemeFactory implements SchemeFactory {
    public SpecTradeTimeStandardScheme getScheme() {
      return new SpecTradeTimeStandardScheme();
    }
  }

  private static class SpecTradeTimeStandardScheme extends StandardScheme<SpecTradeTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpecTradeTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SPEC_TRADE_TIME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specTradeTimeId = iprot.readI32();
              struct.setSpecTradeTimeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                struct.sledCommodityIds = new ArrayList<Integer>(_list368.size);
                for (int _i369 = 0; _i369 < _list368.size; ++_i369)
                {
                  int _elem370;
                  _elem370 = iprot.readI32();
                  struct.sledCommodityIds.add(_elem370);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NON_TRADE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonTradeStartTimestamp = iprot.readI64();
              struct.setNonTradeStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NON_TRADE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonTradeEndTimestamp = iprot.readI64();
              struct.setNonTradeEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEXT_TRADE_OPEN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextTradeOpenType = NextTradeOpenType.findByValue(iprot.readI32());
              struct.setNextTradeOpenTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SLED_COMMODITY_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list371 = iprot.readListBegin();
                struct.sledCommodityTypes = new ArrayList<String>(_list371.size);
                for (int _i372 = 0; _i372 < _list371.size; ++_i372)
                {
                  String _elem373;
                  _elem373 = iprot.readString();
                  struct.sledCommodityTypes.add(_elem373);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLED_COMMODITY_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list374 = iprot.readListBegin();
                struct.sledCommodityNames = new ArrayList<String>(_list374.size);
                for (int _i375 = 0; _i375 < _list374.size; ++_i375)
                {
                  String _elem376;
                  _elem376 = iprot.readString();
                  struct.sledCommodityNames.add(_elem376);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpecTradeTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSpecTradeTimeId()) {
        oprot.writeFieldBegin(SPEC_TRADE_TIME_ID_FIELD_DESC);
        oprot.writeI32(struct.specTradeTimeId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityIds != null) {
        if (struct.isSetSledCommodityIds()) {
          oprot.writeFieldBegin(SLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledCommodityIds.size()));
            for (int _iter377 : struct.sledCommodityIds)
            {
              oprot.writeI32(_iter377);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        oprot.writeFieldBegin(NON_TRADE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.nonTradeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        oprot.writeFieldBegin(NON_TRADE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.nonTradeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.nextTradeOpenType != null) {
        if (struct.isSetNextTradeOpenType()) {
          oprot.writeFieldBegin(NEXT_TRADE_OPEN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.nextTradeOpenType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityTypes != null) {
        if (struct.isSetSledCommodityTypes()) {
          oprot.writeFieldBegin(SLED_COMMODITY_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sledCommodityTypes.size()));
            for (String _iter378 : struct.sledCommodityTypes)
            {
              oprot.writeString(_iter378);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityNames != null) {
        if (struct.isSetSledCommodityNames()) {
          oprot.writeFieldBegin(SLED_COMMODITY_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sledCommodityNames.size()));
            for (String _iter379 : struct.sledCommodityNames)
            {
              oprot.writeString(_iter379);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpecTradeTimeTupleSchemeFactory implements SchemeFactory {
    public SpecTradeTimeTupleScheme getScheme() {
      return new SpecTradeTimeTupleScheme();
    }
  }

  private static class SpecTradeTimeTupleScheme extends TupleScheme<SpecTradeTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpecTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSpecTradeTimeId()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityIds()) {
        optionals.set(2);
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetNextTradeOpenType()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(6);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(7);
      }
      if (struct.isSetSledCommodityTypes()) {
        optionals.set(8);
      }
      if (struct.isSetSledCommodityNames()) {
        optionals.set(9);
      }
      if (struct.isSetZoneId()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetSpecTradeTimeId()) {
        oprot.writeI32(struct.specTradeTimeId);
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetSledCommodityIds()) {
        {
          oprot.writeI32(struct.sledCommodityIds.size());
          for (int _iter380 : struct.sledCommodityIds)
          {
            oprot.writeI32(_iter380);
          }
        }
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        oprot.writeI64(struct.nonTradeStartTimestamp);
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        oprot.writeI64(struct.nonTradeEndTimestamp);
      }
      if (struct.isSetNextTradeOpenType()) {
        oprot.writeI32(struct.nextTradeOpenType.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
      if (struct.isSetSledCommodityTypes()) {
        {
          oprot.writeI32(struct.sledCommodityTypes.size());
          for (String _iter381 : struct.sledCommodityTypes)
          {
            oprot.writeString(_iter381);
          }
        }
      }
      if (struct.isSetSledCommodityNames()) {
        {
          oprot.writeI32(struct.sledCommodityNames.size());
          for (String _iter382 : struct.sledCommodityNames)
          {
            oprot.writeString(_iter382);
          }
        }
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpecTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.specTradeTimeId = iprot.readI32();
        struct.setSpecTradeTimeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list383 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledCommodityIds = new ArrayList<Integer>(_list383.size);
          for (int _i384 = 0; _i384 < _list383.size; ++_i384)
          {
            int _elem385;
            _elem385 = iprot.readI32();
            struct.sledCommodityIds.add(_elem385);
          }
        }
        struct.setSledCommodityIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nonTradeStartTimestamp = iprot.readI64();
        struct.setNonTradeStartTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nonTradeEndTimestamp = iprot.readI64();
        struct.setNonTradeEndTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.nextTradeOpenType = NextTradeOpenType.findByValue(iprot.readI32());
        struct.setNextTradeOpenTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list386 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sledCommodityTypes = new ArrayList<String>(_list386.size);
          for (int _i387 = 0; _i387 < _list386.size; ++_i387)
          {
            String _elem388;
            _elem388 = iprot.readString();
            struct.sledCommodityTypes.add(_elem388);
          }
        }
        struct.setSledCommodityTypesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list389 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sledCommodityNames = new ArrayList<String>(_list389.size);
          for (int _i390 = 0; _i390 < _list389.size; ++_i390)
          {
            String _elem391;
            _elem391 = iprot.readString();
            struct.sledCommodityNames.add(_elem391);
          }
        }
        struct.setSledCommodityNamesIsSet(true);
      }
      if (incoming.get(10)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
    }
  }

}

