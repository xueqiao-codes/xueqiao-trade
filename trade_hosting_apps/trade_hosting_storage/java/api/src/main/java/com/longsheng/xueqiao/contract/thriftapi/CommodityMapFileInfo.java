/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommodityMapFileInfo implements org.apache.thrift.TBase<CommodityMapFileInfo, CommodityMapFileInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CommodityMapFileInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommodityMapFileInfo");

  private static final org.apache.thrift.protocol.TField COMMODITY_MAP_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityMapFile", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntryId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField FILE_MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("fileMD5", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField FILE_INFO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileInfoId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommodityMapFileInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommodityMapFileInfoTupleSchemeFactory());
  }

  public ByteBuffer commodityMapFile; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform; // optional
  public int brokerEntryId; // optional
  public String fileMD5; // optional
  public String path; // optional
  public String url; // optional
  public int version; // optional
  public int fileInfoId; // optional
  /**
   * 
   * @see CommodityMapFileStatus
   */
  public CommodityMapFileStatus status; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMMODITY_MAP_FILE((short)1, "commodityMapFile"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
     */
    TECH_PLATFORM((short)2, "techPlatform"),
    BROKER_ENTRY_ID((short)3, "brokerEntryId"),
    FILE_MD5((short)4, "fileMD5"),
    PATH((short)5, "path"),
    URL((short)6, "url"),
    VERSION((short)7, "version"),
    FILE_INFO_ID((short)8, "fileInfoId"),
    /**
     * 
     * @see CommodityMapFileStatus
     */
    STATUS((short)9, "status"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMMODITY_MAP_FILE
          return COMMODITY_MAP_FILE;
        case 2: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 3: // BROKER_ENTRY_ID
          return BROKER_ENTRY_ID;
        case 4: // FILE_MD5
          return FILE_MD5;
        case 5: // PATH
          return PATH;
        case 6: // URL
          return URL;
        case 7: // VERSION
          return VERSION;
        case 8: // FILE_INFO_ID
          return FILE_INFO_ID;
        case 9: // STATUS
          return STATUS;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BROKERENTRYID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __FILEINFOID_ISSET_ID = 2;
  private static final int __CREATETIMESTAMP_ISSET_ID = 3;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMMODITY_MAP_FILE,_Fields.TECH_PLATFORM,_Fields.BROKER_ENTRY_ID,_Fields.FILE_MD5,_Fields.PATH,_Fields.URL,_Fields.VERSION,_Fields.FILE_INFO_ID,_Fields.STATUS,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMMODITY_MAP_FILE, new org.apache.thrift.meta_data.FieldMetaData("commodityMapFile", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.class)));
    tmpMap.put(_Fields.BROKER_ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerEntryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_MD5, new org.apache.thrift.meta_data.FieldMetaData("fileMD5", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FILE_INFO_ID, new org.apache.thrift.meta_data.FieldMetaData("fileInfoId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommodityMapFileStatus.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommodityMapFileInfo.class, metaDataMap);
  }

  public CommodityMapFileInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommodityMapFileInfo(CommodityMapFileInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCommodityMapFile()) {
      this.commodityMapFile = org.apache.thrift.TBaseHelper.copyBinary(other.commodityMapFile);
;
    }
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    this.brokerEntryId = other.brokerEntryId;
    if (other.isSetFileMD5()) {
      this.fileMD5 = other.fileMD5;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.version = other.version;
    this.fileInfoId = other.fileInfoId;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public CommodityMapFileInfo deepCopy() {
    return new CommodityMapFileInfo(this);
  }

  @Override
  public void clear() {
    this.commodityMapFile = null;
    this.techPlatform = null;
    setBrokerEntryIdIsSet(false);
    this.brokerEntryId = 0;
    this.fileMD5 = null;
    this.path = null;
    this.url = null;
    setVersionIsSet(false);
    this.version = 0;
    setFileInfoIdIsSet(false);
    this.fileInfoId = 0;
    this.status = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public byte[] getCommodityMapFile() {
    setCommodityMapFile(org.apache.thrift.TBaseHelper.rightSize(commodityMapFile));
    return commodityMapFile == null ? null : commodityMapFile.array();
  }

  public ByteBuffer bufferForCommodityMapFile() {
    return commodityMapFile;
  }

  public CommodityMapFileInfo setCommodityMapFile(byte[] commodityMapFile) {
    setCommodityMapFile(commodityMapFile == null ? (ByteBuffer)null : ByteBuffer.wrap(commodityMapFile));
    return this;
  }

  public CommodityMapFileInfo setCommodityMapFile(ByteBuffer commodityMapFile) {
    this.commodityMapFile = commodityMapFile;
    return this;
  }

  public void unsetCommodityMapFile() {
    this.commodityMapFile = null;
  }

  /** Returns true if field commodityMapFile is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityMapFile() {
    return this.commodityMapFile != null;
  }

  public void setCommodityMapFileIsSet(boolean value) {
    if (!value) {
      this.commodityMapFile = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public CommodityMapFileInfo setTechPlatform(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public int getBrokerEntryId() {
    return this.brokerEntryId;
  }

  public CommodityMapFileInfo setBrokerEntryId(int brokerEntryId) {
    this.brokerEntryId = brokerEntryId;
    setBrokerEntryIdIsSet(true);
    return this;
  }

  public void unsetBrokerEntryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  /** Returns true if field brokerEntryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  public void setBrokerEntryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID, value);
  }

  public String getFileMD5() {
    return this.fileMD5;
  }

  public CommodityMapFileInfo setFileMD5(String fileMD5) {
    this.fileMD5 = fileMD5;
    return this;
  }

  public void unsetFileMD5() {
    this.fileMD5 = null;
  }

  /** Returns true if field fileMD5 is set (has been assigned a value) and false otherwise */
  public boolean isSetFileMD5() {
    return this.fileMD5 != null;
  }

  public void setFileMD5IsSet(boolean value) {
    if (!value) {
      this.fileMD5 = null;
    }
  }

  public String getPath() {
    return this.path;
  }

  public CommodityMapFileInfo setPath(String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public CommodityMapFileInfo setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public CommodityMapFileInfo setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public int getFileInfoId() {
    return this.fileInfoId;
  }

  public CommodityMapFileInfo setFileInfoId(int fileInfoId) {
    this.fileInfoId = fileInfoId;
    setFileInfoIdIsSet(true);
    return this;
  }

  public void unsetFileInfoId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILEINFOID_ISSET_ID);
  }

  /** Returns true if field fileInfoId is set (has been assigned a value) and false otherwise */
  public boolean isSetFileInfoId() {
    return EncodingUtils.testBit(__isset_bitfield, __FILEINFOID_ISSET_ID);
  }

  public void setFileInfoIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILEINFOID_ISSET_ID, value);
  }

  /**
   * 
   * @see CommodityMapFileStatus
   */
  public CommodityMapFileStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see CommodityMapFileStatus
   */
  public CommodityMapFileInfo setStatus(CommodityMapFileStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public CommodityMapFileInfo setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public CommodityMapFileInfo setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMMODITY_MAP_FILE:
      if (value == null) {
        unsetCommodityMapFile();
      } else {
        setCommodityMapFile((ByteBuffer)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform)value);
      }
      break;

    case BROKER_ENTRY_ID:
      if (value == null) {
        unsetBrokerEntryId();
      } else {
        setBrokerEntryId((Integer)value);
      }
      break;

    case FILE_MD5:
      if (value == null) {
        unsetFileMD5();
      } else {
        setFileMD5((String)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case FILE_INFO_ID:
      if (value == null) {
        unsetFileInfoId();
      } else {
        setFileInfoId((Integer)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((CommodityMapFileStatus)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMMODITY_MAP_FILE:
      return getCommodityMapFile();

    case TECH_PLATFORM:
      return getTechPlatform();

    case BROKER_ENTRY_ID:
      return Integer.valueOf(getBrokerEntryId());

    case FILE_MD5:
      return getFileMD5();

    case PATH:
      return getPath();

    case URL:
      return getUrl();

    case VERSION:
      return Integer.valueOf(getVersion());

    case FILE_INFO_ID:
      return Integer.valueOf(getFileInfoId());

    case STATUS:
      return getStatus();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMMODITY_MAP_FILE:
      return isSetCommodityMapFile();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case BROKER_ENTRY_ID:
      return isSetBrokerEntryId();
    case FILE_MD5:
      return isSetFileMD5();
    case PATH:
      return isSetPath();
    case URL:
      return isSetUrl();
    case VERSION:
      return isSetVersion();
    case FILE_INFO_ID:
      return isSetFileInfoId();
    case STATUS:
      return isSetStatus();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommodityMapFileInfo)
      return this.equals((CommodityMapFileInfo)that);
    return false;
  }

  public boolean equals(CommodityMapFileInfo that) {
    if (that == null)
      return false;

    boolean this_present_commodityMapFile = true && this.isSetCommodityMapFile();
    boolean that_present_commodityMapFile = true && that.isSetCommodityMapFile();
    if (this_present_commodityMapFile || that_present_commodityMapFile) {
      if (!(this_present_commodityMapFile && that_present_commodityMapFile))
        return false;
      if (!this.commodityMapFile.equals(that.commodityMapFile))
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_brokerEntryId = true && this.isSetBrokerEntryId();
    boolean that_present_brokerEntryId = true && that.isSetBrokerEntryId();
    if (this_present_brokerEntryId || that_present_brokerEntryId) {
      if (!(this_present_brokerEntryId && that_present_brokerEntryId))
        return false;
      if (this.brokerEntryId != that.brokerEntryId)
        return false;
    }

    boolean this_present_fileMD5 = true && this.isSetFileMD5();
    boolean that_present_fileMD5 = true && that.isSetFileMD5();
    if (this_present_fileMD5 || that_present_fileMD5) {
      if (!(this_present_fileMD5 && that_present_fileMD5))
        return false;
      if (!this.fileMD5.equals(that.fileMD5))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_fileInfoId = true && this.isSetFileInfoId();
    boolean that_present_fileInfoId = true && that.isSetFileInfoId();
    if (this_present_fileInfoId || that_present_fileInfoId) {
      if (!(this_present_fileInfoId && that_present_fileInfoId))
        return false;
      if (this.fileInfoId != that.fileInfoId)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommodityMapFileInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCommodityMapFile()).compareTo(other.isSetCommodityMapFile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityMapFile()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityMapFile, other.commodityMapFile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerEntryId()).compareTo(other.isSetBrokerEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntryId, other.brokerEntryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileMD5()).compareTo(other.isSetFileMD5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileMD5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileMD5, other.fileMD5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPath()).compareTo(other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileInfoId()).compareTo(other.isSetFileInfoId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileInfoId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileInfoId, other.fileInfoId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommodityMapFileInfo(");
    boolean first = true;

    if (isSetCommodityMapFile()) {
      sb.append("commodityMapFile:");
      if (this.commodityMapFile == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.commodityMapFile, sb);
      }
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetBrokerEntryId()) {
      if (!first) sb.append(", ");
      sb.append("brokerEntryId:");
      sb.append(this.brokerEntryId);
      first = false;
    }
    if (isSetFileMD5()) {
      if (!first) sb.append(", ");
      sb.append("fileMD5:");
      if (this.fileMD5 == null) {
        sb.append("null");
      } else {
        sb.append(this.fileMD5);
      }
      first = false;
    }
    if (isSetPath()) {
      if (!first) sb.append(", ");
      sb.append("path:");
      if (this.path == null) {
        sb.append("null");
      } else {
        sb.append(this.path);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetFileInfoId()) {
      if (!first) sb.append(", ");
      sb.append("fileInfoId:");
      sb.append(this.fileInfoId);
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommodityMapFileInfoStandardSchemeFactory implements SchemeFactory {
    public CommodityMapFileInfoStandardScheme getScheme() {
      return new CommodityMapFileInfoStandardScheme();
    }
  }

  private static class CommodityMapFileInfoStandardScheme extends StandardScheme<CommodityMapFileInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommodityMapFileInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMMODITY_MAP_FILE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityMapFile = iprot.readBinary();
              struct.setCommodityMapFileIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROKER_ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerEntryId = iprot.readI32();
              struct.setBrokerEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FILE_MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.fileMD5 = iprot.readString();
              struct.setFileMD5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FILE_INFO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fileInfoId = iprot.readI32();
              struct.setFileInfoIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = CommodityMapFileStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommodityMapFileInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.commodityMapFile != null) {
        if (struct.isSetCommodityMapFile()) {
          oprot.writeFieldBegin(COMMODITY_MAP_FILE_FIELD_DESC);
          oprot.writeBinary(struct.commodityMapFile);
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeFieldBegin(BROKER_ENTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerEntryId);
        oprot.writeFieldEnd();
      }
      if (struct.fileMD5 != null) {
        if (struct.isSetFileMD5()) {
          oprot.writeFieldBegin(FILE_MD5_FIELD_DESC);
          oprot.writeString(struct.fileMD5);
          oprot.writeFieldEnd();
        }
      }
      if (struct.path != null) {
        if (struct.isSetPath()) {
          oprot.writeFieldBegin(PATH_FIELD_DESC);
          oprot.writeString(struct.path);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFileInfoId()) {
        oprot.writeFieldBegin(FILE_INFO_ID_FIELD_DESC);
        oprot.writeI32(struct.fileInfoId);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommodityMapFileInfoTupleSchemeFactory implements SchemeFactory {
    public CommodityMapFileInfoTupleScheme getScheme() {
      return new CommodityMapFileInfoTupleScheme();
    }
  }

  private static class CommodityMapFileInfoTupleScheme extends TupleScheme<CommodityMapFileInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommodityMapFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCommodityMapFile()) {
        optionals.set(0);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetBrokerEntryId()) {
        optionals.set(2);
      }
      if (struct.isSetFileMD5()) {
        optionals.set(3);
      }
      if (struct.isSetPath()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      if (struct.isSetVersion()) {
        optionals.set(6);
      }
      if (struct.isSetFileInfoId()) {
        optionals.set(7);
      }
      if (struct.isSetStatus()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(9);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetCommodityMapFile()) {
        oprot.writeBinary(struct.commodityMapFile);
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeI32(struct.brokerEntryId);
      }
      if (struct.isSetFileMD5()) {
        oprot.writeString(struct.fileMD5);
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetFileInfoId()) {
        oprot.writeI32(struct.fileInfoId);
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommodityMapFileInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.commodityMapFile = iprot.readBinary();
        struct.setCommodityMapFileIsSet(true);
      }
      if (incoming.get(1)) {
        struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        struct.brokerEntryId = iprot.readI32();
        struct.setBrokerEntryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.fileMD5 = iprot.readString();
        struct.setFileMD5IsSet(true);
      }
      if (incoming.get(4)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
      if (incoming.get(6)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.fileInfoId = iprot.readI32();
        struct.setFileInfoIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.status = CommodityMapFileStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

