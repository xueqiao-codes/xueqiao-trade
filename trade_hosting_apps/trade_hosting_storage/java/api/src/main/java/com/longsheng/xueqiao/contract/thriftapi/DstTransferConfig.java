/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DstTransferConfig implements org.apache.thrift.TBase<DstTransferConfig, DstTransferConfig._Fields>, java.io.Serializable, Cloneable, Comparable<DstTransferConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DstTransferConfig");

  private static final org.apache.thrift.protocol.TField DST_TRANSFER_CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dstTransferConfigId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MICS_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMics", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityTypes", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_NAMES_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityNames", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityIds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField STANDARD2_DST_FIELD_DESC = new org.apache.thrift.protocol.TField("standard2Dst", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField DST2_STANDARD_FIELD_DESC = new org.apache.thrift.protocol.TField("dst2Standard", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField STANDARD2_DST_OFF_SET_MINUTE_FIELD_DESC = new org.apache.thrift.protocol.TField("standard2DstOffSetMinute", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DstTransferConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DstTransferConfigTupleSchemeFactory());
  }

  public int dstTransferConfigId; // optional
  public List<String> exchangeMics; // optional
  public List<String> sledCommodityTypes; // optional
  public List<String> sledCommodityNames; // optional
  public List<Integer> commodityIds; // optional
  public SwitchTime standard2Dst; // optional
  public SwitchTime dst2Standard; // optional
  public int standard2DstOffSetMinute; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DST_TRANSFER_CONFIG_ID((short)1, "dstTransferConfigId"),
    EXCHANGE_MICS((short)2, "exchangeMics"),
    SLED_COMMODITY_TYPES((short)3, "sledCommodityTypes"),
    SLED_COMMODITY_NAMES((short)4, "sledCommodityNames"),
    COMMODITY_IDS((short)5, "commodityIds"),
    STANDARD2_DST((short)6, "standard2Dst"),
    DST2_STANDARD((short)7, "dst2Standard"),
    STANDARD2_DST_OFF_SET_MINUTE((short)8, "standard2DstOffSetMinute"),
    CREATE_TIMESTAMP((short)9, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)10, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DST_TRANSFER_CONFIG_ID
          return DST_TRANSFER_CONFIG_ID;
        case 2: // EXCHANGE_MICS
          return EXCHANGE_MICS;
        case 3: // SLED_COMMODITY_TYPES
          return SLED_COMMODITY_TYPES;
        case 4: // SLED_COMMODITY_NAMES
          return SLED_COMMODITY_NAMES;
        case 5: // COMMODITY_IDS
          return COMMODITY_IDS;
        case 6: // STANDARD2_DST
          return STANDARD2_DST;
        case 7: // DST2_STANDARD
          return DST2_STANDARD;
        case 8: // STANDARD2_DST_OFF_SET_MINUTE
          return STANDARD2_DST_OFF_SET_MINUTE;
        case 9: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 10: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DSTTRANSFERCONFIGID_ISSET_ID = 0;
  private static final int __STANDARD2DSTOFFSETMINUTE_ISSET_ID = 1;
  private static final int __CREATETIMESTAMP_ISSET_ID = 2;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DST_TRANSFER_CONFIG_ID,_Fields.EXCHANGE_MICS,_Fields.SLED_COMMODITY_TYPES,_Fields.SLED_COMMODITY_NAMES,_Fields.COMMODITY_IDS,_Fields.STANDARD2_DST,_Fields.DST2_STANDARD,_Fields.STANDARD2_DST_OFF_SET_MINUTE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DST_TRANSFER_CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("dstTransferConfigId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_MICS, new org.apache.thrift.meta_data.FieldMetaData("exchangeMics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPES, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityTypes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.SLED_COMMODITY_NAMES, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityNames", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("commodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STANDARD2_DST, new org.apache.thrift.meta_data.FieldMetaData("standard2Dst", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SwitchTime.class)));
    tmpMap.put(_Fields.DST2_STANDARD, new org.apache.thrift.meta_data.FieldMetaData("dst2Standard", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SwitchTime.class)));
    tmpMap.put(_Fields.STANDARD2_DST_OFF_SET_MINUTE, new org.apache.thrift.meta_data.FieldMetaData("standard2DstOffSetMinute", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DstTransferConfig.class, metaDataMap);
  }

  public DstTransferConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DstTransferConfig(DstTransferConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dstTransferConfigId = other.dstTransferConfigId;
    if (other.isSetExchangeMics()) {
      List<String> __this__exchangeMics = new ArrayList<String>(other.exchangeMics);
      this.exchangeMics = __this__exchangeMics;
    }
    if (other.isSetSledCommodityTypes()) {
      List<String> __this__sledCommodityTypes = new ArrayList<String>(other.sledCommodityTypes);
      this.sledCommodityTypes = __this__sledCommodityTypes;
    }
    if (other.isSetSledCommodityNames()) {
      List<String> __this__sledCommodityNames = new ArrayList<String>(other.sledCommodityNames);
      this.sledCommodityNames = __this__sledCommodityNames;
    }
    if (other.isSetCommodityIds()) {
      List<Integer> __this__commodityIds = new ArrayList<Integer>(other.commodityIds);
      this.commodityIds = __this__commodityIds;
    }
    if (other.isSetStandard2Dst()) {
      this.standard2Dst = new SwitchTime(other.standard2Dst);
    }
    if (other.isSetDst2Standard()) {
      this.dst2Standard = new SwitchTime(other.dst2Standard);
    }
    this.standard2DstOffSetMinute = other.standard2DstOffSetMinute;
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public DstTransferConfig deepCopy() {
    return new DstTransferConfig(this);
  }

  @Override
  public void clear() {
    setDstTransferConfigIdIsSet(false);
    this.dstTransferConfigId = 0;
    this.exchangeMics = null;
    this.sledCommodityTypes = null;
    this.sledCommodityNames = null;
    this.commodityIds = null;
    this.standard2Dst = null;
    this.dst2Standard = null;
    setStandard2DstOffSetMinuteIsSet(false);
    this.standard2DstOffSetMinute = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getDstTransferConfigId() {
    return this.dstTransferConfigId;
  }

  public DstTransferConfig setDstTransferConfigId(int dstTransferConfigId) {
    this.dstTransferConfigId = dstTransferConfigId;
    setDstTransferConfigIdIsSet(true);
    return this;
  }

  public void unsetDstTransferConfigId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DSTTRANSFERCONFIGID_ISSET_ID);
  }

  /** Returns true if field dstTransferConfigId is set (has been assigned a value) and false otherwise */
  public boolean isSetDstTransferConfigId() {
    return EncodingUtils.testBit(__isset_bitfield, __DSTTRANSFERCONFIGID_ISSET_ID);
  }

  public void setDstTransferConfigIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DSTTRANSFERCONFIGID_ISSET_ID, value);
  }

  public int getExchangeMicsSize() {
    return (this.exchangeMics == null) ? 0 : this.exchangeMics.size();
  }

  public java.util.Iterator<String> getExchangeMicsIterator() {
    return (this.exchangeMics == null) ? null : this.exchangeMics.iterator();
  }

  public void addToExchangeMics(String elem) {
    if (this.exchangeMics == null) {
      this.exchangeMics = new ArrayList<String>();
    }
    this.exchangeMics.add(elem);
  }

  public List<String> getExchangeMics() {
    return this.exchangeMics;
  }

  public DstTransferConfig setExchangeMics(List<String> exchangeMics) {
    this.exchangeMics = exchangeMics;
    return this;
  }

  public void unsetExchangeMics() {
    this.exchangeMics = null;
  }

  /** Returns true if field exchangeMics is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMics() {
    return this.exchangeMics != null;
  }

  public void setExchangeMicsIsSet(boolean value) {
    if (!value) {
      this.exchangeMics = null;
    }
  }

  public int getSledCommodityTypesSize() {
    return (this.sledCommodityTypes == null) ? 0 : this.sledCommodityTypes.size();
  }

  public java.util.Iterator<String> getSledCommodityTypesIterator() {
    return (this.sledCommodityTypes == null) ? null : this.sledCommodityTypes.iterator();
  }

  public void addToSledCommodityTypes(String elem) {
    if (this.sledCommodityTypes == null) {
      this.sledCommodityTypes = new ArrayList<String>();
    }
    this.sledCommodityTypes.add(elem);
  }

  public List<String> getSledCommodityTypes() {
    return this.sledCommodityTypes;
  }

  public DstTransferConfig setSledCommodityTypes(List<String> sledCommodityTypes) {
    this.sledCommodityTypes = sledCommodityTypes;
    return this;
  }

  public void unsetSledCommodityTypes() {
    this.sledCommodityTypes = null;
  }

  /** Returns true if field sledCommodityTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityTypes() {
    return this.sledCommodityTypes != null;
  }

  public void setSledCommodityTypesIsSet(boolean value) {
    if (!value) {
      this.sledCommodityTypes = null;
    }
  }

  public int getSledCommodityNamesSize() {
    return (this.sledCommodityNames == null) ? 0 : this.sledCommodityNames.size();
  }

  public java.util.Iterator<String> getSledCommodityNamesIterator() {
    return (this.sledCommodityNames == null) ? null : this.sledCommodityNames.iterator();
  }

  public void addToSledCommodityNames(String elem) {
    if (this.sledCommodityNames == null) {
      this.sledCommodityNames = new ArrayList<String>();
    }
    this.sledCommodityNames.add(elem);
  }

  public List<String> getSledCommodityNames() {
    return this.sledCommodityNames;
  }

  public DstTransferConfig setSledCommodityNames(List<String> sledCommodityNames) {
    this.sledCommodityNames = sledCommodityNames;
    return this;
  }

  public void unsetSledCommodityNames() {
    this.sledCommodityNames = null;
  }

  /** Returns true if field sledCommodityNames is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityNames() {
    return this.sledCommodityNames != null;
  }

  public void setSledCommodityNamesIsSet(boolean value) {
    if (!value) {
      this.sledCommodityNames = null;
    }
  }

  public int getCommodityIdsSize() {
    return (this.commodityIds == null) ? 0 : this.commodityIds.size();
  }

  public java.util.Iterator<Integer> getCommodityIdsIterator() {
    return (this.commodityIds == null) ? null : this.commodityIds.iterator();
  }

  public void addToCommodityIds(int elem) {
    if (this.commodityIds == null) {
      this.commodityIds = new ArrayList<Integer>();
    }
    this.commodityIds.add(elem);
  }

  public List<Integer> getCommodityIds() {
    return this.commodityIds;
  }

  public DstTransferConfig setCommodityIds(List<Integer> commodityIds) {
    this.commodityIds = commodityIds;
    return this;
  }

  public void unsetCommodityIds() {
    this.commodityIds = null;
  }

  /** Returns true if field commodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityIds() {
    return this.commodityIds != null;
  }

  public void setCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.commodityIds = null;
    }
  }

  public SwitchTime getStandard2Dst() {
    return this.standard2Dst;
  }

  public DstTransferConfig setStandard2Dst(SwitchTime standard2Dst) {
    this.standard2Dst = standard2Dst;
    return this;
  }

  public void unsetStandard2Dst() {
    this.standard2Dst = null;
  }

  /** Returns true if field standard2Dst is set (has been assigned a value) and false otherwise */
  public boolean isSetStandard2Dst() {
    return this.standard2Dst != null;
  }

  public void setStandard2DstIsSet(boolean value) {
    if (!value) {
      this.standard2Dst = null;
    }
  }

  public SwitchTime getDst2Standard() {
    return this.dst2Standard;
  }

  public DstTransferConfig setDst2Standard(SwitchTime dst2Standard) {
    this.dst2Standard = dst2Standard;
    return this;
  }

  public void unsetDst2Standard() {
    this.dst2Standard = null;
  }

  /** Returns true if field dst2Standard is set (has been assigned a value) and false otherwise */
  public boolean isSetDst2Standard() {
    return this.dst2Standard != null;
  }

  public void setDst2StandardIsSet(boolean value) {
    if (!value) {
      this.dst2Standard = null;
    }
  }

  public int getStandard2DstOffSetMinute() {
    return this.standard2DstOffSetMinute;
  }

  public DstTransferConfig setStandard2DstOffSetMinute(int standard2DstOffSetMinute) {
    this.standard2DstOffSetMinute = standard2DstOffSetMinute;
    setStandard2DstOffSetMinuteIsSet(true);
    return this;
  }

  public void unsetStandard2DstOffSetMinute() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STANDARD2DSTOFFSETMINUTE_ISSET_ID);
  }

  /** Returns true if field standard2DstOffSetMinute is set (has been assigned a value) and false otherwise */
  public boolean isSetStandard2DstOffSetMinute() {
    return EncodingUtils.testBit(__isset_bitfield, __STANDARD2DSTOFFSETMINUTE_ISSET_ID);
  }

  public void setStandard2DstOffSetMinuteIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STANDARD2DSTOFFSETMINUTE_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public DstTransferConfig setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public DstTransferConfig setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DST_TRANSFER_CONFIG_ID:
      if (value == null) {
        unsetDstTransferConfigId();
      } else {
        setDstTransferConfigId((Integer)value);
      }
      break;

    case EXCHANGE_MICS:
      if (value == null) {
        unsetExchangeMics();
      } else {
        setExchangeMics((List<String>)value);
      }
      break;

    case SLED_COMMODITY_TYPES:
      if (value == null) {
        unsetSledCommodityTypes();
      } else {
        setSledCommodityTypes((List<String>)value);
      }
      break;

    case SLED_COMMODITY_NAMES:
      if (value == null) {
        unsetSledCommodityNames();
      } else {
        setSledCommodityNames((List<String>)value);
      }
      break;

    case COMMODITY_IDS:
      if (value == null) {
        unsetCommodityIds();
      } else {
        setCommodityIds((List<Integer>)value);
      }
      break;

    case STANDARD2_DST:
      if (value == null) {
        unsetStandard2Dst();
      } else {
        setStandard2Dst((SwitchTime)value);
      }
      break;

    case DST2_STANDARD:
      if (value == null) {
        unsetDst2Standard();
      } else {
        setDst2Standard((SwitchTime)value);
      }
      break;

    case STANDARD2_DST_OFF_SET_MINUTE:
      if (value == null) {
        unsetStandard2DstOffSetMinute();
      } else {
        setStandard2DstOffSetMinute((Integer)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DST_TRANSFER_CONFIG_ID:
      return Integer.valueOf(getDstTransferConfigId());

    case EXCHANGE_MICS:
      return getExchangeMics();

    case SLED_COMMODITY_TYPES:
      return getSledCommodityTypes();

    case SLED_COMMODITY_NAMES:
      return getSledCommodityNames();

    case COMMODITY_IDS:
      return getCommodityIds();

    case STANDARD2_DST:
      return getStandard2Dst();

    case DST2_STANDARD:
      return getDst2Standard();

    case STANDARD2_DST_OFF_SET_MINUTE:
      return Integer.valueOf(getStandard2DstOffSetMinute());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DST_TRANSFER_CONFIG_ID:
      return isSetDstTransferConfigId();
    case EXCHANGE_MICS:
      return isSetExchangeMics();
    case SLED_COMMODITY_TYPES:
      return isSetSledCommodityTypes();
    case SLED_COMMODITY_NAMES:
      return isSetSledCommodityNames();
    case COMMODITY_IDS:
      return isSetCommodityIds();
    case STANDARD2_DST:
      return isSetStandard2Dst();
    case DST2_STANDARD:
      return isSetDst2Standard();
    case STANDARD2_DST_OFF_SET_MINUTE:
      return isSetStandard2DstOffSetMinute();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DstTransferConfig)
      return this.equals((DstTransferConfig)that);
    return false;
  }

  public boolean equals(DstTransferConfig that) {
    if (that == null)
      return false;

    boolean this_present_dstTransferConfigId = true && this.isSetDstTransferConfigId();
    boolean that_present_dstTransferConfigId = true && that.isSetDstTransferConfigId();
    if (this_present_dstTransferConfigId || that_present_dstTransferConfigId) {
      if (!(this_present_dstTransferConfigId && that_present_dstTransferConfigId))
        return false;
      if (this.dstTransferConfigId != that.dstTransferConfigId)
        return false;
    }

    boolean this_present_exchangeMics = true && this.isSetExchangeMics();
    boolean that_present_exchangeMics = true && that.isSetExchangeMics();
    if (this_present_exchangeMics || that_present_exchangeMics) {
      if (!(this_present_exchangeMics && that_present_exchangeMics))
        return false;
      if (!this.exchangeMics.equals(that.exchangeMics))
        return false;
    }

    boolean this_present_sledCommodityTypes = true && this.isSetSledCommodityTypes();
    boolean that_present_sledCommodityTypes = true && that.isSetSledCommodityTypes();
    if (this_present_sledCommodityTypes || that_present_sledCommodityTypes) {
      if (!(this_present_sledCommodityTypes && that_present_sledCommodityTypes))
        return false;
      if (!this.sledCommodityTypes.equals(that.sledCommodityTypes))
        return false;
    }

    boolean this_present_sledCommodityNames = true && this.isSetSledCommodityNames();
    boolean that_present_sledCommodityNames = true && that.isSetSledCommodityNames();
    if (this_present_sledCommodityNames || that_present_sledCommodityNames) {
      if (!(this_present_sledCommodityNames && that_present_sledCommodityNames))
        return false;
      if (!this.sledCommodityNames.equals(that.sledCommodityNames))
        return false;
    }

    boolean this_present_commodityIds = true && this.isSetCommodityIds();
    boolean that_present_commodityIds = true && that.isSetCommodityIds();
    if (this_present_commodityIds || that_present_commodityIds) {
      if (!(this_present_commodityIds && that_present_commodityIds))
        return false;
      if (!this.commodityIds.equals(that.commodityIds))
        return false;
    }

    boolean this_present_standard2Dst = true && this.isSetStandard2Dst();
    boolean that_present_standard2Dst = true && that.isSetStandard2Dst();
    if (this_present_standard2Dst || that_present_standard2Dst) {
      if (!(this_present_standard2Dst && that_present_standard2Dst))
        return false;
      if (!this.standard2Dst.equals(that.standard2Dst))
        return false;
    }

    boolean this_present_dst2Standard = true && this.isSetDst2Standard();
    boolean that_present_dst2Standard = true && that.isSetDst2Standard();
    if (this_present_dst2Standard || that_present_dst2Standard) {
      if (!(this_present_dst2Standard && that_present_dst2Standard))
        return false;
      if (!this.dst2Standard.equals(that.dst2Standard))
        return false;
    }

    boolean this_present_standard2DstOffSetMinute = true && this.isSetStandard2DstOffSetMinute();
    boolean that_present_standard2DstOffSetMinute = true && that.isSetStandard2DstOffSetMinute();
    if (this_present_standard2DstOffSetMinute || that_present_standard2DstOffSetMinute) {
      if (!(this_present_standard2DstOffSetMinute && that_present_standard2DstOffSetMinute))
        return false;
      if (this.standard2DstOffSetMinute != that.standard2DstOffSetMinute)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DstTransferConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDstTransferConfigId()).compareTo(other.isSetDstTransferConfigId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDstTransferConfigId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstTransferConfigId, other.dstTransferConfigId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMics()).compareTo(other.isSetExchangeMics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMics, other.exchangeMics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityTypes()).compareTo(other.isSetSledCommodityTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityTypes, other.sledCommodityTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityNames()).compareTo(other.isSetSledCommodityNames());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityNames()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityNames, other.sledCommodityNames);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityIds()).compareTo(other.isSetCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityIds, other.commodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandard2Dst()).compareTo(other.isSetStandard2Dst());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandard2Dst()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standard2Dst, other.standard2Dst);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDst2Standard()).compareTo(other.isSetDst2Standard());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDst2Standard()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dst2Standard, other.dst2Standard);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStandard2DstOffSetMinute()).compareTo(other.isSetStandard2DstOffSetMinute());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStandard2DstOffSetMinute()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standard2DstOffSetMinute, other.standard2DstOffSetMinute);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DstTransferConfig(");
    boolean first = true;

    if (isSetDstTransferConfigId()) {
      sb.append("dstTransferConfigId:");
      sb.append(this.dstTransferConfigId);
      first = false;
    }
    if (isSetExchangeMics()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMics:");
      if (this.exchangeMics == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMics);
      }
      first = false;
    }
    if (isSetSledCommodityTypes()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityTypes:");
      if (this.sledCommodityTypes == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityTypes);
      }
      first = false;
    }
    if (isSetSledCommodityNames()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityNames:");
      if (this.sledCommodityNames == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityNames);
      }
      first = false;
    }
    if (isSetCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("commodityIds:");
      if (this.commodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityIds);
      }
      first = false;
    }
    if (isSetStandard2Dst()) {
      if (!first) sb.append(", ");
      sb.append("standard2Dst:");
      if (this.standard2Dst == null) {
        sb.append("null");
      } else {
        sb.append(this.standard2Dst);
      }
      first = false;
    }
    if (isSetDst2Standard()) {
      if (!first) sb.append(", ");
      sb.append("dst2Standard:");
      if (this.dst2Standard == null) {
        sb.append("null");
      } else {
        sb.append(this.dst2Standard);
      }
      first = false;
    }
    if (isSetStandard2DstOffSetMinute()) {
      if (!first) sb.append(", ");
      sb.append("standard2DstOffSetMinute:");
      sb.append(this.standard2DstOffSetMinute);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (standard2Dst != null) {
      standard2Dst.validate();
    }
    if (dst2Standard != null) {
      dst2Standard.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DstTransferConfigStandardSchemeFactory implements SchemeFactory {
    public DstTransferConfigStandardScheme getScheme() {
      return new DstTransferConfigStandardScheme();
    }
  }

  private static class DstTransferConfigStandardScheme extends StandardScheme<DstTransferConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DstTransferConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DST_TRANSFER_CONFIG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dstTransferConfigId = iprot.readI32();
              struct.setDstTransferConfigIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list424 = iprot.readListBegin();
                struct.exchangeMics = new ArrayList<String>(_list424.size);
                for (int _i425 = 0; _i425 < _list424.size; ++_i425)
                {
                  String _elem426;
                  _elem426 = iprot.readString();
                  struct.exchangeMics.add(_elem426);
                }
                iprot.readListEnd();
              }
              struct.setExchangeMicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list427 = iprot.readListBegin();
                struct.sledCommodityTypes = new ArrayList<String>(_list427.size);
                for (int _i428 = 0; _i428 < _list427.size; ++_i428)
                {
                  String _elem429;
                  _elem429 = iprot.readString();
                  struct.sledCommodityTypes.add(_elem429);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_NAMES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list430 = iprot.readListBegin();
                struct.sledCommodityNames = new ArrayList<String>(_list430.size);
                for (int _i431 = 0; _i431 < _list430.size; ++_i431)
                {
                  String _elem432;
                  _elem432 = iprot.readString();
                  struct.sledCommodityNames.add(_elem432);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityNamesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list433 = iprot.readListBegin();
                struct.commodityIds = new ArrayList<Integer>(_list433.size);
                for (int _i434 = 0; _i434 < _list433.size; ++_i434)
                {
                  int _elem435;
                  _elem435 = iprot.readI32();
                  struct.commodityIds.add(_elem435);
                }
                iprot.readListEnd();
              }
              struct.setCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STANDARD2_DST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.standard2Dst = new SwitchTime();
              struct.standard2Dst.read(iprot);
              struct.setStandard2DstIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DST2_STANDARD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dst2Standard = new SwitchTime();
              struct.dst2Standard.read(iprot);
              struct.setDst2StandardIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STANDARD2_DST_OFF_SET_MINUTE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.standard2DstOffSetMinute = iprot.readI32();
              struct.setStandard2DstOffSetMinuteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DstTransferConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDstTransferConfigId()) {
        oprot.writeFieldBegin(DST_TRANSFER_CONFIG_ID_FIELD_DESC);
        oprot.writeI32(struct.dstTransferConfigId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeMics != null) {
        if (struct.isSetExchangeMics()) {
          oprot.writeFieldBegin(EXCHANGE_MICS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.exchangeMics.size()));
            for (String _iter436 : struct.exchangeMics)
            {
              oprot.writeString(_iter436);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityTypes != null) {
        if (struct.isSetSledCommodityTypes()) {
          oprot.writeFieldBegin(SLED_COMMODITY_TYPES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sledCommodityTypes.size()));
            for (String _iter437 : struct.sledCommodityTypes)
            {
              oprot.writeString(_iter437);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityNames != null) {
        if (struct.isSetSledCommodityNames()) {
          oprot.writeFieldBegin(SLED_COMMODITY_NAMES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.sledCommodityNames.size()));
            for (String _iter438 : struct.sledCommodityNames)
            {
              oprot.writeString(_iter438);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityIds != null) {
        if (struct.isSetCommodityIds()) {
          oprot.writeFieldBegin(COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.commodityIds.size()));
            for (int _iter439 : struct.commodityIds)
            {
              oprot.writeI32(_iter439);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.standard2Dst != null) {
        if (struct.isSetStandard2Dst()) {
          oprot.writeFieldBegin(STANDARD2_DST_FIELD_DESC);
          struct.standard2Dst.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dst2Standard != null) {
        if (struct.isSetDst2Standard()) {
          oprot.writeFieldBegin(DST2_STANDARD_FIELD_DESC);
          struct.dst2Standard.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStandard2DstOffSetMinute()) {
        oprot.writeFieldBegin(STANDARD2_DST_OFF_SET_MINUTE_FIELD_DESC);
        oprot.writeI32(struct.standard2DstOffSetMinute);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DstTransferConfigTupleSchemeFactory implements SchemeFactory {
    public DstTransferConfigTupleScheme getScheme() {
      return new DstTransferConfigTupleScheme();
    }
  }

  private static class DstTransferConfigTupleScheme extends TupleScheme<DstTransferConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DstTransferConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDstTransferConfigId()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMics()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityTypes()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityNames()) {
        optionals.set(3);
      }
      if (struct.isSetCommodityIds()) {
        optionals.set(4);
      }
      if (struct.isSetStandard2Dst()) {
        optionals.set(5);
      }
      if (struct.isSetDst2Standard()) {
        optionals.set(6);
      }
      if (struct.isSetStandard2DstOffSetMinute()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(8);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetDstTransferConfigId()) {
        oprot.writeI32(struct.dstTransferConfigId);
      }
      if (struct.isSetExchangeMics()) {
        {
          oprot.writeI32(struct.exchangeMics.size());
          for (String _iter440 : struct.exchangeMics)
          {
            oprot.writeString(_iter440);
          }
        }
      }
      if (struct.isSetSledCommodityTypes()) {
        {
          oprot.writeI32(struct.sledCommodityTypes.size());
          for (String _iter441 : struct.sledCommodityTypes)
          {
            oprot.writeString(_iter441);
          }
        }
      }
      if (struct.isSetSledCommodityNames()) {
        {
          oprot.writeI32(struct.sledCommodityNames.size());
          for (String _iter442 : struct.sledCommodityNames)
          {
            oprot.writeString(_iter442);
          }
        }
      }
      if (struct.isSetCommodityIds()) {
        {
          oprot.writeI32(struct.commodityIds.size());
          for (int _iter443 : struct.commodityIds)
          {
            oprot.writeI32(_iter443);
          }
        }
      }
      if (struct.isSetStandard2Dst()) {
        struct.standard2Dst.write(oprot);
      }
      if (struct.isSetDst2Standard()) {
        struct.dst2Standard.write(oprot);
      }
      if (struct.isSetStandard2DstOffSetMinute()) {
        oprot.writeI32(struct.standard2DstOffSetMinute);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DstTransferConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.dstTransferConfigId = iprot.readI32();
        struct.setDstTransferConfigIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list444 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.exchangeMics = new ArrayList<String>(_list444.size);
          for (int _i445 = 0; _i445 < _list444.size; ++_i445)
          {
            String _elem446;
            _elem446 = iprot.readString();
            struct.exchangeMics.add(_elem446);
          }
        }
        struct.setExchangeMicsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list447 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sledCommodityTypes = new ArrayList<String>(_list447.size);
          for (int _i448 = 0; _i448 < _list447.size; ++_i448)
          {
            String _elem449;
            _elem449 = iprot.readString();
            struct.sledCommodityTypes.add(_elem449);
          }
        }
        struct.setSledCommodityTypesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list450 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sledCommodityNames = new ArrayList<String>(_list450.size);
          for (int _i451 = 0; _i451 < _list450.size; ++_i451)
          {
            String _elem452;
            _elem452 = iprot.readString();
            struct.sledCommodityNames.add(_elem452);
          }
        }
        struct.setSledCommodityNamesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list453 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.commodityIds = new ArrayList<Integer>(_list453.size);
          for (int _i454 = 0; _i454 < _list453.size; ++_i454)
          {
            int _elem455;
            _elem455 = iprot.readI32();
            struct.commodityIds.add(_elem455);
          }
        }
        struct.setCommodityIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.standard2Dst = new SwitchTime();
        struct.standard2Dst.read(iprot);
        struct.setStandard2DstIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dst2Standard = new SwitchTime();
        struct.dst2Standard.read(iprot);
        struct.setDst2StandardIsSet(true);
      }
      if (incoming.get(7)) {
        struct.standard2DstOffSetMinute = iprot.readI32();
        struct.setStandard2DstOffSetMinuteIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

