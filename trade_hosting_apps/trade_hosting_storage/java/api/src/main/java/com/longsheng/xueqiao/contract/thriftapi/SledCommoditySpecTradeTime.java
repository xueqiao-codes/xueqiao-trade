/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledCommoditySpecTradeTime implements org.apache.thrift.TBase<SledCommoditySpecTradeTime, SledCommoditySpecTradeTime._Fields>, java.io.Serializable, Cloneable, Comparable<SledCommoditySpecTradeTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledCommoditySpecTradeTime");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SPEC_TRADE_TIME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("specTradeTimeId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NON_TRADE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("nonTradeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField NON_TRADE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("nonTradeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField NEXT_TRADE_OPEN_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nextTradeOpenType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I64, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledCommoditySpecTradeTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledCommoditySpecTradeTimeTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public int specTradeTimeId; // optional
  public long nonTradeStartTimestamp; // optional
  public long nonTradeEndTimestamp; // optional
  /**
   * 
   * @see NextTradeOpenType
   */
  public NextTradeOpenType nextTradeOpenType; // optional
  public long createTimestamp; // optional
  public long lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    SPEC_TRADE_TIME_ID((short)2, "specTradeTimeId"),
    NON_TRADE_START_TIMESTAMP((short)4, "nonTradeStartTimestamp"),
    NON_TRADE_END_TIMESTAMP((short)5, "nonTradeEndTimestamp"),
    /**
     * 
     * @see NextTradeOpenType
     */
    NEXT_TRADE_OPEN_TYPE((short)6, "nextTradeOpenType"),
    CREATE_TIMESTAMP((short)7, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)8, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // SPEC_TRADE_TIME_ID
          return SPEC_TRADE_TIME_ID;
        case 4: // NON_TRADE_START_TIMESTAMP
          return NON_TRADE_START_TIMESTAMP;
        case 5: // NON_TRADE_END_TIMESTAMP
          return NON_TRADE_END_TIMESTAMP;
        case 6: // NEXT_TRADE_OPEN_TYPE
          return NEXT_TRADE_OPEN_TYPE;
        case 7: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 8: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __SPECTRADETIMEID_ISSET_ID = 1;
  private static final int __NONTRADESTARTTIMESTAMP_ISSET_ID = 2;
  private static final int __NONTRADEENDTIMESTAMP_ISSET_ID = 3;
  private static final int __CREATETIMESTAMP_ISSET_ID = 4;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.SPEC_TRADE_TIME_ID,_Fields.NON_TRADE_START_TIMESTAMP,_Fields.NON_TRADE_END_TIMESTAMP,_Fields.NEXT_TRADE_OPEN_TYPE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SPEC_TRADE_TIME_ID, new org.apache.thrift.meta_data.FieldMetaData("specTradeTimeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NON_TRADE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("nonTradeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NON_TRADE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("nonTradeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEXT_TRADE_OPEN_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nextTradeOpenType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NextTradeOpenType.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledCommoditySpecTradeTime.class, metaDataMap);
  }

  public SledCommoditySpecTradeTime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledCommoditySpecTradeTime(SledCommoditySpecTradeTime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    this.specTradeTimeId = other.specTradeTimeId;
    this.nonTradeStartTimestamp = other.nonTradeStartTimestamp;
    this.nonTradeEndTimestamp = other.nonTradeEndTimestamp;
    if (other.isSetNextTradeOpenType()) {
      this.nextTradeOpenType = other.nextTradeOpenType;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public SledCommoditySpecTradeTime deepCopy() {
    return new SledCommoditySpecTradeTime(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setSpecTradeTimeIdIsSet(false);
    this.specTradeTimeId = 0;
    setNonTradeStartTimestampIsSet(false);
    this.nonTradeStartTimestamp = 0;
    setNonTradeEndTimestampIsSet(false);
    this.nonTradeEndTimestamp = 0;
    this.nextTradeOpenType = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledCommoditySpecTradeTime setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public int getSpecTradeTimeId() {
    return this.specTradeTimeId;
  }

  public SledCommoditySpecTradeTime setSpecTradeTimeId(int specTradeTimeId) {
    this.specTradeTimeId = specTradeTimeId;
    setSpecTradeTimeIdIsSet(true);
    return this;
  }

  public void unsetSpecTradeTimeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID);
  }

  /** Returns true if field specTradeTimeId is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecTradeTimeId() {
    return EncodingUtils.testBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID);
  }

  public void setSpecTradeTimeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SPECTRADETIMEID_ISSET_ID, value);
  }

  public long getNonTradeStartTimestamp() {
    return this.nonTradeStartTimestamp;
  }

  public SledCommoditySpecTradeTime setNonTradeStartTimestamp(long nonTradeStartTimestamp) {
    this.nonTradeStartTimestamp = nonTradeStartTimestamp;
    setNonTradeStartTimestampIsSet(true);
    return this;
  }

  public void unsetNonTradeStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field nonTradeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetNonTradeStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID);
  }

  public void setNonTradeStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONTRADESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getNonTradeEndTimestamp() {
    return this.nonTradeEndTimestamp;
  }

  public SledCommoditySpecTradeTime setNonTradeEndTimestamp(long nonTradeEndTimestamp) {
    this.nonTradeEndTimestamp = nonTradeEndTimestamp;
    setNonTradeEndTimestampIsSet(true);
    return this;
  }

  public void unsetNonTradeEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field nonTradeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetNonTradeEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID);
  }

  public void setNonTradeEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NONTRADEENDTIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see NextTradeOpenType
   */
  public NextTradeOpenType getNextTradeOpenType() {
    return this.nextTradeOpenType;
  }

  /**
   * 
   * @see NextTradeOpenType
   */
  public SledCommoditySpecTradeTime setNextTradeOpenType(NextTradeOpenType nextTradeOpenType) {
    this.nextTradeOpenType = nextTradeOpenType;
    return this;
  }

  public void unsetNextTradeOpenType() {
    this.nextTradeOpenType = null;
  }

  /** Returns true if field nextTradeOpenType is set (has been assigned a value) and false otherwise */
  public boolean isSetNextTradeOpenType() {
    return this.nextTradeOpenType != null;
  }

  public void setNextTradeOpenTypeIsSet(boolean value) {
    if (!value) {
      this.nextTradeOpenType = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledCommoditySpecTradeTime setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public SledCommoditySpecTradeTime setLastModifyTimestamp(long lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case SPEC_TRADE_TIME_ID:
      if (value == null) {
        unsetSpecTradeTimeId();
      } else {
        setSpecTradeTimeId((Integer)value);
      }
      break;

    case NON_TRADE_START_TIMESTAMP:
      if (value == null) {
        unsetNonTradeStartTimestamp();
      } else {
        setNonTradeStartTimestamp((Long)value);
      }
      break;

    case NON_TRADE_END_TIMESTAMP:
      if (value == null) {
        unsetNonTradeEndTimestamp();
      } else {
        setNonTradeEndTimestamp((Long)value);
      }
      break;

    case NEXT_TRADE_OPEN_TYPE:
      if (value == null) {
        unsetNextTradeOpenType();
      } else {
        setNextTradeOpenType((NextTradeOpenType)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case SPEC_TRADE_TIME_ID:
      return Integer.valueOf(getSpecTradeTimeId());

    case NON_TRADE_START_TIMESTAMP:
      return Long.valueOf(getNonTradeStartTimestamp());

    case NON_TRADE_END_TIMESTAMP:
      return Long.valueOf(getNonTradeEndTimestamp());

    case NEXT_TRADE_OPEN_TYPE:
      return getNextTradeOpenType();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Long.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SPEC_TRADE_TIME_ID:
      return isSetSpecTradeTimeId();
    case NON_TRADE_START_TIMESTAMP:
      return isSetNonTradeStartTimestamp();
    case NON_TRADE_END_TIMESTAMP:
      return isSetNonTradeEndTimestamp();
    case NEXT_TRADE_OPEN_TYPE:
      return isSetNextTradeOpenType();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledCommoditySpecTradeTime)
      return this.equals((SledCommoditySpecTradeTime)that);
    return false;
  }

  public boolean equals(SledCommoditySpecTradeTime that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_specTradeTimeId = true && this.isSetSpecTradeTimeId();
    boolean that_present_specTradeTimeId = true && that.isSetSpecTradeTimeId();
    if (this_present_specTradeTimeId || that_present_specTradeTimeId) {
      if (!(this_present_specTradeTimeId && that_present_specTradeTimeId))
        return false;
      if (this.specTradeTimeId != that.specTradeTimeId)
        return false;
    }

    boolean this_present_nonTradeStartTimestamp = true && this.isSetNonTradeStartTimestamp();
    boolean that_present_nonTradeStartTimestamp = true && that.isSetNonTradeStartTimestamp();
    if (this_present_nonTradeStartTimestamp || that_present_nonTradeStartTimestamp) {
      if (!(this_present_nonTradeStartTimestamp && that_present_nonTradeStartTimestamp))
        return false;
      if (this.nonTradeStartTimestamp != that.nonTradeStartTimestamp)
        return false;
    }

    boolean this_present_nonTradeEndTimestamp = true && this.isSetNonTradeEndTimestamp();
    boolean that_present_nonTradeEndTimestamp = true && that.isSetNonTradeEndTimestamp();
    if (this_present_nonTradeEndTimestamp || that_present_nonTradeEndTimestamp) {
      if (!(this_present_nonTradeEndTimestamp && that_present_nonTradeEndTimestamp))
        return false;
      if (this.nonTradeEndTimestamp != that.nonTradeEndTimestamp)
        return false;
    }

    boolean this_present_nextTradeOpenType = true && this.isSetNextTradeOpenType();
    boolean that_present_nextTradeOpenType = true && that.isSetNextTradeOpenType();
    if (this_present_nextTradeOpenType || that_present_nextTradeOpenType) {
      if (!(this_present_nextTradeOpenType && that_present_nextTradeOpenType))
        return false;
      if (!this.nextTradeOpenType.equals(that.nextTradeOpenType))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledCommoditySpecTradeTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecTradeTimeId()).compareTo(other.isSetSpecTradeTimeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecTradeTimeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specTradeTimeId, other.specTradeTimeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonTradeStartTimestamp()).compareTo(other.isSetNonTradeStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonTradeStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonTradeStartTimestamp, other.nonTradeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNonTradeEndTimestamp()).compareTo(other.isSetNonTradeEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNonTradeEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nonTradeEndTimestamp, other.nonTradeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNextTradeOpenType()).compareTo(other.isSetNextTradeOpenType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNextTradeOpenType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nextTradeOpenType, other.nextTradeOpenType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledCommoditySpecTradeTime(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSpecTradeTimeId()) {
      if (!first) sb.append(", ");
      sb.append("specTradeTimeId:");
      sb.append(this.specTradeTimeId);
      first = false;
    }
    if (isSetNonTradeStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("nonTradeStartTimestamp:");
      sb.append(this.nonTradeStartTimestamp);
      first = false;
    }
    if (isSetNonTradeEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("nonTradeEndTimestamp:");
      sb.append(this.nonTradeEndTimestamp);
      first = false;
    }
    if (isSetNextTradeOpenType()) {
      if (!first) sb.append(", ");
      sb.append("nextTradeOpenType:");
      if (this.nextTradeOpenType == null) {
        sb.append("null");
      } else {
        sb.append(this.nextTradeOpenType);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledCommoditySpecTradeTimeStandardSchemeFactory implements SchemeFactory {
    public SledCommoditySpecTradeTimeStandardScheme getScheme() {
      return new SledCommoditySpecTradeTimeStandardScheme();
    }
  }

  private static class SledCommoditySpecTradeTimeStandardScheme extends StandardScheme<SledCommoditySpecTradeTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledCommoditySpecTradeTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPEC_TRADE_TIME_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.specTradeTimeId = iprot.readI32();
              struct.setSpecTradeTimeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NON_TRADE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonTradeStartTimestamp = iprot.readI64();
              struct.setNonTradeStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NON_TRADE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.nonTradeEndTimestamp = iprot.readI64();
              struct.setNonTradeEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEXT_TRADE_OPEN_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.nextTradeOpenType = NextTradeOpenType.findByValue(iprot.readI32());
              struct.setNextTradeOpenTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestamp = iprot.readI64();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledCommoditySpecTradeTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSpecTradeTimeId()) {
        oprot.writeFieldBegin(SPEC_TRADE_TIME_ID_FIELD_DESC);
        oprot.writeI32(struct.specTradeTimeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        oprot.writeFieldBegin(NON_TRADE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.nonTradeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        oprot.writeFieldBegin(NON_TRADE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.nonTradeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.nextTradeOpenType != null) {
        if (struct.isSetNextTradeOpenType()) {
          oprot.writeFieldBegin(NEXT_TRADE_OPEN_TYPE_FIELD_DESC);
          oprot.writeI32(struct.nextTradeOpenType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledCommoditySpecTradeTimeTupleSchemeFactory implements SchemeFactory {
    public SledCommoditySpecTradeTimeTupleScheme getScheme() {
      return new SledCommoditySpecTradeTimeTupleScheme();
    }
  }

  private static class SledCommoditySpecTradeTimeTupleScheme extends TupleScheme<SledCommoditySpecTradeTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledCommoditySpecTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetSpecTradeTimeId()) {
        optionals.set(1);
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        optionals.set(2);
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        optionals.set(3);
      }
      if (struct.isSetNextTradeOpenType()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetSpecTradeTimeId()) {
        oprot.writeI32(struct.specTradeTimeId);
      }
      if (struct.isSetNonTradeStartTimestamp()) {
        oprot.writeI64(struct.nonTradeStartTimestamp);
      }
      if (struct.isSetNonTradeEndTimestamp()) {
        oprot.writeI64(struct.nonTradeEndTimestamp);
      }
      if (struct.isSetNextTradeOpenType()) {
        oprot.writeI32(struct.nextTradeOpenType.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI64(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledCommoditySpecTradeTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.specTradeTimeId = iprot.readI32();
        struct.setSpecTradeTimeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.nonTradeStartTimestamp = iprot.readI64();
        struct.setNonTradeStartTimestampIsSet(true);
      }
      if (incoming.get(3)) {
        struct.nonTradeEndTimestamp = iprot.readI64();
        struct.setNonTradeEndTimestampIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nextTradeOpenType = NextTradeOpenType.findByValue(iprot.readI32());
        struct.setNextTradeOpenTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModifyTimestamp = iprot.readI64();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

