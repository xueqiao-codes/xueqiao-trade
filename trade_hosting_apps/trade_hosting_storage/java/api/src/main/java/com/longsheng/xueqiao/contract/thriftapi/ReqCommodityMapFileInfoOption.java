/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqCommodityMapFileInfoOption implements org.apache.thrift.TBase<ReqCommodityMapFileInfoOption, ReqCommodityMapFileInfoOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqCommodityMapFileInfoOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqCommodityMapFileInfoOption");

  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntryIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_INFO_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("fileInfoIds", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqCommodityMapFileInfoOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqCommodityMapFileInfoOptionTupleSchemeFactory());
  }

  public List<Integer> brokerEntryIds; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform; // optional
  public List<Integer> fileInfoIds; // optional
  /**
   * 
   * @see CommodityMapFileStatus
   */
  public CommodityMapFileStatus status; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BROKER_ENTRY_IDS((short)1, "brokerEntryIds"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
     */
    TECH_PLATFORM((short)2, "techPlatform"),
    FILE_INFO_IDS((short)3, "fileInfoIds"),
    /**
     * 
     * @see CommodityMapFileStatus
     */
    STATUS((short)4, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BROKER_ENTRY_IDS
          return BROKER_ENTRY_IDS;
        case 2: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 3: // FILE_INFO_IDS
          return FILE_INFO_IDS;
        case 4: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BROKER_ENTRY_IDS,_Fields.TECH_PLATFORM,_Fields.FILE_INFO_IDS,_Fields.STATUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BROKER_ENTRY_IDS, new org.apache.thrift.meta_data.FieldMetaData("brokerEntryIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.class)));
    tmpMap.put(_Fields.FILE_INFO_IDS, new org.apache.thrift.meta_data.FieldMetaData("fileInfoIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommodityMapFileStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqCommodityMapFileInfoOption.class, metaDataMap);
  }

  public ReqCommodityMapFileInfoOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqCommodityMapFileInfoOption(ReqCommodityMapFileInfoOption other) {
    if (other.isSetBrokerEntryIds()) {
      List<Integer> __this__brokerEntryIds = new ArrayList<Integer>(other.brokerEntryIds);
      this.brokerEntryIds = __this__brokerEntryIds;
    }
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    if (other.isSetFileInfoIds()) {
      List<Integer> __this__fileInfoIds = new ArrayList<Integer>(other.fileInfoIds);
      this.fileInfoIds = __this__fileInfoIds;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public ReqCommodityMapFileInfoOption deepCopy() {
    return new ReqCommodityMapFileInfoOption(this);
  }

  @Override
  public void clear() {
    this.brokerEntryIds = null;
    this.techPlatform = null;
    this.fileInfoIds = null;
    this.status = null;
  }

  public int getBrokerEntryIdsSize() {
    return (this.brokerEntryIds == null) ? 0 : this.brokerEntryIds.size();
  }

  public java.util.Iterator<Integer> getBrokerEntryIdsIterator() {
    return (this.brokerEntryIds == null) ? null : this.brokerEntryIds.iterator();
  }

  public void addToBrokerEntryIds(int elem) {
    if (this.brokerEntryIds == null) {
      this.brokerEntryIds = new ArrayList<Integer>();
    }
    this.brokerEntryIds.add(elem);
  }

  public List<Integer> getBrokerEntryIds() {
    return this.brokerEntryIds;
  }

  public ReqCommodityMapFileInfoOption setBrokerEntryIds(List<Integer> brokerEntryIds) {
    this.brokerEntryIds = brokerEntryIds;
    return this;
  }

  public void unsetBrokerEntryIds() {
    this.brokerEntryIds = null;
  }

  /** Returns true if field brokerEntryIds is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntryIds() {
    return this.brokerEntryIds != null;
  }

  public void setBrokerEntryIdsIsSet(boolean value) {
    if (!value) {
      this.brokerEntryIds = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public ReqCommodityMapFileInfoOption setTechPlatform(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public int getFileInfoIdsSize() {
    return (this.fileInfoIds == null) ? 0 : this.fileInfoIds.size();
  }

  public java.util.Iterator<Integer> getFileInfoIdsIterator() {
    return (this.fileInfoIds == null) ? null : this.fileInfoIds.iterator();
  }

  public void addToFileInfoIds(int elem) {
    if (this.fileInfoIds == null) {
      this.fileInfoIds = new ArrayList<Integer>();
    }
    this.fileInfoIds.add(elem);
  }

  public List<Integer> getFileInfoIds() {
    return this.fileInfoIds;
  }

  public ReqCommodityMapFileInfoOption setFileInfoIds(List<Integer> fileInfoIds) {
    this.fileInfoIds = fileInfoIds;
    return this;
  }

  public void unsetFileInfoIds() {
    this.fileInfoIds = null;
  }

  /** Returns true if field fileInfoIds is set (has been assigned a value) and false otherwise */
  public boolean isSetFileInfoIds() {
    return this.fileInfoIds != null;
  }

  public void setFileInfoIdsIsSet(boolean value) {
    if (!value) {
      this.fileInfoIds = null;
    }
  }

  /**
   * 
   * @see CommodityMapFileStatus
   */
  public CommodityMapFileStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see CommodityMapFileStatus
   */
  public ReqCommodityMapFileInfoOption setStatus(CommodityMapFileStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BROKER_ENTRY_IDS:
      if (value == null) {
        unsetBrokerEntryIds();
      } else {
        setBrokerEntryIds((List<Integer>)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform)value);
      }
      break;

    case FILE_INFO_IDS:
      if (value == null) {
        unsetFileInfoIds();
      } else {
        setFileInfoIds((List<Integer>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((CommodityMapFileStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BROKER_ENTRY_IDS:
      return getBrokerEntryIds();

    case TECH_PLATFORM:
      return getTechPlatform();

    case FILE_INFO_IDS:
      return getFileInfoIds();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BROKER_ENTRY_IDS:
      return isSetBrokerEntryIds();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case FILE_INFO_IDS:
      return isSetFileInfoIds();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqCommodityMapFileInfoOption)
      return this.equals((ReqCommodityMapFileInfoOption)that);
    return false;
  }

  public boolean equals(ReqCommodityMapFileInfoOption that) {
    if (that == null)
      return false;

    boolean this_present_brokerEntryIds = true && this.isSetBrokerEntryIds();
    boolean that_present_brokerEntryIds = true && that.isSetBrokerEntryIds();
    if (this_present_brokerEntryIds || that_present_brokerEntryIds) {
      if (!(this_present_brokerEntryIds && that_present_brokerEntryIds))
        return false;
      if (!this.brokerEntryIds.equals(that.brokerEntryIds))
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_fileInfoIds = true && this.isSetFileInfoIds();
    boolean that_present_fileInfoIds = true && that.isSetFileInfoIds();
    if (this_present_fileInfoIds || that_present_fileInfoIds) {
      if (!(this_present_fileInfoIds && that_present_fileInfoIds))
        return false;
      if (!this.fileInfoIds.equals(that.fileInfoIds))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqCommodityMapFileInfoOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBrokerEntryIds()).compareTo(other.isSetBrokerEntryIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntryIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntryIds, other.brokerEntryIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileInfoIds()).compareTo(other.isSetFileInfoIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileInfoIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileInfoIds, other.fileInfoIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqCommodityMapFileInfoOption(");
    boolean first = true;

    if (isSetBrokerEntryIds()) {
      sb.append("brokerEntryIds:");
      if (this.brokerEntryIds == null) {
        sb.append("null");
      } else {
        sb.append(this.brokerEntryIds);
      }
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetFileInfoIds()) {
      if (!first) sb.append(", ");
      sb.append("fileInfoIds:");
      if (this.fileInfoIds == null) {
        sb.append("null");
      } else {
        sb.append(this.fileInfoIds);
      }
      first = false;
    }
    if (isSetStatus()) {
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqCommodityMapFileInfoOptionStandardSchemeFactory implements SchemeFactory {
    public ReqCommodityMapFileInfoOptionStandardScheme getScheme() {
      return new ReqCommodityMapFileInfoOptionStandardScheme();
    }
  }

  private static class ReqCommodityMapFileInfoOptionStandardScheme extends StandardScheme<ReqCommodityMapFileInfoOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqCommodityMapFileInfoOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BROKER_ENTRY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.brokerEntryIds = new ArrayList<Integer>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  int _elem34;
                  _elem34 = iprot.readI32();
                  struct.brokerEntryIds.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setBrokerEntryIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_INFO_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.fileInfoIds = new ArrayList<Integer>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  int _elem37;
                  _elem37 = iprot.readI32();
                  struct.fileInfoIds.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setFileInfoIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = CommodityMapFileStatus.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqCommodityMapFileInfoOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.brokerEntryIds != null) {
        if (struct.isSetBrokerEntryIds()) {
          oprot.writeFieldBegin(BROKER_ENTRY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.brokerEntryIds.size()));
            for (int _iter38 : struct.brokerEntryIds)
            {
              oprot.writeI32(_iter38);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.fileInfoIds != null) {
        if (struct.isSetFileInfoIds()) {
          oprot.writeFieldBegin(FILE_INFO_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.fileInfoIds.size()));
            for (int _iter39 : struct.fileInfoIds)
            {
              oprot.writeI32(_iter39);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.status != null) {
        if (struct.isSetStatus()) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqCommodityMapFileInfoOptionTupleSchemeFactory implements SchemeFactory {
    public ReqCommodityMapFileInfoOptionTupleScheme getScheme() {
      return new ReqCommodityMapFileInfoOptionTupleScheme();
    }
  }

  private static class ReqCommodityMapFileInfoOptionTupleScheme extends TupleScheme<ReqCommodityMapFileInfoOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqCommodityMapFileInfoOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBrokerEntryIds()) {
        optionals.set(0);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetFileInfoIds()) {
        optionals.set(2);
      }
      if (struct.isSetStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBrokerEntryIds()) {
        {
          oprot.writeI32(struct.brokerEntryIds.size());
          for (int _iter40 : struct.brokerEntryIds)
          {
            oprot.writeI32(_iter40);
          }
        }
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetFileInfoIds()) {
        {
          oprot.writeI32(struct.fileInfoIds.size());
          for (int _iter41 : struct.fileInfoIds)
          {
            oprot.writeI32(_iter41);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqCommodityMapFileInfoOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list42 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.brokerEntryIds = new ArrayList<Integer>(_list42.size);
          for (int _i43 = 0; _i43 < _list42.size; ++_i43)
          {
            int _elem44;
            _elem44 = iprot.readI32();
            struct.brokerEntryIds.add(_elem44);
          }
        }
        struct.setBrokerEntryIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.fileInfoIds = new ArrayList<Integer>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.fileInfoIds.add(_elem47);
          }
        }
        struct.setFileInfoIdsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.status = CommodityMapFileStatus.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

}

