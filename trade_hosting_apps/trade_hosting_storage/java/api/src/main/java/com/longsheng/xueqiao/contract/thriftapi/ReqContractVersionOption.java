/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqContractVersionOption implements org.apache.thrift.TBase<ReqContractVersionOption, ReqContractVersionOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqContractVersionOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqContractVersionOption");

  private static final org.apache.thrift.protocol.TField VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("versionId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LATEST_FIELD_DESC = new org.apache.thrift.protocol.TField("latest", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NEED_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("needTotalCount", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqContractVersionOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqContractVersionOptionTupleSchemeFactory());
  }

  public int versionId; // optional
  public boolean latest; // optional
  public boolean needTotalCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION_ID((short)1, "versionId"),
    LATEST((short)2, "latest"),
    NEED_TOTAL_COUNT((short)6, "needTotalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION_ID
          return VERSION_ID;
        case 2: // LATEST
          return LATEST;
        case 6: // NEED_TOTAL_COUNT
          return NEED_TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSIONID_ISSET_ID = 0;
  private static final int __LATEST_ISSET_ID = 1;
  private static final int __NEEDTOTALCOUNT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION_ID,_Fields.LATEST,_Fields.NEED_TOTAL_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("versionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LATEST, new org.apache.thrift.meta_data.FieldMetaData("latest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NEED_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("needTotalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqContractVersionOption.class, metaDataMap);
  }

  public ReqContractVersionOption() {
    this.needTotalCount = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqContractVersionOption(ReqContractVersionOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.versionId = other.versionId;
    this.latest = other.latest;
    this.needTotalCount = other.needTotalCount;
  }

  public ReqContractVersionOption deepCopy() {
    return new ReqContractVersionOption(this);
  }

  @Override
  public void clear() {
    setVersionIdIsSet(false);
    this.versionId = 0;
    setLatestIsSet(false);
    this.latest = false;
    this.needTotalCount = true;

  }

  public int getVersionId() {
    return this.versionId;
  }

  public ReqContractVersionOption setVersionId(int versionId) {
    this.versionId = versionId;
    setVersionIdIsSet(true);
    return this;
  }

  public void unsetVersionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  /** Returns true if field versionId is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionId() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSIONID_ISSET_ID);
  }

  public void setVersionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSIONID_ISSET_ID, value);
  }

  public boolean isLatest() {
    return this.latest;
  }

  public ReqContractVersionOption setLatest(boolean latest) {
    this.latest = latest;
    setLatestIsSet(true);
    return this;
  }

  public void unsetLatest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LATEST_ISSET_ID);
  }

  /** Returns true if field latest is set (has been assigned a value) and false otherwise */
  public boolean isSetLatest() {
    return EncodingUtils.testBit(__isset_bitfield, __LATEST_ISSET_ID);
  }

  public void setLatestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LATEST_ISSET_ID, value);
  }

  public boolean isNeedTotalCount() {
    return this.needTotalCount;
  }

  public ReqContractVersionOption setNeedTotalCount(boolean needTotalCount) {
    this.needTotalCount = needTotalCount;
    setNeedTotalCountIsSet(true);
    return this;
  }

  public void unsetNeedTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field needTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID);
  }

  public void setNeedTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION_ID:
      if (value == null) {
        unsetVersionId();
      } else {
        setVersionId((Integer)value);
      }
      break;

    case LATEST:
      if (value == null) {
        unsetLatest();
      } else {
        setLatest((Boolean)value);
      }
      break;

    case NEED_TOTAL_COUNT:
      if (value == null) {
        unsetNeedTotalCount();
      } else {
        setNeedTotalCount((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION_ID:
      return Integer.valueOf(getVersionId());

    case LATEST:
      return Boolean.valueOf(isLatest());

    case NEED_TOTAL_COUNT:
      return Boolean.valueOf(isNeedTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION_ID:
      return isSetVersionId();
    case LATEST:
      return isSetLatest();
    case NEED_TOTAL_COUNT:
      return isSetNeedTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqContractVersionOption)
      return this.equals((ReqContractVersionOption)that);
    return false;
  }

  public boolean equals(ReqContractVersionOption that) {
    if (that == null)
      return false;

    boolean this_present_versionId = true && this.isSetVersionId();
    boolean that_present_versionId = true && that.isSetVersionId();
    if (this_present_versionId || that_present_versionId) {
      if (!(this_present_versionId && that_present_versionId))
        return false;
      if (this.versionId != that.versionId)
        return false;
    }

    boolean this_present_latest = true && this.isSetLatest();
    boolean that_present_latest = true && that.isSetLatest();
    if (this_present_latest || that_present_latest) {
      if (!(this_present_latest && that_present_latest))
        return false;
      if (this.latest != that.latest)
        return false;
    }

    boolean this_present_needTotalCount = true && this.isSetNeedTotalCount();
    boolean that_present_needTotalCount = true && that.isSetNeedTotalCount();
    if (this_present_needTotalCount || that_present_needTotalCount) {
      if (!(this_present_needTotalCount && that_present_needTotalCount))
        return false;
      if (this.needTotalCount != that.needTotalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqContractVersionOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersionId()).compareTo(other.isSetVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionId, other.versionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLatest()).compareTo(other.isSetLatest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latest, other.latest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedTotalCount()).compareTo(other.isSetNeedTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needTotalCount, other.needTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqContractVersionOption(");
    boolean first = true;

    if (isSetVersionId()) {
      sb.append("versionId:");
      sb.append(this.versionId);
      first = false;
    }
    if (isSetLatest()) {
      if (!first) sb.append(", ");
      sb.append("latest:");
      sb.append(this.latest);
      first = false;
    }
    if (isSetNeedTotalCount()) {
      if (!first) sb.append(", ");
      sb.append("needTotalCount:");
      sb.append(this.needTotalCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqContractVersionOptionStandardSchemeFactory implements SchemeFactory {
    public ReqContractVersionOptionStandardScheme getScheme() {
      return new ReqContractVersionOptionStandardScheme();
    }
  }

  private static class ReqContractVersionOptionStandardScheme extends StandardScheme<ReqContractVersionOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqContractVersionOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionId = iprot.readI32();
              struct.setVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LATEST
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.latest = iprot.readBool();
              struct.setLatestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NEED_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needTotalCount = iprot.readBool();
              struct.setNeedTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqContractVersionOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVersionId()) {
        oprot.writeFieldBegin(VERSION_ID_FIELD_DESC);
        oprot.writeI32(struct.versionId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLatest()) {
        oprot.writeFieldBegin(LATEST_FIELD_DESC);
        oprot.writeBool(struct.latest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNeedTotalCount()) {
        oprot.writeFieldBegin(NEED_TOTAL_COUNT_FIELD_DESC);
        oprot.writeBool(struct.needTotalCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqContractVersionOptionTupleSchemeFactory implements SchemeFactory {
    public ReqContractVersionOptionTupleScheme getScheme() {
      return new ReqContractVersionOptionTupleScheme();
    }
  }

  private static class ReqContractVersionOptionTupleScheme extends TupleScheme<ReqContractVersionOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqContractVersionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersionId()) {
        optionals.set(0);
      }
      if (struct.isSetLatest()) {
        optionals.set(1);
      }
      if (struct.isSetNeedTotalCount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetVersionId()) {
        oprot.writeI32(struct.versionId);
      }
      if (struct.isSetLatest()) {
        oprot.writeBool(struct.latest);
      }
      if (struct.isSetNeedTotalCount()) {
        oprot.writeBool(struct.needTotalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqContractVersionOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.versionId = iprot.readI32();
        struct.setVersionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.latest = iprot.readBool();
        struct.setLatestIsSet(true);
      }
      if (incoming.get(2)) {
        struct.needTotalCount = iprot.readBool();
        struct.setNeedTotalCountIsSet(true);
      }
    }
  }

}

