/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TechPlatformCommodity implements org.apache.thrift.TBase<TechPlatformCommodity, TechPlatformCommodity._Fields>, java.io.Serializable, Cloneable, Comparable<TechPlatformCommodity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TechPlatformCommodity");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RELATE_COMMODITY_CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("relateCommodityCodes", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCurrency", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TIMEZONE_FIELD_DESC = new org.apache.thrift.protocol.TField("timezone", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTRACT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSize", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TICK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tickSize", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DENOMINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("denominator", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CMB_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("cmbDirect", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField COMMODITY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityState", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tcName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField DELIVERY_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryMode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DELIVERY_DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryDays", org.apache.thrift.protocol.TType.I32, (short)13);
  private static final org.apache.thrift.protocol.TField MAX_SINGLE_ORDER_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxSingleOrderVol", org.apache.thrift.protocol.TType.I32, (short)17);
  private static final org.apache.thrift.protocol.TField MAX_HOLD_VOL_FIELD_DESC = new org.apache.thrift.protocol.TField("maxHoldVol", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField COMMISSION_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionCalculateMode", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)21);
  private static final org.apache.thrift.protocol.TField MARGIN_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginCalculateMode", org.apache.thrift.protocol.TType.I32, (short)26);
  private static final org.apache.thrift.protocol.TField INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("initialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)27);
  private static final org.apache.thrift.protocol.TField MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("maintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)28);
  private static final org.apache.thrift.protocol.TField SELL_INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellInitialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)29);
  private static final org.apache.thrift.protocol.TField SELL_MAINTENANCE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellMaintenanceMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)30);
  private static final org.apache.thrift.protocol.TField LOCK_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("lockMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)31);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)35);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TechPlatformCommodityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TechPlatformCommodityTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public String exchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional
  public List<String> relateCommodityCodes; // optional
  public String tradeCurrency; // optional
  public String timezone; // optional
  public double contractSize; // optional
  public double tickSize; // optional
  public int denominator; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect cmbDirect; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState commodityState; // optional
  public String engName; // optional
  public String cnName; // optional
  public String tcName; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode deliveryMode; // optional
  public int deliveryDays; // optional
  public int maxSingleOrderVol; // optional
  public int maxHoldVol; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode commissionCalculateMode; // optional
  public double openCloseFee; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode marginCalculateMode; // optional
  public double initialMargin; // optional
  public double maintenanceMargin; // optional
  public double sellInitialMargin; // optional
  public double sellMaintenanceMargin; // optional
  public double lockMargin; // optional
  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    EXCHANGE((short)2, "exchange"),
    COMMODITY_TYPE((short)3, "commodityType"),
    COMMODITY_CODE((short)4, "commodityCode"),
    RELATE_COMMODITY_CODES((short)5, "relateCommodityCodes"),
    TRADE_CURRENCY((short)6, "tradeCurrency"),
    TIMEZONE((short)7, "timezone"),
    CONTRACT_SIZE((short)8, "contractSize"),
    TICK_SIZE((short)9, "tickSize"),
    DENOMINATOR((short)10, "denominator"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect
     */
    CMB_DIRECT((short)11, "cmbDirect"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState
     */
    COMMODITY_STATE((short)15, "commodityState"),
    ENG_NAME((short)22, "engName"),
    CN_NAME((short)23, "cnName"),
    TC_NAME((short)24, "tcName"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode
     */
    DELIVERY_MODE((short)12, "deliveryMode"),
    DELIVERY_DAYS((short)13, "deliveryDays"),
    MAX_SINGLE_ORDER_VOL((short)17, "maxSingleOrderVol"),
    MAX_HOLD_VOL((short)18, "maxHoldVol"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
     */
    COMMISSION_CALCULATE_MODE((short)20, "commissionCalculateMode"),
    OPEN_CLOSE_FEE((short)21, "openCloseFee"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
     */
    MARGIN_CALCULATE_MODE((short)26, "marginCalculateMode"),
    INITIAL_MARGIN((short)27, "initialMargin"),
    MAINTENANCE_MARGIN((short)28, "maintenanceMargin"),
    SELL_INITIAL_MARGIN((short)29, "sellInitialMargin"),
    SELL_MAINTENANCE_MARGIN((short)30, "sellMaintenanceMargin"),
    LOCK_MARGIN((short)31, "lockMargin"),
    /**
     * 
     * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
     */
    TECH_PLATFORM((short)35, "techPlatform"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // EXCHANGE
          return EXCHANGE;
        case 3: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 4: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 5: // RELATE_COMMODITY_CODES
          return RELATE_COMMODITY_CODES;
        case 6: // TRADE_CURRENCY
          return TRADE_CURRENCY;
        case 7: // TIMEZONE
          return TIMEZONE;
        case 8: // CONTRACT_SIZE
          return CONTRACT_SIZE;
        case 9: // TICK_SIZE
          return TICK_SIZE;
        case 10: // DENOMINATOR
          return DENOMINATOR;
        case 11: // CMB_DIRECT
          return CMB_DIRECT;
        case 15: // COMMODITY_STATE
          return COMMODITY_STATE;
        case 22: // ENG_NAME
          return ENG_NAME;
        case 23: // CN_NAME
          return CN_NAME;
        case 24: // TC_NAME
          return TC_NAME;
        case 12: // DELIVERY_MODE
          return DELIVERY_MODE;
        case 13: // DELIVERY_DAYS
          return DELIVERY_DAYS;
        case 17: // MAX_SINGLE_ORDER_VOL
          return MAX_SINGLE_ORDER_VOL;
        case 18: // MAX_HOLD_VOL
          return MAX_HOLD_VOL;
        case 20: // COMMISSION_CALCULATE_MODE
          return COMMISSION_CALCULATE_MODE;
        case 21: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 26: // MARGIN_CALCULATE_MODE
          return MARGIN_CALCULATE_MODE;
        case 27: // INITIAL_MARGIN
          return INITIAL_MARGIN;
        case 28: // MAINTENANCE_MARGIN
          return MAINTENANCE_MARGIN;
        case 29: // SELL_INITIAL_MARGIN
          return SELL_INITIAL_MARGIN;
        case 30: // SELL_MAINTENANCE_MARGIN
          return SELL_MAINTENANCE_MARGIN;
        case 31: // LOCK_MARGIN
          return LOCK_MARGIN;
        case 35: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __CONTRACTSIZE_ISSET_ID = 1;
  private static final int __TICKSIZE_ISSET_ID = 2;
  private static final int __DENOMINATOR_ISSET_ID = 3;
  private static final int __DELIVERYDAYS_ISSET_ID = 4;
  private static final int __MAXSINGLEORDERVOL_ISSET_ID = 5;
  private static final int __MAXHOLDVOL_ISSET_ID = 6;
  private static final int __OPENCLOSEFEE_ISSET_ID = 7;
  private static final int __INITIALMARGIN_ISSET_ID = 8;
  private static final int __MAINTENANCEMARGIN_ISSET_ID = 9;
  private static final int __SELLINITIALMARGIN_ISSET_ID = 10;
  private static final int __SELLMAINTENANCEMARGIN_ISSET_ID = 11;
  private static final int __LOCKMARGIN_ISSET_ID = 12;
  private static final int __CREATETIMESTAMP_ISSET_ID = 13;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE,_Fields.RELATE_COMMODITY_CODES,_Fields.TRADE_CURRENCY,_Fields.TIMEZONE,_Fields.CONTRACT_SIZE,_Fields.TICK_SIZE,_Fields.DENOMINATOR,_Fields.CMB_DIRECT,_Fields.COMMODITY_STATE,_Fields.ENG_NAME,_Fields.CN_NAME,_Fields.TC_NAME,_Fields.DELIVERY_MODE,_Fields.DELIVERY_DAYS,_Fields.MAX_SINGLE_ORDER_VOL,_Fields.MAX_HOLD_VOL,_Fields.COMMISSION_CALCULATE_MODE,_Fields.OPEN_CLOSE_FEE,_Fields.MARGIN_CALCULATE_MODE,_Fields.INITIAL_MARGIN,_Fields.MAINTENANCE_MARGIN,_Fields.SELL_INITIAL_MARGIN,_Fields.SELL_MAINTENANCE_MARGIN,_Fields.LOCK_MARGIN,_Fields.TECH_PLATFORM,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATE_COMMODITY_CODES, new org.apache.thrift.meta_data.FieldMetaData("relateCommodityCodes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TRADE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("tradeCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIMEZONE, new org.apache.thrift.meta_data.FieldMetaData("timezone", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("contractSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TICK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tickSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DENOMINATOR, new org.apache.thrift.meta_data.FieldMetaData("denominator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CMB_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("cmbDirect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect.class)));
    tmpMap.put(_Fields.COMMODITY_STATE, new org.apache.thrift.meta_data.FieldMetaData("commodityState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState.class)));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("tcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELIVERY_MODE, new org.apache.thrift.meta_data.FieldMetaData("deliveryMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode.class)));
    tmpMap.put(_Fields.DELIVERY_DAYS, new org.apache.thrift.meta_data.FieldMetaData("deliveryDays", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_SINGLE_ORDER_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxSingleOrderVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_HOLD_VOL, new org.apache.thrift.meta_data.FieldMetaData("maxHoldVol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMMISSION_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("commissionCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.class)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MARGIN_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("marginCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.class)));
    tmpMap.put(_Fields.INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("initialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("maintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellInitialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_MAINTENANCE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellMaintenanceMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOCK_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("lockMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TechPlatformCommodity.class, metaDataMap);
  }

  public TechPlatformCommodity() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TechPlatformCommodity(TechPlatformCommodity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetExchange()) {
      this.exchange = other.exchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    if (other.isSetRelateCommodityCodes()) {
      List<String> __this__relateCommodityCodes = new ArrayList<String>(other.relateCommodityCodes);
      this.relateCommodityCodes = __this__relateCommodityCodes;
    }
    if (other.isSetTradeCurrency()) {
      this.tradeCurrency = other.tradeCurrency;
    }
    if (other.isSetTimezone()) {
      this.timezone = other.timezone;
    }
    this.contractSize = other.contractSize;
    this.tickSize = other.tickSize;
    this.denominator = other.denominator;
    if (other.isSetCmbDirect()) {
      this.cmbDirect = other.cmbDirect;
    }
    if (other.isSetCommodityState()) {
      this.commodityState = other.commodityState;
    }
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetTcName()) {
      this.tcName = other.tcName;
    }
    if (other.isSetDeliveryMode()) {
      this.deliveryMode = other.deliveryMode;
    }
    this.deliveryDays = other.deliveryDays;
    this.maxSingleOrderVol = other.maxSingleOrderVol;
    this.maxHoldVol = other.maxHoldVol;
    if (other.isSetCommissionCalculateMode()) {
      this.commissionCalculateMode = other.commissionCalculateMode;
    }
    this.openCloseFee = other.openCloseFee;
    if (other.isSetMarginCalculateMode()) {
      this.marginCalculateMode = other.marginCalculateMode;
    }
    this.initialMargin = other.initialMargin;
    this.maintenanceMargin = other.maintenanceMargin;
    this.sellInitialMargin = other.sellInitialMargin;
    this.sellMaintenanceMargin = other.sellMaintenanceMargin;
    this.lockMargin = other.lockMargin;
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public TechPlatformCommodity deepCopy() {
    return new TechPlatformCommodity(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.exchange = null;
    this.commodityType = null;
    this.commodityCode = null;
    this.relateCommodityCodes = null;
    this.tradeCurrency = null;
    this.timezone = null;
    setContractSizeIsSet(false);
    this.contractSize = 0.0;
    setTickSizeIsSet(false);
    this.tickSize = 0.0;
    setDenominatorIsSet(false);
    this.denominator = 0;
    this.cmbDirect = null;
    this.commodityState = null;
    this.engName = null;
    this.cnName = null;
    this.tcName = null;
    this.deliveryMode = null;
    setDeliveryDaysIsSet(false);
    this.deliveryDays = 0;
    setMaxSingleOrderVolIsSet(false);
    this.maxSingleOrderVol = 0;
    setMaxHoldVolIsSet(false);
    this.maxHoldVol = 0;
    this.commissionCalculateMode = null;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    this.marginCalculateMode = null;
    setInitialMarginIsSet(false);
    this.initialMargin = 0.0;
    setMaintenanceMarginIsSet(false);
    this.maintenanceMargin = 0.0;
    setSellInitialMarginIsSet(false);
    this.sellInitialMargin = 0.0;
    setSellMaintenanceMarginIsSet(false);
    this.sellMaintenanceMargin = 0.0;
    setLockMarginIsSet(false);
    this.lockMargin = 0.0;
    this.techPlatform = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public TechPlatformCommodity setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getExchange() {
    return this.exchange;
  }

  public TechPlatformCommodity setExchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

  public void unsetExchange() {
    this.exchange = null;
  }

  /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange() {
    return this.exchange != null;
  }

  public void setExchangeIsSet(boolean value) {
    if (!value) {
      this.exchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public TechPlatformCommodity setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public TechPlatformCommodity setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public int getRelateCommodityCodesSize() {
    return (this.relateCommodityCodes == null) ? 0 : this.relateCommodityCodes.size();
  }

  public java.util.Iterator<String> getRelateCommodityCodesIterator() {
    return (this.relateCommodityCodes == null) ? null : this.relateCommodityCodes.iterator();
  }

  public void addToRelateCommodityCodes(String elem) {
    if (this.relateCommodityCodes == null) {
      this.relateCommodityCodes = new ArrayList<String>();
    }
    this.relateCommodityCodes.add(elem);
  }

  public List<String> getRelateCommodityCodes() {
    return this.relateCommodityCodes;
  }

  public TechPlatformCommodity setRelateCommodityCodes(List<String> relateCommodityCodes) {
    this.relateCommodityCodes = relateCommodityCodes;
    return this;
  }

  public void unsetRelateCommodityCodes() {
    this.relateCommodityCodes = null;
  }

  /** Returns true if field relateCommodityCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateCommodityCodes() {
    return this.relateCommodityCodes != null;
  }

  public void setRelateCommodityCodesIsSet(boolean value) {
    if (!value) {
      this.relateCommodityCodes = null;
    }
  }

  public String getTradeCurrency() {
    return this.tradeCurrency;
  }

  public TechPlatformCommodity setTradeCurrency(String tradeCurrency) {
    this.tradeCurrency = tradeCurrency;
    return this;
  }

  public void unsetTradeCurrency() {
    this.tradeCurrency = null;
  }

  /** Returns true if field tradeCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCurrency() {
    return this.tradeCurrency != null;
  }

  public void setTradeCurrencyIsSet(boolean value) {
    if (!value) {
      this.tradeCurrency = null;
    }
  }

  public String getTimezone() {
    return this.timezone;
  }

  public TechPlatformCommodity setTimezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  public void unsetTimezone() {
    this.timezone = null;
  }

  /** Returns true if field timezone is set (has been assigned a value) and false otherwise */
  public boolean isSetTimezone() {
    return this.timezone != null;
  }

  public void setTimezoneIsSet(boolean value) {
    if (!value) {
      this.timezone = null;
    }
  }

  public double getContractSize() {
    return this.contractSize;
  }

  public TechPlatformCommodity setContractSize(double contractSize) {
    this.contractSize = contractSize;
    setContractSizeIsSet(true);
    return this;
  }

  public void unsetContractSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  /** Returns true if field contractSize is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  public void setContractSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID, value);
  }

  public double getTickSize() {
    return this.tickSize;
  }

  public TechPlatformCommodity setTickSize(double tickSize) {
    this.tickSize = tickSize;
    setTickSizeIsSet(true);
    return this;
  }

  public void unsetTickSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  /** Returns true if field tickSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTickSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  public void setTickSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKSIZE_ISSET_ID, value);
  }

  public int getDenominator() {
    return this.denominator;
  }

  public TechPlatformCommodity setDenominator(int denominator) {
    this.denominator = denominator;
    setDenominatorIsSet(true);
    return this;
  }

  public void unsetDenominator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  /** Returns true if field denominator is set (has been assigned a value) and false otherwise */
  public boolean isSetDenominator() {
    return EncodingUtils.testBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  public void setDenominatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENOMINATOR_ISSET_ID, value);
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect getCmbDirect() {
    return this.cmbDirect;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect
   */
  public TechPlatformCommodity setCmbDirect(com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect cmbDirect) {
    this.cmbDirect = cmbDirect;
    return this;
  }

  public void unsetCmbDirect() {
    this.cmbDirect = null;
  }

  /** Returns true if field cmbDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCmbDirect() {
    return this.cmbDirect != null;
  }

  public void setCmbDirectIsSet(boolean value) {
    if (!value) {
      this.cmbDirect = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState getCommodityState() {
    return this.commodityState;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState
   */
  public TechPlatformCommodity setCommodityState(com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState commodityState) {
    this.commodityState = commodityState;
    return this;
  }

  public void unsetCommodityState() {
    this.commodityState = null;
  }

  /** Returns true if field commodityState is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityState() {
    return this.commodityState != null;
  }

  public void setCommodityStateIsSet(boolean value) {
    if (!value) {
      this.commodityState = null;
    }
  }

  public String getEngName() {
    return this.engName;
  }

  public TechPlatformCommodity setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public TechPlatformCommodity setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getTcName() {
    return this.tcName;
  }

  public TechPlatformCommodity setTcName(String tcName) {
    this.tcName = tcName;
    return this;
  }

  public void unsetTcName() {
    this.tcName = null;
  }

  /** Returns true if field tcName is set (has been assigned a value) and false otherwise */
  public boolean isSetTcName() {
    return this.tcName != null;
  }

  public void setTcNameIsSet(boolean value) {
    if (!value) {
      this.tcName = null;
    }
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode getDeliveryMode() {
    return this.deliveryMode;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode
   */
  public TechPlatformCommodity setDeliveryMode(com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode deliveryMode) {
    this.deliveryMode = deliveryMode;
    return this;
  }

  public void unsetDeliveryMode() {
    this.deliveryMode = null;
  }

  /** Returns true if field deliveryMode is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryMode() {
    return this.deliveryMode != null;
  }

  public void setDeliveryModeIsSet(boolean value) {
    if (!value) {
      this.deliveryMode = null;
    }
  }

  public int getDeliveryDays() {
    return this.deliveryDays;
  }

  public TechPlatformCommodity setDeliveryDays(int deliveryDays) {
    this.deliveryDays = deliveryDays;
    setDeliveryDaysIsSet(true);
    return this;
  }

  public void unsetDeliveryDays() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  /** Returns true if field deliveryDays is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryDays() {
    return EncodingUtils.testBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID);
  }

  public void setDeliveryDaysIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELIVERYDAYS_ISSET_ID, value);
  }

  public int getMaxSingleOrderVol() {
    return this.maxSingleOrderVol;
  }

  public TechPlatformCommodity setMaxSingleOrderVol(int maxSingleOrderVol) {
    this.maxSingleOrderVol = maxSingleOrderVol;
    setMaxSingleOrderVolIsSet(true);
    return this;
  }

  public void unsetMaxSingleOrderVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  /** Returns true if field maxSingleOrderVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxSingleOrderVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID);
  }

  public void setMaxSingleOrderVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXSINGLEORDERVOL_ISSET_ID, value);
  }

  public int getMaxHoldVol() {
    return this.maxHoldVol;
  }

  public TechPlatformCommodity setMaxHoldVol(int maxHoldVol) {
    this.maxHoldVol = maxHoldVol;
    setMaxHoldVolIsSet(true);
    return this;
  }

  public void unsetMaxHoldVol() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  /** Returns true if field maxHoldVol is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxHoldVol() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID);
  }

  public void setMaxHoldVolIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXHOLDVOL_ISSET_ID, value);
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode getCommissionCalculateMode() {
    return this.commissionCalculateMode;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public TechPlatformCommodity setCommissionCalculateMode(com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode commissionCalculateMode) {
    this.commissionCalculateMode = commissionCalculateMode;
    return this;
  }

  public void unsetCommissionCalculateMode() {
    this.commissionCalculateMode = null;
  }

  /** Returns true if field commissionCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionCalculateMode() {
    return this.commissionCalculateMode != null;
  }

  public void setCommissionCalculateModeIsSet(boolean value) {
    if (!value) {
      this.commissionCalculateMode = null;
    }
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public TechPlatformCommodity setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode getMarginCalculateMode() {
    return this.marginCalculateMode;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode
   */
  public TechPlatformCommodity setMarginCalculateMode(com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode marginCalculateMode) {
    this.marginCalculateMode = marginCalculateMode;
    return this;
  }

  public void unsetMarginCalculateMode() {
    this.marginCalculateMode = null;
  }

  /** Returns true if field marginCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginCalculateMode() {
    return this.marginCalculateMode != null;
  }

  public void setMarginCalculateModeIsSet(boolean value) {
    if (!value) {
      this.marginCalculateMode = null;
    }
  }

  public double getInitialMargin() {
    return this.initialMargin;
  }

  public TechPlatformCommodity setInitialMargin(double initialMargin) {
    this.initialMargin = initialMargin;
    setInitialMarginIsSet(true);
    return this;
  }

  public void unsetInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field initialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  public void setInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID, value);
  }

  public double getMaintenanceMargin() {
    return this.maintenanceMargin;
  }

  public TechPlatformCommodity setMaintenanceMargin(double maintenanceMargin) {
    this.maintenanceMargin = maintenanceMargin;
    setMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field maintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID);
  }

  public void setMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getSellInitialMargin() {
    return this.sellInitialMargin;
  }

  public TechPlatformCommodity setSellInitialMargin(double sellInitialMargin) {
    this.sellInitialMargin = sellInitialMargin;
    setSellInitialMarginIsSet(true);
    return this;
  }

  public void unsetSellInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field sellInitialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  public void setSellInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID, value);
  }

  public double getSellMaintenanceMargin() {
    return this.sellMaintenanceMargin;
  }

  public TechPlatformCommodity setSellMaintenanceMargin(double sellMaintenanceMargin) {
    this.sellMaintenanceMargin = sellMaintenanceMargin;
    setSellMaintenanceMarginIsSet(true);
    return this;
  }

  public void unsetSellMaintenanceMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  /** Returns true if field sellMaintenanceMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellMaintenanceMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID);
  }

  public void setSellMaintenanceMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLMAINTENANCEMARGIN_ISSET_ID, value);
  }

  public double getLockMargin() {
    return this.lockMargin;
  }

  public TechPlatformCommodity setLockMargin(double lockMargin) {
    this.lockMargin = lockMargin;
    setLockMarginIsSet(true);
    return this;
  }

  public void unsetLockMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  /** Returns true if field lockMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetLockMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID);
  }

  public void setLockMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOCKMARGIN_ISSET_ID, value);
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform
   */
  public TechPlatformCommodity setTechPlatform(com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public TechPlatformCommodity setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public TechPlatformCommodity setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case EXCHANGE:
      if (value == null) {
        unsetExchange();
      } else {
        setExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case RELATE_COMMODITY_CODES:
      if (value == null) {
        unsetRelateCommodityCodes();
      } else {
        setRelateCommodityCodes((List<String>)value);
      }
      break;

    case TRADE_CURRENCY:
      if (value == null) {
        unsetTradeCurrency();
      } else {
        setTradeCurrency((String)value);
      }
      break;

    case TIMEZONE:
      if (value == null) {
        unsetTimezone();
      } else {
        setTimezone((String)value);
      }
      break;

    case CONTRACT_SIZE:
      if (value == null) {
        unsetContractSize();
      } else {
        setContractSize((Double)value);
      }
      break;

    case TICK_SIZE:
      if (value == null) {
        unsetTickSize();
      } else {
        setTickSize((Double)value);
      }
      break;

    case DENOMINATOR:
      if (value == null) {
        unsetDenominator();
      } else {
        setDenominator((Integer)value);
      }
      break;

    case CMB_DIRECT:
      if (value == null) {
        unsetCmbDirect();
      } else {
        setCmbDirect((com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect)value);
      }
      break;

    case COMMODITY_STATE:
      if (value == null) {
        unsetCommodityState();
      } else {
        setCommodityState((com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case TC_NAME:
      if (value == null) {
        unsetTcName();
      } else {
        setTcName((String)value);
      }
      break;

    case DELIVERY_MODE:
      if (value == null) {
        unsetDeliveryMode();
      } else {
        setDeliveryMode((com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode)value);
      }
      break;

    case DELIVERY_DAYS:
      if (value == null) {
        unsetDeliveryDays();
      } else {
        setDeliveryDays((Integer)value);
      }
      break;

    case MAX_SINGLE_ORDER_VOL:
      if (value == null) {
        unsetMaxSingleOrderVol();
      } else {
        setMaxSingleOrderVol((Integer)value);
      }
      break;

    case MAX_HOLD_VOL:
      if (value == null) {
        unsetMaxHoldVol();
      } else {
        setMaxHoldVol((Integer)value);
      }
      break;

    case COMMISSION_CALCULATE_MODE:
      if (value == null) {
        unsetCommissionCalculateMode();
      } else {
        setCommissionCalculateMode((com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case MARGIN_CALCULATE_MODE:
      if (value == null) {
        unsetMarginCalculateMode();
      } else {
        setMarginCalculateMode((com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode)value);
      }
      break;

    case INITIAL_MARGIN:
      if (value == null) {
        unsetInitialMargin();
      } else {
        setInitialMargin((Double)value);
      }
      break;

    case MAINTENANCE_MARGIN:
      if (value == null) {
        unsetMaintenanceMargin();
      } else {
        setMaintenanceMargin((Double)value);
      }
      break;

    case SELL_INITIAL_MARGIN:
      if (value == null) {
        unsetSellInitialMargin();
      } else {
        setSellInitialMargin((Double)value);
      }
      break;

    case SELL_MAINTENANCE_MARGIN:
      if (value == null) {
        unsetSellMaintenanceMargin();
      } else {
        setSellMaintenanceMargin((Double)value);
      }
      break;

    case LOCK_MARGIN:
      if (value == null) {
        unsetLockMargin();
      } else {
        setLockMargin((Double)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case EXCHANGE:
      return getExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    case RELATE_COMMODITY_CODES:
      return getRelateCommodityCodes();

    case TRADE_CURRENCY:
      return getTradeCurrency();

    case TIMEZONE:
      return getTimezone();

    case CONTRACT_SIZE:
      return Double.valueOf(getContractSize());

    case TICK_SIZE:
      return Double.valueOf(getTickSize());

    case DENOMINATOR:
      return Integer.valueOf(getDenominator());

    case CMB_DIRECT:
      return getCmbDirect();

    case COMMODITY_STATE:
      return getCommodityState();

    case ENG_NAME:
      return getEngName();

    case CN_NAME:
      return getCnName();

    case TC_NAME:
      return getTcName();

    case DELIVERY_MODE:
      return getDeliveryMode();

    case DELIVERY_DAYS:
      return Integer.valueOf(getDeliveryDays());

    case MAX_SINGLE_ORDER_VOL:
      return Integer.valueOf(getMaxSingleOrderVol());

    case MAX_HOLD_VOL:
      return Integer.valueOf(getMaxHoldVol());

    case COMMISSION_CALCULATE_MODE:
      return getCommissionCalculateMode();

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case MARGIN_CALCULATE_MODE:
      return getMarginCalculateMode();

    case INITIAL_MARGIN:
      return Double.valueOf(getInitialMargin());

    case MAINTENANCE_MARGIN:
      return Double.valueOf(getMaintenanceMargin());

    case SELL_INITIAL_MARGIN:
      return Double.valueOf(getSellInitialMargin());

    case SELL_MAINTENANCE_MARGIN:
      return Double.valueOf(getSellMaintenanceMargin());

    case LOCK_MARGIN:
      return Double.valueOf(getLockMargin());

    case TECH_PLATFORM:
      return getTechPlatform();

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case EXCHANGE:
      return isSetExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case RELATE_COMMODITY_CODES:
      return isSetRelateCommodityCodes();
    case TRADE_CURRENCY:
      return isSetTradeCurrency();
    case TIMEZONE:
      return isSetTimezone();
    case CONTRACT_SIZE:
      return isSetContractSize();
    case TICK_SIZE:
      return isSetTickSize();
    case DENOMINATOR:
      return isSetDenominator();
    case CMB_DIRECT:
      return isSetCmbDirect();
    case COMMODITY_STATE:
      return isSetCommodityState();
    case ENG_NAME:
      return isSetEngName();
    case CN_NAME:
      return isSetCnName();
    case TC_NAME:
      return isSetTcName();
    case DELIVERY_MODE:
      return isSetDeliveryMode();
    case DELIVERY_DAYS:
      return isSetDeliveryDays();
    case MAX_SINGLE_ORDER_VOL:
      return isSetMaxSingleOrderVol();
    case MAX_HOLD_VOL:
      return isSetMaxHoldVol();
    case COMMISSION_CALCULATE_MODE:
      return isSetCommissionCalculateMode();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case MARGIN_CALCULATE_MODE:
      return isSetMarginCalculateMode();
    case INITIAL_MARGIN:
      return isSetInitialMargin();
    case MAINTENANCE_MARGIN:
      return isSetMaintenanceMargin();
    case SELL_INITIAL_MARGIN:
      return isSetSellInitialMargin();
    case SELL_MAINTENANCE_MARGIN:
      return isSetSellMaintenanceMargin();
    case LOCK_MARGIN:
      return isSetLockMargin();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TechPlatformCommodity)
      return this.equals((TechPlatformCommodity)that);
    return false;
  }

  public boolean equals(TechPlatformCommodity that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_exchange = true && this.isSetExchange();
    boolean that_present_exchange = true && that.isSetExchange();
    if (this_present_exchange || that_present_exchange) {
      if (!(this_present_exchange && that_present_exchange))
        return false;
      if (!this.exchange.equals(that.exchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_relateCommodityCodes = true && this.isSetRelateCommodityCodes();
    boolean that_present_relateCommodityCodes = true && that.isSetRelateCommodityCodes();
    if (this_present_relateCommodityCodes || that_present_relateCommodityCodes) {
      if (!(this_present_relateCommodityCodes && that_present_relateCommodityCodes))
        return false;
      if (!this.relateCommodityCodes.equals(that.relateCommodityCodes))
        return false;
    }

    boolean this_present_tradeCurrency = true && this.isSetTradeCurrency();
    boolean that_present_tradeCurrency = true && that.isSetTradeCurrency();
    if (this_present_tradeCurrency || that_present_tradeCurrency) {
      if (!(this_present_tradeCurrency && that_present_tradeCurrency))
        return false;
      if (!this.tradeCurrency.equals(that.tradeCurrency))
        return false;
    }

    boolean this_present_timezone = true && this.isSetTimezone();
    boolean that_present_timezone = true && that.isSetTimezone();
    if (this_present_timezone || that_present_timezone) {
      if (!(this_present_timezone && that_present_timezone))
        return false;
      if (!this.timezone.equals(that.timezone))
        return false;
    }

    boolean this_present_contractSize = true && this.isSetContractSize();
    boolean that_present_contractSize = true && that.isSetContractSize();
    if (this_present_contractSize || that_present_contractSize) {
      if (!(this_present_contractSize && that_present_contractSize))
        return false;
      if (this.contractSize != that.contractSize)
        return false;
    }

    boolean this_present_tickSize = true && this.isSetTickSize();
    boolean that_present_tickSize = true && that.isSetTickSize();
    if (this_present_tickSize || that_present_tickSize) {
      if (!(this_present_tickSize && that_present_tickSize))
        return false;
      if (this.tickSize != that.tickSize)
        return false;
    }

    boolean this_present_denominator = true && this.isSetDenominator();
    boolean that_present_denominator = true && that.isSetDenominator();
    if (this_present_denominator || that_present_denominator) {
      if (!(this_present_denominator && that_present_denominator))
        return false;
      if (this.denominator != that.denominator)
        return false;
    }

    boolean this_present_cmbDirect = true && this.isSetCmbDirect();
    boolean that_present_cmbDirect = true && that.isSetCmbDirect();
    if (this_present_cmbDirect || that_present_cmbDirect) {
      if (!(this_present_cmbDirect && that_present_cmbDirect))
        return false;
      if (!this.cmbDirect.equals(that.cmbDirect))
        return false;
    }

    boolean this_present_commodityState = true && this.isSetCommodityState();
    boolean that_present_commodityState = true && that.isSetCommodityState();
    if (this_present_commodityState || that_present_commodityState) {
      if (!(this_present_commodityState && that_present_commodityState))
        return false;
      if (!this.commodityState.equals(that.commodityState))
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_tcName = true && this.isSetTcName();
    boolean that_present_tcName = true && that.isSetTcName();
    if (this_present_tcName || that_present_tcName) {
      if (!(this_present_tcName && that_present_tcName))
        return false;
      if (!this.tcName.equals(that.tcName))
        return false;
    }

    boolean this_present_deliveryMode = true && this.isSetDeliveryMode();
    boolean that_present_deliveryMode = true && that.isSetDeliveryMode();
    if (this_present_deliveryMode || that_present_deliveryMode) {
      if (!(this_present_deliveryMode && that_present_deliveryMode))
        return false;
      if (!this.deliveryMode.equals(that.deliveryMode))
        return false;
    }

    boolean this_present_deliveryDays = true && this.isSetDeliveryDays();
    boolean that_present_deliveryDays = true && that.isSetDeliveryDays();
    if (this_present_deliveryDays || that_present_deliveryDays) {
      if (!(this_present_deliveryDays && that_present_deliveryDays))
        return false;
      if (this.deliveryDays != that.deliveryDays)
        return false;
    }

    boolean this_present_maxSingleOrderVol = true && this.isSetMaxSingleOrderVol();
    boolean that_present_maxSingleOrderVol = true && that.isSetMaxSingleOrderVol();
    if (this_present_maxSingleOrderVol || that_present_maxSingleOrderVol) {
      if (!(this_present_maxSingleOrderVol && that_present_maxSingleOrderVol))
        return false;
      if (this.maxSingleOrderVol != that.maxSingleOrderVol)
        return false;
    }

    boolean this_present_maxHoldVol = true && this.isSetMaxHoldVol();
    boolean that_present_maxHoldVol = true && that.isSetMaxHoldVol();
    if (this_present_maxHoldVol || that_present_maxHoldVol) {
      if (!(this_present_maxHoldVol && that_present_maxHoldVol))
        return false;
      if (this.maxHoldVol != that.maxHoldVol)
        return false;
    }

    boolean this_present_commissionCalculateMode = true && this.isSetCommissionCalculateMode();
    boolean that_present_commissionCalculateMode = true && that.isSetCommissionCalculateMode();
    if (this_present_commissionCalculateMode || that_present_commissionCalculateMode) {
      if (!(this_present_commissionCalculateMode && that_present_commissionCalculateMode))
        return false;
      if (!this.commissionCalculateMode.equals(that.commissionCalculateMode))
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_marginCalculateMode = true && this.isSetMarginCalculateMode();
    boolean that_present_marginCalculateMode = true && that.isSetMarginCalculateMode();
    if (this_present_marginCalculateMode || that_present_marginCalculateMode) {
      if (!(this_present_marginCalculateMode && that_present_marginCalculateMode))
        return false;
      if (!this.marginCalculateMode.equals(that.marginCalculateMode))
        return false;
    }

    boolean this_present_initialMargin = true && this.isSetInitialMargin();
    boolean that_present_initialMargin = true && that.isSetInitialMargin();
    if (this_present_initialMargin || that_present_initialMargin) {
      if (!(this_present_initialMargin && that_present_initialMargin))
        return false;
      if (this.initialMargin != that.initialMargin)
        return false;
    }

    boolean this_present_maintenanceMargin = true && this.isSetMaintenanceMargin();
    boolean that_present_maintenanceMargin = true && that.isSetMaintenanceMargin();
    if (this_present_maintenanceMargin || that_present_maintenanceMargin) {
      if (!(this_present_maintenanceMargin && that_present_maintenanceMargin))
        return false;
      if (this.maintenanceMargin != that.maintenanceMargin)
        return false;
    }

    boolean this_present_sellInitialMargin = true && this.isSetSellInitialMargin();
    boolean that_present_sellInitialMargin = true && that.isSetSellInitialMargin();
    if (this_present_sellInitialMargin || that_present_sellInitialMargin) {
      if (!(this_present_sellInitialMargin && that_present_sellInitialMargin))
        return false;
      if (this.sellInitialMargin != that.sellInitialMargin)
        return false;
    }

    boolean this_present_sellMaintenanceMargin = true && this.isSetSellMaintenanceMargin();
    boolean that_present_sellMaintenanceMargin = true && that.isSetSellMaintenanceMargin();
    if (this_present_sellMaintenanceMargin || that_present_sellMaintenanceMargin) {
      if (!(this_present_sellMaintenanceMargin && that_present_sellMaintenanceMargin))
        return false;
      if (this.sellMaintenanceMargin != that.sellMaintenanceMargin)
        return false;
    }

    boolean this_present_lockMargin = true && this.isSetLockMargin();
    boolean that_present_lockMargin = true && that.isSetLockMargin();
    if (this_present_lockMargin || that_present_lockMargin) {
      if (!(this_present_lockMargin && that_present_lockMargin))
        return false;
      if (this.lockMargin != that.lockMargin)
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TechPlatformCommodity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange()).compareTo(other.isSetExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, other.exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateCommodityCodes()).compareTo(other.isSetRelateCommodityCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateCommodityCodes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateCommodityCodes, other.relateCommodityCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCurrency()).compareTo(other.isSetTradeCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCurrency, other.tradeCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimezone()).compareTo(other.isSetTimezone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimezone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timezone, other.timezone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSize()).compareTo(other.isSetContractSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSize, other.contractSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTickSize()).compareTo(other.isSetTickSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTickSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tickSize, other.tickSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDenominator()).compareTo(other.isSetDenominator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDenominator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denominator, other.denominator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmbDirect()).compareTo(other.isSetCmbDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmbDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmbDirect, other.cmbDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityState()).compareTo(other.isSetCommodityState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityState, other.commodityState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTcName()).compareTo(other.isSetTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tcName, other.tcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryMode()).compareTo(other.isSetDeliveryMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryMode, other.deliveryMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeliveryDays()).compareTo(other.isSetDeliveryDays());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryDays()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryDays, other.deliveryDays);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxSingleOrderVol()).compareTo(other.isSetMaxSingleOrderVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxSingleOrderVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxSingleOrderVol, other.maxSingleOrderVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxHoldVol()).compareTo(other.isSetMaxHoldVol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxHoldVol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxHoldVol, other.maxHoldVol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionCalculateMode()).compareTo(other.isSetCommissionCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionCalculateMode, other.commissionCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginCalculateMode()).compareTo(other.isSetMarginCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginCalculateMode, other.marginCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialMargin()).compareTo(other.isSetInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialMargin, other.initialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaintenanceMargin()).compareTo(other.isSetMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maintenanceMargin, other.maintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellInitialMargin()).compareTo(other.isSetSellInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellInitialMargin, other.sellInitialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellMaintenanceMargin()).compareTo(other.isSetSellMaintenanceMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellMaintenanceMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellMaintenanceMargin, other.sellMaintenanceMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLockMargin()).compareTo(other.isSetLockMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLockMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockMargin, other.lockMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TechPlatformCommodity(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetExchange()) {
      if (!first) sb.append(", ");
      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetRelateCommodityCodes()) {
      if (!first) sb.append(", ");
      sb.append("relateCommodityCodes:");
      if (this.relateCommodityCodes == null) {
        sb.append("null");
      } else {
        sb.append(this.relateCommodityCodes);
      }
      first = false;
    }
    if (isSetTradeCurrency()) {
      if (!first) sb.append(", ");
      sb.append("tradeCurrency:");
      if (this.tradeCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeCurrency);
      }
      first = false;
    }
    if (isSetTimezone()) {
      if (!first) sb.append(", ");
      sb.append("timezone:");
      if (this.timezone == null) {
        sb.append("null");
      } else {
        sb.append(this.timezone);
      }
      first = false;
    }
    if (isSetContractSize()) {
      if (!first) sb.append(", ");
      sb.append("contractSize:");
      sb.append(this.contractSize);
      first = false;
    }
    if (isSetTickSize()) {
      if (!first) sb.append(", ");
      sb.append("tickSize:");
      sb.append(this.tickSize);
      first = false;
    }
    if (isSetDenominator()) {
      if (!first) sb.append(", ");
      sb.append("denominator:");
      sb.append(this.denominator);
      first = false;
    }
    if (isSetCmbDirect()) {
      if (!first) sb.append(", ");
      sb.append("cmbDirect:");
      if (this.cmbDirect == null) {
        sb.append("null");
      } else {
        sb.append(this.cmbDirect);
      }
      first = false;
    }
    if (isSetCommodityState()) {
      if (!first) sb.append(", ");
      sb.append("commodityState:");
      if (this.commodityState == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityState);
      }
      first = false;
    }
    if (isSetEngName()) {
      if (!first) sb.append(", ");
      sb.append("engName:");
      if (this.engName == null) {
        sb.append("null");
      } else {
        sb.append(this.engName);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetTcName()) {
      if (!first) sb.append(", ");
      sb.append("tcName:");
      if (this.tcName == null) {
        sb.append("null");
      } else {
        sb.append(this.tcName);
      }
      first = false;
    }
    if (isSetDeliveryMode()) {
      if (!first) sb.append(", ");
      sb.append("deliveryMode:");
      if (this.deliveryMode == null) {
        sb.append("null");
      } else {
        sb.append(this.deliveryMode);
      }
      first = false;
    }
    if (isSetDeliveryDays()) {
      if (!first) sb.append(", ");
      sb.append("deliveryDays:");
      sb.append(this.deliveryDays);
      first = false;
    }
    if (isSetMaxSingleOrderVol()) {
      if (!first) sb.append(", ");
      sb.append("maxSingleOrderVol:");
      sb.append(this.maxSingleOrderVol);
      first = false;
    }
    if (isSetMaxHoldVol()) {
      if (!first) sb.append(", ");
      sb.append("maxHoldVol:");
      sb.append(this.maxHoldVol);
      first = false;
    }
    if (isSetCommissionCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("commissionCalculateMode:");
      if (this.commissionCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionCalculateMode);
      }
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetMarginCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("marginCalculateMode:");
      if (this.marginCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.marginCalculateMode);
      }
      first = false;
    }
    if (isSetInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("initialMargin:");
      sb.append(this.initialMargin);
      first = false;
    }
    if (isSetMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("maintenanceMargin:");
      sb.append(this.maintenanceMargin);
      first = false;
    }
    if (isSetSellInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellInitialMargin:");
      sb.append(this.sellInitialMargin);
      first = false;
    }
    if (isSetSellMaintenanceMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellMaintenanceMargin:");
      sb.append(this.sellMaintenanceMargin);
      first = false;
    }
    if (isSetLockMargin()) {
      if (!first) sb.append(", ");
      sb.append("lockMargin:");
      sb.append(this.lockMargin);
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TechPlatformCommodityStandardSchemeFactory implements SchemeFactory {
    public TechPlatformCommodityStandardScheme getScheme() {
      return new TechPlatformCommodityStandardScheme();
    }
  }

  private static class TechPlatformCommodityStandardScheme extends StandardScheme<TechPlatformCommodity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TechPlatformCommodity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchange = iprot.readString();
              struct.setExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATE_COMMODITY_CODES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                struct.relateCommodityCodes = new ArrayList<String>(_list136.size);
                for (int _i137 = 0; _i137 < _list136.size; ++_i137)
                {
                  String _elem138;
                  _elem138 = iprot.readString();
                  struct.relateCommodityCodes.add(_elem138);
                }
                iprot.readListEnd();
              }
              struct.setRelateCommodityCodesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCurrency = iprot.readString();
              struct.setTradeCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TIMEZONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timezone = iprot.readString();
              struct.setTimezoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTRACT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractSize = iprot.readDouble();
              struct.setContractSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tickSize = iprot.readDouble();
              struct.setTickSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DENOMINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.denominator = iprot.readI32();
              struct.setDenominatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CMB_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmbDirect = com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect.findByValue(iprot.readI32());
              struct.setCmbDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMODITY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commodityState = com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState.findByValue(iprot.readI32());
              struct.setCommodityStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tcName = iprot.readString();
              struct.setTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DELIVERY_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryMode = com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode.findByValue(iprot.readI32());
              struct.setDeliveryModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DELIVERY_DAYS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.deliveryDays = iprot.readI32();
              struct.setDeliveryDaysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MAX_SINGLE_ORDER_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxSingleOrderVol = iprot.readI32();
              struct.setMaxSingleOrderVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // MAX_HOLD_VOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxHoldVol = iprot.readI32();
              struct.setMaxHoldVolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // COMMISSION_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commissionCalculateMode = com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.findByValue(iprot.readI32());
              struct.setCommissionCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // MARGIN_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marginCalculateMode = com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.findByValue(iprot.readI32());
              struct.setMarginCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialMargin = iprot.readDouble();
              struct.setInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maintenanceMargin = iprot.readDouble();
              struct.setMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // SELL_INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellInitialMargin = iprot.readDouble();
              struct.setSellInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // SELL_MAINTENANCE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellMaintenanceMargin = iprot.readDouble();
              struct.setSellMaintenanceMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LOCK_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lockMargin = iprot.readDouble();
              struct.setLockMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 35: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TechPlatformCommodity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.exchange != null) {
        if (struct.isSetExchange()) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relateCommodityCodes != null) {
        if (struct.isSetRelateCommodityCodes()) {
          oprot.writeFieldBegin(RELATE_COMMODITY_CODES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.relateCommodityCodes.size()));
            for (String _iter139 : struct.relateCommodityCodes)
            {
              oprot.writeString(_iter139);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeCurrency != null) {
        if (struct.isSetTradeCurrency()) {
          oprot.writeFieldBegin(TRADE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.tradeCurrency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.timezone != null) {
        if (struct.isSetTimezone()) {
          oprot.writeFieldBegin(TIMEZONE_FIELD_DESC);
          oprot.writeString(struct.timezone);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractSize()) {
        oprot.writeFieldBegin(CONTRACT_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.contractSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTickSize()) {
        oprot.writeFieldBegin(TICK_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.tickSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDenominator()) {
        oprot.writeFieldBegin(DENOMINATOR_FIELD_DESC);
        oprot.writeI32(struct.denominator);
        oprot.writeFieldEnd();
      }
      if (struct.cmbDirect != null) {
        if (struct.isSetCmbDirect()) {
          oprot.writeFieldBegin(CMB_DIRECT_FIELD_DESC);
          oprot.writeI32(struct.cmbDirect.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.deliveryMode != null) {
        if (struct.isSetDeliveryMode()) {
          oprot.writeFieldBegin(DELIVERY_MODE_FIELD_DESC);
          oprot.writeI32(struct.deliveryMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeFieldBegin(DELIVERY_DAYS_FIELD_DESC);
        oprot.writeI32(struct.deliveryDays);
        oprot.writeFieldEnd();
      }
      if (struct.commodityState != null) {
        if (struct.isSetCommodityState()) {
          oprot.writeFieldBegin(COMMODITY_STATE_FIELD_DESC);
          oprot.writeI32(struct.commodityState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeFieldBegin(MAX_SINGLE_ORDER_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxSingleOrderVol);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeFieldBegin(MAX_HOLD_VOL_FIELD_DESC);
        oprot.writeI32(struct.maxHoldVol);
        oprot.writeFieldEnd();
      }
      if (struct.commissionCalculateMode != null) {
        if (struct.isSetCommissionCalculateMode()) {
          oprot.writeFieldBegin(COMMISSION_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.commissionCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.engName != null) {
        if (struct.isSetEngName()) {
          oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.engName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tcName != null) {
        if (struct.isSetTcName()) {
          oprot.writeFieldBegin(TC_NAME_FIELD_DESC);
          oprot.writeString(struct.tcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marginCalculateMode != null) {
        if (struct.isSetMarginCalculateMode()) {
          oprot.writeFieldBegin(MARGIN_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.marginCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeFieldBegin(INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.initialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeFieldBegin(MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.maintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeFieldBegin(SELL_INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellInitialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeFieldBegin(SELL_MAINTENANCE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellMaintenanceMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLockMargin()) {
        oprot.writeFieldBegin(LOCK_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.lockMargin);
        oprot.writeFieldEnd();
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TechPlatformCommodityTupleSchemeFactory implements SchemeFactory {
    public TechPlatformCommodityTupleScheme getScheme() {
      return new TechPlatformCommodityTupleScheme();
    }
  }

  private static class TechPlatformCommodityTupleScheme extends TupleScheme<TechPlatformCommodity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TechPlatformCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetExchange()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(2);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(3);
      }
      if (struct.isSetRelateCommodityCodes()) {
        optionals.set(4);
      }
      if (struct.isSetTradeCurrency()) {
        optionals.set(5);
      }
      if (struct.isSetTimezone()) {
        optionals.set(6);
      }
      if (struct.isSetContractSize()) {
        optionals.set(7);
      }
      if (struct.isSetTickSize()) {
        optionals.set(8);
      }
      if (struct.isSetDenominator()) {
        optionals.set(9);
      }
      if (struct.isSetCmbDirect()) {
        optionals.set(10);
      }
      if (struct.isSetCommodityState()) {
        optionals.set(11);
      }
      if (struct.isSetEngName()) {
        optionals.set(12);
      }
      if (struct.isSetCnName()) {
        optionals.set(13);
      }
      if (struct.isSetTcName()) {
        optionals.set(14);
      }
      if (struct.isSetDeliveryMode()) {
        optionals.set(15);
      }
      if (struct.isSetDeliveryDays()) {
        optionals.set(16);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        optionals.set(17);
      }
      if (struct.isSetMaxHoldVol()) {
        optionals.set(18);
      }
      if (struct.isSetCommissionCalculateMode()) {
        optionals.set(19);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(20);
      }
      if (struct.isSetMarginCalculateMode()) {
        optionals.set(21);
      }
      if (struct.isSetInitialMargin()) {
        optionals.set(22);
      }
      if (struct.isSetMaintenanceMargin()) {
        optionals.set(23);
      }
      if (struct.isSetSellInitialMargin()) {
        optionals.set(24);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        optionals.set(25);
      }
      if (struct.isSetLockMargin()) {
        optionals.set(26);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(27);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(28);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(29);
      }
      oprot.writeBitSet(optionals, 30);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetExchange()) {
        oprot.writeString(struct.exchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetRelateCommodityCodes()) {
        {
          oprot.writeI32(struct.relateCommodityCodes.size());
          for (String _iter140 : struct.relateCommodityCodes)
          {
            oprot.writeString(_iter140);
          }
        }
      }
      if (struct.isSetTradeCurrency()) {
        oprot.writeString(struct.tradeCurrency);
      }
      if (struct.isSetTimezone()) {
        oprot.writeString(struct.timezone);
      }
      if (struct.isSetContractSize()) {
        oprot.writeDouble(struct.contractSize);
      }
      if (struct.isSetTickSize()) {
        oprot.writeDouble(struct.tickSize);
      }
      if (struct.isSetDenominator()) {
        oprot.writeI32(struct.denominator);
      }
      if (struct.isSetCmbDirect()) {
        oprot.writeI32(struct.cmbDirect.getValue());
      }
      if (struct.isSetCommodityState()) {
        oprot.writeI32(struct.commodityState.getValue());
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetTcName()) {
        oprot.writeString(struct.tcName);
      }
      if (struct.isSetDeliveryMode()) {
        oprot.writeI32(struct.deliveryMode.getValue());
      }
      if (struct.isSetDeliveryDays()) {
        oprot.writeI32(struct.deliveryDays);
      }
      if (struct.isSetMaxSingleOrderVol()) {
        oprot.writeI32(struct.maxSingleOrderVol);
      }
      if (struct.isSetMaxHoldVol()) {
        oprot.writeI32(struct.maxHoldVol);
      }
      if (struct.isSetCommissionCalculateMode()) {
        oprot.writeI32(struct.commissionCalculateMode.getValue());
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetMarginCalculateMode()) {
        oprot.writeI32(struct.marginCalculateMode.getValue());
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeDouble(struct.initialMargin);
      }
      if (struct.isSetMaintenanceMargin()) {
        oprot.writeDouble(struct.maintenanceMargin);
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeDouble(struct.sellInitialMargin);
      }
      if (struct.isSetSellMaintenanceMargin()) {
        oprot.writeDouble(struct.sellMaintenanceMargin);
      }
      if (struct.isSetLockMargin()) {
        oprot.writeDouble(struct.lockMargin);
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TechPlatformCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(30);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchange = iprot.readString();
        struct.setExchangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.relateCommodityCodes = new ArrayList<String>(_list141.size);
          for (int _i142 = 0; _i142 < _list141.size; ++_i142)
          {
            String _elem143;
            _elem143 = iprot.readString();
            struct.relateCommodityCodes.add(_elem143);
          }
        }
        struct.setRelateCommodityCodesIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeCurrency = iprot.readString();
        struct.setTradeCurrencyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.timezone = iprot.readString();
        struct.setTimezoneIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contractSize = iprot.readDouble();
        struct.setContractSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tickSize = iprot.readDouble();
        struct.setTickSizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.denominator = iprot.readI32();
        struct.setDenominatorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cmbDirect = com.longsheng.xueqiao.contract.standard.thriftapi.CmbDirect.findByValue(iprot.readI32());
        struct.setCmbDirectIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commodityState = com.longsheng.xueqiao.contract.standard.thriftapi.CommodityState.findByValue(iprot.readI32());
        struct.setCommodityStateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(13)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tcName = iprot.readString();
        struct.setTcNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.deliveryMode = com.longsheng.xueqiao.contract.standard.thriftapi.DeliveryMode.findByValue(iprot.readI32());
        struct.setDeliveryModeIsSet(true);
      }
      if (incoming.get(16)) {
        struct.deliveryDays = iprot.readI32();
        struct.setDeliveryDaysIsSet(true);
      }
      if (incoming.get(17)) {
        struct.maxSingleOrderVol = iprot.readI32();
        struct.setMaxSingleOrderVolIsSet(true);
      }
      if (incoming.get(18)) {
        struct.maxHoldVol = iprot.readI32();
        struct.setMaxHoldVolIsSet(true);
      }
      if (incoming.get(19)) {
        struct.commissionCalculateMode = com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.findByValue(iprot.readI32());
        struct.setCommissionCalculateModeIsSet(true);
      }
      if (incoming.get(20)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(21)) {
        struct.marginCalculateMode = com.longsheng.xueqiao.contract.standard.thriftapi.CalculateMode.findByValue(iprot.readI32());
        struct.setMarginCalculateModeIsSet(true);
      }
      if (incoming.get(22)) {
        struct.initialMargin = iprot.readDouble();
        struct.setInitialMarginIsSet(true);
      }
      if (incoming.get(23)) {
        struct.maintenanceMargin = iprot.readDouble();
        struct.setMaintenanceMarginIsSet(true);
      }
      if (incoming.get(24)) {
        struct.sellInitialMargin = iprot.readDouble();
        struct.setSellInitialMarginIsSet(true);
      }
      if (incoming.get(25)) {
        struct.sellMaintenanceMargin = iprot.readDouble();
        struct.setSellMaintenanceMarginIsSet(true);
      }
      if (incoming.get(26)) {
        struct.lockMargin = iprot.readDouble();
        struct.setLockMarginIsSet(true);
      }
      if (incoming.get(27)) {
        struct.techPlatform = com.longsheng.xueqiao.contract.standard.thriftapi.TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(28)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(29)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

