/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledCommodity implements org.apache.thrift.TBase<SledCommodity, SledCommodity._Fields>, java.io.Serializable, Cloneable, Comparable<SledCommodity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledCommodity");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RELATE_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relateCommodityIds", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeCurrency", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField ZONE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("zoneId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTRACT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSize", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField TICK_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("tickSize", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField DENOMINATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("denominator", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CMB_DIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("cmbDirect", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField COMMODITY_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityState", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityConfig", org.apache.thrift.protocol.TType.LIST, (short)20);
  private static final org.apache.thrift.protocol.TField ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("engName", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cnName", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tcName", org.apache.thrift.protocol.TType.STRING, (short)24);
  private static final org.apache.thrift.protocol.TField IS_ALSO_SUPPORT_SIM_FIELD_DESC = new org.apache.thrift.protocol.TField("isAlsoSupportSim", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledCommodityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledCommodityTupleSchemeFactory());
  }

  public int sledCommodityId; // optional
  public String exchangeMic; // optional
  /**
   * 
   * @see SledCommodityType
   */
  public SledCommodityType sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public List<Integer> relateCommodityIds; // optional
  public String tradeCurrency; // optional
  public String zoneId; // optional
  public double contractSize; // optional
  public double tickSize; // optional
  public int denominator; // optional
  /**
   * 
   * @see CmbDirect
   */
  public CmbDirect cmbDirect; // optional
  /**
   * 
   * @see CommodityState
   */
  public CommodityState commodityState; // optional
  public List<SledCommodityConfig> sledCommodityConfig; // optional
  public String engName; // optional
  public String cnName; // optional
  public String tcName; // optional
  public boolean isAlsoSupportSim; // optional
  public long activeStartTimestamp; // optional
  public long activeEndTimestamp; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    /**
     * 
     * @see SledCommodityType
     */
    SLED_COMMODITY_TYPE((short)3, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)4, "sledCommodityCode"),
    RELATE_COMMODITY_IDS((short)5, "relateCommodityIds"),
    TRADE_CURRENCY((short)6, "tradeCurrency"),
    ZONE_ID((short)7, "zoneId"),
    CONTRACT_SIZE((short)8, "contractSize"),
    TICK_SIZE((short)9, "tickSize"),
    DENOMINATOR((short)10, "denominator"),
    /**
     * 
     * @see CmbDirect
     */
    CMB_DIRECT((short)11, "cmbDirect"),
    /**
     * 
     * @see CommodityState
     */
    COMMODITY_STATE((short)15, "commodityState"),
    SLED_COMMODITY_CONFIG((short)20, "sledCommodityConfig"),
    ENG_NAME((short)22, "engName"),
    CN_NAME((short)23, "cnName"),
    TC_NAME((short)24, "tcName"),
    IS_ALSO_SUPPORT_SIM((short)25, "isAlsoSupportSim"),
    ACTIVE_START_TIMESTAMP((short)32, "activeStartTimestamp"),
    ACTIVE_END_TIMESTAMP((short)33, "activeEndTimestamp"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 4: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 5: // RELATE_COMMODITY_IDS
          return RELATE_COMMODITY_IDS;
        case 6: // TRADE_CURRENCY
          return TRADE_CURRENCY;
        case 7: // ZONE_ID
          return ZONE_ID;
        case 8: // CONTRACT_SIZE
          return CONTRACT_SIZE;
        case 9: // TICK_SIZE
          return TICK_SIZE;
        case 10: // DENOMINATOR
          return DENOMINATOR;
        case 11: // CMB_DIRECT
          return CMB_DIRECT;
        case 15: // COMMODITY_STATE
          return COMMODITY_STATE;
        case 20: // SLED_COMMODITY_CONFIG
          return SLED_COMMODITY_CONFIG;
        case 22: // ENG_NAME
          return ENG_NAME;
        case 23: // CN_NAME
          return CN_NAME;
        case 24: // TC_NAME
          return TC_NAME;
        case 25: // IS_ALSO_SUPPORT_SIM
          return IS_ALSO_SUPPORT_SIM;
        case 32: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 33: // ACTIVE_END_TIMESTAMP
          return ACTIVE_END_TIMESTAMP;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __CONTRACTSIZE_ISSET_ID = 1;
  private static final int __TICKSIZE_ISSET_ID = 2;
  private static final int __DENOMINATOR_ISSET_ID = 3;
  private static final int __ISALSOSUPPORTSIM_ISSET_ID = 4;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 5;
  private static final int __ACTIVEENDTIMESTAMP_ISSET_ID = 6;
  private static final int __CREATETIMESTAMP_ISSET_ID = 7;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.EXCHANGE_MIC,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.RELATE_COMMODITY_IDS,_Fields.TRADE_CURRENCY,_Fields.ZONE_ID,_Fields.CONTRACT_SIZE,_Fields.TICK_SIZE,_Fields.DENOMINATOR,_Fields.CMB_DIRECT,_Fields.COMMODITY_STATE,_Fields.SLED_COMMODITY_CONFIG,_Fields.ENG_NAME,_Fields.CN_NAME,_Fields.TC_NAME,_Fields.IS_ALSO_SUPPORT_SIM,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVE_END_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SledCommodityType.class)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATE_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("relateCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TRADE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("tradeCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ZONE_ID, new org.apache.thrift.meta_data.FieldMetaData("zoneId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("contractSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TICK_SIZE, new org.apache.thrift.meta_data.FieldMetaData("tickSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DENOMINATOR, new org.apache.thrift.meta_data.FieldMetaData("denominator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CMB_DIRECT, new org.apache.thrift.meta_data.FieldMetaData("cmbDirect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CmbDirect.class)));
    tmpMap.put(_Fields.COMMODITY_STATE, new org.apache.thrift.meta_data.FieldMetaData("commodityState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommodityState.class)));
    tmpMap.put(_Fields.SLED_COMMODITY_CONFIG, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityConfig", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledCommodityConfig.class))));
    tmpMap.put(_Fields.ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("engName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("cnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("tcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ALSO_SUPPORT_SIM, new org.apache.thrift.meta_data.FieldMetaData("isAlsoSupportSim", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledCommodity.class, metaDataMap);
  }

  public SledCommodity() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledCommodity(SledCommodity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    if (other.isSetSledCommodityType()) {
      this.sledCommodityType = other.sledCommodityType;
    }
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    if (other.isSetRelateCommodityIds()) {
      List<Integer> __this__relateCommodityIds = new ArrayList<Integer>(other.relateCommodityIds);
      this.relateCommodityIds = __this__relateCommodityIds;
    }
    if (other.isSetTradeCurrency()) {
      this.tradeCurrency = other.tradeCurrency;
    }
    if (other.isSetZoneId()) {
      this.zoneId = other.zoneId;
    }
    this.contractSize = other.contractSize;
    this.tickSize = other.tickSize;
    this.denominator = other.denominator;
    if (other.isSetCmbDirect()) {
      this.cmbDirect = other.cmbDirect;
    }
    if (other.isSetCommodityState()) {
      this.commodityState = other.commodityState;
    }
    if (other.isSetSledCommodityConfig()) {
      List<SledCommodityConfig> __this__sledCommodityConfig = new ArrayList<SledCommodityConfig>(other.sledCommodityConfig.size());
      for (SledCommodityConfig other_element : other.sledCommodityConfig) {
        __this__sledCommodityConfig.add(new SledCommodityConfig(other_element));
      }
      this.sledCommodityConfig = __this__sledCommodityConfig;
    }
    if (other.isSetEngName()) {
      this.engName = other.engName;
    }
    if (other.isSetCnName()) {
      this.cnName = other.cnName;
    }
    if (other.isSetTcName()) {
      this.tcName = other.tcName;
    }
    this.isAlsoSupportSim = other.isAlsoSupportSim;
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activeEndTimestamp = other.activeEndTimestamp;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public SledCommodity deepCopy() {
    return new SledCommodity(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.exchangeMic = null;
    this.sledCommodityType = null;
    this.sledCommodityCode = null;
    this.relateCommodityIds = null;
    this.tradeCurrency = null;
    this.zoneId = null;
    setContractSizeIsSet(false);
    this.contractSize = 0.0;
    setTickSizeIsSet(false);
    this.tickSize = 0.0;
    setDenominatorIsSet(false);
    this.denominator = 0;
    this.cmbDirect = null;
    this.commodityState = null;
    this.sledCommodityConfig = null;
    this.engName = null;
    this.cnName = null;
    this.tcName = null;
    setIsAlsoSupportSimIsSet(false);
    this.isAlsoSupportSim = false;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActiveEndTimestampIsSet(false);
    this.activeEndTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledCommodity setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public SledCommodity setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  /**
   * 
   * @see SledCommodityType
   */
  public SledCommodityType getSledCommodityType() {
    return this.sledCommodityType;
  }

  /**
   * 
   * @see SledCommodityType
   */
  public SledCommodity setSledCommodityType(SledCommodityType sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    return this;
  }

  public void unsetSledCommodityType() {
    this.sledCommodityType = null;
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return this.sledCommodityType != null;
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityType = null;
    }
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public SledCommodity setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public int getRelateCommodityIdsSize() {
    return (this.relateCommodityIds == null) ? 0 : this.relateCommodityIds.size();
  }

  public java.util.Iterator<Integer> getRelateCommodityIdsIterator() {
    return (this.relateCommodityIds == null) ? null : this.relateCommodityIds.iterator();
  }

  public void addToRelateCommodityIds(int elem) {
    if (this.relateCommodityIds == null) {
      this.relateCommodityIds = new ArrayList<Integer>();
    }
    this.relateCommodityIds.add(elem);
  }

  public List<Integer> getRelateCommodityIds() {
    return this.relateCommodityIds;
  }

  public SledCommodity setRelateCommodityIds(List<Integer> relateCommodityIds) {
    this.relateCommodityIds = relateCommodityIds;
    return this;
  }

  public void unsetRelateCommodityIds() {
    this.relateCommodityIds = null;
  }

  /** Returns true if field relateCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateCommodityIds() {
    return this.relateCommodityIds != null;
  }

  public void setRelateCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.relateCommodityIds = null;
    }
  }

  public String getTradeCurrency() {
    return this.tradeCurrency;
  }

  public SledCommodity setTradeCurrency(String tradeCurrency) {
    this.tradeCurrency = tradeCurrency;
    return this;
  }

  public void unsetTradeCurrency() {
    this.tradeCurrency = null;
  }

  /** Returns true if field tradeCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeCurrency() {
    return this.tradeCurrency != null;
  }

  public void setTradeCurrencyIsSet(boolean value) {
    if (!value) {
      this.tradeCurrency = null;
    }
  }

  public String getZoneId() {
    return this.zoneId;
  }

  public SledCommodity setZoneId(String zoneId) {
    this.zoneId = zoneId;
    return this;
  }

  public void unsetZoneId() {
    this.zoneId = null;
  }

  /** Returns true if field zoneId is set (has been assigned a value) and false otherwise */
  public boolean isSetZoneId() {
    return this.zoneId != null;
  }

  public void setZoneIdIsSet(boolean value) {
    if (!value) {
      this.zoneId = null;
    }
  }

  public double getContractSize() {
    return this.contractSize;
  }

  public SledCommodity setContractSize(double contractSize) {
    this.contractSize = contractSize;
    setContractSizeIsSet(true);
    return this;
  }

  public void unsetContractSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  /** Returns true if field contractSize is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  public void setContractSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID, value);
  }

  public double getTickSize() {
    return this.tickSize;
  }

  public SledCommodity setTickSize(double tickSize) {
    this.tickSize = tickSize;
    setTickSizeIsSet(true);
    return this;
  }

  public void unsetTickSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  /** Returns true if field tickSize is set (has been assigned a value) and false otherwise */
  public boolean isSetTickSize() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKSIZE_ISSET_ID);
  }

  public void setTickSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKSIZE_ISSET_ID, value);
  }

  public int getDenominator() {
    return this.denominator;
  }

  public SledCommodity setDenominator(int denominator) {
    this.denominator = denominator;
    setDenominatorIsSet(true);
    return this;
  }

  public void unsetDenominator() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  /** Returns true if field denominator is set (has been assigned a value) and false otherwise */
  public boolean isSetDenominator() {
    return EncodingUtils.testBit(__isset_bitfield, __DENOMINATOR_ISSET_ID);
  }

  public void setDenominatorIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DENOMINATOR_ISSET_ID, value);
  }

  /**
   * 
   * @see CmbDirect
   */
  public CmbDirect getCmbDirect() {
    return this.cmbDirect;
  }

  /**
   * 
   * @see CmbDirect
   */
  public SledCommodity setCmbDirect(CmbDirect cmbDirect) {
    this.cmbDirect = cmbDirect;
    return this;
  }

  public void unsetCmbDirect() {
    this.cmbDirect = null;
  }

  /** Returns true if field cmbDirect is set (has been assigned a value) and false otherwise */
  public boolean isSetCmbDirect() {
    return this.cmbDirect != null;
  }

  public void setCmbDirectIsSet(boolean value) {
    if (!value) {
      this.cmbDirect = null;
    }
  }

  /**
   * 
   * @see CommodityState
   */
  public CommodityState getCommodityState() {
    return this.commodityState;
  }

  /**
   * 
   * @see CommodityState
   */
  public SledCommodity setCommodityState(CommodityState commodityState) {
    this.commodityState = commodityState;
    return this;
  }

  public void unsetCommodityState() {
    this.commodityState = null;
  }

  /** Returns true if field commodityState is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityState() {
    return this.commodityState != null;
  }

  public void setCommodityStateIsSet(boolean value) {
    if (!value) {
      this.commodityState = null;
    }
  }

  public int getSledCommodityConfigSize() {
    return (this.sledCommodityConfig == null) ? 0 : this.sledCommodityConfig.size();
  }

  public java.util.Iterator<SledCommodityConfig> getSledCommodityConfigIterator() {
    return (this.sledCommodityConfig == null) ? null : this.sledCommodityConfig.iterator();
  }

  public void addToSledCommodityConfig(SledCommodityConfig elem) {
    if (this.sledCommodityConfig == null) {
      this.sledCommodityConfig = new ArrayList<SledCommodityConfig>();
    }
    this.sledCommodityConfig.add(elem);
  }

  public List<SledCommodityConfig> getSledCommodityConfig() {
    return this.sledCommodityConfig;
  }

  public SledCommodity setSledCommodityConfig(List<SledCommodityConfig> sledCommodityConfig) {
    this.sledCommodityConfig = sledCommodityConfig;
    return this;
  }

  public void unsetSledCommodityConfig() {
    this.sledCommodityConfig = null;
  }

  /** Returns true if field sledCommodityConfig is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityConfig() {
    return this.sledCommodityConfig != null;
  }

  public void setSledCommodityConfigIsSet(boolean value) {
    if (!value) {
      this.sledCommodityConfig = null;
    }
  }

  public String getEngName() {
    return this.engName;
  }

  public SledCommodity setEngName(String engName) {
    this.engName = engName;
    return this;
  }

  public void unsetEngName() {
    this.engName = null;
  }

  /** Returns true if field engName is set (has been assigned a value) and false otherwise */
  public boolean isSetEngName() {
    return this.engName != null;
  }

  public void setEngNameIsSet(boolean value) {
    if (!value) {
      this.engName = null;
    }
  }

  public String getCnName() {
    return this.cnName;
  }

  public SledCommodity setCnName(String cnName) {
    this.cnName = cnName;
    return this;
  }

  public void unsetCnName() {
    this.cnName = null;
  }

  /** Returns true if field cnName is set (has been assigned a value) and false otherwise */
  public boolean isSetCnName() {
    return this.cnName != null;
  }

  public void setCnNameIsSet(boolean value) {
    if (!value) {
      this.cnName = null;
    }
  }

  public String getTcName() {
    return this.tcName;
  }

  public SledCommodity setTcName(String tcName) {
    this.tcName = tcName;
    return this;
  }

  public void unsetTcName() {
    this.tcName = null;
  }

  /** Returns true if field tcName is set (has been assigned a value) and false otherwise */
  public boolean isSetTcName() {
    return this.tcName != null;
  }

  public void setTcNameIsSet(boolean value) {
    if (!value) {
      this.tcName = null;
    }
  }

  public boolean isIsAlsoSupportSim() {
    return this.isAlsoSupportSim;
  }

  public SledCommodity setIsAlsoSupportSim(boolean isAlsoSupportSim) {
    this.isAlsoSupportSim = isAlsoSupportSim;
    setIsAlsoSupportSimIsSet(true);
    return this;
  }

  public void unsetIsAlsoSupportSim() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISALSOSUPPORTSIM_ISSET_ID);
  }

  /** Returns true if field isAlsoSupportSim is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAlsoSupportSim() {
    return EncodingUtils.testBit(__isset_bitfield, __ISALSOSUPPORTSIM_ISSET_ID);
  }

  public void setIsAlsoSupportSimIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISALSOSUPPORTSIM_ISSET_ID, value);
  }

  public long getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public SledCommodity setActiveStartTimestamp(long activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getActiveEndTimestamp() {
    return this.activeEndTimestamp;
  }

  public SledCommodity setActiveEndTimestamp(long activeEndTimestamp) {
    this.activeEndTimestamp = activeEndTimestamp;
    setActiveEndTimestampIsSet(true);
    return this;
  }

  public void unsetActiveEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  public void setActiveEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledCommodity setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public SledCommodity setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((SledCommodityType)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case RELATE_COMMODITY_IDS:
      if (value == null) {
        unsetRelateCommodityIds();
      } else {
        setRelateCommodityIds((List<Integer>)value);
      }
      break;

    case TRADE_CURRENCY:
      if (value == null) {
        unsetTradeCurrency();
      } else {
        setTradeCurrency((String)value);
      }
      break;

    case ZONE_ID:
      if (value == null) {
        unsetZoneId();
      } else {
        setZoneId((String)value);
      }
      break;

    case CONTRACT_SIZE:
      if (value == null) {
        unsetContractSize();
      } else {
        setContractSize((Double)value);
      }
      break;

    case TICK_SIZE:
      if (value == null) {
        unsetTickSize();
      } else {
        setTickSize((Double)value);
      }
      break;

    case DENOMINATOR:
      if (value == null) {
        unsetDenominator();
      } else {
        setDenominator((Integer)value);
      }
      break;

    case CMB_DIRECT:
      if (value == null) {
        unsetCmbDirect();
      } else {
        setCmbDirect((CmbDirect)value);
      }
      break;

    case COMMODITY_STATE:
      if (value == null) {
        unsetCommodityState();
      } else {
        setCommodityState((CommodityState)value);
      }
      break;

    case SLED_COMMODITY_CONFIG:
      if (value == null) {
        unsetSledCommodityConfig();
      } else {
        setSledCommodityConfig((List<SledCommodityConfig>)value);
      }
      break;

    case ENG_NAME:
      if (value == null) {
        unsetEngName();
      } else {
        setEngName((String)value);
      }
      break;

    case CN_NAME:
      if (value == null) {
        unsetCnName();
      } else {
        setCnName((String)value);
      }
      break;

    case TC_NAME:
      if (value == null) {
        unsetTcName();
      } else {
        setTcName((String)value);
      }
      break;

    case IS_ALSO_SUPPORT_SIM:
      if (value == null) {
        unsetIsAlsoSupportSim();
      } else {
        setIsAlsoSupportSim((Boolean)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Long)value);
      }
      break;

    case ACTIVE_END_TIMESTAMP:
      if (value == null) {
        unsetActiveEndTimestamp();
      } else {
        setActiveEndTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case EXCHANGE_MIC:
      return getExchangeMic();

    case SLED_COMMODITY_TYPE:
      return getSledCommodityType();

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case RELATE_COMMODITY_IDS:
      return getRelateCommodityIds();

    case TRADE_CURRENCY:
      return getTradeCurrency();

    case ZONE_ID:
      return getZoneId();

    case CONTRACT_SIZE:
      return Double.valueOf(getContractSize());

    case TICK_SIZE:
      return Double.valueOf(getTickSize());

    case DENOMINATOR:
      return Integer.valueOf(getDenominator());

    case CMB_DIRECT:
      return getCmbDirect();

    case COMMODITY_STATE:
      return getCommodityState();

    case SLED_COMMODITY_CONFIG:
      return getSledCommodityConfig();

    case ENG_NAME:
      return getEngName();

    case CN_NAME:
      return getCnName();

    case TC_NAME:
      return getTcName();

    case IS_ALSO_SUPPORT_SIM:
      return Boolean.valueOf(isIsAlsoSupportSim());

    case ACTIVE_START_TIMESTAMP:
      return Long.valueOf(getActiveStartTimestamp());

    case ACTIVE_END_TIMESTAMP:
      return Long.valueOf(getActiveEndTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case RELATE_COMMODITY_IDS:
      return isSetRelateCommodityIds();
    case TRADE_CURRENCY:
      return isSetTradeCurrency();
    case ZONE_ID:
      return isSetZoneId();
    case CONTRACT_SIZE:
      return isSetContractSize();
    case TICK_SIZE:
      return isSetTickSize();
    case DENOMINATOR:
      return isSetDenominator();
    case CMB_DIRECT:
      return isSetCmbDirect();
    case COMMODITY_STATE:
      return isSetCommodityState();
    case SLED_COMMODITY_CONFIG:
      return isSetSledCommodityConfig();
    case ENG_NAME:
      return isSetEngName();
    case CN_NAME:
      return isSetCnName();
    case TC_NAME:
      return isSetTcName();
    case IS_ALSO_SUPPORT_SIM:
      return isSetIsAlsoSupportSim();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVE_END_TIMESTAMP:
      return isSetActiveEndTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledCommodity)
      return this.equals((SledCommodity)that);
    return false;
  }

  public boolean equals(SledCommodity that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (!this.sledCommodityType.equals(that.sledCommodityType))
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_relateCommodityIds = true && this.isSetRelateCommodityIds();
    boolean that_present_relateCommodityIds = true && that.isSetRelateCommodityIds();
    if (this_present_relateCommodityIds || that_present_relateCommodityIds) {
      if (!(this_present_relateCommodityIds && that_present_relateCommodityIds))
        return false;
      if (!this.relateCommodityIds.equals(that.relateCommodityIds))
        return false;
    }

    boolean this_present_tradeCurrency = true && this.isSetTradeCurrency();
    boolean that_present_tradeCurrency = true && that.isSetTradeCurrency();
    if (this_present_tradeCurrency || that_present_tradeCurrency) {
      if (!(this_present_tradeCurrency && that_present_tradeCurrency))
        return false;
      if (!this.tradeCurrency.equals(that.tradeCurrency))
        return false;
    }

    boolean this_present_zoneId = true && this.isSetZoneId();
    boolean that_present_zoneId = true && that.isSetZoneId();
    if (this_present_zoneId || that_present_zoneId) {
      if (!(this_present_zoneId && that_present_zoneId))
        return false;
      if (!this.zoneId.equals(that.zoneId))
        return false;
    }

    boolean this_present_contractSize = true && this.isSetContractSize();
    boolean that_present_contractSize = true && that.isSetContractSize();
    if (this_present_contractSize || that_present_contractSize) {
      if (!(this_present_contractSize && that_present_contractSize))
        return false;
      if (this.contractSize != that.contractSize)
        return false;
    }

    boolean this_present_tickSize = true && this.isSetTickSize();
    boolean that_present_tickSize = true && that.isSetTickSize();
    if (this_present_tickSize || that_present_tickSize) {
      if (!(this_present_tickSize && that_present_tickSize))
        return false;
      if (this.tickSize != that.tickSize)
        return false;
    }

    boolean this_present_denominator = true && this.isSetDenominator();
    boolean that_present_denominator = true && that.isSetDenominator();
    if (this_present_denominator || that_present_denominator) {
      if (!(this_present_denominator && that_present_denominator))
        return false;
      if (this.denominator != that.denominator)
        return false;
    }

    boolean this_present_cmbDirect = true && this.isSetCmbDirect();
    boolean that_present_cmbDirect = true && that.isSetCmbDirect();
    if (this_present_cmbDirect || that_present_cmbDirect) {
      if (!(this_present_cmbDirect && that_present_cmbDirect))
        return false;
      if (!this.cmbDirect.equals(that.cmbDirect))
        return false;
    }

    boolean this_present_commodityState = true && this.isSetCommodityState();
    boolean that_present_commodityState = true && that.isSetCommodityState();
    if (this_present_commodityState || that_present_commodityState) {
      if (!(this_present_commodityState && that_present_commodityState))
        return false;
      if (!this.commodityState.equals(that.commodityState))
        return false;
    }

    boolean this_present_sledCommodityConfig = true && this.isSetSledCommodityConfig();
    boolean that_present_sledCommodityConfig = true && that.isSetSledCommodityConfig();
    if (this_present_sledCommodityConfig || that_present_sledCommodityConfig) {
      if (!(this_present_sledCommodityConfig && that_present_sledCommodityConfig))
        return false;
      if (!this.sledCommodityConfig.equals(that.sledCommodityConfig))
        return false;
    }

    boolean this_present_engName = true && this.isSetEngName();
    boolean that_present_engName = true && that.isSetEngName();
    if (this_present_engName || that_present_engName) {
      if (!(this_present_engName && that_present_engName))
        return false;
      if (!this.engName.equals(that.engName))
        return false;
    }

    boolean this_present_cnName = true && this.isSetCnName();
    boolean that_present_cnName = true && that.isSetCnName();
    if (this_present_cnName || that_present_cnName) {
      if (!(this_present_cnName && that_present_cnName))
        return false;
      if (!this.cnName.equals(that.cnName))
        return false;
    }

    boolean this_present_tcName = true && this.isSetTcName();
    boolean that_present_tcName = true && that.isSetTcName();
    if (this_present_tcName || that_present_tcName) {
      if (!(this_present_tcName && that_present_tcName))
        return false;
      if (!this.tcName.equals(that.tcName))
        return false;
    }

    boolean this_present_isAlsoSupportSim = true && this.isSetIsAlsoSupportSim();
    boolean that_present_isAlsoSupportSim = true && that.isSetIsAlsoSupportSim();
    if (this_present_isAlsoSupportSim || that_present_isAlsoSupportSim) {
      if (!(this_present_isAlsoSupportSim && that_present_isAlsoSupportSim))
        return false;
      if (this.isAlsoSupportSim != that.isAlsoSupportSim)
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activeEndTimestamp = true && this.isSetActiveEndTimestamp();
    boolean that_present_activeEndTimestamp = true && that.isSetActiveEndTimestamp();
    if (this_present_activeEndTimestamp || that_present_activeEndTimestamp) {
      if (!(this_present_activeEndTimestamp && that_present_activeEndTimestamp))
        return false;
      if (this.activeEndTimestamp != that.activeEndTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledCommodity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateCommodityIds()).compareTo(other.isSetRelateCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateCommodityIds, other.relateCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeCurrency()).compareTo(other.isSetTradeCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeCurrency, other.tradeCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZoneId()).compareTo(other.isSetZoneId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZoneId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zoneId, other.zoneId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSize()).compareTo(other.isSetContractSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSize, other.contractSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTickSize()).compareTo(other.isSetTickSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTickSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tickSize, other.tickSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDenominator()).compareTo(other.isSetDenominator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDenominator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.denominator, other.denominator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmbDirect()).compareTo(other.isSetCmbDirect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmbDirect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmbDirect, other.cmbDirect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityState()).compareTo(other.isSetCommodityState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityState, other.commodityState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityConfig()).compareTo(other.isSetSledCommodityConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityConfig, other.sledCommodityConfig);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEngName()).compareTo(other.isSetEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.engName, other.engName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCnName()).compareTo(other.isSetCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cnName, other.cnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTcName()).compareTo(other.isSetTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tcName, other.tcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsAlsoSupportSim()).compareTo(other.isSetIsAlsoSupportSim());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAlsoSupportSim()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAlsoSupportSim, other.isAlsoSupportSim);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveEndTimestamp()).compareTo(other.isSetActiveEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEndTimestamp, other.activeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledCommodity(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      if (this.sledCommodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityType);
      }
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetRelateCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("relateCommodityIds:");
      if (this.relateCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.relateCommodityIds);
      }
      first = false;
    }
    if (isSetTradeCurrency()) {
      if (!first) sb.append(", ");
      sb.append("tradeCurrency:");
      if (this.tradeCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeCurrency);
      }
      first = false;
    }
    if (isSetZoneId()) {
      if (!first) sb.append(", ");
      sb.append("zoneId:");
      if (this.zoneId == null) {
        sb.append("null");
      } else {
        sb.append(this.zoneId);
      }
      first = false;
    }
    if (isSetContractSize()) {
      if (!first) sb.append(", ");
      sb.append("contractSize:");
      sb.append(this.contractSize);
      first = false;
    }
    if (isSetTickSize()) {
      if (!first) sb.append(", ");
      sb.append("tickSize:");
      sb.append(this.tickSize);
      first = false;
    }
    if (isSetDenominator()) {
      if (!first) sb.append(", ");
      sb.append("denominator:");
      sb.append(this.denominator);
      first = false;
    }
    if (isSetCmbDirect()) {
      if (!first) sb.append(", ");
      sb.append("cmbDirect:");
      if (this.cmbDirect == null) {
        sb.append("null");
      } else {
        sb.append(this.cmbDirect);
      }
      first = false;
    }
    if (isSetCommodityState()) {
      if (!first) sb.append(", ");
      sb.append("commodityState:");
      if (this.commodityState == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityState);
      }
      first = false;
    }
    if (isSetSledCommodityConfig()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityConfig:");
      if (this.sledCommodityConfig == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityConfig);
      }
      first = false;
    }
    if (isSetEngName()) {
      if (!first) sb.append(", ");
      sb.append("engName:");
      if (this.engName == null) {
        sb.append("null");
      } else {
        sb.append(this.engName);
      }
      first = false;
    }
    if (isSetCnName()) {
      if (!first) sb.append(", ");
      sb.append("cnName:");
      if (this.cnName == null) {
        sb.append("null");
      } else {
        sb.append(this.cnName);
      }
      first = false;
    }
    if (isSetTcName()) {
      if (!first) sb.append(", ");
      sb.append("tcName:");
      if (this.tcName == null) {
        sb.append("null");
      } else {
        sb.append(this.tcName);
      }
      first = false;
    }
    if (isSetIsAlsoSupportSim()) {
      if (!first) sb.append(", ");
      sb.append("isAlsoSupportSim:");
      sb.append(this.isAlsoSupportSim);
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActiveEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeEndTimestamp:");
      sb.append(this.activeEndTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledCommodityStandardSchemeFactory implements SchemeFactory {
    public SledCommodityStandardScheme getScheme() {
      return new SledCommodityStandardScheme();
    }
  }

  private static class SledCommodityStandardScheme extends StandardScheme<SledCommodity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledCommodity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityType = SledCommodityType.findByValue(iprot.readI32());
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RELATE_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.relateCommodityIds = new ArrayList<Integer>(_list16.size);
                for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                {
                  int _elem18;
                  _elem18 = iprot.readI32();
                  struct.relateCommodityIds.add(_elem18);
                }
                iprot.readListEnd();
              }
              struct.setRelateCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tradeCurrency = iprot.readString();
              struct.setTradeCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ZONE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.zoneId = iprot.readString();
              struct.setZoneIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTRACT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractSize = iprot.readDouble();
              struct.setContractSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICK_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tickSize = iprot.readDouble();
              struct.setTickSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DENOMINATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.denominator = iprot.readI32();
              struct.setDenominatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CMB_DIRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmbDirect = CmbDirect.findByValue(iprot.readI32());
              struct.setCmbDirectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // COMMODITY_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commodityState = CommodityState.findByValue(iprot.readI32());
              struct.setCommodityStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // SLED_COMMODITY_CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.sledCommodityConfig = new ArrayList<SledCommodityConfig>(_list19.size);
                for (int _i20 = 0; _i20 < _list19.size; ++_i20)
                {
                  SledCommodityConfig _elem21;
                  _elem21 = new SledCommodityConfig();
                  _elem21.read(iprot);
                  struct.sledCommodityConfig.add(_elem21);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.engName = iprot.readString();
              struct.setEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cnName = iprot.readString();
              struct.setCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tcName = iprot.readString();
              struct.setTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // IS_ALSO_SUPPORT_SIM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAlsoSupportSim = iprot.readBool();
              struct.setIsAlsoSupportSimIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeStartTimestamp = iprot.readI64();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ACTIVE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeEndTimestamp = iprot.readI64();
              struct.setActiveEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledCommodity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityType != null) {
        if (struct.isSetSledCommodityType()) {
          oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
          oprot.writeI32(struct.sledCommodityType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relateCommodityIds != null) {
        if (struct.isSetRelateCommodityIds()) {
          oprot.writeFieldBegin(RELATE_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.relateCommodityIds.size()));
            for (int _iter22 : struct.relateCommodityIds)
            {
              oprot.writeI32(_iter22);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeCurrency != null) {
        if (struct.isSetTradeCurrency()) {
          oprot.writeFieldBegin(TRADE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.tradeCurrency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.zoneId != null) {
        if (struct.isSetZoneId()) {
          oprot.writeFieldBegin(ZONE_ID_FIELD_DESC);
          oprot.writeString(struct.zoneId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractSize()) {
        oprot.writeFieldBegin(CONTRACT_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.contractSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTickSize()) {
        oprot.writeFieldBegin(TICK_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.tickSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDenominator()) {
        oprot.writeFieldBegin(DENOMINATOR_FIELD_DESC);
        oprot.writeI32(struct.denominator);
        oprot.writeFieldEnd();
      }
      if (struct.cmbDirect != null) {
        if (struct.isSetCmbDirect()) {
          oprot.writeFieldBegin(CMB_DIRECT_FIELD_DESC);
          oprot.writeI32(struct.cmbDirect.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityState != null) {
        if (struct.isSetCommodityState()) {
          oprot.writeFieldBegin(COMMODITY_STATE_FIELD_DESC);
          oprot.writeI32(struct.commodityState.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledCommodityConfig != null) {
        if (struct.isSetSledCommodityConfig()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CONFIG_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sledCommodityConfig.size()));
            for (SledCommodityConfig _iter23 : struct.sledCommodityConfig)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.engName != null) {
        if (struct.isSetEngName()) {
          oprot.writeFieldBegin(ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.engName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cnName != null) {
        if (struct.isSetCnName()) {
          oprot.writeFieldBegin(CN_NAME_FIELD_DESC);
          oprot.writeString(struct.cnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tcName != null) {
        if (struct.isSetTcName()) {
          oprot.writeFieldBegin(TC_NAME_FIELD_DESC);
          oprot.writeString(struct.tcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetIsAlsoSupportSim()) {
        oprot.writeFieldBegin(IS_ALSO_SUPPORT_SIM_FIELD_DESC);
        oprot.writeBool(struct.isAlsoSupportSim);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledCommodityTupleSchemeFactory implements SchemeFactory {
    public SledCommodityTupleScheme getScheme() {
      return new SledCommodityTupleScheme();
    }
  }

  private static class SledCommodityTupleScheme extends TupleScheme<SledCommodity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(3);
      }
      if (struct.isSetRelateCommodityIds()) {
        optionals.set(4);
      }
      if (struct.isSetTradeCurrency()) {
        optionals.set(5);
      }
      if (struct.isSetZoneId()) {
        optionals.set(6);
      }
      if (struct.isSetContractSize()) {
        optionals.set(7);
      }
      if (struct.isSetTickSize()) {
        optionals.set(8);
      }
      if (struct.isSetDenominator()) {
        optionals.set(9);
      }
      if (struct.isSetCmbDirect()) {
        optionals.set(10);
      }
      if (struct.isSetCommodityState()) {
        optionals.set(11);
      }
      if (struct.isSetSledCommodityConfig()) {
        optionals.set(12);
      }
      if (struct.isSetEngName()) {
        optionals.set(13);
      }
      if (struct.isSetCnName()) {
        optionals.set(14);
      }
      if (struct.isSetTcName()) {
        optionals.set(15);
      }
      if (struct.isSetIsAlsoSupportSim()) {
        optionals.set(16);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(17);
      }
      if (struct.isSetActiveEndTimestamp()) {
        optionals.set(18);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(19);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(20);
      }
      oprot.writeBitSet(optionals, 21);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI32(struct.sledCommodityType.getValue());
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetRelateCommodityIds()) {
        {
          oprot.writeI32(struct.relateCommodityIds.size());
          for (int _iter24 : struct.relateCommodityIds)
          {
            oprot.writeI32(_iter24);
          }
        }
      }
      if (struct.isSetTradeCurrency()) {
        oprot.writeString(struct.tradeCurrency);
      }
      if (struct.isSetZoneId()) {
        oprot.writeString(struct.zoneId);
      }
      if (struct.isSetContractSize()) {
        oprot.writeDouble(struct.contractSize);
      }
      if (struct.isSetTickSize()) {
        oprot.writeDouble(struct.tickSize);
      }
      if (struct.isSetDenominator()) {
        oprot.writeI32(struct.denominator);
      }
      if (struct.isSetCmbDirect()) {
        oprot.writeI32(struct.cmbDirect.getValue());
      }
      if (struct.isSetCommodityState()) {
        oprot.writeI32(struct.commodityState.getValue());
      }
      if (struct.isSetSledCommodityConfig()) {
        {
          oprot.writeI32(struct.sledCommodityConfig.size());
          for (SledCommodityConfig _iter25 : struct.sledCommodityConfig)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetEngName()) {
        oprot.writeString(struct.engName);
      }
      if (struct.isSetCnName()) {
        oprot.writeString(struct.cnName);
      }
      if (struct.isSetTcName()) {
        oprot.writeString(struct.tcName);
      }
      if (struct.isSetIsAlsoSupportSim()) {
        oprot.writeBool(struct.isAlsoSupportSim);
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI64(struct.activeStartTimestamp);
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeI64(struct.activeEndTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledCommodity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(21);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityType = SledCommodityType.findByValue(iprot.readI32());
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.relateCommodityIds = new ArrayList<Integer>(_list26.size);
          for (int _i27 = 0; _i27 < _list26.size; ++_i27)
          {
            int _elem28;
            _elem28 = iprot.readI32();
            struct.relateCommodityIds.add(_elem28);
          }
        }
        struct.setRelateCommodityIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeCurrency = iprot.readString();
        struct.setTradeCurrencyIsSet(true);
      }
      if (incoming.get(6)) {
        struct.zoneId = iprot.readString();
        struct.setZoneIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contractSize = iprot.readDouble();
        struct.setContractSizeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tickSize = iprot.readDouble();
        struct.setTickSizeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.denominator = iprot.readI32();
        struct.setDenominatorIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cmbDirect = CmbDirect.findByValue(iprot.readI32());
        struct.setCmbDirectIsSet(true);
      }
      if (incoming.get(11)) {
        struct.commodityState = CommodityState.findByValue(iprot.readI32());
        struct.setCommodityStateIsSet(true);
      }
      if (incoming.get(12)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sledCommodityConfig = new ArrayList<SledCommodityConfig>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            SledCommodityConfig _elem31;
            _elem31 = new SledCommodityConfig();
            _elem31.read(iprot);
            struct.sledCommodityConfig.add(_elem31);
          }
        }
        struct.setSledCommodityConfigIsSet(true);
      }
      if (incoming.get(13)) {
        struct.engName = iprot.readString();
        struct.setEngNameIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cnName = iprot.readString();
        struct.setCnNameIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tcName = iprot.readString();
        struct.setTcNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isAlsoSupportSim = iprot.readBool();
        struct.setIsAlsoSupportSimIsSet(true);
      }
      if (incoming.get(17)) {
        struct.activeStartTimestamp = iprot.readI64();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(18)) {
        struct.activeEndTimestamp = iprot.readI64();
        struct.setActiveEndTimestampIsSet(true);
      }
      if (incoming.get(19)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(20)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

