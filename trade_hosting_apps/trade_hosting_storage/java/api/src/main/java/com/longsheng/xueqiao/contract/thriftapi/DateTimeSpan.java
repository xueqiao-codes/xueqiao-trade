/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DateTimeSpan implements org.apache.thrift.TBase<DateTimeSpan, DateTimeSpan._Fields>, java.io.Serializable, Cloneable, Comparable<DateTimeSpan> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DateTimeSpan");

  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField T_TIME_SPAN_FIELD_DESC = new org.apache.thrift.protocol.TField("tTimeSpan", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DateTimeSpanStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DateTimeSpanTupleSchemeFactory());
  }

  public String date; // optional
  public List<TTimeSpan> tTimeSpan; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE((short)2, "date"),
    T_TIME_SPAN((short)3, "tTimeSpan");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // DATE
          return DATE;
        case 3: // T_TIME_SPAN
          return T_TIME_SPAN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.DATE,_Fields.T_TIME_SPAN};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.T_TIME_SPAN, new org.apache.thrift.meta_data.FieldMetaData("tTimeSpan", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTimeSpan.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DateTimeSpan.class, metaDataMap);
  }

  public DateTimeSpan() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DateTimeSpan(DateTimeSpan other) {
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetTTimeSpan()) {
      List<TTimeSpan> __this__tTimeSpan = new ArrayList<TTimeSpan>(other.tTimeSpan.size());
      for (TTimeSpan other_element : other.tTimeSpan) {
        __this__tTimeSpan.add(new TTimeSpan(other_element));
      }
      this.tTimeSpan = __this__tTimeSpan;
    }
  }

  public DateTimeSpan deepCopy() {
    return new DateTimeSpan(this);
  }

  @Override
  public void clear() {
    this.date = null;
    this.tTimeSpan = null;
  }

  public String getDate() {
    return this.date;
  }

  public DateTimeSpan setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public int getTTimeSpanSize() {
    return (this.tTimeSpan == null) ? 0 : this.tTimeSpan.size();
  }

  public java.util.Iterator<TTimeSpan> getTTimeSpanIterator() {
    return (this.tTimeSpan == null) ? null : this.tTimeSpan.iterator();
  }

  public void addToTTimeSpan(TTimeSpan elem) {
    if (this.tTimeSpan == null) {
      this.tTimeSpan = new ArrayList<TTimeSpan>();
    }
    this.tTimeSpan.add(elem);
  }

  public List<TTimeSpan> getTTimeSpan() {
    return this.tTimeSpan;
  }

  public DateTimeSpan setTTimeSpan(List<TTimeSpan> tTimeSpan) {
    this.tTimeSpan = tTimeSpan;
    return this;
  }

  public void unsetTTimeSpan() {
    this.tTimeSpan = null;
  }

  /** Returns true if field tTimeSpan is set (has been assigned a value) and false otherwise */
  public boolean isSetTTimeSpan() {
    return this.tTimeSpan != null;
  }

  public void setTTimeSpanIsSet(boolean value) {
    if (!value) {
      this.tTimeSpan = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case T_TIME_SPAN:
      if (value == null) {
        unsetTTimeSpan();
      } else {
        setTTimeSpan((List<TTimeSpan>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE:
      return getDate();

    case T_TIME_SPAN:
      return getTTimeSpan();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE:
      return isSetDate();
    case T_TIME_SPAN:
      return isSetTTimeSpan();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DateTimeSpan)
      return this.equals((DateTimeSpan)that);
    return false;
  }

  public boolean equals(DateTimeSpan that) {
    if (that == null)
      return false;

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_tTimeSpan = true && this.isSetTTimeSpan();
    boolean that_present_tTimeSpan = true && that.isSetTTimeSpan();
    if (this_present_tTimeSpan || that_present_tTimeSpan) {
      if (!(this_present_tTimeSpan && that_present_tTimeSpan))
        return false;
      if (!this.tTimeSpan.equals(that.tTimeSpan))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(DateTimeSpan other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTTimeSpan()).compareTo(other.isSetTTimeSpan());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTTimeSpan()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tTimeSpan, other.tTimeSpan);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DateTimeSpan(");
    boolean first = true;

    if (isSetDate()) {
      sb.append("date:");
      if (this.date == null) {
        sb.append("null");
      } else {
        sb.append(this.date);
      }
      first = false;
    }
    if (isSetTTimeSpan()) {
      if (!first) sb.append(", ");
      sb.append("tTimeSpan:");
      if (this.tTimeSpan == null) {
        sb.append("null");
      } else {
        sb.append(this.tTimeSpan);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DateTimeSpanStandardSchemeFactory implements SchemeFactory {
    public DateTimeSpanStandardScheme getScheme() {
      return new DateTimeSpanStandardScheme();
    }
  }

  private static class DateTimeSpanStandardScheme extends StandardScheme<DateTimeSpan> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DateTimeSpan struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // T_TIME_SPAN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list216 = iprot.readListBegin();
                struct.tTimeSpan = new ArrayList<TTimeSpan>(_list216.size);
                for (int _i217 = 0; _i217 < _list216.size; ++_i217)
                {
                  TTimeSpan _elem218;
                  _elem218 = new TTimeSpan();
                  _elem218.read(iprot);
                  struct.tTimeSpan.add(_elem218);
                }
                iprot.readListEnd();
              }
              struct.setTTimeSpanIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DateTimeSpan struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.date != null) {
        if (struct.isSetDate()) {
          oprot.writeFieldBegin(DATE_FIELD_DESC);
          oprot.writeString(struct.date);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tTimeSpan != null) {
        if (struct.isSetTTimeSpan()) {
          oprot.writeFieldBegin(T_TIME_SPAN_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.tTimeSpan.size()));
            for (TTimeSpan _iter219 : struct.tTimeSpan)
            {
              _iter219.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DateTimeSpanTupleSchemeFactory implements SchemeFactory {
    public DateTimeSpanTupleScheme getScheme() {
      return new DateTimeSpanTupleScheme();
    }
  }

  private static class DateTimeSpanTupleScheme extends TupleScheme<DateTimeSpan> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DateTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDate()) {
        optionals.set(0);
      }
      if (struct.isSetTTimeSpan()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetTTimeSpan()) {
        {
          oprot.writeI32(struct.tTimeSpan.size());
          for (TTimeSpan _iter220 : struct.tTimeSpan)
          {
            _iter220.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DateTimeSpan struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.tTimeSpan = new ArrayList<TTimeSpan>(_list221.size);
          for (int _i222 = 0; _i222 < _list221.size; ++_i222)
          {
            TTimeSpan _elem223;
            _elem223 = new TTimeSpan();
            _elem223.read(iprot);
            struct.tTimeSpan.add(_elem223);
          }
        }
        struct.setTTimeSpanIsSet(true);
      }
    }
  }

}

