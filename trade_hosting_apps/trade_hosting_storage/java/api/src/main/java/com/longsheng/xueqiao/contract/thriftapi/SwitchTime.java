/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SwitchTime implements org.apache.thrift.TBase<SwitchTime, SwitchTime._Fields>, java.io.Serializable, Cloneable, Comparable<SwitchTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SwitchTime");

  private static final org.apache.thrift.protocol.TField MONTH_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("monthIndex", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WEEK_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("weekIndex", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField("day", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SwitchTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SwitchTimeTupleSchemeFactory());
  }

  public int monthIndex; // optional
  public int weekIndex; // optional
  /**
   * 
   * @see Days
   */
  public Days day; // optional
  public String time; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MONTH_INDEX((short)1, "monthIndex"),
    WEEK_INDEX((short)2, "weekIndex"),
    /**
     * 
     * @see Days
     */
    DAY((short)3, "day"),
    TIME((short)4, "time");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MONTH_INDEX
          return MONTH_INDEX;
        case 2: // WEEK_INDEX
          return WEEK_INDEX;
        case 3: // DAY
          return DAY;
        case 4: // TIME
          return TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONTHINDEX_ISSET_ID = 0;
  private static final int __WEEKINDEX_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MONTH_INDEX,_Fields.WEEK_INDEX,_Fields.DAY,_Fields.TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MONTH_INDEX, new org.apache.thrift.meta_data.FieldMetaData("monthIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WEEK_INDEX, new org.apache.thrift.meta_data.FieldMetaData("weekIndex", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DAY, new org.apache.thrift.meta_data.FieldMetaData("day", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Days.class)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SwitchTime.class, metaDataMap);
  }

  public SwitchTime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SwitchTime(SwitchTime other) {
    __isset_bitfield = other.__isset_bitfield;
    this.monthIndex = other.monthIndex;
    this.weekIndex = other.weekIndex;
    if (other.isSetDay()) {
      this.day = other.day;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
  }

  public SwitchTime deepCopy() {
    return new SwitchTime(this);
  }

  @Override
  public void clear() {
    setMonthIndexIsSet(false);
    this.monthIndex = 0;
    setWeekIndexIsSet(false);
    this.weekIndex = 0;
    this.day = null;
    this.time = null;
  }

  public int getMonthIndex() {
    return this.monthIndex;
  }

  public SwitchTime setMonthIndex(int monthIndex) {
    this.monthIndex = monthIndex;
    setMonthIndexIsSet(true);
    return this;
  }

  public void unsetMonthIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTHINDEX_ISSET_ID);
  }

  /** Returns true if field monthIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetMonthIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTHINDEX_ISSET_ID);
  }

  public void setMonthIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTHINDEX_ISSET_ID, value);
  }

  public int getWeekIndex() {
    return this.weekIndex;
  }

  public SwitchTime setWeekIndex(int weekIndex) {
    this.weekIndex = weekIndex;
    setWeekIndexIsSet(true);
    return this;
  }

  public void unsetWeekIndex() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WEEKINDEX_ISSET_ID);
  }

  /** Returns true if field weekIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetWeekIndex() {
    return EncodingUtils.testBit(__isset_bitfield, __WEEKINDEX_ISSET_ID);
  }

  public void setWeekIndexIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WEEKINDEX_ISSET_ID, value);
  }

  /**
   * 
   * @see Days
   */
  public Days getDay() {
    return this.day;
  }

  /**
   * 
   * @see Days
   */
  public SwitchTime setDay(Days day) {
    this.day = day;
    return this;
  }

  public void unsetDay() {
    this.day = null;
  }

  /** Returns true if field day is set (has been assigned a value) and false otherwise */
  public boolean isSetDay() {
    return this.day != null;
  }

  public void setDayIsSet(boolean value) {
    if (!value) {
      this.day = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public SwitchTime setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MONTH_INDEX:
      if (value == null) {
        unsetMonthIndex();
      } else {
        setMonthIndex((Integer)value);
      }
      break;

    case WEEK_INDEX:
      if (value == null) {
        unsetWeekIndex();
      } else {
        setWeekIndex((Integer)value);
      }
      break;

    case DAY:
      if (value == null) {
        unsetDay();
      } else {
        setDay((Days)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MONTH_INDEX:
      return Integer.valueOf(getMonthIndex());

    case WEEK_INDEX:
      return Integer.valueOf(getWeekIndex());

    case DAY:
      return getDay();

    case TIME:
      return getTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MONTH_INDEX:
      return isSetMonthIndex();
    case WEEK_INDEX:
      return isSetWeekIndex();
    case DAY:
      return isSetDay();
    case TIME:
      return isSetTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SwitchTime)
      return this.equals((SwitchTime)that);
    return false;
  }

  public boolean equals(SwitchTime that) {
    if (that == null)
      return false;

    boolean this_present_monthIndex = true && this.isSetMonthIndex();
    boolean that_present_monthIndex = true && that.isSetMonthIndex();
    if (this_present_monthIndex || that_present_monthIndex) {
      if (!(this_present_monthIndex && that_present_monthIndex))
        return false;
      if (this.monthIndex != that.monthIndex)
        return false;
    }

    boolean this_present_weekIndex = true && this.isSetWeekIndex();
    boolean that_present_weekIndex = true && that.isSetWeekIndex();
    if (this_present_weekIndex || that_present_weekIndex) {
      if (!(this_present_weekIndex && that_present_weekIndex))
        return false;
      if (this.weekIndex != that.weekIndex)
        return false;
    }

    boolean this_present_day = true && this.isSetDay();
    boolean that_present_day = true && that.isSetDay();
    if (this_present_day || that_present_day) {
      if (!(this_present_day && that_present_day))
        return false;
      if (!this.day.equals(that.day))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SwitchTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMonthIndex()).compareTo(other.isSetMonthIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonthIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.monthIndex, other.monthIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWeekIndex()).compareTo(other.isSetWeekIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWeekIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.weekIndex, other.weekIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDay()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SwitchTime(");
    boolean first = true;

    if (isSetMonthIndex()) {
      sb.append("monthIndex:");
      sb.append(this.monthIndex);
      first = false;
    }
    if (isSetWeekIndex()) {
      if (!first) sb.append(", ");
      sb.append("weekIndex:");
      sb.append(this.weekIndex);
      first = false;
    }
    if (isSetDay()) {
      if (!first) sb.append(", ");
      sb.append("day:");
      if (this.day == null) {
        sb.append("null");
      } else {
        sb.append(this.day);
      }
      first = false;
    }
    if (isSetTime()) {
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SwitchTimeStandardSchemeFactory implements SchemeFactory {
    public SwitchTimeStandardScheme getScheme() {
      return new SwitchTimeStandardScheme();
    }
  }

  private static class SwitchTimeStandardScheme extends StandardScheme<SwitchTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SwitchTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MONTH_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.monthIndex = iprot.readI32();
              struct.setMonthIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WEEK_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.weekIndex = iprot.readI32();
              struct.setWeekIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DAY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.day = Days.findByValue(iprot.readI32());
              struct.setDayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SwitchTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetMonthIndex()) {
        oprot.writeFieldBegin(MONTH_INDEX_FIELD_DESC);
        oprot.writeI32(struct.monthIndex);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWeekIndex()) {
        oprot.writeFieldBegin(WEEK_INDEX_FIELD_DESC);
        oprot.writeI32(struct.weekIndex);
        oprot.writeFieldEnd();
      }
      if (struct.day != null) {
        if (struct.isSetDay()) {
          oprot.writeFieldBegin(DAY_FIELD_DESC);
          oprot.writeI32(struct.day.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.time != null) {
        if (struct.isSetTime()) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SwitchTimeTupleSchemeFactory implements SchemeFactory {
    public SwitchTimeTupleScheme getScheme() {
      return new SwitchTimeTupleScheme();
    }
  }

  private static class SwitchTimeTupleScheme extends TupleScheme<SwitchTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SwitchTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMonthIndex()) {
        optionals.set(0);
      }
      if (struct.isSetWeekIndex()) {
        optionals.set(1);
      }
      if (struct.isSetDay()) {
        optionals.set(2);
      }
      if (struct.isSetTime()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetMonthIndex()) {
        oprot.writeI32(struct.monthIndex);
      }
      if (struct.isSetWeekIndex()) {
        oprot.writeI32(struct.weekIndex);
      }
      if (struct.isSetDay()) {
        oprot.writeI32(struct.day.getValue());
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SwitchTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.monthIndex = iprot.readI32();
        struct.setMonthIndexIsSet(true);
      }
      if (incoming.get(1)) {
        struct.weekIndex = iprot.readI32();
        struct.setWeekIndexIsSet(true);
      }
      if (incoming.get(2)) {
        struct.day = Days.findByValue(iprot.readI32());
        struct.setDayIsSet(true);
      }
      if (incoming.get(3)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
    }
  }

}

