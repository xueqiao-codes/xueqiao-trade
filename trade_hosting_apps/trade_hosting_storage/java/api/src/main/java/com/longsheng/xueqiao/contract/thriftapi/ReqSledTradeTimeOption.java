/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqSledTradeTimeOption implements org.apache.thrift.TBase<ReqSledTradeTimeOption, ReqSledTradeTimeOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqSledTradeTimeOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqSledTradeTimeOption");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityIds", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField DATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("dateTimestamp", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqSledTradeTimeOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqSledTradeTimeOptionTupleSchemeFactory());
  }

  public List<Integer> sledCommodityIds; // optional
  public long dateTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_IDS((short)1, "sledCommodityIds"),
    DATE_TIMESTAMP((short)2, "dateTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_IDS
          return SLED_COMMODITY_IDS;
        case 2: // DATE_TIMESTAMP
          return DATE_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATETIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_IDS,_Fields.DATE_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.DATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("dateTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqSledTradeTimeOption.class, metaDataMap);
  }

  public ReqSledTradeTimeOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqSledTradeTimeOption(ReqSledTradeTimeOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledCommodityIds()) {
      List<Integer> __this__sledCommodityIds = new ArrayList<Integer>(other.sledCommodityIds);
      this.sledCommodityIds = __this__sledCommodityIds;
    }
    this.dateTimestamp = other.dateTimestamp;
  }

  public ReqSledTradeTimeOption deepCopy() {
    return new ReqSledTradeTimeOption(this);
  }

  @Override
  public void clear() {
    this.sledCommodityIds = null;
    setDateTimestampIsSet(false);
    this.dateTimestamp = 0;
  }

  public int getSledCommodityIdsSize() {
    return (this.sledCommodityIds == null) ? 0 : this.sledCommodityIds.size();
  }

  public java.util.Iterator<Integer> getSledCommodityIdsIterator() {
    return (this.sledCommodityIds == null) ? null : this.sledCommodityIds.iterator();
  }

  public void addToSledCommodityIds(int elem) {
    if (this.sledCommodityIds == null) {
      this.sledCommodityIds = new ArrayList<Integer>();
    }
    this.sledCommodityIds.add(elem);
  }

  public List<Integer> getSledCommodityIds() {
    return this.sledCommodityIds;
  }

  public ReqSledTradeTimeOption setSledCommodityIds(List<Integer> sledCommodityIds) {
    this.sledCommodityIds = sledCommodityIds;
    return this;
  }

  public void unsetSledCommodityIds() {
    this.sledCommodityIds = null;
  }

  /** Returns true if field sledCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityIds() {
    return this.sledCommodityIds != null;
  }

  public void setSledCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.sledCommodityIds = null;
    }
  }

  public long getDateTimestamp() {
    return this.dateTimestamp;
  }

  public ReqSledTradeTimeOption setDateTimestamp(long dateTimestamp) {
    this.dateTimestamp = dateTimestamp;
    setDateTimestampIsSet(true);
    return this;
  }

  public void unsetDateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field dateTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetDateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __DATETIMESTAMP_ISSET_ID);
  }

  public void setDateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATETIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_IDS:
      if (value == null) {
        unsetSledCommodityIds();
      } else {
        setSledCommodityIds((List<Integer>)value);
      }
      break;

    case DATE_TIMESTAMP:
      if (value == null) {
        unsetDateTimestamp();
      } else {
        setDateTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_IDS:
      return getSledCommodityIds();

    case DATE_TIMESTAMP:
      return Long.valueOf(getDateTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_IDS:
      return isSetSledCommodityIds();
    case DATE_TIMESTAMP:
      return isSetDateTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqSledTradeTimeOption)
      return this.equals((ReqSledTradeTimeOption)that);
    return false;
  }

  public boolean equals(ReqSledTradeTimeOption that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityIds = true && this.isSetSledCommodityIds();
    boolean that_present_sledCommodityIds = true && that.isSetSledCommodityIds();
    if (this_present_sledCommodityIds || that_present_sledCommodityIds) {
      if (!(this_present_sledCommodityIds && that_present_sledCommodityIds))
        return false;
      if (!this.sledCommodityIds.equals(that.sledCommodityIds))
        return false;
    }

    boolean this_present_dateTimestamp = true && this.isSetDateTimestamp();
    boolean that_present_dateTimestamp = true && that.isSetDateTimestamp();
    if (this_present_dateTimestamp || that_present_dateTimestamp) {
      if (!(this_present_dateTimestamp && that_present_dateTimestamp))
        return false;
      if (this.dateTimestamp != that.dateTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqSledTradeTimeOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityIds()).compareTo(other.isSetSledCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityIds, other.sledCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateTimestamp()).compareTo(other.isSetDateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateTimestamp, other.dateTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqSledTradeTimeOption(");
    boolean first = true;

    if (isSetSledCommodityIds()) {
      sb.append("sledCommodityIds:");
      if (this.sledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityIds);
      }
      first = false;
    }
    if (isSetDateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("dateTimestamp:");
      sb.append(this.dateTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqSledTradeTimeOptionStandardSchemeFactory implements SchemeFactory {
    public ReqSledTradeTimeOptionStandardScheme getScheme() {
      return new ReqSledTradeTimeOptionStandardScheme();
    }
  }

  private static class ReqSledTradeTimeOptionStandardScheme extends StandardScheme<ReqSledTradeTimeOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqSledTradeTimeOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                struct.sledCommodityIds = new ArrayList<Integer>(_list248.size);
                for (int _i249 = 0; _i249 < _list248.size; ++_i249)
                {
                  int _elem250;
                  _elem250 = iprot.readI32();
                  struct.sledCommodityIds.add(_elem250);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateTimestamp = iprot.readI64();
              struct.setDateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqSledTradeTimeOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledCommodityIds != null) {
        if (struct.isSetSledCommodityIds()) {
          oprot.writeFieldBegin(SLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledCommodityIds.size()));
            for (int _iter251 : struct.sledCommodityIds)
            {
              oprot.writeI32(_iter251);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetDateTimestamp()) {
        oprot.writeFieldBegin(DATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.dateTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqSledTradeTimeOptionTupleSchemeFactory implements SchemeFactory {
    public ReqSledTradeTimeOptionTupleScheme getScheme() {
      return new ReqSledTradeTimeOptionTupleScheme();
    }
  }

  private static class ReqSledTradeTimeOptionTupleScheme extends TupleScheme<ReqSledTradeTimeOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqSledTradeTimeOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityIds()) {
        optionals.set(0);
      }
      if (struct.isSetDateTimestamp()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSledCommodityIds()) {
        {
          oprot.writeI32(struct.sledCommodityIds.size());
          for (int _iter252 : struct.sledCommodityIds)
          {
            oprot.writeI32(_iter252);
          }
        }
      }
      if (struct.isSetDateTimestamp()) {
        oprot.writeI64(struct.dateTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqSledTradeTimeOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledCommodityIds = new ArrayList<Integer>(_list253.size);
          for (int _i254 = 0; _i254 < _list253.size; ++_i254)
          {
            int _elem255;
            _elem255 = iprot.readI32();
            struct.sledCommodityIds.add(_elem255);
          }
        }
        struct.setSledCommodityIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dateTimestamp = iprot.readI64();
        struct.setDateTimestampIsSet(true);
      }
    }
  }

}

