/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledContractDetails implements org.apache.thrift.TBase<SledContractDetails, SledContractDetails._Fields>, java.io.Serializable, Cloneable, Comparable<SledContractDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledContractDetails");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodity", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContract", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledContractDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledContractDetailsTupleSchemeFactory());
  }

  public SledCommodity sledCommodity; // optional
  public SledContract sledContract; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY((short)1, "sledCommodity"),
    SLED_CONTRACT((short)2, "sledContract");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY
          return SLED_COMMODITY;
        case 2: // SLED_CONTRACT
          return SLED_CONTRACT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SLED_COMMODITY,_Fields.SLED_CONTRACT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY, new org.apache.thrift.meta_data.FieldMetaData("sledCommodity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledCommodity.class)));
    tmpMap.put(_Fields.SLED_CONTRACT, new org.apache.thrift.meta_data.FieldMetaData("sledContract", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SledContract.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledContractDetails.class, metaDataMap);
  }

  public SledContractDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledContractDetails(SledContractDetails other) {
    if (other.isSetSledCommodity()) {
      this.sledCommodity = new SledCommodity(other.sledCommodity);
    }
    if (other.isSetSledContract()) {
      this.sledContract = new SledContract(other.sledContract);
    }
  }

  public SledContractDetails deepCopy() {
    return new SledContractDetails(this);
  }

  @Override
  public void clear() {
    this.sledCommodity = null;
    this.sledContract = null;
  }

  public SledCommodity getSledCommodity() {
    return this.sledCommodity;
  }

  public SledContractDetails setSledCommodity(SledCommodity sledCommodity) {
    this.sledCommodity = sledCommodity;
    return this;
  }

  public void unsetSledCommodity() {
    this.sledCommodity = null;
  }

  /** Returns true if field sledCommodity is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodity() {
    return this.sledCommodity != null;
  }

  public void setSledCommodityIsSet(boolean value) {
    if (!value) {
      this.sledCommodity = null;
    }
  }

  public SledContract getSledContract() {
    return this.sledContract;
  }

  public SledContractDetails setSledContract(SledContract sledContract) {
    this.sledContract = sledContract;
    return this;
  }

  public void unsetSledContract() {
    this.sledContract = null;
  }

  /** Returns true if field sledContract is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContract() {
    return this.sledContract != null;
  }

  public void setSledContractIsSet(boolean value) {
    if (!value) {
      this.sledContract = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY:
      if (value == null) {
        unsetSledCommodity();
      } else {
        setSledCommodity((SledCommodity)value);
      }
      break;

    case SLED_CONTRACT:
      if (value == null) {
        unsetSledContract();
      } else {
        setSledContract((SledContract)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY:
      return getSledCommodity();

    case SLED_CONTRACT:
      return getSledContract();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY:
      return isSetSledCommodity();
    case SLED_CONTRACT:
      return isSetSledContract();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledContractDetails)
      return this.equals((SledContractDetails)that);
    return false;
  }

  public boolean equals(SledContractDetails that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodity = true && this.isSetSledCommodity();
    boolean that_present_sledCommodity = true && that.isSetSledCommodity();
    if (this_present_sledCommodity || that_present_sledCommodity) {
      if (!(this_present_sledCommodity && that_present_sledCommodity))
        return false;
      if (!this.sledCommodity.equals(that.sledCommodity))
        return false;
    }

    boolean this_present_sledContract = true && this.isSetSledContract();
    boolean that_present_sledContract = true && that.isSetSledContract();
    if (this_present_sledContract || that_present_sledContract) {
      if (!(this_present_sledContract && that_present_sledContract))
        return false;
      if (!this.sledContract.equals(that.sledContract))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledContractDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodity()).compareTo(other.isSetSledCommodity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodity, other.sledCommodity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContract()).compareTo(other.isSetSledContract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContract, other.sledContract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledContractDetails(");
    boolean first = true;

    if (isSetSledCommodity()) {
      sb.append("sledCommodity:");
      if (this.sledCommodity == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodity);
      }
      first = false;
    }
    if (isSetSledContract()) {
      if (!first) sb.append(", ");
      sb.append("sledContract:");
      if (this.sledContract == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContract);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (sledCommodity != null) {
      sledCommodity.validate();
    }
    if (sledContract != null) {
      sledContract.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledContractDetailsStandardSchemeFactory implements SchemeFactory {
    public SledContractDetailsStandardScheme getScheme() {
      return new SledContractDetailsStandardScheme();
    }
  }

  private static class SledContractDetailsStandardScheme extends StandardScheme<SledContractDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledContractDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledCommodity = new SledCommodity();
              struct.sledCommodity.read(iprot);
              struct.setSledCommodityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sledContract = new SledContract();
              struct.sledContract.read(iprot);
              struct.setSledContractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledContractDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledCommodity != null) {
        if (struct.isSetSledCommodity()) {
          oprot.writeFieldBegin(SLED_COMMODITY_FIELD_DESC);
          struct.sledCommodity.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledContract != null) {
        if (struct.isSetSledContract()) {
          oprot.writeFieldBegin(SLED_CONTRACT_FIELD_DESC);
          struct.sledContract.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledContractDetailsTupleSchemeFactory implements SchemeFactory {
    public SledContractDetailsTupleScheme getScheme() {
      return new SledContractDetailsTupleScheme();
    }
  }

  private static class SledContractDetailsTupleScheme extends TupleScheme<SledContractDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledContractDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodity()) {
        optionals.set(0);
      }
      if (struct.isSetSledContract()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSledCommodity()) {
        struct.sledCommodity.write(oprot);
      }
      if (struct.isSetSledContract()) {
        struct.sledContract.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledContractDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.sledCommodity = new SledCommodity();
        struct.sledCommodity.read(iprot);
        struct.setSledCommodityIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContract = new SledContract();
        struct.sledContract.read(iprot);
        struct.setSledContractIsSet(true);
      }
    }
  }

}

