/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqCommodityMappingOption implements org.apache.thrift.TBase<ReqCommodityMappingOption, ReqCommodityMappingOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqCommodityMappingOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqCommodityMappingOption");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityIdList", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchange", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BROKER_ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerEntryId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAP_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("mapIds", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NEED_TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("needTotalCount", org.apache.thrift.protocol.TType.BOOL, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqCommodityMappingOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqCommodityMappingOptionTupleSchemeFactory());
  }

  public List<Integer> sledCommodityIdList; // optional
  public String exchange; // optional
  public String commodityType; // optional
  public String commodityCode; // optional
  public int brokerEntryId; // optional
  public List<Integer> mapIds; // optional
  /**
   * 
   * @see TechPlatform
   */
  public TechPlatform techPlatform; // optional
  public boolean needTotalCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID_LIST((short)1, "sledCommodityIdList"),
    EXCHANGE((short)2, "exchange"),
    COMMODITY_TYPE((short)3, "commodityType"),
    COMMODITY_CODE((short)4, "commodityCode"),
    BROKER_ENTRY_ID((short)5, "brokerEntryId"),
    MAP_IDS((short)6, "mapIds"),
    /**
     * 
     * @see TechPlatform
     */
    TECH_PLATFORM((short)7, "techPlatform"),
    NEED_TOTAL_COUNT((short)8, "needTotalCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID_LIST
          return SLED_COMMODITY_ID_LIST;
        case 2: // EXCHANGE
          return EXCHANGE;
        case 3: // COMMODITY_TYPE
          return COMMODITY_TYPE;
        case 4: // COMMODITY_CODE
          return COMMODITY_CODE;
        case 5: // BROKER_ENTRY_ID
          return BROKER_ENTRY_ID;
        case 6: // MAP_IDS
          return MAP_IDS;
        case 7: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 8: // NEED_TOTAL_COUNT
          return NEED_TOTAL_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BROKERENTRYID_ISSET_ID = 0;
  private static final int __NEEDTOTALCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID_LIST,_Fields.EXCHANGE,_Fields.COMMODITY_TYPE,_Fields.COMMODITY_CODE,_Fields.BROKER_ENTRY_ID,_Fields.MAP_IDS,_Fields.TECH_PLATFORM,_Fields.NEED_TOTAL_COUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID_LIST, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityIdList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.EXCHANGE, new org.apache.thrift.meta_data.FieldMetaData("exchange", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("commodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("commodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROKER_ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerEntryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAP_IDS, new org.apache.thrift.meta_data.FieldMetaData("mapIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TechPlatform.class)));
    tmpMap.put(_Fields.NEED_TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("needTotalCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqCommodityMappingOption.class, metaDataMap);
  }

  public ReqCommodityMappingOption() {
    this.needTotalCount = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqCommodityMappingOption(ReqCommodityMappingOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledCommodityIdList()) {
      List<Integer> __this__sledCommodityIdList = new ArrayList<Integer>(other.sledCommodityIdList);
      this.sledCommodityIdList = __this__sledCommodityIdList;
    }
    if (other.isSetExchange()) {
      this.exchange = other.exchange;
    }
    if (other.isSetCommodityType()) {
      this.commodityType = other.commodityType;
    }
    if (other.isSetCommodityCode()) {
      this.commodityCode = other.commodityCode;
    }
    this.brokerEntryId = other.brokerEntryId;
    if (other.isSetMapIds()) {
      List<Integer> __this__mapIds = new ArrayList<Integer>(other.mapIds);
      this.mapIds = __this__mapIds;
    }
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    this.needTotalCount = other.needTotalCount;
  }

  public ReqCommodityMappingOption deepCopy() {
    return new ReqCommodityMappingOption(this);
  }

  @Override
  public void clear() {
    this.sledCommodityIdList = null;
    this.exchange = null;
    this.commodityType = null;
    this.commodityCode = null;
    setBrokerEntryIdIsSet(false);
    this.brokerEntryId = 0;
    this.mapIds = null;
    this.techPlatform = null;
    this.needTotalCount = true;

  }

  public int getSledCommodityIdListSize() {
    return (this.sledCommodityIdList == null) ? 0 : this.sledCommodityIdList.size();
  }

  public java.util.Iterator<Integer> getSledCommodityIdListIterator() {
    return (this.sledCommodityIdList == null) ? null : this.sledCommodityIdList.iterator();
  }

  public void addToSledCommodityIdList(int elem) {
    if (this.sledCommodityIdList == null) {
      this.sledCommodityIdList = new ArrayList<Integer>();
    }
    this.sledCommodityIdList.add(elem);
  }

  public List<Integer> getSledCommodityIdList() {
    return this.sledCommodityIdList;
  }

  public ReqCommodityMappingOption setSledCommodityIdList(List<Integer> sledCommodityIdList) {
    this.sledCommodityIdList = sledCommodityIdList;
    return this;
  }

  public void unsetSledCommodityIdList() {
    this.sledCommodityIdList = null;
  }

  /** Returns true if field sledCommodityIdList is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityIdList() {
    return this.sledCommodityIdList != null;
  }

  public void setSledCommodityIdListIsSet(boolean value) {
    if (!value) {
      this.sledCommodityIdList = null;
    }
  }

  public String getExchange() {
    return this.exchange;
  }

  public ReqCommodityMappingOption setExchange(String exchange) {
    this.exchange = exchange;
    return this;
  }

  public void unsetExchange() {
    this.exchange = null;
  }

  /** Returns true if field exchange is set (has been assigned a value) and false otherwise */
  public boolean isSetExchange() {
    return this.exchange != null;
  }

  public void setExchangeIsSet(boolean value) {
    if (!value) {
      this.exchange = null;
    }
  }

  public String getCommodityType() {
    return this.commodityType;
  }

  public ReqCommodityMappingOption setCommodityType(String commodityType) {
    this.commodityType = commodityType;
    return this;
  }

  public void unsetCommodityType() {
    this.commodityType = null;
  }

  /** Returns true if field commodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityType() {
    return this.commodityType != null;
  }

  public void setCommodityTypeIsSet(boolean value) {
    if (!value) {
      this.commodityType = null;
    }
  }

  public String getCommodityCode() {
    return this.commodityCode;
  }

  public ReqCommodityMappingOption setCommodityCode(String commodityCode) {
    this.commodityCode = commodityCode;
    return this;
  }

  public void unsetCommodityCode() {
    this.commodityCode = null;
  }

  /** Returns true if field commodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCode() {
    return this.commodityCode != null;
  }

  public void setCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.commodityCode = null;
    }
  }

  public int getBrokerEntryId() {
    return this.brokerEntryId;
  }

  public ReqCommodityMappingOption setBrokerEntryId(int brokerEntryId) {
    this.brokerEntryId = brokerEntryId;
    setBrokerEntryIdIsSet(true);
    return this;
  }

  public void unsetBrokerEntryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  /** Returns true if field brokerEntryId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerEntryId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID);
  }

  public void setBrokerEntryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERENTRYID_ISSET_ID, value);
  }

  public int getMapIdsSize() {
    return (this.mapIds == null) ? 0 : this.mapIds.size();
  }

  public java.util.Iterator<Integer> getMapIdsIterator() {
    return (this.mapIds == null) ? null : this.mapIds.iterator();
  }

  public void addToMapIds(int elem) {
    if (this.mapIds == null) {
      this.mapIds = new ArrayList<Integer>();
    }
    this.mapIds.add(elem);
  }

  public List<Integer> getMapIds() {
    return this.mapIds;
  }

  public ReqCommodityMappingOption setMapIds(List<Integer> mapIds) {
    this.mapIds = mapIds;
    return this;
  }

  public void unsetMapIds() {
    this.mapIds = null;
  }

  /** Returns true if field mapIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMapIds() {
    return this.mapIds != null;
  }

  public void setMapIdsIsSet(boolean value) {
    if (!value) {
      this.mapIds = null;
    }
  }

  /**
   * 
   * @see TechPlatform
   */
  public TechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see TechPlatform
   */
  public ReqCommodityMappingOption setTechPlatform(TechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public boolean isNeedTotalCount() {
    return this.needTotalCount;
  }

  public ReqCommodityMappingOption setNeedTotalCount(boolean needTotalCount) {
    this.needTotalCount = needTotalCount;
    setNeedTotalCountIsSet(true);
    return this;
  }

  public void unsetNeedTotalCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field needTotalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetNeedTotalCount() {
    return EncodingUtils.testBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID);
  }

  public void setNeedTotalCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NEEDTOTALCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID_LIST:
      if (value == null) {
        unsetSledCommodityIdList();
      } else {
        setSledCommodityIdList((List<Integer>)value);
      }
      break;

    case EXCHANGE:
      if (value == null) {
        unsetExchange();
      } else {
        setExchange((String)value);
      }
      break;

    case COMMODITY_TYPE:
      if (value == null) {
        unsetCommodityType();
      } else {
        setCommodityType((String)value);
      }
      break;

    case COMMODITY_CODE:
      if (value == null) {
        unsetCommodityCode();
      } else {
        setCommodityCode((String)value);
      }
      break;

    case BROKER_ENTRY_ID:
      if (value == null) {
        unsetBrokerEntryId();
      } else {
        setBrokerEntryId((Integer)value);
      }
      break;

    case MAP_IDS:
      if (value == null) {
        unsetMapIds();
      } else {
        setMapIds((List<Integer>)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((TechPlatform)value);
      }
      break;

    case NEED_TOTAL_COUNT:
      if (value == null) {
        unsetNeedTotalCount();
      } else {
        setNeedTotalCount((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID_LIST:
      return getSledCommodityIdList();

    case EXCHANGE:
      return getExchange();

    case COMMODITY_TYPE:
      return getCommodityType();

    case COMMODITY_CODE:
      return getCommodityCode();

    case BROKER_ENTRY_ID:
      return Integer.valueOf(getBrokerEntryId());

    case MAP_IDS:
      return getMapIds();

    case TECH_PLATFORM:
      return getTechPlatform();

    case NEED_TOTAL_COUNT:
      return Boolean.valueOf(isNeedTotalCount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID_LIST:
      return isSetSledCommodityIdList();
    case EXCHANGE:
      return isSetExchange();
    case COMMODITY_TYPE:
      return isSetCommodityType();
    case COMMODITY_CODE:
      return isSetCommodityCode();
    case BROKER_ENTRY_ID:
      return isSetBrokerEntryId();
    case MAP_IDS:
      return isSetMapIds();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case NEED_TOTAL_COUNT:
      return isSetNeedTotalCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqCommodityMappingOption)
      return this.equals((ReqCommodityMappingOption)that);
    return false;
  }

  public boolean equals(ReqCommodityMappingOption that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityIdList = true && this.isSetSledCommodityIdList();
    boolean that_present_sledCommodityIdList = true && that.isSetSledCommodityIdList();
    if (this_present_sledCommodityIdList || that_present_sledCommodityIdList) {
      if (!(this_present_sledCommodityIdList && that_present_sledCommodityIdList))
        return false;
      if (!this.sledCommodityIdList.equals(that.sledCommodityIdList))
        return false;
    }

    boolean this_present_exchange = true && this.isSetExchange();
    boolean that_present_exchange = true && that.isSetExchange();
    if (this_present_exchange || that_present_exchange) {
      if (!(this_present_exchange && that_present_exchange))
        return false;
      if (!this.exchange.equals(that.exchange))
        return false;
    }

    boolean this_present_commodityType = true && this.isSetCommodityType();
    boolean that_present_commodityType = true && that.isSetCommodityType();
    if (this_present_commodityType || that_present_commodityType) {
      if (!(this_present_commodityType && that_present_commodityType))
        return false;
      if (!this.commodityType.equals(that.commodityType))
        return false;
    }

    boolean this_present_commodityCode = true && this.isSetCommodityCode();
    boolean that_present_commodityCode = true && that.isSetCommodityCode();
    if (this_present_commodityCode || that_present_commodityCode) {
      if (!(this_present_commodityCode && that_present_commodityCode))
        return false;
      if (!this.commodityCode.equals(that.commodityCode))
        return false;
    }

    boolean this_present_brokerEntryId = true && this.isSetBrokerEntryId();
    boolean that_present_brokerEntryId = true && that.isSetBrokerEntryId();
    if (this_present_brokerEntryId || that_present_brokerEntryId) {
      if (!(this_present_brokerEntryId && that_present_brokerEntryId))
        return false;
      if (this.brokerEntryId != that.brokerEntryId)
        return false;
    }

    boolean this_present_mapIds = true && this.isSetMapIds();
    boolean that_present_mapIds = true && that.isSetMapIds();
    if (this_present_mapIds || that_present_mapIds) {
      if (!(this_present_mapIds && that_present_mapIds))
        return false;
      if (!this.mapIds.equals(that.mapIds))
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_needTotalCount = true && this.isSetNeedTotalCount();
    boolean that_present_needTotalCount = true && that.isSetNeedTotalCount();
    if (this_present_needTotalCount || that_present_needTotalCount) {
      if (!(this_present_needTotalCount && that_present_needTotalCount))
        return false;
      if (this.needTotalCount != that.needTotalCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqCommodityMappingOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityIdList()).compareTo(other.isSetSledCommodityIdList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityIdList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityIdList, other.sledCommodityIdList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchange()).compareTo(other.isSetExchange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchange, other.exchange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityType()).compareTo(other.isSetCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityType, other.commodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCode()).compareTo(other.isSetCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCode, other.commodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerEntryId()).compareTo(other.isSetBrokerEntryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerEntryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerEntryId, other.brokerEntryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMapIds()).compareTo(other.isSetMapIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMapIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapIds, other.mapIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNeedTotalCount()).compareTo(other.isSetNeedTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNeedTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.needTotalCount, other.needTotalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqCommodityMappingOption(");
    boolean first = true;

    if (isSetSledCommodityIdList()) {
      sb.append("sledCommodityIdList:");
      if (this.sledCommodityIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityIdList);
      }
      first = false;
    }
    if (isSetExchange()) {
      if (!first) sb.append(", ");
      sb.append("exchange:");
      if (this.exchange == null) {
        sb.append("null");
      } else {
        sb.append(this.exchange);
      }
      first = false;
    }
    if (isSetCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("commodityType:");
      if (this.commodityType == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityType);
      }
      first = false;
    }
    if (isSetCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("commodityCode:");
      if (this.commodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCode);
      }
      first = false;
    }
    if (isSetBrokerEntryId()) {
      if (!first) sb.append(", ");
      sb.append("brokerEntryId:");
      sb.append(this.brokerEntryId);
      first = false;
    }
    if (isSetMapIds()) {
      if (!first) sb.append(", ");
      sb.append("mapIds:");
      if (this.mapIds == null) {
        sb.append("null");
      } else {
        sb.append(this.mapIds);
      }
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetNeedTotalCount()) {
      if (!first) sb.append(", ");
      sb.append("needTotalCount:");
      sb.append(this.needTotalCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqCommodityMappingOptionStandardSchemeFactory implements SchemeFactory {
    public ReqCommodityMappingOptionStandardScheme getScheme() {
      return new ReqCommodityMappingOptionStandardScheme();
    }
  }

  private static class ReqCommodityMappingOptionStandardScheme extends StandardScheme<ReqCommodityMappingOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqCommodityMappingOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list208 = iprot.readListBegin();
                struct.sledCommodityIdList = new ArrayList<Integer>(_list208.size);
                for (int _i209 = 0; _i209 < _list208.size; ++_i209)
                {
                  int _elem210;
                  _elem210 = iprot.readI32();
                  struct.sledCommodityIdList.add(_elem210);
                }
                iprot.readListEnd();
              }
              struct.setSledCommodityIdListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchange = iprot.readString();
              struct.setExchangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityType = iprot.readString();
              struct.setCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCode = iprot.readString();
              struct.setCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BROKER_ENTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerEntryId = iprot.readI32();
              struct.setBrokerEntryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAP_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list211 = iprot.readListBegin();
                struct.mapIds = new ArrayList<Integer>(_list211.size);
                for (int _i212 = 0; _i212 < _list211.size; ++_i212)
                {
                  int _elem213;
                  _elem213 = iprot.readI32();
                  struct.mapIds.add(_elem213);
                }
                iprot.readListEnd();
              }
              struct.setMapIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = TechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NEED_TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.needTotalCount = iprot.readBool();
              struct.setNeedTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqCommodityMappingOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledCommodityIdList != null) {
        if (struct.isSetSledCommodityIdList()) {
          oprot.writeFieldBegin(SLED_COMMODITY_ID_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.sledCommodityIdList.size()));
            for (int _iter214 : struct.sledCommodityIdList)
            {
              oprot.writeI32(_iter214);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchange != null) {
        if (struct.isSetExchange()) {
          oprot.writeFieldBegin(EXCHANGE_FIELD_DESC);
          oprot.writeString(struct.exchange);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityType != null) {
        if (struct.isSetCommodityType()) {
          oprot.writeFieldBegin(COMMODITY_TYPE_FIELD_DESC);
          oprot.writeString(struct.commodityType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCode != null) {
        if (struct.isSetCommodityCode()) {
          oprot.writeFieldBegin(COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.commodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeFieldBegin(BROKER_ENTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerEntryId);
        oprot.writeFieldEnd();
      }
      if (struct.mapIds != null) {
        if (struct.isSetMapIds()) {
          oprot.writeFieldBegin(MAP_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.mapIds.size()));
            for (int _iter215 : struct.mapIds)
            {
              oprot.writeI32(_iter215);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNeedTotalCount()) {
        oprot.writeFieldBegin(NEED_TOTAL_COUNT_FIELD_DESC);
        oprot.writeBool(struct.needTotalCount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqCommodityMappingOptionTupleSchemeFactory implements SchemeFactory {
    public ReqCommodityMappingOptionTupleScheme getScheme() {
      return new ReqCommodityMappingOptionTupleScheme();
    }
  }

  private static class ReqCommodityMappingOptionTupleScheme extends TupleScheme<ReqCommodityMappingOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqCommodityMappingOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityIdList()) {
        optionals.set(0);
      }
      if (struct.isSetExchange()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityType()) {
        optionals.set(2);
      }
      if (struct.isSetCommodityCode()) {
        optionals.set(3);
      }
      if (struct.isSetBrokerEntryId()) {
        optionals.set(4);
      }
      if (struct.isSetMapIds()) {
        optionals.set(5);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(6);
      }
      if (struct.isSetNeedTotalCount()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSledCommodityIdList()) {
        {
          oprot.writeI32(struct.sledCommodityIdList.size());
          for (int _iter216 : struct.sledCommodityIdList)
          {
            oprot.writeI32(_iter216);
          }
        }
      }
      if (struct.isSetExchange()) {
        oprot.writeString(struct.exchange);
      }
      if (struct.isSetCommodityType()) {
        oprot.writeString(struct.commodityType);
      }
      if (struct.isSetCommodityCode()) {
        oprot.writeString(struct.commodityCode);
      }
      if (struct.isSetBrokerEntryId()) {
        oprot.writeI32(struct.brokerEntryId);
      }
      if (struct.isSetMapIds()) {
        {
          oprot.writeI32(struct.mapIds.size());
          for (int _iter217 : struct.mapIds)
          {
            oprot.writeI32(_iter217);
          }
        }
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetNeedTotalCount()) {
        oprot.writeBool(struct.needTotalCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqCommodityMappingOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list218 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sledCommodityIdList = new ArrayList<Integer>(_list218.size);
          for (int _i219 = 0; _i219 < _list218.size; ++_i219)
          {
            int _elem220;
            _elem220 = iprot.readI32();
            struct.sledCommodityIdList.add(_elem220);
          }
        }
        struct.setSledCommodityIdListIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchange = iprot.readString();
        struct.setExchangeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityType = iprot.readString();
        struct.setCommodityTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commodityCode = iprot.readString();
        struct.setCommodityCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.brokerEntryId = iprot.readI32();
        struct.setBrokerEntryIdIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list221 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mapIds = new ArrayList<Integer>(_list221.size);
          for (int _i222 = 0; _i222 < _list221.size; ++_i222)
          {
            int _elem223;
            _elem223 = iprot.readI32();
            struct.mapIds.add(_elem223);
          }
        }
        struct.setMapIdsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.techPlatform = TechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(7)) {
        struct.needTotalCount = iprot.readBool();
        struct.setNeedTotalCountIsSet(true);
      }
    }
  }

}

