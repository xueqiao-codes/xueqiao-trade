/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.contract.standard.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SledContract implements org.apache.thrift.TBase<SledContract, SledContract._Fields>, java.io.Serializable, Cloneable, Comparable<SledContract> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SledContract");

  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RELATE_CONTRACT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("relateContractIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("sledTag", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CONTRACT_ENG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractEngName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTRACT_CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCnName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTRACT_TC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("contractTcName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CONTRACT_EXP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractExpDate", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField LAST_TRADE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastTradeDate", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField FIRST_NOTICE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("firstNoticeDate", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField PLATFORM_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("platformEnv", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField CONTRACT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("contractStatus", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField ACTIVE_START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeStartTimestamp", org.apache.thrift.protocol.TType.I64, (short)32);
  private static final org.apache.thrift.protocol.TField ACTIVE_END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("activeEndTimestamp", org.apache.thrift.protocol.TType.I64, (short)33);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SledContractStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SledContractTupleSchemeFactory());
  }

  public int sledContractId; // optional
  public int sledCommodityId; // optional
  public String sledContractCode; // optional
  public List<Integer> relateContractIds; // optional
  public String sledTag; // optional
  public String contractEngName; // optional
  public String contractCnName; // optional
  public String contractTcName; // optional
  public long contractExpDate; // optional
  public long lastTradeDate; // optional
  public long firstNoticeDate; // optional
  /**
   * 
   * @see TechPlatformEnv
   */
  public TechPlatformEnv platformEnv; // optional
  /**
   * 
   * @see ContractStatus
   */
  public ContractStatus contractStatus; // optional
  public long activeStartTimestamp; // optional
  public long activeEndTimestamp; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_CONTRACT_ID((short)1, "sledContractId"),
    SLED_COMMODITY_ID((short)2, "sledCommodityId"),
    SLED_CONTRACT_CODE((short)3, "sledContractCode"),
    RELATE_CONTRACT_IDS((short)4, "relateContractIds"),
    SLED_TAG((short)5, "sledTag"),
    CONTRACT_ENG_NAME((short)6, "contractEngName"),
    CONTRACT_CN_NAME((short)7, "contractCnName"),
    CONTRACT_TC_NAME((short)8, "contractTcName"),
    CONTRACT_EXP_DATE((short)9, "contractExpDate"),
    LAST_TRADE_DATE((short)10, "lastTradeDate"),
    FIRST_NOTICE_DATE((short)11, "firstNoticeDate"),
    /**
     * 
     * @see TechPlatformEnv
     */
    PLATFORM_ENV((short)20, "platformEnv"),
    /**
     * 
     * @see ContractStatus
     */
    CONTRACT_STATUS((short)21, "contractStatus"),
    ACTIVE_START_TIMESTAMP((short)32, "activeStartTimestamp"),
    ACTIVE_END_TIMESTAMP((short)33, "activeEndTimestamp"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 2: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 3: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 4: // RELATE_CONTRACT_IDS
          return RELATE_CONTRACT_IDS;
        case 5: // SLED_TAG
          return SLED_TAG;
        case 6: // CONTRACT_ENG_NAME
          return CONTRACT_ENG_NAME;
        case 7: // CONTRACT_CN_NAME
          return CONTRACT_CN_NAME;
        case 8: // CONTRACT_TC_NAME
          return CONTRACT_TC_NAME;
        case 9: // CONTRACT_EXP_DATE
          return CONTRACT_EXP_DATE;
        case 10: // LAST_TRADE_DATE
          return LAST_TRADE_DATE;
        case 11: // FIRST_NOTICE_DATE
          return FIRST_NOTICE_DATE;
        case 20: // PLATFORM_ENV
          return PLATFORM_ENV;
        case 21: // CONTRACT_STATUS
          return CONTRACT_STATUS;
        case 32: // ACTIVE_START_TIMESTAMP
          return ACTIVE_START_TIMESTAMP;
        case 33: // ACTIVE_END_TIMESTAMP
          return ACTIVE_END_TIMESTAMP;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCONTRACTID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __CONTRACTEXPDATE_ISSET_ID = 2;
  private static final int __LASTTRADEDATE_ISSET_ID = 3;
  private static final int __FIRSTNOTICEDATE_ISSET_ID = 4;
  private static final int __ACTIVESTARTTIMESTAMP_ISSET_ID = 5;
  private static final int __ACTIVEENDTIMESTAMP_ISSET_ID = 6;
  private static final int __CREATETIMESTAMP_ISSET_ID = 7;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_CONTRACT_ID,_Fields.SLED_COMMODITY_ID,_Fields.SLED_CONTRACT_CODE,_Fields.RELATE_CONTRACT_IDS,_Fields.SLED_TAG,_Fields.CONTRACT_ENG_NAME,_Fields.CONTRACT_CN_NAME,_Fields.CONTRACT_TC_NAME,_Fields.CONTRACT_EXP_DATE,_Fields.LAST_TRADE_DATE,_Fields.FIRST_NOTICE_DATE,_Fields.PLATFORM_ENV,_Fields.CONTRACT_STATUS,_Fields.ACTIVE_START_TIMESTAMP,_Fields.ACTIVE_END_TIMESTAMP,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELATE_CONTRACT_IDS, new org.apache.thrift.meta_data.FieldMetaData("relateContractIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SLED_TAG, new org.apache.thrift.meta_data.FieldMetaData("sledTag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_ENG_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractEngName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractCnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_TC_NAME, new org.apache.thrift.meta_data.FieldMetaData("contractTcName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_EXP_DATE, new org.apache.thrift.meta_data.FieldMetaData("contractExpDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_TRADE_DATE, new org.apache.thrift.meta_data.FieldMetaData("lastTradeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FIRST_NOTICE_DATE, new org.apache.thrift.meta_data.FieldMetaData("firstNoticeDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PLATFORM_ENV, new org.apache.thrift.meta_data.FieldMetaData("platformEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TechPlatformEnv.class)));
    tmpMap.put(_Fields.CONTRACT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("contractStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContractStatus.class)));
    tmpMap.put(_Fields.ACTIVE_START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeStartTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ACTIVE_END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("activeEndTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SledContract.class, metaDataMap);
  }

  public SledContract() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SledContract(SledContract other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledContractId = other.sledContractId;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    if (other.isSetRelateContractIds()) {
      List<Integer> __this__relateContractIds = new ArrayList<Integer>(other.relateContractIds);
      this.relateContractIds = __this__relateContractIds;
    }
    if (other.isSetSledTag()) {
      this.sledTag = other.sledTag;
    }
    if (other.isSetContractEngName()) {
      this.contractEngName = other.contractEngName;
    }
    if (other.isSetContractCnName()) {
      this.contractCnName = other.contractCnName;
    }
    if (other.isSetContractTcName()) {
      this.contractTcName = other.contractTcName;
    }
    this.contractExpDate = other.contractExpDate;
    this.lastTradeDate = other.lastTradeDate;
    this.firstNoticeDate = other.firstNoticeDate;
    if (other.isSetPlatformEnv()) {
      this.platformEnv = other.platformEnv;
    }
    if (other.isSetContractStatus()) {
      this.contractStatus = other.contractStatus;
    }
    this.activeStartTimestamp = other.activeStartTimestamp;
    this.activeEndTimestamp = other.activeEndTimestamp;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public SledContract deepCopy() {
    return new SledContract(this);
  }

  @Override
  public void clear() {
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.sledContractCode = null;
    this.relateContractIds = null;
    this.sledTag = null;
    this.contractEngName = null;
    this.contractCnName = null;
    this.contractTcName = null;
    setContractExpDateIsSet(false);
    this.contractExpDate = 0;
    setLastTradeDateIsSet(false);
    this.lastTradeDate = 0;
    setFirstNoticeDateIsSet(false);
    this.firstNoticeDate = 0;
    this.platformEnv = null;
    this.contractStatus = null;
    setActiveStartTimestampIsSet(false);
    this.activeStartTimestamp = 0;
    setActiveEndTimestampIsSet(false);
    this.activeEndTimestamp = 0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public int getSledContractId() {
    return this.sledContractId;
  }

  public SledContract setSledContractId(int sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public int getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SledContract setSledCommodityId(int sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public SledContract setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public int getRelateContractIdsSize() {
    return (this.relateContractIds == null) ? 0 : this.relateContractIds.size();
  }

  public java.util.Iterator<Integer> getRelateContractIdsIterator() {
    return (this.relateContractIds == null) ? null : this.relateContractIds.iterator();
  }

  public void addToRelateContractIds(int elem) {
    if (this.relateContractIds == null) {
      this.relateContractIds = new ArrayList<Integer>();
    }
    this.relateContractIds.add(elem);
  }

  public List<Integer> getRelateContractIds() {
    return this.relateContractIds;
  }

  public SledContract setRelateContractIds(List<Integer> relateContractIds) {
    this.relateContractIds = relateContractIds;
    return this;
  }

  public void unsetRelateContractIds() {
    this.relateContractIds = null;
  }

  /** Returns true if field relateContractIds is set (has been assigned a value) and false otherwise */
  public boolean isSetRelateContractIds() {
    return this.relateContractIds != null;
  }

  public void setRelateContractIdsIsSet(boolean value) {
    if (!value) {
      this.relateContractIds = null;
    }
  }

  public String getSledTag() {
    return this.sledTag;
  }

  public SledContract setSledTag(String sledTag) {
    this.sledTag = sledTag;
    return this;
  }

  public void unsetSledTag() {
    this.sledTag = null;
  }

  /** Returns true if field sledTag is set (has been assigned a value) and false otherwise */
  public boolean isSetSledTag() {
    return this.sledTag != null;
  }

  public void setSledTagIsSet(boolean value) {
    if (!value) {
      this.sledTag = null;
    }
  }

  public String getContractEngName() {
    return this.contractEngName;
  }

  public SledContract setContractEngName(String contractEngName) {
    this.contractEngName = contractEngName;
    return this;
  }

  public void unsetContractEngName() {
    this.contractEngName = null;
  }

  /** Returns true if field contractEngName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractEngName() {
    return this.contractEngName != null;
  }

  public void setContractEngNameIsSet(boolean value) {
    if (!value) {
      this.contractEngName = null;
    }
  }

  public String getContractCnName() {
    return this.contractCnName;
  }

  public SledContract setContractCnName(String contractCnName) {
    this.contractCnName = contractCnName;
    return this;
  }

  public void unsetContractCnName() {
    this.contractCnName = null;
  }

  /** Returns true if field contractCnName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCnName() {
    return this.contractCnName != null;
  }

  public void setContractCnNameIsSet(boolean value) {
    if (!value) {
      this.contractCnName = null;
    }
  }

  public String getContractTcName() {
    return this.contractTcName;
  }

  public SledContract setContractTcName(String contractTcName) {
    this.contractTcName = contractTcName;
    return this;
  }

  public void unsetContractTcName() {
    this.contractTcName = null;
  }

  /** Returns true if field contractTcName is set (has been assigned a value) and false otherwise */
  public boolean isSetContractTcName() {
    return this.contractTcName != null;
  }

  public void setContractTcNameIsSet(boolean value) {
    if (!value) {
      this.contractTcName = null;
    }
  }

  public long getContractExpDate() {
    return this.contractExpDate;
  }

  public SledContract setContractExpDate(long contractExpDate) {
    this.contractExpDate = contractExpDate;
    setContractExpDateIsSet(true);
    return this;
  }

  public void unsetContractExpDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID);
  }

  /** Returns true if field contractExpDate is set (has been assigned a value) and false otherwise */
  public boolean isSetContractExpDate() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID);
  }

  public void setContractExpDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTEXPDATE_ISSET_ID, value);
  }

  public long getLastTradeDate() {
    return this.lastTradeDate;
  }

  public SledContract setLastTradeDate(long lastTradeDate) {
    this.lastTradeDate = lastTradeDate;
    setLastTradeDateIsSet(true);
    return this;
  }

  public void unsetLastTradeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  /** Returns true if field lastTradeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetLastTradeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID);
  }

  public void setLastTradeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTTRADEDATE_ISSET_ID, value);
  }

  public long getFirstNoticeDate() {
    return this.firstNoticeDate;
  }

  public SledContract setFirstNoticeDate(long firstNoticeDate) {
    this.firstNoticeDate = firstNoticeDate;
    setFirstNoticeDateIsSet(true);
    return this;
  }

  public void unsetFirstNoticeDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  /** Returns true if field firstNoticeDate is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstNoticeDate() {
    return EncodingUtils.testBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID);
  }

  public void setFirstNoticeDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FIRSTNOTICEDATE_ISSET_ID, value);
  }

  /**
   * 
   * @see TechPlatformEnv
   */
  public TechPlatformEnv getPlatformEnv() {
    return this.platformEnv;
  }

  /**
   * 
   * @see TechPlatformEnv
   */
  public SledContract setPlatformEnv(TechPlatformEnv platformEnv) {
    this.platformEnv = platformEnv;
    return this;
  }

  public void unsetPlatformEnv() {
    this.platformEnv = null;
  }

  /** Returns true if field platformEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatformEnv() {
    return this.platformEnv != null;
  }

  public void setPlatformEnvIsSet(boolean value) {
    if (!value) {
      this.platformEnv = null;
    }
  }

  /**
   * 
   * @see ContractStatus
   */
  public ContractStatus getContractStatus() {
    return this.contractStatus;
  }

  /**
   * 
   * @see ContractStatus
   */
  public SledContract setContractStatus(ContractStatus contractStatus) {
    this.contractStatus = contractStatus;
    return this;
  }

  public void unsetContractStatus() {
    this.contractStatus = null;
  }

  /** Returns true if field contractStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetContractStatus() {
    return this.contractStatus != null;
  }

  public void setContractStatusIsSet(boolean value) {
    if (!value) {
      this.contractStatus = null;
    }
  }

  public long getActiveStartTimestamp() {
    return this.activeStartTimestamp;
  }

  public SledContract setActiveStartTimestamp(long activeStartTimestamp) {
    this.activeStartTimestamp = activeStartTimestamp;
    setActiveStartTimestampIsSet(true);
    return this;
  }

  public void unsetActiveStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeStartTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID);
  }

  public void setActiveStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVESTARTTIMESTAMP_ISSET_ID, value);
  }

  public long getActiveEndTimestamp() {
    return this.activeEndTimestamp;
  }

  public SledContract setActiveEndTimestamp(long activeEndTimestamp) {
    this.activeEndTimestamp = activeEndTimestamp;
    setActiveEndTimestampIsSet(true);
    return this;
  }

  public void unsetActiveEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field activeEndTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetActiveEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID);
  }

  public void setActiveEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVEENDTIMESTAMP_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public SledContract setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public SledContract setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Integer)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Integer)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case RELATE_CONTRACT_IDS:
      if (value == null) {
        unsetRelateContractIds();
      } else {
        setRelateContractIds((List<Integer>)value);
      }
      break;

    case SLED_TAG:
      if (value == null) {
        unsetSledTag();
      } else {
        setSledTag((String)value);
      }
      break;

    case CONTRACT_ENG_NAME:
      if (value == null) {
        unsetContractEngName();
      } else {
        setContractEngName((String)value);
      }
      break;

    case CONTRACT_CN_NAME:
      if (value == null) {
        unsetContractCnName();
      } else {
        setContractCnName((String)value);
      }
      break;

    case CONTRACT_TC_NAME:
      if (value == null) {
        unsetContractTcName();
      } else {
        setContractTcName((String)value);
      }
      break;

    case CONTRACT_EXP_DATE:
      if (value == null) {
        unsetContractExpDate();
      } else {
        setContractExpDate((Long)value);
      }
      break;

    case LAST_TRADE_DATE:
      if (value == null) {
        unsetLastTradeDate();
      } else {
        setLastTradeDate((Long)value);
      }
      break;

    case FIRST_NOTICE_DATE:
      if (value == null) {
        unsetFirstNoticeDate();
      } else {
        setFirstNoticeDate((Long)value);
      }
      break;

    case PLATFORM_ENV:
      if (value == null) {
        unsetPlatformEnv();
      } else {
        setPlatformEnv((TechPlatformEnv)value);
      }
      break;

    case CONTRACT_STATUS:
      if (value == null) {
        unsetContractStatus();
      } else {
        setContractStatus((ContractStatus)value);
      }
      break;

    case ACTIVE_START_TIMESTAMP:
      if (value == null) {
        unsetActiveStartTimestamp();
      } else {
        setActiveStartTimestamp((Long)value);
      }
      break;

    case ACTIVE_END_TIMESTAMP:
      if (value == null) {
        unsetActiveEndTimestamp();
      } else {
        setActiveEndTimestamp((Long)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_CONTRACT_ID:
      return Integer.valueOf(getSledContractId());

    case SLED_COMMODITY_ID:
      return Integer.valueOf(getSledCommodityId());

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case RELATE_CONTRACT_IDS:
      return getRelateContractIds();

    case SLED_TAG:
      return getSledTag();

    case CONTRACT_ENG_NAME:
      return getContractEngName();

    case CONTRACT_CN_NAME:
      return getContractCnName();

    case CONTRACT_TC_NAME:
      return getContractTcName();

    case CONTRACT_EXP_DATE:
      return Long.valueOf(getContractExpDate());

    case LAST_TRADE_DATE:
      return Long.valueOf(getLastTradeDate());

    case FIRST_NOTICE_DATE:
      return Long.valueOf(getFirstNoticeDate());

    case PLATFORM_ENV:
      return getPlatformEnv();

    case CONTRACT_STATUS:
      return getContractStatus();

    case ACTIVE_START_TIMESTAMP:
      return Long.valueOf(getActiveStartTimestamp());

    case ACTIVE_END_TIMESTAMP:
      return Long.valueOf(getActiveEndTimestamp());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case RELATE_CONTRACT_IDS:
      return isSetRelateContractIds();
    case SLED_TAG:
      return isSetSledTag();
    case CONTRACT_ENG_NAME:
      return isSetContractEngName();
    case CONTRACT_CN_NAME:
      return isSetContractCnName();
    case CONTRACT_TC_NAME:
      return isSetContractTcName();
    case CONTRACT_EXP_DATE:
      return isSetContractExpDate();
    case LAST_TRADE_DATE:
      return isSetLastTradeDate();
    case FIRST_NOTICE_DATE:
      return isSetFirstNoticeDate();
    case PLATFORM_ENV:
      return isSetPlatformEnv();
    case CONTRACT_STATUS:
      return isSetContractStatus();
    case ACTIVE_START_TIMESTAMP:
      return isSetActiveStartTimestamp();
    case ACTIVE_END_TIMESTAMP:
      return isSetActiveEndTimestamp();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SledContract)
      return this.equals((SledContract)that);
    return false;
  }

  public boolean equals(SledContract that) {
    if (that == null)
      return false;

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_relateContractIds = true && this.isSetRelateContractIds();
    boolean that_present_relateContractIds = true && that.isSetRelateContractIds();
    if (this_present_relateContractIds || that_present_relateContractIds) {
      if (!(this_present_relateContractIds && that_present_relateContractIds))
        return false;
      if (!this.relateContractIds.equals(that.relateContractIds))
        return false;
    }

    boolean this_present_sledTag = true && this.isSetSledTag();
    boolean that_present_sledTag = true && that.isSetSledTag();
    if (this_present_sledTag || that_present_sledTag) {
      if (!(this_present_sledTag && that_present_sledTag))
        return false;
      if (!this.sledTag.equals(that.sledTag))
        return false;
    }

    boolean this_present_contractEngName = true && this.isSetContractEngName();
    boolean that_present_contractEngName = true && that.isSetContractEngName();
    if (this_present_contractEngName || that_present_contractEngName) {
      if (!(this_present_contractEngName && that_present_contractEngName))
        return false;
      if (!this.contractEngName.equals(that.contractEngName))
        return false;
    }

    boolean this_present_contractCnName = true && this.isSetContractCnName();
    boolean that_present_contractCnName = true && that.isSetContractCnName();
    if (this_present_contractCnName || that_present_contractCnName) {
      if (!(this_present_contractCnName && that_present_contractCnName))
        return false;
      if (!this.contractCnName.equals(that.contractCnName))
        return false;
    }

    boolean this_present_contractTcName = true && this.isSetContractTcName();
    boolean that_present_contractTcName = true && that.isSetContractTcName();
    if (this_present_contractTcName || that_present_contractTcName) {
      if (!(this_present_contractTcName && that_present_contractTcName))
        return false;
      if (!this.contractTcName.equals(that.contractTcName))
        return false;
    }

    boolean this_present_contractExpDate = true && this.isSetContractExpDate();
    boolean that_present_contractExpDate = true && that.isSetContractExpDate();
    if (this_present_contractExpDate || that_present_contractExpDate) {
      if (!(this_present_contractExpDate && that_present_contractExpDate))
        return false;
      if (this.contractExpDate != that.contractExpDate)
        return false;
    }

    boolean this_present_lastTradeDate = true && this.isSetLastTradeDate();
    boolean that_present_lastTradeDate = true && that.isSetLastTradeDate();
    if (this_present_lastTradeDate || that_present_lastTradeDate) {
      if (!(this_present_lastTradeDate && that_present_lastTradeDate))
        return false;
      if (this.lastTradeDate != that.lastTradeDate)
        return false;
    }

    boolean this_present_firstNoticeDate = true && this.isSetFirstNoticeDate();
    boolean that_present_firstNoticeDate = true && that.isSetFirstNoticeDate();
    if (this_present_firstNoticeDate || that_present_firstNoticeDate) {
      if (!(this_present_firstNoticeDate && that_present_firstNoticeDate))
        return false;
      if (this.firstNoticeDate != that.firstNoticeDate)
        return false;
    }

    boolean this_present_platformEnv = true && this.isSetPlatformEnv();
    boolean that_present_platformEnv = true && that.isSetPlatformEnv();
    if (this_present_platformEnv || that_present_platformEnv) {
      if (!(this_present_platformEnv && that_present_platformEnv))
        return false;
      if (!this.platformEnv.equals(that.platformEnv))
        return false;
    }

    boolean this_present_contractStatus = true && this.isSetContractStatus();
    boolean that_present_contractStatus = true && that.isSetContractStatus();
    if (this_present_contractStatus || that_present_contractStatus) {
      if (!(this_present_contractStatus && that_present_contractStatus))
        return false;
      if (!this.contractStatus.equals(that.contractStatus))
        return false;
    }

    boolean this_present_activeStartTimestamp = true && this.isSetActiveStartTimestamp();
    boolean that_present_activeStartTimestamp = true && that.isSetActiveStartTimestamp();
    if (this_present_activeStartTimestamp || that_present_activeStartTimestamp) {
      if (!(this_present_activeStartTimestamp && that_present_activeStartTimestamp))
        return false;
      if (this.activeStartTimestamp != that.activeStartTimestamp)
        return false;
    }

    boolean this_present_activeEndTimestamp = true && this.isSetActiveEndTimestamp();
    boolean that_present_activeEndTimestamp = true && that.isSetActiveEndTimestamp();
    if (this_present_activeEndTimestamp || that_present_activeEndTimestamp) {
      if (!(this_present_activeEndTimestamp && that_present_activeEndTimestamp))
        return false;
      if (this.activeEndTimestamp != that.activeEndTimestamp)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SledContract other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelateContractIds()).compareTo(other.isSetRelateContractIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelateContractIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relateContractIds, other.relateContractIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledTag()).compareTo(other.isSetSledTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledTag, other.sledTag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractEngName()).compareTo(other.isSetContractEngName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractEngName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractEngName, other.contractEngName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCnName()).compareTo(other.isSetContractCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCnName, other.contractCnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractTcName()).compareTo(other.isSetContractTcName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractTcName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractTcName, other.contractTcName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractExpDate()).compareTo(other.isSetContractExpDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractExpDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractExpDate, other.contractExpDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastTradeDate()).compareTo(other.isSetLastTradeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastTradeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastTradeDate, other.lastTradeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstNoticeDate()).compareTo(other.isSetFirstNoticeDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstNoticeDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstNoticeDate, other.firstNoticeDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPlatformEnv()).compareTo(other.isSetPlatformEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatformEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformEnv, other.platformEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractStatus()).compareTo(other.isSetContractStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractStatus, other.contractStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveStartTimestamp()).compareTo(other.isSetActiveStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeStartTimestamp, other.activeStartTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActiveEndTimestamp()).compareTo(other.isSetActiveEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActiveEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activeEndTimestamp, other.activeEndTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SledContract(");
    boolean first = true;

    if (isSetSledContractId()) {
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetRelateContractIds()) {
      if (!first) sb.append(", ");
      sb.append("relateContractIds:");
      if (this.relateContractIds == null) {
        sb.append("null");
      } else {
        sb.append(this.relateContractIds);
      }
      first = false;
    }
    if (isSetSledTag()) {
      if (!first) sb.append(", ");
      sb.append("sledTag:");
      if (this.sledTag == null) {
        sb.append("null");
      } else {
        sb.append(this.sledTag);
      }
      first = false;
    }
    if (isSetContractEngName()) {
      if (!first) sb.append(", ");
      sb.append("contractEngName:");
      if (this.contractEngName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractEngName);
      }
      first = false;
    }
    if (isSetContractCnName()) {
      if (!first) sb.append(", ");
      sb.append("contractCnName:");
      if (this.contractCnName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCnName);
      }
      first = false;
    }
    if (isSetContractTcName()) {
      if (!first) sb.append(", ");
      sb.append("contractTcName:");
      if (this.contractTcName == null) {
        sb.append("null");
      } else {
        sb.append(this.contractTcName);
      }
      first = false;
    }
    if (isSetContractExpDate()) {
      if (!first) sb.append(", ");
      sb.append("contractExpDate:");
      sb.append(this.contractExpDate);
      first = false;
    }
    if (isSetLastTradeDate()) {
      if (!first) sb.append(", ");
      sb.append("lastTradeDate:");
      sb.append(this.lastTradeDate);
      first = false;
    }
    if (isSetFirstNoticeDate()) {
      if (!first) sb.append(", ");
      sb.append("firstNoticeDate:");
      sb.append(this.firstNoticeDate);
      first = false;
    }
    if (isSetPlatformEnv()) {
      if (!first) sb.append(", ");
      sb.append("platformEnv:");
      if (this.platformEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.platformEnv);
      }
      first = false;
    }
    if (isSetContractStatus()) {
      if (!first) sb.append(", ");
      sb.append("contractStatus:");
      if (this.contractStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.contractStatus);
      }
      first = false;
    }
    if (isSetActiveStartTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeStartTimestamp:");
      sb.append(this.activeStartTimestamp);
      first = false;
    }
    if (isSetActiveEndTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("activeEndTimestamp:");
      sb.append(this.activeEndTimestamp);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SledContractStandardSchemeFactory implements SchemeFactory {
    public SledContractStandardScheme getScheme() {
      return new SledContractStandardScheme();
    }
  }

  private static class SledContractStandardScheme extends StandardScheme<SledContract> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SledContract struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledContractId = iprot.readI32();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledCommodityId = iprot.readI32();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RELATE_CONTRACT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.relateContractIds = new ArrayList<Integer>(_list40.size);
                for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                {
                  int _elem42;
                  _elem42 = iprot.readI32();
                  struct.relateContractIds.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setRelateContractIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledTag = iprot.readString();
              struct.setSledTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CONTRACT_ENG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractEngName = iprot.readString();
              struct.setContractEngNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTRACT_CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCnName = iprot.readString();
              struct.setContractCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTRACT_TC_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractTcName = iprot.readString();
              struct.setContractTcNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CONTRACT_EXP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contractExpDate = iprot.readI64();
              struct.setContractExpDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LAST_TRADE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastTradeDate = iprot.readI64();
              struct.setLastTradeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // FIRST_NOTICE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.firstNoticeDate = iprot.readI64();
              struct.setFirstNoticeDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PLATFORM_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.platformEnv = TechPlatformEnv.findByValue(iprot.readI32());
              struct.setPlatformEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CONTRACT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractStatus = ContractStatus.findByValue(iprot.readI32());
              struct.setContractStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 32: // ACTIVE_START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeStartTimestamp = iprot.readI64();
              struct.setActiveStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 33: // ACTIVE_END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.activeEndTimestamp = iprot.readI64();
              struct.setActiveEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SledContract struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI32(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI32(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.relateContractIds != null) {
        if (struct.isSetRelateContractIds()) {
          oprot.writeFieldBegin(RELATE_CONTRACT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.relateContractIds.size()));
            for (int _iter43 : struct.relateContractIds)
            {
              oprot.writeI32(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledTag != null) {
        if (struct.isSetSledTag()) {
          oprot.writeFieldBegin(SLED_TAG_FIELD_DESC);
          oprot.writeString(struct.sledTag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractEngName != null) {
        if (struct.isSetContractEngName()) {
          oprot.writeFieldBegin(CONTRACT_ENG_NAME_FIELD_DESC);
          oprot.writeString(struct.contractEngName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractCnName != null) {
        if (struct.isSetContractCnName()) {
          oprot.writeFieldBegin(CONTRACT_CN_NAME_FIELD_DESC);
          oprot.writeString(struct.contractCnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractTcName != null) {
        if (struct.isSetContractTcName()) {
          oprot.writeFieldBegin(CONTRACT_TC_NAME_FIELD_DESC);
          oprot.writeString(struct.contractTcName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractExpDate()) {
        oprot.writeFieldBegin(CONTRACT_EXP_DATE_FIELD_DESC);
        oprot.writeI64(struct.contractExpDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeFieldBegin(LAST_TRADE_DATE_FIELD_DESC);
        oprot.writeI64(struct.lastTradeDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeFieldBegin(FIRST_NOTICE_DATE_FIELD_DESC);
        oprot.writeI64(struct.firstNoticeDate);
        oprot.writeFieldEnd();
      }
      if (struct.platformEnv != null) {
        if (struct.isSetPlatformEnv()) {
          oprot.writeFieldBegin(PLATFORM_ENV_FIELD_DESC);
          oprot.writeI32(struct.platformEnv.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractStatus != null) {
        if (struct.isSetContractStatus()) {
          oprot.writeFieldBegin(CONTRACT_STATUS_FIELD_DESC);
          oprot.writeI32(struct.contractStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_START_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeStartTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeFieldBegin(ACTIVE_END_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.activeEndTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SledContractTupleSchemeFactory implements SchemeFactory {
    public SledContractTupleScheme getScheme() {
      return new SledContractTupleScheme();
    }
  }

  private static class SledContractTupleScheme extends TupleScheme<SledContract> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SledContract struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledContractId()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(1);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(2);
      }
      if (struct.isSetRelateContractIds()) {
        optionals.set(3);
      }
      if (struct.isSetSledTag()) {
        optionals.set(4);
      }
      if (struct.isSetContractEngName()) {
        optionals.set(5);
      }
      if (struct.isSetContractCnName()) {
        optionals.set(6);
      }
      if (struct.isSetContractTcName()) {
        optionals.set(7);
      }
      if (struct.isSetContractExpDate()) {
        optionals.set(8);
      }
      if (struct.isSetLastTradeDate()) {
        optionals.set(9);
      }
      if (struct.isSetFirstNoticeDate()) {
        optionals.set(10);
      }
      if (struct.isSetPlatformEnv()) {
        optionals.set(11);
      }
      if (struct.isSetContractStatus()) {
        optionals.set(12);
      }
      if (struct.isSetActiveStartTimestamp()) {
        optionals.set(13);
      }
      if (struct.isSetActiveEndTimestamp()) {
        optionals.set(14);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(15);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetSledContractId()) {
        oprot.writeI32(struct.sledContractId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI32(struct.sledCommodityId);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetRelateContractIds()) {
        {
          oprot.writeI32(struct.relateContractIds.size());
          for (int _iter44 : struct.relateContractIds)
          {
            oprot.writeI32(_iter44);
          }
        }
      }
      if (struct.isSetSledTag()) {
        oprot.writeString(struct.sledTag);
      }
      if (struct.isSetContractEngName()) {
        oprot.writeString(struct.contractEngName);
      }
      if (struct.isSetContractCnName()) {
        oprot.writeString(struct.contractCnName);
      }
      if (struct.isSetContractTcName()) {
        oprot.writeString(struct.contractTcName);
      }
      if (struct.isSetContractExpDate()) {
        oprot.writeI64(struct.contractExpDate);
      }
      if (struct.isSetLastTradeDate()) {
        oprot.writeI64(struct.lastTradeDate);
      }
      if (struct.isSetFirstNoticeDate()) {
        oprot.writeI64(struct.firstNoticeDate);
      }
      if (struct.isSetPlatformEnv()) {
        oprot.writeI32(struct.platformEnv.getValue());
      }
      if (struct.isSetContractStatus()) {
        oprot.writeI32(struct.contractStatus.getValue());
      }
      if (struct.isSetActiveStartTimestamp()) {
        oprot.writeI64(struct.activeStartTimestamp);
      }
      if (struct.isSetActiveEndTimestamp()) {
        oprot.writeI64(struct.activeEndTimestamp);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SledContract struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.sledContractId = iprot.readI32();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityId = iprot.readI32();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.relateContractIds = new ArrayList<Integer>(_list45.size);
          for (int _i46 = 0; _i46 < _list45.size; ++_i46)
          {
            int _elem47;
            _elem47 = iprot.readI32();
            struct.relateContractIds.add(_elem47);
          }
        }
        struct.setRelateContractIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledTag = iprot.readString();
        struct.setSledTagIsSet(true);
      }
      if (incoming.get(5)) {
        struct.contractEngName = iprot.readString();
        struct.setContractEngNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contractCnName = iprot.readString();
        struct.setContractCnNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contractTcName = iprot.readString();
        struct.setContractTcNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.contractExpDate = iprot.readI64();
        struct.setContractExpDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.lastTradeDate = iprot.readI64();
        struct.setLastTradeDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.firstNoticeDate = iprot.readI64();
        struct.setFirstNoticeDateIsSet(true);
      }
      if (incoming.get(11)) {
        struct.platformEnv = TechPlatformEnv.findByValue(iprot.readI32());
        struct.setPlatformEnvIsSet(true);
      }
      if (incoming.get(12)) {
        struct.contractStatus = ContractStatus.findByValue(iprot.readI32());
        struct.setContractStatusIsSet(true);
      }
      if (incoming.get(13)) {
        struct.activeStartTimestamp = iprot.readI64();
        struct.setActiveStartTimestampIsSet(true);
      }
      if (incoming.get(14)) {
        struct.activeEndTimestamp = iprot.readI64();
        struct.setActiveEndTimestampIsSet(true);
      }
      if (incoming.get(15)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(16)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

