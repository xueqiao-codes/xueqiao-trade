/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TradeHostingStorage_H
#define TradeHostingStorage_H

#include <thrift/TDispatchProcessor.h>
#include "trade_hosting_storage_types.h"

namespace xueqiao { namespace trade { namespace hosting { namespace storage { namespace thriftapi {

class TradeHostingStorageIf {
 public:
  virtual ~TradeHostingStorageIf() {}
  virtual void getTraddeAccount(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) = 0;
  virtual void getBrokerAccessEntry(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) = 0;
  virtual void setTradeAccountInvalid(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId, const TradeAccountInvalidDescription& invalidDescription) = 0;
  virtual void setTradeAccountActive(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) = 0;
  virtual void getAllTradeAccounts(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getBrokerAccessEntryFromCloud(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeBrokerId, const int64_t tradeBrokerAccessId) = 0;
  virtual int64_t createComposeGraphId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual int64_t createTradeAccountId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual int64_t createSubAccountId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void updateConfig(const  ::platform::comm::PlatformArgs& platformArgs, const UpdateConfigDescription& configDescription) = 0;
  virtual int64_t getMachineId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getHostingSession(std::vector< ::xueqiao::trade::hosting::HostingSession> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId) = 0;
};

class TradeHostingStorageIfFactory {
 public:
  typedef TradeHostingStorageIf Handler;

  virtual ~TradeHostingStorageIfFactory() {}

  virtual TradeHostingStorageIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TradeHostingStorageIf* /* handler */) = 0;
};

class TradeHostingStorageIfSingletonFactory : virtual public TradeHostingStorageIfFactory {
 public:
  TradeHostingStorageIfSingletonFactory(const boost::shared_ptr<TradeHostingStorageIf>& iface) : iface_(iface) {}
  virtual ~TradeHostingStorageIfSingletonFactory() {}

  virtual TradeHostingStorageIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TradeHostingStorageIf* /* handler */) {}

 protected:
  boost::shared_ptr<TradeHostingStorageIf> iface_;
};

class TradeHostingStorageNull : virtual public TradeHostingStorageIf {
 public:
  virtual ~TradeHostingStorageNull() {}
  void getTraddeAccount(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* tradeAccountId */) {
    return;
  }
  void getBrokerAccessEntry(std::vector< ::BrokerAccessEntry> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* tradeAccountId */) {
    return;
  }
  void setTradeAccountInvalid(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* tradeAccountId */, const TradeAccountInvalidDescription& /* invalidDescription */) {
    return;
  }
  void setTradeAccountActive(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* tradeAccountId */) {
    return;
  }
  void getAllTradeAccounts(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getBrokerAccessEntryFromCloud(std::vector< ::BrokerAccessEntry> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* tradeBrokerId */, const int64_t /* tradeBrokerAccessId */) {
    return;
  }
  int64_t createComposeGraphId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t createTradeAccountId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t createSubAccountId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  void updateConfig(const  ::platform::comm::PlatformArgs& /* platformArgs */, const UpdateConfigDescription& /* configDescription */) {
    return;
  }
  int64_t getMachineId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  void getHostingSession(std::vector< ::xueqiao::trade::hosting::HostingSession> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int32_t /* subUserId */) {
    return;
  }
};

typedef struct _TradeHostingStorage_getTraddeAccount_args__isset {
  _TradeHostingStorage_getTraddeAccount_args__isset() : platformArgs(false), tradeAccountId(false) {}
  bool platformArgs;
  bool tradeAccountId;
} _TradeHostingStorage_getTraddeAccount_args__isset;

class TradeHostingStorage_getTraddeAccount_args {
 public:

  TradeHostingStorage_getTraddeAccount_args() : tradeAccountId(0) {
  }

  virtual ~TradeHostingStorage_getTraddeAccount_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t tradeAccountId;

  _TradeHostingStorage_getTraddeAccount_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
  }

  bool operator == (const TradeHostingStorage_getTraddeAccount_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(tradeAccountId == rhs.tradeAccountId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getTraddeAccount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getTraddeAccount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getTraddeAccount_pargs {
 public:


  virtual ~TradeHostingStorage_getTraddeAccount_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* tradeAccountId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getTraddeAccount_result__isset {
  _TradeHostingStorage_getTraddeAccount_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getTraddeAccount_result__isset;

class TradeHostingStorage_getTraddeAccount_result {
 public:

  TradeHostingStorage_getTraddeAccount_result() {
  }

  virtual ~TradeHostingStorage_getTraddeAccount_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingTradeAccount>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getTraddeAccount_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getTraddeAccount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getTraddeAccount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getTraddeAccount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getTraddeAccount_presult__isset {
  _TradeHostingStorage_getTraddeAccount_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getTraddeAccount_presult__isset;

class TradeHostingStorage_getTraddeAccount_presult {
 public:


  virtual ~TradeHostingStorage_getTraddeAccount_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getTraddeAccount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_getBrokerAccessEntry_args__isset {
  _TradeHostingStorage_getBrokerAccessEntry_args__isset() : platformArgs(false), tradeAccountId(false) {}
  bool platformArgs;
  bool tradeAccountId;
} _TradeHostingStorage_getBrokerAccessEntry_args__isset;

class TradeHostingStorage_getBrokerAccessEntry_args {
 public:

  TradeHostingStorage_getBrokerAccessEntry_args() : tradeAccountId(0) {
  }

  virtual ~TradeHostingStorage_getBrokerAccessEntry_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t tradeAccountId;

  _TradeHostingStorage_getBrokerAccessEntry_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
  }

  bool operator == (const TradeHostingStorage_getBrokerAccessEntry_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(tradeAccountId == rhs.tradeAccountId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getBrokerAccessEntry_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getBrokerAccessEntry_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getBrokerAccessEntry_pargs {
 public:


  virtual ~TradeHostingStorage_getBrokerAccessEntry_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* tradeAccountId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getBrokerAccessEntry_result__isset {
  _TradeHostingStorage_getBrokerAccessEntry_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getBrokerAccessEntry_result__isset;

class TradeHostingStorage_getBrokerAccessEntry_result {
 public:

  TradeHostingStorage_getBrokerAccessEntry_result() {
  }

  virtual ~TradeHostingStorage_getBrokerAccessEntry_result() throw() {}

  std::vector< ::BrokerAccessEntry>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getBrokerAccessEntry_result__isset __isset;

  void __set_success(const std::vector< ::BrokerAccessEntry> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getBrokerAccessEntry_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getBrokerAccessEntry_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getBrokerAccessEntry_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getBrokerAccessEntry_presult__isset {
  _TradeHostingStorage_getBrokerAccessEntry_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getBrokerAccessEntry_presult__isset;

class TradeHostingStorage_getBrokerAccessEntry_presult {
 public:


  virtual ~TradeHostingStorage_getBrokerAccessEntry_presult() throw() {}

  std::vector< ::BrokerAccessEntry> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getBrokerAccessEntry_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_setTradeAccountInvalid_args__isset {
  _TradeHostingStorage_setTradeAccountInvalid_args__isset() : platformArgs(false), tradeAccountId(false), invalidDescription(false) {}
  bool platformArgs;
  bool tradeAccountId;
  bool invalidDescription;
} _TradeHostingStorage_setTradeAccountInvalid_args__isset;

class TradeHostingStorage_setTradeAccountInvalid_args {
 public:

  TradeHostingStorage_setTradeAccountInvalid_args() : tradeAccountId(0) {
  }

  virtual ~TradeHostingStorage_setTradeAccountInvalid_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t tradeAccountId;
  TradeAccountInvalidDescription invalidDescription;

  _TradeHostingStorage_setTradeAccountInvalid_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
  }

  void __set_invalidDescription(const TradeAccountInvalidDescription& val) {
    invalidDescription = val;
  }

  bool operator == (const TradeHostingStorage_setTradeAccountInvalid_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (!(invalidDescription == rhs.invalidDescription))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_setTradeAccountInvalid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_setTradeAccountInvalid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_setTradeAccountInvalid_pargs {
 public:


  virtual ~TradeHostingStorage_setTradeAccountInvalid_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* tradeAccountId;
  const TradeAccountInvalidDescription* invalidDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_setTradeAccountInvalid_result__isset {
  _TradeHostingStorage_setTradeAccountInvalid_result__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_setTradeAccountInvalid_result__isset;

class TradeHostingStorage_setTradeAccountInvalid_result {
 public:

  TradeHostingStorage_setTradeAccountInvalid_result() {
  }

  virtual ~TradeHostingStorage_setTradeAccountInvalid_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_setTradeAccountInvalid_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_setTradeAccountInvalid_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_setTradeAccountInvalid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_setTradeAccountInvalid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_setTradeAccountInvalid_presult__isset {
  _TradeHostingStorage_setTradeAccountInvalid_presult__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_setTradeAccountInvalid_presult__isset;

class TradeHostingStorage_setTradeAccountInvalid_presult {
 public:


  virtual ~TradeHostingStorage_setTradeAccountInvalid_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_setTradeAccountInvalid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_setTradeAccountActive_args__isset {
  _TradeHostingStorage_setTradeAccountActive_args__isset() : platformArgs(false), tradeAccountId(false) {}
  bool platformArgs;
  bool tradeAccountId;
} _TradeHostingStorage_setTradeAccountActive_args__isset;

class TradeHostingStorage_setTradeAccountActive_args {
 public:

  TradeHostingStorage_setTradeAccountActive_args() : tradeAccountId(0) {
  }

  virtual ~TradeHostingStorage_setTradeAccountActive_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t tradeAccountId;

  _TradeHostingStorage_setTradeAccountActive_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
  }

  bool operator == (const TradeHostingStorage_setTradeAccountActive_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(tradeAccountId == rhs.tradeAccountId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_setTradeAccountActive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_setTradeAccountActive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_setTradeAccountActive_pargs {
 public:


  virtual ~TradeHostingStorage_setTradeAccountActive_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* tradeAccountId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_setTradeAccountActive_result__isset {
  _TradeHostingStorage_setTradeAccountActive_result__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_setTradeAccountActive_result__isset;

class TradeHostingStorage_setTradeAccountActive_result {
 public:

  TradeHostingStorage_setTradeAccountActive_result() {
  }

  virtual ~TradeHostingStorage_setTradeAccountActive_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_setTradeAccountActive_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_setTradeAccountActive_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_setTradeAccountActive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_setTradeAccountActive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_setTradeAccountActive_presult__isset {
  _TradeHostingStorage_setTradeAccountActive_presult__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_setTradeAccountActive_presult__isset;

class TradeHostingStorage_setTradeAccountActive_presult {
 public:


  virtual ~TradeHostingStorage_setTradeAccountActive_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_setTradeAccountActive_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_getAllTradeAccounts_args__isset {
  _TradeHostingStorage_getAllTradeAccounts_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingStorage_getAllTradeAccounts_args__isset;

class TradeHostingStorage_getAllTradeAccounts_args {
 public:

  TradeHostingStorage_getAllTradeAccounts_args() {
  }

  virtual ~TradeHostingStorage_getAllTradeAccounts_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingStorage_getAllTradeAccounts_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingStorage_getAllTradeAccounts_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getAllTradeAccounts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getAllTradeAccounts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getAllTradeAccounts_pargs {
 public:


  virtual ~TradeHostingStorage_getAllTradeAccounts_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getAllTradeAccounts_result__isset {
  _TradeHostingStorage_getAllTradeAccounts_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getAllTradeAccounts_result__isset;

class TradeHostingStorage_getAllTradeAccounts_result {
 public:

  TradeHostingStorage_getAllTradeAccounts_result() {
  }

  virtual ~TradeHostingStorage_getAllTradeAccounts_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingTradeAccount>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getAllTradeAccounts_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getAllTradeAccounts_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getAllTradeAccounts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getAllTradeAccounts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getAllTradeAccounts_presult__isset {
  _TradeHostingStorage_getAllTradeAccounts_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getAllTradeAccounts_presult__isset;

class TradeHostingStorage_getAllTradeAccounts_presult {
 public:


  virtual ~TradeHostingStorage_getAllTradeAccounts_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getAllTradeAccounts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_getBrokerAccessEntryFromCloud_args__isset {
  _TradeHostingStorage_getBrokerAccessEntryFromCloud_args__isset() : platformArgs(false), tradeBrokerId(false), tradeBrokerAccessId(false) {}
  bool platformArgs;
  bool tradeBrokerId;
  bool tradeBrokerAccessId;
} _TradeHostingStorage_getBrokerAccessEntryFromCloud_args__isset;

class TradeHostingStorage_getBrokerAccessEntryFromCloud_args {
 public:

  TradeHostingStorage_getBrokerAccessEntryFromCloud_args() : tradeBrokerId(0), tradeBrokerAccessId(0) {
  }

  virtual ~TradeHostingStorage_getBrokerAccessEntryFromCloud_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t tradeBrokerId;
  int64_t tradeBrokerAccessId;

  _TradeHostingStorage_getBrokerAccessEntryFromCloud_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_tradeBrokerId(const int64_t val) {
    tradeBrokerId = val;
  }

  void __set_tradeBrokerAccessId(const int64_t val) {
    tradeBrokerAccessId = val;
  }

  bool operator == (const TradeHostingStorage_getBrokerAccessEntryFromCloud_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(tradeBrokerId == rhs.tradeBrokerId))
      return false;
    if (!(tradeBrokerAccessId == rhs.tradeBrokerAccessId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getBrokerAccessEntryFromCloud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getBrokerAccessEntryFromCloud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getBrokerAccessEntryFromCloud_pargs {
 public:


  virtual ~TradeHostingStorage_getBrokerAccessEntryFromCloud_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* tradeBrokerId;
  const int64_t* tradeBrokerAccessId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getBrokerAccessEntryFromCloud_result__isset {
  _TradeHostingStorage_getBrokerAccessEntryFromCloud_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getBrokerAccessEntryFromCloud_result__isset;

class TradeHostingStorage_getBrokerAccessEntryFromCloud_result {
 public:

  TradeHostingStorage_getBrokerAccessEntryFromCloud_result() {
  }

  virtual ~TradeHostingStorage_getBrokerAccessEntryFromCloud_result() throw() {}

  std::vector< ::BrokerAccessEntry>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getBrokerAccessEntryFromCloud_result__isset __isset;

  void __set_success(const std::vector< ::BrokerAccessEntry> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getBrokerAccessEntryFromCloud_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getBrokerAccessEntryFromCloud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getBrokerAccessEntryFromCloud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getBrokerAccessEntryFromCloud_presult__isset {
  _TradeHostingStorage_getBrokerAccessEntryFromCloud_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getBrokerAccessEntryFromCloud_presult__isset;

class TradeHostingStorage_getBrokerAccessEntryFromCloud_presult {
 public:


  virtual ~TradeHostingStorage_getBrokerAccessEntryFromCloud_presult() throw() {}

  std::vector< ::BrokerAccessEntry> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getBrokerAccessEntryFromCloud_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_createComposeGraphId_args__isset {
  _TradeHostingStorage_createComposeGraphId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingStorage_createComposeGraphId_args__isset;

class TradeHostingStorage_createComposeGraphId_args {
 public:

  TradeHostingStorage_createComposeGraphId_args() {
  }

  virtual ~TradeHostingStorage_createComposeGraphId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingStorage_createComposeGraphId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingStorage_createComposeGraphId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createComposeGraphId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createComposeGraphId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_createComposeGraphId_pargs {
 public:


  virtual ~TradeHostingStorage_createComposeGraphId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createComposeGraphId_result__isset {
  _TradeHostingStorage_createComposeGraphId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createComposeGraphId_result__isset;

class TradeHostingStorage_createComposeGraphId_result {
 public:

  TradeHostingStorage_createComposeGraphId_result() : success(0) {
  }

  virtual ~TradeHostingStorage_createComposeGraphId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createComposeGraphId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_createComposeGraphId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createComposeGraphId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createComposeGraphId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createComposeGraphId_presult__isset {
  _TradeHostingStorage_createComposeGraphId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createComposeGraphId_presult__isset;

class TradeHostingStorage_createComposeGraphId_presult {
 public:


  virtual ~TradeHostingStorage_createComposeGraphId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createComposeGraphId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_createTradeAccountId_args__isset {
  _TradeHostingStorage_createTradeAccountId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingStorage_createTradeAccountId_args__isset;

class TradeHostingStorage_createTradeAccountId_args {
 public:

  TradeHostingStorage_createTradeAccountId_args() {
  }

  virtual ~TradeHostingStorage_createTradeAccountId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingStorage_createTradeAccountId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingStorage_createTradeAccountId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createTradeAccountId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createTradeAccountId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_createTradeAccountId_pargs {
 public:


  virtual ~TradeHostingStorage_createTradeAccountId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createTradeAccountId_result__isset {
  _TradeHostingStorage_createTradeAccountId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createTradeAccountId_result__isset;

class TradeHostingStorage_createTradeAccountId_result {
 public:

  TradeHostingStorage_createTradeAccountId_result() : success(0) {
  }

  virtual ~TradeHostingStorage_createTradeAccountId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createTradeAccountId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_createTradeAccountId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createTradeAccountId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createTradeAccountId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createTradeAccountId_presult__isset {
  _TradeHostingStorage_createTradeAccountId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createTradeAccountId_presult__isset;

class TradeHostingStorage_createTradeAccountId_presult {
 public:


  virtual ~TradeHostingStorage_createTradeAccountId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createTradeAccountId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_createSubAccountId_args__isset {
  _TradeHostingStorage_createSubAccountId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingStorage_createSubAccountId_args__isset;

class TradeHostingStorage_createSubAccountId_args {
 public:

  TradeHostingStorage_createSubAccountId_args() {
  }

  virtual ~TradeHostingStorage_createSubAccountId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingStorage_createSubAccountId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingStorage_createSubAccountId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createSubAccountId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createSubAccountId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_createSubAccountId_pargs {
 public:


  virtual ~TradeHostingStorage_createSubAccountId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createSubAccountId_result__isset {
  _TradeHostingStorage_createSubAccountId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createSubAccountId_result__isset;

class TradeHostingStorage_createSubAccountId_result {
 public:

  TradeHostingStorage_createSubAccountId_result() : success(0) {
  }

  virtual ~TradeHostingStorage_createSubAccountId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createSubAccountId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_createSubAccountId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_createSubAccountId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_createSubAccountId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_createSubAccountId_presult__isset {
  _TradeHostingStorage_createSubAccountId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_createSubAccountId_presult__isset;

class TradeHostingStorage_createSubAccountId_presult {
 public:


  virtual ~TradeHostingStorage_createSubAccountId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_createSubAccountId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_updateConfig_args__isset {
  _TradeHostingStorage_updateConfig_args__isset() : platformArgs(false), configDescription(false) {}
  bool platformArgs;
  bool configDescription;
} _TradeHostingStorage_updateConfig_args__isset;

class TradeHostingStorage_updateConfig_args {
 public:

  TradeHostingStorage_updateConfig_args() {
  }

  virtual ~TradeHostingStorage_updateConfig_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  UpdateConfigDescription configDescription;

  _TradeHostingStorage_updateConfig_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_configDescription(const UpdateConfigDescription& val) {
    configDescription = val;
  }

  bool operator == (const TradeHostingStorage_updateConfig_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(configDescription == rhs.configDescription))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_updateConfig_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_updateConfig_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_updateConfig_pargs {
 public:


  virtual ~TradeHostingStorage_updateConfig_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const UpdateConfigDescription* configDescription;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_updateConfig_result__isset {
  _TradeHostingStorage_updateConfig_result__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_updateConfig_result__isset;

class TradeHostingStorage_updateConfig_result {
 public:

  TradeHostingStorage_updateConfig_result() {
  }

  virtual ~TradeHostingStorage_updateConfig_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_updateConfig_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_updateConfig_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_updateConfig_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_updateConfig_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_updateConfig_presult__isset {
  _TradeHostingStorage_updateConfig_presult__isset() : err(false) {}
  bool err;
} _TradeHostingStorage_updateConfig_presult__isset;

class TradeHostingStorage_updateConfig_presult {
 public:


  virtual ~TradeHostingStorage_updateConfig_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_updateConfig_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_getMachineId_args__isset {
  _TradeHostingStorage_getMachineId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingStorage_getMachineId_args__isset;

class TradeHostingStorage_getMachineId_args {
 public:

  TradeHostingStorage_getMachineId_args() {
  }

  virtual ~TradeHostingStorage_getMachineId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingStorage_getMachineId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingStorage_getMachineId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getMachineId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getMachineId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getMachineId_pargs {
 public:


  virtual ~TradeHostingStorage_getMachineId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getMachineId_result__isset {
  _TradeHostingStorage_getMachineId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getMachineId_result__isset;

class TradeHostingStorage_getMachineId_result {
 public:

  TradeHostingStorage_getMachineId_result() : success(0) {
  }

  virtual ~TradeHostingStorage_getMachineId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getMachineId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getMachineId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getMachineId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getMachineId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getMachineId_presult__isset {
  _TradeHostingStorage_getMachineId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getMachineId_presult__isset;

class TradeHostingStorage_getMachineId_presult {
 public:


  virtual ~TradeHostingStorage_getMachineId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getMachineId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingStorage_getHostingSession_args__isset {
  _TradeHostingStorage_getHostingSession_args__isset() : platformArgs(false), subUserId(false) {}
  bool platformArgs;
  bool subUserId;
} _TradeHostingStorage_getHostingSession_args__isset;

class TradeHostingStorage_getHostingSession_args {
 public:

  TradeHostingStorage_getHostingSession_args() : subUserId(0) {
  }

  virtual ~TradeHostingStorage_getHostingSession_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int32_t subUserId;

  _TradeHostingStorage_getHostingSession_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
  }

  bool operator == (const TradeHostingStorage_getHostingSession_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(subUserId == rhs.subUserId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getHostingSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getHostingSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingStorage_getHostingSession_pargs {
 public:


  virtual ~TradeHostingStorage_getHostingSession_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int32_t* subUserId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getHostingSession_result__isset {
  _TradeHostingStorage_getHostingSession_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getHostingSession_result__isset;

class TradeHostingStorage_getHostingSession_result {
 public:

  TradeHostingStorage_getHostingSession_result() {
  }

  virtual ~TradeHostingStorage_getHostingSession_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingSession>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getHostingSession_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingSession> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingStorage_getHostingSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingStorage_getHostingSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingStorage_getHostingSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingStorage_getHostingSession_presult__isset {
  _TradeHostingStorage_getHostingSession_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingStorage_getHostingSession_presult__isset;

class TradeHostingStorage_getHostingSession_presult {
 public:


  virtual ~TradeHostingStorage_getHostingSession_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingSession> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingStorage_getHostingSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TradeHostingStorageClient : virtual public TradeHostingStorageIf {
 public:
  TradeHostingStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TradeHostingStorageClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getTraddeAccount(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void send_getTraddeAccount(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void recv_getTraddeAccount(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return);
  void getBrokerAccessEntry(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void send_getBrokerAccessEntry(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void recv_getBrokerAccessEntry(std::vector< ::BrokerAccessEntry> & _return);
  void setTradeAccountInvalid(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId, const TradeAccountInvalidDescription& invalidDescription);
  void send_setTradeAccountInvalid(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId, const TradeAccountInvalidDescription& invalidDescription);
  void recv_setTradeAccountInvalid();
  void setTradeAccountActive(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void send_setTradeAccountActive(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId);
  void recv_setTradeAccountActive();
  void getAllTradeAccounts(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getAllTradeAccounts(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getAllTradeAccounts(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return);
  void getBrokerAccessEntryFromCloud(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeBrokerId, const int64_t tradeBrokerAccessId);
  void send_getBrokerAccessEntryFromCloud(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeBrokerId, const int64_t tradeBrokerAccessId);
  void recv_getBrokerAccessEntryFromCloud(std::vector< ::BrokerAccessEntry> & _return);
  int64_t createComposeGraphId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createComposeGraphId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createComposeGraphId();
  int64_t createTradeAccountId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createTradeAccountId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createTradeAccountId();
  int64_t createSubAccountId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createSubAccountId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createSubAccountId();
  void updateConfig(const  ::platform::comm::PlatformArgs& platformArgs, const UpdateConfigDescription& configDescription);
  void send_updateConfig(const  ::platform::comm::PlatformArgs& platformArgs, const UpdateConfigDescription& configDescription);
  void recv_updateConfig();
  int64_t getMachineId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getMachineId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_getMachineId();
  void getHostingSession(std::vector< ::xueqiao::trade::hosting::HostingSession> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId);
  void send_getHostingSession(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId);
  void recv_getHostingSession(std::vector< ::xueqiao::trade::hosting::HostingSession> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TradeHostingStorageProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TradeHostingStorageIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TradeHostingStorageProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTraddeAccount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBrokerAccessEntry(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTradeAccountInvalid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setTradeAccountActive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllTradeAccounts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getBrokerAccessEntryFromCloud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createComposeGraphId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createTradeAccountId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createSubAccountId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateConfig(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMachineId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHostingSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TradeHostingStorageProcessor(boost::shared_ptr<TradeHostingStorageIf> iface) :
    iface_(iface) {
    processMap_["getTraddeAccount"] = &TradeHostingStorageProcessor::process_getTraddeAccount;
    processMap_["getBrokerAccessEntry"] = &TradeHostingStorageProcessor::process_getBrokerAccessEntry;
    processMap_["setTradeAccountInvalid"] = &TradeHostingStorageProcessor::process_setTradeAccountInvalid;
    processMap_["setTradeAccountActive"] = &TradeHostingStorageProcessor::process_setTradeAccountActive;
    processMap_["getAllTradeAccounts"] = &TradeHostingStorageProcessor::process_getAllTradeAccounts;
    processMap_["getBrokerAccessEntryFromCloud"] = &TradeHostingStorageProcessor::process_getBrokerAccessEntryFromCloud;
    processMap_["createComposeGraphId"] = &TradeHostingStorageProcessor::process_createComposeGraphId;
    processMap_["createTradeAccountId"] = &TradeHostingStorageProcessor::process_createTradeAccountId;
    processMap_["createSubAccountId"] = &TradeHostingStorageProcessor::process_createSubAccountId;
    processMap_["updateConfig"] = &TradeHostingStorageProcessor::process_updateConfig;
    processMap_["getMachineId"] = &TradeHostingStorageProcessor::process_getMachineId;
    processMap_["getHostingSession"] = &TradeHostingStorageProcessor::process_getHostingSession;
  }

  virtual ~TradeHostingStorageProcessor() {}
};

class TradeHostingStorageProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TradeHostingStorageProcessorFactory(const ::boost::shared_ptr< TradeHostingStorageIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TradeHostingStorageIfFactory > handlerFactory_;
};

class TradeHostingStorageMultiface : virtual public TradeHostingStorageIf {
 public:
  TradeHostingStorageMultiface(std::vector<boost::shared_ptr<TradeHostingStorageIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TradeHostingStorageMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TradeHostingStorageIf> > ifaces_;
  TradeHostingStorageMultiface() {}
  void add(boost::shared_ptr<TradeHostingStorageIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getTraddeAccount(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTraddeAccount(_return, platformArgs, tradeAccountId);
    }
    ifaces_[i]->getTraddeAccount(_return, platformArgs, tradeAccountId);
    return;
  }

  void getBrokerAccessEntry(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBrokerAccessEntry(_return, platformArgs, tradeAccountId);
    }
    ifaces_[i]->getBrokerAccessEntry(_return, platformArgs, tradeAccountId);
    return;
  }

  void setTradeAccountInvalid(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId, const TradeAccountInvalidDescription& invalidDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTradeAccountInvalid(platformArgs, tradeAccountId, invalidDescription);
    }
    ifaces_[i]->setTradeAccountInvalid(platformArgs, tradeAccountId, invalidDescription);
  }

  void setTradeAccountActive(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeAccountId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setTradeAccountActive(platformArgs, tradeAccountId);
    }
    ifaces_[i]->setTradeAccountActive(platformArgs, tradeAccountId);
  }

  void getAllTradeAccounts(std::vector< ::xueqiao::trade::hosting::HostingTradeAccount> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllTradeAccounts(_return, platformArgs);
    }
    ifaces_[i]->getAllTradeAccounts(_return, platformArgs);
    return;
  }

  void getBrokerAccessEntryFromCloud(std::vector< ::BrokerAccessEntry> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t tradeBrokerId, const int64_t tradeBrokerAccessId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getBrokerAccessEntryFromCloud(_return, platformArgs, tradeBrokerId, tradeBrokerAccessId);
    }
    ifaces_[i]->getBrokerAccessEntryFromCloud(_return, platformArgs, tradeBrokerId, tradeBrokerAccessId);
    return;
  }

  int64_t createComposeGraphId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createComposeGraphId(platformArgs);
    }
    return ifaces_[i]->createComposeGraphId(platformArgs);
  }

  int64_t createTradeAccountId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createTradeAccountId(platformArgs);
    }
    return ifaces_[i]->createTradeAccountId(platformArgs);
  }

  int64_t createSubAccountId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createSubAccountId(platformArgs);
    }
    return ifaces_[i]->createSubAccountId(platformArgs);
  }

  void updateConfig(const  ::platform::comm::PlatformArgs& platformArgs, const UpdateConfigDescription& configDescription) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateConfig(platformArgs, configDescription);
    }
    ifaces_[i]->updateConfig(platformArgs, configDescription);
  }

  int64_t getMachineId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMachineId(platformArgs);
    }
    return ifaces_[i]->getMachineId(platformArgs);
  }

  void getHostingSession(std::vector< ::xueqiao::trade::hosting::HostingSession> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHostingSession(_return, platformArgs, subUserId);
    }
    ifaces_[i]->getHostingSession(_return, platformArgs, subUserId);
    return;
  }

};

}}}}} // namespace

#endif
