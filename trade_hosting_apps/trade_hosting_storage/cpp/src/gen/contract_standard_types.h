/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef contract_standard_TYPES_H
#define contract_standard_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"


namespace xueqiao { namespace contract { namespace standard {

struct SledCommodityType {
  enum type {
    NONE = 0,
    FUTURES = 1,
    OPTION = 2,
    SPOT = 3,
    SPREAD_MONTH = 4,
    SPREAD_COMMODITY = 5,
    BUL = 6,
    BER = 7,
    STD = 8,
    STG = 9,
    PRT = 10,
    DIRECTFOREX = 11,
    INDIRECTFOREX = 12,
    CROSSFOREX = 13,
    INDEX = 14,
    STOCK = 15
  };
};

extern const std::map<int, const char*> _SledCommodityType_VALUES_TO_NAMES;

struct CmbDirect {
  enum type {
    NONE = 0,
    FIRST = 1,
    SECOND = 2
  };
};

extern const std::map<int, const char*> _CmbDirect_VALUES_TO_NAMES;

struct DeliveryMode {
  enum type {
    NONE = 0,
    GOODS = 1,
    CASH = 2,
    EXECUTE = 3,
    ABANDON = 4,
    HKF = 5
  };
};

extern const std::map<int, const char*> _DeliveryMode_VALUES_TO_NAMES;

struct CommodityState {
  enum type {
    NONE = 0,
    TRADEABLE = 1,
    NO_TRADEABLE = 2,
    CLOSE_ONLY = 3
  };
};

extern const std::map<int, const char*> _CommodityState_VALUES_TO_NAMES;

struct ContractStatus {
  enum type {
    NORMAL = 0,
    EXPIRED = 1
  };
};

extern const std::map<int, const char*> _ContractStatus_VALUES_TO_NAMES;

struct CalculateMode {
  enum type {
    COMBINE = 0,
    PERCENTAGE = 1,
    QUOTA = 2,
    CHAPERCENTAGE = 3,
    CHAQUOTA = 4,
    DISCOUNT = 5
  };
};

extern const std::map<int, const char*> _CalculateMode_VALUES_TO_NAMES;

struct ExchangeOperatingMicType {
  enum type {
    OPERATING_MIC = 0,
    SEGMENT_MIC = 1
  };
};

extern const std::map<int, const char*> _ExchangeOperatingMicType_VALUES_TO_NAMES;

struct TechPlatformEnv {
  enum type {
    NONE = 0,
    REAL = 1,
    SIM = 2
  };
};

extern const std::map<int, const char*> _TechPlatformEnv_VALUES_TO_NAMES;

struct TechPlatform {
  enum type {
    NONE = 0,
    CTP = 1,
    ESUNNY = 2,
    SP = 3,
    ESUNNY_3 = 4
  };
};

extern const std::map<int, const char*> _TechPlatform_VALUES_TO_NAMES;

struct SledContractErrorCode {
  enum type {
    SLED_COMMODITY_NOT_FOUND = 1000,
    COMMODITY_MAP_NOT_FOUND = 1001,
    SLED_EXCHANGE_NOT_FOUND = 1002,
    COMMODITY_MAP_UPDATE_FORBID = 1003,
    SLED_COMMODITY_EXISTS = 1004,
    SLED_EXCHANGE_EXISTS = 1005,
    CONTRACT_VERSION_NOT_FOUND = 1006,
    COMMODITY_MAP_EXISTS = 1007,
    SLED_CONTRACT_NOT_FOUND = 1008
  };
};

extern const std::map<int, const char*> _SledContractErrorCode_VALUES_TO_NAMES;

typedef struct _SledExchange__isset {
  _SledExchange__isset() : sledExchangeId(false), exchangeMic(false), country(false), countryCode(false), operatingMic(false), operatingMicType(false), nameInstitution(false), acronym(false), city(false), website(false), cnName(false), cnAcronym(false), activeStartTimestamp(false), activeEndTimestamp(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool sledExchangeId;
  bool exchangeMic;
  bool country;
  bool countryCode;
  bool operatingMic;
  bool operatingMicType;
  bool nameInstitution;
  bool acronym;
  bool city;
  bool website;
  bool cnName;
  bool cnAcronym;
  bool activeStartTimestamp;
  bool activeEndTimestamp;
  bool createTimestamp;
  bool lastModityTimestamp;
} _SledExchange__isset;

class SledExchange {
 public:

  static const char* ascii_fingerprint; // = "CCF16AD99237ADE74FD1141A9AC4D7F8";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0xF1,0x6A,0xD9,0x92,0x37,0xAD,0xE7,0x4F,0xD1,0x14,0x1A,0x9A,0xC4,0xD7,0xF8};

  SledExchange() : sledExchangeId(0), exchangeMic(), country(), countryCode(), operatingMic(), operatingMicType((ExchangeOperatingMicType::type)0), nameInstitution(), acronym(), city(), website(), cnName(), cnAcronym(), activeStartTimestamp(0), activeEndTimestamp(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~SledExchange() throw() {}

  int32_t sledExchangeId;
  std::string exchangeMic;
  std::string country;
  std::string countryCode;
  std::string operatingMic;
  ExchangeOperatingMicType::type operatingMicType;
  std::string nameInstitution;
  std::string acronym;
  std::string city;
  std::string website;
  std::string cnName;
  std::string cnAcronym;
  int64_t activeStartTimestamp;
  int64_t activeEndTimestamp;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _SledExchange__isset __isset;

  void __set_sledExchangeId(const int32_t val) {
    sledExchangeId = val;
    __isset.sledExchangeId = true;
  }

  void __set_exchangeMic(const std::string& val) {
    exchangeMic = val;
    __isset.exchangeMic = true;
  }

  void __set_country(const std::string& val) {
    country = val;
    __isset.country = true;
  }

  void __set_countryCode(const std::string& val) {
    countryCode = val;
    __isset.countryCode = true;
  }

  void __set_operatingMic(const std::string& val) {
    operatingMic = val;
    __isset.operatingMic = true;
  }

  void __set_operatingMicType(const ExchangeOperatingMicType::type val) {
    operatingMicType = val;
    __isset.operatingMicType = true;
  }

  void __set_nameInstitution(const std::string& val) {
    nameInstitution = val;
    __isset.nameInstitution = true;
  }

  void __set_acronym(const std::string& val) {
    acronym = val;
    __isset.acronym = true;
  }

  void __set_city(const std::string& val) {
    city = val;
    __isset.city = true;
  }

  void __set_website(const std::string& val) {
    website = val;
    __isset.website = true;
  }

  void __set_cnName(const std::string& val) {
    cnName = val;
    __isset.cnName = true;
  }

  void __set_cnAcronym(const std::string& val) {
    cnAcronym = val;
    __isset.cnAcronym = true;
  }

  void __set_activeStartTimestamp(const int64_t val) {
    activeStartTimestamp = val;
    __isset.activeStartTimestamp = true;
  }

  void __set_activeEndTimestamp(const int64_t val) {
    activeEndTimestamp = val;
    __isset.activeEndTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const SledExchange & rhs) const
  {
    if (__isset.sledExchangeId != rhs.__isset.sledExchangeId)
      return false;
    else if (__isset.sledExchangeId && !(sledExchangeId == rhs.sledExchangeId))
      return false;
    if (__isset.exchangeMic != rhs.__isset.exchangeMic)
      return false;
    else if (__isset.exchangeMic && !(exchangeMic == rhs.exchangeMic))
      return false;
    if (__isset.country != rhs.__isset.country)
      return false;
    else if (__isset.country && !(country == rhs.country))
      return false;
    if (__isset.countryCode != rhs.__isset.countryCode)
      return false;
    else if (__isset.countryCode && !(countryCode == rhs.countryCode))
      return false;
    if (__isset.operatingMic != rhs.__isset.operatingMic)
      return false;
    else if (__isset.operatingMic && !(operatingMic == rhs.operatingMic))
      return false;
    if (__isset.operatingMicType != rhs.__isset.operatingMicType)
      return false;
    else if (__isset.operatingMicType && !(operatingMicType == rhs.operatingMicType))
      return false;
    if (__isset.nameInstitution != rhs.__isset.nameInstitution)
      return false;
    else if (__isset.nameInstitution && !(nameInstitution == rhs.nameInstitution))
      return false;
    if (__isset.acronym != rhs.__isset.acronym)
      return false;
    else if (__isset.acronym && !(acronym == rhs.acronym))
      return false;
    if (__isset.city != rhs.__isset.city)
      return false;
    else if (__isset.city && !(city == rhs.city))
      return false;
    if (__isset.website != rhs.__isset.website)
      return false;
    else if (__isset.website && !(website == rhs.website))
      return false;
    if (__isset.cnName != rhs.__isset.cnName)
      return false;
    else if (__isset.cnName && !(cnName == rhs.cnName))
      return false;
    if (__isset.cnAcronym != rhs.__isset.cnAcronym)
      return false;
    else if (__isset.cnAcronym && !(cnAcronym == rhs.cnAcronym))
      return false;
    if (__isset.activeStartTimestamp != rhs.__isset.activeStartTimestamp)
      return false;
    else if (__isset.activeStartTimestamp && !(activeStartTimestamp == rhs.activeStartTimestamp))
      return false;
    if (__isset.activeEndTimestamp != rhs.__isset.activeEndTimestamp)
      return false;
    else if (__isset.activeEndTimestamp && !(activeEndTimestamp == rhs.activeEndTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const SledExchange &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledExchange & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledExchange &a, SledExchange &b);

typedef struct _SledCommodityConfig__isset {
  _SledCommodityConfig__isset() : configId(false), deliveryMode(false), deliveryDays(false), maxSingleOrderVol(false), maxHoldVol(false), commissionCalculateMode(false), openCloseFee(false), marginCalculateMode(false), initialMargin(false), maintenanceMargin(false), sellInitialMargin(false), sellMaintenanceMargin(false), lockMargin(false), activeStartTimestamp(false), activeEndTimestamp(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool configId;
  bool deliveryMode;
  bool deliveryDays;
  bool maxSingleOrderVol;
  bool maxHoldVol;
  bool commissionCalculateMode;
  bool openCloseFee;
  bool marginCalculateMode;
  bool initialMargin;
  bool maintenanceMargin;
  bool sellInitialMargin;
  bool sellMaintenanceMargin;
  bool lockMargin;
  bool activeStartTimestamp;
  bool activeEndTimestamp;
  bool createTimestamp;
  bool lastModityTimestamp;
} _SledCommodityConfig__isset;

class SledCommodityConfig {
 public:

  static const char* ascii_fingerprint; // = "4C9CFFBA25D9C54557B074D1D0F70722";
  static const uint8_t binary_fingerprint[16]; // = {0x4C,0x9C,0xFF,0xBA,0x25,0xD9,0xC5,0x45,0x57,0xB0,0x74,0xD1,0xD0,0xF7,0x07,0x22};

  SledCommodityConfig() : configId(0), deliveryMode((DeliveryMode::type)0), deliveryDays(0), maxSingleOrderVol(0), maxHoldVol(0), commissionCalculateMode((CalculateMode::type)0), openCloseFee(0), marginCalculateMode((CalculateMode::type)0), initialMargin(0), maintenanceMargin(0), sellInitialMargin(0), sellMaintenanceMargin(0), lockMargin(0), activeStartTimestamp(0), activeEndTimestamp(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~SledCommodityConfig() throw() {}

  int32_t configId;
  DeliveryMode::type deliveryMode;
  int32_t deliveryDays;
  int32_t maxSingleOrderVol;
  int32_t maxHoldVol;
  CalculateMode::type commissionCalculateMode;
  double openCloseFee;
  CalculateMode::type marginCalculateMode;
  double initialMargin;
  double maintenanceMargin;
  double sellInitialMargin;
  double sellMaintenanceMargin;
  double lockMargin;
  int64_t activeStartTimestamp;
  int64_t activeEndTimestamp;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _SledCommodityConfig__isset __isset;

  void __set_configId(const int32_t val) {
    configId = val;
    __isset.configId = true;
  }

  void __set_deliveryMode(const DeliveryMode::type val) {
    deliveryMode = val;
    __isset.deliveryMode = true;
  }

  void __set_deliveryDays(const int32_t val) {
    deliveryDays = val;
    __isset.deliveryDays = true;
  }

  void __set_maxSingleOrderVol(const int32_t val) {
    maxSingleOrderVol = val;
    __isset.maxSingleOrderVol = true;
  }

  void __set_maxHoldVol(const int32_t val) {
    maxHoldVol = val;
    __isset.maxHoldVol = true;
  }

  void __set_commissionCalculateMode(const CalculateMode::type val) {
    commissionCalculateMode = val;
    __isset.commissionCalculateMode = true;
  }

  void __set_openCloseFee(const double val) {
    openCloseFee = val;
    __isset.openCloseFee = true;
  }

  void __set_marginCalculateMode(const CalculateMode::type val) {
    marginCalculateMode = val;
    __isset.marginCalculateMode = true;
  }

  void __set_initialMargin(const double val) {
    initialMargin = val;
    __isset.initialMargin = true;
  }

  void __set_maintenanceMargin(const double val) {
    maintenanceMargin = val;
    __isset.maintenanceMargin = true;
  }

  void __set_sellInitialMargin(const double val) {
    sellInitialMargin = val;
    __isset.sellInitialMargin = true;
  }

  void __set_sellMaintenanceMargin(const double val) {
    sellMaintenanceMargin = val;
    __isset.sellMaintenanceMargin = true;
  }

  void __set_lockMargin(const double val) {
    lockMargin = val;
    __isset.lockMargin = true;
  }

  void __set_activeStartTimestamp(const int64_t val) {
    activeStartTimestamp = val;
    __isset.activeStartTimestamp = true;
  }

  void __set_activeEndTimestamp(const int64_t val) {
    activeEndTimestamp = val;
    __isset.activeEndTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const SledCommodityConfig & rhs) const
  {
    if (__isset.configId != rhs.__isset.configId)
      return false;
    else if (__isset.configId && !(configId == rhs.configId))
      return false;
    if (__isset.deliveryMode != rhs.__isset.deliveryMode)
      return false;
    else if (__isset.deliveryMode && !(deliveryMode == rhs.deliveryMode))
      return false;
    if (__isset.deliveryDays != rhs.__isset.deliveryDays)
      return false;
    else if (__isset.deliveryDays && !(deliveryDays == rhs.deliveryDays))
      return false;
    if (__isset.maxSingleOrderVol != rhs.__isset.maxSingleOrderVol)
      return false;
    else if (__isset.maxSingleOrderVol && !(maxSingleOrderVol == rhs.maxSingleOrderVol))
      return false;
    if (__isset.maxHoldVol != rhs.__isset.maxHoldVol)
      return false;
    else if (__isset.maxHoldVol && !(maxHoldVol == rhs.maxHoldVol))
      return false;
    if (__isset.commissionCalculateMode != rhs.__isset.commissionCalculateMode)
      return false;
    else if (__isset.commissionCalculateMode && !(commissionCalculateMode == rhs.commissionCalculateMode))
      return false;
    if (__isset.openCloseFee != rhs.__isset.openCloseFee)
      return false;
    else if (__isset.openCloseFee && !(openCloseFee == rhs.openCloseFee))
      return false;
    if (__isset.marginCalculateMode != rhs.__isset.marginCalculateMode)
      return false;
    else if (__isset.marginCalculateMode && !(marginCalculateMode == rhs.marginCalculateMode))
      return false;
    if (__isset.initialMargin != rhs.__isset.initialMargin)
      return false;
    else if (__isset.initialMargin && !(initialMargin == rhs.initialMargin))
      return false;
    if (__isset.maintenanceMargin != rhs.__isset.maintenanceMargin)
      return false;
    else if (__isset.maintenanceMargin && !(maintenanceMargin == rhs.maintenanceMargin))
      return false;
    if (__isset.sellInitialMargin != rhs.__isset.sellInitialMargin)
      return false;
    else if (__isset.sellInitialMargin && !(sellInitialMargin == rhs.sellInitialMargin))
      return false;
    if (__isset.sellMaintenanceMargin != rhs.__isset.sellMaintenanceMargin)
      return false;
    else if (__isset.sellMaintenanceMargin && !(sellMaintenanceMargin == rhs.sellMaintenanceMargin))
      return false;
    if (__isset.lockMargin != rhs.__isset.lockMargin)
      return false;
    else if (__isset.lockMargin && !(lockMargin == rhs.lockMargin))
      return false;
    if (__isset.activeStartTimestamp != rhs.__isset.activeStartTimestamp)
      return false;
    else if (__isset.activeStartTimestamp && !(activeStartTimestamp == rhs.activeStartTimestamp))
      return false;
    if (__isset.activeEndTimestamp != rhs.__isset.activeEndTimestamp)
      return false;
    else if (__isset.activeEndTimestamp && !(activeEndTimestamp == rhs.activeEndTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const SledCommodityConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledCommodityConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledCommodityConfig &a, SledCommodityConfig &b);

typedef struct _SledCommodity__isset {
  _SledCommodity__isset() : sledCommodityId(false), exchangeMic(false), sledCommodityType(false), sledCommodityCode(false), relateCommodityIds(false), tradeCurrency(false), timezone(false), contractSize(false), tickSize(false), denominator(false), cmbDirect(false), commodityState(false), sledCommodityConfig(false), engName(false), cnName(false), tcName(false), activeStartTimestamp(false), activeEndTimestamp(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool sledCommodityId;
  bool exchangeMic;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool relateCommodityIds;
  bool tradeCurrency;
  bool timezone;
  bool contractSize;
  bool tickSize;
  bool denominator;
  bool cmbDirect;
  bool commodityState;
  bool sledCommodityConfig;
  bool engName;
  bool cnName;
  bool tcName;
  bool activeStartTimestamp;
  bool activeEndTimestamp;
  bool createTimestamp;
  bool lastModityTimestamp;
} _SledCommodity__isset;

class SledCommodity {
 public:

  static const char* ascii_fingerprint; // = "8F1F7529523F3CD91BFD380B20F4B36E";
  static const uint8_t binary_fingerprint[16]; // = {0x8F,0x1F,0x75,0x29,0x52,0x3F,0x3C,0xD9,0x1B,0xFD,0x38,0x0B,0x20,0xF4,0xB3,0x6E};

  SledCommodity() : sledCommodityId(0), exchangeMic(), sledCommodityType((SledCommodityType::type)0), sledCommodityCode(), tradeCurrency(), timezone(), contractSize(0), tickSize(0), denominator(0), cmbDirect((CmbDirect::type)0), commodityState((CommodityState::type)0), engName(), cnName(), tcName(), activeStartTimestamp(0), activeEndTimestamp(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~SledCommodity() throw() {}

  int32_t sledCommodityId;
  std::string exchangeMic;
  SledCommodityType::type sledCommodityType;
  std::string sledCommodityCode;
  std::vector<int32_t>  relateCommodityIds;
  std::string tradeCurrency;
  std::string timezone;
  double contractSize;
  double tickSize;
  int32_t denominator;
  CmbDirect::type cmbDirect;
  CommodityState::type commodityState;
  std::vector<SledCommodityConfig>  sledCommodityConfig;
  std::string engName;
  std::string cnName;
  std::string tcName;
  int64_t activeStartTimestamp;
  int64_t activeEndTimestamp;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _SledCommodity__isset __isset;

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_exchangeMic(const std::string& val) {
    exchangeMic = val;
    __isset.exchangeMic = true;
  }

  void __set_sledCommodityType(const SledCommodityType::type val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_relateCommodityIds(const std::vector<int32_t> & val) {
    relateCommodityIds = val;
    __isset.relateCommodityIds = true;
  }

  void __set_tradeCurrency(const std::string& val) {
    tradeCurrency = val;
    __isset.tradeCurrency = true;
  }

  void __set_timezone(const std::string& val) {
    timezone = val;
    __isset.timezone = true;
  }

  void __set_contractSize(const double val) {
    contractSize = val;
    __isset.contractSize = true;
  }

  void __set_tickSize(const double val) {
    tickSize = val;
    __isset.tickSize = true;
  }

  void __set_denominator(const int32_t val) {
    denominator = val;
    __isset.denominator = true;
  }

  void __set_cmbDirect(const CmbDirect::type val) {
    cmbDirect = val;
    __isset.cmbDirect = true;
  }

  void __set_commodityState(const CommodityState::type val) {
    commodityState = val;
    __isset.commodityState = true;
  }

  void __set_sledCommodityConfig(const std::vector<SledCommodityConfig> & val) {
    sledCommodityConfig = val;
    __isset.sledCommodityConfig = true;
  }

  void __set_engName(const std::string& val) {
    engName = val;
    __isset.engName = true;
  }

  void __set_cnName(const std::string& val) {
    cnName = val;
    __isset.cnName = true;
  }

  void __set_tcName(const std::string& val) {
    tcName = val;
    __isset.tcName = true;
  }

  void __set_activeStartTimestamp(const int64_t val) {
    activeStartTimestamp = val;
    __isset.activeStartTimestamp = true;
  }

  void __set_activeEndTimestamp(const int64_t val) {
    activeEndTimestamp = val;
    __isset.activeEndTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const SledCommodity & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.exchangeMic != rhs.__isset.exchangeMic)
      return false;
    else if (__isset.exchangeMic && !(exchangeMic == rhs.exchangeMic))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.relateCommodityIds != rhs.__isset.relateCommodityIds)
      return false;
    else if (__isset.relateCommodityIds && !(relateCommodityIds == rhs.relateCommodityIds))
      return false;
    if (__isset.tradeCurrency != rhs.__isset.tradeCurrency)
      return false;
    else if (__isset.tradeCurrency && !(tradeCurrency == rhs.tradeCurrency))
      return false;
    if (__isset.timezone != rhs.__isset.timezone)
      return false;
    else if (__isset.timezone && !(timezone == rhs.timezone))
      return false;
    if (__isset.contractSize != rhs.__isset.contractSize)
      return false;
    else if (__isset.contractSize && !(contractSize == rhs.contractSize))
      return false;
    if (__isset.tickSize != rhs.__isset.tickSize)
      return false;
    else if (__isset.tickSize && !(tickSize == rhs.tickSize))
      return false;
    if (__isset.denominator != rhs.__isset.denominator)
      return false;
    else if (__isset.denominator && !(denominator == rhs.denominator))
      return false;
    if (__isset.cmbDirect != rhs.__isset.cmbDirect)
      return false;
    else if (__isset.cmbDirect && !(cmbDirect == rhs.cmbDirect))
      return false;
    if (__isset.commodityState != rhs.__isset.commodityState)
      return false;
    else if (__isset.commodityState && !(commodityState == rhs.commodityState))
      return false;
    if (__isset.sledCommodityConfig != rhs.__isset.sledCommodityConfig)
      return false;
    else if (__isset.sledCommodityConfig && !(sledCommodityConfig == rhs.sledCommodityConfig))
      return false;
    if (__isset.engName != rhs.__isset.engName)
      return false;
    else if (__isset.engName && !(engName == rhs.engName))
      return false;
    if (__isset.cnName != rhs.__isset.cnName)
      return false;
    else if (__isset.cnName && !(cnName == rhs.cnName))
      return false;
    if (__isset.tcName != rhs.__isset.tcName)
      return false;
    else if (__isset.tcName && !(tcName == rhs.tcName))
      return false;
    if (__isset.activeStartTimestamp != rhs.__isset.activeStartTimestamp)
      return false;
    else if (__isset.activeStartTimestamp && !(activeStartTimestamp == rhs.activeStartTimestamp))
      return false;
    if (__isset.activeEndTimestamp != rhs.__isset.activeEndTimestamp)
      return false;
    else if (__isset.activeEndTimestamp && !(activeEndTimestamp == rhs.activeEndTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const SledCommodity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledCommodity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledCommodity &a, SledCommodity &b);

typedef struct _SledContract__isset {
  _SledContract__isset() : sledContractId(false), sledCommodityId(false), sledContractCode(false), relateContractIds(false), sledTag(false), contractEngName(false), contractCnName(false), contractTcName(false), contractExpDate(false), lastTradeDate(false), firstNoticeDate(false), platformEnv(false), contractStatus(false), activeStartTimestamp(false), activeEndTimestamp(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool sledContractId;
  bool sledCommodityId;
  bool sledContractCode;
  bool relateContractIds;
  bool sledTag;
  bool contractEngName;
  bool contractCnName;
  bool contractTcName;
  bool contractExpDate;
  bool lastTradeDate;
  bool firstNoticeDate;
  bool platformEnv;
  bool contractStatus;
  bool activeStartTimestamp;
  bool activeEndTimestamp;
  bool createTimestamp;
  bool lastModityTimestamp;
} _SledContract__isset;

class SledContract {
 public:

  static const char* ascii_fingerprint; // = "9A8E06BA732ED7881B8875F8F443D3B2";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x8E,0x06,0xBA,0x73,0x2E,0xD7,0x88,0x1B,0x88,0x75,0xF8,0xF4,0x43,0xD3,0xB2};

  SledContract() : sledContractId(0), sledCommodityId(0), sledContractCode(), sledTag(), contractEngName(), contractCnName(), contractTcName(), contractExpDate(0), lastTradeDate(0), firstNoticeDate(0), platformEnv((TechPlatformEnv::type)0), contractStatus((ContractStatus::type)0), activeStartTimestamp(0), activeEndTimestamp(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~SledContract() throw() {}

  int32_t sledContractId;
  int32_t sledCommodityId;
  std::string sledContractCode;
  std::vector<int32_t>  relateContractIds;
  std::string sledTag;
  std::string contractEngName;
  std::string contractCnName;
  std::string contractTcName;
  int64_t contractExpDate;
  int64_t lastTradeDate;
  int64_t firstNoticeDate;
  TechPlatformEnv::type platformEnv;
  ContractStatus::type contractStatus;
  int64_t activeStartTimestamp;
  int64_t activeEndTimestamp;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _SledContract__isset __isset;

  void __set_sledContractId(const int32_t val) {
    sledContractId = val;
    __isset.sledContractId = true;
  }

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_relateContractIds(const std::vector<int32_t> & val) {
    relateContractIds = val;
    __isset.relateContractIds = true;
  }

  void __set_sledTag(const std::string& val) {
    sledTag = val;
    __isset.sledTag = true;
  }

  void __set_contractEngName(const std::string& val) {
    contractEngName = val;
    __isset.contractEngName = true;
  }

  void __set_contractCnName(const std::string& val) {
    contractCnName = val;
    __isset.contractCnName = true;
  }

  void __set_contractTcName(const std::string& val) {
    contractTcName = val;
    __isset.contractTcName = true;
  }

  void __set_contractExpDate(const int64_t val) {
    contractExpDate = val;
    __isset.contractExpDate = true;
  }

  void __set_lastTradeDate(const int64_t val) {
    lastTradeDate = val;
    __isset.lastTradeDate = true;
  }

  void __set_firstNoticeDate(const int64_t val) {
    firstNoticeDate = val;
    __isset.firstNoticeDate = true;
  }

  void __set_platformEnv(const TechPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  void __set_contractStatus(const ContractStatus::type val) {
    contractStatus = val;
    __isset.contractStatus = true;
  }

  void __set_activeStartTimestamp(const int64_t val) {
    activeStartTimestamp = val;
    __isset.activeStartTimestamp = true;
  }

  void __set_activeEndTimestamp(const int64_t val) {
    activeEndTimestamp = val;
    __isset.activeEndTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const SledContract & rhs) const
  {
    if (__isset.sledContractId != rhs.__isset.sledContractId)
      return false;
    else if (__isset.sledContractId && !(sledContractId == rhs.sledContractId))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.relateContractIds != rhs.__isset.relateContractIds)
      return false;
    else if (__isset.relateContractIds && !(relateContractIds == rhs.relateContractIds))
      return false;
    if (__isset.sledTag != rhs.__isset.sledTag)
      return false;
    else if (__isset.sledTag && !(sledTag == rhs.sledTag))
      return false;
    if (__isset.contractEngName != rhs.__isset.contractEngName)
      return false;
    else if (__isset.contractEngName && !(contractEngName == rhs.contractEngName))
      return false;
    if (__isset.contractCnName != rhs.__isset.contractCnName)
      return false;
    else if (__isset.contractCnName && !(contractCnName == rhs.contractCnName))
      return false;
    if (__isset.contractTcName != rhs.__isset.contractTcName)
      return false;
    else if (__isset.contractTcName && !(contractTcName == rhs.contractTcName))
      return false;
    if (__isset.contractExpDate != rhs.__isset.contractExpDate)
      return false;
    else if (__isset.contractExpDate && !(contractExpDate == rhs.contractExpDate))
      return false;
    if (__isset.lastTradeDate != rhs.__isset.lastTradeDate)
      return false;
    else if (__isset.lastTradeDate && !(lastTradeDate == rhs.lastTradeDate))
      return false;
    if (__isset.firstNoticeDate != rhs.__isset.firstNoticeDate)
      return false;
    else if (__isset.firstNoticeDate && !(firstNoticeDate == rhs.firstNoticeDate))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    if (__isset.contractStatus != rhs.__isset.contractStatus)
      return false;
    else if (__isset.contractStatus && !(contractStatus == rhs.contractStatus))
      return false;
    if (__isset.activeStartTimestamp != rhs.__isset.activeStartTimestamp)
      return false;
    else if (__isset.activeStartTimestamp && !(activeStartTimestamp == rhs.activeStartTimestamp))
      return false;
    if (__isset.activeEndTimestamp != rhs.__isset.activeEndTimestamp)
      return false;
    else if (__isset.activeEndTimestamp && !(activeEndTimestamp == rhs.activeEndTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const SledContract &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledContract & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledContract &a, SledContract &b);

typedef struct _CommodityMapping__isset {
  _CommodityMapping__isset() : mappingId(false), sledCommodityId(false), techPlatform(false), exchange(false), commodityType(false), commodityCode(false), moneyRatio(false), brokerEntryId(false), activeStartTimestamp(false), activeEndTimestamp(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool mappingId;
  bool sledCommodityId;
  bool techPlatform;
  bool exchange;
  bool commodityType;
  bool commodityCode;
  bool moneyRatio;
  bool brokerEntryId;
  bool activeStartTimestamp;
  bool activeEndTimestamp;
  bool createTimestamp;
  bool lastModityTimestamp;
} _CommodityMapping__isset;

class CommodityMapping {
 public:

  static const char* ascii_fingerprint; // = "EB64A265FD4DC89EFCA5871A6883D8EB";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x64,0xA2,0x65,0xFD,0x4D,0xC8,0x9E,0xFC,0xA5,0x87,0x1A,0x68,0x83,0xD8,0xEB};

  CommodityMapping() : mappingId(0), sledCommodityId(0), techPlatform((TechPlatform::type)0), exchange(), commodityType(), commodityCode(), moneyRatio(0), brokerEntryId(0), activeStartTimestamp(0), activeEndTimestamp(0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~CommodityMapping() throw() {}

  int32_t mappingId;
  int32_t sledCommodityId;
  TechPlatform::type techPlatform;
  std::string exchange;
  std::string commodityType;
  std::string commodityCode;
  double moneyRatio;
  int32_t brokerEntryId;
  int64_t activeStartTimestamp;
  int64_t activeEndTimestamp;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _CommodityMapping__isset __isset;

  void __set_mappingId(const int32_t val) {
    mappingId = val;
    __isset.mappingId = true;
  }

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_techPlatform(const TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_exchange(const std::string& val) {
    exchange = val;
    __isset.exchange = true;
  }

  void __set_commodityType(const std::string& val) {
    commodityType = val;
    __isset.commodityType = true;
  }

  void __set_commodityCode(const std::string& val) {
    commodityCode = val;
    __isset.commodityCode = true;
  }

  void __set_moneyRatio(const double val) {
    moneyRatio = val;
    __isset.moneyRatio = true;
  }

  void __set_brokerEntryId(const int32_t val) {
    brokerEntryId = val;
    __isset.brokerEntryId = true;
  }

  void __set_activeStartTimestamp(const int64_t val) {
    activeStartTimestamp = val;
    __isset.activeStartTimestamp = true;
  }

  void __set_activeEndTimestamp(const int64_t val) {
    activeEndTimestamp = val;
    __isset.activeEndTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const CommodityMapping & rhs) const
  {
    if (__isset.mappingId != rhs.__isset.mappingId)
      return false;
    else if (__isset.mappingId && !(mappingId == rhs.mappingId))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.exchange != rhs.__isset.exchange)
      return false;
    else if (__isset.exchange && !(exchange == rhs.exchange))
      return false;
    if (__isset.commodityType != rhs.__isset.commodityType)
      return false;
    else if (__isset.commodityType && !(commodityType == rhs.commodityType))
      return false;
    if (__isset.commodityCode != rhs.__isset.commodityCode)
      return false;
    else if (__isset.commodityCode && !(commodityCode == rhs.commodityCode))
      return false;
    if (__isset.moneyRatio != rhs.__isset.moneyRatio)
      return false;
    else if (__isset.moneyRatio && !(moneyRatio == rhs.moneyRatio))
      return false;
    if (__isset.brokerEntryId != rhs.__isset.brokerEntryId)
      return false;
    else if (__isset.brokerEntryId && !(brokerEntryId == rhs.brokerEntryId))
      return false;
    if (__isset.activeStartTimestamp != rhs.__isset.activeStartTimestamp)
      return false;
    else if (__isset.activeStartTimestamp && !(activeStartTimestamp == rhs.activeStartTimestamp))
      return false;
    if (__isset.activeEndTimestamp != rhs.__isset.activeEndTimestamp)
      return false;
    else if (__isset.activeEndTimestamp && !(activeEndTimestamp == rhs.activeEndTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const CommodityMapping &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommodityMapping & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommodityMapping &a, CommodityMapping &b);

typedef struct _ReqSledContractOption__isset {
  _ReqSledContractOption__isset() : sledContractIdList(false), sledCommodityId(false), platformEnv(false), sledContractCode(false), contractStatus(false) {}
  bool sledContractIdList;
  bool sledCommodityId;
  bool platformEnv;
  bool sledContractCode;
  bool contractStatus;
} _ReqSledContractOption__isset;

class ReqSledContractOption {
 public:

  static const char* ascii_fingerprint; // = "BAA9B3761265F4E4AA379BFA3B480475";
  static const uint8_t binary_fingerprint[16]; // = {0xBA,0xA9,0xB3,0x76,0x12,0x65,0xF4,0xE4,0xAA,0x37,0x9B,0xFA,0x3B,0x48,0x04,0x75};

  ReqSledContractOption() : sledCommodityId(0), platformEnv((TechPlatformEnv::type)0), sledContractCode(), contractStatus((ContractStatus::type)0) {
  }

  virtual ~ReqSledContractOption() throw() {}

  std::vector<int32_t>  sledContractIdList;
  int32_t sledCommodityId;
  TechPlatformEnv::type platformEnv;
  std::string sledContractCode;
  ContractStatus::type contractStatus;

  _ReqSledContractOption__isset __isset;

  void __set_sledContractIdList(const std::vector<int32_t> & val) {
    sledContractIdList = val;
    __isset.sledContractIdList = true;
  }

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_platformEnv(const TechPlatformEnv::type val) {
    platformEnv = val;
    __isset.platformEnv = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_contractStatus(const ContractStatus::type val) {
    contractStatus = val;
    __isset.contractStatus = true;
  }

  bool operator == (const ReqSledContractOption & rhs) const
  {
    if (__isset.sledContractIdList != rhs.__isset.sledContractIdList)
      return false;
    else if (__isset.sledContractIdList && !(sledContractIdList == rhs.sledContractIdList))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.platformEnv != rhs.__isset.platformEnv)
      return false;
    else if (__isset.platformEnv && !(platformEnv == rhs.platformEnv))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.contractStatus != rhs.__isset.contractStatus)
      return false;
    else if (__isset.contractStatus && !(contractStatus == rhs.contractStatus))
      return false;
    return true;
  }
  bool operator != (const ReqSledContractOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSledContractOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqSledContractOption &a, ReqSledContractOption &b);

typedef struct _ReqSledCommodityOption__isset {
  _ReqSledCommodityOption__isset() : sledCommodityIdList(false), exchangeMic(false), sledCommodityType(false), sledCommodityCode(false) {}
  bool sledCommodityIdList;
  bool exchangeMic;
  bool sledCommodityType;
  bool sledCommodityCode;
} _ReqSledCommodityOption__isset;

class ReqSledCommodityOption {
 public:

  static const char* ascii_fingerprint; // = "96A8611891273D9258BF8C7EDFF07308";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0xA8,0x61,0x18,0x91,0x27,0x3D,0x92,0x58,0xBF,0x8C,0x7E,0xDF,0xF0,0x73,0x08};

  ReqSledCommodityOption() : exchangeMic(), sledCommodityType((SledCommodityType::type)0), sledCommodityCode() {
  }

  virtual ~ReqSledCommodityOption() throw() {}

  std::vector<int32_t>  sledCommodityIdList;
  std::string exchangeMic;
  SledCommodityType::type sledCommodityType;
  std::string sledCommodityCode;

  _ReqSledCommodityOption__isset __isset;

  void __set_sledCommodityIdList(const std::vector<int32_t> & val) {
    sledCommodityIdList = val;
    __isset.sledCommodityIdList = true;
  }

  void __set_exchangeMic(const std::string& val) {
    exchangeMic = val;
    __isset.exchangeMic = true;
  }

  void __set_sledCommodityType(const SledCommodityType::type val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  bool operator == (const ReqSledCommodityOption & rhs) const
  {
    if (__isset.sledCommodityIdList != rhs.__isset.sledCommodityIdList)
      return false;
    else if (__isset.sledCommodityIdList && !(sledCommodityIdList == rhs.sledCommodityIdList))
      return false;
    if (__isset.exchangeMic != rhs.__isset.exchangeMic)
      return false;
    else if (__isset.exchangeMic && !(exchangeMic == rhs.exchangeMic))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    return true;
  }
  bool operator != (const ReqSledCommodityOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSledCommodityOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqSledCommodityOption &a, ReqSledCommodityOption &b);

typedef struct _ReqSledExchangeOption__isset {
  _ReqSledExchangeOption__isset() : sledExchangeIds(false), exchangeMic(false) {}
  bool sledExchangeIds;
  bool exchangeMic;
} _ReqSledExchangeOption__isset;

class ReqSledExchangeOption {
 public:

  static const char* ascii_fingerprint; // = "693243693E046D45E4DA21EC3A720646";
  static const uint8_t binary_fingerprint[16]; // = {0x69,0x32,0x43,0x69,0x3E,0x04,0x6D,0x45,0xE4,0xDA,0x21,0xEC,0x3A,0x72,0x06,0x46};

  ReqSledExchangeOption() : exchangeMic() {
  }

  virtual ~ReqSledExchangeOption() throw() {}

  std::vector<int32_t>  sledExchangeIds;
  std::string exchangeMic;

  _ReqSledExchangeOption__isset __isset;

  void __set_sledExchangeIds(const std::vector<int32_t> & val) {
    sledExchangeIds = val;
    __isset.sledExchangeIds = true;
  }

  void __set_exchangeMic(const std::string& val) {
    exchangeMic = val;
    __isset.exchangeMic = true;
  }

  bool operator == (const ReqSledExchangeOption & rhs) const
  {
    if (__isset.sledExchangeIds != rhs.__isset.sledExchangeIds)
      return false;
    else if (__isset.sledExchangeIds && !(sledExchangeIds == rhs.sledExchangeIds))
      return false;
    if (__isset.exchangeMic != rhs.__isset.exchangeMic)
      return false;
    else if (__isset.exchangeMic && !(exchangeMic == rhs.exchangeMic))
      return false;
    return true;
  }
  bool operator != (const ReqSledExchangeOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSledExchangeOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqSledExchangeOption &a, ReqSledExchangeOption &b);

typedef struct _SledExchangePage__isset {
  _SledExchangePage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _SledExchangePage__isset;

class SledExchangePage {
 public:

  static const char* ascii_fingerprint; // = "906090810730151A635CF4BAC738D919";
  static const uint8_t binary_fingerprint[16]; // = {0x90,0x60,0x90,0x81,0x07,0x30,0x15,0x1A,0x63,0x5C,0xF4,0xBA,0xC7,0x38,0xD9,0x19};

  SledExchangePage() : total(0) {
  }

  virtual ~SledExchangePage() throw() {}

  int32_t total;
  std::vector<SledExchange>  page;

  _SledExchangePage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<SledExchange> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const SledExchangePage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const SledExchangePage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledExchangePage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledExchangePage &a, SledExchangePage &b);

typedef struct _SledCommodityPage__isset {
  _SledCommodityPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _SledCommodityPage__isset;

class SledCommodityPage {
 public:

  static const char* ascii_fingerprint; // = "5F93974ED76F20839DB05012C3E8DC97";
  static const uint8_t binary_fingerprint[16]; // = {0x5F,0x93,0x97,0x4E,0xD7,0x6F,0x20,0x83,0x9D,0xB0,0x50,0x12,0xC3,0xE8,0xDC,0x97};

  SledCommodityPage() : total(0) {
  }

  virtual ~SledCommodityPage() throw() {}

  int32_t total;
  std::vector<SledCommodity>  page;

  _SledCommodityPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<SledCommodity> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const SledCommodityPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const SledCommodityPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledCommodityPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledCommodityPage &a, SledCommodityPage &b);

typedef struct _SledContractPage__isset {
  _SledContractPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _SledContractPage__isset;

class SledContractPage {
 public:

  static const char* ascii_fingerprint; // = "D379112D8D16A82EA42325CD14773297";
  static const uint8_t binary_fingerprint[16]; // = {0xD3,0x79,0x11,0x2D,0x8D,0x16,0xA8,0x2E,0xA4,0x23,0x25,0xCD,0x14,0x77,0x32,0x97};

  SledContractPage() : total(0) {
  }

  virtual ~SledContractPage() throw() {}

  int32_t total;
  std::vector<SledContract>  page;

  _SledContractPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<SledContract> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const SledContractPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const SledContractPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SledContractPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SledContractPage &a, SledContractPage &b);

typedef struct _CommodityMappingPage__isset {
  _CommodityMappingPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _CommodityMappingPage__isset;

class CommodityMappingPage {
 public:

  static const char* ascii_fingerprint; // = "E740C51EA62C435FE446B762DA16E1E5";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0x40,0xC5,0x1E,0xA6,0x2C,0x43,0x5F,0xE4,0x46,0xB7,0x62,0xDA,0x16,0xE1,0xE5};

  CommodityMappingPage() : total(0) {
  }

  virtual ~CommodityMappingPage() throw() {}

  int32_t total;
  std::vector<CommodityMapping>  page;

  _CommodityMappingPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<CommodityMapping> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const CommodityMappingPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const CommodityMappingPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommodityMappingPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommodityMappingPage &a, CommodityMappingPage &b);

typedef struct _ReqCommodityMappingOption__isset {
  _ReqCommodityMappingOption__isset() : sledCommodityIdList(false), exchange(false), commodityType(false), commodityCode(false), brokerEntryId(false), mapIds(false), techPlatform(false) {}
  bool sledCommodityIdList;
  bool exchange;
  bool commodityType;
  bool commodityCode;
  bool brokerEntryId;
  bool mapIds;
  bool techPlatform;
} _ReqCommodityMappingOption__isset;

class ReqCommodityMappingOption {
 public:

  static const char* ascii_fingerprint; // = "9F7A08492CBE0C9AF42726CDE6176EA2";
  static const uint8_t binary_fingerprint[16]; // = {0x9F,0x7A,0x08,0x49,0x2C,0xBE,0x0C,0x9A,0xF4,0x27,0x26,0xCD,0xE6,0x17,0x6E,0xA2};

  ReqCommodityMappingOption() : exchange(), commodityType(), commodityCode(), brokerEntryId(0), techPlatform((TechPlatform::type)0) {
  }

  virtual ~ReqCommodityMappingOption() throw() {}

  std::vector<int32_t>  sledCommodityIdList;
  std::string exchange;
  std::string commodityType;
  std::string commodityCode;
  int32_t brokerEntryId;
  std::vector<int32_t>  mapIds;
  TechPlatform::type techPlatform;

  _ReqCommodityMappingOption__isset __isset;

  void __set_sledCommodityIdList(const std::vector<int32_t> & val) {
    sledCommodityIdList = val;
    __isset.sledCommodityIdList = true;
  }

  void __set_exchange(const std::string& val) {
    exchange = val;
    __isset.exchange = true;
  }

  void __set_commodityType(const std::string& val) {
    commodityType = val;
    __isset.commodityType = true;
  }

  void __set_commodityCode(const std::string& val) {
    commodityCode = val;
    __isset.commodityCode = true;
  }

  void __set_brokerEntryId(const int32_t val) {
    brokerEntryId = val;
    __isset.brokerEntryId = true;
  }

  void __set_mapIds(const std::vector<int32_t> & val) {
    mapIds = val;
    __isset.mapIds = true;
  }

  void __set_techPlatform(const TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  bool operator == (const ReqCommodityMappingOption & rhs) const
  {
    if (__isset.sledCommodityIdList != rhs.__isset.sledCommodityIdList)
      return false;
    else if (__isset.sledCommodityIdList && !(sledCommodityIdList == rhs.sledCommodityIdList))
      return false;
    if (__isset.exchange != rhs.__isset.exchange)
      return false;
    else if (__isset.exchange && !(exchange == rhs.exchange))
      return false;
    if (__isset.commodityType != rhs.__isset.commodityType)
      return false;
    else if (__isset.commodityType && !(commodityType == rhs.commodityType))
      return false;
    if (__isset.commodityCode != rhs.__isset.commodityCode)
      return false;
    else if (__isset.commodityCode && !(commodityCode == rhs.commodityCode))
      return false;
    if (__isset.brokerEntryId != rhs.__isset.brokerEntryId)
      return false;
    else if (__isset.brokerEntryId && !(brokerEntryId == rhs.brokerEntryId))
      return false;
    if (__isset.mapIds != rhs.__isset.mapIds)
      return false;
    else if (__isset.mapIds && !(mapIds == rhs.mapIds))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    return true;
  }
  bool operator != (const ReqCommodityMappingOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqCommodityMappingOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqCommodityMappingOption &a, ReqCommodityMappingOption &b);

}}} // namespace

#endif
