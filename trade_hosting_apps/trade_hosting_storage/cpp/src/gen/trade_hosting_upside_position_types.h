/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_upside_position_TYPES_H
#define trade_hosting_upside_position_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "trade_hosting_basic_types.h"


namespace xueqiao { namespace trade { namespace hosting { namespace upside { namespace position {

struct CTPPositionDirection {
  enum type {
    POSITION_LONG = 0,
    POSITION_SHORT = 1
  };
};

extern const std::map<int, const char*> _CTPPositionDirection_VALUES_TO_NAMES;

struct CTPContractPosDateType {
  enum type {
    POS_USE_HISTORY = 1,
    POS_UNUSE_HISTORY = 2
  };
};

extern const std::map<int, const char*> _CTPContractPosDateType_VALUES_TO_NAMES;

struct CTPFronzenPositionDateType {
  enum type {
    FRONZEN_YD_POSITION = 1,
    FRONZEN_TD_POSITION = 2,
    FRONZEN_ALL_POSITION = 3
  };
};

extern const std::map<int, const char*> _CTPFronzenPositionDateType_VALUES_TO_NAMES;

typedef struct _CTPYDPositionInfo__isset {
  _CTPYDPositionInfo__isset() : ydPosVolume(false) {}
  bool ydPosVolume;
} _CTPYDPositionInfo__isset;

class CTPYDPositionInfo {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  CTPYDPositionInfo() : ydPosVolume(0) {
  }

  virtual ~CTPYDPositionInfo() throw() {}

  int32_t ydPosVolume;

  _CTPYDPositionInfo__isset __isset;

  void __set_ydPosVolume(const int32_t val) {
    ydPosVolume = val;
    __isset.ydPosVolume = true;
  }

  bool operator == (const CTPYDPositionInfo & rhs) const
  {
    if (__isset.ydPosVolume != rhs.__isset.ydPosVolume)
      return false;
    else if (__isset.ydPosVolume && !(ydPosVolume == rhs.ydPosVolume))
      return false;
    return true;
  }
  bool operator != (const CTPYDPositionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPYDPositionInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPYDPositionInfo &a, CTPYDPositionInfo &b);

typedef struct _CTPCloseYDInfo__isset {
  _CTPCloseYDInfo__isset() : closeYDVolume(false) {}
  bool closeYDVolume;
} _CTPCloseYDInfo__isset;

class CTPCloseYDInfo {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  CTPCloseYDInfo() : closeYDVolume(0) {
  }

  virtual ~CTPCloseYDInfo() throw() {}

  int32_t closeYDVolume;

  _CTPCloseYDInfo__isset __isset;

  void __set_closeYDVolume(const int32_t val) {
    closeYDVolume = val;
    __isset.closeYDVolume = true;
  }

  bool operator == (const CTPCloseYDInfo & rhs) const
  {
    if (__isset.closeYDVolume != rhs.__isset.closeYDVolume)
      return false;
    else if (__isset.closeYDVolume && !(closeYDVolume == rhs.closeYDVolume))
      return false;
    return true;
  }
  bool operator != (const CTPCloseYDInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPCloseYDInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPCloseYDInfo &a, CTPCloseYDInfo &b);

typedef struct _CTPCloseTDInfo__isset {
  _CTPCloseTDInfo__isset() : closeTDVolume(false) {}
  bool closeTDVolume;
} _CTPCloseTDInfo__isset;

class CTPCloseTDInfo {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  CTPCloseTDInfo() : closeTDVolume(0) {
  }

  virtual ~CTPCloseTDInfo() throw() {}

  int32_t closeTDVolume;

  _CTPCloseTDInfo__isset __isset;

  void __set_closeTDVolume(const int32_t val) {
    closeTDVolume = val;
    __isset.closeTDVolume = true;
  }

  bool operator == (const CTPCloseTDInfo & rhs) const
  {
    if (__isset.closeTDVolume != rhs.__isset.closeTDVolume)
      return false;
    else if (__isset.closeTDVolume && !(closeTDVolume == rhs.closeTDVolume))
      return false;
    return true;
  }
  bool operator != (const CTPCloseTDInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPCloseTDInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPCloseTDInfo &a, CTPCloseTDInfo &b);

typedef struct _CTPOpenTDInfo__isset {
  _CTPOpenTDInfo__isset() : openTDVolume(false) {}
  bool openTDVolume;
} _CTPOpenTDInfo__isset;

class CTPOpenTDInfo {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  CTPOpenTDInfo() : openTDVolume(0) {
  }

  virtual ~CTPOpenTDInfo() throw() {}

  int32_t openTDVolume;

  _CTPOpenTDInfo__isset __isset;

  void __set_openTDVolume(const int32_t val) {
    openTDVolume = val;
    __isset.openTDVolume = true;
  }

  bool operator == (const CTPOpenTDInfo & rhs) const
  {
    if (__isset.openTDVolume != rhs.__isset.openTDVolume)
      return false;
    else if (__isset.openTDVolume && !(openTDVolume == rhs.openTDVolume))
      return false;
    return true;
  }
  bool operator != (const CTPOpenTDInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPOpenTDInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPOpenTDInfo &a, CTPOpenTDInfo &b);

typedef struct _CTPFronzenInfo__isset {
  _CTPFronzenInfo__isset() : fronzenTotalVolume(false), fronzenPosDateType(false) {}
  bool fronzenTotalVolume;
  bool fronzenPosDateType;
} _CTPFronzenInfo__isset;

class CTPFronzenInfo {
 public:

  static const char* ascii_fingerprint; // = "DBC415F77BCE1BA3359844549BD9369D";
  static const uint8_t binary_fingerprint[16]; // = {0xDB,0xC4,0x15,0xF7,0x7B,0xCE,0x1B,0xA3,0x35,0x98,0x44,0x54,0x9B,0xD9,0x36,0x9D};

  CTPFronzenInfo() : fronzenTotalVolume(0), fronzenPosDateType((CTPFronzenPositionDateType::type)0) {
  }

  virtual ~CTPFronzenInfo() throw() {}

  int32_t fronzenTotalVolume;
  CTPFronzenPositionDateType::type fronzenPosDateType;

  _CTPFronzenInfo__isset __isset;

  void __set_fronzenTotalVolume(const int32_t val) {
    fronzenTotalVolume = val;
    __isset.fronzenTotalVolume = true;
  }

  void __set_fronzenPosDateType(const CTPFronzenPositionDateType::type val) {
    fronzenPosDateType = val;
    __isset.fronzenPosDateType = true;
  }

  bool operator == (const CTPFronzenInfo & rhs) const
  {
    if (__isset.fronzenTotalVolume != rhs.__isset.fronzenTotalVolume)
      return false;
    else if (__isset.fronzenTotalVolume && !(fronzenTotalVolume == rhs.fronzenTotalVolume))
      return false;
    if (__isset.fronzenPosDateType != rhs.__isset.fronzenPosDateType)
      return false;
    else if (__isset.fronzenPosDateType && !(fronzenPosDateType == rhs.fronzenPosDateType))
      return false;
    return true;
  }
  bool operator != (const CTPFronzenInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPFronzenInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPFronzenInfo &a, CTPFronzenInfo &b);

typedef struct _CTPPositionSummary__isset {
  _CTPPositionSummary__isset() : instrumentID(false), contractPosDateType(false), exchangeID(false), productClass(false), productID(false), posDirection(false), ydPosInfo(false), closeTDInfo(false), closeYDInfo(false), openTDInfo(false), fronzenInfos(false) {}
  bool instrumentID;
  bool contractPosDateType;
  bool exchangeID;
  bool productClass;
  bool productID;
  bool posDirection;
  bool ydPosInfo;
  bool closeTDInfo;
  bool closeYDInfo;
  bool openTDInfo;
  bool fronzenInfos;
} _CTPPositionSummary__isset;

class CTPPositionSummary {
 public:

  static const char* ascii_fingerprint; // = "3373DC844F4697178D2D287388E1407E";
  static const uint8_t binary_fingerprint[16]; // = {0x33,0x73,0xDC,0x84,0x4F,0x46,0x97,0x17,0x8D,0x2D,0x28,0x73,0x88,0xE1,0x40,0x7E};

  CTPPositionSummary() : instrumentID(), contractPosDateType((CTPContractPosDateType::type)0), exchangeID(), productClass(0), productID(), posDirection((CTPPositionDirection::type)0) {
  }

  virtual ~CTPPositionSummary() throw() {}

  std::string instrumentID;
  CTPContractPosDateType::type contractPosDateType;
  std::string exchangeID;
  int16_t productClass;
  std::string productID;
  CTPPositionDirection::type posDirection;
  CTPYDPositionInfo ydPosInfo;
  CTPCloseTDInfo closeTDInfo;
  CTPCloseYDInfo closeYDInfo;
  CTPOpenTDInfo openTDInfo;
  std::map<CTPFronzenPositionDateType::type, CTPFronzenInfo>  fronzenInfos;

  _CTPPositionSummary__isset __isset;

  void __set_instrumentID(const std::string& val) {
    instrumentID = val;
    __isset.instrumentID = true;
  }

  void __set_contractPosDateType(const CTPContractPosDateType::type val) {
    contractPosDateType = val;
    __isset.contractPosDateType = true;
  }

  void __set_exchangeID(const std::string& val) {
    exchangeID = val;
    __isset.exchangeID = true;
  }

  void __set_productClass(const int16_t val) {
    productClass = val;
    __isset.productClass = true;
  }

  void __set_productID(const std::string& val) {
    productID = val;
    __isset.productID = true;
  }

  void __set_posDirection(const CTPPositionDirection::type val) {
    posDirection = val;
    __isset.posDirection = true;
  }

  void __set_ydPosInfo(const CTPYDPositionInfo& val) {
    ydPosInfo = val;
    __isset.ydPosInfo = true;
  }

  void __set_closeTDInfo(const CTPCloseTDInfo& val) {
    closeTDInfo = val;
    __isset.closeTDInfo = true;
  }

  void __set_closeYDInfo(const CTPCloseYDInfo& val) {
    closeYDInfo = val;
    __isset.closeYDInfo = true;
  }

  void __set_openTDInfo(const CTPOpenTDInfo& val) {
    openTDInfo = val;
    __isset.openTDInfo = true;
  }

  void __set_fronzenInfos(const std::map<CTPFronzenPositionDateType::type, CTPFronzenInfo> & val) {
    fronzenInfos = val;
    __isset.fronzenInfos = true;
  }

  bool operator == (const CTPPositionSummary & rhs) const
  {
    if (__isset.instrumentID != rhs.__isset.instrumentID)
      return false;
    else if (__isset.instrumentID && !(instrumentID == rhs.instrumentID))
      return false;
    if (__isset.contractPosDateType != rhs.__isset.contractPosDateType)
      return false;
    else if (__isset.contractPosDateType && !(contractPosDateType == rhs.contractPosDateType))
      return false;
    if (__isset.exchangeID != rhs.__isset.exchangeID)
      return false;
    else if (__isset.exchangeID && !(exchangeID == rhs.exchangeID))
      return false;
    if (__isset.productClass != rhs.__isset.productClass)
      return false;
    else if (__isset.productClass && !(productClass == rhs.productClass))
      return false;
    if (__isset.productID != rhs.__isset.productID)
      return false;
    else if (__isset.productID && !(productID == rhs.productID))
      return false;
    if (__isset.posDirection != rhs.__isset.posDirection)
      return false;
    else if (__isset.posDirection && !(posDirection == rhs.posDirection))
      return false;
    if (__isset.ydPosInfo != rhs.__isset.ydPosInfo)
      return false;
    else if (__isset.ydPosInfo && !(ydPosInfo == rhs.ydPosInfo))
      return false;
    if (__isset.closeTDInfo != rhs.__isset.closeTDInfo)
      return false;
    else if (__isset.closeTDInfo && !(closeTDInfo == rhs.closeTDInfo))
      return false;
    if (__isset.closeYDInfo != rhs.__isset.closeYDInfo)
      return false;
    else if (__isset.closeYDInfo && !(closeYDInfo == rhs.closeYDInfo))
      return false;
    if (__isset.openTDInfo != rhs.__isset.openTDInfo)
      return false;
    else if (__isset.openTDInfo && !(openTDInfo == rhs.openTDInfo))
      return false;
    if (__isset.fronzenInfos != rhs.__isset.fronzenInfos)
      return false;
    else if (__isset.fronzenInfos && !(fronzenInfos == rhs.fronzenInfos))
      return false;
    return true;
  }
  bool operator != (const CTPPositionSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPPositionSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPPositionSummary &a, CTPPositionSummary &b);

typedef struct _PositionSummary__isset {
  _PositionSummary__isset() : techPlatform(false), ctpPosSummary(false) {}
  bool techPlatform;
  bool ctpPosSummary;
} _PositionSummary__isset;

class PositionSummary {
 public:

  static const char* ascii_fingerprint; // = "9EE47E7C08D3E838412B887EA17BE92C";
  static const uint8_t binary_fingerprint[16]; // = {0x9E,0xE4,0x7E,0x7C,0x08,0xD3,0xE8,0x38,0x41,0x2B,0x88,0x7E,0xA1,0x7B,0xE9,0x2C};

  PositionSummary() : techPlatform(( ::xueqiao::trade::hosting::BrokerTechPlatform::type)0) {
  }

  virtual ~PositionSummary() throw() {}

   ::xueqiao::trade::hosting::BrokerTechPlatform::type techPlatform;
  CTPPositionSummary ctpPosSummary;

  _PositionSummary__isset __isset;

  void __set_techPlatform(const  ::xueqiao::trade::hosting::BrokerTechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_ctpPosSummary(const CTPPositionSummary& val) {
    ctpPosSummary = val;
    __isset.ctpPosSummary = true;
  }

  bool operator == (const PositionSummary & rhs) const
  {
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.ctpPosSummary != rhs.__isset.ctpPosSummary)
      return false;
    else if (__isset.ctpPosSummary && !(ctpPosSummary == rhs.ctpPosSummary))
      return false;
    return true;
  }
  bool operator != (const PositionSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PositionSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(PositionSummary &a, PositionSummary &b);

}}}}} // namespace

#endif
