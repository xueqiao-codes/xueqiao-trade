/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_upside_position_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace upside { namespace position {

int _kCTPPositionDirectionValues[] = {
  CTPPositionDirection::POSITION_LONG,
  CTPPositionDirection::POSITION_SHORT
};
const char* _kCTPPositionDirectionNames[] = {
  "POSITION_LONG",
  "POSITION_SHORT"
};
const std::map<int, const char*> _CTPPositionDirection_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCTPPositionDirectionValues, _kCTPPositionDirectionNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCTPContractPosDateTypeValues[] = {
  CTPContractPosDateType::POS_USE_HISTORY,
  CTPContractPosDateType::POS_UNUSE_HISTORY
};
const char* _kCTPContractPosDateTypeNames[] = {
  "POS_USE_HISTORY",
  "POS_UNUSE_HISTORY"
};
const std::map<int, const char*> _CTPContractPosDateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kCTPContractPosDateTypeValues, _kCTPContractPosDateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCTPFronzenPositionDateTypeValues[] = {
  CTPFronzenPositionDateType::FRONZEN_YD_POSITION,
  CTPFronzenPositionDateType::FRONZEN_TD_POSITION,
  CTPFronzenPositionDateType::FRONZEN_ALL_POSITION
};
const char* _kCTPFronzenPositionDateTypeNames[] = {
  "FRONZEN_YD_POSITION",
  "FRONZEN_TD_POSITION",
  "FRONZEN_ALL_POSITION"
};
const std::map<int, const char*> _CTPFronzenPositionDateType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCTPFronzenPositionDateTypeValues, _kCTPFronzenPositionDateTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* CTPYDPositionInfo::ascii_fingerprint = "E7A96B151330359E84C0A3AC91BCBACD";
const uint8_t CTPYDPositionInfo::binary_fingerprint[16] = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

uint32_t CTPYDPositionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->ydPosVolume);
          this->__isset.ydPosVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPYDPositionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPYDPositionInfo");

  if (this->__isset.ydPosVolume) {
    xfer += oprot->writeFieldBegin("ydPosVolume", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->ydPosVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPYDPositionInfo &a, CTPYDPositionInfo &b) {
  using ::std::swap;
  swap(a.ydPosVolume, b.ydPosVolume);
  swap(a.__isset, b.__isset);
}

const char* CTPCloseYDInfo::ascii_fingerprint = "E7A96B151330359E84C0A3AC91BCBACD";
const uint8_t CTPCloseYDInfo::binary_fingerprint[16] = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

uint32_t CTPCloseYDInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->closeYDVolume);
          this->__isset.closeYDVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPCloseYDInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPCloseYDInfo");

  if (this->__isset.closeYDVolume) {
    xfer += oprot->writeFieldBegin("closeYDVolume", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->closeYDVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPCloseYDInfo &a, CTPCloseYDInfo &b) {
  using ::std::swap;
  swap(a.closeYDVolume, b.closeYDVolume);
  swap(a.__isset, b.__isset);
}

const char* CTPCloseTDInfo::ascii_fingerprint = "E7A96B151330359E84C0A3AC91BCBACD";
const uint8_t CTPCloseTDInfo::binary_fingerprint[16] = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

uint32_t CTPCloseTDInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->closeTDVolume);
          this->__isset.closeTDVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPCloseTDInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPCloseTDInfo");

  if (this->__isset.closeTDVolume) {
    xfer += oprot->writeFieldBegin("closeTDVolume", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->closeTDVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPCloseTDInfo &a, CTPCloseTDInfo &b) {
  using ::std::swap;
  swap(a.closeTDVolume, b.closeTDVolume);
  swap(a.__isset, b.__isset);
}

const char* CTPOpenTDInfo::ascii_fingerprint = "E7A96B151330359E84C0A3AC91BCBACD";
const uint8_t CTPOpenTDInfo::binary_fingerprint[16] = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

uint32_t CTPOpenTDInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->openTDVolume);
          this->__isset.openTDVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPOpenTDInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPOpenTDInfo");

  if (this->__isset.openTDVolume) {
    xfer += oprot->writeFieldBegin("openTDVolume", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->openTDVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPOpenTDInfo &a, CTPOpenTDInfo &b) {
  using ::std::swap;
  swap(a.openTDVolume, b.openTDVolume);
  swap(a.__isset, b.__isset);
}

const char* CTPFronzenInfo::ascii_fingerprint = "DBC415F77BCE1BA3359844549BD9369D";
const uint8_t CTPFronzenInfo::binary_fingerprint[16] = {0xDB,0xC4,0x15,0xF7,0x7B,0xCE,0x1B,0xA3,0x35,0x98,0x44,0x54,0x9B,0xD9,0x36,0x9D};

uint32_t CTPFronzenInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->fronzenTotalVolume);
          this->__isset.fronzenTotalVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->fronzenPosDateType = (CTPFronzenPositionDateType::type)ecast0;
          this->__isset.fronzenPosDateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPFronzenInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPFronzenInfo");

  if (this->__isset.fronzenTotalVolume) {
    xfer += oprot->writeFieldBegin("fronzenTotalVolume", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->fronzenTotalVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fronzenPosDateType) {
    xfer += oprot->writeFieldBegin("fronzenPosDateType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->fronzenPosDateType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPFronzenInfo &a, CTPFronzenInfo &b) {
  using ::std::swap;
  swap(a.fronzenTotalVolume, b.fronzenTotalVolume);
  swap(a.fronzenPosDateType, b.fronzenPosDateType);
  swap(a.__isset, b.__isset);
}

const char* CTPPositionSummary::ascii_fingerprint = "3373DC844F4697178D2D287388E1407E";
const uint8_t CTPPositionSummary::binary_fingerprint[16] = {0x33,0x73,0xDC,0x84,0x4F,0x46,0x97,0x17,0x8D,0x2D,0x28,0x73,0x88,0xE1,0x40,0x7E};

uint32_t CTPPositionSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->instrumentID);
          this->__isset.instrumentID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->contractPosDateType = (CTPContractPosDateType::type)ecast1;
          this->__isset.contractPosDateType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchangeID);
          this->__isset.exchangeID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->productClass);
          this->__isset.productClass = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->productID);
          this->__isset.productID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->posDirection = (CTPPositionDirection::type)ecast2;
          this->__isset.posDirection = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ydPosInfo.read(iprot);
          this->__isset.ydPosInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->closeTDInfo.read(iprot);
          this->__isset.closeTDInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->closeYDInfo.read(iprot);
          this->__isset.closeYDInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->openTDInfo.read(iprot);
          this->__isset.openTDInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->fronzenInfos.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _ktype4;
            ::apache::thrift::protocol::TType _vtype5;
            xfer += iprot->readMapBegin(_ktype4, _vtype5, _size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              CTPFronzenPositionDateType::type _key8;
              int32_t ecast10;
              xfer += iprot->readI32(ecast10);
              _key8 = (CTPFronzenPositionDateType::type)ecast10;
              CTPFronzenInfo& _val9 = this->fronzenInfos[_key8];
              xfer += _val9.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.fronzenInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CTPPositionSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CTPPositionSummary");

  if (this->__isset.instrumentID) {
    xfer += oprot->writeFieldBegin("instrumentID", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->instrumentID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractPosDateType) {
    xfer += oprot->writeFieldBegin("contractPosDateType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->contractPosDateType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchangeID) {
    xfer += oprot->writeFieldBegin("exchangeID", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->exchangeID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productClass) {
    xfer += oprot->writeFieldBegin("productClass", ::apache::thrift::protocol::T_I16, 4);
    xfer += oprot->writeI16(this->productClass);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.productID) {
    xfer += oprot->writeFieldBegin("productID", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->productID);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.posDirection) {
    xfer += oprot->writeFieldBegin("posDirection", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32((int32_t)this->posDirection);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ydPosInfo) {
    xfer += oprot->writeFieldBegin("ydPosInfo", ::apache::thrift::protocol::T_STRUCT, 11);
    xfer += this->ydPosInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeTDInfo) {
    xfer += oprot->writeFieldBegin("closeTDInfo", ::apache::thrift::protocol::T_STRUCT, 12);
    xfer += this->closeTDInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeYDInfo) {
    xfer += oprot->writeFieldBegin("closeYDInfo", ::apache::thrift::protocol::T_STRUCT, 13);
    xfer += this->closeYDInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openTDInfo) {
    xfer += oprot->writeFieldBegin("openTDInfo", ::apache::thrift::protocol::T_STRUCT, 14);
    xfer += this->openTDInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fronzenInfos) {
    xfer += oprot->writeFieldBegin("fronzenInfos", ::apache::thrift::protocol::T_MAP, 15);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_I32, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->fronzenInfos.size()));
      std::map<CTPFronzenPositionDateType::type, CTPFronzenInfo> ::const_iterator _iter11;
      for (_iter11 = this->fronzenInfos.begin(); _iter11 != this->fronzenInfos.end(); ++_iter11)
      {
        xfer += oprot->writeI32((int32_t)_iter11->first);
        xfer += _iter11->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CTPPositionSummary &a, CTPPositionSummary &b) {
  using ::std::swap;
  swap(a.instrumentID, b.instrumentID);
  swap(a.contractPosDateType, b.contractPosDateType);
  swap(a.exchangeID, b.exchangeID);
  swap(a.productClass, b.productClass);
  swap(a.productID, b.productID);
  swap(a.posDirection, b.posDirection);
  swap(a.ydPosInfo, b.ydPosInfo);
  swap(a.closeTDInfo, b.closeTDInfo);
  swap(a.closeYDInfo, b.closeYDInfo);
  swap(a.openTDInfo, b.openTDInfo);
  swap(a.fronzenInfos, b.fronzenInfos);
  swap(a.__isset, b.__isset);
}

const char* PositionSummary::ascii_fingerprint = "9EE47E7C08D3E838412B887EA17BE92C";
const uint8_t PositionSummary::binary_fingerprint[16] = {0x9E,0xE4,0x7E,0x7C,0x08,0xD3,0xE8,0x38,0x41,0x2B,0x88,0x7E,0xA1,0x7B,0xE9,0x2C};

uint32_t PositionSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->techPlatform = ( ::xueqiao::trade::hosting::BrokerTechPlatform::type)ecast12;
          this->__isset.techPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ctpPosSummary.read(iprot);
          this->__isset.ctpPosSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t PositionSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("PositionSummary");

  if (this->__isset.techPlatform) {
    xfer += oprot->writeFieldBegin("techPlatform", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->techPlatform);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ctpPosSummary) {
    xfer += oprot->writeFieldBegin("ctpPosSummary", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ctpPosSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(PositionSummary &a, PositionSummary &b) {
  using ::std::swap;
  swap(a.techPlatform, b.techPlatform);
  swap(a.ctpPosSummary, b.ctpPosSummary);
  swap(a.__isset, b.__isset);
}

}}}}} // namespace
