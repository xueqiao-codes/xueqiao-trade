/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TradeHostingDealing_H
#define TradeHostingDealing_H

#include <thrift/TDispatchProcessor.h>
#include "trade_hosting_dealing_types.h"

namespace xueqiao { namespace trade { namespace hosting { namespace dealing { namespace thriftapi {

class TradeHostingDealingIf {
 public:
  virtual ~TradeHostingDealingIf() {}
  virtual void clearAll(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void createUserDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId, const int64_t subAccountId, const int64_t execOrderId, const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& contractSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDetail& orderDetail, const std::string& source) = 0;
  virtual void revokeDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) = 0;
  virtual void getOrder(std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) = 0;
  virtual void getOrderTrades(std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) = 0;
  virtual void getTradeRelatedLegs(std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execTradeId) = 0;
  virtual int64_t getRunningExecOrderIdByOrderRef(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderRef& orderRef) = 0;
  virtual int64_t getRunningExecOrderIdByOrderDealID(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDealID& dealId) = 0;
  virtual void getInDealingOrderPage(HostingExecOrderPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::platform::page::IndexedPageOption& pageOption) = 0;
  virtual int64_t createExecOrderId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual int64_t createExecTradeId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual int64_t createExecTradeLegId(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
};

class TradeHostingDealingIfFactory {
 public:
  typedef TradeHostingDealingIf Handler;

  virtual ~TradeHostingDealingIfFactory() {}

  virtual TradeHostingDealingIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TradeHostingDealingIf* /* handler */) = 0;
};

class TradeHostingDealingIfSingletonFactory : virtual public TradeHostingDealingIfFactory {
 public:
  TradeHostingDealingIfSingletonFactory(const boost::shared_ptr<TradeHostingDealingIf>& iface) : iface_(iface) {}
  virtual ~TradeHostingDealingIfSingletonFactory() {}

  virtual TradeHostingDealingIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TradeHostingDealingIf* /* handler */) {}

 protected:
  boost::shared_ptr<TradeHostingDealingIf> iface_;
};

class TradeHostingDealingNull : virtual public TradeHostingDealingIf {
 public:
  virtual ~TradeHostingDealingNull() {}
  void clearAll(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void createUserDeal(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int32_t /* subUserId */, const int64_t /* subAccountId */, const int64_t /* execOrderId */, const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& /* contractSummary */, const  ::xueqiao::trade::hosting::HostingExecOrderDetail& /* orderDetail */, const std::string& /* source */) {
    return;
  }
  void revokeDeal(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* execOrderId */) {
    return;
  }
  void getOrder(std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* execOrderId */) {
    return;
  }
  void getOrderTrades(std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* execOrderId */) {
    return;
  }
  void getTradeRelatedLegs(std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* execTradeId */) {
    return;
  }
  int64_t getRunningExecOrderIdByOrderRef(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& /* accountSummary */, const  ::xueqiao::trade::hosting::HostingExecOrderRef& /* orderRef */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t getRunningExecOrderIdByOrderDealID(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& /* accountSummary */, const  ::xueqiao::trade::hosting::HostingExecOrderDealID& /* dealId */) {
    int64_t _return = 0;
    return _return;
  }
  void getInDealingOrderPage(HostingExecOrderPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::platform::page::IndexedPageOption& /* pageOption */) {
    return;
  }
  int64_t createExecOrderId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t createExecTradeId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t createExecTradeLegId(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _TradeHostingDealing_clearAll_args__isset {
  _TradeHostingDealing_clearAll_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingDealing_clearAll_args__isset;

class TradeHostingDealing_clearAll_args {
 public:

  TradeHostingDealing_clearAll_args() {
  }

  virtual ~TradeHostingDealing_clearAll_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingDealing_clearAll_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingDealing_clearAll_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_clearAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_clearAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_clearAll_pargs {
 public:


  virtual ~TradeHostingDealing_clearAll_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_clearAll_result__isset {
  _TradeHostingDealing_clearAll_result__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_clearAll_result__isset;

class TradeHostingDealing_clearAll_result {
 public:

  TradeHostingDealing_clearAll_result() {
  }

  virtual ~TradeHostingDealing_clearAll_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_clearAll_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_clearAll_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_clearAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_clearAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_clearAll_presult__isset {
  _TradeHostingDealing_clearAll_presult__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_clearAll_presult__isset;

class TradeHostingDealing_clearAll_presult {
 public:


  virtual ~TradeHostingDealing_clearAll_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_clearAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_createUserDeal_args__isset {
  _TradeHostingDealing_createUserDeal_args__isset() : platformArgs(false), subUserId(false), subAccountId(false), execOrderId(false), contractSummary(false), orderDetail(false), source(false) {}
  bool platformArgs;
  bool subUserId;
  bool subAccountId;
  bool execOrderId;
  bool contractSummary;
  bool orderDetail;
  bool source;
} _TradeHostingDealing_createUserDeal_args__isset;

class TradeHostingDealing_createUserDeal_args {
 public:

  TradeHostingDealing_createUserDeal_args() : subUserId(0), subAccountId(0), execOrderId(0), source() {
  }

  virtual ~TradeHostingDealing_createUserDeal_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int32_t subUserId;
  int64_t subAccountId;
  int64_t execOrderId;
   ::xueqiao::trade::hosting::HostingExecOrderContractSummary contractSummary;
   ::xueqiao::trade::hosting::HostingExecOrderDetail orderDetail;
  std::string source;

  _TradeHostingDealing_createUserDeal_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
  }

  void __set_contractSummary(const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& val) {
    contractSummary = val;
  }

  void __set_orderDetail(const  ::xueqiao::trade::hosting::HostingExecOrderDetail& val) {
    orderDetail = val;
  }

  void __set_source(const std::string& val) {
    source = val;
  }

  bool operator == (const TradeHostingDealing_createUserDeal_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(subUserId == rhs.subUserId))
      return false;
    if (!(subAccountId == rhs.subAccountId))
      return false;
    if (!(execOrderId == rhs.execOrderId))
      return false;
    if (!(contractSummary == rhs.contractSummary))
      return false;
    if (!(orderDetail == rhs.orderDetail))
      return false;
    if (!(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createUserDeal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createUserDeal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_createUserDeal_pargs {
 public:


  virtual ~TradeHostingDealing_createUserDeal_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int32_t* subUserId;
  const int64_t* subAccountId;
  const int64_t* execOrderId;
  const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary* contractSummary;
  const  ::xueqiao::trade::hosting::HostingExecOrderDetail* orderDetail;
  const std::string* source;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createUserDeal_result__isset {
  _TradeHostingDealing_createUserDeal_result__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_createUserDeal_result__isset;

class TradeHostingDealing_createUserDeal_result {
 public:

  TradeHostingDealing_createUserDeal_result() {
  }

  virtual ~TradeHostingDealing_createUserDeal_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createUserDeal_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_createUserDeal_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createUserDeal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createUserDeal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createUserDeal_presult__isset {
  _TradeHostingDealing_createUserDeal_presult__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_createUserDeal_presult__isset;

class TradeHostingDealing_createUserDeal_presult {
 public:


  virtual ~TradeHostingDealing_createUserDeal_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createUserDeal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_revokeDeal_args__isset {
  _TradeHostingDealing_revokeDeal_args__isset() : platformArgs(false), execOrderId(false) {}
  bool platformArgs;
  bool execOrderId;
} _TradeHostingDealing_revokeDeal_args__isset;

class TradeHostingDealing_revokeDeal_args {
 public:

  TradeHostingDealing_revokeDeal_args() : execOrderId(0) {
  }

  virtual ~TradeHostingDealing_revokeDeal_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t execOrderId;

  _TradeHostingDealing_revokeDeal_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
  }

  bool operator == (const TradeHostingDealing_revokeDeal_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(execOrderId == rhs.execOrderId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_revokeDeal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_revokeDeal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_revokeDeal_pargs {
 public:


  virtual ~TradeHostingDealing_revokeDeal_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* execOrderId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_revokeDeal_result__isset {
  _TradeHostingDealing_revokeDeal_result__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_revokeDeal_result__isset;

class TradeHostingDealing_revokeDeal_result {
 public:

  TradeHostingDealing_revokeDeal_result() {
  }

  virtual ~TradeHostingDealing_revokeDeal_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_revokeDeal_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_revokeDeal_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_revokeDeal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_revokeDeal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_revokeDeal_presult__isset {
  _TradeHostingDealing_revokeDeal_presult__isset() : err(false) {}
  bool err;
} _TradeHostingDealing_revokeDeal_presult__isset;

class TradeHostingDealing_revokeDeal_presult {
 public:


  virtual ~TradeHostingDealing_revokeDeal_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_revokeDeal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getOrder_args__isset {
  _TradeHostingDealing_getOrder_args__isset() : platformArgs(false), execOrderId(false) {}
  bool platformArgs;
  bool execOrderId;
} _TradeHostingDealing_getOrder_args__isset;

class TradeHostingDealing_getOrder_args {
 public:

  TradeHostingDealing_getOrder_args() : execOrderId(0) {
  }

  virtual ~TradeHostingDealing_getOrder_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t execOrderId;

  _TradeHostingDealing_getOrder_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
  }

  bool operator == (const TradeHostingDealing_getOrder_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(execOrderId == rhs.execOrderId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getOrder_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getOrder_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getOrder_pargs {
 public:


  virtual ~TradeHostingDealing_getOrder_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* execOrderId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getOrder_result__isset {
  _TradeHostingDealing_getOrder_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getOrder_result__isset;

class TradeHostingDealing_getOrder_result {
 public:

  TradeHostingDealing_getOrder_result() {
  }

  virtual ~TradeHostingDealing_getOrder_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecOrder>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getOrder_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getOrder_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getOrder_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getOrder_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getOrder_presult__isset {
  _TradeHostingDealing_getOrder_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getOrder_presult__isset;

class TradeHostingDealing_getOrder_presult {
 public:


  virtual ~TradeHostingDealing_getOrder_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecOrder> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getOrder_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getOrderTrades_args__isset {
  _TradeHostingDealing_getOrderTrades_args__isset() : platformArgs(false), execOrderId(false) {}
  bool platformArgs;
  bool execOrderId;
} _TradeHostingDealing_getOrderTrades_args__isset;

class TradeHostingDealing_getOrderTrades_args {
 public:

  TradeHostingDealing_getOrderTrades_args() : execOrderId(0) {
  }

  virtual ~TradeHostingDealing_getOrderTrades_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t execOrderId;

  _TradeHostingDealing_getOrderTrades_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
  }

  bool operator == (const TradeHostingDealing_getOrderTrades_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(execOrderId == rhs.execOrderId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getOrderTrades_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getOrderTrades_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getOrderTrades_pargs {
 public:


  virtual ~TradeHostingDealing_getOrderTrades_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* execOrderId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getOrderTrades_result__isset {
  _TradeHostingDealing_getOrderTrades_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getOrderTrades_result__isset;

class TradeHostingDealing_getOrderTrades_result {
 public:

  TradeHostingDealing_getOrderTrades_result() {
  }

  virtual ~TradeHostingDealing_getOrderTrades_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecTrade>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getOrderTrades_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getOrderTrades_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getOrderTrades_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getOrderTrades_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getOrderTrades_presult__isset {
  _TradeHostingDealing_getOrderTrades_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getOrderTrades_presult__isset;

class TradeHostingDealing_getOrderTrades_presult {
 public:


  virtual ~TradeHostingDealing_getOrderTrades_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecTrade> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getOrderTrades_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getTradeRelatedLegs_args__isset {
  _TradeHostingDealing_getTradeRelatedLegs_args__isset() : platformArgs(false), execTradeId(false) {}
  bool platformArgs;
  bool execTradeId;
} _TradeHostingDealing_getTradeRelatedLegs_args__isset;

class TradeHostingDealing_getTradeRelatedLegs_args {
 public:

  TradeHostingDealing_getTradeRelatedLegs_args() : execTradeId(0) {
  }

  virtual ~TradeHostingDealing_getTradeRelatedLegs_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t execTradeId;

  _TradeHostingDealing_getTradeRelatedLegs_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_execTradeId(const int64_t val) {
    execTradeId = val;
  }

  bool operator == (const TradeHostingDealing_getTradeRelatedLegs_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(execTradeId == rhs.execTradeId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getTradeRelatedLegs_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getTradeRelatedLegs_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getTradeRelatedLegs_pargs {
 public:


  virtual ~TradeHostingDealing_getTradeRelatedLegs_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* execTradeId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getTradeRelatedLegs_result__isset {
  _TradeHostingDealing_getTradeRelatedLegs_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getTradeRelatedLegs_result__isset;

class TradeHostingDealing_getTradeRelatedLegs_result {
 public:

  TradeHostingDealing_getTradeRelatedLegs_result() {
  }

  virtual ~TradeHostingDealing_getTradeRelatedLegs_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getTradeRelatedLegs_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getTradeRelatedLegs_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getTradeRelatedLegs_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getTradeRelatedLegs_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getTradeRelatedLegs_presult__isset {
  _TradeHostingDealing_getTradeRelatedLegs_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getTradeRelatedLegs_presult__isset;

class TradeHostingDealing_getTradeRelatedLegs_presult {
 public:


  virtual ~TradeHostingDealing_getTradeRelatedLegs_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getTradeRelatedLegs_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderRef_args__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_args__isset() : platformArgs(false), accountSummary(false), orderRef(false) {}
  bool platformArgs;
  bool accountSummary;
  bool orderRef;
} _TradeHostingDealing_getRunningExecOrderIdByOrderRef_args__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderRef_args {
 public:

  TradeHostingDealing_getRunningExecOrderIdByOrderRef_args() {
  }

  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderRef_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary accountSummary;
   ::xueqiao::trade::hosting::HostingExecOrderRef orderRef;

  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_accountSummary(const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
  }

  void __set_orderRef(const  ::xueqiao::trade::hosting::HostingExecOrderRef& val) {
    orderRef = val;
  }

  bool operator == (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(accountSummary == rhs.accountSummary))
      return false;
    if (!(orderRef == rhs.orderRef))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getRunningExecOrderIdByOrderRef_pargs {
 public:


  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderRef_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary* accountSummary;
  const  ::xueqiao::trade::hosting::HostingExecOrderRef* orderRef;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderRef_result__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getRunningExecOrderIdByOrderRef_result__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderRef_result {
 public:

  TradeHostingDealing_getRunningExecOrderIdByOrderRef_result() : success(0) {
  }

  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderRef_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getRunningExecOrderIdByOrderRef_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult {
 public:


  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getRunningExecOrderIdByOrderRef_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args__isset() : platformArgs(false), accountSummary(false), dealId(false) {}
  bool platformArgs;
  bool accountSummary;
  bool dealId;
} _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args {
 public:

  TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args() {
  }

  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary accountSummary;
   ::xueqiao::trade::hosting::HostingExecOrderDealID dealId;

  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_accountSummary(const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
  }

  void __set_dealId(const  ::xueqiao::trade::hosting::HostingExecOrderDealID& val) {
    dealId = val;
  }

  bool operator == (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(accountSummary == rhs.accountSummary))
      return false;
    if (!(dealId == rhs.dealId))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getRunningExecOrderIdByOrderDealID_pargs {
 public:


  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderDealID_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary* accountSummary;
  const  ::xueqiao::trade::hosting::HostingExecOrderDealID* dealId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result {
 public:

  TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result() : success(0) {
  }

  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getRunningExecOrderIdByOrderDealID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult__isset {
  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult__isset;

class TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult {
 public:


  virtual ~TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getRunningExecOrderIdByOrderDealID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_getInDealingOrderPage_args__isset {
  _TradeHostingDealing_getInDealingOrderPage_args__isset() : platformArgs(false), pageOption(false) {}
  bool platformArgs;
  bool pageOption;
} _TradeHostingDealing_getInDealingOrderPage_args__isset;

class TradeHostingDealing_getInDealingOrderPage_args {
 public:

  TradeHostingDealing_getInDealingOrderPage_args() {
  }

  virtual ~TradeHostingDealing_getInDealingOrderPage_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::platform::page::IndexedPageOption pageOption;

  _TradeHostingDealing_getInDealingOrderPage_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_pageOption(const  ::platform::page::IndexedPageOption& val) {
    pageOption = val;
  }

  bool operator == (const TradeHostingDealing_getInDealingOrderPage_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(pageOption == rhs.pageOption))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getInDealingOrderPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getInDealingOrderPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_getInDealingOrderPage_pargs {
 public:


  virtual ~TradeHostingDealing_getInDealingOrderPage_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::platform::page::IndexedPageOption* pageOption;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getInDealingOrderPage_result__isset {
  _TradeHostingDealing_getInDealingOrderPage_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getInDealingOrderPage_result__isset;

class TradeHostingDealing_getInDealingOrderPage_result {
 public:

  TradeHostingDealing_getInDealingOrderPage_result() {
  }

  virtual ~TradeHostingDealing_getInDealingOrderPage_result() throw() {}

  HostingExecOrderPage success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getInDealingOrderPage_result__isset __isset;

  void __set_success(const HostingExecOrderPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_getInDealingOrderPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_getInDealingOrderPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_getInDealingOrderPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_getInDealingOrderPage_presult__isset {
  _TradeHostingDealing_getInDealingOrderPage_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_getInDealingOrderPage_presult__isset;

class TradeHostingDealing_getInDealingOrderPage_presult {
 public:


  virtual ~TradeHostingDealing_getInDealingOrderPage_presult() throw() {}

  HostingExecOrderPage* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_getInDealingOrderPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_createExecOrderId_args__isset {
  _TradeHostingDealing_createExecOrderId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingDealing_createExecOrderId_args__isset;

class TradeHostingDealing_createExecOrderId_args {
 public:

  TradeHostingDealing_createExecOrderId_args() {
  }

  virtual ~TradeHostingDealing_createExecOrderId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingDealing_createExecOrderId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingDealing_createExecOrderId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecOrderId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecOrderId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_createExecOrderId_pargs {
 public:


  virtual ~TradeHostingDealing_createExecOrderId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecOrderId_result__isset {
  _TradeHostingDealing_createExecOrderId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecOrderId_result__isset;

class TradeHostingDealing_createExecOrderId_result {
 public:

  TradeHostingDealing_createExecOrderId_result() : success(0) {
  }

  virtual ~TradeHostingDealing_createExecOrderId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecOrderId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_createExecOrderId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecOrderId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecOrderId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecOrderId_presult__isset {
  _TradeHostingDealing_createExecOrderId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecOrderId_presult__isset;

class TradeHostingDealing_createExecOrderId_presult {
 public:


  virtual ~TradeHostingDealing_createExecOrderId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecOrderId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_createExecTradeId_args__isset {
  _TradeHostingDealing_createExecTradeId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingDealing_createExecTradeId_args__isset;

class TradeHostingDealing_createExecTradeId_args {
 public:

  TradeHostingDealing_createExecTradeId_args() {
  }

  virtual ~TradeHostingDealing_createExecTradeId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingDealing_createExecTradeId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingDealing_createExecTradeId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecTradeId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecTradeId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_createExecTradeId_pargs {
 public:


  virtual ~TradeHostingDealing_createExecTradeId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecTradeId_result__isset {
  _TradeHostingDealing_createExecTradeId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecTradeId_result__isset;

class TradeHostingDealing_createExecTradeId_result {
 public:

  TradeHostingDealing_createExecTradeId_result() : success(0) {
  }

  virtual ~TradeHostingDealing_createExecTradeId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecTradeId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_createExecTradeId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecTradeId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecTradeId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecTradeId_presult__isset {
  _TradeHostingDealing_createExecTradeId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecTradeId_presult__isset;

class TradeHostingDealing_createExecTradeId_presult {
 public:


  virtual ~TradeHostingDealing_createExecTradeId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecTradeId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingDealing_createExecTradeLegId_args__isset {
  _TradeHostingDealing_createExecTradeLegId_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingDealing_createExecTradeLegId_args__isset;

class TradeHostingDealing_createExecTradeLegId_args {
 public:

  TradeHostingDealing_createExecTradeLegId_args() {
  }

  virtual ~TradeHostingDealing_createExecTradeLegId_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingDealing_createExecTradeLegId_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingDealing_createExecTradeLegId_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecTradeLegId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecTradeLegId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingDealing_createExecTradeLegId_pargs {
 public:


  virtual ~TradeHostingDealing_createExecTradeLegId_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecTradeLegId_result__isset {
  _TradeHostingDealing_createExecTradeLegId_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecTradeLegId_result__isset;

class TradeHostingDealing_createExecTradeLegId_result {
 public:

  TradeHostingDealing_createExecTradeLegId_result() : success(0) {
  }

  virtual ~TradeHostingDealing_createExecTradeLegId_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecTradeLegId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingDealing_createExecTradeLegId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingDealing_createExecTradeLegId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingDealing_createExecTradeLegId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingDealing_createExecTradeLegId_presult__isset {
  _TradeHostingDealing_createExecTradeLegId_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingDealing_createExecTradeLegId_presult__isset;

class TradeHostingDealing_createExecTradeLegId_presult {
 public:


  virtual ~TradeHostingDealing_createExecTradeLegId_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingDealing_createExecTradeLegId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TradeHostingDealingClient : virtual public TradeHostingDealingIf {
 public:
  TradeHostingDealingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TradeHostingDealingClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void clearAll(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_clearAll(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_clearAll();
  void createUserDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId, const int64_t subAccountId, const int64_t execOrderId, const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& contractSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDetail& orderDetail, const std::string& source);
  void send_createUserDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId, const int64_t subAccountId, const int64_t execOrderId, const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& contractSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDetail& orderDetail, const std::string& source);
  void recv_createUserDeal();
  void revokeDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void send_revokeDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void recv_revokeDeal();
  void getOrder(std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void send_getOrder(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void recv_getOrder(std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & _return);
  void getOrderTrades(std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void send_getOrderTrades(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId);
  void recv_getOrderTrades(std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & _return);
  void getTradeRelatedLegs(std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execTradeId);
  void send_getTradeRelatedLegs(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execTradeId);
  void recv_getTradeRelatedLegs(std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & _return);
  int64_t getRunningExecOrderIdByOrderRef(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderRef& orderRef);
  void send_getRunningExecOrderIdByOrderRef(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderRef& orderRef);
  int64_t recv_getRunningExecOrderIdByOrderRef();
  int64_t getRunningExecOrderIdByOrderDealID(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDealID& dealId);
  void send_getRunningExecOrderIdByOrderDealID(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDealID& dealId);
  int64_t recv_getRunningExecOrderIdByOrderDealID();
  void getInDealingOrderPage(HostingExecOrderPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::platform::page::IndexedPageOption& pageOption);
  void send_getInDealingOrderPage(const  ::platform::comm::PlatformArgs& platformArgs, const  ::platform::page::IndexedPageOption& pageOption);
  void recv_getInDealingOrderPage(HostingExecOrderPage& _return);
  int64_t createExecOrderId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createExecOrderId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createExecOrderId();
  int64_t createExecTradeId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createExecTradeId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createExecTradeId();
  int64_t createExecTradeLegId(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_createExecTradeLegId(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_createExecTradeLegId();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TradeHostingDealingProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TradeHostingDealingIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TradeHostingDealingProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_clearAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createUserDeal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_revokeDeal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrder(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getOrderTrades(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTradeRelatedLegs(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunningExecOrderIdByOrderRef(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRunningExecOrderIdByOrderDealID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInDealingOrderPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExecOrderId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExecTradeId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createExecTradeLegId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TradeHostingDealingProcessor(boost::shared_ptr<TradeHostingDealingIf> iface) :
    iface_(iface) {
    processMap_["clearAll"] = &TradeHostingDealingProcessor::process_clearAll;
    processMap_["createUserDeal"] = &TradeHostingDealingProcessor::process_createUserDeal;
    processMap_["revokeDeal"] = &TradeHostingDealingProcessor::process_revokeDeal;
    processMap_["getOrder"] = &TradeHostingDealingProcessor::process_getOrder;
    processMap_["getOrderTrades"] = &TradeHostingDealingProcessor::process_getOrderTrades;
    processMap_["getTradeRelatedLegs"] = &TradeHostingDealingProcessor::process_getTradeRelatedLegs;
    processMap_["getRunningExecOrderIdByOrderRef"] = &TradeHostingDealingProcessor::process_getRunningExecOrderIdByOrderRef;
    processMap_["getRunningExecOrderIdByOrderDealID"] = &TradeHostingDealingProcessor::process_getRunningExecOrderIdByOrderDealID;
    processMap_["getInDealingOrderPage"] = &TradeHostingDealingProcessor::process_getInDealingOrderPage;
    processMap_["createExecOrderId"] = &TradeHostingDealingProcessor::process_createExecOrderId;
    processMap_["createExecTradeId"] = &TradeHostingDealingProcessor::process_createExecTradeId;
    processMap_["createExecTradeLegId"] = &TradeHostingDealingProcessor::process_createExecTradeLegId;
  }

  virtual ~TradeHostingDealingProcessor() {}
};

class TradeHostingDealingProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TradeHostingDealingProcessorFactory(const ::boost::shared_ptr< TradeHostingDealingIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TradeHostingDealingIfFactory > handlerFactory_;
};

class TradeHostingDealingMultiface : virtual public TradeHostingDealingIf {
 public:
  TradeHostingDealingMultiface(std::vector<boost::shared_ptr<TradeHostingDealingIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TradeHostingDealingMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TradeHostingDealingIf> > ifaces_;
  TradeHostingDealingMultiface() {}
  void add(boost::shared_ptr<TradeHostingDealingIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void clearAll(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clearAll(platformArgs);
    }
    ifaces_[i]->clearAll(platformArgs);
  }

  void createUserDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t subUserId, const int64_t subAccountId, const int64_t execOrderId, const  ::xueqiao::trade::hosting::HostingExecOrderContractSummary& contractSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDetail& orderDetail, const std::string& source) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createUserDeal(platformArgs, subUserId, subAccountId, execOrderId, contractSummary, orderDetail, source);
    }
    ifaces_[i]->createUserDeal(platformArgs, subUserId, subAccountId, execOrderId, contractSummary, orderDetail, source);
  }

  void revokeDeal(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->revokeDeal(platformArgs, execOrderId);
    }
    ifaces_[i]->revokeDeal(platformArgs, execOrderId);
  }

  void getOrder(std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrder(_return, platformArgs, execOrderId);
    }
    ifaces_[i]->getOrder(_return, platformArgs, execOrderId);
    return;
  }

  void getOrderTrades(std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execOrderId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getOrderTrades(_return, platformArgs, execOrderId);
    }
    ifaces_[i]->getOrderTrades(_return, platformArgs, execOrderId);
    return;
  }

  void getTradeRelatedLegs(std::vector< ::xueqiao::trade::hosting::HostingExecTradeLeg> & _return, const  ::platform::comm::PlatformArgs& platformArgs, const int64_t execTradeId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTradeRelatedLegs(_return, platformArgs, execTradeId);
    }
    ifaces_[i]->getTradeRelatedLegs(_return, platformArgs, execTradeId);
    return;
  }

  int64_t getRunningExecOrderIdByOrderRef(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderRef& orderRef) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunningExecOrderIdByOrderRef(platformArgs, accountSummary, orderRef);
    }
    return ifaces_[i]->getRunningExecOrderIdByOrderRef(platformArgs, accountSummary, orderRef);
  }

  int64_t getRunningExecOrderIdByOrderDealID(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& accountSummary, const  ::xueqiao::trade::hosting::HostingExecOrderDealID& dealId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRunningExecOrderIdByOrderDealID(platformArgs, accountSummary, dealId);
    }
    return ifaces_[i]->getRunningExecOrderIdByOrderDealID(platformArgs, accountSummary, dealId);
  }

  void getInDealingOrderPage(HostingExecOrderPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::platform::page::IndexedPageOption& pageOption) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInDealingOrderPage(_return, platformArgs, pageOption);
    }
    ifaces_[i]->getInDealingOrderPage(_return, platformArgs, pageOption);
    return;
  }

  int64_t createExecOrderId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExecOrderId(platformArgs);
    }
    return ifaces_[i]->createExecOrderId(platformArgs);
  }

  int64_t createExecTradeId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExecTradeId(platformArgs);
    }
    return ifaces_[i]->createExecTradeId(platformArgs);
  }

  int64_t createExecTradeLegId(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createExecTradeLegId(platformArgs);
    }
    return ifaces_[i]->createExecTradeLegId(platformArgs);
  }

};

}}}}} // namespace

#endif
