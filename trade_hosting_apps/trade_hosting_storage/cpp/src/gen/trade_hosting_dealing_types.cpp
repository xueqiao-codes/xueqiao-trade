/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_dealing_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace dealing { namespace thriftapi {

const char* HostingExecOrderPage::ascii_fingerprint = "C4B25DF2A7838E771C60D92305258EB7";
const uint8_t HostingExecOrderPage::binary_fingerprint[16] = {0xC4,0xB2,0x5D,0xF2,0xA7,0x83,0x8E,0x77,0x1C,0x60,0xD9,0x23,0x05,0x25,0x8E,0xB7};

uint32_t HostingExecOrderPage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->totalCount);
          this->__isset.totalCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->resultList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->resultList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->resultList[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.resultList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HostingExecOrderPage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HostingExecOrderPage");

  if (this->__isset.totalCount) {
    xfer += oprot->writeFieldBegin("totalCount", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->totalCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.resultList) {
    xfer += oprot->writeFieldBegin("resultList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->resultList.size()));
      std::vector< ::xueqiao::trade::hosting::HostingExecOrder> ::const_iterator _iter5;
      for (_iter5 = this->resultList.begin(); _iter5 != this->resultList.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HostingExecOrderPage &a, HostingExecOrderPage &b) {
  using ::std::swap;
  swap(a.totalCount, b.totalCount);
  swap(a.resultList, b.resultList);
  swap(a.__isset, b.__isset);
}

}}}}} // namespace
