/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ContractOnlineDaoService_H
#define ContractOnlineDaoService_H

#include <thrift/TDispatchProcessor.h>
#include "contract_online_dao_service_types.h"

namespace xueqiao { namespace contract { namespace online { namespace dao {

class ContractOnlineDaoServiceIf {
 public:
  virtual ~ContractOnlineDaoServiceIf() {}
  virtual void reqSledContract( ::xueqiao::contract::standard::SledContractPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledContractOption& option, const int32_t pageIndex, const int32_t pageSize) = 0;
  virtual void reqCommodityMapping( ::xueqiao::contract::standard::CommodityMappingPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqCommodityMappingOption& option, const int32_t pageIndex, const int32_t pageSize) = 0;
  virtual void reqSledExchange( ::xueqiao::contract::standard::SledExchangePage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledExchangeOption& option, const int32_t pageIndex, const int32_t pageSize) = 0;
  virtual void reqSledCommodity( ::xueqiao::contract::standard::SledCommodityPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledCommodityOption& option, const int32_t pageIndex, const int32_t pageSize) = 0;
  virtual void reqContractVersion( ::xueqiao::contract::ContractVersionPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ReqContractVersionOption& option, const int32_t pageIndex, const int32_t pageSize) = 0;
  virtual void updateContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ContractVersion& contractVersion) = 0;
  virtual void removeContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t versionId) = 0;
  virtual void addDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::DbLockingInfo& dbLockingInfo) = 0;
  virtual void removeDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const std::string& lockedBy) = 0;
  virtual void reqDbLockingInfo( ::xueqiao::contract::DbLockingInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
};

class ContractOnlineDaoServiceIfFactory {
 public:
  typedef ContractOnlineDaoServiceIf Handler;

  virtual ~ContractOnlineDaoServiceIfFactory() {}

  virtual ContractOnlineDaoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ContractOnlineDaoServiceIf* /* handler */) = 0;
};

class ContractOnlineDaoServiceIfSingletonFactory : virtual public ContractOnlineDaoServiceIfFactory {
 public:
  ContractOnlineDaoServiceIfSingletonFactory(const boost::shared_ptr<ContractOnlineDaoServiceIf>& iface) : iface_(iface) {}
  virtual ~ContractOnlineDaoServiceIfSingletonFactory() {}

  virtual ContractOnlineDaoServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ContractOnlineDaoServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ContractOnlineDaoServiceIf> iface_;
};

class ContractOnlineDaoServiceNull : virtual public ContractOnlineDaoServiceIf {
 public:
  virtual ~ContractOnlineDaoServiceNull() {}
  void reqSledContract( ::xueqiao::contract::standard::SledContractPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::standard::ReqSledContractOption& /* option */, const int32_t /* pageIndex */, const int32_t /* pageSize */) {
    return;
  }
  void reqCommodityMapping( ::xueqiao::contract::standard::CommodityMappingPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::standard::ReqCommodityMappingOption& /* option */, const int32_t /* pageIndex */, const int32_t /* pageSize */) {
    return;
  }
  void reqSledExchange( ::xueqiao::contract::standard::SledExchangePage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::standard::ReqSledExchangeOption& /* option */, const int32_t /* pageIndex */, const int32_t /* pageSize */) {
    return;
  }
  void reqSledCommodity( ::xueqiao::contract::standard::SledCommodityPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::standard::ReqSledCommodityOption& /* option */, const int32_t /* pageIndex */, const int32_t /* pageSize */) {
    return;
  }
  void reqContractVersion( ::xueqiao::contract::ContractVersionPage& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::ReqContractVersionOption& /* option */, const int32_t /* pageIndex */, const int32_t /* pageSize */) {
    return;
  }
  void updateContractVersion(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::ContractVersion& /* contractVersion */) {
    return;
  }
  void removeContractVersion(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int32_t /* versionId */) {
    return;
  }
  void addDbLocking(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::contract::DbLockingInfo& /* dbLockingInfo */) {
    return;
  }
  void removeDbLocking(const  ::platform::comm::PlatformArgs& /* platformArgs */, const std::string& /* lockedBy */) {
    return;
  }
  void reqDbLockingInfo( ::xueqiao::contract::DbLockingInfo& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
};

typedef struct _ContractOnlineDaoService_reqSledContract_args__isset {
  _ContractOnlineDaoService_reqSledContract_args__isset() : platformArgs(false), option(false), pageIndex(false), pageSize(false) {}
  bool platformArgs;
  bool option;
  bool pageIndex;
  bool pageSize;
} _ContractOnlineDaoService_reqSledContract_args__isset;

class ContractOnlineDaoService_reqSledContract_args {
 public:

  ContractOnlineDaoService_reqSledContract_args() : pageIndex(0), pageSize(0) {
  }

  virtual ~ContractOnlineDaoService_reqSledContract_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::standard::ReqSledContractOption option;
  int32_t pageIndex;
  int32_t pageSize;

  _ContractOnlineDaoService_reqSledContract_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_option(const  ::xueqiao::contract::standard::ReqSledContractOption& val) {
    option = val;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledContract_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(option == rhs.option))
      return false;
    if (!(pageIndex == rhs.pageIndex))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledContract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledContract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqSledContract_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqSledContract_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::standard::ReqSledContractOption* option;
  const int32_t* pageIndex;
  const int32_t* pageSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledContract_result__isset {
  _ContractOnlineDaoService_reqSledContract_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledContract_result__isset;

class ContractOnlineDaoService_reqSledContract_result {
 public:

  ContractOnlineDaoService_reqSledContract_result() {
  }

  virtual ~ContractOnlineDaoService_reqSledContract_result() throw() {}

   ::xueqiao::contract::standard::SledContractPage success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledContract_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::standard::SledContractPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledContract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledContract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledContract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledContract_presult__isset {
  _ContractOnlineDaoService_reqSledContract_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledContract_presult__isset;

class ContractOnlineDaoService_reqSledContract_presult {
 public:


  virtual ~ContractOnlineDaoService_reqSledContract_presult() throw() {}

   ::xueqiao::contract::standard::SledContractPage* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledContract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_reqCommodityMapping_args__isset {
  _ContractOnlineDaoService_reqCommodityMapping_args__isset() : platformArgs(false), option(false), pageIndex(false), pageSize(false) {}
  bool platformArgs;
  bool option;
  bool pageIndex;
  bool pageSize;
} _ContractOnlineDaoService_reqCommodityMapping_args__isset;

class ContractOnlineDaoService_reqCommodityMapping_args {
 public:

  ContractOnlineDaoService_reqCommodityMapping_args() : pageIndex(0), pageSize(0) {
  }

  virtual ~ContractOnlineDaoService_reqCommodityMapping_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::standard::ReqCommodityMappingOption option;
  int32_t pageIndex;
  int32_t pageSize;

  _ContractOnlineDaoService_reqCommodityMapping_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_option(const  ::xueqiao::contract::standard::ReqCommodityMappingOption& val) {
    option = val;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
  }

  bool operator == (const ContractOnlineDaoService_reqCommodityMapping_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(option == rhs.option))
      return false;
    if (!(pageIndex == rhs.pageIndex))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqCommodityMapping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqCommodityMapping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqCommodityMapping_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqCommodityMapping_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::standard::ReqCommodityMappingOption* option;
  const int32_t* pageIndex;
  const int32_t* pageSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqCommodityMapping_result__isset {
  _ContractOnlineDaoService_reqCommodityMapping_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqCommodityMapping_result__isset;

class ContractOnlineDaoService_reqCommodityMapping_result {
 public:

  ContractOnlineDaoService_reqCommodityMapping_result() {
  }

  virtual ~ContractOnlineDaoService_reqCommodityMapping_result() throw() {}

   ::xueqiao::contract::standard::CommodityMappingPage success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqCommodityMapping_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::standard::CommodityMappingPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqCommodityMapping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqCommodityMapping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqCommodityMapping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqCommodityMapping_presult__isset {
  _ContractOnlineDaoService_reqCommodityMapping_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqCommodityMapping_presult__isset;

class ContractOnlineDaoService_reqCommodityMapping_presult {
 public:


  virtual ~ContractOnlineDaoService_reqCommodityMapping_presult() throw() {}

   ::xueqiao::contract::standard::CommodityMappingPage* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqCommodityMapping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_reqSledExchange_args__isset {
  _ContractOnlineDaoService_reqSledExchange_args__isset() : platformArgs(false), option(false), pageIndex(false), pageSize(false) {}
  bool platformArgs;
  bool option;
  bool pageIndex;
  bool pageSize;
} _ContractOnlineDaoService_reqSledExchange_args__isset;

class ContractOnlineDaoService_reqSledExchange_args {
 public:

  ContractOnlineDaoService_reqSledExchange_args() : pageIndex(0), pageSize(0) {
  }

  virtual ~ContractOnlineDaoService_reqSledExchange_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::standard::ReqSledExchangeOption option;
  int32_t pageIndex;
  int32_t pageSize;

  _ContractOnlineDaoService_reqSledExchange_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_option(const  ::xueqiao::contract::standard::ReqSledExchangeOption& val) {
    option = val;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledExchange_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(option == rhs.option))
      return false;
    if (!(pageIndex == rhs.pageIndex))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledExchange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledExchange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqSledExchange_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqSledExchange_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::standard::ReqSledExchangeOption* option;
  const int32_t* pageIndex;
  const int32_t* pageSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledExchange_result__isset {
  _ContractOnlineDaoService_reqSledExchange_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledExchange_result__isset;

class ContractOnlineDaoService_reqSledExchange_result {
 public:

  ContractOnlineDaoService_reqSledExchange_result() {
  }

  virtual ~ContractOnlineDaoService_reqSledExchange_result() throw() {}

   ::xueqiao::contract::standard::SledExchangePage success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledExchange_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::standard::SledExchangePage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledExchange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledExchange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledExchange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledExchange_presult__isset {
  _ContractOnlineDaoService_reqSledExchange_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledExchange_presult__isset;

class ContractOnlineDaoService_reqSledExchange_presult {
 public:


  virtual ~ContractOnlineDaoService_reqSledExchange_presult() throw() {}

   ::xueqiao::contract::standard::SledExchangePage* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledExchange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_reqSledCommodity_args__isset {
  _ContractOnlineDaoService_reqSledCommodity_args__isset() : platformArgs(false), option(false), pageIndex(false), pageSize(false) {}
  bool platformArgs;
  bool option;
  bool pageIndex;
  bool pageSize;
} _ContractOnlineDaoService_reqSledCommodity_args__isset;

class ContractOnlineDaoService_reqSledCommodity_args {
 public:

  ContractOnlineDaoService_reqSledCommodity_args() : pageIndex(0), pageSize(0) {
  }

  virtual ~ContractOnlineDaoService_reqSledCommodity_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::standard::ReqSledCommodityOption option;
  int32_t pageIndex;
  int32_t pageSize;

  _ContractOnlineDaoService_reqSledCommodity_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_option(const  ::xueqiao::contract::standard::ReqSledCommodityOption& val) {
    option = val;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledCommodity_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(option == rhs.option))
      return false;
    if (!(pageIndex == rhs.pageIndex))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledCommodity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledCommodity_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqSledCommodity_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqSledCommodity_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::standard::ReqSledCommodityOption* option;
  const int32_t* pageIndex;
  const int32_t* pageSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledCommodity_result__isset {
  _ContractOnlineDaoService_reqSledCommodity_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledCommodity_result__isset;

class ContractOnlineDaoService_reqSledCommodity_result {
 public:

  ContractOnlineDaoService_reqSledCommodity_result() {
  }

  virtual ~ContractOnlineDaoService_reqSledCommodity_result() throw() {}

   ::xueqiao::contract::standard::SledCommodityPage success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledCommodity_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::standard::SledCommodityPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqSledCommodity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqSledCommodity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqSledCommodity_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqSledCommodity_presult__isset {
  _ContractOnlineDaoService_reqSledCommodity_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqSledCommodity_presult__isset;

class ContractOnlineDaoService_reqSledCommodity_presult {
 public:


  virtual ~ContractOnlineDaoService_reqSledCommodity_presult() throw() {}

   ::xueqiao::contract::standard::SledCommodityPage* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqSledCommodity_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_reqContractVersion_args__isset {
  _ContractOnlineDaoService_reqContractVersion_args__isset() : platformArgs(false), option(false), pageIndex(false), pageSize(false) {}
  bool platformArgs;
  bool option;
  bool pageIndex;
  bool pageSize;
} _ContractOnlineDaoService_reqContractVersion_args__isset;

class ContractOnlineDaoService_reqContractVersion_args {
 public:

  ContractOnlineDaoService_reqContractVersion_args() : pageIndex(0), pageSize(0) {
  }

  virtual ~ContractOnlineDaoService_reqContractVersion_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::ReqContractVersionOption option;
  int32_t pageIndex;
  int32_t pageSize;

  _ContractOnlineDaoService_reqContractVersion_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_option(const  ::xueqiao::contract::ReqContractVersionOption& val) {
    option = val;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
  }

  bool operator == (const ContractOnlineDaoService_reqContractVersion_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(option == rhs.option))
      return false;
    if (!(pageIndex == rhs.pageIndex))
      return false;
    if (!(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqContractVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqContractVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqContractVersion_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqContractVersion_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::ReqContractVersionOption* option;
  const int32_t* pageIndex;
  const int32_t* pageSize;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqContractVersion_result__isset {
  _ContractOnlineDaoService_reqContractVersion_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqContractVersion_result__isset;

class ContractOnlineDaoService_reqContractVersion_result {
 public:

  ContractOnlineDaoService_reqContractVersion_result() {
  }

  virtual ~ContractOnlineDaoService_reqContractVersion_result() throw() {}

   ::xueqiao::contract::ContractVersionPage success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqContractVersion_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::ContractVersionPage& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqContractVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqContractVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqContractVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqContractVersion_presult__isset {
  _ContractOnlineDaoService_reqContractVersion_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqContractVersion_presult__isset;

class ContractOnlineDaoService_reqContractVersion_presult {
 public:


  virtual ~ContractOnlineDaoService_reqContractVersion_presult() throw() {}

   ::xueqiao::contract::ContractVersionPage* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqContractVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_updateContractVersion_args__isset {
  _ContractOnlineDaoService_updateContractVersion_args__isset() : platformArgs(false), contractVersion(false) {}
  bool platformArgs;
  bool contractVersion;
} _ContractOnlineDaoService_updateContractVersion_args__isset;

class ContractOnlineDaoService_updateContractVersion_args {
 public:

  ContractOnlineDaoService_updateContractVersion_args() {
  }

  virtual ~ContractOnlineDaoService_updateContractVersion_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::ContractVersion contractVersion;

  _ContractOnlineDaoService_updateContractVersion_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_contractVersion(const  ::xueqiao::contract::ContractVersion& val) {
    contractVersion = val;
  }

  bool operator == (const ContractOnlineDaoService_updateContractVersion_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(contractVersion == rhs.contractVersion))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_updateContractVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_updateContractVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_updateContractVersion_pargs {
 public:


  virtual ~ContractOnlineDaoService_updateContractVersion_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::ContractVersion* contractVersion;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_updateContractVersion_result__isset {
  _ContractOnlineDaoService_updateContractVersion_result__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_updateContractVersion_result__isset;

class ContractOnlineDaoService_updateContractVersion_result {
 public:

  ContractOnlineDaoService_updateContractVersion_result() {
  }

  virtual ~ContractOnlineDaoService_updateContractVersion_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_updateContractVersion_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_updateContractVersion_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_updateContractVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_updateContractVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_updateContractVersion_presult__isset {
  _ContractOnlineDaoService_updateContractVersion_presult__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_updateContractVersion_presult__isset;

class ContractOnlineDaoService_updateContractVersion_presult {
 public:


  virtual ~ContractOnlineDaoService_updateContractVersion_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_updateContractVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_removeContractVersion_args__isset {
  _ContractOnlineDaoService_removeContractVersion_args__isset() : platformArgs(false), versionId(false) {}
  bool platformArgs;
  bool versionId;
} _ContractOnlineDaoService_removeContractVersion_args__isset;

class ContractOnlineDaoService_removeContractVersion_args {
 public:

  ContractOnlineDaoService_removeContractVersion_args() : versionId(0) {
  }

  virtual ~ContractOnlineDaoService_removeContractVersion_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int32_t versionId;

  _ContractOnlineDaoService_removeContractVersion_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_versionId(const int32_t val) {
    versionId = val;
  }

  bool operator == (const ContractOnlineDaoService_removeContractVersion_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(versionId == rhs.versionId))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_removeContractVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_removeContractVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_removeContractVersion_pargs {
 public:


  virtual ~ContractOnlineDaoService_removeContractVersion_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int32_t* versionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_removeContractVersion_result__isset {
  _ContractOnlineDaoService_removeContractVersion_result__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_removeContractVersion_result__isset;

class ContractOnlineDaoService_removeContractVersion_result {
 public:

  ContractOnlineDaoService_removeContractVersion_result() {
  }

  virtual ~ContractOnlineDaoService_removeContractVersion_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_removeContractVersion_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_removeContractVersion_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_removeContractVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_removeContractVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_removeContractVersion_presult__isset {
  _ContractOnlineDaoService_removeContractVersion_presult__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_removeContractVersion_presult__isset;

class ContractOnlineDaoService_removeContractVersion_presult {
 public:


  virtual ~ContractOnlineDaoService_removeContractVersion_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_removeContractVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_addDbLocking_args__isset {
  _ContractOnlineDaoService_addDbLocking_args__isset() : platformArgs(false), dbLockingInfo(false) {}
  bool platformArgs;
  bool dbLockingInfo;
} _ContractOnlineDaoService_addDbLocking_args__isset;

class ContractOnlineDaoService_addDbLocking_args {
 public:

  ContractOnlineDaoService_addDbLocking_args() {
  }

  virtual ~ContractOnlineDaoService_addDbLocking_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::contract::DbLockingInfo dbLockingInfo;

  _ContractOnlineDaoService_addDbLocking_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_dbLockingInfo(const  ::xueqiao::contract::DbLockingInfo& val) {
    dbLockingInfo = val;
  }

  bool operator == (const ContractOnlineDaoService_addDbLocking_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(dbLockingInfo == rhs.dbLockingInfo))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_addDbLocking_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_addDbLocking_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_addDbLocking_pargs {
 public:


  virtual ~ContractOnlineDaoService_addDbLocking_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::contract::DbLockingInfo* dbLockingInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_addDbLocking_result__isset {
  _ContractOnlineDaoService_addDbLocking_result__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_addDbLocking_result__isset;

class ContractOnlineDaoService_addDbLocking_result {
 public:

  ContractOnlineDaoService_addDbLocking_result() {
  }

  virtual ~ContractOnlineDaoService_addDbLocking_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_addDbLocking_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_addDbLocking_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_addDbLocking_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_addDbLocking_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_addDbLocking_presult__isset {
  _ContractOnlineDaoService_addDbLocking_presult__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_addDbLocking_presult__isset;

class ContractOnlineDaoService_addDbLocking_presult {
 public:


  virtual ~ContractOnlineDaoService_addDbLocking_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_addDbLocking_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_removeDbLocking_args__isset {
  _ContractOnlineDaoService_removeDbLocking_args__isset() : platformArgs(false), lockedBy(false) {}
  bool platformArgs;
  bool lockedBy;
} _ContractOnlineDaoService_removeDbLocking_args__isset;

class ContractOnlineDaoService_removeDbLocking_args {
 public:

  ContractOnlineDaoService_removeDbLocking_args() : lockedBy() {
  }

  virtual ~ContractOnlineDaoService_removeDbLocking_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  std::string lockedBy;

  _ContractOnlineDaoService_removeDbLocking_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_lockedBy(const std::string& val) {
    lockedBy = val;
  }

  bool operator == (const ContractOnlineDaoService_removeDbLocking_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(lockedBy == rhs.lockedBy))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_removeDbLocking_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_removeDbLocking_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_removeDbLocking_pargs {
 public:


  virtual ~ContractOnlineDaoService_removeDbLocking_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const std::string* lockedBy;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_removeDbLocking_result__isset {
  _ContractOnlineDaoService_removeDbLocking_result__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_removeDbLocking_result__isset;

class ContractOnlineDaoService_removeDbLocking_result {
 public:

  ContractOnlineDaoService_removeDbLocking_result() {
  }

  virtual ~ContractOnlineDaoService_removeDbLocking_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_removeDbLocking_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_removeDbLocking_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_removeDbLocking_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_removeDbLocking_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_removeDbLocking_presult__isset {
  _ContractOnlineDaoService_removeDbLocking_presult__isset() : err(false) {}
  bool err;
} _ContractOnlineDaoService_removeDbLocking_presult__isset;

class ContractOnlineDaoService_removeDbLocking_presult {
 public:


  virtual ~ContractOnlineDaoService_removeDbLocking_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_removeDbLocking_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ContractOnlineDaoService_reqDbLockingInfo_args__isset {
  _ContractOnlineDaoService_reqDbLockingInfo_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _ContractOnlineDaoService_reqDbLockingInfo_args__isset;

class ContractOnlineDaoService_reqDbLockingInfo_args {
 public:

  ContractOnlineDaoService_reqDbLockingInfo_args() {
  }

  virtual ~ContractOnlineDaoService_reqDbLockingInfo_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _ContractOnlineDaoService_reqDbLockingInfo_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const ContractOnlineDaoService_reqDbLockingInfo_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqDbLockingInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqDbLockingInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ContractOnlineDaoService_reqDbLockingInfo_pargs {
 public:


  virtual ~ContractOnlineDaoService_reqDbLockingInfo_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqDbLockingInfo_result__isset {
  _ContractOnlineDaoService_reqDbLockingInfo_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqDbLockingInfo_result__isset;

class ContractOnlineDaoService_reqDbLockingInfo_result {
 public:

  ContractOnlineDaoService_reqDbLockingInfo_result() {
  }

  virtual ~ContractOnlineDaoService_reqDbLockingInfo_result() throw() {}

   ::xueqiao::contract::DbLockingInfo success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqDbLockingInfo_result__isset __isset;

  void __set_success(const  ::xueqiao::contract::DbLockingInfo& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const ContractOnlineDaoService_reqDbLockingInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ContractOnlineDaoService_reqDbLockingInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractOnlineDaoService_reqDbLockingInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ContractOnlineDaoService_reqDbLockingInfo_presult__isset {
  _ContractOnlineDaoService_reqDbLockingInfo_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _ContractOnlineDaoService_reqDbLockingInfo_presult__isset;

class ContractOnlineDaoService_reqDbLockingInfo_presult {
 public:


  virtual ~ContractOnlineDaoService_reqDbLockingInfo_presult() throw() {}

   ::xueqiao::contract::DbLockingInfo* success;
   ::platform::comm::ErrorInfo err;

  _ContractOnlineDaoService_reqDbLockingInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ContractOnlineDaoServiceClient : virtual public ContractOnlineDaoServiceIf {
 public:
  ContractOnlineDaoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ContractOnlineDaoServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void reqSledContract( ::xueqiao::contract::standard::SledContractPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledContractOption& option, const int32_t pageIndex, const int32_t pageSize);
  void send_reqSledContract(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledContractOption& option, const int32_t pageIndex, const int32_t pageSize);
  void recv_reqSledContract( ::xueqiao::contract::standard::SledContractPage& _return);
  void reqCommodityMapping( ::xueqiao::contract::standard::CommodityMappingPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqCommodityMappingOption& option, const int32_t pageIndex, const int32_t pageSize);
  void send_reqCommodityMapping(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqCommodityMappingOption& option, const int32_t pageIndex, const int32_t pageSize);
  void recv_reqCommodityMapping( ::xueqiao::contract::standard::CommodityMappingPage& _return);
  void reqSledExchange( ::xueqiao::contract::standard::SledExchangePage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledExchangeOption& option, const int32_t pageIndex, const int32_t pageSize);
  void send_reqSledExchange(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledExchangeOption& option, const int32_t pageIndex, const int32_t pageSize);
  void recv_reqSledExchange( ::xueqiao::contract::standard::SledExchangePage& _return);
  void reqSledCommodity( ::xueqiao::contract::standard::SledCommodityPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledCommodityOption& option, const int32_t pageIndex, const int32_t pageSize);
  void send_reqSledCommodity(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledCommodityOption& option, const int32_t pageIndex, const int32_t pageSize);
  void recv_reqSledCommodity( ::xueqiao::contract::standard::SledCommodityPage& _return);
  void reqContractVersion( ::xueqiao::contract::ContractVersionPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ReqContractVersionOption& option, const int32_t pageIndex, const int32_t pageSize);
  void send_reqContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ReqContractVersionOption& option, const int32_t pageIndex, const int32_t pageSize);
  void recv_reqContractVersion( ::xueqiao::contract::ContractVersionPage& _return);
  void updateContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ContractVersion& contractVersion);
  void send_updateContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ContractVersion& contractVersion);
  void recv_updateContractVersion();
  void removeContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t versionId);
  void send_removeContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t versionId);
  void recv_removeContractVersion();
  void addDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::DbLockingInfo& dbLockingInfo);
  void send_addDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::DbLockingInfo& dbLockingInfo);
  void recv_addDbLocking();
  void removeDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const std::string& lockedBy);
  void send_removeDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const std::string& lockedBy);
  void recv_removeDbLocking();
  void reqDbLockingInfo( ::xueqiao::contract::DbLockingInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_reqDbLockingInfo(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_reqDbLockingInfo( ::xueqiao::contract::DbLockingInfo& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ContractOnlineDaoServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ContractOnlineDaoServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ContractOnlineDaoServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_reqSledContract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reqCommodityMapping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reqSledExchange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reqSledCommodity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reqContractVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_updateContractVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeContractVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addDbLocking(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeDbLocking(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reqDbLockingInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ContractOnlineDaoServiceProcessor(boost::shared_ptr<ContractOnlineDaoServiceIf> iface) :
    iface_(iface) {
    processMap_["reqSledContract"] = &ContractOnlineDaoServiceProcessor::process_reqSledContract;
    processMap_["reqCommodityMapping"] = &ContractOnlineDaoServiceProcessor::process_reqCommodityMapping;
    processMap_["reqSledExchange"] = &ContractOnlineDaoServiceProcessor::process_reqSledExchange;
    processMap_["reqSledCommodity"] = &ContractOnlineDaoServiceProcessor::process_reqSledCommodity;
    processMap_["reqContractVersion"] = &ContractOnlineDaoServiceProcessor::process_reqContractVersion;
    processMap_["updateContractVersion"] = &ContractOnlineDaoServiceProcessor::process_updateContractVersion;
    processMap_["removeContractVersion"] = &ContractOnlineDaoServiceProcessor::process_removeContractVersion;
    processMap_["addDbLocking"] = &ContractOnlineDaoServiceProcessor::process_addDbLocking;
    processMap_["removeDbLocking"] = &ContractOnlineDaoServiceProcessor::process_removeDbLocking;
    processMap_["reqDbLockingInfo"] = &ContractOnlineDaoServiceProcessor::process_reqDbLockingInfo;
  }

  virtual ~ContractOnlineDaoServiceProcessor() {}
};

class ContractOnlineDaoServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ContractOnlineDaoServiceProcessorFactory(const ::boost::shared_ptr< ContractOnlineDaoServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ContractOnlineDaoServiceIfFactory > handlerFactory_;
};

class ContractOnlineDaoServiceMultiface : virtual public ContractOnlineDaoServiceIf {
 public:
  ContractOnlineDaoServiceMultiface(std::vector<boost::shared_ptr<ContractOnlineDaoServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ContractOnlineDaoServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ContractOnlineDaoServiceIf> > ifaces_;
  ContractOnlineDaoServiceMultiface() {}
  void add(boost::shared_ptr<ContractOnlineDaoServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void reqSledContract( ::xueqiao::contract::standard::SledContractPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledContractOption& option, const int32_t pageIndex, const int32_t pageSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqSledContract(_return, platformArgs, option, pageIndex, pageSize);
    }
    ifaces_[i]->reqSledContract(_return, platformArgs, option, pageIndex, pageSize);
    return;
  }

  void reqCommodityMapping( ::xueqiao::contract::standard::CommodityMappingPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqCommodityMappingOption& option, const int32_t pageIndex, const int32_t pageSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqCommodityMapping(_return, platformArgs, option, pageIndex, pageSize);
    }
    ifaces_[i]->reqCommodityMapping(_return, platformArgs, option, pageIndex, pageSize);
    return;
  }

  void reqSledExchange( ::xueqiao::contract::standard::SledExchangePage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledExchangeOption& option, const int32_t pageIndex, const int32_t pageSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqSledExchange(_return, platformArgs, option, pageIndex, pageSize);
    }
    ifaces_[i]->reqSledExchange(_return, platformArgs, option, pageIndex, pageSize);
    return;
  }

  void reqSledCommodity( ::xueqiao::contract::standard::SledCommodityPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::standard::ReqSledCommodityOption& option, const int32_t pageIndex, const int32_t pageSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqSledCommodity(_return, platformArgs, option, pageIndex, pageSize);
    }
    ifaces_[i]->reqSledCommodity(_return, platformArgs, option, pageIndex, pageSize);
    return;
  }

  void reqContractVersion( ::xueqiao::contract::ContractVersionPage& _return, const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ReqContractVersionOption& option, const int32_t pageIndex, const int32_t pageSize) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqContractVersion(_return, platformArgs, option, pageIndex, pageSize);
    }
    ifaces_[i]->reqContractVersion(_return, platformArgs, option, pageIndex, pageSize);
    return;
  }

  void updateContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::ContractVersion& contractVersion) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->updateContractVersion(platformArgs, contractVersion);
    }
    ifaces_[i]->updateContractVersion(platformArgs, contractVersion);
  }

  void removeContractVersion(const  ::platform::comm::PlatformArgs& platformArgs, const int32_t versionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeContractVersion(platformArgs, versionId);
    }
    ifaces_[i]->removeContractVersion(platformArgs, versionId);
  }

  void addDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::contract::DbLockingInfo& dbLockingInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addDbLocking(platformArgs, dbLockingInfo);
    }
    ifaces_[i]->addDbLocking(platformArgs, dbLockingInfo);
  }

  void removeDbLocking(const  ::platform::comm::PlatformArgs& platformArgs, const std::string& lockedBy) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeDbLocking(platformArgs, lockedBy);
    }
    ifaces_[i]->removeDbLocking(platformArgs, lockedBy);
  }

  void reqDbLockingInfo( ::xueqiao::contract::DbLockingInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reqDbLockingInfo(_return, platformArgs);
    }
    ifaces_[i]->reqDbLockingInfo(_return, platformArgs);
    return;
  }

};

}}}} // namespace

#endif
