/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_dealing_TYPES_H
#define trade_hosting_dealing_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"
#include "page_types.h"
#include "trade_hosting_basic_types.h"


namespace xueqiao { namespace trade { namespace hosting { namespace dealing { namespace thriftapi {

typedef struct _HostingExecOrderPage__isset {
  _HostingExecOrderPage__isset() : totalCount(false), resultList(false) {}
  bool totalCount;
  bool resultList;
} _HostingExecOrderPage__isset;

class HostingExecOrderPage {
 public:

  static const char* ascii_fingerprint; // = "C4B25DF2A7838E771C60D92305258EB7";
  static const uint8_t binary_fingerprint[16]; // = {0xC4,0xB2,0x5D,0xF2,0xA7,0x83,0x8E,0x77,0x1C,0x60,0xD9,0x23,0x05,0x25,0x8E,0xB7};

  HostingExecOrderPage() : totalCount(0) {
  }

  virtual ~HostingExecOrderPage() throw() {}

  int32_t totalCount;
  std::vector< ::xueqiao::trade::hosting::HostingExecOrder>  resultList;

  _HostingExecOrderPage__isset __isset;

  void __set_totalCount(const int32_t val) {
    totalCount = val;
    __isset.totalCount = true;
  }

  void __set_resultList(const std::vector< ::xueqiao::trade::hosting::HostingExecOrder> & val) {
    resultList = val;
    __isset.resultList = true;
  }

  bool operator == (const HostingExecOrderPage & rhs) const
  {
    if (__isset.totalCount != rhs.__isset.totalCount)
      return false;
    else if (__isset.totalCount && !(totalCount == rhs.totalCount))
      return false;
    if (__isset.resultList != rhs.__isset.resultList)
      return false;
    else if (__isset.resultList && !(resultList == rhs.resultList))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderPage &a, HostingExecOrderPage &b);

}}}}} // namespace

#endif
