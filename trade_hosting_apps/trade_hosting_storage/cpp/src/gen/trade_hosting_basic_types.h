/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_basic_TYPES_H
#define trade_hosting_basic_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace xueqiao { namespace trade { namespace hosting {

struct HostingStatus {
  enum type {
    EMPTY = 0,
    NORMAL = 1,
    CLEARING = 2
  };
};

extern const std::map<int, const char*> _HostingStatus_VALUES_TO_NAMES;

struct HostingRunningMode {
  enum type {
    ALLDAY_HOSTING = 1,
    SIM_HOSTING = 2,
    REAL_HOSTING = 3
  };
};

extern const std::map<int, const char*> _HostingRunningMode_VALUES_TO_NAMES;

struct EHostingUserRole {
  enum type {
    AdminGroup = 1000,
    BossGroup = 500,
    TraderGroup = 200
  };
};

extern const std::map<int, const char*> _EHostingUserRole_VALUES_TO_NAMES;

struct HostingUserOrderType {
  enum type {
    OrderByCreateTimestampAsc = 1,
    OrderByCreateTimestampDesc = 2,
    OrderByLoginNameAsc = 3,
    OrderByLoginNameDesc = 4
  };
};

extern const std::map<int, const char*> _HostingUserOrderType_VALUES_TO_NAMES;

struct HostingUserState {
  enum type {
    USER_NORMAL = 1,
    USER_DISABLED = 2
  };
};

extern const std::map<int, const char*> _HostingUserState_VALUES_TO_NAMES;

struct HostingComposeLegTradeDirection {
  enum type {
    COMPOSE_LEG_BUY = 0,
    COMPOSE_LEG_SELL = 1
  };
};

extern const std::map<int, const char*> _HostingComposeLegTradeDirection_VALUES_TO_NAMES;

struct HostingComposeGraphEnv {
  enum type {
    COMPOSE_GRAPH_SIM = 1,
    COMPOSE_GRAPH_REAL = 2
  };
};

extern const std::map<int, const char*> _HostingComposeGraphEnv_VALUES_TO_NAMES;

struct HostingComposeViewSource {
  enum type {
    USER_CREATED = 1,
    USER_SEARCHED = 2
  };
};

extern const std::map<int, const char*> _HostingComposeViewSource_VALUES_TO_NAMES;

struct HostingComposeViewSubscribeStatus {
  enum type {
    UNSUBSCRIBED = 0,
    SUBSCRIBED = 1
  };
};

extern const std::map<int, const char*> _HostingComposeViewSubscribeStatus_VALUES_TO_NAMES;

struct BrokerTechPlatform {
  enum type {
    TECH_CTP = 1,
    TECH_ESUNNY_9 = 2,
    TECH_ESUNNY_3 = 3
  };
};

extern const std::map<int, const char*> _BrokerTechPlatform_VALUES_TO_NAMES;

struct TradeAccountState {
  enum type {
    ACCOUNT_NORMAL = 1,
    ACCOUNT_REMOVED = 2,
    ACCOUNT_DISABLED = 3
  };
};

extern const std::map<int, const char*> _TradeAccountState_VALUES_TO_NAMES;

struct TradeAccountAccessState {
  enum type {
    ACCOUNT_ACTIVE = 1,
    ACCOUNT_INVALID = 2
  };
};

extern const std::map<int, const char*> _TradeAccountAccessState_VALUES_TO_NAMES;

struct HostingExecOrderType {
  enum type {
    ORDER_LIMIT_PRICE = 1,
    ORDER_WITH_CONDITION = 2
  };
};

extern const std::map<int, const char*> _HostingExecOrderType_VALUES_TO_NAMES;

struct HostingExecOrderTradeDirection {
  enum type {
    ORDER_BUY = 0,
    ORDER_SELL = 1
  };
};

extern const std::map<int, const char*> _HostingExecOrderTradeDirection_VALUES_TO_NAMES;

struct HostingExecOrderCreatorType {
  enum type {
    ORDER_ARTIFICAL = 1,
    ORDER_MACHINE = 2
  };
};

extern const std::map<int, const char*> _HostingExecOrderCreatorType_VALUES_TO_NAMES;

struct HostingExecOrderMode {
  enum type {
    ORDER_FOK = 1,
    ORDER_FAK = 2,
    ORDER_GFD = 3,
    ORDER_GTC = 4,
    ORDER_GTD = 5
  };
};

extern const std::map<int, const char*> _HostingExecOrderMode_VALUES_TO_NAMES;

struct HostingExecOrderCondition {
  enum type {
    LASTEST_PRICE_GT = 1,
    LASTEST_PRICE_GE = 2,
    LASTEST_PRICE_LT = 3,
    LASTEST_PRICE_LE = 4,
    SELLONE_PRICE_GT = 5,
    SELLONE_PRICE_GE = 6,
    SELLONE_PRICE_LT = 7,
    SELLONE_PRICE_LE = 8,
    BUYONE_PRICE_GT = 9,
    BUYONE_PRICE_GE = 10,
    BUYONE_PRICE_LT = 11,
    BUYONE_PRICE_LE = 12
  };
};

extern const std::map<int, const char*> _HostingExecOrderCondition_VALUES_TO_NAMES;

struct HostingExecOrderStateValue {
  enum type {
    ORDER_WAITING_VERIFY = 1,
    ORDER_VERIFY_FAILED = 2,
    ORDER_WAITING_SLED_SEND = 3,
    ORDER_SLED_SEND_FAILED = 4,
    ORDER_SLED_SEND_UNKOWN = 5,
    ORDER_UPSIDE_REJECTED = 6,
    ORDER_UPSIDE_RECEIVED = 7,
    ORDER_UPSIDE_RESTING = 8,
    ORDER_UPSIDE_PARTFINISHED = 9,
    ORDER_UPSIDE_FINISHED = 11,
    ORDER_UPSIDE_RECEIVED_WAITING_REVOKE = 12,
    ORDER_UPSIDE_RESTING_WAITING_REVOKE = 13,
    ORDER_UPSIDE_PARTFINISHED_WAITING_REVOKE = 14,
    ORDER_UPSIDE_RECEIVED_REVOKE_SEND_UNKOWN = 15,
    ORDER_UPSIDE_RESTING_REVOKE_SEND_UNKOWN = 16,
    ORDER_UPSIDE_PARTFINISHED_REVOKE_SEND_UNKOWN = 17,
    ORDER_UPSIDE_REVOKE_RECEIVED = 18,
    ORDER_UPSIDE_DELETED = 20,
    ORDER_CONDITION_NOT_TRIGGER = 23,
    ORDER_CONDITION_TRIGGEDED = 24,
    ORDER_CONDITION_NOT_TRIGGER_WAITING_REVOKE = 25,
    ORDER_CONDITION_NOT_TRIGGER_REVOKE_SEND_UNKOWN = 26,
    ORDER_SLED_ALLOC_REF_FINISHED = 30,
    ORDER_EXPIRED = 31
  };
};

extern const std::map<int, const char*> _HostingExecOrderStateValue_VALUES_TO_NAMES;

struct CTPCombOffsetFlagType {
  enum type {
    THOST_FTDC_OF_OPEN = 1,
    THOST_FTDC_OF_ClOSE = 2,
    THOST_FTDC_OF_FORCECLOSE = 3,
    THOST_FTDC_OF_CLOSETODAY = 4,
    THOST_FTDC_OF_CLOSEYESTERDAY = 5,
    THOST_FTDC_OF_LOCALFORCECLOSE = 6
  };
};

extern const std::map<int, const char*> _CTPCombOffsetFlagType_VALUES_TO_NAMES;

struct CTPCombHedgeFlagType {
  enum type {
    THOST_FTDC_HF_SPECULATION = 1,
    THOST_FTDC_HF_ARBITRAGE = 2,
    THOST_FTDC_HF_HEDGE = 3,
    THOST_FTDC_HF_MARKETMAKER = 4
  };
};

extern const std::map<int, const char*> _CTPCombHedgeFlagType_VALUES_TO_NAMES;

struct CTPTradeDirection {
  enum type {
    CTP_BUY = 0,
    CTP_SELL = 1
  };
};

extern const std::map<int, const char*> _CTPTradeDirection_VALUES_TO_NAMES;

struct HostingUpsideNotifyStateType {
  enum type {
    NOTIFY_UPSIDE_RECIVED = 1,
    NOTIFY_CONDITION_NOT_TRIGGERED = 2,
    NOTIFY_CONDITION_TRIGGERED = 3,
    NOTIFY_ORDER_RESTING = 4,
    NOTIFY_ORDER_CANCELLED = 5,
    NOTIFY_ORDER_PARTFINISHED = 6,
    NOTIFY_ORDER_FINISHED = 7,
    NOTIFY_ORDER_REJECTED = 8,
    NOTIFY_ORDER_CANCEL_RECEIVED = 9
  };
};

extern const std::map<int, const char*> _HostingUpsideNotifyStateType_VALUES_TO_NAMES;

struct HostingUpsideNotifyStateSource {
  enum type {
    UPSIDE_FORWARD = 0,
    UPSIDE_SYNC = 1
  };
};

extern const std::map<int, const char*> _HostingUpsideNotifyStateSource_VALUES_TO_NAMES;

struct HostingExecTradeDirection {
  enum type {
    TRADE_BUY = 0,
    TRADE_SELL = 1
  };
};

extern const std::map<int, const char*> _HostingExecTradeDirection_VALUES_TO_NAMES;

typedef struct _HostingInfo__isset {
  _HostingInfo__isset() : status(false), tableVersion(false), subUserTotalCount(false), composeTotalCount(false), onlineUserTotalCount(false), machineId(false), runningMode(false) {}
  bool status;
  bool tableVersion;
  bool subUserTotalCount;
  bool composeTotalCount;
  bool onlineUserTotalCount;
  bool machineId;
  bool runningMode;
} _HostingInfo__isset;

class HostingInfo {
 public:

  static const char* ascii_fingerprint; // = "EA9CFD2EF4EE92CDD08BA734313E42AE";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x9C,0xFD,0x2E,0xF4,0xEE,0x92,0xCD,0xD0,0x8B,0xA7,0x34,0x31,0x3E,0x42,0xAE};

  HostingInfo() : status((HostingStatus::type)0), tableVersion(0), subUserTotalCount(0), composeTotalCount(0), onlineUserTotalCount(0), machineId(0), runningMode((HostingRunningMode::type)0) {
  }

  virtual ~HostingInfo() throw() {}

  HostingStatus::type status;
  int32_t tableVersion;
  int32_t subUserTotalCount;
  int32_t composeTotalCount;
  int32_t onlineUserTotalCount;
  int64_t machineId;
  HostingRunningMode::type runningMode;

  _HostingInfo__isset __isset;

  void __set_status(const HostingStatus::type val) {
    status = val;
    __isset.status = true;
  }

  void __set_tableVersion(const int32_t val) {
    tableVersion = val;
    __isset.tableVersion = true;
  }

  void __set_subUserTotalCount(const int32_t val) {
    subUserTotalCount = val;
    __isset.subUserTotalCount = true;
  }

  void __set_composeTotalCount(const int32_t val) {
    composeTotalCount = val;
    __isset.composeTotalCount = true;
  }

  void __set_onlineUserTotalCount(const int32_t val) {
    onlineUserTotalCount = val;
    __isset.onlineUserTotalCount = true;
  }

  void __set_machineId(const int64_t val) {
    machineId = val;
    __isset.machineId = true;
  }

  void __set_runningMode(const HostingRunningMode::type val) {
    runningMode = val;
    __isset.runningMode = true;
  }

  bool operator == (const HostingInfo & rhs) const
  {
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.tableVersion != rhs.__isset.tableVersion)
      return false;
    else if (__isset.tableVersion && !(tableVersion == rhs.tableVersion))
      return false;
    if (__isset.subUserTotalCount != rhs.__isset.subUserTotalCount)
      return false;
    else if (__isset.subUserTotalCount && !(subUserTotalCount == rhs.subUserTotalCount))
      return false;
    if (__isset.composeTotalCount != rhs.__isset.composeTotalCount)
      return false;
    else if (__isset.composeTotalCount && !(composeTotalCount == rhs.composeTotalCount))
      return false;
    if (__isset.onlineUserTotalCount != rhs.__isset.onlineUserTotalCount)
      return false;
    else if (__isset.onlineUserTotalCount && !(onlineUserTotalCount == rhs.onlineUserTotalCount))
      return false;
    if (__isset.machineId != rhs.__isset.machineId)
      return false;
    else if (__isset.machineId && !(machineId == rhs.machineId))
      return false;
    if (__isset.runningMode != rhs.__isset.runningMode)
      return false;
    else if (__isset.runningMode && !(runningMode == rhs.runningMode))
      return false;
    return true;
  }
  bool operator != (const HostingInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingInfo &a, HostingInfo &b);

typedef struct _HostingUser__isset {
  _HostingUser__isset() : subUserId(false), loginName(false), loginPasswd(false), phone(false), nickName(false), userRoleValue(false), email(false), userState(false), createTimestamp(false), lastmodifyTimestamp(false) {}
  bool subUserId;
  bool loginName;
  bool loginPasswd;
  bool phone;
  bool nickName;
  bool userRoleValue;
  bool email;
  bool userState;
  bool createTimestamp;
  bool lastmodifyTimestamp;
} _HostingUser__isset;

class HostingUser {
 public:

  static const char* ascii_fingerprint; // = "3D7C4143D483489E9C09A879EA7BDFA3";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0x7C,0x41,0x43,0xD4,0x83,0x48,0x9E,0x9C,0x09,0xA8,0x79,0xEA,0x7B,0xDF,0xA3};

  HostingUser() : subUserId(0), loginName(), loginPasswd(), phone(), nickName(), userRoleValue(0), email(), userState((HostingUserState::type)0), createTimestamp(0), lastmodifyTimestamp(0) {
  }

  virtual ~HostingUser() throw() {}

  int32_t subUserId;
  std::string loginName;
  std::string loginPasswd;
  std::string phone;
  std::string nickName;
  int16_t userRoleValue;
  std::string email;
  HostingUserState::type userState;
  int32_t createTimestamp;
  int32_t lastmodifyTimestamp;

  _HostingUser__isset __isset;

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_loginName(const std::string& val) {
    loginName = val;
    __isset.loginName = true;
  }

  void __set_loginPasswd(const std::string& val) {
    loginPasswd = val;
    __isset.loginPasswd = true;
  }

  void __set_phone(const std::string& val) {
    phone = val;
    __isset.phone = true;
  }

  void __set_nickName(const std::string& val) {
    nickName = val;
    __isset.nickName = true;
  }

  void __set_userRoleValue(const int16_t val) {
    userRoleValue = val;
    __isset.userRoleValue = true;
  }

  void __set_email(const std::string& val) {
    email = val;
    __isset.email = true;
  }

  void __set_userState(const HostingUserState::type val) {
    userState = val;
    __isset.userState = true;
  }

  void __set_createTimestamp(const int32_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingUser & rhs) const
  {
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.loginName != rhs.__isset.loginName)
      return false;
    else if (__isset.loginName && !(loginName == rhs.loginName))
      return false;
    if (__isset.loginPasswd != rhs.__isset.loginPasswd)
      return false;
    else if (__isset.loginPasswd && !(loginPasswd == rhs.loginPasswd))
      return false;
    if (__isset.phone != rhs.__isset.phone)
      return false;
    else if (__isset.phone && !(phone == rhs.phone))
      return false;
    if (__isset.nickName != rhs.__isset.nickName)
      return false;
    else if (__isset.nickName && !(nickName == rhs.nickName))
      return false;
    if (__isset.userRoleValue != rhs.__isset.userRoleValue)
      return false;
    else if (__isset.userRoleValue && !(userRoleValue == rhs.userRoleValue))
      return false;
    if (__isset.email != rhs.__isset.email)
      return false;
    else if (__isset.email && !(email == rhs.email))
      return false;
    if (__isset.userState != rhs.__isset.userState)
      return false;
    else if (__isset.userState && !(userState == rhs.userState))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingUser &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingUser & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingUser &a, HostingUser &b);

typedef struct _QueryHostingUserOption__isset {
  _QueryHostingUserOption__isset() : subUserId(false), loginNamePartical(false), nickNamePartical(false), loginNameWhole(false), orderType(false) {}
  bool subUserId;
  bool loginNamePartical;
  bool nickNamePartical;
  bool loginNameWhole;
  bool orderType;
} _QueryHostingUserOption__isset;

class QueryHostingUserOption {
 public:

  static const char* ascii_fingerprint; // = "4BB210D58D6CCB04EC028DD4B48A7B87";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xB2,0x10,0xD5,0x8D,0x6C,0xCB,0x04,0xEC,0x02,0x8D,0xD4,0xB4,0x8A,0x7B,0x87};

  QueryHostingUserOption() : subUserId(0), loginNamePartical(), nickNamePartical(), loginNameWhole(), orderType((HostingUserOrderType::type)0) {
  }

  virtual ~QueryHostingUserOption() throw() {}

  int32_t subUserId;
  std::string loginNamePartical;
  std::string nickNamePartical;
  std::string loginNameWhole;
  HostingUserOrderType::type orderType;

  _QueryHostingUserOption__isset __isset;

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_loginNamePartical(const std::string& val) {
    loginNamePartical = val;
    __isset.loginNamePartical = true;
  }

  void __set_nickNamePartical(const std::string& val) {
    nickNamePartical = val;
    __isset.nickNamePartical = true;
  }

  void __set_loginNameWhole(const std::string& val) {
    loginNameWhole = val;
    __isset.loginNameWhole = true;
  }

  void __set_orderType(const HostingUserOrderType::type val) {
    orderType = val;
    __isset.orderType = true;
  }

  bool operator == (const QueryHostingUserOption & rhs) const
  {
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.loginNamePartical != rhs.__isset.loginNamePartical)
      return false;
    else if (__isset.loginNamePartical && !(loginNamePartical == rhs.loginNamePartical))
      return false;
    if (__isset.nickNamePartical != rhs.__isset.nickNamePartical)
      return false;
    else if (__isset.nickNamePartical && !(nickNamePartical == rhs.nickNamePartical))
      return false;
    if (__isset.loginNameWhole != rhs.__isset.loginNameWhole)
      return false;
    else if (__isset.loginNameWhole && !(loginNameWhole == rhs.loginNameWhole))
      return false;
    if (__isset.orderType != rhs.__isset.orderType)
      return false;
    else if (__isset.orderType && !(orderType == rhs.orderType))
      return false;
    return true;
  }
  bool operator != (const QueryHostingUserOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryHostingUserOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryHostingUserOption &a, QueryHostingUserOption &b);

typedef struct _QueryHostingUserPage__isset {
  _QueryHostingUserPage__isset() : totalCount(false), resultList(false) {}
  bool totalCount;
  bool resultList;
} _QueryHostingUserPage__isset;

class QueryHostingUserPage {
 public:

  static const char* ascii_fingerprint; // = "1CAF60C388192BDA1D2C931AF890318F";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xAF,0x60,0xC3,0x88,0x19,0x2B,0xDA,0x1D,0x2C,0x93,0x1A,0xF8,0x90,0x31,0x8F};

  QueryHostingUserPage() : totalCount(0) {
  }

  virtual ~QueryHostingUserPage() throw() {}

  int32_t totalCount;
  std::vector<HostingUser>  resultList;

  _QueryHostingUserPage__isset __isset;

  void __set_totalCount(const int32_t val) {
    totalCount = val;
    __isset.totalCount = true;
  }

  void __set_resultList(const std::vector<HostingUser> & val) {
    resultList = val;
    __isset.resultList = true;
  }

  bool operator == (const QueryHostingUserPage & rhs) const
  {
    if (__isset.totalCount != rhs.__isset.totalCount)
      return false;
    else if (__isset.totalCount && !(totalCount == rhs.totalCount))
      return false;
    if (__isset.resultList != rhs.__isset.resultList)
      return false;
    else if (__isset.resultList && !(resultList == rhs.resultList))
      return false;
    return true;
  }
  bool operator != (const QueryHostingUserPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QueryHostingUserPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(QueryHostingUserPage &a, QueryHostingUserPage &b);

typedef struct _HostingSession__isset {
  _HostingSession__isset() : machineId(false), subUserId(false), token(false), loginIP(false) {}
  bool machineId;
  bool subUserId;
  bool token;
  bool loginIP;
} _HostingSession__isset;

class HostingSession {
 public:

  static const char* ascii_fingerprint; // = "121AF9BC294FA0558E93C3C6BE0EAA1F";
  static const uint8_t binary_fingerprint[16]; // = {0x12,0x1A,0xF9,0xBC,0x29,0x4F,0xA0,0x55,0x8E,0x93,0xC3,0xC6,0xBE,0x0E,0xAA,0x1F};

  HostingSession() : machineId(0), subUserId(0), token(), loginIP() {
  }

  virtual ~HostingSession() throw() {}

  int64_t machineId;
  int32_t subUserId;
  std::string token;
  std::string loginIP;

  _HostingSession__isset __isset;

  void __set_machineId(const int64_t val) {
    machineId = val;
    __isset.machineId = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_token(const std::string& val) {
    token = val;
    __isset.token = true;
  }

  void __set_loginIP(const std::string& val) {
    loginIP = val;
    __isset.loginIP = true;
  }

  bool operator == (const HostingSession & rhs) const
  {
    if (__isset.machineId != rhs.__isset.machineId)
      return false;
    else if (__isset.machineId && !(machineId == rhs.machineId))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.token != rhs.__isset.token)
      return false;
    else if (__isset.token && !(token == rhs.token))
      return false;
    if (__isset.loginIP != rhs.__isset.loginIP)
      return false;
    else if (__isset.loginIP && !(loginIP == rhs.loginIP))
      return false;
    return true;
  }
  bool operator != (const HostingSession &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingSession & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingSession &a, HostingSession &b);

typedef struct _HostingSubAccount__isset {
  _HostingSubAccount__isset() : subAccountId(false), subAccountName(false), inAmount(false), outAmount(false), createTimestamp(false), lastmodifyTimestamp(false) {}
  bool subAccountId;
  bool subAccountName;
  bool inAmount;
  bool outAmount;
  bool createTimestamp;
  bool lastmodifyTimestamp;
} _HostingSubAccount__isset;

class HostingSubAccount {
 public:

  static const char* ascii_fingerprint; // = "C29DF7CCF0B5C7F94BF19FA6EC5BE502";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0x9D,0xF7,0xCC,0xF0,0xB5,0xC7,0xF9,0x4B,0xF1,0x9F,0xA6,0xEC,0x5B,0xE5,0x02};

  HostingSubAccount() : subAccountId(0), subAccountName(), inAmount(0), outAmount(0), createTimestamp(0), lastmodifyTimestamp(0) {
  }

  virtual ~HostingSubAccount() throw() {}

  int64_t subAccountId;
  std::string subAccountName;
  int64_t inAmount;
  int64_t outAmount;
  int32_t createTimestamp;
  int32_t lastmodifyTimestamp;

  _HostingSubAccount__isset __isset;

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  void __set_subAccountName(const std::string& val) {
    subAccountName = val;
    __isset.subAccountName = true;
  }

  void __set_inAmount(const int64_t val) {
    inAmount = val;
    __isset.inAmount = true;
  }

  void __set_outAmount(const int64_t val) {
    outAmount = val;
    __isset.outAmount = true;
  }

  void __set_createTimestamp(const int32_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingSubAccount & rhs) const
  {
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    if (__isset.subAccountName != rhs.__isset.subAccountName)
      return false;
    else if (__isset.subAccountName && !(subAccountName == rhs.subAccountName))
      return false;
    if (__isset.inAmount != rhs.__isset.inAmount)
      return false;
    else if (__isset.inAmount && !(inAmount == rhs.inAmount))
      return false;
    if (__isset.outAmount != rhs.__isset.outAmount)
      return false;
    else if (__isset.outAmount && !(outAmount == rhs.outAmount))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingSubAccount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingSubAccount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingSubAccount &a, HostingSubAccount &b);

typedef struct _HostingSubAccountRelatedItem__isset {
  _HostingSubAccountRelatedItem__isset() : subAccountId(false), subUserId(false), relatedTimestamp(false), subAccountName(false), subUserLoginName(false), subUserNickName(false), lastmodifyTimestamp(false) {}
  bool subAccountId;
  bool subUserId;
  bool relatedTimestamp;
  bool subAccountName;
  bool subUserLoginName;
  bool subUserNickName;
  bool lastmodifyTimestamp;
} _HostingSubAccountRelatedItem__isset;

class HostingSubAccountRelatedItem {
 public:

  static const char* ascii_fingerprint; // = "44AA2FDAAB9D9B57174DBF75FE022858";
  static const uint8_t binary_fingerprint[16]; // = {0x44,0xAA,0x2F,0xDA,0xAB,0x9D,0x9B,0x57,0x17,0x4D,0xBF,0x75,0xFE,0x02,0x28,0x58};

  HostingSubAccountRelatedItem() : subAccountId(0), subUserId(0), relatedTimestamp(0), subAccountName(), subUserLoginName(), subUserNickName(), lastmodifyTimestamp(0) {
  }

  virtual ~HostingSubAccountRelatedItem() throw() {}

  int64_t subAccountId;
  int32_t subUserId;
  int32_t relatedTimestamp;
  std::string subAccountName;
  std::string subUserLoginName;
  std::string subUserNickName;
  int32_t lastmodifyTimestamp;

  _HostingSubAccountRelatedItem__isset __isset;

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_relatedTimestamp(const int32_t val) {
    relatedTimestamp = val;
    __isset.relatedTimestamp = true;
  }

  void __set_subAccountName(const std::string& val) {
    subAccountName = val;
    __isset.subAccountName = true;
  }

  void __set_subUserLoginName(const std::string& val) {
    subUserLoginName = val;
    __isset.subUserLoginName = true;
  }

  void __set_subUserNickName(const std::string& val) {
    subUserNickName = val;
    __isset.subUserNickName = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingSubAccountRelatedItem & rhs) const
  {
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.relatedTimestamp != rhs.__isset.relatedTimestamp)
      return false;
    else if (__isset.relatedTimestamp && !(relatedTimestamp == rhs.relatedTimestamp))
      return false;
    if (__isset.subAccountName != rhs.__isset.subAccountName)
      return false;
    else if (__isset.subAccountName && !(subAccountName == rhs.subAccountName))
      return false;
    if (__isset.subUserLoginName != rhs.__isset.subUserLoginName)
      return false;
    else if (__isset.subUserLoginName && !(subUserLoginName == rhs.subUserLoginName))
      return false;
    if (__isset.subUserNickName != rhs.__isset.subUserNickName)
      return false;
    else if (__isset.subUserNickName && !(subUserNickName == rhs.subUserNickName))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingSubAccountRelatedItem &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingSubAccountRelatedItem & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingSubAccountRelatedItem &a, HostingSubAccountRelatedItem &b);

typedef struct _HostingComposeLeg__isset {
  _HostingComposeLeg__isset() : sledContractId(false), variableName(false), quantity(false), legTradeDirection(false), sledContractCode(false), sledCommodityId(false), sledCommodityType(false), sledCommodityCode(false), sledExchangeMic(false) {}
  bool sledContractId;
  bool variableName;
  bool quantity;
  bool legTradeDirection;
  bool sledContractCode;
  bool sledCommodityId;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool sledExchangeMic;
} _HostingComposeLeg__isset;

class HostingComposeLeg {
 public:

  static const char* ascii_fingerprint; // = "F448167111DEAD913234D1B812F7872E";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x48,0x16,0x71,0x11,0xDE,0xAD,0x91,0x32,0x34,0xD1,0xB8,0x12,0xF7,0x87,0x2E};

  HostingComposeLeg() : sledContractId(0), variableName(), quantity(0), legTradeDirection((HostingComposeLegTradeDirection::type)0), sledContractCode(), sledCommodityId(0), sledCommodityType(0), sledCommodityCode(), sledExchangeMic() {
  }

  virtual ~HostingComposeLeg() throw() {}

  int64_t sledContractId;
  std::string variableName;
  int32_t quantity;
  HostingComposeLegTradeDirection::type legTradeDirection;
  std::string sledContractCode;
  int64_t sledCommodityId;
  int16_t sledCommodityType;
  std::string sledCommodityCode;
  std::string sledExchangeMic;

  _HostingComposeLeg__isset __isset;

  void __set_sledContractId(const int64_t val) {
    sledContractId = val;
    __isset.sledContractId = true;
  }

  void __set_variableName(const std::string& val) {
    variableName = val;
    __isset.variableName = true;
  }

  void __set_quantity(const int32_t val) {
    quantity = val;
    __isset.quantity = true;
  }

  void __set_legTradeDirection(const HostingComposeLegTradeDirection::type val) {
    legTradeDirection = val;
    __isset.legTradeDirection = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_sledCommodityId(const int64_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_sledExchangeMic(const std::string& val) {
    sledExchangeMic = val;
    __isset.sledExchangeMic = true;
  }

  bool operator == (const HostingComposeLeg & rhs) const
  {
    if (__isset.sledContractId != rhs.__isset.sledContractId)
      return false;
    else if (__isset.sledContractId && !(sledContractId == rhs.sledContractId))
      return false;
    if (__isset.variableName != rhs.__isset.variableName)
      return false;
    else if (__isset.variableName && !(variableName == rhs.variableName))
      return false;
    if (__isset.quantity != rhs.__isset.quantity)
      return false;
    else if (__isset.quantity && !(quantity == rhs.quantity))
      return false;
    if (__isset.legTradeDirection != rhs.__isset.legTradeDirection)
      return false;
    else if (__isset.legTradeDirection && !(legTradeDirection == rhs.legTradeDirection))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.sledExchangeMic != rhs.__isset.sledExchangeMic)
      return false;
    else if (__isset.sledExchangeMic && !(sledExchangeMic == rhs.sledExchangeMic))
      return false;
    return true;
  }
  bool operator != (const HostingComposeLeg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingComposeLeg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingComposeLeg &a, HostingComposeLeg &b);

typedef struct _HostingComposeGraph__isset {
  _HostingComposeGraph__isset() : createSubUserId(false), composeGraphId(false), formular(false), legs(false), composeGraphKey(false), composeGraphEnv(false), createTimestamp(false), lastmodifyTimestamp(false) {}
  bool createSubUserId;
  bool composeGraphId;
  bool formular;
  bool legs;
  bool composeGraphKey;
  bool composeGraphEnv;
  bool createTimestamp;
  bool lastmodifyTimestamp;
} _HostingComposeGraph__isset;

class HostingComposeGraph {
 public:

  static const char* ascii_fingerprint; // = "7D957169B016414A3909EDD746936283";
  static const uint8_t binary_fingerprint[16]; // = {0x7D,0x95,0x71,0x69,0xB0,0x16,0x41,0x4A,0x39,0x09,0xED,0xD7,0x46,0x93,0x62,0x83};

  HostingComposeGraph() : createSubUserId(0), composeGraphId(0), formular(), composeGraphKey(), composeGraphEnv((HostingComposeGraphEnv::type)0), createTimestamp(0), lastmodifyTimestamp(0) {
  }

  virtual ~HostingComposeGraph() throw() {}

  int32_t createSubUserId;
  int64_t composeGraphId;
  std::string formular;
  std::map<std::string, HostingComposeLeg>  legs;
  std::string composeGraphKey;
  HostingComposeGraphEnv::type composeGraphEnv;
  int32_t createTimestamp;
  int32_t lastmodifyTimestamp;

  _HostingComposeGraph__isset __isset;

  void __set_createSubUserId(const int32_t val) {
    createSubUserId = val;
    __isset.createSubUserId = true;
  }

  void __set_composeGraphId(const int64_t val) {
    composeGraphId = val;
    __isset.composeGraphId = true;
  }

  void __set_formular(const std::string& val) {
    formular = val;
    __isset.formular = true;
  }

  void __set_legs(const std::map<std::string, HostingComposeLeg> & val) {
    legs = val;
    __isset.legs = true;
  }

  void __set_composeGraphKey(const std::string& val) {
    composeGraphKey = val;
    __isset.composeGraphKey = true;
  }

  void __set_composeGraphEnv(const HostingComposeGraphEnv::type val) {
    composeGraphEnv = val;
    __isset.composeGraphEnv = true;
  }

  void __set_createTimestamp(const int32_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingComposeGraph & rhs) const
  {
    if (__isset.createSubUserId != rhs.__isset.createSubUserId)
      return false;
    else if (__isset.createSubUserId && !(createSubUserId == rhs.createSubUserId))
      return false;
    if (__isset.composeGraphId != rhs.__isset.composeGraphId)
      return false;
    else if (__isset.composeGraphId && !(composeGraphId == rhs.composeGraphId))
      return false;
    if (__isset.formular != rhs.__isset.formular)
      return false;
    else if (__isset.formular && !(formular == rhs.formular))
      return false;
    if (__isset.legs != rhs.__isset.legs)
      return false;
    else if (__isset.legs && !(legs == rhs.legs))
      return false;
    if (__isset.composeGraphKey != rhs.__isset.composeGraphKey)
      return false;
    else if (__isset.composeGraphKey && !(composeGraphKey == rhs.composeGraphKey))
      return false;
    if (__isset.composeGraphEnv != rhs.__isset.composeGraphEnv)
      return false;
    else if (__isset.composeGraphEnv && !(composeGraphEnv == rhs.composeGraphEnv))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingComposeGraph &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingComposeGraph & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingComposeGraph &a, HostingComposeGraph &b);

typedef struct _HostingComposeView__isset {
  _HostingComposeView__isset() : subUserId(false), composeGraphId(false), aliasName(false), viewSource(false), subscribeStatus(false), createTimestamp(false), lastmodifyTimestamp(false) {}
  bool subUserId;
  bool composeGraphId;
  bool aliasName;
  bool viewSource;
  bool subscribeStatus;
  bool createTimestamp;
  bool lastmodifyTimestamp;
} _HostingComposeView__isset;

class HostingComposeView {
 public:

  static const char* ascii_fingerprint; // = "F396864846F43D08297CE26FA82A8B6A";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x96,0x86,0x48,0x46,0xF4,0x3D,0x08,0x29,0x7C,0xE2,0x6F,0xA8,0x2A,0x8B,0x6A};

  HostingComposeView() : subUserId(0), composeGraphId(0), aliasName(), viewSource((HostingComposeViewSource::type)0), subscribeStatus((HostingComposeViewSubscribeStatus::type)0), createTimestamp(0), lastmodifyTimestamp(0) {
  }

  virtual ~HostingComposeView() throw() {}

  int32_t subUserId;
  int64_t composeGraphId;
  std::string aliasName;
  HostingComposeViewSource::type viewSource;
  HostingComposeViewSubscribeStatus::type subscribeStatus;
  int32_t createTimestamp;
  int32_t lastmodifyTimestamp;

  _HostingComposeView__isset __isset;

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_composeGraphId(const int64_t val) {
    composeGraphId = val;
    __isset.composeGraphId = true;
  }

  void __set_aliasName(const std::string& val) {
    aliasName = val;
    __isset.aliasName = true;
  }

  void __set_viewSource(const HostingComposeViewSource::type val) {
    viewSource = val;
    __isset.viewSource = true;
  }

  void __set_subscribeStatus(const HostingComposeViewSubscribeStatus::type val) {
    subscribeStatus = val;
    __isset.subscribeStatus = true;
  }

  void __set_createTimestamp(const int32_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingComposeView & rhs) const
  {
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.composeGraphId != rhs.__isset.composeGraphId)
      return false;
    else if (__isset.composeGraphId && !(composeGraphId == rhs.composeGraphId))
      return false;
    if (__isset.aliasName != rhs.__isset.aliasName)
      return false;
    else if (__isset.aliasName && !(aliasName == rhs.aliasName))
      return false;
    if (__isset.viewSource != rhs.__isset.viewSource)
      return false;
    else if (__isset.viewSource && !(viewSource == rhs.viewSource))
      return false;
    if (__isset.subscribeStatus != rhs.__isset.subscribeStatus)
      return false;
    else if (__isset.subscribeStatus && !(subscribeStatus == rhs.subscribeStatus))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingComposeView &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingComposeView & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingComposeView &a, HostingComposeView &b);

typedef struct _HostingTradeAccount__isset {
  _HostingTradeAccount__isset() : tradeAccountId(false), tradeBrokerAccessId(false), loginUserName(false), loginPassword(false), accountProperties(false), tradeBrokerId(false), brokerTechPlatform(false), tradeAccountRemark(false), accountState(false), invalidReason(false), invalidErrorCode(false), apiRetCode(false), accountAccessState(false), hadBeenActived(false), createTimestamp(false), lastmodifyTimestamp(false) {}
  bool tradeAccountId;
  bool tradeBrokerAccessId;
  bool loginUserName;
  bool loginPassword;
  bool accountProperties;
  bool tradeBrokerId;
  bool brokerTechPlatform;
  bool tradeAccountRemark;
  bool accountState;
  bool invalidReason;
  bool invalidErrorCode;
  bool apiRetCode;
  bool accountAccessState;
  bool hadBeenActived;
  bool createTimestamp;
  bool lastmodifyTimestamp;
} _HostingTradeAccount__isset;

class HostingTradeAccount {
 public:

  static const char* ascii_fingerprint; // = "63C8645D0BEB0040738BDBD642F5D26A";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0xC8,0x64,0x5D,0x0B,0xEB,0x00,0x40,0x73,0x8B,0xDB,0xD6,0x42,0xF5,0xD2,0x6A};

  HostingTradeAccount() : tradeAccountId(0), tradeBrokerAccessId(0), loginUserName(), loginPassword(), tradeBrokerId(0), brokerTechPlatform((BrokerTechPlatform::type)0), tradeAccountRemark(), accountState((TradeAccountState::type)0), invalidReason(), invalidErrorCode(0), apiRetCode(0), accountAccessState((TradeAccountAccessState::type)0), hadBeenActived(0), createTimestamp(0), lastmodifyTimestamp(0) {
  }

  virtual ~HostingTradeAccount() throw() {}

  int64_t tradeAccountId;
  int32_t tradeBrokerAccessId;
  std::string loginUserName;
  std::string loginPassword;
  std::map<std::string, std::string>  accountProperties;
  int32_t tradeBrokerId;
  BrokerTechPlatform::type brokerTechPlatform;
  std::string tradeAccountRemark;
  TradeAccountState::type accountState;
  std::string invalidReason;
  int32_t invalidErrorCode;
  int32_t apiRetCode;
  TradeAccountAccessState::type accountAccessState;
  bool hadBeenActived;
  int32_t createTimestamp;
  int32_t lastmodifyTimestamp;

  _HostingTradeAccount__isset __isset;

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
    __isset.tradeAccountId = true;
  }

  void __set_tradeBrokerAccessId(const int32_t val) {
    tradeBrokerAccessId = val;
    __isset.tradeBrokerAccessId = true;
  }

  void __set_loginUserName(const std::string& val) {
    loginUserName = val;
    __isset.loginUserName = true;
  }

  void __set_loginPassword(const std::string& val) {
    loginPassword = val;
    __isset.loginPassword = true;
  }

  void __set_accountProperties(const std::map<std::string, std::string> & val) {
    accountProperties = val;
    __isset.accountProperties = true;
  }

  void __set_tradeBrokerId(const int32_t val) {
    tradeBrokerId = val;
    __isset.tradeBrokerId = true;
  }

  void __set_brokerTechPlatform(const BrokerTechPlatform::type val) {
    brokerTechPlatform = val;
    __isset.brokerTechPlatform = true;
  }

  void __set_tradeAccountRemark(const std::string& val) {
    tradeAccountRemark = val;
    __isset.tradeAccountRemark = true;
  }

  void __set_accountState(const TradeAccountState::type val) {
    accountState = val;
    __isset.accountState = true;
  }

  void __set_invalidReason(const std::string& val) {
    invalidReason = val;
    __isset.invalidReason = true;
  }

  void __set_invalidErrorCode(const int32_t val) {
    invalidErrorCode = val;
    __isset.invalidErrorCode = true;
  }

  void __set_apiRetCode(const int32_t val) {
    apiRetCode = val;
    __isset.apiRetCode = true;
  }

  void __set_accountAccessState(const TradeAccountAccessState::type val) {
    accountAccessState = val;
    __isset.accountAccessState = true;
  }

  void __set_hadBeenActived(const bool val) {
    hadBeenActived = val;
    __isset.hadBeenActived = true;
  }

  void __set_createTimestamp(const int32_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastmodifyTimestamp(const int32_t val) {
    lastmodifyTimestamp = val;
    __isset.lastmodifyTimestamp = true;
  }

  bool operator == (const HostingTradeAccount & rhs) const
  {
    if (__isset.tradeAccountId != rhs.__isset.tradeAccountId)
      return false;
    else if (__isset.tradeAccountId && !(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (__isset.tradeBrokerAccessId != rhs.__isset.tradeBrokerAccessId)
      return false;
    else if (__isset.tradeBrokerAccessId && !(tradeBrokerAccessId == rhs.tradeBrokerAccessId))
      return false;
    if (__isset.loginUserName != rhs.__isset.loginUserName)
      return false;
    else if (__isset.loginUserName && !(loginUserName == rhs.loginUserName))
      return false;
    if (__isset.loginPassword != rhs.__isset.loginPassword)
      return false;
    else if (__isset.loginPassword && !(loginPassword == rhs.loginPassword))
      return false;
    if (__isset.accountProperties != rhs.__isset.accountProperties)
      return false;
    else if (__isset.accountProperties && !(accountProperties == rhs.accountProperties))
      return false;
    if (__isset.tradeBrokerId != rhs.__isset.tradeBrokerId)
      return false;
    else if (__isset.tradeBrokerId && !(tradeBrokerId == rhs.tradeBrokerId))
      return false;
    if (__isset.brokerTechPlatform != rhs.__isset.brokerTechPlatform)
      return false;
    else if (__isset.brokerTechPlatform && !(brokerTechPlatform == rhs.brokerTechPlatform))
      return false;
    if (__isset.tradeAccountRemark != rhs.__isset.tradeAccountRemark)
      return false;
    else if (__isset.tradeAccountRemark && !(tradeAccountRemark == rhs.tradeAccountRemark))
      return false;
    if (__isset.accountState != rhs.__isset.accountState)
      return false;
    else if (__isset.accountState && !(accountState == rhs.accountState))
      return false;
    if (__isset.invalidReason != rhs.__isset.invalidReason)
      return false;
    else if (__isset.invalidReason && !(invalidReason == rhs.invalidReason))
      return false;
    if (__isset.invalidErrorCode != rhs.__isset.invalidErrorCode)
      return false;
    else if (__isset.invalidErrorCode && !(invalidErrorCode == rhs.invalidErrorCode))
      return false;
    if (__isset.apiRetCode != rhs.__isset.apiRetCode)
      return false;
    else if (__isset.apiRetCode && !(apiRetCode == rhs.apiRetCode))
      return false;
    if (__isset.accountAccessState != rhs.__isset.accountAccessState)
      return false;
    else if (__isset.accountAccessState && !(accountAccessState == rhs.accountAccessState))
      return false;
    if (__isset.hadBeenActived != rhs.__isset.hadBeenActived)
      return false;
    else if (__isset.hadBeenActived && !(hadBeenActived == rhs.hadBeenActived))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastmodifyTimestamp != rhs.__isset.lastmodifyTimestamp)
      return false;
    else if (__isset.lastmodifyTimestamp && !(lastmodifyTimestamp == rhs.lastmodifyTimestamp))
      return false;
    return true;
  }
  bool operator != (const HostingTradeAccount &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingTradeAccount & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingTradeAccount &a, HostingTradeAccount &b);

typedef struct _HostingOrderRouteRelatedInfo__isset {
  _HostingOrderRouteRelatedInfo__isset() : forbidden(false), mainTradeAccountId(false) {}
  bool forbidden;
  bool mainTradeAccountId;
} _HostingOrderRouteRelatedInfo__isset;

class HostingOrderRouteRelatedInfo {
 public:

  static const char* ascii_fingerprint; // = "9C53FFB6CD53A05B88C2CCB56530A5F6";
  static const uint8_t binary_fingerprint[16]; // = {0x9C,0x53,0xFF,0xB6,0xCD,0x53,0xA0,0x5B,0x88,0xC2,0xCC,0xB5,0x65,0x30,0xA5,0xF6};

  HostingOrderRouteRelatedInfo() : forbidden(0), mainTradeAccountId(0) {
  }

  virtual ~HostingOrderRouteRelatedInfo() throw() {}

  bool forbidden;
  int64_t mainTradeAccountId;

  _HostingOrderRouteRelatedInfo__isset __isset;

  void __set_forbidden(const bool val) {
    forbidden = val;
    __isset.forbidden = true;
  }

  void __set_mainTradeAccountId(const int64_t val) {
    mainTradeAccountId = val;
    __isset.mainTradeAccountId = true;
  }

  bool operator == (const HostingOrderRouteRelatedInfo & rhs) const
  {
    if (__isset.forbidden != rhs.__isset.forbidden)
      return false;
    else if (__isset.forbidden && !(forbidden == rhs.forbidden))
      return false;
    if (__isset.mainTradeAccountId != rhs.__isset.mainTradeAccountId)
      return false;
    else if (__isset.mainTradeAccountId && !(mainTradeAccountId == rhs.mainTradeAccountId))
      return false;
    return true;
  }
  bool operator != (const HostingOrderRouteRelatedInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingOrderRouteRelatedInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingOrderRouteRelatedInfo &a, HostingOrderRouteRelatedInfo &b);

typedef struct _HostingOrderRouteCommodityCodeNode__isset {
  _HostingOrderRouteCommodityCodeNode__isset() : sledCommodityCode(false), relatedInfo(false) {}
  bool sledCommodityCode;
  bool relatedInfo;
} _HostingOrderRouteCommodityCodeNode__isset;

class HostingOrderRouteCommodityCodeNode {
 public:

  static const char* ascii_fingerprint; // = "2215B979326DABA38BB5F462F7F81A01";
  static const uint8_t binary_fingerprint[16]; // = {0x22,0x15,0xB9,0x79,0x32,0x6D,0xAB,0xA3,0x8B,0xB5,0xF4,0x62,0xF7,0xF8,0x1A,0x01};

  HostingOrderRouteCommodityCodeNode() : sledCommodityCode() {
  }

  virtual ~HostingOrderRouteCommodityCodeNode() throw() {}

  std::string sledCommodityCode;
  HostingOrderRouteRelatedInfo relatedInfo;

  _HostingOrderRouteCommodityCodeNode__isset __isset;

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_relatedInfo(const HostingOrderRouteRelatedInfo& val) {
    relatedInfo = val;
    __isset.relatedInfo = true;
  }

  bool operator == (const HostingOrderRouteCommodityCodeNode & rhs) const
  {
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.relatedInfo != rhs.__isset.relatedInfo)
      return false;
    else if (__isset.relatedInfo && !(relatedInfo == rhs.relatedInfo))
      return false;
    return true;
  }
  bool operator != (const HostingOrderRouteCommodityCodeNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingOrderRouteCommodityCodeNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingOrderRouteCommodityCodeNode &a, HostingOrderRouteCommodityCodeNode &b);

typedef struct _HostingOrderRouteCommodityTypeNode__isset {
  _HostingOrderRouteCommodityTypeNode__isset() : sledCommodityType(false), subCommodityCodeNodes(false), relatedInfo(false) {}
  bool sledCommodityType;
  bool subCommodityCodeNodes;
  bool relatedInfo;
} _HostingOrderRouteCommodityTypeNode__isset;

class HostingOrderRouteCommodityTypeNode {
 public:

  static const char* ascii_fingerprint; // = "6A80C3AF379D8E28E8B98BD055A0DB1C";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0x80,0xC3,0xAF,0x37,0x9D,0x8E,0x28,0xE8,0xB9,0x8B,0xD0,0x55,0xA0,0xDB,0x1C};

  HostingOrderRouteCommodityTypeNode() : sledCommodityType(0) {
  }

  virtual ~HostingOrderRouteCommodityTypeNode() throw() {}

  int16_t sledCommodityType;
  std::map<std::string, HostingOrderRouteCommodityCodeNode>  subCommodityCodeNodes;
  HostingOrderRouteRelatedInfo relatedInfo;

  _HostingOrderRouteCommodityTypeNode__isset __isset;

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_subCommodityCodeNodes(const std::map<std::string, HostingOrderRouteCommodityCodeNode> & val) {
    subCommodityCodeNodes = val;
    __isset.subCommodityCodeNodes = true;
  }

  void __set_relatedInfo(const HostingOrderRouteRelatedInfo& val) {
    relatedInfo = val;
    __isset.relatedInfo = true;
  }

  bool operator == (const HostingOrderRouteCommodityTypeNode & rhs) const
  {
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.subCommodityCodeNodes != rhs.__isset.subCommodityCodeNodes)
      return false;
    else if (__isset.subCommodityCodeNodes && !(subCommodityCodeNodes == rhs.subCommodityCodeNodes))
      return false;
    if (__isset.relatedInfo != rhs.__isset.relatedInfo)
      return false;
    else if (__isset.relatedInfo && !(relatedInfo == rhs.relatedInfo))
      return false;
    return true;
  }
  bool operator != (const HostingOrderRouteCommodityTypeNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingOrderRouteCommodityTypeNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingOrderRouteCommodityTypeNode &a, HostingOrderRouteCommodityTypeNode &b);

typedef struct _HostingOrderRouteExchangeNode__isset {
  _HostingOrderRouteExchangeNode__isset() : sledExchangeCode(false), subCommodityTypeNodes(false), relatedInfo(false) {}
  bool sledExchangeCode;
  bool subCommodityTypeNodes;
  bool relatedInfo;
} _HostingOrderRouteExchangeNode__isset;

class HostingOrderRouteExchangeNode {
 public:

  static const char* ascii_fingerprint; // = "52417C722FEA5CB7213E7BA661BCC50C";
  static const uint8_t binary_fingerprint[16]; // = {0x52,0x41,0x7C,0x72,0x2F,0xEA,0x5C,0xB7,0x21,0x3E,0x7B,0xA6,0x61,0xBC,0xC5,0x0C};

  HostingOrderRouteExchangeNode() : sledExchangeCode() {
  }

  virtual ~HostingOrderRouteExchangeNode() throw() {}

  std::string sledExchangeCode;
  std::map<int16_t, HostingOrderRouteCommodityTypeNode>  subCommodityTypeNodes;
  HostingOrderRouteRelatedInfo relatedInfo;

  _HostingOrderRouteExchangeNode__isset __isset;

  void __set_sledExchangeCode(const std::string& val) {
    sledExchangeCode = val;
    __isset.sledExchangeCode = true;
  }

  void __set_subCommodityTypeNodes(const std::map<int16_t, HostingOrderRouteCommodityTypeNode> & val) {
    subCommodityTypeNodes = val;
    __isset.subCommodityTypeNodes = true;
  }

  void __set_relatedInfo(const HostingOrderRouteRelatedInfo& val) {
    relatedInfo = val;
    __isset.relatedInfo = true;
  }

  bool operator == (const HostingOrderRouteExchangeNode & rhs) const
  {
    if (__isset.sledExchangeCode != rhs.__isset.sledExchangeCode)
      return false;
    else if (__isset.sledExchangeCode && !(sledExchangeCode == rhs.sledExchangeCode))
      return false;
    if (__isset.subCommodityTypeNodes != rhs.__isset.subCommodityTypeNodes)
      return false;
    else if (__isset.subCommodityTypeNodes && !(subCommodityTypeNodes == rhs.subCommodityTypeNodes))
      return false;
    if (__isset.relatedInfo != rhs.__isset.relatedInfo)
      return false;
    else if (__isset.relatedInfo && !(relatedInfo == rhs.relatedInfo))
      return false;
    return true;
  }
  bool operator != (const HostingOrderRouteExchangeNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingOrderRouteExchangeNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingOrderRouteExchangeNode &a, HostingOrderRouteExchangeNode &b);

typedef struct _HostingOrderRouteTree__isset {
  _HostingOrderRouteTree__isset() : configVersion(false), subExchangeNodes(false) {}
  bool configVersion;
  bool subExchangeNodes;
} _HostingOrderRouteTree__isset;

class HostingOrderRouteTree {
 public:

  static const char* ascii_fingerprint; // = "159D9F6514D5C978263AC42DE8C48EA7";
  static const uint8_t binary_fingerprint[16]; // = {0x15,0x9D,0x9F,0x65,0x14,0xD5,0xC9,0x78,0x26,0x3A,0xC4,0x2D,0xE8,0xC4,0x8E,0xA7};

  HostingOrderRouteTree() : configVersion(0) {
  }

  virtual ~HostingOrderRouteTree() throw() {}

  int32_t configVersion;
  std::map<std::string, HostingOrderRouteExchangeNode>  subExchangeNodes;

  _HostingOrderRouteTree__isset __isset;

  void __set_configVersion(const int32_t val) {
    configVersion = val;
    __isset.configVersion = true;
  }

  void __set_subExchangeNodes(const std::map<std::string, HostingOrderRouteExchangeNode> & val) {
    subExchangeNodes = val;
    __isset.subExchangeNodes = true;
  }

  bool operator == (const HostingOrderRouteTree & rhs) const
  {
    if (__isset.configVersion != rhs.__isset.configVersion)
      return false;
    else if (__isset.configVersion && !(configVersion == rhs.configVersion))
      return false;
    if (__isset.subExchangeNodes != rhs.__isset.subExchangeNodes)
      return false;
    else if (__isset.subExchangeNodes && !(subExchangeNodes == rhs.subExchangeNodes))
      return false;
    return true;
  }
  bool operator != (const HostingOrderRouteTree &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingOrderRouteTree & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingOrderRouteTree &a, HostingOrderRouteTree &b);

typedef struct _HostingExecOrderDetail__isset {
  _HostingExecOrderDetail__isset() : orderType(false), limitPrice(false), quantity(false), tradeDirection(false), orderCreatorType(false), orderMode(false), effectiveDateTime(false), condition(false), conditionPrice(false) {}
  bool orderType;
  bool limitPrice;
  bool quantity;
  bool tradeDirection;
  bool orderCreatorType;
  bool orderMode;
  bool effectiveDateTime;
  bool condition;
  bool conditionPrice;
} _HostingExecOrderDetail__isset;

class HostingExecOrderDetail {
 public:

  static const char* ascii_fingerprint; // = "DFF43354BBCF85A506D2A2127C644BF7";
  static const uint8_t binary_fingerprint[16]; // = {0xDF,0xF4,0x33,0x54,0xBB,0xCF,0x85,0xA5,0x06,0xD2,0xA2,0x12,0x7C,0x64,0x4B,0xF7};

  HostingExecOrderDetail() : orderType((HostingExecOrderType::type)0), limitPrice(0), quantity(0), tradeDirection((HostingExecOrderTradeDirection::type)0), orderCreatorType((HostingExecOrderCreatorType::type)0), orderMode((HostingExecOrderMode::type)0), effectiveDateTime(), condition((HostingExecOrderCondition::type)0), conditionPrice(0) {
  }

  virtual ~HostingExecOrderDetail() throw() {}

  HostingExecOrderType::type orderType;
  double limitPrice;
  int32_t quantity;
  HostingExecOrderTradeDirection::type tradeDirection;
  HostingExecOrderCreatorType::type orderCreatorType;
  HostingExecOrderMode::type orderMode;
  std::string effectiveDateTime;
  HostingExecOrderCondition::type condition;
  double conditionPrice;

  _HostingExecOrderDetail__isset __isset;

  void __set_orderType(const HostingExecOrderType::type val) {
    orderType = val;
    __isset.orderType = true;
  }

  void __set_limitPrice(const double val) {
    limitPrice = val;
    __isset.limitPrice = true;
  }

  void __set_quantity(const int32_t val) {
    quantity = val;
    __isset.quantity = true;
  }

  void __set_tradeDirection(const HostingExecOrderTradeDirection::type val) {
    tradeDirection = val;
    __isset.tradeDirection = true;
  }

  void __set_orderCreatorType(const HostingExecOrderCreatorType::type val) {
    orderCreatorType = val;
    __isset.orderCreatorType = true;
  }

  void __set_orderMode(const HostingExecOrderMode::type val) {
    orderMode = val;
    __isset.orderMode = true;
  }

  void __set_effectiveDateTime(const std::string& val) {
    effectiveDateTime = val;
    __isset.effectiveDateTime = true;
  }

  void __set_condition(const HostingExecOrderCondition::type val) {
    condition = val;
    __isset.condition = true;
  }

  void __set_conditionPrice(const double val) {
    conditionPrice = val;
    __isset.conditionPrice = true;
  }

  bool operator == (const HostingExecOrderDetail & rhs) const
  {
    if (__isset.orderType != rhs.__isset.orderType)
      return false;
    else if (__isset.orderType && !(orderType == rhs.orderType))
      return false;
    if (__isset.limitPrice != rhs.__isset.limitPrice)
      return false;
    else if (__isset.limitPrice && !(limitPrice == rhs.limitPrice))
      return false;
    if (__isset.quantity != rhs.__isset.quantity)
      return false;
    else if (__isset.quantity && !(quantity == rhs.quantity))
      return false;
    if (__isset.tradeDirection != rhs.__isset.tradeDirection)
      return false;
    else if (__isset.tradeDirection && !(tradeDirection == rhs.tradeDirection))
      return false;
    if (__isset.orderCreatorType != rhs.__isset.orderCreatorType)
      return false;
    else if (__isset.orderCreatorType && !(orderCreatorType == rhs.orderCreatorType))
      return false;
    if (__isset.orderMode != rhs.__isset.orderMode)
      return false;
    else if (__isset.orderMode && !(orderMode == rhs.orderMode))
      return false;
    if (__isset.effectiveDateTime != rhs.__isset.effectiveDateTime)
      return false;
    else if (__isset.effectiveDateTime && !(effectiveDateTime == rhs.effectiveDateTime))
      return false;
    if (__isset.condition != rhs.__isset.condition)
      return false;
    else if (__isset.condition && !(condition == rhs.condition))
      return false;
    if (__isset.conditionPrice != rhs.__isset.conditionPrice)
      return false;
    else if (__isset.conditionPrice && !(conditionPrice == rhs.conditionPrice))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderDetail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderDetail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderDetail &a, HostingExecOrderDetail &b);

typedef struct _HostingExecOrderLegContractSummary__isset {
  _HostingExecOrderLegContractSummary__isset() : legSledContractId(false), legSledContractCode(false), legSledCommodityId(false), legSledCommodityType(false), legSledCommodityCode(false), legSledExchangeMic(false) {}
  bool legSledContractId;
  bool legSledContractCode;
  bool legSledCommodityId;
  bool legSledCommodityType;
  bool legSledCommodityCode;
  bool legSledExchangeMic;
} _HostingExecOrderLegContractSummary__isset;

class HostingExecOrderLegContractSummary {
 public:

  static const char* ascii_fingerprint; // = "2DAEAE9042C4FF85356E495DE16B8287";
  static const uint8_t binary_fingerprint[16]; // = {0x2D,0xAE,0xAE,0x90,0x42,0xC4,0xFF,0x85,0x35,0x6E,0x49,0x5D,0xE1,0x6B,0x82,0x87};

  HostingExecOrderLegContractSummary() : legSledContractId(0), legSledContractCode(), legSledCommodityId(0), legSledCommodityType(0), legSledCommodityCode(), legSledExchangeMic() {
  }

  virtual ~HostingExecOrderLegContractSummary() throw() {}

  int64_t legSledContractId;
  std::string legSledContractCode;
  int64_t legSledCommodityId;
  int16_t legSledCommodityType;
  std::string legSledCommodityCode;
  std::string legSledExchangeMic;

  _HostingExecOrderLegContractSummary__isset __isset;

  void __set_legSledContractId(const int64_t val) {
    legSledContractId = val;
    __isset.legSledContractId = true;
  }

  void __set_legSledContractCode(const std::string& val) {
    legSledContractCode = val;
    __isset.legSledContractCode = true;
  }

  void __set_legSledCommodityId(const int64_t val) {
    legSledCommodityId = val;
    __isset.legSledCommodityId = true;
  }

  void __set_legSledCommodityType(const int16_t val) {
    legSledCommodityType = val;
    __isset.legSledCommodityType = true;
  }

  void __set_legSledCommodityCode(const std::string& val) {
    legSledCommodityCode = val;
    __isset.legSledCommodityCode = true;
  }

  void __set_legSledExchangeMic(const std::string& val) {
    legSledExchangeMic = val;
    __isset.legSledExchangeMic = true;
  }

  bool operator == (const HostingExecOrderLegContractSummary & rhs) const
  {
    if (__isset.legSledContractId != rhs.__isset.legSledContractId)
      return false;
    else if (__isset.legSledContractId && !(legSledContractId == rhs.legSledContractId))
      return false;
    if (__isset.legSledContractCode != rhs.__isset.legSledContractCode)
      return false;
    else if (__isset.legSledContractCode && !(legSledContractCode == rhs.legSledContractCode))
      return false;
    if (__isset.legSledCommodityId != rhs.__isset.legSledCommodityId)
      return false;
    else if (__isset.legSledCommodityId && !(legSledCommodityId == rhs.legSledCommodityId))
      return false;
    if (__isset.legSledCommodityType != rhs.__isset.legSledCommodityType)
      return false;
    else if (__isset.legSledCommodityType && !(legSledCommodityType == rhs.legSledCommodityType))
      return false;
    if (__isset.legSledCommodityCode != rhs.__isset.legSledCommodityCode)
      return false;
    else if (__isset.legSledCommodityCode && !(legSledCommodityCode == rhs.legSledCommodityCode))
      return false;
    if (__isset.legSledExchangeMic != rhs.__isset.legSledExchangeMic)
      return false;
    else if (__isset.legSledExchangeMic && !(legSledExchangeMic == rhs.legSledExchangeMic))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderLegContractSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderLegContractSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderLegContractSummary &a, HostingExecOrderLegContractSummary &b);

typedef struct _HostingExecOrderContractSummary__isset {
  _HostingExecOrderContractSummary__isset() : sledContractId(false), sledContractCode(false), sledCommodityId(false), sledCommodityType(false), sledCommodityCode(false), sledExchangeMic(false), relatedLegs(false) {}
  bool sledContractId;
  bool sledContractCode;
  bool sledCommodityId;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool sledExchangeMic;
  bool relatedLegs;
} _HostingExecOrderContractSummary__isset;

class HostingExecOrderContractSummary {
 public:

  static const char* ascii_fingerprint; // = "9D69E63705AC1B1454063EAFCD752FF3";
  static const uint8_t binary_fingerprint[16]; // = {0x9D,0x69,0xE6,0x37,0x05,0xAC,0x1B,0x14,0x54,0x06,0x3E,0xAF,0xCD,0x75,0x2F,0xF3};

  HostingExecOrderContractSummary() : sledContractId(0), sledContractCode(), sledCommodityId(0), sledCommodityType(0), sledCommodityCode(), sledExchangeMic() {
  }

  virtual ~HostingExecOrderContractSummary() throw() {}

  int64_t sledContractId;
  std::string sledContractCode;
  int64_t sledCommodityId;
  int16_t sledCommodityType;
  std::string sledCommodityCode;
  std::string sledExchangeMic;
  std::vector<HostingExecOrderLegContractSummary>  relatedLegs;

  _HostingExecOrderContractSummary__isset __isset;

  void __set_sledContractId(const int64_t val) {
    sledContractId = val;
    __isset.sledContractId = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_sledCommodityId(const int64_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_sledExchangeMic(const std::string& val) {
    sledExchangeMic = val;
    __isset.sledExchangeMic = true;
  }

  void __set_relatedLegs(const std::vector<HostingExecOrderLegContractSummary> & val) {
    relatedLegs = val;
    __isset.relatedLegs = true;
  }

  bool operator == (const HostingExecOrderContractSummary & rhs) const
  {
    if (__isset.sledContractId != rhs.__isset.sledContractId)
      return false;
    else if (__isset.sledContractId && !(sledContractId == rhs.sledContractId))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.sledExchangeMic != rhs.__isset.sledExchangeMic)
      return false;
    else if (__isset.sledExchangeMic && !(sledExchangeMic == rhs.sledExchangeMic))
      return false;
    if (__isset.relatedLegs != rhs.__isset.relatedLegs)
      return false;
    else if (__isset.relatedLegs && !(relatedLegs == rhs.relatedLegs))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderContractSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderContractSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderContractSummary &a, HostingExecOrderContractSummary &b);

typedef struct _HostingExecOrderTradeAccountSummary__isset {
  _HostingExecOrderTradeAccountSummary__isset() : tradeAccountId(false), brokerId(false), techPlatform(false) {}
  bool tradeAccountId;
  bool brokerId;
  bool techPlatform;
} _HostingExecOrderTradeAccountSummary__isset;

class HostingExecOrderTradeAccountSummary {
 public:

  static const char* ascii_fingerprint; // = "B5E3CFEC99B5B2149131DC40361D8FE1";
  static const uint8_t binary_fingerprint[16]; // = {0xB5,0xE3,0xCF,0xEC,0x99,0xB5,0xB2,0x14,0x91,0x31,0xDC,0x40,0x36,0x1D,0x8F,0xE1};

  HostingExecOrderTradeAccountSummary() : tradeAccountId(0), brokerId(0), techPlatform((BrokerTechPlatform::type)0) {
  }

  virtual ~HostingExecOrderTradeAccountSummary() throw() {}

  int64_t tradeAccountId;
  int32_t brokerId;
  BrokerTechPlatform::type techPlatform;

  _HostingExecOrderTradeAccountSummary__isset __isset;

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
    __isset.tradeAccountId = true;
  }

  void __set_brokerId(const int32_t val) {
    brokerId = val;
    __isset.brokerId = true;
  }

  void __set_techPlatform(const BrokerTechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  bool operator == (const HostingExecOrderTradeAccountSummary & rhs) const
  {
    if (__isset.tradeAccountId != rhs.__isset.tradeAccountId)
      return false;
    else if (__isset.tradeAccountId && !(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (__isset.brokerId != rhs.__isset.brokerId)
      return false;
    else if (__isset.brokerId && !(brokerId == rhs.brokerId))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderTradeAccountSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderTradeAccountSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderTradeAccountSummary &a, HostingExecOrderTradeAccountSummary &b);

typedef struct _HostingExecOrderState__isset {
  _HostingExecOrderState__isset() : value(false), timestampMs(false) {}
  bool value;
  bool timestampMs;
} _HostingExecOrderState__isset;

class HostingExecOrderState {
 public:

  static const char* ascii_fingerprint; // = "1A99749538798976FB3A4910CD73729D";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x99,0x74,0x95,0x38,0x79,0x89,0x76,0xFB,0x3A,0x49,0x10,0xCD,0x73,0x72,0x9D};

  HostingExecOrderState() : value((HostingExecOrderStateValue::type)0), timestampMs(0) {
  }

  virtual ~HostingExecOrderState() throw() {}

  HostingExecOrderStateValue::type value;
  int64_t timestampMs;

  _HostingExecOrderState__isset __isset;

  void __set_value(const HostingExecOrderStateValue::type val) {
    value = val;
    __isset.value = true;
  }

  void __set_timestampMs(const int64_t val) {
    timestampMs = val;
    __isset.timestampMs = true;
  }

  bool operator == (const HostingExecOrderState & rhs) const
  {
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    if (__isset.timestampMs != rhs.__isset.timestampMs)
      return false;
    else if (__isset.timestampMs && !(timestampMs == rhs.timestampMs))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderState &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderState & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderState &a, HostingExecOrderState &b);

typedef struct _HostingExecOrderStateInfo__isset {
  _HostingExecOrderStateInfo__isset() : currentState(false), historyStates(false), statusMsg(false), failedErrorCode(false), upsideErrorCode(false), upsideUsefulMsg(false) {}
  bool currentState;
  bool historyStates;
  bool statusMsg;
  bool failedErrorCode;
  bool upsideErrorCode;
  bool upsideUsefulMsg;
} _HostingExecOrderStateInfo__isset;

class HostingExecOrderStateInfo {
 public:

  static const char* ascii_fingerprint; // = "3F983584A1A1F3CCD9DABD3633D47562";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x98,0x35,0x84,0xA1,0xA1,0xF3,0xCC,0xD9,0xDA,0xBD,0x36,0x33,0xD4,0x75,0x62};

  HostingExecOrderStateInfo() : statusMsg(), failedErrorCode(0), upsideErrorCode(0), upsideUsefulMsg() {
  }

  virtual ~HostingExecOrderStateInfo() throw() {}

  HostingExecOrderState currentState;
  std::vector<HostingExecOrderState>  historyStates;
  std::string statusMsg;
  int32_t failedErrorCode;
  int32_t upsideErrorCode;
  std::string upsideUsefulMsg;

  _HostingExecOrderStateInfo__isset __isset;

  void __set_currentState(const HostingExecOrderState& val) {
    currentState = val;
    __isset.currentState = true;
  }

  void __set_historyStates(const std::vector<HostingExecOrderState> & val) {
    historyStates = val;
    __isset.historyStates = true;
  }

  void __set_statusMsg(const std::string& val) {
    statusMsg = val;
    __isset.statusMsg = true;
  }

  void __set_failedErrorCode(const int32_t val) {
    failedErrorCode = val;
    __isset.failedErrorCode = true;
  }

  void __set_upsideErrorCode(const int32_t val) {
    upsideErrorCode = val;
    __isset.upsideErrorCode = true;
  }

  void __set_upsideUsefulMsg(const std::string& val) {
    upsideUsefulMsg = val;
    __isset.upsideUsefulMsg = true;
  }

  bool operator == (const HostingExecOrderStateInfo & rhs) const
  {
    if (__isset.currentState != rhs.__isset.currentState)
      return false;
    else if (__isset.currentState && !(currentState == rhs.currentState))
      return false;
    if (__isset.historyStates != rhs.__isset.historyStates)
      return false;
    else if (__isset.historyStates && !(historyStates == rhs.historyStates))
      return false;
    if (__isset.statusMsg != rhs.__isset.statusMsg)
      return false;
    else if (__isset.statusMsg && !(statusMsg == rhs.statusMsg))
      return false;
    if (__isset.failedErrorCode != rhs.__isset.failedErrorCode)
      return false;
    else if (__isset.failedErrorCode && !(failedErrorCode == rhs.failedErrorCode))
      return false;
    if (__isset.upsideErrorCode != rhs.__isset.upsideErrorCode)
      return false;
    else if (__isset.upsideErrorCode && !(upsideErrorCode == rhs.upsideErrorCode))
      return false;
    if (__isset.upsideUsefulMsg != rhs.__isset.upsideUsefulMsg)
      return false;
    else if (__isset.upsideUsefulMsg && !(upsideUsefulMsg == rhs.upsideUsefulMsg))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderStateInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderStateInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderStateInfo &a, HostingExecOrderStateInfo &b);

typedef struct _HostingExecOrderRevokeInfo__isset {
  _HostingExecOrderRevokeInfo__isset() : lastRevokeTimestampMs(false), lastRevokeFailedErrorCode(false), lastRevokeUpsideErrorCode(false), lastRevokeUpsideRejectReason(false) {}
  bool lastRevokeTimestampMs;
  bool lastRevokeFailedErrorCode;
  bool lastRevokeUpsideErrorCode;
  bool lastRevokeUpsideRejectReason;
} _HostingExecOrderRevokeInfo__isset;

class HostingExecOrderRevokeInfo {
 public:

  static const char* ascii_fingerprint; // = "A403959AB21B2E33847512A23F40CCE6";
  static const uint8_t binary_fingerprint[16]; // = {0xA4,0x03,0x95,0x9A,0xB2,0x1B,0x2E,0x33,0x84,0x75,0x12,0xA2,0x3F,0x40,0xCC,0xE6};

  HostingExecOrderRevokeInfo() : lastRevokeTimestampMs(0), lastRevokeFailedErrorCode(0), lastRevokeUpsideErrorCode(0), lastRevokeUpsideRejectReason() {
  }

  virtual ~HostingExecOrderRevokeInfo() throw() {}

  int64_t lastRevokeTimestampMs;
  int32_t lastRevokeFailedErrorCode;
  int32_t lastRevokeUpsideErrorCode;
  std::string lastRevokeUpsideRejectReason;

  _HostingExecOrderRevokeInfo__isset __isset;

  void __set_lastRevokeTimestampMs(const int64_t val) {
    lastRevokeTimestampMs = val;
    __isset.lastRevokeTimestampMs = true;
  }

  void __set_lastRevokeFailedErrorCode(const int32_t val) {
    lastRevokeFailedErrorCode = val;
    __isset.lastRevokeFailedErrorCode = true;
  }

  void __set_lastRevokeUpsideErrorCode(const int32_t val) {
    lastRevokeUpsideErrorCode = val;
    __isset.lastRevokeUpsideErrorCode = true;
  }

  void __set_lastRevokeUpsideRejectReason(const std::string& val) {
    lastRevokeUpsideRejectReason = val;
    __isset.lastRevokeUpsideRejectReason = true;
  }

  bool operator == (const HostingExecOrderRevokeInfo & rhs) const
  {
    if (__isset.lastRevokeTimestampMs != rhs.__isset.lastRevokeTimestampMs)
      return false;
    else if (__isset.lastRevokeTimestampMs && !(lastRevokeTimestampMs == rhs.lastRevokeTimestampMs))
      return false;
    if (__isset.lastRevokeFailedErrorCode != rhs.__isset.lastRevokeFailedErrorCode)
      return false;
    else if (__isset.lastRevokeFailedErrorCode && !(lastRevokeFailedErrorCode == rhs.lastRevokeFailedErrorCode))
      return false;
    if (__isset.lastRevokeUpsideErrorCode != rhs.__isset.lastRevokeUpsideErrorCode)
      return false;
    else if (__isset.lastRevokeUpsideErrorCode && !(lastRevokeUpsideErrorCode == rhs.lastRevokeUpsideErrorCode))
      return false;
    if (__isset.lastRevokeUpsideRejectReason != rhs.__isset.lastRevokeUpsideRejectReason)
      return false;
    else if (__isset.lastRevokeUpsideRejectReason && !(lastRevokeUpsideRejectReason == rhs.lastRevokeUpsideRejectReason))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderRevokeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderRevokeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderRevokeInfo &a, HostingExecOrderRevokeInfo &b);

typedef struct _CTPOrderRef__isset {
  _CTPOrderRef__isset() : frontID(false), sessionID(false), orderRef(false) {}
  bool frontID;
  bool sessionID;
  bool orderRef;
} _CTPOrderRef__isset;

class CTPOrderRef {
 public:

  static const char* ascii_fingerprint; // = "F274D66FD49A613E4D8C874F5A58A038";
  static const uint8_t binary_fingerprint[16]; // = {0xF2,0x74,0xD6,0x6F,0xD4,0x9A,0x61,0x3E,0x4D,0x8C,0x87,0x4F,0x5A,0x58,0xA0,0x38};

  CTPOrderRef() : frontID(0), sessionID(0), orderRef() {
  }

  virtual ~CTPOrderRef() throw() {}

  int32_t frontID;
  int32_t sessionID;
  std::string orderRef;

  _CTPOrderRef__isset __isset;

  void __set_frontID(const int32_t val) {
    frontID = val;
    __isset.frontID = true;
  }

  void __set_sessionID(const int32_t val) {
    sessionID = val;
    __isset.sessionID = true;
  }

  void __set_orderRef(const std::string& val) {
    orderRef = val;
    __isset.orderRef = true;
  }

  bool operator == (const CTPOrderRef & rhs) const
  {
    if (__isset.frontID != rhs.__isset.frontID)
      return false;
    else if (__isset.frontID && !(frontID == rhs.frontID))
      return false;
    if (__isset.sessionID != rhs.__isset.sessionID)
      return false;
    else if (__isset.sessionID && !(sessionID == rhs.sessionID))
      return false;
    if (__isset.orderRef != rhs.__isset.orderRef)
      return false;
    else if (__isset.orderRef && !(orderRef == rhs.orderRef))
      return false;
    return true;
  }
  bool operator != (const CTPOrderRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPOrderRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPOrderRef &a, CTPOrderRef &b);

typedef struct _ESunny3OrderRef__isset {
  _ESunny3OrderRef__isset() : saveString(false) {}
  bool saveString;
} _ESunny3OrderRef__isset;

class ESunny3OrderRef {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ESunny3OrderRef() : saveString() {
  }

  virtual ~ESunny3OrderRef() throw() {}

  std::string saveString;

  _ESunny3OrderRef__isset __isset;

  void __set_saveString(const std::string& val) {
    saveString = val;
    __isset.saveString = true;
  }

  bool operator == (const ESunny3OrderRef & rhs) const
  {
    if (__isset.saveString != rhs.__isset.saveString)
      return false;
    else if (__isset.saveString && !(saveString == rhs.saveString))
      return false;
    return true;
  }
  bool operator != (const ESunny3OrderRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny3OrderRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny3OrderRef &a, ESunny3OrderRef &b);

typedef struct _ESunny9OrderRef__isset {
  _ESunny9OrderRef__isset() : refString(false) {}
  bool refString;
} _ESunny9OrderRef__isset;

class ESunny9OrderRef {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ESunny9OrderRef() : refString() {
  }

  virtual ~ESunny9OrderRef() throw() {}

  std::string refString;

  _ESunny9OrderRef__isset __isset;

  void __set_refString(const std::string& val) {
    refString = val;
    __isset.refString = true;
  }

  bool operator == (const ESunny9OrderRef & rhs) const
  {
    if (__isset.refString != rhs.__isset.refString)
      return false;
    else if (__isset.refString && !(refString == rhs.refString))
      return false;
    return true;
  }
  bool operator != (const ESunny9OrderRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny9OrderRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny9OrderRef &a, ESunny9OrderRef &b);

typedef struct _HostingExecOrderRef__isset {
  _HostingExecOrderRef__isset() : ctpRef(false), esunny3Ref(false), esunny9Ref(false) {}
  bool ctpRef;
  bool esunny3Ref;
  bool esunny9Ref;
} _HostingExecOrderRef__isset;

class HostingExecOrderRef {
 public:

  static const char* ascii_fingerprint; // = "C2A739E5F794ACF8EB1A8E0B27D8A321";
  static const uint8_t binary_fingerprint[16]; // = {0xC2,0xA7,0x39,0xE5,0xF7,0x94,0xAC,0xF8,0xEB,0x1A,0x8E,0x0B,0x27,0xD8,0xA3,0x21};

  HostingExecOrderRef() {
  }

  virtual ~HostingExecOrderRef() throw() {}

  CTPOrderRef ctpRef;
  ESunny3OrderRef esunny3Ref;
  ESunny9OrderRef esunny9Ref;

  _HostingExecOrderRef__isset __isset;

  void __set_ctpRef(const CTPOrderRef& val) {
    ctpRef = val;
    __isset.ctpRef = true;
  }

  void __set_esunny3Ref(const ESunny3OrderRef& val) {
    esunny3Ref = val;
    __isset.esunny3Ref = true;
  }

  void __set_esunny9Ref(const ESunny9OrderRef& val) {
    esunny9Ref = val;
    __isset.esunny9Ref = true;
  }

  bool operator == (const HostingExecOrderRef & rhs) const
  {
    if (__isset.ctpRef != rhs.__isset.ctpRef)
      return false;
    else if (__isset.ctpRef && !(ctpRef == rhs.ctpRef))
      return false;
    if (__isset.esunny3Ref != rhs.__isset.esunny3Ref)
      return false;
    else if (__isset.esunny3Ref && !(esunny3Ref == rhs.esunny3Ref))
      return false;
    if (__isset.esunny9Ref != rhs.__isset.esunny9Ref)
      return false;
    else if (__isset.esunny9Ref && !(esunny9Ref == rhs.esunny9Ref))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderRef &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderRef & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderRef &a, HostingExecOrderRef &b);

typedef struct _CTPContractSummary__isset {
  _CTPContractSummary__isset() : ctpExchangeCode(false), ctpCommodityCode(false), ctpCommodityType(false), ctpContractCode(false) {}
  bool ctpExchangeCode;
  bool ctpCommodityCode;
  bool ctpCommodityType;
  bool ctpContractCode;
} _CTPContractSummary__isset;

class CTPContractSummary {
 public:

  static const char* ascii_fingerprint; // = "416195F4560887440B74077B51AEDE0D";
  static const uint8_t binary_fingerprint[16]; // = {0x41,0x61,0x95,0xF4,0x56,0x08,0x87,0x44,0x0B,0x74,0x07,0x7B,0x51,0xAE,0xDE,0x0D};

  CTPContractSummary() : ctpExchangeCode(), ctpCommodityCode(), ctpCommodityType(0), ctpContractCode() {
  }

  virtual ~CTPContractSummary() throw() {}

  std::string ctpExchangeCode;
  std::string ctpCommodityCode;
  int16_t ctpCommodityType;
  std::string ctpContractCode;

  _CTPContractSummary__isset __isset;

  void __set_ctpExchangeCode(const std::string& val) {
    ctpExchangeCode = val;
    __isset.ctpExchangeCode = true;
  }

  void __set_ctpCommodityCode(const std::string& val) {
    ctpCommodityCode = val;
    __isset.ctpCommodityCode = true;
  }

  void __set_ctpCommodityType(const int16_t val) {
    ctpCommodityType = val;
    __isset.ctpCommodityType = true;
  }

  void __set_ctpContractCode(const std::string& val) {
    ctpContractCode = val;
    __isset.ctpContractCode = true;
  }

  bool operator == (const CTPContractSummary & rhs) const
  {
    if (__isset.ctpExchangeCode != rhs.__isset.ctpExchangeCode)
      return false;
    else if (__isset.ctpExchangeCode && !(ctpExchangeCode == rhs.ctpExchangeCode))
      return false;
    if (__isset.ctpCommodityCode != rhs.__isset.ctpCommodityCode)
      return false;
    else if (__isset.ctpCommodityCode && !(ctpCommodityCode == rhs.ctpCommodityCode))
      return false;
    if (__isset.ctpCommodityType != rhs.__isset.ctpCommodityType)
      return false;
    else if (__isset.ctpCommodityType && !(ctpCommodityType == rhs.ctpCommodityType))
      return false;
    if (__isset.ctpContractCode != rhs.__isset.ctpContractCode)
      return false;
    else if (__isset.ctpContractCode && !(ctpContractCode == rhs.ctpContractCode))
      return false;
    return true;
  }
  bool operator != (const CTPContractSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPContractSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPContractSummary &a, CTPContractSummary &b);

typedef struct _CTPOrderInputExt__isset {
  _CTPOrderInputExt__isset() : contractSummary(false), combOffsetFlag(false), minVolume(false), combHedgeFlag(false), tradeDirection(false) {}
  bool contractSummary;
  bool combOffsetFlag;
  bool minVolume;
  bool combHedgeFlag;
  bool tradeDirection;
} _CTPOrderInputExt__isset;

class CTPOrderInputExt {
 public:

  static const char* ascii_fingerprint; // = "E453F04FB868B3AD5691DCCAEB50C8E1";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x53,0xF0,0x4F,0xB8,0x68,0xB3,0xAD,0x56,0x91,0xDC,0xCA,0xEB,0x50,0xC8,0xE1};

  CTPOrderInputExt() : combOffsetFlag((CTPCombOffsetFlagType::type)0), minVolume(0), combHedgeFlag((CTPCombHedgeFlagType::type)0), tradeDirection((CTPTradeDirection::type)0) {
  }

  virtual ~CTPOrderInputExt() throw() {}

  CTPContractSummary contractSummary;
  CTPCombOffsetFlagType::type combOffsetFlag;
  int32_t minVolume;
  CTPCombHedgeFlagType::type combHedgeFlag;
  CTPTradeDirection::type tradeDirection;

  _CTPOrderInputExt__isset __isset;

  void __set_contractSummary(const CTPContractSummary& val) {
    contractSummary = val;
    __isset.contractSummary = true;
  }

  void __set_combOffsetFlag(const CTPCombOffsetFlagType::type val) {
    combOffsetFlag = val;
    __isset.combOffsetFlag = true;
  }

  void __set_minVolume(const int32_t val) {
    minVolume = val;
    __isset.minVolume = true;
  }

  void __set_combHedgeFlag(const CTPCombHedgeFlagType::type val) {
    combHedgeFlag = val;
    __isset.combHedgeFlag = true;
  }

  void __set_tradeDirection(const CTPTradeDirection::type val) {
    tradeDirection = val;
    __isset.tradeDirection = true;
  }

  bool operator == (const CTPOrderInputExt & rhs) const
  {
    if (__isset.contractSummary != rhs.__isset.contractSummary)
      return false;
    else if (__isset.contractSummary && !(contractSummary == rhs.contractSummary))
      return false;
    if (__isset.combOffsetFlag != rhs.__isset.combOffsetFlag)
      return false;
    else if (__isset.combOffsetFlag && !(combOffsetFlag == rhs.combOffsetFlag))
      return false;
    if (__isset.minVolume != rhs.__isset.minVolume)
      return false;
    else if (__isset.minVolume && !(minVolume == rhs.minVolume))
      return false;
    if (__isset.combHedgeFlag != rhs.__isset.combHedgeFlag)
      return false;
    else if (__isset.combHedgeFlag && !(combHedgeFlag == rhs.combHedgeFlag))
      return false;
    if (__isset.tradeDirection != rhs.__isset.tradeDirection)
      return false;
    else if (__isset.tradeDirection && !(tradeDirection == rhs.tradeDirection))
      return false;
    return true;
  }
  bool operator != (const CTPOrderInputExt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPOrderInputExt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPOrderInputExt &a, CTPOrderInputExt &b);

typedef struct _ESunny3ContractSummary__isset {
  _ESunny3ContractSummary__isset() : esunny3ExchangeCode(false), esunny3CommodityType(false), esunny3CommodityCode(false), esunny3ContractCode(false) {}
  bool esunny3ExchangeCode;
  bool esunny3CommodityType;
  bool esunny3CommodityCode;
  bool esunny3ContractCode;
} _ESunny3ContractSummary__isset;

class ESunny3ContractSummary {
 public:

  static const char* ascii_fingerprint; // = "A20F62CD65726B66757DDB38ECFADDF5";
  static const uint8_t binary_fingerprint[16]; // = {0xA2,0x0F,0x62,0xCD,0x65,0x72,0x6B,0x66,0x75,0x7D,0xDB,0x38,0xEC,0xFA,0xDD,0xF5};

  ESunny3ContractSummary() : esunny3ExchangeCode(), esunny3CommodityType(0), esunny3CommodityCode(), esunny3ContractCode() {
  }

  virtual ~ESunny3ContractSummary() throw() {}

  std::string esunny3ExchangeCode;
  int16_t esunny3CommodityType;
  std::string esunny3CommodityCode;
  std::string esunny3ContractCode;

  _ESunny3ContractSummary__isset __isset;

  void __set_esunny3ExchangeCode(const std::string& val) {
    esunny3ExchangeCode = val;
    __isset.esunny3ExchangeCode = true;
  }

  void __set_esunny3CommodityType(const int16_t val) {
    esunny3CommodityType = val;
    __isset.esunny3CommodityType = true;
  }

  void __set_esunny3CommodityCode(const std::string& val) {
    esunny3CommodityCode = val;
    __isset.esunny3CommodityCode = true;
  }

  void __set_esunny3ContractCode(const std::string& val) {
    esunny3ContractCode = val;
    __isset.esunny3ContractCode = true;
  }

  bool operator == (const ESunny3ContractSummary & rhs) const
  {
    if (__isset.esunny3ExchangeCode != rhs.__isset.esunny3ExchangeCode)
      return false;
    else if (__isset.esunny3ExchangeCode && !(esunny3ExchangeCode == rhs.esunny3ExchangeCode))
      return false;
    if (__isset.esunny3CommodityType != rhs.__isset.esunny3CommodityType)
      return false;
    else if (__isset.esunny3CommodityType && !(esunny3CommodityType == rhs.esunny3CommodityType))
      return false;
    if (__isset.esunny3CommodityCode != rhs.__isset.esunny3CommodityCode)
      return false;
    else if (__isset.esunny3CommodityCode && !(esunny3CommodityCode == rhs.esunny3CommodityCode))
      return false;
    if (__isset.esunny3ContractCode != rhs.__isset.esunny3ContractCode)
      return false;
    else if (__isset.esunny3ContractCode && !(esunny3ContractCode == rhs.esunny3ContractCode))
      return false;
    return true;
  }
  bool operator != (const ESunny3ContractSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny3ContractSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny3ContractSummary &a, ESunny3ContractSummary &b);

typedef struct _ESunny3OrderInputExt__isset {
  _ESunny3OrderInputExt__isset() : contractSummary(false) {}
  bool contractSummary;
} _ESunny3OrderInputExt__isset;

class ESunny3OrderInputExt {
 public:

  static const char* ascii_fingerprint; // = "50694A75315A56AE424E5602AD0563CF";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x69,0x4A,0x75,0x31,0x5A,0x56,0xAE,0x42,0x4E,0x56,0x02,0xAD,0x05,0x63,0xCF};

  ESunny3OrderInputExt() {
  }

  virtual ~ESunny3OrderInputExt() throw() {}

  ESunny3ContractSummary contractSummary;

  _ESunny3OrderInputExt__isset __isset;

  void __set_contractSummary(const ESunny3ContractSummary& val) {
    contractSummary = val;
    __isset.contractSummary = true;
  }

  bool operator == (const ESunny3OrderInputExt & rhs) const
  {
    if (__isset.contractSummary != rhs.__isset.contractSummary)
      return false;
    else if (__isset.contractSummary && !(contractSummary == rhs.contractSummary))
      return false;
    return true;
  }
  bool operator != (const ESunny3OrderInputExt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny3OrderInputExt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny3OrderInputExt &a, ESunny3OrderInputExt &b);

typedef struct _ESunny9ContractSummary__isset {
  _ESunny9ContractSummary__isset() : esunny9ExchangeNo(false), esunny9CommodityType(false), esunny9CommodityNo(false), esunny9ContractNo(false), esunny9ContractNo2(false) {}
  bool esunny9ExchangeNo;
  bool esunny9CommodityType;
  bool esunny9CommodityNo;
  bool esunny9ContractNo;
  bool esunny9ContractNo2;
} _ESunny9ContractSummary__isset;

class ESunny9ContractSummary {
 public:

  static const char* ascii_fingerprint; // = "31C01B41E14D852FEED48A0B8C26C3A9";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0xC0,0x1B,0x41,0xE1,0x4D,0x85,0x2F,0xEE,0xD4,0x8A,0x0B,0x8C,0x26,0xC3,0xA9};

  ESunny9ContractSummary() : esunny9ExchangeNo(), esunny9CommodityType(0), esunny9CommodityNo(), esunny9ContractNo(), esunny9ContractNo2() {
  }

  virtual ~ESunny9ContractSummary() throw() {}

  std::string esunny9ExchangeNo;
  int16_t esunny9CommodityType;
  std::string esunny9CommodityNo;
  std::string esunny9ContractNo;
  std::string esunny9ContractNo2;

  _ESunny9ContractSummary__isset __isset;

  void __set_esunny9ExchangeNo(const std::string& val) {
    esunny9ExchangeNo = val;
    __isset.esunny9ExchangeNo = true;
  }

  void __set_esunny9CommodityType(const int16_t val) {
    esunny9CommodityType = val;
    __isset.esunny9CommodityType = true;
  }

  void __set_esunny9CommodityNo(const std::string& val) {
    esunny9CommodityNo = val;
    __isset.esunny9CommodityNo = true;
  }

  void __set_esunny9ContractNo(const std::string& val) {
    esunny9ContractNo = val;
    __isset.esunny9ContractNo = true;
  }

  void __set_esunny9ContractNo2(const std::string& val) {
    esunny9ContractNo2 = val;
    __isset.esunny9ContractNo2 = true;
  }

  bool operator == (const ESunny9ContractSummary & rhs) const
  {
    if (__isset.esunny9ExchangeNo != rhs.__isset.esunny9ExchangeNo)
      return false;
    else if (__isset.esunny9ExchangeNo && !(esunny9ExchangeNo == rhs.esunny9ExchangeNo))
      return false;
    if (__isset.esunny9CommodityType != rhs.__isset.esunny9CommodityType)
      return false;
    else if (__isset.esunny9CommodityType && !(esunny9CommodityType == rhs.esunny9CommodityType))
      return false;
    if (__isset.esunny9CommodityNo != rhs.__isset.esunny9CommodityNo)
      return false;
    else if (__isset.esunny9CommodityNo && !(esunny9CommodityNo == rhs.esunny9CommodityNo))
      return false;
    if (__isset.esunny9ContractNo != rhs.__isset.esunny9ContractNo)
      return false;
    else if (__isset.esunny9ContractNo && !(esunny9ContractNo == rhs.esunny9ContractNo))
      return false;
    if (__isset.esunny9ContractNo2 != rhs.__isset.esunny9ContractNo2)
      return false;
    else if (__isset.esunny9ContractNo2 && !(esunny9ContractNo2 == rhs.esunny9ContractNo2))
      return false;
    return true;
  }
  bool operator != (const ESunny9ContractSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny9ContractSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny9ContractSummary &a, ESunny9ContractSummary &b);

typedef struct _ESunny9OrderInputExt__isset {
  _ESunny9OrderInputExt__isset() : contractSummary(false) {}
  bool contractSummary;
} _ESunny9OrderInputExt__isset;

class ESunny9OrderInputExt {
 public:

  static const char* ascii_fingerprint; // = "DE57D13395BE71C0CB7EDC59D8E7018F";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0x57,0xD1,0x33,0x95,0xBE,0x71,0xC0,0xCB,0x7E,0xDC,0x59,0xD8,0xE7,0x01,0x8F};

  ESunny9OrderInputExt() {
  }

  virtual ~ESunny9OrderInputExt() throw() {}

  ESunny9ContractSummary contractSummary;

  _ESunny9OrderInputExt__isset __isset;

  void __set_contractSummary(const ESunny9ContractSummary& val) {
    contractSummary = val;
    __isset.contractSummary = true;
  }

  bool operator == (const ESunny9OrderInputExt & rhs) const
  {
    if (__isset.contractSummary != rhs.__isset.contractSummary)
      return false;
    else if (__isset.contractSummary && !(contractSummary == rhs.contractSummary))
      return false;
    return true;
  }
  bool operator != (const ESunny9OrderInputExt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny9OrderInputExt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny9OrderInputExt &a, ESunny9OrderInputExt &b);

typedef struct _HostingExecOrderInputExt__isset {
  _HostingExecOrderInputExt__isset() : ctpInputExt(false), esunny3InputExt(false), esunny9InputExt(false) {}
  bool ctpInputExt;
  bool esunny3InputExt;
  bool esunny9InputExt;
} _HostingExecOrderInputExt__isset;

class HostingExecOrderInputExt {
 public:

  static const char* ascii_fingerprint; // = "56F88AFEF5C370339ACCC06307345745";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xF8,0x8A,0xFE,0xF5,0xC3,0x70,0x33,0x9A,0xCC,0xC0,0x63,0x07,0x34,0x57,0x45};

  HostingExecOrderInputExt() {
  }

  virtual ~HostingExecOrderInputExt() throw() {}

  CTPOrderInputExt ctpInputExt;
  ESunny3OrderInputExt esunny3InputExt;
  ESunny9OrderInputExt esunny9InputExt;

  _HostingExecOrderInputExt__isset __isset;

  void __set_ctpInputExt(const CTPOrderInputExt& val) {
    ctpInputExt = val;
    __isset.ctpInputExt = true;
  }

  void __set_esunny3InputExt(const ESunny3OrderInputExt& val) {
    esunny3InputExt = val;
    __isset.esunny3InputExt = true;
  }

  void __set_esunny9InputExt(const ESunny9OrderInputExt& val) {
    esunny9InputExt = val;
    __isset.esunny9InputExt = true;
  }

  bool operator == (const HostingExecOrderInputExt & rhs) const
  {
    if (__isset.ctpInputExt != rhs.__isset.ctpInputExt)
      return false;
    else if (__isset.ctpInputExt && !(ctpInputExt == rhs.ctpInputExt))
      return false;
    if (__isset.esunny3InputExt != rhs.__isset.esunny3InputExt)
      return false;
    else if (__isset.esunny3InputExt && !(esunny3InputExt == rhs.esunny3InputExt))
      return false;
    if (__isset.esunny9InputExt != rhs.__isset.esunny9InputExt)
      return false;
    else if (__isset.esunny9InputExt && !(esunny9InputExt == rhs.esunny9InputExt))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderInputExt &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderInputExt & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderInputExt &a, HostingExecOrderInputExt &b);

typedef struct _CTPDealID__isset {
  _CTPDealID__isset() : orderSysId(false), exchangeId(false) {}
  bool orderSysId;
  bool exchangeId;
} _CTPDealID__isset;

class CTPDealID {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  CTPDealID() : orderSysId(), exchangeId() {
  }

  virtual ~CTPDealID() throw() {}

  std::string orderSysId;
  std::string exchangeId;

  _CTPDealID__isset __isset;

  void __set_orderSysId(const std::string& val) {
    orderSysId = val;
    __isset.orderSysId = true;
  }

  void __set_exchangeId(const std::string& val) {
    exchangeId = val;
    __isset.exchangeId = true;
  }

  bool operator == (const CTPDealID & rhs) const
  {
    if (__isset.orderSysId != rhs.__isset.orderSysId)
      return false;
    else if (__isset.orderSysId && !(orderSysId == rhs.orderSysId))
      return false;
    if (__isset.exchangeId != rhs.__isset.exchangeId)
      return false;
    else if (__isset.exchangeId && !(exchangeId == rhs.exchangeId))
      return false;
    return true;
  }
  bool operator != (const CTPDealID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPDealID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPDealID &a, CTPDealID &b);

typedef struct _ESunny3DealID__isset {
  _ESunny3DealID__isset() : orderId(false) {}
  bool orderId;
} _ESunny3DealID__isset;

class ESunny3DealID {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  ESunny3DealID() : orderId(0) {
  }

  virtual ~ESunny3DealID() throw() {}

  int32_t orderId;

  _ESunny3DealID__isset __isset;

  void __set_orderId(const int32_t val) {
    orderId = val;
    __isset.orderId = true;
  }

  bool operator == (const ESunny3DealID & rhs) const
  {
    if (__isset.orderId != rhs.__isset.orderId)
      return false;
    else if (__isset.orderId && !(orderId == rhs.orderId))
      return false;
    return true;
  }
  bool operator != (const ESunny3DealID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny3DealID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny3DealID &a, ESunny3DealID &b);

typedef struct _ESunny9DealID__isset {
  _ESunny9DealID__isset() : orderNo(false) {}
  bool orderNo;
} _ESunny9DealID__isset;

class ESunny9DealID {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ESunny9DealID() : orderNo() {
  }

  virtual ~ESunny9DealID() throw() {}

  std::string orderNo;

  _ESunny9DealID__isset __isset;

  void __set_orderNo(const std::string& val) {
    orderNo = val;
    __isset.orderNo = true;
  }

  bool operator == (const ESunny9DealID & rhs) const
  {
    if (__isset.orderNo != rhs.__isset.orderNo)
      return false;
    else if (__isset.orderNo && !(orderNo == rhs.orderNo))
      return false;
    return true;
  }
  bool operator != (const ESunny9DealID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny9DealID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny9DealID &a, ESunny9DealID &b);

typedef struct _HostingExecOrderDealID__isset {
  _HostingExecOrderDealID__isset() : ctpDealId(false), esunny3DealId(false), esunny9DealId(false) {}
  bool ctpDealId;
  bool esunny3DealId;
  bool esunny9DealId;
} _HostingExecOrderDealID__isset;

class HostingExecOrderDealID {
 public:

  static const char* ascii_fingerprint; // = "BB835BBE1089C214DBFDED42BE6F3D93";
  static const uint8_t binary_fingerprint[16]; // = {0xBB,0x83,0x5B,0xBE,0x10,0x89,0xC2,0x14,0xDB,0xFD,0xED,0x42,0xBE,0x6F,0x3D,0x93};

  HostingExecOrderDealID() {
  }

  virtual ~HostingExecOrderDealID() throw() {}

  CTPDealID ctpDealId;
  ESunny3DealID esunny3DealId;
  ESunny9DealID esunny9DealId;

  _HostingExecOrderDealID__isset __isset;

  void __set_ctpDealId(const CTPDealID& val) {
    ctpDealId = val;
    __isset.ctpDealId = true;
  }

  void __set_esunny3DealId(const ESunny3DealID& val) {
    esunny3DealId = val;
    __isset.esunny3DealId = true;
  }

  void __set_esunny9DealId(const ESunny9DealID& val) {
    esunny9DealId = val;
    __isset.esunny9DealId = true;
  }

  bool operator == (const HostingExecOrderDealID & rhs) const
  {
    if (__isset.ctpDealId != rhs.__isset.ctpDealId)
      return false;
    else if (__isset.ctpDealId && !(ctpDealId == rhs.ctpDealId))
      return false;
    if (__isset.esunny3DealId != rhs.__isset.esunny3DealId)
      return false;
    else if (__isset.esunny3DealId && !(esunny3DealId == rhs.esunny3DealId))
      return false;
    if (__isset.esunny9DealId != rhs.__isset.esunny9DealId)
      return false;
    else if (__isset.esunny9DealId && !(esunny9DealId == rhs.esunny9DealId))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderDealID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderDealID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderDealID &a, HostingExecOrderDealID &b);

typedef struct _HostingExecOrderDealCTPInfo__isset {
  _HostingExecOrderDealCTPInfo__isset() : offsetFlag(false), tradeDirection(false) {}
  bool offsetFlag;
  bool tradeDirection;
} _HostingExecOrderDealCTPInfo__isset;

class HostingExecOrderDealCTPInfo {
 public:

  static const char* ascii_fingerprint; // = "5AD377B1094BE50585009735A35AB7BD";
  static const uint8_t binary_fingerprint[16]; // = {0x5A,0xD3,0x77,0xB1,0x09,0x4B,0xE5,0x05,0x85,0x00,0x97,0x35,0xA3,0x5A,0xB7,0xBD};

  HostingExecOrderDealCTPInfo() : offsetFlag((CTPCombOffsetFlagType::type)0), tradeDirection((CTPTradeDirection::type)0) {
  }

  virtual ~HostingExecOrderDealCTPInfo() throw() {}

  CTPCombOffsetFlagType::type offsetFlag;
  CTPTradeDirection::type tradeDirection;

  _HostingExecOrderDealCTPInfo__isset __isset;

  void __set_offsetFlag(const CTPCombOffsetFlagType::type val) {
    offsetFlag = val;
    __isset.offsetFlag = true;
  }

  void __set_tradeDirection(const CTPTradeDirection::type val) {
    tradeDirection = val;
    __isset.tradeDirection = true;
  }

  bool operator == (const HostingExecOrderDealCTPInfo & rhs) const
  {
    if (__isset.offsetFlag != rhs.__isset.offsetFlag)
      return false;
    else if (__isset.offsetFlag && !(offsetFlag == rhs.offsetFlag))
      return false;
    if (__isset.tradeDirection != rhs.__isset.tradeDirection)
      return false;
    else if (__isset.tradeDirection && !(tradeDirection == rhs.tradeDirection))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderDealCTPInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderDealCTPInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderDealCTPInfo &a, HostingExecOrderDealCTPInfo &b);

typedef struct _HostingExecOrderDealESunny9Info__isset {
  _HostingExecOrderDealESunny9Info__isset() : serverFlag(false), isAddOne(false) {}
  bool serverFlag;
  bool isAddOne;
} _HostingExecOrderDealESunny9Info__isset;

class HostingExecOrderDealESunny9Info {
 public:

  static const char* ascii_fingerprint; // = "E487362AE8D03F4BFCF95C46679FAF19";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x87,0x36,0x2A,0xE8,0xD0,0x3F,0x4B,0xFC,0xF9,0x5C,0x46,0x67,0x9F,0xAF,0x19};

  HostingExecOrderDealESunny9Info() : serverFlag(0), isAddOne(0) {
  }

  virtual ~HostingExecOrderDealESunny9Info() throw() {}

  int8_t serverFlag;
  int8_t isAddOne;

  _HostingExecOrderDealESunny9Info__isset __isset;

  void __set_serverFlag(const int8_t val) {
    serverFlag = val;
    __isset.serverFlag = true;
  }

  void __set_isAddOne(const int8_t val) {
    isAddOne = val;
    __isset.isAddOne = true;
  }

  bool operator == (const HostingExecOrderDealESunny9Info & rhs) const
  {
    if (__isset.serverFlag != rhs.__isset.serverFlag)
      return false;
    else if (__isset.serverFlag && !(serverFlag == rhs.serverFlag))
      return false;
    if (__isset.isAddOne != rhs.__isset.isAddOne)
      return false;
    else if (__isset.isAddOne && !(isAddOne == rhs.isAddOne))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderDealESunny9Info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderDealESunny9Info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderDealESunny9Info &a, HostingExecOrderDealESunny9Info &b);

typedef struct _HostingExecOrderDealInfo__isset {
  _HostingExecOrderDealInfo__isset() : dealId(false), orderInsertDateTime(false), ctpDealInfo(false), esunny9DealInfo(false) {}
  bool dealId;
  bool orderInsertDateTime;
  bool ctpDealInfo;
  bool esunny9DealInfo;
} _HostingExecOrderDealInfo__isset;

class HostingExecOrderDealInfo {
 public:

  static const char* ascii_fingerprint; // = "E8FB4EE29075BE8D10D89152B1713EFD";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0xFB,0x4E,0xE2,0x90,0x75,0xBE,0x8D,0x10,0xD8,0x91,0x52,0xB1,0x71,0x3E,0xFD};

  HostingExecOrderDealInfo() : orderInsertDateTime() {
  }

  virtual ~HostingExecOrderDealInfo() throw() {}

  HostingExecOrderDealID dealId;
  std::string orderInsertDateTime;
  HostingExecOrderDealCTPInfo ctpDealInfo;
  HostingExecOrderDealESunny9Info esunny9DealInfo;

  _HostingExecOrderDealInfo__isset __isset;

  void __set_dealId(const HostingExecOrderDealID& val) {
    dealId = val;
    __isset.dealId = true;
  }

  void __set_orderInsertDateTime(const std::string& val) {
    orderInsertDateTime = val;
    __isset.orderInsertDateTime = true;
  }

  void __set_ctpDealInfo(const HostingExecOrderDealCTPInfo& val) {
    ctpDealInfo = val;
    __isset.ctpDealInfo = true;
  }

  void __set_esunny9DealInfo(const HostingExecOrderDealESunny9Info& val) {
    esunny9DealInfo = val;
    __isset.esunny9DealInfo = true;
  }

  bool operator == (const HostingExecOrderDealInfo & rhs) const
  {
    if (__isset.dealId != rhs.__isset.dealId)
      return false;
    else if (__isset.dealId && !(dealId == rhs.dealId))
      return false;
    if (__isset.orderInsertDateTime != rhs.__isset.orderInsertDateTime)
      return false;
    else if (__isset.orderInsertDateTime && !(orderInsertDateTime == rhs.orderInsertDateTime))
      return false;
    if (__isset.ctpDealInfo != rhs.__isset.ctpDealInfo)
      return false;
    else if (__isset.ctpDealInfo && !(ctpDealInfo == rhs.ctpDealInfo))
      return false;
    if (__isset.esunny9DealInfo != rhs.__isset.esunny9DealInfo)
      return false;
    else if (__isset.esunny9DealInfo && !(esunny9DealInfo == rhs.esunny9DealInfo))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderDealInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderDealInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderDealInfo &a, HostingExecOrderDealInfo &b);

typedef struct _HostingUpsideNotifyStateInfo__isset {
  _HostingUpsideNotifyStateInfo__isset() : state(false), dealInfo(false), volumeTraded(false), volumeResting(false), tradeAveragePrice(false), statusUsefulMsg(false) {}
  bool state;
  bool dealInfo;
  bool volumeTraded;
  bool volumeResting;
  bool tradeAveragePrice;
  bool statusUsefulMsg;
} _HostingUpsideNotifyStateInfo__isset;

class HostingUpsideNotifyStateInfo {
 public:

  static const char* ascii_fingerprint; // = "D94763F9C5CFAFD64476D0A26B1D73B0";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0x47,0x63,0xF9,0xC5,0xCF,0xAF,0xD6,0x44,0x76,0xD0,0xA2,0x6B,0x1D,0x73,0xB0};

  HostingUpsideNotifyStateInfo() : state((HostingUpsideNotifyStateType::type)0), volumeTraded(0), volumeResting(0), tradeAveragePrice(0), statusUsefulMsg() {
  }

  virtual ~HostingUpsideNotifyStateInfo() throw() {}

  HostingUpsideNotifyStateType::type state;
  HostingExecOrderDealInfo dealInfo;
  int32_t volumeTraded;
  int32_t volumeResting;
  double tradeAveragePrice;
  std::string statusUsefulMsg;

  _HostingUpsideNotifyStateInfo__isset __isset;

  void __set_state(const HostingUpsideNotifyStateType::type val) {
    state = val;
    __isset.state = true;
  }

  void __set_dealInfo(const HostingExecOrderDealInfo& val) {
    dealInfo = val;
    __isset.dealInfo = true;
  }

  void __set_volumeTraded(const int32_t val) {
    volumeTraded = val;
    __isset.volumeTraded = true;
  }

  void __set_volumeResting(const int32_t val) {
    volumeResting = val;
    __isset.volumeResting = true;
  }

  void __set_tradeAveragePrice(const double val) {
    tradeAveragePrice = val;
    __isset.tradeAveragePrice = true;
  }

  void __set_statusUsefulMsg(const std::string& val) {
    statusUsefulMsg = val;
    __isset.statusUsefulMsg = true;
  }

  bool operator == (const HostingUpsideNotifyStateInfo & rhs) const
  {
    if (__isset.state != rhs.__isset.state)
      return false;
    else if (__isset.state && !(state == rhs.state))
      return false;
    if (__isset.dealInfo != rhs.__isset.dealInfo)
      return false;
    else if (__isset.dealInfo && !(dealInfo == rhs.dealInfo))
      return false;
    if (__isset.volumeTraded != rhs.__isset.volumeTraded)
      return false;
    else if (__isset.volumeTraded && !(volumeTraded == rhs.volumeTraded))
      return false;
    if (__isset.volumeResting != rhs.__isset.volumeResting)
      return false;
    else if (__isset.volumeResting && !(volumeResting == rhs.volumeResting))
      return false;
    if (__isset.tradeAveragePrice != rhs.__isset.tradeAveragePrice)
      return false;
    else if (__isset.tradeAveragePrice && !(tradeAveragePrice == rhs.tradeAveragePrice))
      return false;
    if (__isset.statusUsefulMsg != rhs.__isset.statusUsefulMsg)
      return false;
    else if (__isset.statusUsefulMsg && !(statusUsefulMsg == rhs.statusUsefulMsg))
      return false;
    return true;
  }
  bool operator != (const HostingUpsideNotifyStateInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingUpsideNotifyStateInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingUpsideNotifyStateInfo &a, HostingUpsideNotifyStateInfo &b);

typedef struct _HostingUpsideNotifyStateHandleInfo__isset {
  _HostingUpsideNotifyStateHandleInfo__isset() : stateInfo(false), eventCreateTimestampMs(false), handledTimestampMs(false), source(false) {}
  bool stateInfo;
  bool eventCreateTimestampMs;
  bool handledTimestampMs;
  bool source;
} _HostingUpsideNotifyStateHandleInfo__isset;

class HostingUpsideNotifyStateHandleInfo {
 public:

  static const char* ascii_fingerprint; // = "B4D844F022E04A47222F1BD131745BE7";
  static const uint8_t binary_fingerprint[16]; // = {0xB4,0xD8,0x44,0xF0,0x22,0xE0,0x4A,0x47,0x22,0x2F,0x1B,0xD1,0x31,0x74,0x5B,0xE7};

  HostingUpsideNotifyStateHandleInfo() : eventCreateTimestampMs(0), handledTimestampMs(0), source((HostingUpsideNotifyStateSource::type)0) {
  }

  virtual ~HostingUpsideNotifyStateHandleInfo() throw() {}

  HostingUpsideNotifyStateInfo stateInfo;
  int64_t eventCreateTimestampMs;
  int64_t handledTimestampMs;
  HostingUpsideNotifyStateSource::type source;

  _HostingUpsideNotifyStateHandleInfo__isset __isset;

  void __set_stateInfo(const HostingUpsideNotifyStateInfo& val) {
    stateInfo = val;
    __isset.stateInfo = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_handledTimestampMs(const int64_t val) {
    handledTimestampMs = val;
    __isset.handledTimestampMs = true;
  }

  void __set_source(const HostingUpsideNotifyStateSource::type val) {
    source = val;
    __isset.source = true;
  }

  bool operator == (const HostingUpsideNotifyStateHandleInfo & rhs) const
  {
    if (__isset.stateInfo != rhs.__isset.stateInfo)
      return false;
    else if (__isset.stateInfo && !(stateInfo == rhs.stateInfo))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.handledTimestampMs != rhs.__isset.handledTimestampMs)
      return false;
    else if (__isset.handledTimestampMs && !(handledTimestampMs == rhs.handledTimestampMs))
      return false;
    if (__isset.source != rhs.__isset.source)
      return false;
    else if (__isset.source && !(source == rhs.source))
      return false;
    return true;
  }
  bool operator != (const HostingUpsideNotifyStateHandleInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingUpsideNotifyStateHandleInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingUpsideNotifyStateHandleInfo &a, HostingUpsideNotifyStateHandleInfo &b);

typedef struct _HostingExecOrderTradeSummary__isset {
  _HostingExecOrderTradeSummary__isset() : upsideTradeTotalVolume(false), upsideTradeAveragePrice(false), upsideTradeRestingVolume(false), tradeListTotalVolume(false), tradeListAveragePrice(false) {}
  bool upsideTradeTotalVolume;
  bool upsideTradeAveragePrice;
  bool upsideTradeRestingVolume;
  bool tradeListTotalVolume;
  bool tradeListAveragePrice;
} _HostingExecOrderTradeSummary__isset;

class HostingExecOrderTradeSummary {
 public:

  static const char* ascii_fingerprint; // = "3E519528212B96F04194A73236EADD05";
  static const uint8_t binary_fingerprint[16]; // = {0x3E,0x51,0x95,0x28,0x21,0x2B,0x96,0xF0,0x41,0x94,0xA7,0x32,0x36,0xEA,0xDD,0x05};

  HostingExecOrderTradeSummary() : upsideTradeTotalVolume(0), upsideTradeAveragePrice(0), upsideTradeRestingVolume(0), tradeListTotalVolume(0), tradeListAveragePrice(0) {
  }

  virtual ~HostingExecOrderTradeSummary() throw() {}

  int32_t upsideTradeTotalVolume;
  double upsideTradeAveragePrice;
  int32_t upsideTradeRestingVolume;
  int32_t tradeListTotalVolume;
  double tradeListAveragePrice;

  _HostingExecOrderTradeSummary__isset __isset;

  void __set_upsideTradeTotalVolume(const int32_t val) {
    upsideTradeTotalVolume = val;
    __isset.upsideTradeTotalVolume = true;
  }

  void __set_upsideTradeAveragePrice(const double val) {
    upsideTradeAveragePrice = val;
    __isset.upsideTradeAveragePrice = true;
  }

  void __set_upsideTradeRestingVolume(const int32_t val) {
    upsideTradeRestingVolume = val;
    __isset.upsideTradeRestingVolume = true;
  }

  void __set_tradeListTotalVolume(const int32_t val) {
    tradeListTotalVolume = val;
    __isset.tradeListTotalVolume = true;
  }

  void __set_tradeListAveragePrice(const double val) {
    tradeListAveragePrice = val;
    __isset.tradeListAveragePrice = true;
  }

  bool operator == (const HostingExecOrderTradeSummary & rhs) const
  {
    if (__isset.upsideTradeTotalVolume != rhs.__isset.upsideTradeTotalVolume)
      return false;
    else if (__isset.upsideTradeTotalVolume && !(upsideTradeTotalVolume == rhs.upsideTradeTotalVolume))
      return false;
    if (__isset.upsideTradeAveragePrice != rhs.__isset.upsideTradeAveragePrice)
      return false;
    else if (__isset.upsideTradeAveragePrice && !(upsideTradeAveragePrice == rhs.upsideTradeAveragePrice))
      return false;
    if (__isset.upsideTradeRestingVolume != rhs.__isset.upsideTradeRestingVolume)
      return false;
    else if (__isset.upsideTradeRestingVolume && !(upsideTradeRestingVolume == rhs.upsideTradeRestingVolume))
      return false;
    if (__isset.tradeListTotalVolume != rhs.__isset.tradeListTotalVolume)
      return false;
    else if (__isset.tradeListTotalVolume && !(tradeListTotalVolume == rhs.tradeListTotalVolume))
      return false;
    if (__isset.tradeListAveragePrice != rhs.__isset.tradeListAveragePrice)
      return false;
    else if (__isset.tradeListAveragePrice && !(tradeListAveragePrice == rhs.tradeListAveragePrice))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrderTradeSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrderTradeSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrderTradeSummary &a, HostingExecOrderTradeSummary &b);

typedef struct _HostingExecOrder__isset {
  _HostingExecOrder__isset() : execOrderId(false), subUserId(false), orderDetail(false), contractSummary(false), accountSummary(false), upsideOrderRef(false), orderInputExt(false), subAccountId(false), stateInfo(false), revokeInfo(false), dealInfo(false), tradeSummary(false), notifyStateHandleInfos(false), relateExecOrderId(false), createTimestampMs(false), lastmodifyTimestampMs(false), version(false), source(false), ttlTimestampMs(false), verifyTimestampMs(false) {}
  bool execOrderId;
  bool subUserId;
  bool orderDetail;
  bool contractSummary;
  bool accountSummary;
  bool upsideOrderRef;
  bool orderInputExt;
  bool subAccountId;
  bool stateInfo;
  bool revokeInfo;
  bool dealInfo;
  bool tradeSummary;
  bool notifyStateHandleInfos;
  bool relateExecOrderId;
  bool createTimestampMs;
  bool lastmodifyTimestampMs;
  bool version;
  bool source;
  bool ttlTimestampMs;
  bool verifyTimestampMs;
} _HostingExecOrder__isset;

class HostingExecOrder {
 public:

  static const char* ascii_fingerprint; // = "2BFB642D4E2C9FDCBC00C7AB1041C232";
  static const uint8_t binary_fingerprint[16]; // = {0x2B,0xFB,0x64,0x2D,0x4E,0x2C,0x9F,0xDC,0xBC,0x00,0xC7,0xAB,0x10,0x41,0xC2,0x32};

  HostingExecOrder() : execOrderId(0), subUserId(0), subAccountId(0), relateExecOrderId(0), createTimestampMs(0), lastmodifyTimestampMs(0), version(0), source(), ttlTimestampMs(0), verifyTimestampMs(0) {
  }

  virtual ~HostingExecOrder() throw() {}

  int64_t execOrderId;
  int32_t subUserId;
  HostingExecOrderDetail orderDetail;
  HostingExecOrderContractSummary contractSummary;
  HostingExecOrderTradeAccountSummary accountSummary;
  HostingExecOrderRef upsideOrderRef;
  HostingExecOrderInputExt orderInputExt;
  int64_t subAccountId;
  HostingExecOrderStateInfo stateInfo;
  HostingExecOrderRevokeInfo revokeInfo;
  HostingExecOrderDealInfo dealInfo;
  HostingExecOrderTradeSummary tradeSummary;
  std::vector<HostingUpsideNotifyStateHandleInfo>  notifyStateHandleInfos;
  int64_t relateExecOrderId;
  int64_t createTimestampMs;
  int64_t lastmodifyTimestampMs;
  int32_t version;
  std::string source;
  int64_t ttlTimestampMs;
  int64_t verifyTimestampMs;

  _HostingExecOrder__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_orderDetail(const HostingExecOrderDetail& val) {
    orderDetail = val;
    __isset.orderDetail = true;
  }

  void __set_contractSummary(const HostingExecOrderContractSummary& val) {
    contractSummary = val;
    __isset.contractSummary = true;
  }

  void __set_accountSummary(const HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
    __isset.accountSummary = true;
  }

  void __set_upsideOrderRef(const HostingExecOrderRef& val) {
    upsideOrderRef = val;
    __isset.upsideOrderRef = true;
  }

  void __set_orderInputExt(const HostingExecOrderInputExt& val) {
    orderInputExt = val;
    __isset.orderInputExt = true;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  void __set_stateInfo(const HostingExecOrderStateInfo& val) {
    stateInfo = val;
    __isset.stateInfo = true;
  }

  void __set_revokeInfo(const HostingExecOrderRevokeInfo& val) {
    revokeInfo = val;
    __isset.revokeInfo = true;
  }

  void __set_dealInfo(const HostingExecOrderDealInfo& val) {
    dealInfo = val;
    __isset.dealInfo = true;
  }

  void __set_tradeSummary(const HostingExecOrderTradeSummary& val) {
    tradeSummary = val;
    __isset.tradeSummary = true;
  }

  void __set_notifyStateHandleInfos(const std::vector<HostingUpsideNotifyStateHandleInfo> & val) {
    notifyStateHandleInfos = val;
    __isset.notifyStateHandleInfos = true;
  }

  void __set_relateExecOrderId(const int64_t val) {
    relateExecOrderId = val;
    __isset.relateExecOrderId = true;
  }

  void __set_createTimestampMs(const int64_t val) {
    createTimestampMs = val;
    __isset.createTimestampMs = true;
  }

  void __set_lastmodifyTimestampMs(const int64_t val) {
    lastmodifyTimestampMs = val;
    __isset.lastmodifyTimestampMs = true;
  }

  void __set_version(const int32_t val) {
    version = val;
    __isset.version = true;
  }

  void __set_source(const std::string& val) {
    source = val;
    __isset.source = true;
  }

  void __set_ttlTimestampMs(const int64_t val) {
    ttlTimestampMs = val;
    __isset.ttlTimestampMs = true;
  }

  void __set_verifyTimestampMs(const int64_t val) {
    verifyTimestampMs = val;
    __isset.verifyTimestampMs = true;
  }

  bool operator == (const HostingExecOrder & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.orderDetail != rhs.__isset.orderDetail)
      return false;
    else if (__isset.orderDetail && !(orderDetail == rhs.orderDetail))
      return false;
    if (__isset.contractSummary != rhs.__isset.contractSummary)
      return false;
    else if (__isset.contractSummary && !(contractSummary == rhs.contractSummary))
      return false;
    if (__isset.accountSummary != rhs.__isset.accountSummary)
      return false;
    else if (__isset.accountSummary && !(accountSummary == rhs.accountSummary))
      return false;
    if (__isset.upsideOrderRef != rhs.__isset.upsideOrderRef)
      return false;
    else if (__isset.upsideOrderRef && !(upsideOrderRef == rhs.upsideOrderRef))
      return false;
    if (__isset.orderInputExt != rhs.__isset.orderInputExt)
      return false;
    else if (__isset.orderInputExt && !(orderInputExt == rhs.orderInputExt))
      return false;
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    if (__isset.stateInfo != rhs.__isset.stateInfo)
      return false;
    else if (__isset.stateInfo && !(stateInfo == rhs.stateInfo))
      return false;
    if (__isset.revokeInfo != rhs.__isset.revokeInfo)
      return false;
    else if (__isset.revokeInfo && !(revokeInfo == rhs.revokeInfo))
      return false;
    if (__isset.dealInfo != rhs.__isset.dealInfo)
      return false;
    else if (__isset.dealInfo && !(dealInfo == rhs.dealInfo))
      return false;
    if (__isset.tradeSummary != rhs.__isset.tradeSummary)
      return false;
    else if (__isset.tradeSummary && !(tradeSummary == rhs.tradeSummary))
      return false;
    if (__isset.notifyStateHandleInfos != rhs.__isset.notifyStateHandleInfos)
      return false;
    else if (__isset.notifyStateHandleInfos && !(notifyStateHandleInfos == rhs.notifyStateHandleInfos))
      return false;
    if (__isset.relateExecOrderId != rhs.__isset.relateExecOrderId)
      return false;
    else if (__isset.relateExecOrderId && !(relateExecOrderId == rhs.relateExecOrderId))
      return false;
    if (__isset.createTimestampMs != rhs.__isset.createTimestampMs)
      return false;
    else if (__isset.createTimestampMs && !(createTimestampMs == rhs.createTimestampMs))
      return false;
    if (__isset.lastmodifyTimestampMs != rhs.__isset.lastmodifyTimestampMs)
      return false;
    else if (__isset.lastmodifyTimestampMs && !(lastmodifyTimestampMs == rhs.lastmodifyTimestampMs))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.source != rhs.__isset.source)
      return false;
    else if (__isset.source && !(source == rhs.source))
      return false;
    if (__isset.ttlTimestampMs != rhs.__isset.ttlTimestampMs)
      return false;
    else if (__isset.ttlTimestampMs && !(ttlTimestampMs == rhs.ttlTimestampMs))
      return false;
    if (__isset.verifyTimestampMs != rhs.__isset.verifyTimestampMs)
      return false;
    else if (__isset.verifyTimestampMs && !(verifyTimestampMs == rhs.verifyTimestampMs))
      return false;
    return true;
  }
  bool operator != (const HostingExecOrder &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecOrder & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecOrder &a, HostingExecOrder &b);

typedef struct _CTPTradeID__isset {
  _CTPTradeID__isset() : tradeId(false) {}
  bool tradeId;
} _CTPTradeID__isset;

class CTPTradeID {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  CTPTradeID() : tradeId() {
  }

  virtual ~CTPTradeID() throw() {}

  std::string tradeId;

  _CTPTradeID__isset __isset;

  void __set_tradeId(const std::string& val) {
    tradeId = val;
    __isset.tradeId = true;
  }

  bool operator == (const CTPTradeID & rhs) const
  {
    if (__isset.tradeId != rhs.__isset.tradeId)
      return false;
    else if (__isset.tradeId && !(tradeId == rhs.tradeId))
      return false;
    return true;
  }
  bool operator != (const CTPTradeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CTPTradeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CTPTradeID &a, CTPTradeID &b);

typedef struct _ESunny3TradeID__isset {
  _ESunny3TradeID__isset() : matchNo(false) {}
  bool matchNo;
} _ESunny3TradeID__isset;

class ESunny3TradeID {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ESunny3TradeID() : matchNo() {
  }

  virtual ~ESunny3TradeID() throw() {}

  std::string matchNo;

  _ESunny3TradeID__isset __isset;

  void __set_matchNo(const std::string& val) {
    matchNo = val;
    __isset.matchNo = true;
  }

  bool operator == (const ESunny3TradeID & rhs) const
  {
    if (__isset.matchNo != rhs.__isset.matchNo)
      return false;
    else if (__isset.matchNo && !(matchNo == rhs.matchNo))
      return false;
    return true;
  }
  bool operator != (const ESunny3TradeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny3TradeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny3TradeID &a, ESunny3TradeID &b);

typedef struct _ESunny9TradeID__isset {
  _ESunny9TradeID__isset() : matchNo(false) {}
  bool matchNo;
} _ESunny9TradeID__isset;

class ESunny9TradeID {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ESunny9TradeID() : matchNo() {
  }

  virtual ~ESunny9TradeID() throw() {}

  std::string matchNo;

  _ESunny9TradeID__isset __isset;

  void __set_matchNo(const std::string& val) {
    matchNo = val;
    __isset.matchNo = true;
  }

  bool operator == (const ESunny9TradeID & rhs) const
  {
    if (__isset.matchNo != rhs.__isset.matchNo)
      return false;
    else if (__isset.matchNo && !(matchNo == rhs.matchNo))
      return false;
    return true;
  }
  bool operator != (const ESunny9TradeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ESunny9TradeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ESunny9TradeID &a, ESunny9TradeID &b);

typedef struct _HostingExecUpsideTradeID__isset {
  _HostingExecUpsideTradeID__isset() : ctpTradeId(false), esunny3TradeId(false), esunny9TradeId(false) {}
  bool ctpTradeId;
  bool esunny3TradeId;
  bool esunny9TradeId;
} _HostingExecUpsideTradeID__isset;

class HostingExecUpsideTradeID {
 public:

  static const char* ascii_fingerprint; // = "CC67F666C7DB8C386FAD90A42F0C6A03";
  static const uint8_t binary_fingerprint[16]; // = {0xCC,0x67,0xF6,0x66,0xC7,0xDB,0x8C,0x38,0x6F,0xAD,0x90,0xA4,0x2F,0x0C,0x6A,0x03};

  HostingExecUpsideTradeID() {
  }

  virtual ~HostingExecUpsideTradeID() throw() {}

  CTPTradeID ctpTradeId;
  ESunny3TradeID esunny3TradeId;
  ESunny9TradeID esunny9TradeId;

  _HostingExecUpsideTradeID__isset __isset;

  void __set_ctpTradeId(const CTPTradeID& val) {
    ctpTradeId = val;
    __isset.ctpTradeId = true;
  }

  void __set_esunny3TradeId(const ESunny3TradeID& val) {
    esunny3TradeId = val;
    __isset.esunny3TradeId = true;
  }

  void __set_esunny9TradeId(const ESunny9TradeID& val) {
    esunny9TradeId = val;
    __isset.esunny9TradeId = true;
  }

  bool operator == (const HostingExecUpsideTradeID & rhs) const
  {
    if (__isset.ctpTradeId != rhs.__isset.ctpTradeId)
      return false;
    else if (__isset.ctpTradeId && !(ctpTradeId == rhs.ctpTradeId))
      return false;
    if (__isset.esunny3TradeId != rhs.__isset.esunny3TradeId)
      return false;
    else if (__isset.esunny3TradeId && !(esunny3TradeId == rhs.esunny3TradeId))
      return false;
    if (__isset.esunny9TradeId != rhs.__isset.esunny9TradeId)
      return false;
    else if (__isset.esunny9TradeId && !(esunny9TradeId == rhs.esunny9TradeId))
      return false;
    return true;
  }
  bool operator != (const HostingExecUpsideTradeID &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecUpsideTradeID & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecUpsideTradeID &a, HostingExecUpsideTradeID &b);

typedef struct _HostingExecTrade__isset {
  _HostingExecTrade__isset() : execTradeId(false), execOrderId(false), subUserId(false), subAccountId(false), contractSummary(false), accountSummary(false), relatedTradeLegIds(false), tradePrice(false), tradeVolume(false), createTimestampMs(false), lastmodifyTimestampMs(false), relatedTradeLegPrices(false), orderTradeDirection(false), relatedTradeLegTradeDirections(false) {}
  bool execTradeId;
  bool execOrderId;
  bool subUserId;
  bool subAccountId;
  bool contractSummary;
  bool accountSummary;
  bool relatedTradeLegIds;
  bool tradePrice;
  bool tradeVolume;
  bool createTimestampMs;
  bool lastmodifyTimestampMs;
  bool relatedTradeLegPrices;
  bool orderTradeDirection;
  bool relatedTradeLegTradeDirections;
} _HostingExecTrade__isset;

class HostingExecTrade {
 public:

  static const char* ascii_fingerprint; // = "48450CB3EEEEB9DF77026913A4456770";
  static const uint8_t binary_fingerprint[16]; // = {0x48,0x45,0x0C,0xB3,0xEE,0xEE,0xB9,0xDF,0x77,0x02,0x69,0x13,0xA4,0x45,0x67,0x70};

  HostingExecTrade() : execTradeId(0), execOrderId(0), subUserId(0), subAccountId(0), tradePrice(0), tradeVolume(0), createTimestampMs(0), lastmodifyTimestampMs(0), orderTradeDirection((HostingExecOrderTradeDirection::type)0) {
  }

  virtual ~HostingExecTrade() throw() {}

  int64_t execTradeId;
  int64_t execOrderId;
  int32_t subUserId;
  int64_t subAccountId;
  HostingExecOrderContractSummary contractSummary;
  HostingExecOrderTradeAccountSummary accountSummary;
  std::vector<int64_t>  relatedTradeLegIds;
  double tradePrice;
  int32_t tradeVolume;
  int64_t createTimestampMs;
  int64_t lastmodifyTimestampMs;
  std::vector<double>  relatedTradeLegPrices;
  HostingExecOrderTradeDirection::type orderTradeDirection;
  std::vector<HostingExecTradeDirection::type>  relatedTradeLegTradeDirections;

  _HostingExecTrade__isset __isset;

  void __set_execTradeId(const int64_t val) {
    execTradeId = val;
    __isset.execTradeId = true;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  void __set_contractSummary(const HostingExecOrderContractSummary& val) {
    contractSummary = val;
    __isset.contractSummary = true;
  }

  void __set_accountSummary(const HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
    __isset.accountSummary = true;
  }

  void __set_relatedTradeLegIds(const std::vector<int64_t> & val) {
    relatedTradeLegIds = val;
    __isset.relatedTradeLegIds = true;
  }

  void __set_tradePrice(const double val) {
    tradePrice = val;
    __isset.tradePrice = true;
  }

  void __set_tradeVolume(const int32_t val) {
    tradeVolume = val;
    __isset.tradeVolume = true;
  }

  void __set_createTimestampMs(const int64_t val) {
    createTimestampMs = val;
    __isset.createTimestampMs = true;
  }

  void __set_lastmodifyTimestampMs(const int64_t val) {
    lastmodifyTimestampMs = val;
    __isset.lastmodifyTimestampMs = true;
  }

  void __set_relatedTradeLegPrices(const std::vector<double> & val) {
    relatedTradeLegPrices = val;
    __isset.relatedTradeLegPrices = true;
  }

  void __set_orderTradeDirection(const HostingExecOrderTradeDirection::type val) {
    orderTradeDirection = val;
    __isset.orderTradeDirection = true;
  }

  void __set_relatedTradeLegTradeDirections(const std::vector<HostingExecTradeDirection::type> & val) {
    relatedTradeLegTradeDirections = val;
    __isset.relatedTradeLegTradeDirections = true;
  }

  bool operator == (const HostingExecTrade & rhs) const
  {
    if (__isset.execTradeId != rhs.__isset.execTradeId)
      return false;
    else if (__isset.execTradeId && !(execTradeId == rhs.execTradeId))
      return false;
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    if (__isset.contractSummary != rhs.__isset.contractSummary)
      return false;
    else if (__isset.contractSummary && !(contractSummary == rhs.contractSummary))
      return false;
    if (__isset.accountSummary != rhs.__isset.accountSummary)
      return false;
    else if (__isset.accountSummary && !(accountSummary == rhs.accountSummary))
      return false;
    if (__isset.relatedTradeLegIds != rhs.__isset.relatedTradeLegIds)
      return false;
    else if (__isset.relatedTradeLegIds && !(relatedTradeLegIds == rhs.relatedTradeLegIds))
      return false;
    if (__isset.tradePrice != rhs.__isset.tradePrice)
      return false;
    else if (__isset.tradePrice && !(tradePrice == rhs.tradePrice))
      return false;
    if (__isset.tradeVolume != rhs.__isset.tradeVolume)
      return false;
    else if (__isset.tradeVolume && !(tradeVolume == rhs.tradeVolume))
      return false;
    if (__isset.createTimestampMs != rhs.__isset.createTimestampMs)
      return false;
    else if (__isset.createTimestampMs && !(createTimestampMs == rhs.createTimestampMs))
      return false;
    if (__isset.lastmodifyTimestampMs != rhs.__isset.lastmodifyTimestampMs)
      return false;
    else if (__isset.lastmodifyTimestampMs && !(lastmodifyTimestampMs == rhs.lastmodifyTimestampMs))
      return false;
    if (__isset.relatedTradeLegPrices != rhs.__isset.relatedTradeLegPrices)
      return false;
    else if (__isset.relatedTradeLegPrices && !(relatedTradeLegPrices == rhs.relatedTradeLegPrices))
      return false;
    if (__isset.orderTradeDirection != rhs.__isset.orderTradeDirection)
      return false;
    else if (__isset.orderTradeDirection && !(orderTradeDirection == rhs.orderTradeDirection))
      return false;
    if (__isset.relatedTradeLegTradeDirections != rhs.__isset.relatedTradeLegTradeDirections)
      return false;
    else if (__isset.relatedTradeLegTradeDirections && !(relatedTradeLegTradeDirections == rhs.relatedTradeLegTradeDirections))
      return false;
    return true;
  }
  bool operator != (const HostingExecTrade &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecTrade & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecTrade &a, HostingExecTrade &b);

typedef struct _HostingExecTradeLegInfo__isset {
  _HostingExecTradeLegInfo__isset() : legTradePrice(false), legTradeVolume(false), legTradeDateTime(false), legUpsideTradeId(false), legUpsideTradeDirection(false) {}
  bool legTradePrice;
  bool legTradeVolume;
  bool legTradeDateTime;
  bool legUpsideTradeId;
  bool legUpsideTradeDirection;
} _HostingExecTradeLegInfo__isset;

class HostingExecTradeLegInfo {
 public:

  static const char* ascii_fingerprint; // = "6782A99EAB805B72E5A6CC5F9B48FC3C";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x82,0xA9,0x9E,0xAB,0x80,0x5B,0x72,0xE5,0xA6,0xCC,0x5F,0x9B,0x48,0xFC,0x3C};

  HostingExecTradeLegInfo() : legTradePrice(0), legTradeVolume(0), legTradeDateTime(), legUpsideTradeDirection((HostingExecTradeDirection::type)0) {
  }

  virtual ~HostingExecTradeLegInfo() throw() {}

  double legTradePrice;
  int32_t legTradeVolume;
  std::string legTradeDateTime;
  HostingExecUpsideTradeID legUpsideTradeId;
  HostingExecTradeDirection::type legUpsideTradeDirection;

  _HostingExecTradeLegInfo__isset __isset;

  void __set_legTradePrice(const double val) {
    legTradePrice = val;
    __isset.legTradePrice = true;
  }

  void __set_legTradeVolume(const int32_t val) {
    legTradeVolume = val;
    __isset.legTradeVolume = true;
  }

  void __set_legTradeDateTime(const std::string& val) {
    legTradeDateTime = val;
    __isset.legTradeDateTime = true;
  }

  void __set_legUpsideTradeId(const HostingExecUpsideTradeID& val) {
    legUpsideTradeId = val;
    __isset.legUpsideTradeId = true;
  }

  void __set_legUpsideTradeDirection(const HostingExecTradeDirection::type val) {
    legUpsideTradeDirection = val;
    __isset.legUpsideTradeDirection = true;
  }

  bool operator == (const HostingExecTradeLegInfo & rhs) const
  {
    if (__isset.legTradePrice != rhs.__isset.legTradePrice)
      return false;
    else if (__isset.legTradePrice && !(legTradePrice == rhs.legTradePrice))
      return false;
    if (__isset.legTradeVolume != rhs.__isset.legTradeVolume)
      return false;
    else if (__isset.legTradeVolume && !(legTradeVolume == rhs.legTradeVolume))
      return false;
    if (__isset.legTradeDateTime != rhs.__isset.legTradeDateTime)
      return false;
    else if (__isset.legTradeDateTime && !(legTradeDateTime == rhs.legTradeDateTime))
      return false;
    if (__isset.legUpsideTradeId != rhs.__isset.legUpsideTradeId)
      return false;
    else if (__isset.legUpsideTradeId && !(legUpsideTradeId == rhs.legUpsideTradeId))
      return false;
    if (__isset.legUpsideTradeDirection != rhs.__isset.legUpsideTradeDirection)
      return false;
    else if (__isset.legUpsideTradeDirection && !(legUpsideTradeDirection == rhs.legUpsideTradeDirection))
      return false;
    return true;
  }
  bool operator != (const HostingExecTradeLegInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecTradeLegInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecTradeLegInfo &a, HostingExecTradeLegInfo &b);

typedef struct _HostingExecTradeLeg__isset {
  _HostingExecTradeLeg__isset() : execTradeLegId(false), execOrderId(false), relatedExecTradeId(false), legIndex(false), legContractSummary(false), tradeLegInfo(false), accountSummary(false), subUserId(false), createTimestampMs(false), lastmodifyTimestampMs(false), subAccountId(false) {}
  bool execTradeLegId;
  bool execOrderId;
  bool relatedExecTradeId;
  bool legIndex;
  bool legContractSummary;
  bool tradeLegInfo;
  bool accountSummary;
  bool subUserId;
  bool createTimestampMs;
  bool lastmodifyTimestampMs;
  bool subAccountId;
} _HostingExecTradeLeg__isset;

class HostingExecTradeLeg {
 public:

  static const char* ascii_fingerprint; // = "9643F20FF955018CAD841629689D7AE2";
  static const uint8_t binary_fingerprint[16]; // = {0x96,0x43,0xF2,0x0F,0xF9,0x55,0x01,0x8C,0xAD,0x84,0x16,0x29,0x68,0x9D,0x7A,0xE2};

  HostingExecTradeLeg() : execTradeLegId(0), execOrderId(0), relatedExecTradeId(0), legIndex(0), subUserId(0), createTimestampMs(0), lastmodifyTimestampMs(0), subAccountId(0) {
  }

  virtual ~HostingExecTradeLeg() throw() {}

  int64_t execTradeLegId;
  int64_t execOrderId;
  int64_t relatedExecTradeId;
  int16_t legIndex;
  HostingExecOrderLegContractSummary legContractSummary;
  HostingExecTradeLegInfo tradeLegInfo;
  HostingExecOrderTradeAccountSummary accountSummary;
  int32_t subUserId;
  int64_t createTimestampMs;
  int64_t lastmodifyTimestampMs;
  int64_t subAccountId;

  _HostingExecTradeLeg__isset __isset;

  void __set_execTradeLegId(const int64_t val) {
    execTradeLegId = val;
    __isset.execTradeLegId = true;
  }

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_relatedExecTradeId(const int64_t val) {
    relatedExecTradeId = val;
    __isset.relatedExecTradeId = true;
  }

  void __set_legIndex(const int16_t val) {
    legIndex = val;
    __isset.legIndex = true;
  }

  void __set_legContractSummary(const HostingExecOrderLegContractSummary& val) {
    legContractSummary = val;
    __isset.legContractSummary = true;
  }

  void __set_tradeLegInfo(const HostingExecTradeLegInfo& val) {
    tradeLegInfo = val;
    __isset.tradeLegInfo = true;
  }

  void __set_accountSummary(const HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
    __isset.accountSummary = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  void __set_createTimestampMs(const int64_t val) {
    createTimestampMs = val;
    __isset.createTimestampMs = true;
  }

  void __set_lastmodifyTimestampMs(const int64_t val) {
    lastmodifyTimestampMs = val;
    __isset.lastmodifyTimestampMs = true;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  bool operator == (const HostingExecTradeLeg & rhs) const
  {
    if (__isset.execTradeLegId != rhs.__isset.execTradeLegId)
      return false;
    else if (__isset.execTradeLegId && !(execTradeLegId == rhs.execTradeLegId))
      return false;
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.relatedExecTradeId != rhs.__isset.relatedExecTradeId)
      return false;
    else if (__isset.relatedExecTradeId && !(relatedExecTradeId == rhs.relatedExecTradeId))
      return false;
    if (__isset.legIndex != rhs.__isset.legIndex)
      return false;
    else if (__isset.legIndex && !(legIndex == rhs.legIndex))
      return false;
    if (__isset.legContractSummary != rhs.__isset.legContractSummary)
      return false;
    else if (__isset.legContractSummary && !(legContractSummary == rhs.legContractSummary))
      return false;
    if (__isset.tradeLegInfo != rhs.__isset.tradeLegInfo)
      return false;
    else if (__isset.tradeLegInfo && !(tradeLegInfo == rhs.tradeLegInfo))
      return false;
    if (__isset.accountSummary != rhs.__isset.accountSummary)
      return false;
    else if (__isset.accountSummary && !(accountSummary == rhs.accountSummary))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    if (__isset.createTimestampMs != rhs.__isset.createTimestampMs)
      return false;
    else if (__isset.createTimestampMs && !(createTimestampMs == rhs.createTimestampMs))
      return false;
    if (__isset.lastmodifyTimestampMs != rhs.__isset.lastmodifyTimestampMs)
      return false;
    else if (__isset.lastmodifyTimestampMs && !(lastmodifyTimestampMs == rhs.lastmodifyTimestampMs))
      return false;
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    return true;
  }
  bool operator != (const HostingExecTradeLeg &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingExecTradeLeg & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingExecTradeLeg &a, HostingExecTradeLeg &b);

}}} // namespace

#endif
