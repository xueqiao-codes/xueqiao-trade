/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef contract_TYPES_H
#define contract_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"
#include "contract_standard_types.h"


namespace xueqiao { namespace contract {

struct CommodityMapFileStatus {
  enum type {
    IN_USE = 0,
    NO_USE = 1
  };
};

extern const std::map<int, const char*> _CommodityMapFileStatus_VALUES_TO_NAMES;

struct SyncTaskType {
  enum type {
    COMMODITY = 0,
    CONTRACT = 1,
    COMMODITY_MAPPING = 2
  };
};

extern const std::map<int, const char*> _SyncTaskType_VALUES_TO_NAMES;

typedef struct _CommodityMapFileInfo__isset {
  _CommodityMapFileInfo__isset() : commodityMapFile(false), techPlatform(false), brokerEntryId(false), fileMD5(false), path(false), url(false), version(false), fileInfoId(false), status(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool commodityMapFile;
  bool techPlatform;
  bool brokerEntryId;
  bool fileMD5;
  bool path;
  bool url;
  bool version;
  bool fileInfoId;
  bool status;
  bool createTimestamp;
  bool lastModityTimestamp;
} _CommodityMapFileInfo__isset;

class CommodityMapFileInfo {
 public:

  static const char* ascii_fingerprint; // = "6DD1F7077C76728FAF1012A0C3D2D80B";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0xD1,0xF7,0x07,0x7C,0x76,0x72,0x8F,0xAF,0x10,0x12,0xA0,0xC3,0xD2,0xD8,0x0B};

  CommodityMapFileInfo() : commodityMapFile(), techPlatform(( ::xueqiao::contract::standard::TechPlatform::type)0), brokerEntryId(0), fileMD5(), path(), url(), version(0), fileInfoId(0), status((CommodityMapFileStatus::type)0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~CommodityMapFileInfo() throw() {}

  std::string commodityMapFile;
   ::xueqiao::contract::standard::TechPlatform::type techPlatform;
  int32_t brokerEntryId;
  std::string fileMD5;
  std::string path;
  std::string url;
  int32_t version;
  int32_t fileInfoId;
  CommodityMapFileStatus::type status;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _CommodityMapFileInfo__isset __isset;

  void __set_commodityMapFile(const std::string& val) {
    commodityMapFile = val;
    __isset.commodityMapFile = true;
  }

  void __set_techPlatform(const  ::xueqiao::contract::standard::TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_brokerEntryId(const int32_t val) {
    brokerEntryId = val;
    __isset.brokerEntryId = true;
  }

  void __set_fileMD5(const std::string& val) {
    fileMD5 = val;
    __isset.fileMD5 = true;
  }

  void __set_path(const std::string& val) {
    path = val;
    __isset.path = true;
  }

  void __set_url(const std::string& val) {
    url = val;
    __isset.url = true;
  }

  void __set_version(const int32_t val) {
    version = val;
    __isset.version = true;
  }

  void __set_fileInfoId(const int32_t val) {
    fileInfoId = val;
    __isset.fileInfoId = true;
  }

  void __set_status(const CommodityMapFileStatus::type val) {
    status = val;
    __isset.status = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const CommodityMapFileInfo & rhs) const
  {
    if (__isset.commodityMapFile != rhs.__isset.commodityMapFile)
      return false;
    else if (__isset.commodityMapFile && !(commodityMapFile == rhs.commodityMapFile))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.brokerEntryId != rhs.__isset.brokerEntryId)
      return false;
    else if (__isset.brokerEntryId && !(brokerEntryId == rhs.brokerEntryId))
      return false;
    if (__isset.fileMD5 != rhs.__isset.fileMD5)
      return false;
    else if (__isset.fileMD5 && !(fileMD5 == rhs.fileMD5))
      return false;
    if (__isset.path != rhs.__isset.path)
      return false;
    else if (__isset.path && !(path == rhs.path))
      return false;
    if (__isset.url != rhs.__isset.url)
      return false;
    else if (__isset.url && !(url == rhs.url))
      return false;
    if (__isset.version != rhs.__isset.version)
      return false;
    else if (__isset.version && !(version == rhs.version))
      return false;
    if (__isset.fileInfoId != rhs.__isset.fileInfoId)
      return false;
    else if (__isset.fileInfoId && !(fileInfoId == rhs.fileInfoId))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const CommodityMapFileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommodityMapFileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommodityMapFileInfo &a, CommodityMapFileInfo &b);

typedef struct _CommodityMapFileInfoPage__isset {
  _CommodityMapFileInfoPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _CommodityMapFileInfoPage__isset;

class CommodityMapFileInfoPage {
 public:

  static const char* ascii_fingerprint; // = "6D52040EB063DFC3E3F3AE0BBF40ED5F";
  static const uint8_t binary_fingerprint[16]; // = {0x6D,0x52,0x04,0x0E,0xB0,0x63,0xDF,0xC3,0xE3,0xF3,0xAE,0x0B,0xBF,0x40,0xED,0x5F};

  CommodityMapFileInfoPage() : total(0) {
  }

  virtual ~CommodityMapFileInfoPage() throw() {}

  int32_t total;
  std::vector<CommodityMapFileInfo>  page;

  _CommodityMapFileInfoPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<CommodityMapFileInfo> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const CommodityMapFileInfoPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const CommodityMapFileInfoPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommodityMapFileInfoPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommodityMapFileInfoPage &a, CommodityMapFileInfoPage &b);

typedef struct _ReqCommodityMapFileInfoOption__isset {
  _ReqCommodityMapFileInfoOption__isset() : brokerEntryIds(false), techPlatform(false), fileInfoIds(false), status(false) {}
  bool brokerEntryIds;
  bool techPlatform;
  bool fileInfoIds;
  bool status;
} _ReqCommodityMapFileInfoOption__isset;

class ReqCommodityMapFileInfoOption {
 public:

  static const char* ascii_fingerprint; // = "6ADC8564BBFC1EF5E2A6C058B8025040";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xDC,0x85,0x64,0xBB,0xFC,0x1E,0xF5,0xE2,0xA6,0xC0,0x58,0xB8,0x02,0x50,0x40};

  ReqCommodityMapFileInfoOption() : techPlatform(( ::xueqiao::contract::standard::TechPlatform::type)0), status((CommodityMapFileStatus::type)0) {
  }

  virtual ~ReqCommodityMapFileInfoOption() throw() {}

  std::vector<int32_t>  brokerEntryIds;
   ::xueqiao::contract::standard::TechPlatform::type techPlatform;
  std::vector<int32_t>  fileInfoIds;
  CommodityMapFileStatus::type status;

  _ReqCommodityMapFileInfoOption__isset __isset;

  void __set_brokerEntryIds(const std::vector<int32_t> & val) {
    brokerEntryIds = val;
    __isset.brokerEntryIds = true;
  }

  void __set_techPlatform(const  ::xueqiao::contract::standard::TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_fileInfoIds(const std::vector<int32_t> & val) {
    fileInfoIds = val;
    __isset.fileInfoIds = true;
  }

  void __set_status(const CommodityMapFileStatus::type val) {
    status = val;
    __isset.status = true;
  }

  bool operator == (const ReqCommodityMapFileInfoOption & rhs) const
  {
    if (__isset.brokerEntryIds != rhs.__isset.brokerEntryIds)
      return false;
    else if (__isset.brokerEntryIds && !(brokerEntryIds == rhs.brokerEntryIds))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.fileInfoIds != rhs.__isset.fileInfoIds)
      return false;
    else if (__isset.fileInfoIds && !(fileInfoIds == rhs.fileInfoIds))
      return false;
    if (__isset.status != rhs.__isset.status)
      return false;
    else if (__isset.status && !(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const ReqCommodityMapFileInfoOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqCommodityMapFileInfoOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqCommodityMapFileInfoOption &a, ReqCommodityMapFileInfoOption &b);

typedef struct _SyncMappingTask__isset {
  _SyncMappingTask__isset() : taskId(false), syncTargetId(false), techPlatformEnv(false), taskType(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool taskId;
  bool syncTargetId;
  bool techPlatformEnv;
  bool taskType;
  bool createTimestamp;
  bool lastModityTimestamp;
} _SyncMappingTask__isset;

class SyncMappingTask {
 public:

  static const char* ascii_fingerprint; // = "60CB21953841BFE052859F6522A32067";
  static const uint8_t binary_fingerprint[16]; // = {0x60,0xCB,0x21,0x95,0x38,0x41,0xBF,0xE0,0x52,0x85,0x9F,0x65,0x22,0xA3,0x20,0x67};

  SyncMappingTask() : taskId(0), syncTargetId(0), techPlatformEnv(( ::xueqiao::contract::standard::TechPlatformEnv::type)0), taskType((SyncTaskType::type)0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~SyncMappingTask() throw() {}

  int32_t taskId;
  int32_t syncTargetId;
   ::xueqiao::contract::standard::TechPlatformEnv::type techPlatformEnv;
  SyncTaskType::type taskType;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _SyncMappingTask__isset __isset;

  void __set_taskId(const int32_t val) {
    taskId = val;
    __isset.taskId = true;
  }

  void __set_syncTargetId(const int32_t val) {
    syncTargetId = val;
    __isset.syncTargetId = true;
  }

  void __set_techPlatformEnv(const  ::xueqiao::contract::standard::TechPlatformEnv::type val) {
    techPlatformEnv = val;
    __isset.techPlatformEnv = true;
  }

  void __set_taskType(const SyncTaskType::type val) {
    taskType = val;
    __isset.taskType = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const SyncMappingTask & rhs) const
  {
    if (__isset.taskId != rhs.__isset.taskId)
      return false;
    else if (__isset.taskId && !(taskId == rhs.taskId))
      return false;
    if (__isset.syncTargetId != rhs.__isset.syncTargetId)
      return false;
    else if (__isset.syncTargetId && !(syncTargetId == rhs.syncTargetId))
      return false;
    if (__isset.techPlatformEnv != rhs.__isset.techPlatformEnv)
      return false;
    else if (__isset.techPlatformEnv && !(techPlatformEnv == rhs.techPlatformEnv))
      return false;
    if (__isset.taskType != rhs.__isset.taskType)
      return false;
    else if (__isset.taskType && !(taskType == rhs.taskType))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const SyncMappingTask &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncMappingTask & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncMappingTask &a, SyncMappingTask &b);

typedef struct _SyncMappingTaskPage__isset {
  _SyncMappingTaskPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _SyncMappingTaskPage__isset;

class SyncMappingTaskPage {
 public:

  static const char* ascii_fingerprint; // = "C7F9E0690F9573983EC6F910E2C32D9B";
  static const uint8_t binary_fingerprint[16]; // = {0xC7,0xF9,0xE0,0x69,0x0F,0x95,0x73,0x98,0x3E,0xC6,0xF9,0x10,0xE2,0xC3,0x2D,0x9B};

  SyncMappingTaskPage() : total(0) {
  }

  virtual ~SyncMappingTaskPage() throw() {}

  int32_t total;
  std::vector<SyncMappingTask>  page;

  _SyncMappingTaskPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<SyncMappingTask> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const SyncMappingTaskPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const SyncMappingTaskPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncMappingTaskPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncMappingTaskPage &a, SyncMappingTaskPage &b);

typedef struct _ReqSyncMappingTaskOption__isset {
  _ReqSyncMappingTaskOption__isset() : taskIds(false), targetIds(false), techPlatformEnv(false), taskType(false) {}
  bool taskIds;
  bool targetIds;
  bool techPlatformEnv;
  bool taskType;
} _ReqSyncMappingTaskOption__isset;

class ReqSyncMappingTaskOption {
 public:

  static const char* ascii_fingerprint; // = "E5B1E9E913FCB9C2DA05C4CB37DFB5AA";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0xB1,0xE9,0xE9,0x13,0xFC,0xB9,0xC2,0xDA,0x05,0xC4,0xCB,0x37,0xDF,0xB5,0xAA};

  ReqSyncMappingTaskOption() : techPlatformEnv(( ::xueqiao::contract::standard::TechPlatformEnv::type)0), taskType((SyncTaskType::type)0) {
  }

  virtual ~ReqSyncMappingTaskOption() throw() {}

  std::vector<int32_t>  taskIds;
  std::vector<int32_t>  targetIds;
   ::xueqiao::contract::standard::TechPlatformEnv::type techPlatformEnv;
  SyncTaskType::type taskType;

  _ReqSyncMappingTaskOption__isset __isset;

  void __set_taskIds(const std::vector<int32_t> & val) {
    taskIds = val;
    __isset.taskIds = true;
  }

  void __set_targetIds(const std::vector<int32_t> & val) {
    targetIds = val;
    __isset.targetIds = true;
  }

  void __set_techPlatformEnv(const  ::xueqiao::contract::standard::TechPlatformEnv::type val) {
    techPlatformEnv = val;
    __isset.techPlatformEnv = true;
  }

  void __set_taskType(const SyncTaskType::type val) {
    taskType = val;
    __isset.taskType = true;
  }

  bool operator == (const ReqSyncMappingTaskOption & rhs) const
  {
    if (__isset.taskIds != rhs.__isset.taskIds)
      return false;
    else if (__isset.taskIds && !(taskIds == rhs.taskIds))
      return false;
    if (__isset.targetIds != rhs.__isset.targetIds)
      return false;
    else if (__isset.targetIds && !(targetIds == rhs.targetIds))
      return false;
    if (__isset.techPlatformEnv != rhs.__isset.techPlatformEnv)
      return false;
    else if (__isset.techPlatformEnv && !(techPlatformEnv == rhs.techPlatformEnv))
      return false;
    if (__isset.taskType != rhs.__isset.taskType)
      return false;
    else if (__isset.taskType && !(taskType == rhs.taskType))
      return false;
    return true;
  }
  bool operator != (const ReqSyncMappingTaskOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqSyncMappingTaskOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqSyncMappingTaskOption &a, ReqSyncMappingTaskOption &b);

typedef struct _TechPlatformCommodity__isset {
  _TechPlatformCommodity__isset() : sledCommodityId(false), exchange(false), commodityType(false), commodityCode(false), relateCommodityCodes(false), tradeCurrency(false), timezone(false), contractSize(false), tickSize(false), denominator(false), cmbDirect(false), commodityState(false), engName(false), cnName(false), tcName(false), deliveryMode(false), deliveryDays(false), maxSingleOrderVol(false), maxHoldVol(false), commissionCalculateMode(false), openCloseFee(false), marginCalculateMode(false), initialMargin(false), maintenanceMargin(false), sellInitialMargin(false), sellMaintenanceMargin(false), lockMargin(false), techPlatform(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool sledCommodityId;
  bool exchange;
  bool commodityType;
  bool commodityCode;
  bool relateCommodityCodes;
  bool tradeCurrency;
  bool timezone;
  bool contractSize;
  bool tickSize;
  bool denominator;
  bool cmbDirect;
  bool commodityState;
  bool engName;
  bool cnName;
  bool tcName;
  bool deliveryMode;
  bool deliveryDays;
  bool maxSingleOrderVol;
  bool maxHoldVol;
  bool commissionCalculateMode;
  bool openCloseFee;
  bool marginCalculateMode;
  bool initialMargin;
  bool maintenanceMargin;
  bool sellInitialMargin;
  bool sellMaintenanceMargin;
  bool lockMargin;
  bool techPlatform;
  bool createTimestamp;
  bool lastModityTimestamp;
} _TechPlatformCommodity__isset;

class TechPlatformCommodity {
 public:

  static const char* ascii_fingerprint; // = "51F49726DC1113A90173E83A03E714D0";
  static const uint8_t binary_fingerprint[16]; // = {0x51,0xF4,0x97,0x26,0xDC,0x11,0x13,0xA9,0x01,0x73,0xE8,0x3A,0x03,0xE7,0x14,0xD0};

  TechPlatformCommodity() : sledCommodityId(0), exchange(), commodityType(), commodityCode(), tradeCurrency(), timezone(), contractSize(0), tickSize(0), denominator(0), cmbDirect(( ::xueqiao::contract::standard::CmbDirect::type)0), commodityState(( ::xueqiao::contract::standard::CommodityState::type)0), engName(), cnName(), tcName(), deliveryMode(( ::xueqiao::contract::standard::DeliveryMode::type)0), deliveryDays(0), maxSingleOrderVol(0), maxHoldVol(0), commissionCalculateMode(( ::xueqiao::contract::standard::CalculateMode::type)0), openCloseFee(0), marginCalculateMode(( ::xueqiao::contract::standard::CalculateMode::type)0), initialMargin(0), maintenanceMargin(0), sellInitialMargin(0), sellMaintenanceMargin(0), lockMargin(0), techPlatform(( ::xueqiao::contract::standard::TechPlatform::type)0), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~TechPlatformCommodity() throw() {}

  int32_t sledCommodityId;
  std::string exchange;
  std::string commodityType;
  std::string commodityCode;
  std::vector<std::string>  relateCommodityCodes;
  std::string tradeCurrency;
  std::string timezone;
  double contractSize;
  double tickSize;
  int32_t denominator;
   ::xueqiao::contract::standard::CmbDirect::type cmbDirect;
   ::xueqiao::contract::standard::CommodityState::type commodityState;
  std::string engName;
  std::string cnName;
  std::string tcName;
   ::xueqiao::contract::standard::DeliveryMode::type deliveryMode;
  int32_t deliveryDays;
  int32_t maxSingleOrderVol;
  int32_t maxHoldVol;
   ::xueqiao::contract::standard::CalculateMode::type commissionCalculateMode;
  double openCloseFee;
   ::xueqiao::contract::standard::CalculateMode::type marginCalculateMode;
  double initialMargin;
  double maintenanceMargin;
  double sellInitialMargin;
  double sellMaintenanceMargin;
  double lockMargin;
   ::xueqiao::contract::standard::TechPlatform::type techPlatform;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _TechPlatformCommodity__isset __isset;

  void __set_sledCommodityId(const int32_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_exchange(const std::string& val) {
    exchange = val;
    __isset.exchange = true;
  }

  void __set_commodityType(const std::string& val) {
    commodityType = val;
    __isset.commodityType = true;
  }

  void __set_commodityCode(const std::string& val) {
    commodityCode = val;
    __isset.commodityCode = true;
  }

  void __set_relateCommodityCodes(const std::vector<std::string> & val) {
    relateCommodityCodes = val;
    __isset.relateCommodityCodes = true;
  }

  void __set_tradeCurrency(const std::string& val) {
    tradeCurrency = val;
    __isset.tradeCurrency = true;
  }

  void __set_timezone(const std::string& val) {
    timezone = val;
    __isset.timezone = true;
  }

  void __set_contractSize(const double val) {
    contractSize = val;
    __isset.contractSize = true;
  }

  void __set_tickSize(const double val) {
    tickSize = val;
    __isset.tickSize = true;
  }

  void __set_denominator(const int32_t val) {
    denominator = val;
    __isset.denominator = true;
  }

  void __set_cmbDirect(const  ::xueqiao::contract::standard::CmbDirect::type val) {
    cmbDirect = val;
    __isset.cmbDirect = true;
  }

  void __set_commodityState(const  ::xueqiao::contract::standard::CommodityState::type val) {
    commodityState = val;
    __isset.commodityState = true;
  }

  void __set_engName(const std::string& val) {
    engName = val;
    __isset.engName = true;
  }

  void __set_cnName(const std::string& val) {
    cnName = val;
    __isset.cnName = true;
  }

  void __set_tcName(const std::string& val) {
    tcName = val;
    __isset.tcName = true;
  }

  void __set_deliveryMode(const  ::xueqiao::contract::standard::DeliveryMode::type val) {
    deliveryMode = val;
    __isset.deliveryMode = true;
  }

  void __set_deliveryDays(const int32_t val) {
    deliveryDays = val;
    __isset.deliveryDays = true;
  }

  void __set_maxSingleOrderVol(const int32_t val) {
    maxSingleOrderVol = val;
    __isset.maxSingleOrderVol = true;
  }

  void __set_maxHoldVol(const int32_t val) {
    maxHoldVol = val;
    __isset.maxHoldVol = true;
  }

  void __set_commissionCalculateMode(const  ::xueqiao::contract::standard::CalculateMode::type val) {
    commissionCalculateMode = val;
    __isset.commissionCalculateMode = true;
  }

  void __set_openCloseFee(const double val) {
    openCloseFee = val;
    __isset.openCloseFee = true;
  }

  void __set_marginCalculateMode(const  ::xueqiao::contract::standard::CalculateMode::type val) {
    marginCalculateMode = val;
    __isset.marginCalculateMode = true;
  }

  void __set_initialMargin(const double val) {
    initialMargin = val;
    __isset.initialMargin = true;
  }

  void __set_maintenanceMargin(const double val) {
    maintenanceMargin = val;
    __isset.maintenanceMargin = true;
  }

  void __set_sellInitialMargin(const double val) {
    sellInitialMargin = val;
    __isset.sellInitialMargin = true;
  }

  void __set_sellMaintenanceMargin(const double val) {
    sellMaintenanceMargin = val;
    __isset.sellMaintenanceMargin = true;
  }

  void __set_lockMargin(const double val) {
    lockMargin = val;
    __isset.lockMargin = true;
  }

  void __set_techPlatform(const  ::xueqiao::contract::standard::TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const TechPlatformCommodity & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.exchange != rhs.__isset.exchange)
      return false;
    else if (__isset.exchange && !(exchange == rhs.exchange))
      return false;
    if (__isset.commodityType != rhs.__isset.commodityType)
      return false;
    else if (__isset.commodityType && !(commodityType == rhs.commodityType))
      return false;
    if (__isset.commodityCode != rhs.__isset.commodityCode)
      return false;
    else if (__isset.commodityCode && !(commodityCode == rhs.commodityCode))
      return false;
    if (__isset.relateCommodityCodes != rhs.__isset.relateCommodityCodes)
      return false;
    else if (__isset.relateCommodityCodes && !(relateCommodityCodes == rhs.relateCommodityCodes))
      return false;
    if (__isset.tradeCurrency != rhs.__isset.tradeCurrency)
      return false;
    else if (__isset.tradeCurrency && !(tradeCurrency == rhs.tradeCurrency))
      return false;
    if (__isset.timezone != rhs.__isset.timezone)
      return false;
    else if (__isset.timezone && !(timezone == rhs.timezone))
      return false;
    if (__isset.contractSize != rhs.__isset.contractSize)
      return false;
    else if (__isset.contractSize && !(contractSize == rhs.contractSize))
      return false;
    if (__isset.tickSize != rhs.__isset.tickSize)
      return false;
    else if (__isset.tickSize && !(tickSize == rhs.tickSize))
      return false;
    if (__isset.denominator != rhs.__isset.denominator)
      return false;
    else if (__isset.denominator && !(denominator == rhs.denominator))
      return false;
    if (__isset.cmbDirect != rhs.__isset.cmbDirect)
      return false;
    else if (__isset.cmbDirect && !(cmbDirect == rhs.cmbDirect))
      return false;
    if (__isset.commodityState != rhs.__isset.commodityState)
      return false;
    else if (__isset.commodityState && !(commodityState == rhs.commodityState))
      return false;
    if (__isset.engName != rhs.__isset.engName)
      return false;
    else if (__isset.engName && !(engName == rhs.engName))
      return false;
    if (__isset.cnName != rhs.__isset.cnName)
      return false;
    else if (__isset.cnName && !(cnName == rhs.cnName))
      return false;
    if (__isset.tcName != rhs.__isset.tcName)
      return false;
    else if (__isset.tcName && !(tcName == rhs.tcName))
      return false;
    if (__isset.deliveryMode != rhs.__isset.deliveryMode)
      return false;
    else if (__isset.deliveryMode && !(deliveryMode == rhs.deliveryMode))
      return false;
    if (__isset.deliveryDays != rhs.__isset.deliveryDays)
      return false;
    else if (__isset.deliveryDays && !(deliveryDays == rhs.deliveryDays))
      return false;
    if (__isset.maxSingleOrderVol != rhs.__isset.maxSingleOrderVol)
      return false;
    else if (__isset.maxSingleOrderVol && !(maxSingleOrderVol == rhs.maxSingleOrderVol))
      return false;
    if (__isset.maxHoldVol != rhs.__isset.maxHoldVol)
      return false;
    else if (__isset.maxHoldVol && !(maxHoldVol == rhs.maxHoldVol))
      return false;
    if (__isset.commissionCalculateMode != rhs.__isset.commissionCalculateMode)
      return false;
    else if (__isset.commissionCalculateMode && !(commissionCalculateMode == rhs.commissionCalculateMode))
      return false;
    if (__isset.openCloseFee != rhs.__isset.openCloseFee)
      return false;
    else if (__isset.openCloseFee && !(openCloseFee == rhs.openCloseFee))
      return false;
    if (__isset.marginCalculateMode != rhs.__isset.marginCalculateMode)
      return false;
    else if (__isset.marginCalculateMode && !(marginCalculateMode == rhs.marginCalculateMode))
      return false;
    if (__isset.initialMargin != rhs.__isset.initialMargin)
      return false;
    else if (__isset.initialMargin && !(initialMargin == rhs.initialMargin))
      return false;
    if (__isset.maintenanceMargin != rhs.__isset.maintenanceMargin)
      return false;
    else if (__isset.maintenanceMargin && !(maintenanceMargin == rhs.maintenanceMargin))
      return false;
    if (__isset.sellInitialMargin != rhs.__isset.sellInitialMargin)
      return false;
    else if (__isset.sellInitialMargin && !(sellInitialMargin == rhs.sellInitialMargin))
      return false;
    if (__isset.sellMaintenanceMargin != rhs.__isset.sellMaintenanceMargin)
      return false;
    else if (__isset.sellMaintenanceMargin && !(sellMaintenanceMargin == rhs.sellMaintenanceMargin))
      return false;
    if (__isset.lockMargin != rhs.__isset.lockMargin)
      return false;
    else if (__isset.lockMargin && !(lockMargin == rhs.lockMargin))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const TechPlatformCommodity &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TechPlatformCommodity & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TechPlatformCommodity &a, TechPlatformCommodity &b);

typedef struct _TechPlatformCommodityPage__isset {
  _TechPlatformCommodityPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _TechPlatformCommodityPage__isset;

class TechPlatformCommodityPage {
 public:

  static const char* ascii_fingerprint; // = "75D62B2BD37805774DD0784B31047437";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0xD6,0x2B,0x2B,0xD3,0x78,0x05,0x77,0x4D,0xD0,0x78,0x4B,0x31,0x04,0x74,0x37};

  TechPlatformCommodityPage() : total(0) {
  }

  virtual ~TechPlatformCommodityPage() throw() {}

  int32_t total;
  std::vector<TechPlatformCommodity>  page;

  _TechPlatformCommodityPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<TechPlatformCommodity> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const TechPlatformCommodityPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const TechPlatformCommodityPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TechPlatformCommodityPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TechPlatformCommodityPage &a, TechPlatformCommodityPage &b);

typedef struct _ReqTechPlatformCommodityOption__isset {
  _ReqTechPlatformCommodityOption__isset() : techPlatformCommodityIds(false), sledCommodityIds(false), techPlatform(false) {}
  bool techPlatformCommodityIds;
  bool sledCommodityIds;
  bool techPlatform;
} _ReqTechPlatformCommodityOption__isset;

class ReqTechPlatformCommodityOption {
 public:

  static const char* ascii_fingerprint; // = "315534714801362F91C396FE09ADBFCE";
  static const uint8_t binary_fingerprint[16]; // = {0x31,0x55,0x34,0x71,0x48,0x01,0x36,0x2F,0x91,0xC3,0x96,0xFE,0x09,0xAD,0xBF,0xCE};

  ReqTechPlatformCommodityOption() : techPlatform(( ::xueqiao::contract::standard::TechPlatform::type)0) {
  }

  virtual ~ReqTechPlatformCommodityOption() throw() {}

  std::vector<int32_t>  techPlatformCommodityIds;
  std::vector<int32_t>  sledCommodityIds;
   ::xueqiao::contract::standard::TechPlatform::type techPlatform;

  _ReqTechPlatformCommodityOption__isset __isset;

  void __set_techPlatformCommodityIds(const std::vector<int32_t> & val) {
    techPlatformCommodityIds = val;
    __isset.techPlatformCommodityIds = true;
  }

  void __set_sledCommodityIds(const std::vector<int32_t> & val) {
    sledCommodityIds = val;
    __isset.sledCommodityIds = true;
  }

  void __set_techPlatform(const  ::xueqiao::contract::standard::TechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  bool operator == (const ReqTechPlatformCommodityOption & rhs) const
  {
    if (__isset.techPlatformCommodityIds != rhs.__isset.techPlatformCommodityIds)
      return false;
    else if (__isset.techPlatformCommodityIds && !(techPlatformCommodityIds == rhs.techPlatformCommodityIds))
      return false;
    if (__isset.sledCommodityIds != rhs.__isset.sledCommodityIds)
      return false;
    else if (__isset.sledCommodityIds && !(sledCommodityIds == rhs.sledCommodityIds))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    return true;
  }
  bool operator != (const ReqTechPlatformCommodityOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqTechPlatformCommodityOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqTechPlatformCommodityOption &a, ReqTechPlatformCommodityOption &b);

typedef struct _ContractVersion__isset {
  _ContractVersion__isset() : versionId(false), fileMD5(false), filePath(false), createTimestamp(false), lastModityTimestamp(false) {}
  bool versionId;
  bool fileMD5;
  bool filePath;
  bool createTimestamp;
  bool lastModityTimestamp;
} _ContractVersion__isset;

class ContractVersion {
 public:

  static const char* ascii_fingerprint; // = "4D797E018594391851F591D6C0C06F31";
  static const uint8_t binary_fingerprint[16]; // = {0x4D,0x79,0x7E,0x01,0x85,0x94,0x39,0x18,0x51,0xF5,0x91,0xD6,0xC0,0xC0,0x6F,0x31};

  ContractVersion() : versionId(0), fileMD5(), filePath(), createTimestamp(0), lastModityTimestamp(0) {
  }

  virtual ~ContractVersion() throw() {}

  int32_t versionId;
  std::string fileMD5;
  std::string filePath;
  int64_t createTimestamp;
  int64_t lastModityTimestamp;

  _ContractVersion__isset __isset;

  void __set_versionId(const int32_t val) {
    versionId = val;
    __isset.versionId = true;
  }

  void __set_fileMD5(const std::string& val) {
    fileMD5 = val;
    __isset.fileMD5 = true;
  }

  void __set_filePath(const std::string& val) {
    filePath = val;
    __isset.filePath = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lastModityTimestamp(const int64_t val) {
    lastModityTimestamp = val;
    __isset.lastModityTimestamp = true;
  }

  bool operator == (const ContractVersion & rhs) const
  {
    if (__isset.versionId != rhs.__isset.versionId)
      return false;
    else if (__isset.versionId && !(versionId == rhs.versionId))
      return false;
    if (__isset.fileMD5 != rhs.__isset.fileMD5)
      return false;
    else if (__isset.fileMD5 && !(fileMD5 == rhs.fileMD5))
      return false;
    if (__isset.filePath != rhs.__isset.filePath)
      return false;
    else if (__isset.filePath && !(filePath == rhs.filePath))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lastModityTimestamp != rhs.__isset.lastModityTimestamp)
      return false;
    else if (__isset.lastModityTimestamp && !(lastModityTimestamp == rhs.lastModityTimestamp))
      return false;
    return true;
  }
  bool operator != (const ContractVersion &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractVersion & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractVersion &a, ContractVersion &b);

typedef struct _ContractVersionPage__isset {
  _ContractVersionPage__isset() : total(false), page(false) {}
  bool total;
  bool page;
} _ContractVersionPage__isset;

class ContractVersionPage {
 public:

  static const char* ascii_fingerprint; // = "01913D4C8789EDA492129FF11D48883B";
  static const uint8_t binary_fingerprint[16]; // = {0x01,0x91,0x3D,0x4C,0x87,0x89,0xED,0xA4,0x92,0x12,0x9F,0xF1,0x1D,0x48,0x88,0x3B};

  ContractVersionPage() : total(0) {
  }

  virtual ~ContractVersionPage() throw() {}

  int32_t total;
  std::vector<ContractVersion>  page;

  _ContractVersionPage__isset __isset;

  void __set_total(const int32_t val) {
    total = val;
    __isset.total = true;
  }

  void __set_page(const std::vector<ContractVersion> & val) {
    page = val;
    __isset.page = true;
  }

  bool operator == (const ContractVersionPage & rhs) const
  {
    if (__isset.total != rhs.__isset.total)
      return false;
    else if (__isset.total && !(total == rhs.total))
      return false;
    if (__isset.page != rhs.__isset.page)
      return false;
    else if (__isset.page && !(page == rhs.page))
      return false;
    return true;
  }
  bool operator != (const ContractVersionPage &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractVersionPage & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractVersionPage &a, ContractVersionPage &b);

typedef struct _ReqContractVersionOption__isset {
  _ReqContractVersionOption__isset() : versionId(false), latest(false) {}
  bool versionId;
  bool latest;
} _ReqContractVersionOption__isset;

class ReqContractVersionOption {
 public:

  static const char* ascii_fingerprint; // = "66B98FA31E5D1C70A3C9D6A8C5E65F30";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xB9,0x8F,0xA3,0x1E,0x5D,0x1C,0x70,0xA3,0xC9,0xD6,0xA8,0xC5,0xE6,0x5F,0x30};

  ReqContractVersionOption() : versionId(0), latest(0) {
  }

  virtual ~ReqContractVersionOption() throw() {}

  int32_t versionId;
  bool latest;

  _ReqContractVersionOption__isset __isset;

  void __set_versionId(const int32_t val) {
    versionId = val;
    __isset.versionId = true;
  }

  void __set_latest(const bool val) {
    latest = val;
    __isset.latest = true;
  }

  bool operator == (const ReqContractVersionOption & rhs) const
  {
    if (__isset.versionId != rhs.__isset.versionId)
      return false;
    else if (__isset.versionId && !(versionId == rhs.versionId))
      return false;
    if (__isset.latest != rhs.__isset.latest)
      return false;
    else if (__isset.latest && !(latest == rhs.latest))
      return false;
    return true;
  }
  bool operator != (const ReqContractVersionOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReqContractVersionOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ReqContractVersionOption &a, ReqContractVersionOption &b);

typedef struct _RemoveContractVersionOption__isset {
  _RemoveContractVersionOption__isset() : versionId(false), all(false) {}
  bool versionId;
  bool all;
} _RemoveContractVersionOption__isset;

class RemoveContractVersionOption {
 public:

  static const char* ascii_fingerprint; // = "66B98FA31E5D1C70A3C9D6A8C5E65F30";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xB9,0x8F,0xA3,0x1E,0x5D,0x1C,0x70,0xA3,0xC9,0xD6,0xA8,0xC5,0xE6,0x5F,0x30};

  RemoveContractVersionOption() : versionId(0), all(0) {
  }

  virtual ~RemoveContractVersionOption() throw() {}

  int32_t versionId;
  bool all;

  _RemoveContractVersionOption__isset __isset;

  void __set_versionId(const int32_t val) {
    versionId = val;
    __isset.versionId = true;
  }

  void __set_all(const bool val) {
    all = val;
    __isset.all = true;
  }

  bool operator == (const RemoveContractVersionOption & rhs) const
  {
    if (__isset.versionId != rhs.__isset.versionId)
      return false;
    else if (__isset.versionId && !(versionId == rhs.versionId))
      return false;
    if (__isset.all != rhs.__isset.all)
      return false;
    else if (__isset.all && !(all == rhs.all))
      return false;
    return true;
  }
  bool operator != (const RemoveContractVersionOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoveContractVersionOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RemoveContractVersionOption &a, RemoveContractVersionOption &b);

typedef struct _DbLockingInfo__isset {
  _DbLockingInfo__isset() : isLocked(false), lockedBy(false), startLockedTimestamp(false), createTimestamp(false), lockArea(false) {}
  bool isLocked;
  bool lockedBy;
  bool startLockedTimestamp;
  bool createTimestamp;
  bool lockArea;
} _DbLockingInfo__isset;

class DbLockingInfo {
 public:

  static const char* ascii_fingerprint; // = "912BF9B953A764D3D0E7B602BC112821";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x2B,0xF9,0xB9,0x53,0xA7,0x64,0xD3,0xD0,0xE7,0xB6,0x02,0xBC,0x11,0x28,0x21};

  DbLockingInfo() : isLocked(0), lockedBy(), startLockedTimestamp(0), createTimestamp(0), lockArea() {
  }

  virtual ~DbLockingInfo() throw() {}

  bool isLocked;
  std::string lockedBy;
  int64_t startLockedTimestamp;
  int64_t createTimestamp;
  std::string lockArea;

  _DbLockingInfo__isset __isset;

  void __set_isLocked(const bool val) {
    isLocked = val;
    __isset.isLocked = true;
  }

  void __set_lockedBy(const std::string& val) {
    lockedBy = val;
    __isset.lockedBy = true;
  }

  void __set_startLockedTimestamp(const int64_t val) {
    startLockedTimestamp = val;
    __isset.startLockedTimestamp = true;
  }

  void __set_createTimestamp(const int64_t val) {
    createTimestamp = val;
    __isset.createTimestamp = true;
  }

  void __set_lockArea(const std::string& val) {
    lockArea = val;
    __isset.lockArea = true;
  }

  bool operator == (const DbLockingInfo & rhs) const
  {
    if (__isset.isLocked != rhs.__isset.isLocked)
      return false;
    else if (__isset.isLocked && !(isLocked == rhs.isLocked))
      return false;
    if (__isset.lockedBy != rhs.__isset.lockedBy)
      return false;
    else if (__isset.lockedBy && !(lockedBy == rhs.lockedBy))
      return false;
    if (__isset.startLockedTimestamp != rhs.__isset.startLockedTimestamp)
      return false;
    else if (__isset.startLockedTimestamp && !(startLockedTimestamp == rhs.startLockedTimestamp))
      return false;
    if (__isset.createTimestamp != rhs.__isset.createTimestamp)
      return false;
    else if (__isset.createTimestamp && !(createTimestamp == rhs.createTimestamp))
      return false;
    if (__isset.lockArea != rhs.__isset.lockArea)
      return false;
    else if (__isset.lockArea && !(lockArea == rhs.lockArea))
      return false;
    return true;
  }
  bool operator != (const DbLockingInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DbLockingInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DbLockingInfo &a, DbLockingInfo &b);

}} // namespace

#endif
