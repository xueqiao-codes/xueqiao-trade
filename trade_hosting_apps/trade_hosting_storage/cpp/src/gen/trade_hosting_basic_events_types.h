/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_basic_events_TYPES_H
#define trade_hosting_basic_events_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "trade_hosting_basic_types.h"


namespace xueqiao { namespace trade { namespace hosting { namespace events {

struct HostingEventType {
  enum type {
    HOSTING_INITED = 1,
    HOSTING_DESTORIED = 2
  };
};

extern const std::map<int, const char*> _HostingEventType_VALUES_TO_NAMES;

struct UserEventType {
  enum type {
    USER_ADD = 1,
    USER_REMOVE = 2,
    USER_INFO_UPDATED = 3,
    USER_ALL_CLEARD = 4,
    USER_STATE_CHANGED = 5
  };
};

extern const std::map<int, const char*> _UserEventType_VALUES_TO_NAMES;

struct ComposeViewEventType {
  enum type {
    COMPOSE_VIEW_ADDED = 1,
    COMPOSE_VIEW_SUBSCRIBED = 2,
    COMPOSE_VIEW_UNSUBSCRIBD = 3,
    COMPOSE_VIEW_DELETED = 4,
    COMPOSE_VIEW_ALL_CLEARED = 5
  };
};

extern const std::map<int, const char*> _ComposeViewEventType_VALUES_TO_NAMES;

struct TradeAccountEventType {
  enum type {
    TRADE_ACCOUNT_ADDED = 1,
    TRADE_ACCOUNT_INFO_UPDATED = 2,
    TRADE_ACCOUNT_STATE_CHANGED = 3,
    TRADE_ACCOUNT_DELETED = 4,
    TRADE_ACCOUNT_ACCESS_ENTRY_UPDATE = 5,
    TRADE_ACCOUNT_ACCESS_STATE_CHANGED = 6,
    TRADE_ACCOUNT_ALL_CLEARD = 7,
    TRADE_ACCOUNT_ACCESS_DESCRIPTION_CHANGED = 8
  };
};

extern const std::map<int, const char*> _TradeAccountEventType_VALUES_TO_NAMES;

struct OrderRouteTreeEventType {
  enum type {
    ORDER_ROUTE_TREE_CHANGED = 1,
    ORDER_ROUTE_TREE_ALL_CLEARD = 2
  };
};

extern const std::map<int, const char*> _OrderRouteTreeEventType_VALUES_TO_NAMES;

struct SubAccountRelatedInfoChangedEventType {
  enum type {
    RELATED_INFO_ALL_CLEARED = 1,
    RELATED_INFO_CHANGED = 2
  };
};

extern const std::map<int, const char*> _SubAccountRelatedInfoChangedEventType_VALUES_TO_NAMES;

struct ExecOrderGuardType {
  enum type {
    GUARD_ORDER_CREATED = 0,
    GUARD_ORDER_VERIFY_SUCCESS = 1,
    GUARD_ORDER_VERIFY_FAILED = 2,
    GUARD_ORDER_RUNNING = 3,
    GUARD_ORDER_EXPIRED = 4,
    GUARD_ORDER_TRADE_LIST_CHANGED = 5
  };
};

extern const std::map<int, const char*> _ExecOrderGuardType_VALUES_TO_NAMES;

typedef struct _HostingEvent__isset {
  _HostingEvent__isset() : type(false) {}
  bool type;
} _HostingEvent__isset;

class HostingEvent {
 public:

  static const char* ascii_fingerprint; // = "8C1740BBF54FD399631A4549952454DB";
  static const uint8_t binary_fingerprint[16]; // = {0x8C,0x17,0x40,0xBB,0xF5,0x4F,0xD3,0x99,0x63,0x1A,0x45,0x49,0x95,0x24,0x54,0xDB};

  HostingEvent() : type((HostingEventType::type)0) {
  }

  virtual ~HostingEvent() throw() {}

  HostingEventType::type type;

  _HostingEvent__isset __isset;

  void __set_type(const HostingEventType::type val) {
    type = val;
    __isset.type = true;
  }

  bool operator == (const HostingEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const HostingEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HostingEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(HostingEvent &a, HostingEvent &b);

typedef struct _UserEvent__isset {
  _UserEvent__isset() : type(false), subUserId(false) {}
  bool type;
  bool subUserId;
} _UserEvent__isset;

class UserEvent {
 public:

  static const char* ascii_fingerprint; // = "75971A588272C97A80EBFD5BA7E9F503";
  static const uint8_t binary_fingerprint[16]; // = {0x75,0x97,0x1A,0x58,0x82,0x72,0xC9,0x7A,0x80,0xEB,0xFD,0x5B,0xA7,0xE9,0xF5,0x03};

  UserEvent() : type((UserEventType::type)0), subUserId(0) {
  }

  virtual ~UserEvent() throw() {}

  UserEventType::type type;
  int32_t subUserId;

  _UserEvent__isset __isset;

  void __set_type(const UserEventType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  bool operator == (const UserEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    return true;
  }
  bool operator != (const UserEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UserEvent &a, UserEvent &b);

typedef struct _LandingStatusChangedEvent__isset {
  _LandingStatusChangedEvent__isset() : subUserId(false) {}
  bool subUserId;
} _LandingStatusChangedEvent__isset;

class LandingStatusChangedEvent {
 public:

  static const char* ascii_fingerprint; // = "E7A96B151330359E84C0A3AC91BCBACD";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

  LandingStatusChangedEvent() : subUserId(0) {
  }

  virtual ~LandingStatusChangedEvent() throw() {}

  int32_t subUserId;

  _LandingStatusChangedEvent__isset __isset;

  void __set_subUserId(const int32_t val) {
    subUserId = val;
    __isset.subUserId = true;
  }

  bool operator == (const LandingStatusChangedEvent & rhs) const
  {
    if (__isset.subUserId != rhs.__isset.subUserId)
      return false;
    else if (__isset.subUserId && !(subUserId == rhs.subUserId))
      return false;
    return true;
  }
  bool operator != (const LandingStatusChangedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LandingStatusChangedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LandingStatusChangedEvent &a, LandingStatusChangedEvent &b);

typedef struct _ComposeViewEvent__isset {
  _ComposeViewEvent__isset() : type(false), composeGraphId(false), subUserIds(false) {}
  bool type;
  bool composeGraphId;
  bool subUserIds;
} _ComposeViewEvent__isset;

class ComposeViewEvent {
 public:

  static const char* ascii_fingerprint; // = "0EC40F846F0F7F90E4C6D46C67F2EBB3";
  static const uint8_t binary_fingerprint[16]; // = {0x0E,0xC4,0x0F,0x84,0x6F,0x0F,0x7F,0x90,0xE4,0xC6,0xD4,0x6C,0x67,0xF2,0xEB,0xB3};

  ComposeViewEvent() : type((ComposeViewEventType::type)0), composeGraphId(0) {
  }

  virtual ~ComposeViewEvent() throw() {}

  ComposeViewEventType::type type;
  int64_t composeGraphId;
  std::set<int32_t>  subUserIds;

  _ComposeViewEvent__isset __isset;

  void __set_type(const ComposeViewEventType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_composeGraphId(const int64_t val) {
    composeGraphId = val;
    __isset.composeGraphId = true;
  }

  void __set_subUserIds(const std::set<int32_t> & val) {
    subUserIds = val;
    __isset.subUserIds = true;
  }

  bool operator == (const ComposeViewEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.composeGraphId != rhs.__isset.composeGraphId)
      return false;
    else if (__isset.composeGraphId && !(composeGraphId == rhs.composeGraphId))
      return false;
    if (__isset.subUserIds != rhs.__isset.subUserIds)
      return false;
    else if (__isset.subUserIds && !(subUserIds == rhs.subUserIds))
      return false;
    return true;
  }
  bool operator != (const ComposeViewEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ComposeViewEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ComposeViewEvent &a, ComposeViewEvent &b);

typedef struct _ContractVersionChangedEvent__isset {
  _ContractVersionChangedEvent__isset() : eventTimestampMs(false) {}
  bool eventTimestampMs;
} _ContractVersionChangedEvent__isset;

class ContractVersionChangedEvent {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  ContractVersionChangedEvent() : eventTimestampMs(0) {
  }

  virtual ~ContractVersionChangedEvent() throw() {}

  int64_t eventTimestampMs;

  _ContractVersionChangedEvent__isset __isset;

  void __set_eventTimestampMs(const int64_t val) {
    eventTimestampMs = val;
    __isset.eventTimestampMs = true;
  }

  bool operator == (const ContractVersionChangedEvent & rhs) const
  {
    if (__isset.eventTimestampMs != rhs.__isset.eventTimestampMs)
      return false;
    else if (__isset.eventTimestampMs && !(eventTimestampMs == rhs.eventTimestampMs))
      return false;
    return true;
  }
  bool operator != (const ContractVersionChangedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ContractVersionChangedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ContractVersionChangedEvent &a, ContractVersionChangedEvent &b);

typedef struct _TradeAccountEvent__isset {
  _TradeAccountEvent__isset() : type(false), tradeAccountId(false), deletedTradeAccount(false) {}
  bool type;
  bool tradeAccountId;
  bool deletedTradeAccount;
} _TradeAccountEvent__isset;

class TradeAccountEvent {
 public:

  static const char* ascii_fingerprint; // = "3C0E4F50A4DE6E42E2A6729704B0616B";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0x0E,0x4F,0x50,0xA4,0xDE,0x6E,0x42,0xE2,0xA6,0x72,0x97,0x04,0xB0,0x61,0x6B};

  TradeAccountEvent() : type((TradeAccountEventType::type)0), tradeAccountId(0) {
  }

  virtual ~TradeAccountEvent() throw() {}

  TradeAccountEventType::type type;
  int64_t tradeAccountId;
   ::xueqiao::trade::hosting::HostingTradeAccount deletedTradeAccount;

  _TradeAccountEvent__isset __isset;

  void __set_type(const TradeAccountEventType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
    __isset.tradeAccountId = true;
  }

  void __set_deletedTradeAccount(const  ::xueqiao::trade::hosting::HostingTradeAccount& val) {
    deletedTradeAccount = val;
    __isset.deletedTradeAccount = true;
  }

  bool operator == (const TradeAccountEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.tradeAccountId != rhs.__isset.tradeAccountId)
      return false;
    else if (__isset.tradeAccountId && !(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (__isset.deletedTradeAccount != rhs.__isset.deletedTradeAccount)
      return false;
    else if (__isset.deletedTradeAccount && !(deletedTradeAccount == rhs.deletedTradeAccount))
      return false;
    return true;
  }
  bool operator != (const TradeAccountEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeAccountEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TradeAccountEvent &a, TradeAccountEvent &b);

typedef struct _OrderRouteTreeEvent__isset {
  _OrderRouteTreeEvent__isset() : type(false), subAccountId(false) {}
  bool type;
  bool subAccountId;
} _OrderRouteTreeEvent__isset;

class OrderRouteTreeEvent {
 public:

  static const char* ascii_fingerprint; // = "1A99749538798976FB3A4910CD73729D";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x99,0x74,0x95,0x38,0x79,0x89,0x76,0xFB,0x3A,0x49,0x10,0xCD,0x73,0x72,0x9D};

  OrderRouteTreeEvent() : type((OrderRouteTreeEventType::type)0), subAccountId(0) {
  }

  virtual ~OrderRouteTreeEvent() throw() {}

  OrderRouteTreeEventType::type type;
  int64_t subAccountId;

  _OrderRouteTreeEvent__isset __isset;

  void __set_type(const OrderRouteTreeEventType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  bool operator == (const OrderRouteTreeEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    return true;
  }
  bool operator != (const OrderRouteTreeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const OrderRouteTreeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(OrderRouteTreeEvent &a, OrderRouteTreeEvent &b);

typedef struct _SubAccountRelatedInfoChangedEvent__isset {
  _SubAccountRelatedInfoChangedEvent__isset() : type(false), subAccountId(false) {}
  bool type;
  bool subAccountId;
} _SubAccountRelatedInfoChangedEvent__isset;

class SubAccountRelatedInfoChangedEvent {
 public:

  static const char* ascii_fingerprint; // = "1A99749538798976FB3A4910CD73729D";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0x99,0x74,0x95,0x38,0x79,0x89,0x76,0xFB,0x3A,0x49,0x10,0xCD,0x73,0x72,0x9D};

  SubAccountRelatedInfoChangedEvent() : type((SubAccountRelatedInfoChangedEventType::type)0), subAccountId(0) {
  }

  virtual ~SubAccountRelatedInfoChangedEvent() throw() {}

  SubAccountRelatedInfoChangedEventType::type type;
  int64_t subAccountId;

  _SubAccountRelatedInfoChangedEvent__isset __isset;

  void __set_type(const SubAccountRelatedInfoChangedEventType::type val) {
    type = val;
    __isset.type = true;
  }

  void __set_subAccountId(const int64_t val) {
    subAccountId = val;
    __isset.subAccountId = true;
  }

  bool operator == (const SubAccountRelatedInfoChangedEvent & rhs) const
  {
    if (__isset.type != rhs.__isset.type)
      return false;
    else if (__isset.type && !(type == rhs.type))
      return false;
    if (__isset.subAccountId != rhs.__isset.subAccountId)
      return false;
    else if (__isset.subAccountId && !(subAccountId == rhs.subAccountId))
      return false;
    return true;
  }
  bool operator != (const SubAccountRelatedInfoChangedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SubAccountRelatedInfoChangedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SubAccountRelatedInfoChangedEvent &a, SubAccountRelatedInfoChangedEvent &b);

typedef struct _UpsideOrderInsertFailedEvent__isset {
  _UpsideOrderInsertFailedEvent__isset() : execOrderId(false), upsideErrorCode(false), upsideErrorMsg(false), eventCreateTimestampMs(false), mappingErrorCode(false) {}
  bool execOrderId;
  bool upsideErrorCode;
  bool upsideErrorMsg;
  bool eventCreateTimestampMs;
  bool mappingErrorCode;
} _UpsideOrderInsertFailedEvent__isset;

class UpsideOrderInsertFailedEvent {
 public:

  static const char* ascii_fingerprint; // = "47A9BF2CA79D378F874FA6C240C1804B";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xA9,0xBF,0x2C,0xA7,0x9D,0x37,0x8F,0x87,0x4F,0xA6,0xC2,0x40,0xC1,0x80,0x4B};

  UpsideOrderInsertFailedEvent() : execOrderId(0), upsideErrorCode(0), upsideErrorMsg(), eventCreateTimestampMs(0), mappingErrorCode(0) {
  }

  virtual ~UpsideOrderInsertFailedEvent() throw() {}

  int64_t execOrderId;
  int32_t upsideErrorCode;
  std::string upsideErrorMsg;
  int64_t eventCreateTimestampMs;
  int32_t mappingErrorCode;

  _UpsideOrderInsertFailedEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_upsideErrorCode(const int32_t val) {
    upsideErrorCode = val;
    __isset.upsideErrorCode = true;
  }

  void __set_upsideErrorMsg(const std::string& val) {
    upsideErrorMsg = val;
    __isset.upsideErrorMsg = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_mappingErrorCode(const int32_t val) {
    mappingErrorCode = val;
    __isset.mappingErrorCode = true;
  }

  bool operator == (const UpsideOrderInsertFailedEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.upsideErrorCode != rhs.__isset.upsideErrorCode)
      return false;
    else if (__isset.upsideErrorCode && !(upsideErrorCode == rhs.upsideErrorCode))
      return false;
    if (__isset.upsideErrorMsg != rhs.__isset.upsideErrorMsg)
      return false;
    else if (__isset.upsideErrorMsg && !(upsideErrorMsg == rhs.upsideErrorMsg))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.mappingErrorCode != rhs.__isset.mappingErrorCode)
      return false;
    else if (__isset.mappingErrorCode && !(mappingErrorCode == rhs.mappingErrorCode))
      return false;
    return true;
  }
  bool operator != (const UpsideOrderInsertFailedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideOrderInsertFailedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideOrderInsertFailedEvent &a, UpsideOrderInsertFailedEvent &b);

typedef struct _UpsideOrderDeleteFailedEvent__isset {
  _UpsideOrderDeleteFailedEvent__isset() : execOrderId(false), upsideErrorCode(false), upsideErrorMsg(false), eventCreateTimestampMs(false), mappingErrorCode(false) {}
  bool execOrderId;
  bool upsideErrorCode;
  bool upsideErrorMsg;
  bool eventCreateTimestampMs;
  bool mappingErrorCode;
} _UpsideOrderDeleteFailedEvent__isset;

class UpsideOrderDeleteFailedEvent {
 public:

  static const char* ascii_fingerprint; // = "47A9BF2CA79D378F874FA6C240C1804B";
  static const uint8_t binary_fingerprint[16]; // = {0x47,0xA9,0xBF,0x2C,0xA7,0x9D,0x37,0x8F,0x87,0x4F,0xA6,0xC2,0x40,0xC1,0x80,0x4B};

  UpsideOrderDeleteFailedEvent() : execOrderId(0), upsideErrorCode(0), upsideErrorMsg(), eventCreateTimestampMs(0), mappingErrorCode(0) {
  }

  virtual ~UpsideOrderDeleteFailedEvent() throw() {}

  int64_t execOrderId;
  int32_t upsideErrorCode;
  std::string upsideErrorMsg;
  int64_t eventCreateTimestampMs;
  int32_t mappingErrorCode;

  _UpsideOrderDeleteFailedEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_upsideErrorCode(const int32_t val) {
    upsideErrorCode = val;
    __isset.upsideErrorCode = true;
  }

  void __set_upsideErrorMsg(const std::string& val) {
    upsideErrorMsg = val;
    __isset.upsideErrorMsg = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_mappingErrorCode(const int32_t val) {
    mappingErrorCode = val;
    __isset.mappingErrorCode = true;
  }

  bool operator == (const UpsideOrderDeleteFailedEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.upsideErrorCode != rhs.__isset.upsideErrorCode)
      return false;
    else if (__isset.upsideErrorCode && !(upsideErrorCode == rhs.upsideErrorCode))
      return false;
    if (__isset.upsideErrorMsg != rhs.__isset.upsideErrorMsg)
      return false;
    else if (__isset.upsideErrorMsg && !(upsideErrorMsg == rhs.upsideErrorMsg))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.mappingErrorCode != rhs.__isset.mappingErrorCode)
      return false;
    else if (__isset.mappingErrorCode && !(mappingErrorCode == rhs.mappingErrorCode))
      return false;
    return true;
  }
  bool operator != (const UpsideOrderDeleteFailedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideOrderDeleteFailedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideOrderDeleteFailedEvent &a, UpsideOrderDeleteFailedEvent &b);

typedef struct _UpsideNotifyForwardStateEvent__isset {
  _UpsideNotifyForwardStateEvent__isset() : execOrderId(false), forwardStateInfo(false), receivedTimestampMs(false), eventCreateTimestampMs(false) {}
  bool execOrderId;
  bool forwardStateInfo;
  bool receivedTimestampMs;
  bool eventCreateTimestampMs;
} _UpsideNotifyForwardStateEvent__isset;

class UpsideNotifyForwardStateEvent {
 public:

  static const char* ascii_fingerprint; // = "EB77EB7B8D6DDE0C014BBA0E8A301138";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x77,0xEB,0x7B,0x8D,0x6D,0xDE,0x0C,0x01,0x4B,0xBA,0x0E,0x8A,0x30,0x11,0x38};

  UpsideNotifyForwardStateEvent() : execOrderId(0), receivedTimestampMs(0), eventCreateTimestampMs(0) {
  }

  virtual ~UpsideNotifyForwardStateEvent() throw() {}

  int64_t execOrderId;
   ::xueqiao::trade::hosting::HostingUpsideNotifyStateInfo forwardStateInfo;
  int64_t receivedTimestampMs;
  int64_t eventCreateTimestampMs;

  _UpsideNotifyForwardStateEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_forwardStateInfo(const  ::xueqiao::trade::hosting::HostingUpsideNotifyStateInfo& val) {
    forwardStateInfo = val;
    __isset.forwardStateInfo = true;
  }

  void __set_receivedTimestampMs(const int64_t val) {
    receivedTimestampMs = val;
    __isset.receivedTimestampMs = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  bool operator == (const UpsideNotifyForwardStateEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.forwardStateInfo != rhs.__isset.forwardStateInfo)
      return false;
    else if (__isset.forwardStateInfo && !(forwardStateInfo == rhs.forwardStateInfo))
      return false;
    if (__isset.receivedTimestampMs != rhs.__isset.receivedTimestampMs)
      return false;
    else if (__isset.receivedTimestampMs && !(receivedTimestampMs == rhs.receivedTimestampMs))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    return true;
  }
  bool operator != (const UpsideNotifyForwardStateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideNotifyForwardStateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideNotifyForwardStateEvent &a, UpsideNotifyForwardStateEvent &b);

typedef struct _UpsideNotifyForwardTradeEvent__isset {
  _UpsideNotifyForwardTradeEvent__isset() : execOrderId(false), forwardTradeLegInfo(false), receivedTimestampMs(false), eventCreateTimestampMs(false), forwardTradeLegContractSummary(false) {}
  bool execOrderId;
  bool forwardTradeLegInfo;
  bool receivedTimestampMs;
  bool eventCreateTimestampMs;
  bool forwardTradeLegContractSummary;
} _UpsideNotifyForwardTradeEvent__isset;

class UpsideNotifyForwardTradeEvent {
 public:

  static const char* ascii_fingerprint; // = "240017ABBF566682E0F1A707D784EB3B";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x00,0x17,0xAB,0xBF,0x56,0x66,0x82,0xE0,0xF1,0xA7,0x07,0xD7,0x84,0xEB,0x3B};

  UpsideNotifyForwardTradeEvent() : execOrderId(0), receivedTimestampMs(0), eventCreateTimestampMs(0) {
  }

  virtual ~UpsideNotifyForwardTradeEvent() throw() {}

  int64_t execOrderId;
   ::xueqiao::trade::hosting::HostingExecTradeLegInfo forwardTradeLegInfo;
  int64_t receivedTimestampMs;
  int64_t eventCreateTimestampMs;
   ::xueqiao::trade::hosting::HostingExecOrderLegContractSummary forwardTradeLegContractSummary;

  _UpsideNotifyForwardTradeEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_forwardTradeLegInfo(const  ::xueqiao::trade::hosting::HostingExecTradeLegInfo& val) {
    forwardTradeLegInfo = val;
    __isset.forwardTradeLegInfo = true;
  }

  void __set_receivedTimestampMs(const int64_t val) {
    receivedTimestampMs = val;
    __isset.receivedTimestampMs = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_forwardTradeLegContractSummary(const  ::xueqiao::trade::hosting::HostingExecOrderLegContractSummary& val) {
    forwardTradeLegContractSummary = val;
    __isset.forwardTradeLegContractSummary = true;
  }

  bool operator == (const UpsideNotifyForwardTradeEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.forwardTradeLegInfo != rhs.__isset.forwardTradeLegInfo)
      return false;
    else if (__isset.forwardTradeLegInfo && !(forwardTradeLegInfo == rhs.forwardTradeLegInfo))
      return false;
    if (__isset.receivedTimestampMs != rhs.__isset.receivedTimestampMs)
      return false;
    else if (__isset.receivedTimestampMs && !(receivedTimestampMs == rhs.receivedTimestampMs))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.forwardTradeLegContractSummary != rhs.__isset.forwardTradeLegContractSummary)
      return false;
    else if (__isset.forwardTradeLegContractSummary && !(forwardTradeLegContractSummary == rhs.forwardTradeLegContractSummary))
      return false;
    return true;
  }
  bool operator != (const UpsideNotifyForwardTradeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideNotifyForwardTradeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideNotifyForwardTradeEvent &a, UpsideNotifyForwardTradeEvent &b);

typedef struct _UpsideNotifySyncStateEvent__isset {
  _UpsideNotifySyncStateEvent__isset() : execOrderId(false), syncStateInfo(false), syncReqTimestampMs(false), syncRespTimestampMs(false), eventCreateTimestampMs(false), upsideErrorCode(false), upsideErrorMsg(false), mappingErrorCode(false) {}
  bool execOrderId;
  bool syncStateInfo;
  bool syncReqTimestampMs;
  bool syncRespTimestampMs;
  bool eventCreateTimestampMs;
  bool upsideErrorCode;
  bool upsideErrorMsg;
  bool mappingErrorCode;
} _UpsideNotifySyncStateEvent__isset;

class UpsideNotifySyncStateEvent {
 public:

  static const char* ascii_fingerprint; // = "61170E34F95561530B6347C24D5EF3C0";
  static const uint8_t binary_fingerprint[16]; // = {0x61,0x17,0x0E,0x34,0xF9,0x55,0x61,0x53,0x0B,0x63,0x47,0xC2,0x4D,0x5E,0xF3,0xC0};

  UpsideNotifySyncStateEvent() : execOrderId(0), syncReqTimestampMs(0), syncRespTimestampMs(0), eventCreateTimestampMs(0), upsideErrorCode(0), upsideErrorMsg(), mappingErrorCode(0) {
  }

  virtual ~UpsideNotifySyncStateEvent() throw() {}

  int64_t execOrderId;
   ::xueqiao::trade::hosting::HostingUpsideNotifyStateInfo syncStateInfo;
  int64_t syncReqTimestampMs;
  int64_t syncRespTimestampMs;
  int64_t eventCreateTimestampMs;
  int32_t upsideErrorCode;
  std::string upsideErrorMsg;
  int32_t mappingErrorCode;

  _UpsideNotifySyncStateEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_syncStateInfo(const  ::xueqiao::trade::hosting::HostingUpsideNotifyStateInfo& val) {
    syncStateInfo = val;
    __isset.syncStateInfo = true;
  }

  void __set_syncReqTimestampMs(const int64_t val) {
    syncReqTimestampMs = val;
    __isset.syncReqTimestampMs = true;
  }

  void __set_syncRespTimestampMs(const int64_t val) {
    syncRespTimestampMs = val;
    __isset.syncRespTimestampMs = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_upsideErrorCode(const int32_t val) {
    upsideErrorCode = val;
    __isset.upsideErrorCode = true;
  }

  void __set_upsideErrorMsg(const std::string& val) {
    upsideErrorMsg = val;
    __isset.upsideErrorMsg = true;
  }

  void __set_mappingErrorCode(const int32_t val) {
    mappingErrorCode = val;
    __isset.mappingErrorCode = true;
  }

  bool operator == (const UpsideNotifySyncStateEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.syncStateInfo != rhs.__isset.syncStateInfo)
      return false;
    else if (__isset.syncStateInfo && !(syncStateInfo == rhs.syncStateInfo))
      return false;
    if (__isset.syncReqTimestampMs != rhs.__isset.syncReqTimestampMs)
      return false;
    else if (__isset.syncReqTimestampMs && !(syncReqTimestampMs == rhs.syncReqTimestampMs))
      return false;
    if (__isset.syncRespTimestampMs != rhs.__isset.syncRespTimestampMs)
      return false;
    else if (__isset.syncRespTimestampMs && !(syncRespTimestampMs == rhs.syncRespTimestampMs))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.upsideErrorCode != rhs.__isset.upsideErrorCode)
      return false;
    else if (__isset.upsideErrorCode && !(upsideErrorCode == rhs.upsideErrorCode))
      return false;
    if (__isset.upsideErrorMsg != rhs.__isset.upsideErrorMsg)
      return false;
    else if (__isset.upsideErrorMsg && !(upsideErrorMsg == rhs.upsideErrorMsg))
      return false;
    if (__isset.mappingErrorCode != rhs.__isset.mappingErrorCode)
      return false;
    else if (__isset.mappingErrorCode && !(mappingErrorCode == rhs.mappingErrorCode))
      return false;
    return true;
  }
  bool operator != (const UpsideNotifySyncStateEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideNotifySyncStateEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideNotifySyncStateEvent &a, UpsideNotifySyncStateEvent &b);

typedef struct _UpsideNotifySyncTradeEvent__isset {
  _UpsideNotifySyncTradeEvent__isset() : execOrderId(false), syncTradeLegInfos(false), syncReqTimestampMs(false), syncRespTimestampMs(false), eventCreateTimestampMs(false), upsideErrorCode(false), upsideErrorMsg(false), mappingErrorCode(false), syncTradeLegContractSummary(false) {}
  bool execOrderId;
  bool syncTradeLegInfos;
  bool syncReqTimestampMs;
  bool syncRespTimestampMs;
  bool eventCreateTimestampMs;
  bool upsideErrorCode;
  bool upsideErrorMsg;
  bool mappingErrorCode;
  bool syncTradeLegContractSummary;
} _UpsideNotifySyncTradeEvent__isset;

class UpsideNotifySyncTradeEvent {
 public:

  static const char* ascii_fingerprint; // = "5631AD50CEECBE48EEBC4D228022C135";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x31,0xAD,0x50,0xCE,0xEC,0xBE,0x48,0xEE,0xBC,0x4D,0x22,0x80,0x22,0xC1,0x35};

  UpsideNotifySyncTradeEvent() : execOrderId(0), syncReqTimestampMs(0), syncRespTimestampMs(0), eventCreateTimestampMs(0), upsideErrorCode(0), upsideErrorMsg(), mappingErrorCode() {
  }

  virtual ~UpsideNotifySyncTradeEvent() throw() {}

  int64_t execOrderId;
  std::vector< ::xueqiao::trade::hosting::HostingExecTradeLegInfo>  syncTradeLegInfos;
  int64_t syncReqTimestampMs;
  int64_t syncRespTimestampMs;
  int64_t eventCreateTimestampMs;
  int32_t upsideErrorCode;
  std::string upsideErrorMsg;
  std::string mappingErrorCode;
   ::xueqiao::trade::hosting::HostingExecOrderLegContractSummary syncTradeLegContractSummary;

  _UpsideNotifySyncTradeEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  void __set_syncTradeLegInfos(const std::vector< ::xueqiao::trade::hosting::HostingExecTradeLegInfo> & val) {
    syncTradeLegInfos = val;
    __isset.syncTradeLegInfos = true;
  }

  void __set_syncReqTimestampMs(const int64_t val) {
    syncReqTimestampMs = val;
    __isset.syncReqTimestampMs = true;
  }

  void __set_syncRespTimestampMs(const int64_t val) {
    syncRespTimestampMs = val;
    __isset.syncRespTimestampMs = true;
  }

  void __set_eventCreateTimestampMs(const int64_t val) {
    eventCreateTimestampMs = val;
    __isset.eventCreateTimestampMs = true;
  }

  void __set_upsideErrorCode(const int32_t val) {
    upsideErrorCode = val;
    __isset.upsideErrorCode = true;
  }

  void __set_upsideErrorMsg(const std::string& val) {
    upsideErrorMsg = val;
    __isset.upsideErrorMsg = true;
  }

  void __set_mappingErrorCode(const std::string& val) {
    mappingErrorCode = val;
    __isset.mappingErrorCode = true;
  }

  void __set_syncTradeLegContractSummary(const  ::xueqiao::trade::hosting::HostingExecOrderLegContractSummary& val) {
    syncTradeLegContractSummary = val;
    __isset.syncTradeLegContractSummary = true;
  }

  bool operator == (const UpsideNotifySyncTradeEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    if (__isset.syncTradeLegInfos != rhs.__isset.syncTradeLegInfos)
      return false;
    else if (__isset.syncTradeLegInfos && !(syncTradeLegInfos == rhs.syncTradeLegInfos))
      return false;
    if (__isset.syncReqTimestampMs != rhs.__isset.syncReqTimestampMs)
      return false;
    else if (__isset.syncReqTimestampMs && !(syncReqTimestampMs == rhs.syncReqTimestampMs))
      return false;
    if (__isset.syncRespTimestampMs != rhs.__isset.syncRespTimestampMs)
      return false;
    else if (__isset.syncRespTimestampMs && !(syncRespTimestampMs == rhs.syncRespTimestampMs))
      return false;
    if (__isset.eventCreateTimestampMs != rhs.__isset.eventCreateTimestampMs)
      return false;
    else if (__isset.eventCreateTimestampMs && !(eventCreateTimestampMs == rhs.eventCreateTimestampMs))
      return false;
    if (__isset.upsideErrorCode != rhs.__isset.upsideErrorCode)
      return false;
    else if (__isset.upsideErrorCode && !(upsideErrorCode == rhs.upsideErrorCode))
      return false;
    if (__isset.upsideErrorMsg != rhs.__isset.upsideErrorMsg)
      return false;
    else if (__isset.upsideErrorMsg && !(upsideErrorMsg == rhs.upsideErrorMsg))
      return false;
    if (__isset.mappingErrorCode != rhs.__isset.mappingErrorCode)
      return false;
    else if (__isset.mappingErrorCode && !(mappingErrorCode == rhs.mappingErrorCode))
      return false;
    if (__isset.syncTradeLegContractSummary != rhs.__isset.syncTradeLegContractSummary)
      return false;
    else if (__isset.syncTradeLegContractSummary && !(syncTradeLegContractSummary == rhs.syncTradeLegContractSummary))
      return false;
    return true;
  }
  bool operator != (const UpsideNotifySyncTradeEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpsideNotifySyncTradeEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(UpsideNotifySyncTradeEvent &a, UpsideNotifySyncTradeEvent &b);

typedef struct _ExecOrderCreatedEvent__isset {
  _ExecOrderCreatedEvent__isset() : createdOrder(false) {}
  bool createdOrder;
} _ExecOrderCreatedEvent__isset;

class ExecOrderCreatedEvent {
 public:

  static const char* ascii_fingerprint; // = "2A0070080F59C54A1B0253181E5BE30C";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

  ExecOrderCreatedEvent() {
  }

  virtual ~ExecOrderCreatedEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder createdOrder;

  _ExecOrderCreatedEvent__isset __isset;

  void __set_createdOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    createdOrder = val;
    __isset.createdOrder = true;
  }

  bool operator == (const ExecOrderCreatedEvent & rhs) const
  {
    if (__isset.createdOrder != rhs.__isset.createdOrder)
      return false;
    else if (__isset.createdOrder && !(createdOrder == rhs.createdOrder))
      return false;
    return true;
  }
  bool operator != (const ExecOrderCreatedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderCreatedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderCreatedEvent &a, ExecOrderCreatedEvent &b);

typedef struct _ExecOrderVerifySuccessEvent__isset {
  _ExecOrderVerifySuccessEvent__isset() : verifySuccessOrder(false) {}
  bool verifySuccessOrder;
} _ExecOrderVerifySuccessEvent__isset;

class ExecOrderVerifySuccessEvent {
 public:

  static const char* ascii_fingerprint; // = "2A0070080F59C54A1B0253181E5BE30C";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

  ExecOrderVerifySuccessEvent() {
  }

  virtual ~ExecOrderVerifySuccessEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder verifySuccessOrder;

  _ExecOrderVerifySuccessEvent__isset __isset;

  void __set_verifySuccessOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    verifySuccessOrder = val;
    __isset.verifySuccessOrder = true;
  }

  bool operator == (const ExecOrderVerifySuccessEvent & rhs) const
  {
    if (__isset.verifySuccessOrder != rhs.__isset.verifySuccessOrder)
      return false;
    else if (__isset.verifySuccessOrder && !(verifySuccessOrder == rhs.verifySuccessOrder))
      return false;
    return true;
  }
  bool operator != (const ExecOrderVerifySuccessEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderVerifySuccessEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderVerifySuccessEvent &a, ExecOrderVerifySuccessEvent &b);

typedef struct _ExecOrderVerifyFailedEvent__isset {
  _ExecOrderVerifyFailedEvent__isset() : verifyFailedOrder(false) {}
  bool verifyFailedOrder;
} _ExecOrderVerifyFailedEvent__isset;

class ExecOrderVerifyFailedEvent {
 public:

  static const char* ascii_fingerprint; // = "2A0070080F59C54A1B0253181E5BE30C";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

  ExecOrderVerifyFailedEvent() {
  }

  virtual ~ExecOrderVerifyFailedEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder verifyFailedOrder;

  _ExecOrderVerifyFailedEvent__isset __isset;

  void __set_verifyFailedOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    verifyFailedOrder = val;
    __isset.verifyFailedOrder = true;
  }

  bool operator == (const ExecOrderVerifyFailedEvent & rhs) const
  {
    if (__isset.verifyFailedOrder != rhs.__isset.verifyFailedOrder)
      return false;
    else if (__isset.verifyFailedOrder && !(verifyFailedOrder == rhs.verifyFailedOrder))
      return false;
    return true;
  }
  bool operator != (const ExecOrderVerifyFailedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderVerifyFailedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderVerifyFailedEvent &a, ExecOrderVerifyFailedEvent &b);

typedef struct _ExecOrderRunningEvent__isset {
  _ExecOrderRunningEvent__isset() : runningOrder(false) {}
  bool runningOrder;
} _ExecOrderRunningEvent__isset;

class ExecOrderRunningEvent {
 public:

  static const char* ascii_fingerprint; // = "2A0070080F59C54A1B0253181E5BE30C";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

  ExecOrderRunningEvent() {
  }

  virtual ~ExecOrderRunningEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder runningOrder;

  _ExecOrderRunningEvent__isset __isset;

  void __set_runningOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    runningOrder = val;
    __isset.runningOrder = true;
  }

  bool operator == (const ExecOrderRunningEvent & rhs) const
  {
    if (__isset.runningOrder != rhs.__isset.runningOrder)
      return false;
    else if (__isset.runningOrder && !(runningOrder == rhs.runningOrder))
      return false;
    return true;
  }
  bool operator != (const ExecOrderRunningEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderRunningEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderRunningEvent &a, ExecOrderRunningEvent &b);

typedef struct _ExecTradeListChangedEvent__isset {
  _ExecTradeListChangedEvent__isset() : execOrder(false), newTradeList(false) {}
  bool execOrder;
  bool newTradeList;
} _ExecTradeListChangedEvent__isset;

class ExecTradeListChangedEvent {
 public:

  static const char* ascii_fingerprint; // = "4FF06CCE21AFB35D3F42607ECF6FE7BF";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0xF0,0x6C,0xCE,0x21,0xAF,0xB3,0x5D,0x3F,0x42,0x60,0x7E,0xCF,0x6F,0xE7,0xBF};

  ExecTradeListChangedEvent() {
  }

  virtual ~ExecTradeListChangedEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder execOrder;
  std::vector< ::xueqiao::trade::hosting::HostingExecTrade>  newTradeList;

  _ExecTradeListChangedEvent__isset __isset;

  void __set_execOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    execOrder = val;
    __isset.execOrder = true;
  }

  void __set_newTradeList(const std::vector< ::xueqiao::trade::hosting::HostingExecTrade> & val) {
    newTradeList = val;
    __isset.newTradeList = true;
  }

  bool operator == (const ExecTradeListChangedEvent & rhs) const
  {
    if (__isset.execOrder != rhs.__isset.execOrder)
      return false;
    else if (__isset.execOrder && !(execOrder == rhs.execOrder))
      return false;
    if (__isset.newTradeList != rhs.__isset.newTradeList)
      return false;
    else if (__isset.newTradeList && !(newTradeList == rhs.newTradeList))
      return false;
    return true;
  }
  bool operator != (const ExecTradeListChangedEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecTradeListChangedEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecTradeListChangedEvent &a, ExecTradeListChangedEvent &b);

typedef struct _ExecOrderExpiredEvent__isset {
  _ExecOrderExpiredEvent__isset() : expiredOrder(false) {}
  bool expiredOrder;
} _ExecOrderExpiredEvent__isset;

class ExecOrderExpiredEvent {
 public:

  static const char* ascii_fingerprint; // = "2A0070080F59C54A1B0253181E5BE30C";
  static const uint8_t binary_fingerprint[16]; // = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

  ExecOrderExpiredEvent() {
  }

  virtual ~ExecOrderExpiredEvent() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrder expiredOrder;

  _ExecOrderExpiredEvent__isset __isset;

  void __set_expiredOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    expiredOrder = val;
    __isset.expiredOrder = true;
  }

  bool operator == (const ExecOrderExpiredEvent & rhs) const
  {
    if (__isset.expiredOrder != rhs.__isset.expiredOrder)
      return false;
    else if (__isset.expiredOrder && !(expiredOrder == rhs.expiredOrder))
      return false;
    return true;
  }
  bool operator != (const ExecOrderExpiredEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderExpiredEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderExpiredEvent &a, ExecOrderExpiredEvent &b);

typedef struct _ExecOrderRevokeTimeoutEvent__isset {
  _ExecOrderRevokeTimeoutEvent__isset() : execOrderId(false) {}
  bool execOrderId;
} _ExecOrderRevokeTimeoutEvent__isset;

class ExecOrderRevokeTimeoutEvent {
 public:

  static const char* ascii_fingerprint; // = "148F3AAAC1D9859963D5E800D187BF26";
  static const uint8_t binary_fingerprint[16]; // = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

  ExecOrderRevokeTimeoutEvent() : execOrderId(0) {
  }

  virtual ~ExecOrderRevokeTimeoutEvent() throw() {}

  int64_t execOrderId;

  _ExecOrderRevokeTimeoutEvent__isset __isset;

  void __set_execOrderId(const int64_t val) {
    execOrderId = val;
    __isset.execOrderId = true;
  }

  bool operator == (const ExecOrderRevokeTimeoutEvent & rhs) const
  {
    if (__isset.execOrderId != rhs.__isset.execOrderId)
      return false;
    else if (__isset.execOrderId && !(execOrderId == rhs.execOrderId))
      return false;
    return true;
  }
  bool operator != (const ExecOrderRevokeTimeoutEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderRevokeTimeoutEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderRevokeTimeoutEvent &a, ExecOrderRevokeTimeoutEvent &b);

typedef struct _ExecOrderGuardEvent__isset {
  _ExecOrderGuardEvent__isset() : guardExecOrderId(false), guardType(false) {}
  bool guardExecOrderId;
  bool guardType;
} _ExecOrderGuardEvent__isset;

class ExecOrderGuardEvent {
 public:

  static const char* ascii_fingerprint; // = "E135AA063A369B5C1AB15DE43A0E2B55";
  static const uint8_t binary_fingerprint[16]; // = {0xE1,0x35,0xAA,0x06,0x3A,0x36,0x9B,0x5C,0x1A,0xB1,0x5D,0xE4,0x3A,0x0E,0x2B,0x55};

  ExecOrderGuardEvent() : guardExecOrderId(0), guardType((ExecOrderGuardType::type)0) {
  }

  virtual ~ExecOrderGuardEvent() throw() {}

  int64_t guardExecOrderId;
  ExecOrderGuardType::type guardType;

  _ExecOrderGuardEvent__isset __isset;

  void __set_guardExecOrderId(const int64_t val) {
    guardExecOrderId = val;
    __isset.guardExecOrderId = true;
  }

  void __set_guardType(const ExecOrderGuardType::type val) {
    guardType = val;
    __isset.guardType = true;
  }

  bool operator == (const ExecOrderGuardEvent & rhs) const
  {
    if (__isset.guardExecOrderId != rhs.__isset.guardExecOrderId)
      return false;
    else if (__isset.guardExecOrderId && !(guardExecOrderId == rhs.guardExecOrderId))
      return false;
    if (__isset.guardType != rhs.__isset.guardType)
      return false;
    else if (__isset.guardType && !(guardType == rhs.guardType))
      return false;
    return true;
  }
  bool operator != (const ExecOrderGuardEvent &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ExecOrderGuardEvent & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ExecOrderGuardEvent &a, ExecOrderGuardEvent &b);

}}}} // namespace

#endif
