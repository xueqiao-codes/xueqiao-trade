/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_basic_events_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace events {

int _kHostingEventTypeValues[] = {
  HostingEventType::HOSTING_INITED,
  HostingEventType::HOSTING_DESTORIED
};
const char* _kHostingEventTypeNames[] = {
  "HOSTING_INITED",
  "HOSTING_DESTORIED"
};
const std::map<int, const char*> _HostingEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kHostingEventTypeValues, _kHostingEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kUserEventTypeValues[] = {
  UserEventType::USER_ADD,
  UserEventType::USER_REMOVE,
  UserEventType::USER_INFO_UPDATED,
  UserEventType::USER_ALL_CLEARD,
  UserEventType::USER_STATE_CHANGED
};
const char* _kUserEventTypeNames[] = {
  "USER_ADD",
  "USER_REMOVE",
  "USER_INFO_UPDATED",
  "USER_ALL_CLEARD",
  "USER_STATE_CHANGED"
};
const std::map<int, const char*> _UserEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kUserEventTypeValues, _kUserEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kComposeViewEventTypeValues[] = {
  ComposeViewEventType::COMPOSE_VIEW_ADDED,
  ComposeViewEventType::COMPOSE_VIEW_SUBSCRIBED,
  ComposeViewEventType::COMPOSE_VIEW_UNSUBSCRIBD,
  ComposeViewEventType::COMPOSE_VIEW_DELETED,
  ComposeViewEventType::COMPOSE_VIEW_ALL_CLEARED
};
const char* _kComposeViewEventTypeNames[] = {
  "COMPOSE_VIEW_ADDED",
  "COMPOSE_VIEW_SUBSCRIBED",
  "COMPOSE_VIEW_UNSUBSCRIBD",
  "COMPOSE_VIEW_DELETED",
  "COMPOSE_VIEW_ALL_CLEARED"
};
const std::map<int, const char*> _ComposeViewEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kComposeViewEventTypeValues, _kComposeViewEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTradeAccountEventTypeValues[] = {
  TradeAccountEventType::TRADE_ACCOUNT_ADDED,
  TradeAccountEventType::TRADE_ACCOUNT_INFO_UPDATED,
  TradeAccountEventType::TRADE_ACCOUNT_STATE_CHANGED,
  TradeAccountEventType::TRADE_ACCOUNT_DELETED,
  TradeAccountEventType::TRADE_ACCOUNT_ACCESS_ENTRY_UPDATE,
  TradeAccountEventType::TRADE_ACCOUNT_ACCESS_STATE_CHANGED,
  TradeAccountEventType::TRADE_ACCOUNT_ALL_CLEARD,
  TradeAccountEventType::TRADE_ACCOUNT_ACCESS_DESCRIPTION_CHANGED
};
const char* _kTradeAccountEventTypeNames[] = {
  "TRADE_ACCOUNT_ADDED",
  "TRADE_ACCOUNT_INFO_UPDATED",
  "TRADE_ACCOUNT_STATE_CHANGED",
  "TRADE_ACCOUNT_DELETED",
  "TRADE_ACCOUNT_ACCESS_ENTRY_UPDATE",
  "TRADE_ACCOUNT_ACCESS_STATE_CHANGED",
  "TRADE_ACCOUNT_ALL_CLEARD",
  "TRADE_ACCOUNT_ACCESS_DESCRIPTION_CHANGED"
};
const std::map<int, const char*> _TradeAccountEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(8, _kTradeAccountEventTypeValues, _kTradeAccountEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kOrderRouteTreeEventTypeValues[] = {
  OrderRouteTreeEventType::ORDER_ROUTE_TREE_CHANGED,
  OrderRouteTreeEventType::ORDER_ROUTE_TREE_ALL_CLEARD
};
const char* _kOrderRouteTreeEventTypeNames[] = {
  "ORDER_ROUTE_TREE_CHANGED",
  "ORDER_ROUTE_TREE_ALL_CLEARD"
};
const std::map<int, const char*> _OrderRouteTreeEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kOrderRouteTreeEventTypeValues, _kOrderRouteTreeEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSubAccountRelatedInfoChangedEventTypeValues[] = {
  SubAccountRelatedInfoChangedEventType::RELATED_INFO_ALL_CLEARED,
  SubAccountRelatedInfoChangedEventType::RELATED_INFO_CHANGED
};
const char* _kSubAccountRelatedInfoChangedEventTypeNames[] = {
  "RELATED_INFO_ALL_CLEARED",
  "RELATED_INFO_CHANGED"
};
const std::map<int, const char*> _SubAccountRelatedInfoChangedEventType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSubAccountRelatedInfoChangedEventTypeValues, _kSubAccountRelatedInfoChangedEventTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kExecOrderGuardTypeValues[] = {
  ExecOrderGuardType::GUARD_ORDER_CREATED,
  ExecOrderGuardType::GUARD_ORDER_VERIFY_SUCCESS,
  ExecOrderGuardType::GUARD_ORDER_VERIFY_FAILED,
  ExecOrderGuardType::GUARD_ORDER_RUNNING,
  ExecOrderGuardType::GUARD_ORDER_EXPIRED,
  ExecOrderGuardType::GUARD_ORDER_TRADE_LIST_CHANGED
};
const char* _kExecOrderGuardTypeNames[] = {
  "GUARD_ORDER_CREATED",
  "GUARD_ORDER_VERIFY_SUCCESS",
  "GUARD_ORDER_VERIFY_FAILED",
  "GUARD_ORDER_RUNNING",
  "GUARD_ORDER_EXPIRED",
  "GUARD_ORDER_TRADE_LIST_CHANGED"
};
const std::map<int, const char*> _ExecOrderGuardType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kExecOrderGuardTypeValues, _kExecOrderGuardTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* HostingEvent::ascii_fingerprint = "8C1740BBF54FD399631A4549952454DB";
const uint8_t HostingEvent::binary_fingerprint[16] = {0x8C,0x17,0x40,0xBB,0xF5,0x4F,0xD3,0x99,0x63,0x1A,0x45,0x49,0x95,0x24,0x54,0xDB};

uint32_t HostingEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->type = (HostingEventType::type)ecast0;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t HostingEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("HostingEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(HostingEvent &a, HostingEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

const char* UserEvent::ascii_fingerprint = "75971A588272C97A80EBFD5BA7E9F503";
const uint8_t UserEvent::binary_fingerprint[16] = {0x75,0x97,0x1A,0x58,0x82,0x72,0xC9,0x7A,0x80,0xEB,0xFD,0x5B,0xA7,0xE9,0xF5,0x03};

uint32_t UserEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->type = (UserEventType::type)ecast1;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->subUserId);
          this->__isset.subUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subUserId) {
    xfer += oprot->writeFieldBegin("subUserId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->subUserId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserEvent &a, UserEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.subUserId, b.subUserId);
  swap(a.__isset, b.__isset);
}

const char* LandingStatusChangedEvent::ascii_fingerprint = "E7A96B151330359E84C0A3AC91BCBACD";
const uint8_t LandingStatusChangedEvent::binary_fingerprint[16] = {0xE7,0xA9,0x6B,0x15,0x13,0x30,0x35,0x9E,0x84,0xC0,0xA3,0xAC,0x91,0xBC,0xBA,0xCD};

uint32_t LandingStatusChangedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->subUserId);
          this->__isset.subUserId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t LandingStatusChangedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("LandingStatusChangedEvent");

  if (this->__isset.subUserId) {
    xfer += oprot->writeFieldBegin("subUserId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->subUserId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(LandingStatusChangedEvent &a, LandingStatusChangedEvent &b) {
  using ::std::swap;
  swap(a.subUserId, b.subUserId);
  swap(a.__isset, b.__isset);
}

const char* ComposeViewEvent::ascii_fingerprint = "0EC40F846F0F7F90E4C6D46C67F2EBB3";
const uint8_t ComposeViewEvent::binary_fingerprint[16] = {0x0E,0xC4,0x0F,0x84,0x6F,0x0F,0x7F,0x90,0xE4,0xC6,0xD4,0x6C,0x67,0xF2,0xEB,0xB3};

uint32_t ComposeViewEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->type = (ComposeViewEventType::type)ecast2;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->composeGraphId);
          this->__isset.composeGraphId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_SET) {
          {
            this->subUserIds.clear();
            uint32_t _size3;
            ::apache::thrift::protocol::TType _etype6;
            xfer += iprot->readSetBegin(_etype6, _size3);
            uint32_t _i7;
            for (_i7 = 0; _i7 < _size3; ++_i7)
            {
              int32_t _elem8;
              xfer += iprot->readI32(_elem8);
              this->subUserIds.insert(_elem8);
            }
            xfer += iprot->readSetEnd();
          }
          this->__isset.subUserIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ComposeViewEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ComposeViewEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.composeGraphId) {
    xfer += oprot->writeFieldBegin("composeGraphId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->composeGraphId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subUserIds) {
    xfer += oprot->writeFieldBegin("subUserIds", ::apache::thrift::protocol::T_SET, 3);
    {
      xfer += oprot->writeSetBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->subUserIds.size()));
      std::set<int32_t> ::const_iterator _iter9;
      for (_iter9 = this->subUserIds.begin(); _iter9 != this->subUserIds.end(); ++_iter9)
      {
        xfer += oprot->writeI32((*_iter9));
      }
      xfer += oprot->writeSetEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ComposeViewEvent &a, ComposeViewEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.composeGraphId, b.composeGraphId);
  swap(a.subUserIds, b.subUserIds);
  swap(a.__isset, b.__isset);
}

const char* ContractVersionChangedEvent::ascii_fingerprint = "148F3AAAC1D9859963D5E800D187BF26";
const uint8_t ContractVersionChangedEvent::binary_fingerprint[16] = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

uint32_t ContractVersionChangedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventTimestampMs);
          this->__isset.eventTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ContractVersionChangedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ContractVersionChangedEvent");

  if (this->__isset.eventTimestampMs) {
    xfer += oprot->writeFieldBegin("eventTimestampMs", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->eventTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ContractVersionChangedEvent &a, ContractVersionChangedEvent &b) {
  using ::std::swap;
  swap(a.eventTimestampMs, b.eventTimestampMs);
  swap(a.__isset, b.__isset);
}

const char* TradeAccountEvent::ascii_fingerprint = "3C0E4F50A4DE6E42E2A6729704B0616B";
const uint8_t TradeAccountEvent::binary_fingerprint[16] = {0x3C,0x0E,0x4F,0x50,0xA4,0xDE,0x6E,0x42,0xE2,0xA6,0x72,0x97,0x04,0xB0,0x61,0x6B};

uint32_t TradeAccountEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->type = (TradeAccountEventType::type)ecast10;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tradeAccountId);
          this->__isset.tradeAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->deletedTradeAccount.read(iprot);
          this->__isset.deletedTradeAccount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TradeAccountEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TradeAccountEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tradeAccountId) {
    xfer += oprot->writeFieldBegin("tradeAccountId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->tradeAccountId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deletedTradeAccount) {
    xfer += oprot->writeFieldBegin("deletedTradeAccount", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->deletedTradeAccount.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TradeAccountEvent &a, TradeAccountEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.tradeAccountId, b.tradeAccountId);
  swap(a.deletedTradeAccount, b.deletedTradeAccount);
  swap(a.__isset, b.__isset);
}

const char* OrderRouteTreeEvent::ascii_fingerprint = "1A99749538798976FB3A4910CD73729D";
const uint8_t OrderRouteTreeEvent::binary_fingerprint[16] = {0x1A,0x99,0x74,0x95,0x38,0x79,0x89,0x76,0xFB,0x3A,0x49,0x10,0xCD,0x73,0x72,0x9D};

uint32_t OrderRouteTreeEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->type = (OrderRouteTreeEventType::type)ecast11;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subAccountId);
          this->__isset.subAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t OrderRouteTreeEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("OrderRouteTreeEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subAccountId) {
    xfer += oprot->writeFieldBegin("subAccountId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->subAccountId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(OrderRouteTreeEvent &a, OrderRouteTreeEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.subAccountId, b.subAccountId);
  swap(a.__isset, b.__isset);
}

const char* SubAccountRelatedInfoChangedEvent::ascii_fingerprint = "1A99749538798976FB3A4910CD73729D";
const uint8_t SubAccountRelatedInfoChangedEvent::binary_fingerprint[16] = {0x1A,0x99,0x74,0x95,0x38,0x79,0x89,0x76,0xFB,0x3A,0x49,0x10,0xCD,0x73,0x72,0x9D};

uint32_t SubAccountRelatedInfoChangedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast12;
          xfer += iprot->readI32(ecast12);
          this->type = (SubAccountRelatedInfoChangedEventType::type)ecast12;
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->subAccountId);
          this->__isset.subAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SubAccountRelatedInfoChangedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SubAccountRelatedInfoChangedEvent");

  if (this->__isset.type) {
    xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32((int32_t)this->type);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.subAccountId) {
    xfer += oprot->writeFieldBegin("subAccountId", ::apache::thrift::protocol::T_I64, 2);
    xfer += oprot->writeI64(this->subAccountId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SubAccountRelatedInfoChangedEvent &a, SubAccountRelatedInfoChangedEvent &b) {
  using ::std::swap;
  swap(a.type, b.type);
  swap(a.subAccountId, b.subAccountId);
  swap(a.__isset, b.__isset);
}

const char* UpsideOrderInsertFailedEvent::ascii_fingerprint = "47A9BF2CA79D378F874FA6C240C1804B";
const uint8_t UpsideOrderInsertFailedEvent::binary_fingerprint[16] = {0x47,0xA9,0xBF,0x2C,0xA7,0x9D,0x37,0x8F,0x87,0x4F,0xA6,0xC2,0x40,0xC1,0x80,0x4B};

uint32_t UpsideOrderInsertFailedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upsideErrorCode);
          this->__isset.upsideErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsideErrorMsg);
          this->__isset.upsideErrorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mappingErrorCode);
          this->__isset.mappingErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideOrderInsertFailedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideOrderInsertFailedEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorCode) {
    xfer += oprot->writeFieldBegin("upsideErrorCode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->upsideErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorMsg) {
    xfer += oprot->writeFieldBegin("upsideErrorMsg", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->upsideErrorMsg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mappingErrorCode) {
    xfer += oprot->writeFieldBegin("mappingErrorCode", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->mappingErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideOrderInsertFailedEvent &a, UpsideOrderInsertFailedEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.upsideErrorCode, b.upsideErrorCode);
  swap(a.upsideErrorMsg, b.upsideErrorMsg);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.mappingErrorCode, b.mappingErrorCode);
  swap(a.__isset, b.__isset);
}

const char* UpsideOrderDeleteFailedEvent::ascii_fingerprint = "47A9BF2CA79D378F874FA6C240C1804B";
const uint8_t UpsideOrderDeleteFailedEvent::binary_fingerprint[16] = {0x47,0xA9,0xBF,0x2C,0xA7,0x9D,0x37,0x8F,0x87,0x4F,0xA6,0xC2,0x40,0xC1,0x80,0x4B};

uint32_t UpsideOrderDeleteFailedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upsideErrorCode);
          this->__isset.upsideErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsideErrorMsg);
          this->__isset.upsideErrorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mappingErrorCode);
          this->__isset.mappingErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideOrderDeleteFailedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideOrderDeleteFailedEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorCode) {
    xfer += oprot->writeFieldBegin("upsideErrorCode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->upsideErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorMsg) {
    xfer += oprot->writeFieldBegin("upsideErrorMsg", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->upsideErrorMsg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mappingErrorCode) {
    xfer += oprot->writeFieldBegin("mappingErrorCode", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->mappingErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideOrderDeleteFailedEvent &a, UpsideOrderDeleteFailedEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.upsideErrorCode, b.upsideErrorCode);
  swap(a.upsideErrorMsg, b.upsideErrorMsg);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.mappingErrorCode, b.mappingErrorCode);
  swap(a.__isset, b.__isset);
}

const char* UpsideNotifyForwardStateEvent::ascii_fingerprint = "EB77EB7B8D6DDE0C014BBA0E8A301138";
const uint8_t UpsideNotifyForwardStateEvent::binary_fingerprint[16] = {0xEB,0x77,0xEB,0x7B,0x8D,0x6D,0xDE,0x0C,0x01,0x4B,0xBA,0x0E,0x8A,0x30,0x11,0x38};

uint32_t UpsideNotifyForwardStateEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->forwardStateInfo.read(iprot);
          this->__isset.forwardStateInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receivedTimestampMs);
          this->__isset.receivedTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideNotifyForwardStateEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideNotifyForwardStateEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forwardStateInfo) {
    xfer += oprot->writeFieldBegin("forwardStateInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->forwardStateInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivedTimestampMs) {
    xfer += oprot->writeFieldBegin("receivedTimestampMs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->receivedTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideNotifyForwardStateEvent &a, UpsideNotifyForwardStateEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.forwardStateInfo, b.forwardStateInfo);
  swap(a.receivedTimestampMs, b.receivedTimestampMs);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.__isset, b.__isset);
}

const char* UpsideNotifyForwardTradeEvent::ascii_fingerprint = "240017ABBF566682E0F1A707D784EB3B";
const uint8_t UpsideNotifyForwardTradeEvent::binary_fingerprint[16] = {0x24,0x00,0x17,0xAB,0xBF,0x56,0x66,0x82,0xE0,0xF1,0xA7,0x07,0xD7,0x84,0xEB,0x3B};

uint32_t UpsideNotifyForwardTradeEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->forwardTradeLegInfo.read(iprot);
          this->__isset.forwardTradeLegInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->receivedTimestampMs);
          this->__isset.receivedTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->forwardTradeLegContractSummary.read(iprot);
          this->__isset.forwardTradeLegContractSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideNotifyForwardTradeEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideNotifyForwardTradeEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forwardTradeLegInfo) {
    xfer += oprot->writeFieldBegin("forwardTradeLegInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->forwardTradeLegInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.receivedTimestampMs) {
    xfer += oprot->writeFieldBegin("receivedTimestampMs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->receivedTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.forwardTradeLegContractSummary) {
    xfer += oprot->writeFieldBegin("forwardTradeLegContractSummary", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->forwardTradeLegContractSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideNotifyForwardTradeEvent &a, UpsideNotifyForwardTradeEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.forwardTradeLegInfo, b.forwardTradeLegInfo);
  swap(a.receivedTimestampMs, b.receivedTimestampMs);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.forwardTradeLegContractSummary, b.forwardTradeLegContractSummary);
  swap(a.__isset, b.__isset);
}

const char* UpsideNotifySyncStateEvent::ascii_fingerprint = "61170E34F95561530B6347C24D5EF3C0";
const uint8_t UpsideNotifySyncStateEvent::binary_fingerprint[16] = {0x61,0x17,0x0E,0x34,0xF9,0x55,0x61,0x53,0x0B,0x63,0x47,0xC2,0x4D,0x5E,0xF3,0xC0};

uint32_t UpsideNotifySyncStateEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syncStateInfo.read(iprot);
          this->__isset.syncStateInfo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->syncReqTimestampMs);
          this->__isset.syncReqTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->syncRespTimestampMs);
          this->__isset.syncRespTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upsideErrorCode);
          this->__isset.upsideErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsideErrorMsg);
          this->__isset.upsideErrorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mappingErrorCode);
          this->__isset.mappingErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideNotifySyncStateEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideNotifySyncStateEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncStateInfo) {
    xfer += oprot->writeFieldBegin("syncStateInfo", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->syncStateInfo.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncReqTimestampMs) {
    xfer += oprot->writeFieldBegin("syncReqTimestampMs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->syncReqTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncRespTimestampMs) {
    xfer += oprot->writeFieldBegin("syncRespTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->syncRespTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorCode) {
    xfer += oprot->writeFieldBegin("upsideErrorCode", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->upsideErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorMsg) {
    xfer += oprot->writeFieldBegin("upsideErrorMsg", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->upsideErrorMsg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mappingErrorCode) {
    xfer += oprot->writeFieldBegin("mappingErrorCode", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32(this->mappingErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideNotifySyncStateEvent &a, UpsideNotifySyncStateEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.syncStateInfo, b.syncStateInfo);
  swap(a.syncReqTimestampMs, b.syncReqTimestampMs);
  swap(a.syncRespTimestampMs, b.syncRespTimestampMs);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.upsideErrorCode, b.upsideErrorCode);
  swap(a.upsideErrorMsg, b.upsideErrorMsg);
  swap(a.mappingErrorCode, b.mappingErrorCode);
  swap(a.__isset, b.__isset);
}

const char* UpsideNotifySyncTradeEvent::ascii_fingerprint = "5631AD50CEECBE48EEBC4D228022C135";
const uint8_t UpsideNotifySyncTradeEvent::binary_fingerprint[16] = {0x56,0x31,0xAD,0x50,0xCE,0xEC,0xBE,0x48,0xEE,0xBC,0x4D,0x22,0x80,0x22,0xC1,0x35};

uint32_t UpsideNotifySyncTradeEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->syncTradeLegInfos.clear();
            uint32_t _size13;
            ::apache::thrift::protocol::TType _etype16;
            xfer += iprot->readListBegin(_etype16, _size13);
            this->syncTradeLegInfos.resize(_size13);
            uint32_t _i17;
            for (_i17 = 0; _i17 < _size13; ++_i17)
            {
              xfer += this->syncTradeLegInfos[_i17].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.syncTradeLegInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->syncReqTimestampMs);
          this->__isset.syncReqTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->syncRespTimestampMs);
          this->__isset.syncRespTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->eventCreateTimestampMs);
          this->__isset.eventCreateTimestampMs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->upsideErrorCode);
          this->__isset.upsideErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->upsideErrorMsg);
          this->__isset.upsideErrorMsg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mappingErrorCode);
          this->__isset.mappingErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->syncTradeLegContractSummary.read(iprot);
          this->__isset.syncTradeLegContractSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsideNotifySyncTradeEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsideNotifySyncTradeEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncTradeLegInfos) {
    xfer += oprot->writeFieldBegin("syncTradeLegInfos", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->syncTradeLegInfos.size()));
      std::vector< ::xueqiao::trade::hosting::HostingExecTradeLegInfo> ::const_iterator _iter18;
      for (_iter18 = this->syncTradeLegInfos.begin(); _iter18 != this->syncTradeLegInfos.end(); ++_iter18)
      {
        xfer += (*_iter18).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncReqTimestampMs) {
    xfer += oprot->writeFieldBegin("syncReqTimestampMs", ::apache::thrift::protocol::T_I64, 3);
    xfer += oprot->writeI64(this->syncReqTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncRespTimestampMs) {
    xfer += oprot->writeFieldBegin("syncRespTimestampMs", ::apache::thrift::protocol::T_I64, 4);
    xfer += oprot->writeI64(this->syncRespTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.eventCreateTimestampMs) {
    xfer += oprot->writeFieldBegin("eventCreateTimestampMs", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->eventCreateTimestampMs);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorCode) {
    xfer += oprot->writeFieldBegin("upsideErrorCode", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32(this->upsideErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.upsideErrorMsg) {
    xfer += oprot->writeFieldBegin("upsideErrorMsg", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->upsideErrorMsg);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mappingErrorCode) {
    xfer += oprot->writeFieldBegin("mappingErrorCode", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->mappingErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.syncTradeLegContractSummary) {
    xfer += oprot->writeFieldBegin("syncTradeLegContractSummary", ::apache::thrift::protocol::T_STRUCT, 9);
    xfer += this->syncTradeLegContractSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsideNotifySyncTradeEvent &a, UpsideNotifySyncTradeEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.syncTradeLegInfos, b.syncTradeLegInfos);
  swap(a.syncReqTimestampMs, b.syncReqTimestampMs);
  swap(a.syncRespTimestampMs, b.syncRespTimestampMs);
  swap(a.eventCreateTimestampMs, b.eventCreateTimestampMs);
  swap(a.upsideErrorCode, b.upsideErrorCode);
  swap(a.upsideErrorMsg, b.upsideErrorMsg);
  swap(a.mappingErrorCode, b.mappingErrorCode);
  swap(a.syncTradeLegContractSummary, b.syncTradeLegContractSummary);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderCreatedEvent::ascii_fingerprint = "2A0070080F59C54A1B0253181E5BE30C";
const uint8_t ExecOrderCreatedEvent::binary_fingerprint[16] = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

uint32_t ExecOrderCreatedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->createdOrder.read(iprot);
          this->__isset.createdOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderCreatedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderCreatedEvent");

  if (this->__isset.createdOrder) {
    xfer += oprot->writeFieldBegin("createdOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->createdOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderCreatedEvent &a, ExecOrderCreatedEvent &b) {
  using ::std::swap;
  swap(a.createdOrder, b.createdOrder);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderVerifySuccessEvent::ascii_fingerprint = "2A0070080F59C54A1B0253181E5BE30C";
const uint8_t ExecOrderVerifySuccessEvent::binary_fingerprint[16] = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

uint32_t ExecOrderVerifySuccessEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->verifySuccessOrder.read(iprot);
          this->__isset.verifySuccessOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderVerifySuccessEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderVerifySuccessEvent");

  if (this->__isset.verifySuccessOrder) {
    xfer += oprot->writeFieldBegin("verifySuccessOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->verifySuccessOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderVerifySuccessEvent &a, ExecOrderVerifySuccessEvent &b) {
  using ::std::swap;
  swap(a.verifySuccessOrder, b.verifySuccessOrder);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderVerifyFailedEvent::ascii_fingerprint = "2A0070080F59C54A1B0253181E5BE30C";
const uint8_t ExecOrderVerifyFailedEvent::binary_fingerprint[16] = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

uint32_t ExecOrderVerifyFailedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->verifyFailedOrder.read(iprot);
          this->__isset.verifyFailedOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderVerifyFailedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderVerifyFailedEvent");

  if (this->__isset.verifyFailedOrder) {
    xfer += oprot->writeFieldBegin("verifyFailedOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->verifyFailedOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderVerifyFailedEvent &a, ExecOrderVerifyFailedEvent &b) {
  using ::std::swap;
  swap(a.verifyFailedOrder, b.verifyFailedOrder);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderRunningEvent::ascii_fingerprint = "2A0070080F59C54A1B0253181E5BE30C";
const uint8_t ExecOrderRunningEvent::binary_fingerprint[16] = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

uint32_t ExecOrderRunningEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->runningOrder.read(iprot);
          this->__isset.runningOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderRunningEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderRunningEvent");

  if (this->__isset.runningOrder) {
    xfer += oprot->writeFieldBegin("runningOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->runningOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderRunningEvent &a, ExecOrderRunningEvent &b) {
  using ::std::swap;
  swap(a.runningOrder, b.runningOrder);
  swap(a.__isset, b.__isset);
}

const char* ExecTradeListChangedEvent::ascii_fingerprint = "4FF06CCE21AFB35D3F42607ECF6FE7BF";
const uint8_t ExecTradeListChangedEvent::binary_fingerprint[16] = {0x4F,0xF0,0x6C,0xCE,0x21,0xAF,0xB3,0x5D,0x3F,0x42,0x60,0x7E,0xCF,0x6F,0xE7,0xBF};

uint32_t ExecTradeListChangedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->execOrder.read(iprot);
          this->__isset.execOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->newTradeList.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->newTradeList.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += this->newTradeList[_i23].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.newTradeList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecTradeListChangedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecTradeListChangedEvent");

  if (this->__isset.execOrder) {
    xfer += oprot->writeFieldBegin("execOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->execOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.newTradeList) {
    xfer += oprot->writeFieldBegin("newTradeList", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->newTradeList.size()));
      std::vector< ::xueqiao::trade::hosting::HostingExecTrade> ::const_iterator _iter24;
      for (_iter24 = this->newTradeList.begin(); _iter24 != this->newTradeList.end(); ++_iter24)
      {
        xfer += (*_iter24).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecTradeListChangedEvent &a, ExecTradeListChangedEvent &b) {
  using ::std::swap;
  swap(a.execOrder, b.execOrder);
  swap(a.newTradeList, b.newTradeList);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderExpiredEvent::ascii_fingerprint = "2A0070080F59C54A1B0253181E5BE30C";
const uint8_t ExecOrderExpiredEvent::binary_fingerprint[16] = {0x2A,0x00,0x70,0x08,0x0F,0x59,0xC5,0x4A,0x1B,0x02,0x53,0x18,0x1E,0x5B,0xE3,0x0C};

uint32_t ExecOrderExpiredEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->expiredOrder.read(iprot);
          this->__isset.expiredOrder = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderExpiredEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderExpiredEvent");

  if (this->__isset.expiredOrder) {
    xfer += oprot->writeFieldBegin("expiredOrder", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->expiredOrder.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderExpiredEvent &a, ExecOrderExpiredEvent &b) {
  using ::std::swap;
  swap(a.expiredOrder, b.expiredOrder);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderRevokeTimeoutEvent::ascii_fingerprint = "148F3AAAC1D9859963D5E800D187BF26";
const uint8_t ExecOrderRevokeTimeoutEvent::binary_fingerprint[16] = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

uint32_t ExecOrderRevokeTimeoutEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->execOrderId);
          this->__isset.execOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderRevokeTimeoutEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderRevokeTimeoutEvent");

  if (this->__isset.execOrderId) {
    xfer += oprot->writeFieldBegin("execOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->execOrderId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderRevokeTimeoutEvent &a, ExecOrderRevokeTimeoutEvent &b) {
  using ::std::swap;
  swap(a.execOrderId, b.execOrderId);
  swap(a.__isset, b.__isset);
}

const char* ExecOrderGuardEvent::ascii_fingerprint = "E135AA063A369B5C1AB15DE43A0E2B55";
const uint8_t ExecOrderGuardEvent::binary_fingerprint[16] = {0xE1,0x35,0xAA,0x06,0x3A,0x36,0x9B,0x5C,0x1A,0xB1,0x5D,0xE4,0x3A,0x0E,0x2B,0x55};

uint32_t ExecOrderGuardEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->guardExecOrderId);
          this->__isset.guardExecOrderId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->guardType = (ExecOrderGuardType::type)ecast25;
          this->__isset.guardType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ExecOrderGuardEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ExecOrderGuardEvent");

  if (this->__isset.guardExecOrderId) {
    xfer += oprot->writeFieldBegin("guardExecOrderId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->guardExecOrderId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.guardType) {
    xfer += oprot->writeFieldBegin("guardType", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->guardType);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ExecOrderGuardEvent &a, ExecOrderGuardEvent &b) {
  using ::std::swap;
  swap(a.guardExecOrderId, b.guardExecOrderId);
  swap(a.guardType, b.guardType);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
