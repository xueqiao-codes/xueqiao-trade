/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_storage_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace storage { namespace thriftapi {

const char* TradeAccountInvalidDescription::ascii_fingerprint = "F274D66FD49A613E4D8C874F5A58A038";
const uint8_t TradeAccountInvalidDescription::binary_fingerprint[16] = {0xF2,0x74,0xD6,0x6F,0xD4,0x9A,0x61,0x3E,0x4D,0x8C,0x87,0x4F,0x5A,0x58,0xA0,0x38};

uint32_t TradeAccountInvalidDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->invalidErrorCode);
          this->__isset.invalidErrorCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->apiRetCode);
          this->__isset.apiRetCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->invalidReason);
          this->__isset.invalidReason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TradeAccountInvalidDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TradeAccountInvalidDescription");

  if (this->__isset.invalidErrorCode) {
    xfer += oprot->writeFieldBegin("invalidErrorCode", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->invalidErrorCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.apiRetCode) {
    xfer += oprot->writeFieldBegin("apiRetCode", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->apiRetCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.invalidReason) {
    xfer += oprot->writeFieldBegin("invalidReason", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->invalidReason);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TradeAccountInvalidDescription &a, TradeAccountInvalidDescription &b) {
  using ::std::swap;
  swap(a.invalidErrorCode, b.invalidErrorCode);
  swap(a.apiRetCode, b.apiRetCode);
  swap(a.invalidReason, b.invalidReason);
  swap(a.__isset, b.__isset);
}

const char* UpdateConfigDescription::ascii_fingerprint = "CB2E67103B69C59024C721D71893FCE5";
const uint8_t UpdateConfigDescription::binary_fingerprint[16] = {0xCB,0x2E,0x67,0x10,0x3B,0x69,0xC5,0x90,0x24,0xC7,0x21,0xD7,0x18,0x93,0xFC,0xE5};

uint32_t UpdateConfigDescription::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->configArea);
          this->__isset.configArea = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->configKey);
          this->__isset.configKey = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configVersion);
          this->__isset.configVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->configContent);
          this->__isset.configContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->notifyEventClassName);
          this->__isset.notifyEventClassName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->notifyEventBinary);
          this->__isset.notifyEventBinary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpdateConfigDescription::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpdateConfigDescription");

  if (this->__isset.configArea) {
    xfer += oprot->writeFieldBegin("configArea", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->configArea);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configKey) {
    xfer += oprot->writeFieldBegin("configKey", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->configKey);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configVersion) {
    xfer += oprot->writeFieldBegin("configVersion", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->configVersion);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.configContent) {
    xfer += oprot->writeFieldBegin("configContent", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeBinary(this->configContent);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notifyEventClassName) {
    xfer += oprot->writeFieldBegin("notifyEventClassName", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->notifyEventClassName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.notifyEventBinary) {
    xfer += oprot->writeFieldBegin("notifyEventBinary", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeBinary(this->notifyEventBinary);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpdateConfigDescription &a, UpdateConfigDescription &b) {
  using ::std::swap;
  swap(a.configArea, b.configArea);
  swap(a.configKey, b.configKey);
  swap(a.configVersion, b.configVersion);
  swap(a.configContent, b.configContent);
  swap(a.notifyEventClassName, b.notifyEventClassName);
  swap(a.notifyEventBinary, b.notifyEventBinary);
  swap(a.__isset, b.__isset);
}

}}}}} // namespace
