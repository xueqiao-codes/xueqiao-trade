/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "contract_standard_types.h"

#include <algorithm>

namespace xueqiao { namespace contract { namespace standard {

int _kSledCommodityTypeValues[] = {
  SledCommodityType::NONE,
  SledCommodityType::FUTURES,
  SledCommodityType::OPTION,
  SledCommodityType::SPOT,
  SledCommodityType::SPREAD_MONTH,
  SledCommodityType::SPREAD_COMMODITY,
  SledCommodityType::BUL,
  SledCommodityType::BER,
  SledCommodityType::STD,
  SledCommodityType::STG,
  SledCommodityType::PRT,
  SledCommodityType::DIRECTFOREX,
  SledCommodityType::INDIRECTFOREX,
  SledCommodityType::CROSSFOREX,
  SledCommodityType::INDEX,
  SledCommodityType::STOCK
};
const char* _kSledCommodityTypeNames[] = {
  "NONE",
  "FUTURES",
  "OPTION",
  "SPOT",
  "SPREAD_MONTH",
  "SPREAD_COMMODITY",
  "BUL",
  "BER",
  "STD",
  "STG",
  "PRT",
  "DIRECTFOREX",
  "INDIRECTFOREX",
  "CROSSFOREX",
  "INDEX",
  "STOCK"
};
const std::map<int, const char*> _SledCommodityType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(16, _kSledCommodityTypeValues, _kSledCommodityTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCmbDirectValues[] = {
  CmbDirect::NONE,
  CmbDirect::FIRST,
  CmbDirect::SECOND
};
const char* _kCmbDirectNames[] = {
  "NONE",
  "FIRST",
  "SECOND"
};
const std::map<int, const char*> _CmbDirect_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kCmbDirectValues, _kCmbDirectNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kDeliveryModeValues[] = {
  DeliveryMode::NONE,
  DeliveryMode::GOODS,
  DeliveryMode::CASH,
  DeliveryMode::EXECUTE,
  DeliveryMode::ABANDON,
  DeliveryMode::HKF
};
const char* _kDeliveryModeNames[] = {
  "NONE",
  "GOODS",
  "CASH",
  "EXECUTE",
  "ABANDON",
  "HKF"
};
const std::map<int, const char*> _DeliveryMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kDeliveryModeValues, _kDeliveryModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCommodityStateValues[] = {
  CommodityState::NONE,
  CommodityState::TRADEABLE,
  CommodityState::NO_TRADEABLE,
  CommodityState::CLOSE_ONLY
};
const char* _kCommodityStateNames[] = {
  "NONE",
  "TRADEABLE",
  "NO_TRADEABLE",
  "CLOSE_ONLY"
};
const std::map<int, const char*> _CommodityState_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(4, _kCommodityStateValues, _kCommodityStateNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kContractStatusValues[] = {
  ContractStatus::NORMAL,
  ContractStatus::EXPIRED
};
const char* _kContractStatusNames[] = {
  "NORMAL",
  "EXPIRED"
};
const std::map<int, const char*> _ContractStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kContractStatusValues, _kContractStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kCalculateModeValues[] = {
  CalculateMode::COMBINE,
  CalculateMode::PERCENTAGE,
  CalculateMode::QUOTA,
  CalculateMode::CHAPERCENTAGE,
  CalculateMode::CHAQUOTA,
  CalculateMode::DISCOUNT
};
const char* _kCalculateModeNames[] = {
  "COMBINE",
  "PERCENTAGE",
  "QUOTA",
  "CHAPERCENTAGE",
  "CHAQUOTA",
  "DISCOUNT"
};
const std::map<int, const char*> _CalculateMode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(6, _kCalculateModeValues, _kCalculateModeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kExchangeOperatingMicTypeValues[] = {
  ExchangeOperatingMicType::OPERATING_MIC,
  ExchangeOperatingMicType::SEGMENT_MIC
};
const char* _kExchangeOperatingMicTypeNames[] = {
  "OPERATING_MIC",
  "SEGMENT_MIC"
};
const std::map<int, const char*> _ExchangeOperatingMicType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kExchangeOperatingMicTypeValues, _kExchangeOperatingMicTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTechPlatformEnvValues[] = {
  TechPlatformEnv::NONE,
  TechPlatformEnv::REAL,
  TechPlatformEnv::SIM
};
const char* _kTechPlatformEnvNames[] = {
  "NONE",
  "REAL",
  "SIM"
};
const std::map<int, const char*> _TechPlatformEnv_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kTechPlatformEnvValues, _kTechPlatformEnvNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kTechPlatformValues[] = {
  TechPlatform::NONE,
  TechPlatform::CTP,
  TechPlatform::ESUNNY,
  TechPlatform::SP,
  TechPlatform::ESUNNY_3
};
const char* _kTechPlatformNames[] = {
  "NONE",
  "CTP",
  "ESUNNY",
  "SP",
  "ESUNNY_3"
};
const std::map<int, const char*> _TechPlatform_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(5, _kTechPlatformValues, _kTechPlatformNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

int _kSledContractErrorCodeValues[] = {
  SledContractErrorCode::SLED_COMMODITY_NOT_FOUND,
  SledContractErrorCode::COMMODITY_MAP_NOT_FOUND,
  SledContractErrorCode::SLED_EXCHANGE_NOT_FOUND,
  SledContractErrorCode::COMMODITY_MAP_UPDATE_FORBID,
  SledContractErrorCode::SLED_COMMODITY_EXISTS,
  SledContractErrorCode::SLED_EXCHANGE_EXISTS,
  SledContractErrorCode::CONTRACT_VERSION_NOT_FOUND,
  SledContractErrorCode::COMMODITY_MAP_EXISTS,
  SledContractErrorCode::SLED_CONTRACT_NOT_FOUND
};
const char* _kSledContractErrorCodeNames[] = {
  "SLED_COMMODITY_NOT_FOUND",
  "COMMODITY_MAP_NOT_FOUND",
  "SLED_EXCHANGE_NOT_FOUND",
  "COMMODITY_MAP_UPDATE_FORBID",
  "SLED_COMMODITY_EXISTS",
  "SLED_EXCHANGE_EXISTS",
  "CONTRACT_VERSION_NOT_FOUND",
  "COMMODITY_MAP_EXISTS",
  "SLED_CONTRACT_NOT_FOUND"
};
const std::map<int, const char*> _SledContractErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kSledContractErrorCodeValues, _kSledContractErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* SledExchange::ascii_fingerprint = "CCF16AD99237ADE74FD1141A9AC4D7F8";
const uint8_t SledExchange::binary_fingerprint[16] = {0xCC,0xF1,0x6A,0xD9,0x92,0x37,0xAD,0xE7,0x4F,0xD1,0x14,0x1A,0x9A,0xC4,0xD7,0xF8};

uint32_t SledExchange::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledExchangeId);
          this->__isset.sledExchangeId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchangeMic);
          this->__isset.exchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->country);
          this->__isset.country = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->countryCode);
          this->__isset.countryCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->operatingMic);
          this->__isset.operatingMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->operatingMicType = (ExchangeOperatingMicType::type)ecast0;
          this->__isset.operatingMicType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nameInstitution);
          this->__isset.nameInstitution = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->acronym);
          this->__isset.acronym = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city);
          this->__isset.city = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->website);
          this->__isset.website = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cnName);
          this->__isset.cnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cnAcronym);
          this->__isset.cnAcronym = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeStartTimestamp);
          this->__isset.activeStartTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeEndTimestamp);
          this->__isset.activeEndTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModityTimestamp);
          this->__isset.lastModityTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledExchange::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledExchange");

  if (this->__isset.sledExchangeId) {
    xfer += oprot->writeFieldBegin("sledExchangeId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->sledExchangeId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchangeMic) {
    xfer += oprot->writeFieldBegin("exchangeMic", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->exchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.country) {
    xfer += oprot->writeFieldBegin("country", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->country);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.countryCode) {
    xfer += oprot->writeFieldBegin("countryCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->countryCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operatingMic) {
    xfer += oprot->writeFieldBegin("operatingMic", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->operatingMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.operatingMicType) {
    xfer += oprot->writeFieldBegin("operatingMicType", ::apache::thrift::protocol::T_I32, 6);
    xfer += oprot->writeI32((int32_t)this->operatingMicType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.nameInstitution) {
    xfer += oprot->writeFieldBegin("nameInstitution", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->nameInstitution);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.acronym) {
    xfer += oprot->writeFieldBegin("acronym", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->acronym);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.city) {
    xfer += oprot->writeFieldBegin("city", ::apache::thrift::protocol::T_STRING, 9);
    xfer += oprot->writeString(this->city);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.website) {
    xfer += oprot->writeFieldBegin("website", ::apache::thrift::protocol::T_STRING, 10);
    xfer += oprot->writeString(this->website);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cnName) {
    xfer += oprot->writeFieldBegin("cnName", ::apache::thrift::protocol::T_STRING, 11);
    xfer += oprot->writeString(this->cnName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cnAcronym) {
    xfer += oprot->writeFieldBegin("cnAcronym", ::apache::thrift::protocol::T_STRING, 12);
    xfer += oprot->writeString(this->cnAcronym);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeStartTimestamp) {
    xfer += oprot->writeFieldBegin("activeStartTimestamp", ::apache::thrift::protocol::T_I64, 32);
    xfer += oprot->writeI64(this->activeStartTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeEndTimestamp) {
    xfer += oprot->writeFieldBegin("activeEndTimestamp", ::apache::thrift::protocol::T_I64, 33);
    xfer += oprot->writeI64(this->activeEndTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModityTimestamp) {
    xfer += oprot->writeFieldBegin("lastModityTimestamp", ::apache::thrift::protocol::T_I64, 41);
    xfer += oprot->writeI64(this->lastModityTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledExchange &a, SledExchange &b) {
  using ::std::swap;
  swap(a.sledExchangeId, b.sledExchangeId);
  swap(a.exchangeMic, b.exchangeMic);
  swap(a.country, b.country);
  swap(a.countryCode, b.countryCode);
  swap(a.operatingMic, b.operatingMic);
  swap(a.operatingMicType, b.operatingMicType);
  swap(a.nameInstitution, b.nameInstitution);
  swap(a.acronym, b.acronym);
  swap(a.city, b.city);
  swap(a.website, b.website);
  swap(a.cnName, b.cnName);
  swap(a.cnAcronym, b.cnAcronym);
  swap(a.activeStartTimestamp, b.activeStartTimestamp);
  swap(a.activeEndTimestamp, b.activeEndTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModityTimestamp, b.lastModityTimestamp);
  swap(a.__isset, b.__isset);
}

const char* SledCommodityConfig::ascii_fingerprint = "4C9CFFBA25D9C54557B074D1D0F70722";
const uint8_t SledCommodityConfig::binary_fingerprint[16] = {0x4C,0x9C,0xFF,0xBA,0x25,0xD9,0xC5,0x45,0x57,0xB0,0x74,0xD1,0xD0,0xF7,0x07,0x22};

uint32_t SledCommodityConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->configId);
          this->__isset.configId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          this->deliveryMode = (DeliveryMode::type)ecast1;
          this->__isset.deliveryMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->deliveryDays);
          this->__isset.deliveryDays = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxSingleOrderVol);
          this->__isset.maxSingleOrderVol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxHoldVol);
          this->__isset.maxHoldVol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          this->commissionCalculateMode = (CalculateMode::type)ecast2;
          this->__isset.commissionCalculateMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->openCloseFee);
          this->__isset.openCloseFee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          this->marginCalculateMode = (CalculateMode::type)ecast3;
          this->__isset.marginCalculateMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->initialMargin);
          this->__isset.initialMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maintenanceMargin);
          this->__isset.maintenanceMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sellInitialMargin);
          this->__isset.sellInitialMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sellMaintenanceMargin);
          this->__isset.sellMaintenanceMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lockMargin);
          this->__isset.lockMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeStartTimestamp);
          this->__isset.activeStartTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeEndTimestamp);
          this->__isset.activeEndTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModityTimestamp);
          this->__isset.lastModityTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledCommodityConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledCommodityConfig");

  if (this->__isset.configId) {
    xfer += oprot->writeFieldBegin("configId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->configId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deliveryMode) {
    xfer += oprot->writeFieldBegin("deliveryMode", ::apache::thrift::protocol::T_I32, 12);
    xfer += oprot->writeI32((int32_t)this->deliveryMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deliveryDays) {
    xfer += oprot->writeFieldBegin("deliveryDays", ::apache::thrift::protocol::T_I32, 13);
    xfer += oprot->writeI32(this->deliveryDays);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxSingleOrderVol) {
    xfer += oprot->writeFieldBegin("maxSingleOrderVol", ::apache::thrift::protocol::T_I32, 17);
    xfer += oprot->writeI32(this->maxSingleOrderVol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maxHoldVol) {
    xfer += oprot->writeFieldBegin("maxHoldVol", ::apache::thrift::protocol::T_I32, 18);
    xfer += oprot->writeI32(this->maxHoldVol);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commissionCalculateMode) {
    xfer += oprot->writeFieldBegin("commissionCalculateMode", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32((int32_t)this->commissionCalculateMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openCloseFee) {
    xfer += oprot->writeFieldBegin("openCloseFee", ::apache::thrift::protocol::T_DOUBLE, 21);
    xfer += oprot->writeDouble(this->openCloseFee);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.marginCalculateMode) {
    xfer += oprot->writeFieldBegin("marginCalculateMode", ::apache::thrift::protocol::T_I32, 26);
    xfer += oprot->writeI32((int32_t)this->marginCalculateMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.initialMargin) {
    xfer += oprot->writeFieldBegin("initialMargin", ::apache::thrift::protocol::T_DOUBLE, 27);
    xfer += oprot->writeDouble(this->initialMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maintenanceMargin) {
    xfer += oprot->writeFieldBegin("maintenanceMargin", ::apache::thrift::protocol::T_DOUBLE, 28);
    xfer += oprot->writeDouble(this->maintenanceMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellInitialMargin) {
    xfer += oprot->writeFieldBegin("sellInitialMargin", ::apache::thrift::protocol::T_DOUBLE, 29);
    xfer += oprot->writeDouble(this->sellInitialMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellMaintenanceMargin) {
    xfer += oprot->writeFieldBegin("sellMaintenanceMargin", ::apache::thrift::protocol::T_DOUBLE, 30);
    xfer += oprot->writeDouble(this->sellMaintenanceMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lockMargin) {
    xfer += oprot->writeFieldBegin("lockMargin", ::apache::thrift::protocol::T_DOUBLE, 31);
    xfer += oprot->writeDouble(this->lockMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeStartTimestamp) {
    xfer += oprot->writeFieldBegin("activeStartTimestamp", ::apache::thrift::protocol::T_I64, 32);
    xfer += oprot->writeI64(this->activeStartTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeEndTimestamp) {
    xfer += oprot->writeFieldBegin("activeEndTimestamp", ::apache::thrift::protocol::T_I64, 33);
    xfer += oprot->writeI64(this->activeEndTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModityTimestamp) {
    xfer += oprot->writeFieldBegin("lastModityTimestamp", ::apache::thrift::protocol::T_I64, 41);
    xfer += oprot->writeI64(this->lastModityTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledCommodityConfig &a, SledCommodityConfig &b) {
  using ::std::swap;
  swap(a.configId, b.configId);
  swap(a.deliveryMode, b.deliveryMode);
  swap(a.deliveryDays, b.deliveryDays);
  swap(a.maxSingleOrderVol, b.maxSingleOrderVol);
  swap(a.maxHoldVol, b.maxHoldVol);
  swap(a.commissionCalculateMode, b.commissionCalculateMode);
  swap(a.openCloseFee, b.openCloseFee);
  swap(a.marginCalculateMode, b.marginCalculateMode);
  swap(a.initialMargin, b.initialMargin);
  swap(a.maintenanceMargin, b.maintenanceMargin);
  swap(a.sellInitialMargin, b.sellInitialMargin);
  swap(a.sellMaintenanceMargin, b.sellMaintenanceMargin);
  swap(a.lockMargin, b.lockMargin);
  swap(a.activeStartTimestamp, b.activeStartTimestamp);
  swap(a.activeEndTimestamp, b.activeEndTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModityTimestamp, b.lastModityTimestamp);
  swap(a.__isset, b.__isset);
}

const char* SledCommodity::ascii_fingerprint = "8F1F7529523F3CD91BFD380B20F4B36E";
const uint8_t SledCommodity::binary_fingerprint[16] = {0x8F,0x1F,0x75,0x29,0x52,0x3F,0x3C,0xD9,0x1B,0xFD,0x38,0x0B,0x20,0xF4,0xB3,0x6E};

uint32_t SledCommodity::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchangeMic);
          this->__isset.exchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          this->sledCommodityType = (SledCommodityType::type)ecast4;
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->relateCommodityIds.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->relateCommodityIds.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readI32(this->relateCommodityIds[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.relateCommodityIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tradeCurrency);
          this->__isset.tradeCurrency = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timezone);
          this->__isset.timezone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->contractSize);
          this->__isset.contractSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->tickSize);
          this->__isset.tickSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->denominator);
          this->__isset.denominator = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->cmbDirect = (CmbDirect::type)ecast10;
          this->__isset.cmbDirect = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast11;
          xfer += iprot->readI32(ecast11);
          this->commodityState = (CommodityState::type)ecast11;
          this->__isset.commodityState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sledCommodityConfig.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->sledCommodityConfig.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += this->sledCommodityConfig[_i16].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sledCommodityConfig = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->engName);
          this->__isset.engName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cnName);
          this->__isset.cnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tcName);
          this->__isset.tcName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeStartTimestamp);
          this->__isset.activeStartTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeEndTimestamp);
          this->__isset.activeEndTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModityTimestamp);
          this->__isset.lastModityTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledCommodity::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledCommodity");

  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchangeMic) {
    xfer += oprot->writeFieldBegin("exchangeMic", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->exchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.relateCommodityIds) {
    xfer += oprot->writeFieldBegin("relateCommodityIds", ::apache::thrift::protocol::T_LIST, 5);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->relateCommodityIds.size()));
      std::vector<int32_t> ::const_iterator _iter17;
      for (_iter17 = this->relateCommodityIds.begin(); _iter17 != this->relateCommodityIds.end(); ++_iter17)
      {
        xfer += oprot->writeI32((*_iter17));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tradeCurrency) {
    xfer += oprot->writeFieldBegin("tradeCurrency", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->tradeCurrency);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timezone) {
    xfer += oprot->writeFieldBegin("timezone", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->timezone);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractSize) {
    xfer += oprot->writeFieldBegin("contractSize", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->contractSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tickSize) {
    xfer += oprot->writeFieldBegin("tickSize", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->tickSize);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.denominator) {
    xfer += oprot->writeFieldBegin("denominator", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->denominator);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cmbDirect) {
    xfer += oprot->writeFieldBegin("cmbDirect", ::apache::thrift::protocol::T_I32, 11);
    xfer += oprot->writeI32((int32_t)this->cmbDirect);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityState) {
    xfer += oprot->writeFieldBegin("commodityState", ::apache::thrift::protocol::T_I32, 15);
    xfer += oprot->writeI32((int32_t)this->commodityState);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityConfig) {
    xfer += oprot->writeFieldBegin("sledCommodityConfig", ::apache::thrift::protocol::T_LIST, 20);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sledCommodityConfig.size()));
      std::vector<SledCommodityConfig> ::const_iterator _iter18;
      for (_iter18 = this->sledCommodityConfig.begin(); _iter18 != this->sledCommodityConfig.end(); ++_iter18)
      {
        xfer += (*_iter18).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.engName) {
    xfer += oprot->writeFieldBegin("engName", ::apache::thrift::protocol::T_STRING, 22);
    xfer += oprot->writeString(this->engName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.cnName) {
    xfer += oprot->writeFieldBegin("cnName", ::apache::thrift::protocol::T_STRING, 23);
    xfer += oprot->writeString(this->cnName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tcName) {
    xfer += oprot->writeFieldBegin("tcName", ::apache::thrift::protocol::T_STRING, 24);
    xfer += oprot->writeString(this->tcName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeStartTimestamp) {
    xfer += oprot->writeFieldBegin("activeStartTimestamp", ::apache::thrift::protocol::T_I64, 32);
    xfer += oprot->writeI64(this->activeStartTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeEndTimestamp) {
    xfer += oprot->writeFieldBegin("activeEndTimestamp", ::apache::thrift::protocol::T_I64, 33);
    xfer += oprot->writeI64(this->activeEndTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModityTimestamp) {
    xfer += oprot->writeFieldBegin("lastModityTimestamp", ::apache::thrift::protocol::T_I64, 41);
    xfer += oprot->writeI64(this->lastModityTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledCommodity &a, SledCommodity &b) {
  using ::std::swap;
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.exchangeMic, b.exchangeMic);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.relateCommodityIds, b.relateCommodityIds);
  swap(a.tradeCurrency, b.tradeCurrency);
  swap(a.timezone, b.timezone);
  swap(a.contractSize, b.contractSize);
  swap(a.tickSize, b.tickSize);
  swap(a.denominator, b.denominator);
  swap(a.cmbDirect, b.cmbDirect);
  swap(a.commodityState, b.commodityState);
  swap(a.sledCommodityConfig, b.sledCommodityConfig);
  swap(a.engName, b.engName);
  swap(a.cnName, b.cnName);
  swap(a.tcName, b.tcName);
  swap(a.activeStartTimestamp, b.activeStartTimestamp);
  swap(a.activeEndTimestamp, b.activeEndTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModityTimestamp, b.lastModityTimestamp);
  swap(a.__isset, b.__isset);
}

const char* SledContract::ascii_fingerprint = "9A8E06BA732ED7881B8875F8F443D3B2";
const uint8_t SledContract::binary_fingerprint[16] = {0x9A,0x8E,0x06,0xBA,0x73,0x2E,0xD7,0x88,0x1B,0x88,0x75,0xF8,0xF4,0x43,0xD3,0xB2};

uint32_t SledContract::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledContractId);
          this->__isset.sledContractId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->relateContractIds.clear();
            uint32_t _size19;
            ::apache::thrift::protocol::TType _etype22;
            xfer += iprot->readListBegin(_etype22, _size19);
            this->relateContractIds.resize(_size19);
            uint32_t _i23;
            for (_i23 = 0; _i23 < _size19; ++_i23)
            {
              xfer += iprot->readI32(this->relateContractIds[_i23]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.relateContractIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledTag);
          this->__isset.sledTag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contractEngName);
          this->__isset.contractEngName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contractCnName);
          this->__isset.contractCnName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contractTcName);
          this->__isset.contractTcName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->contractExpDate);
          this->__isset.contractExpDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastTradeDate);
          this->__isset.lastTradeDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->firstNoticeDate);
          this->__isset.firstNoticeDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast24;
          xfer += iprot->readI32(ecast24);
          this->platformEnv = (TechPlatformEnv::type)ecast24;
          this->__isset.platformEnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast25;
          xfer += iprot->readI32(ecast25);
          this->contractStatus = (ContractStatus::type)ecast25;
          this->__isset.contractStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeStartTimestamp);
          this->__isset.activeStartTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeEndTimestamp);
          this->__isset.activeEndTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModityTimestamp);
          this->__isset.lastModityTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledContract::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledContract");

  if (this->__isset.sledContractId) {
    xfer += oprot->writeFieldBegin("sledContractId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->sledContractId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.relateContractIds) {
    xfer += oprot->writeFieldBegin("relateContractIds", ::apache::thrift::protocol::T_LIST, 4);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->relateContractIds.size()));
      std::vector<int32_t> ::const_iterator _iter26;
      for (_iter26 = this->relateContractIds.begin(); _iter26 != this->relateContractIds.end(); ++_iter26)
      {
        xfer += oprot->writeI32((*_iter26));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledTag) {
    xfer += oprot->writeFieldBegin("sledTag", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->sledTag);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractEngName) {
    xfer += oprot->writeFieldBegin("contractEngName", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->contractEngName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractCnName) {
    xfer += oprot->writeFieldBegin("contractCnName", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->contractCnName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractTcName) {
    xfer += oprot->writeFieldBegin("contractTcName", ::apache::thrift::protocol::T_STRING, 8);
    xfer += oprot->writeString(this->contractTcName);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractExpDate) {
    xfer += oprot->writeFieldBegin("contractExpDate", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->contractExpDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastTradeDate) {
    xfer += oprot->writeFieldBegin("lastTradeDate", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->lastTradeDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.firstNoticeDate) {
    xfer += oprot->writeFieldBegin("firstNoticeDate", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->firstNoticeDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformEnv) {
    xfer += oprot->writeFieldBegin("platformEnv", ::apache::thrift::protocol::T_I32, 20);
    xfer += oprot->writeI32((int32_t)this->platformEnv);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractStatus) {
    xfer += oprot->writeFieldBegin("contractStatus", ::apache::thrift::protocol::T_I32, 21);
    xfer += oprot->writeI32((int32_t)this->contractStatus);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeStartTimestamp) {
    xfer += oprot->writeFieldBegin("activeStartTimestamp", ::apache::thrift::protocol::T_I64, 32);
    xfer += oprot->writeI64(this->activeStartTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeEndTimestamp) {
    xfer += oprot->writeFieldBegin("activeEndTimestamp", ::apache::thrift::protocol::T_I64, 33);
    xfer += oprot->writeI64(this->activeEndTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModityTimestamp) {
    xfer += oprot->writeFieldBegin("lastModityTimestamp", ::apache::thrift::protocol::T_I64, 41);
    xfer += oprot->writeI64(this->lastModityTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledContract &a, SledContract &b) {
  using ::std::swap;
  swap(a.sledContractId, b.sledContractId);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.relateContractIds, b.relateContractIds);
  swap(a.sledTag, b.sledTag);
  swap(a.contractEngName, b.contractEngName);
  swap(a.contractCnName, b.contractCnName);
  swap(a.contractTcName, b.contractTcName);
  swap(a.contractExpDate, b.contractExpDate);
  swap(a.lastTradeDate, b.lastTradeDate);
  swap(a.firstNoticeDate, b.firstNoticeDate);
  swap(a.platformEnv, b.platformEnv);
  swap(a.contractStatus, b.contractStatus);
  swap(a.activeStartTimestamp, b.activeStartTimestamp);
  swap(a.activeEndTimestamp, b.activeEndTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModityTimestamp, b.lastModityTimestamp);
  swap(a.__isset, b.__isset);
}

const char* CommodityMapping::ascii_fingerprint = "EB64A265FD4DC89EFCA5871A6883D8EB";
const uint8_t CommodityMapping::binary_fingerprint[16] = {0xEB,0x64,0xA2,0x65,0xFD,0x4D,0xC8,0x9E,0xFC,0xA5,0x87,0x1A,0x68,0x83,0xD8,0xEB};

uint32_t CommodityMapping::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->mappingId);
          this->__isset.mappingId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast27;
          xfer += iprot->readI32(ecast27);
          this->techPlatform = (TechPlatform::type)ecast27;
          this->__isset.techPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchange);
          this->__isset.exchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commodityType);
          this->__isset.commodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commodityCode);
          this->__isset.commodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->moneyRatio);
          this->__isset.moneyRatio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->brokerEntryId);
          this->__isset.brokerEntryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeStartTimestamp);
          this->__isset.activeStartTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->activeEndTimestamp);
          this->__isset.activeEndTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 40:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->createTimestamp);
          this->__isset.createTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 41:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->lastModityTimestamp);
          this->__isset.lastModityTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommodityMapping::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommodityMapping");

  if (this->__isset.mappingId) {
    xfer += oprot->writeFieldBegin("mappingId", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->mappingId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.techPlatform) {
    xfer += oprot->writeFieldBegin("techPlatform", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32((int32_t)this->techPlatform);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchange) {
    xfer += oprot->writeFieldBegin("exchange", ::apache::thrift::protocol::T_STRING, 5);
    xfer += oprot->writeString(this->exchange);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityType) {
    xfer += oprot->writeFieldBegin("commodityType", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->commodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityCode) {
    xfer += oprot->writeFieldBegin("commodityCode", ::apache::thrift::protocol::T_STRING, 7);
    xfer += oprot->writeString(this->commodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.moneyRatio) {
    xfer += oprot->writeFieldBegin("moneyRatio", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->moneyRatio);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.brokerEntryId) {
    xfer += oprot->writeFieldBegin("brokerEntryId", ::apache::thrift::protocol::T_I32, 10);
    xfer += oprot->writeI32(this->brokerEntryId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeStartTimestamp) {
    xfer += oprot->writeFieldBegin("activeStartTimestamp", ::apache::thrift::protocol::T_I64, 32);
    xfer += oprot->writeI64(this->activeStartTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.activeEndTimestamp) {
    xfer += oprot->writeFieldBegin("activeEndTimestamp", ::apache::thrift::protocol::T_I64, 33);
    xfer += oprot->writeI64(this->activeEndTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.createTimestamp) {
    xfer += oprot->writeFieldBegin("createTimestamp", ::apache::thrift::protocol::T_I64, 40);
    xfer += oprot->writeI64(this->createTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lastModityTimestamp) {
    xfer += oprot->writeFieldBegin("lastModityTimestamp", ::apache::thrift::protocol::T_I64, 41);
    xfer += oprot->writeI64(this->lastModityTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommodityMapping &a, CommodityMapping &b) {
  using ::std::swap;
  swap(a.mappingId, b.mappingId);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.techPlatform, b.techPlatform);
  swap(a.exchange, b.exchange);
  swap(a.commodityType, b.commodityType);
  swap(a.commodityCode, b.commodityCode);
  swap(a.moneyRatio, b.moneyRatio);
  swap(a.brokerEntryId, b.brokerEntryId);
  swap(a.activeStartTimestamp, b.activeStartTimestamp);
  swap(a.activeEndTimestamp, b.activeEndTimestamp);
  swap(a.createTimestamp, b.createTimestamp);
  swap(a.lastModityTimestamp, b.lastModityTimestamp);
  swap(a.__isset, b.__isset);
}

const char* ReqSledContractOption::ascii_fingerprint = "BAA9B3761265F4E4AA379BFA3B480475";
const uint8_t ReqSledContractOption::binary_fingerprint[16] = {0xBA,0xA9,0xB3,0x76,0x12,0x65,0xF4,0xE4,0xAA,0x37,0x9B,0xFA,0x3B,0x48,0x04,0x75};

uint32_t ReqSledContractOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sledContractIdList.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->sledContractIdList.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += iprot->readI32(this->sledContractIdList[_i32]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sledContractIdList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast33;
          xfer += iprot->readI32(ecast33);
          this->platformEnv = (TechPlatformEnv::type)ecast33;
          this->__isset.platformEnv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast34;
          xfer += iprot->readI32(ecast34);
          this->contractStatus = (ContractStatus::type)ecast34;
          this->__isset.contractStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqSledContractOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqSledContractOption");

  if (this->__isset.sledContractIdList) {
    xfer += oprot->writeFieldBegin("sledContractIdList", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sledContractIdList.size()));
      std::vector<int32_t> ::const_iterator _iter35;
      for (_iter35 = this->sledContractIdList.begin(); _iter35 != this->sledContractIdList.end(); ++_iter35)
      {
        xfer += oprot->writeI32((*_iter35));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.platformEnv) {
    xfer += oprot->writeFieldBegin("platformEnv", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->platformEnv);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractStatus) {
    xfer += oprot->writeFieldBegin("contractStatus", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32((int32_t)this->contractStatus);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqSledContractOption &a, ReqSledContractOption &b) {
  using ::std::swap;
  swap(a.sledContractIdList, b.sledContractIdList);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.platformEnv, b.platformEnv);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.contractStatus, b.contractStatus);
  swap(a.__isset, b.__isset);
}

const char* ReqSledCommodityOption::ascii_fingerprint = "96A8611891273D9258BF8C7EDFF07308";
const uint8_t ReqSledCommodityOption::binary_fingerprint[16] = {0x96,0xA8,0x61,0x18,0x91,0x27,0x3D,0x92,0x58,0xBF,0x8C,0x7E,0xDF,0xF0,0x73,0x08};

uint32_t ReqSledCommodityOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sledCommodityIdList.clear();
            uint32_t _size36;
            ::apache::thrift::protocol::TType _etype39;
            xfer += iprot->readListBegin(_etype39, _size36);
            this->sledCommodityIdList.resize(_size36);
            uint32_t _i40;
            for (_i40 = 0; _i40 < _size36; ++_i40)
            {
              xfer += iprot->readI32(this->sledCommodityIdList[_i40]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sledCommodityIdList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchangeMic);
          this->__isset.exchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast41;
          xfer += iprot->readI32(ecast41);
          this->sledCommodityType = (SledCommodityType::type)ecast41;
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqSledCommodityOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqSledCommodityOption");

  if (this->__isset.sledCommodityIdList) {
    xfer += oprot->writeFieldBegin("sledCommodityIdList", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sledCommodityIdList.size()));
      std::vector<int32_t> ::const_iterator _iter42;
      for (_iter42 = this->sledCommodityIdList.begin(); _iter42 != this->sledCommodityIdList.end(); ++_iter42)
      {
        xfer += oprot->writeI32((*_iter42));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchangeMic) {
    xfer += oprot->writeFieldBegin("exchangeMic", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->exchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32((int32_t)this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqSledCommodityOption &a, ReqSledCommodityOption &b) {
  using ::std::swap;
  swap(a.sledCommodityIdList, b.sledCommodityIdList);
  swap(a.exchangeMic, b.exchangeMic);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.__isset, b.__isset);
}

const char* ReqSledExchangeOption::ascii_fingerprint = "693243693E046D45E4DA21EC3A720646";
const uint8_t ReqSledExchangeOption::binary_fingerprint[16] = {0x69,0x32,0x43,0x69,0x3E,0x04,0x6D,0x45,0xE4,0xDA,0x21,0xEC,0x3A,0x72,0x06,0x46};

uint32_t ReqSledExchangeOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sledExchangeIds.clear();
            uint32_t _size43;
            ::apache::thrift::protocol::TType _etype46;
            xfer += iprot->readListBegin(_etype46, _size43);
            this->sledExchangeIds.resize(_size43);
            uint32_t _i47;
            for (_i47 = 0; _i47 < _size43; ++_i47)
            {
              xfer += iprot->readI32(this->sledExchangeIds[_i47]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sledExchangeIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchangeMic);
          this->__isset.exchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqSledExchangeOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqSledExchangeOption");

  if (this->__isset.sledExchangeIds) {
    xfer += oprot->writeFieldBegin("sledExchangeIds", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sledExchangeIds.size()));
      std::vector<int32_t> ::const_iterator _iter48;
      for (_iter48 = this->sledExchangeIds.begin(); _iter48 != this->sledExchangeIds.end(); ++_iter48)
      {
        xfer += oprot->writeI32((*_iter48));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchangeMic) {
    xfer += oprot->writeFieldBegin("exchangeMic", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->exchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqSledExchangeOption &a, ReqSledExchangeOption &b) {
  using ::std::swap;
  swap(a.sledExchangeIds, b.sledExchangeIds);
  swap(a.exchangeMic, b.exchangeMic);
  swap(a.__isset, b.__isset);
}

const char* SledExchangePage::ascii_fingerprint = "906090810730151A635CF4BAC738D919";
const uint8_t SledExchangePage::binary_fingerprint[16] = {0x90,0x60,0x90,0x81,0x07,0x30,0x15,0x1A,0x63,0x5C,0xF4,0xBA,0xC7,0x38,0xD9,0x19};

uint32_t SledExchangePage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->page.clear();
            uint32_t _size49;
            ::apache::thrift::protocol::TType _etype52;
            xfer += iprot->readListBegin(_etype52, _size49);
            this->page.resize(_size49);
            uint32_t _i53;
            for (_i53 = 0; _i53 < _size49; ++_i53)
            {
              xfer += this->page[_i53].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledExchangePage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledExchangePage");

  if (this->__isset.total) {
    xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->total);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page) {
    xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->page.size()));
      std::vector<SledExchange> ::const_iterator _iter54;
      for (_iter54 = this->page.begin(); _iter54 != this->page.end(); ++_iter54)
      {
        xfer += (*_iter54).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledExchangePage &a, SledExchangePage &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.page, b.page);
  swap(a.__isset, b.__isset);
}

const char* SledCommodityPage::ascii_fingerprint = "5F93974ED76F20839DB05012C3E8DC97";
const uint8_t SledCommodityPage::binary_fingerprint[16] = {0x5F,0x93,0x97,0x4E,0xD7,0x6F,0x20,0x83,0x9D,0xB0,0x50,0x12,0xC3,0xE8,0xDC,0x97};

uint32_t SledCommodityPage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->page.clear();
            uint32_t _size55;
            ::apache::thrift::protocol::TType _etype58;
            xfer += iprot->readListBegin(_etype58, _size55);
            this->page.resize(_size55);
            uint32_t _i59;
            for (_i59 = 0; _i59 < _size55; ++_i59)
            {
              xfer += this->page[_i59].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledCommodityPage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledCommodityPage");

  if (this->__isset.total) {
    xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->total);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page) {
    xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->page.size()));
      std::vector<SledCommodity> ::const_iterator _iter60;
      for (_iter60 = this->page.begin(); _iter60 != this->page.end(); ++_iter60)
      {
        xfer += (*_iter60).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledCommodityPage &a, SledCommodityPage &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.page, b.page);
  swap(a.__isset, b.__isset);
}

const char* SledContractPage::ascii_fingerprint = "D379112D8D16A82EA42325CD14773297";
const uint8_t SledContractPage::binary_fingerprint[16] = {0xD3,0x79,0x11,0x2D,0x8D,0x16,0xA8,0x2E,0xA4,0x23,0x25,0xCD,0x14,0x77,0x32,0x97};

uint32_t SledContractPage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->page.clear();
            uint32_t _size61;
            ::apache::thrift::protocol::TType _etype64;
            xfer += iprot->readListBegin(_etype64, _size61);
            this->page.resize(_size61);
            uint32_t _i65;
            for (_i65 = 0; _i65 < _size61; ++_i65)
            {
              xfer += this->page[_i65].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SledContractPage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("SledContractPage");

  if (this->__isset.total) {
    xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->total);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page) {
    xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->page.size()));
      std::vector<SledContract> ::const_iterator _iter66;
      for (_iter66 = this->page.begin(); _iter66 != this->page.end(); ++_iter66)
      {
        xfer += (*_iter66).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SledContractPage &a, SledContractPage &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.page, b.page);
  swap(a.__isset, b.__isset);
}

const char* CommodityMappingPage::ascii_fingerprint = "E740C51EA62C435FE446B762DA16E1E5";
const uint8_t CommodityMappingPage::binary_fingerprint[16] = {0xE7,0x40,0xC5,0x1E,0xA6,0x2C,0x43,0x5F,0xE4,0x46,0xB7,0x62,0xDA,0x16,0xE1,0xE5};

uint32_t CommodityMappingPage::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->total);
          this->__isset.total = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->page.clear();
            uint32_t _size67;
            ::apache::thrift::protocol::TType _etype70;
            xfer += iprot->readListBegin(_etype70, _size67);
            this->page.resize(_size67);
            uint32_t _i71;
            for (_i71 = 0; _i71 < _size67; ++_i71)
            {
              xfer += this->page[_i71].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CommodityMappingPage::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("CommodityMappingPage");

  if (this->__isset.total) {
    xfer += oprot->writeFieldBegin("total", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->total);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.page) {
    xfer += oprot->writeFieldBegin("page", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->page.size()));
      std::vector<CommodityMapping> ::const_iterator _iter72;
      for (_iter72 = this->page.begin(); _iter72 != this->page.end(); ++_iter72)
      {
        xfer += (*_iter72).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CommodityMappingPage &a, CommodityMappingPage &b) {
  using ::std::swap;
  swap(a.total, b.total);
  swap(a.page, b.page);
  swap(a.__isset, b.__isset);
}

const char* ReqCommodityMappingOption::ascii_fingerprint = "9F7A08492CBE0C9AF42726CDE6176EA2";
const uint8_t ReqCommodityMappingOption::binary_fingerprint[16] = {0x9F,0x7A,0x08,0x49,0x2C,0xBE,0x0C,0x9A,0xF4,0x27,0x26,0xCD,0xE6,0x17,0x6E,0xA2};

uint32_t ReqCommodityMappingOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sledCommodityIdList.clear();
            uint32_t _size73;
            ::apache::thrift::protocol::TType _etype76;
            xfer += iprot->readListBegin(_etype76, _size73);
            this->sledCommodityIdList.resize(_size73);
            uint32_t _i77;
            for (_i77 = 0; _i77 < _size73; ++_i77)
            {
              xfer += iprot->readI32(this->sledCommodityIdList[_i77]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sledCommodityIdList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->exchange);
          this->__isset.exchange = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commodityType);
          this->__isset.commodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->commodityCode);
          this->__isset.commodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->brokerEntryId);
          this->__isset.brokerEntryId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->mapIds.clear();
            uint32_t _size78;
            ::apache::thrift::protocol::TType _etype81;
            xfer += iprot->readListBegin(_etype81, _size78);
            this->mapIds.resize(_size78);
            uint32_t _i82;
            for (_i82 = 0; _i82 < _size78; ++_i82)
            {
              xfer += iprot->readI32(this->mapIds[_i82]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.mapIds = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast83;
          xfer += iprot->readI32(ecast83);
          this->techPlatform = (TechPlatform::type)ecast83;
          this->__isset.techPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReqCommodityMappingOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ReqCommodityMappingOption");

  if (this->__isset.sledCommodityIdList) {
    xfer += oprot->writeFieldBegin("sledCommodityIdList", ::apache::thrift::protocol::T_LIST, 1);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->sledCommodityIdList.size()));
      std::vector<int32_t> ::const_iterator _iter84;
      for (_iter84 = this->sledCommodityIdList.begin(); _iter84 != this->sledCommodityIdList.end(); ++_iter84)
      {
        xfer += oprot->writeI32((*_iter84));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exchange) {
    xfer += oprot->writeFieldBegin("exchange", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->exchange);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityType) {
    xfer += oprot->writeFieldBegin("commodityType", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->commodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityCode) {
    xfer += oprot->writeFieldBegin("commodityCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->commodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.brokerEntryId) {
    xfer += oprot->writeFieldBegin("brokerEntryId", ::apache::thrift::protocol::T_I32, 5);
    xfer += oprot->writeI32(this->brokerEntryId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.mapIds) {
    xfer += oprot->writeFieldBegin("mapIds", ::apache::thrift::protocol::T_LIST, 6);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I32, static_cast<uint32_t>(this->mapIds.size()));
      std::vector<int32_t> ::const_iterator _iter85;
      for (_iter85 = this->mapIds.begin(); _iter85 != this->mapIds.end(); ++_iter85)
      {
        xfer += oprot->writeI32((*_iter85));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.techPlatform) {
    xfer += oprot->writeFieldBegin("techPlatform", ::apache::thrift::protocol::T_I32, 7);
    xfer += oprot->writeI32((int32_t)this->techPlatform);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReqCommodityMappingOption &a, ReqCommodityMappingOption &b) {
  using ::std::swap;
  swap(a.sledCommodityIdList, b.sledCommodityIdList);
  swap(a.exchange, b.exchange);
  swap(a.commodityType, b.commodityType);
  swap(a.commodityCode, b.commodityCode);
  swap(a.brokerEntryId, b.brokerEntryId);
  swap(a.mapIds, b.mapIds);
  swap(a.techPlatform, b.techPlatform);
  swap(a.__isset, b.__isset);
}

}}} // namespace
