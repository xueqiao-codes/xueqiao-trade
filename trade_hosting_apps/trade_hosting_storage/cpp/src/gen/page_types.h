/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef page_TYPES_H
#define page_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace platform { namespace page {

typedef struct _IndexedPageOption__isset {
  _IndexedPageOption__isset() : needTotalCount(false), pageIndex(false), pageSize(false) {}
  bool needTotalCount;
  bool pageIndex;
  bool pageSize;
} _IndexedPageOption__isset;

class IndexedPageOption {
 public:

  static const char* ascii_fingerprint; // = "82BA216D12E0EABA865726C10E8959C0";
  static const uint8_t binary_fingerprint[16]; // = {0x82,0xBA,0x21,0x6D,0x12,0xE0,0xEA,0xBA,0x86,0x57,0x26,0xC1,0x0E,0x89,0x59,0xC0};

  IndexedPageOption() : needTotalCount(0), pageIndex(0), pageSize(0) {
  }

  virtual ~IndexedPageOption() throw() {}

  bool needTotalCount;
  int32_t pageIndex;
  int32_t pageSize;

  _IndexedPageOption__isset __isset;

  void __set_needTotalCount(const bool val) {
    needTotalCount = val;
    __isset.needTotalCount = true;
  }

  void __set_pageIndex(const int32_t val) {
    pageIndex = val;
    __isset.pageIndex = true;
  }

  void __set_pageSize(const int32_t val) {
    pageSize = val;
    __isset.pageSize = true;
  }

  bool operator == (const IndexedPageOption & rhs) const
  {
    if (__isset.needTotalCount != rhs.__isset.needTotalCount)
      return false;
    else if (__isset.needTotalCount && !(needTotalCount == rhs.needTotalCount))
      return false;
    if (__isset.pageIndex != rhs.__isset.pageIndex)
      return false;
    else if (__isset.pageIndex && !(pageIndex == rhs.pageIndex))
      return false;
    if (__isset.pageSize != rhs.__isset.pageSize)
      return false;
    else if (__isset.pageSize && !(pageSize == rhs.pageSize))
      return false;
    return true;
  }
  bool operator != (const IndexedPageOption &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IndexedPageOption & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(IndexedPageOption &a, IndexedPageOption &b);

}} // namespace

#endif
