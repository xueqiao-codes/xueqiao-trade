/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "page_types.h"

#include <algorithm>

namespace platform { namespace page {

const char* IndexedPageOption::ascii_fingerprint = "82BA216D12E0EABA865726C10E8959C0";
const uint8_t IndexedPageOption::binary_fingerprint[16] = {0x82,0xBA,0x21,0x6D,0x12,0xE0,0xEA,0xBA,0x86,0x57,0x26,0xC1,0x0E,0x89,0x59,0xC0};

uint32_t IndexedPageOption::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->needTotalCount);
          this->__isset.needTotalCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageIndex);
          this->__isset.pageIndex = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pageSize);
          this->__isset.pageSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IndexedPageOption::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IndexedPageOption");

  if (this->__isset.needTotalCount) {
    xfer += oprot->writeFieldBegin("needTotalCount", ::apache::thrift::protocol::T_BOOL, 1);
    xfer += oprot->writeBool(this->needTotalCount);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pageIndex) {
    xfer += oprot->writeFieldBegin("pageIndex", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->pageIndex);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pageSize) {
    xfer += oprot->writeFieldBegin("pageSize", ::apache::thrift::protocol::T_I32, 3);
    xfer += oprot->writeI32(this->pageSize);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IndexedPageOption &a, IndexedPageOption &b) {
  using ::std::swap;
  swap(a.needTotalCount, b.needTotalCount);
  swap(a.pageIndex, b.pageIndex);
  swap(a.pageSize, b.pageSize);
  swap(a.__isset, b.__isset);
}

}} // namespace
