/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.statis;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatClosedPositionItem implements org.apache.thrift.TBase<StatClosedPositionItem, StatClosedPositionItem._Fields>, java.io.Serializable, Cloneable, Comparable<StatClosedPositionItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatClosedPositionItem");

  private static final org.apache.thrift.protocol.TField CLOSED_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("closedItemId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLOSED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("closedId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("positionItemId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TARGET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("targetKey", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetType", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CLOSED_QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("closedQuantity", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField POSITION_CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCreateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CLOSED_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("closedTimestampMs", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField ARCHIVED_DATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("archivedDateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatClosedPositionItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatClosedPositionItemTupleSchemeFactory());
  }

  public long closedItemId; // optional
  public long closedId; // optional
  public long positionItemId; // optional
  public long subAccountId; // optional
  public String targetKey; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType; // optional
  public double price; // optional
  public int closedQuantity; // optional
  /**
   * 
   * @see StatDirection
   */
  public StatDirection direction; // optional
  public StatDataSource source; // optional
  public long positionCreateTimestampMs; // optional
  public long closedTimestampMs; // optional
  public long archivedDateTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CLOSED_ITEM_ID((short)1, "closedItemId"),
    CLOSED_ID((short)2, "closedId"),
    POSITION_ITEM_ID((short)6, "positionItemId"),
    SUB_ACCOUNT_ID((short)7, "subAccountId"),
    TARGET_KEY((short)8, "targetKey"),
    /**
     * 
     * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
     */
    TARGET_TYPE((short)9, "targetType"),
    PRICE((short)10, "price"),
    CLOSED_QUANTITY((short)11, "closedQuantity"),
    /**
     * 
     * @see StatDirection
     */
    DIRECTION((short)12, "direction"),
    SOURCE((short)13, "source"),
    POSITION_CREATE_TIMESTAMP_MS((short)14, "positionCreateTimestampMs"),
    CLOSED_TIMESTAMP_MS((short)20, "closedTimestampMs"),
    ARCHIVED_DATE_TIMESTAMP_MS((short)21, "archivedDateTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLOSED_ITEM_ID
          return CLOSED_ITEM_ID;
        case 2: // CLOSED_ID
          return CLOSED_ID;
        case 6: // POSITION_ITEM_ID
          return POSITION_ITEM_ID;
        case 7: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 8: // TARGET_KEY
          return TARGET_KEY;
        case 9: // TARGET_TYPE
          return TARGET_TYPE;
        case 10: // PRICE
          return PRICE;
        case 11: // CLOSED_QUANTITY
          return CLOSED_QUANTITY;
        case 12: // DIRECTION
          return DIRECTION;
        case 13: // SOURCE
          return SOURCE;
        case 14: // POSITION_CREATE_TIMESTAMP_MS
          return POSITION_CREATE_TIMESTAMP_MS;
        case 20: // CLOSED_TIMESTAMP_MS
          return CLOSED_TIMESTAMP_MS;
        case 21: // ARCHIVED_DATE_TIMESTAMP_MS
          return ARCHIVED_DATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLOSEDITEMID_ISSET_ID = 0;
  private static final int __CLOSEDID_ISSET_ID = 1;
  private static final int __POSITIONITEMID_ISSET_ID = 2;
  private static final int __SUBACCOUNTID_ISSET_ID = 3;
  private static final int __PRICE_ISSET_ID = 4;
  private static final int __CLOSEDQUANTITY_ISSET_ID = 5;
  private static final int __POSITIONCREATETIMESTAMPMS_ISSET_ID = 6;
  private static final int __CLOSEDTIMESTAMPMS_ISSET_ID = 7;
  private static final int __ARCHIVEDDATETIMESTAMPMS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CLOSED_ITEM_ID,_Fields.CLOSED_ID,_Fields.POSITION_ITEM_ID,_Fields.SUB_ACCOUNT_ID,_Fields.TARGET_KEY,_Fields.TARGET_TYPE,_Fields.PRICE,_Fields.CLOSED_QUANTITY,_Fields.DIRECTION,_Fields.SOURCE,_Fields.POSITION_CREATE_TIMESTAMP_MS,_Fields.CLOSED_TIMESTAMP_MS,_Fields.ARCHIVED_DATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLOSED_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("closedItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSED_ID, new org.apache.thrift.meta_data.FieldMetaData("closedId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("positionItemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TARGET_KEY, new org.apache.thrift.meta_data.FieldMetaData("targetKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("targetType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.class)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSED_QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("closedQuantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatDirection.class)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatDataSource.class)));
    tmpMap.put(_Fields.POSITION_CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("positionCreateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSED_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("closedTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ARCHIVED_DATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("archivedDateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatClosedPositionItem.class, metaDataMap);
  }

  public StatClosedPositionItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatClosedPositionItem(StatClosedPositionItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.closedItemId = other.closedItemId;
    this.closedId = other.closedId;
    this.positionItemId = other.positionItemId;
    this.subAccountId = other.subAccountId;
    if (other.isSetTargetKey()) {
      this.targetKey = other.targetKey;
    }
    if (other.isSetTargetType()) {
      this.targetType = other.targetType;
    }
    this.price = other.price;
    this.closedQuantity = other.closedQuantity;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    if (other.isSetSource()) {
      this.source = new StatDataSource(other.source);
    }
    this.positionCreateTimestampMs = other.positionCreateTimestampMs;
    this.closedTimestampMs = other.closedTimestampMs;
    this.archivedDateTimestampMs = other.archivedDateTimestampMs;
  }

  public StatClosedPositionItem deepCopy() {
    return new StatClosedPositionItem(this);
  }

  @Override
  public void clear() {
    setClosedItemIdIsSet(false);
    this.closedItemId = 0;
    setClosedIdIsSet(false);
    this.closedId = 0;
    setPositionItemIdIsSet(false);
    this.positionItemId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.targetKey = null;
    this.targetType = null;
    setPriceIsSet(false);
    this.price = 0.0;
    setClosedQuantityIsSet(false);
    this.closedQuantity = 0;
    this.direction = null;
    this.source = null;
    setPositionCreateTimestampMsIsSet(false);
    this.positionCreateTimestampMs = 0;
    setClosedTimestampMsIsSet(false);
    this.closedTimestampMs = 0;
    setArchivedDateTimestampMsIsSet(false);
    this.archivedDateTimestampMs = 0;
  }

  public long getClosedItemId() {
    return this.closedItemId;
  }

  public StatClosedPositionItem setClosedItemId(long closedItemId) {
    this.closedItemId = closedItemId;
    setClosedItemIdIsSet(true);
    return this;
  }

  public void unsetClosedItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEDITEMID_ISSET_ID);
  }

  /** Returns true if field closedItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetClosedItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEDITEMID_ISSET_ID);
  }

  public void setClosedItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEDITEMID_ISSET_ID, value);
  }

  public long getClosedId() {
    return this.closedId;
  }

  public StatClosedPositionItem setClosedId(long closedId) {
    this.closedId = closedId;
    setClosedIdIsSet(true);
    return this;
  }

  public void unsetClosedId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEDID_ISSET_ID);
  }

  /** Returns true if field closedId is set (has been assigned a value) and false otherwise */
  public boolean isSetClosedId() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEDID_ISSET_ID);
  }

  public void setClosedIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEDID_ISSET_ID, value);
  }

  public long getPositionItemId() {
    return this.positionItemId;
  }

  public StatClosedPositionItem setPositionItemId(long positionItemId) {
    this.positionItemId = positionItemId;
    setPositionItemIdIsSet(true);
    return this;
  }

  public void unsetPositionItemId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONITEMID_ISSET_ID);
  }

  /** Returns true if field positionItemId is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionItemId() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONITEMID_ISSET_ID);
  }

  public void setPositionItemIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONITEMID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public StatClosedPositionItem setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public String getTargetKey() {
    return this.targetKey;
  }

  public StatClosedPositionItem setTargetKey(String targetKey) {
    this.targetKey = targetKey;
    return this;
  }

  public void unsetTargetKey() {
    this.targetKey = null;
  }

  /** Returns true if field targetKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetKey() {
    return this.targetKey != null;
  }

  public void setTargetKeyIsSet(boolean value) {
    if (!value) {
      this.targetKey = null;
    }
  }

  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType getTargetType() {
    return this.targetType;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public StatClosedPositionItem setTargetType(xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType) {
    this.targetType = targetType;
    return this;
  }

  public void unsetTargetType() {
    this.targetType = null;
  }

  /** Returns true if field targetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetType() {
    return this.targetType != null;
  }

  public void setTargetTypeIsSet(boolean value) {
    if (!value) {
      this.targetType = null;
    }
  }

  public double getPrice() {
    return this.price;
  }

  public StatClosedPositionItem setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getClosedQuantity() {
    return this.closedQuantity;
  }

  public StatClosedPositionItem setClosedQuantity(int closedQuantity) {
    this.closedQuantity = closedQuantity;
    setClosedQuantityIsSet(true);
    return this;
  }

  public void unsetClosedQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEDQUANTITY_ISSET_ID);
  }

  /** Returns true if field closedQuantity is set (has been assigned a value) and false otherwise */
  public boolean isSetClosedQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEDQUANTITY_ISSET_ID);
  }

  public void setClosedQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEDQUANTITY_ISSET_ID, value);
  }

  /**
   * 
   * @see StatDirection
   */
  public StatDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see StatDirection
   */
  public StatClosedPositionItem setDirection(StatDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public StatDataSource getSource() {
    return this.source;
  }

  public StatClosedPositionItem setSource(StatDataSource source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getPositionCreateTimestampMs() {
    return this.positionCreateTimestampMs;
  }

  public StatClosedPositionItem setPositionCreateTimestampMs(long positionCreateTimestampMs) {
    this.positionCreateTimestampMs = positionCreateTimestampMs;
    setPositionCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetPositionCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONCREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field positionCreateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONCREATETIMESTAMPMS_ISSET_ID);
  }

  public void setPositionCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONCREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getClosedTimestampMs() {
    return this.closedTimestampMs;
  }

  public StatClosedPositionItem setClosedTimestampMs(long closedTimestampMs) {
    this.closedTimestampMs = closedTimestampMs;
    setClosedTimestampMsIsSet(true);
    return this;
  }

  public void unsetClosedTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field closedTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetClosedTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEDTIMESTAMPMS_ISSET_ID);
  }

  public void setClosedTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEDTIMESTAMPMS_ISSET_ID, value);
  }

  public long getArchivedDateTimestampMs() {
    return this.archivedDateTimestampMs;
  }

  public StatClosedPositionItem setArchivedDateTimestampMs(long archivedDateTimestampMs) {
    this.archivedDateTimestampMs = archivedDateTimestampMs;
    setArchivedDateTimestampMsIsSet(true);
    return this;
  }

  public void unsetArchivedDateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARCHIVEDDATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field archivedDateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetArchivedDateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __ARCHIVEDDATETIMESTAMPMS_ISSET_ID);
  }

  public void setArchivedDateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARCHIVEDDATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CLOSED_ITEM_ID:
      if (value == null) {
        unsetClosedItemId();
      } else {
        setClosedItemId((Long)value);
      }
      break;

    case CLOSED_ID:
      if (value == null) {
        unsetClosedId();
      } else {
        setClosedId((Long)value);
      }
      break;

    case POSITION_ITEM_ID:
      if (value == null) {
        unsetPositionItemId();
      } else {
        setPositionItemId((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case TARGET_KEY:
      if (value == null) {
        unsetTargetKey();
      } else {
        setTargetKey((String)value);
      }
      break;

    case TARGET_TYPE:
      if (value == null) {
        unsetTargetType();
      } else {
        setTargetType((xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case CLOSED_QUANTITY:
      if (value == null) {
        unsetClosedQuantity();
      } else {
        setClosedQuantity((Integer)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((StatDirection)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((StatDataSource)value);
      }
      break;

    case POSITION_CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetPositionCreateTimestampMs();
      } else {
        setPositionCreateTimestampMs((Long)value);
      }
      break;

    case CLOSED_TIMESTAMP_MS:
      if (value == null) {
        unsetClosedTimestampMs();
      } else {
        setClosedTimestampMs((Long)value);
      }
      break;

    case ARCHIVED_DATE_TIMESTAMP_MS:
      if (value == null) {
        unsetArchivedDateTimestampMs();
      } else {
        setArchivedDateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CLOSED_ITEM_ID:
      return Long.valueOf(getClosedItemId());

    case CLOSED_ID:
      return Long.valueOf(getClosedId());

    case POSITION_ITEM_ID:
      return Long.valueOf(getPositionItemId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case TARGET_KEY:
      return getTargetKey();

    case TARGET_TYPE:
      return getTargetType();

    case PRICE:
      return Double.valueOf(getPrice());

    case CLOSED_QUANTITY:
      return Integer.valueOf(getClosedQuantity());

    case DIRECTION:
      return getDirection();

    case SOURCE:
      return getSource();

    case POSITION_CREATE_TIMESTAMP_MS:
      return Long.valueOf(getPositionCreateTimestampMs());

    case CLOSED_TIMESTAMP_MS:
      return Long.valueOf(getClosedTimestampMs());

    case ARCHIVED_DATE_TIMESTAMP_MS:
      return Long.valueOf(getArchivedDateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CLOSED_ITEM_ID:
      return isSetClosedItemId();
    case CLOSED_ID:
      return isSetClosedId();
    case POSITION_ITEM_ID:
      return isSetPositionItemId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case TARGET_KEY:
      return isSetTargetKey();
    case TARGET_TYPE:
      return isSetTargetType();
    case PRICE:
      return isSetPrice();
    case CLOSED_QUANTITY:
      return isSetClosedQuantity();
    case DIRECTION:
      return isSetDirection();
    case SOURCE:
      return isSetSource();
    case POSITION_CREATE_TIMESTAMP_MS:
      return isSetPositionCreateTimestampMs();
    case CLOSED_TIMESTAMP_MS:
      return isSetClosedTimestampMs();
    case ARCHIVED_DATE_TIMESTAMP_MS:
      return isSetArchivedDateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatClosedPositionItem)
      return this.equals((StatClosedPositionItem)that);
    return false;
  }

  public boolean equals(StatClosedPositionItem that) {
    if (that == null)
      return false;

    boolean this_present_closedItemId = true && this.isSetClosedItemId();
    boolean that_present_closedItemId = true && that.isSetClosedItemId();
    if (this_present_closedItemId || that_present_closedItemId) {
      if (!(this_present_closedItemId && that_present_closedItemId))
        return false;
      if (this.closedItemId != that.closedItemId)
        return false;
    }

    boolean this_present_closedId = true && this.isSetClosedId();
    boolean that_present_closedId = true && that.isSetClosedId();
    if (this_present_closedId || that_present_closedId) {
      if (!(this_present_closedId && that_present_closedId))
        return false;
      if (this.closedId != that.closedId)
        return false;
    }

    boolean this_present_positionItemId = true && this.isSetPositionItemId();
    boolean that_present_positionItemId = true && that.isSetPositionItemId();
    if (this_present_positionItemId || that_present_positionItemId) {
      if (!(this_present_positionItemId && that_present_positionItemId))
        return false;
      if (this.positionItemId != that.positionItemId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_targetKey = true && this.isSetTargetKey();
    boolean that_present_targetKey = true && that.isSetTargetKey();
    if (this_present_targetKey || that_present_targetKey) {
      if (!(this_present_targetKey && that_present_targetKey))
        return false;
      if (!this.targetKey.equals(that.targetKey))
        return false;
    }

    boolean this_present_targetType = true && this.isSetTargetType();
    boolean that_present_targetType = true && that.isSetTargetType();
    if (this_present_targetType || that_present_targetType) {
      if (!(this_present_targetType && that_present_targetType))
        return false;
      if (!this.targetType.equals(that.targetType))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_closedQuantity = true && this.isSetClosedQuantity();
    boolean that_present_closedQuantity = true && that.isSetClosedQuantity();
    if (this_present_closedQuantity || that_present_closedQuantity) {
      if (!(this_present_closedQuantity && that_present_closedQuantity))
        return false;
      if (this.closedQuantity != that.closedQuantity)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_positionCreateTimestampMs = true && this.isSetPositionCreateTimestampMs();
    boolean that_present_positionCreateTimestampMs = true && that.isSetPositionCreateTimestampMs();
    if (this_present_positionCreateTimestampMs || that_present_positionCreateTimestampMs) {
      if (!(this_present_positionCreateTimestampMs && that_present_positionCreateTimestampMs))
        return false;
      if (this.positionCreateTimestampMs != that.positionCreateTimestampMs)
        return false;
    }

    boolean this_present_closedTimestampMs = true && this.isSetClosedTimestampMs();
    boolean that_present_closedTimestampMs = true && that.isSetClosedTimestampMs();
    if (this_present_closedTimestampMs || that_present_closedTimestampMs) {
      if (!(this_present_closedTimestampMs && that_present_closedTimestampMs))
        return false;
      if (this.closedTimestampMs != that.closedTimestampMs)
        return false;
    }

    boolean this_present_archivedDateTimestampMs = true && this.isSetArchivedDateTimestampMs();
    boolean that_present_archivedDateTimestampMs = true && that.isSetArchivedDateTimestampMs();
    if (this_present_archivedDateTimestampMs || that_present_archivedDateTimestampMs) {
      if (!(this_present_archivedDateTimestampMs && that_present_archivedDateTimestampMs))
        return false;
      if (this.archivedDateTimestampMs != that.archivedDateTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatClosedPositionItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetClosedItemId()).compareTo(other.isSetClosedItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosedItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedItemId, other.closedItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosedId()).compareTo(other.isSetClosedId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosedId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedId, other.closedId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionItemId()).compareTo(other.isSetPositionItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionItemId, other.positionItemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetKey()).compareTo(other.isSetTargetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetKey, other.targetKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetType()).compareTo(other.isSetTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetType, other.targetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosedQuantity()).compareTo(other.isSetClosedQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosedQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedQuantity, other.closedQuantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionCreateTimestampMs()).compareTo(other.isSetPositionCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCreateTimestampMs, other.positionCreateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosedTimestampMs()).compareTo(other.isSetClosedTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosedTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedTimestampMs, other.closedTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArchivedDateTimestampMs()).compareTo(other.isSetArchivedDateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchivedDateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.archivedDateTimestampMs, other.archivedDateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatClosedPositionItem(");
    boolean first = true;

    if (isSetClosedItemId()) {
      sb.append("closedItemId:");
      sb.append(this.closedItemId);
      first = false;
    }
    if (isSetClosedId()) {
      if (!first) sb.append(", ");
      sb.append("closedId:");
      sb.append(this.closedId);
      first = false;
    }
    if (isSetPositionItemId()) {
      if (!first) sb.append(", ");
      sb.append("positionItemId:");
      sb.append(this.positionItemId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetTargetKey()) {
      if (!first) sb.append(", ");
      sb.append("targetKey:");
      if (this.targetKey == null) {
        sb.append("null");
      } else {
        sb.append(this.targetKey);
      }
      first = false;
    }
    if (isSetTargetType()) {
      if (!first) sb.append(", ");
      sb.append("targetType:");
      if (this.targetType == null) {
        sb.append("null");
      } else {
        sb.append(this.targetType);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetClosedQuantity()) {
      if (!first) sb.append(", ");
      sb.append("closedQuantity:");
      sb.append(this.closedQuantity);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetPositionCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("positionCreateTimestampMs:");
      sb.append(this.positionCreateTimestampMs);
      first = false;
    }
    if (isSetClosedTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("closedTimestampMs:");
      sb.append(this.closedTimestampMs);
      first = false;
    }
    if (isSetArchivedDateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("archivedDateTimestampMs:");
      sb.append(this.archivedDateTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (source != null) {
      source.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatClosedPositionItemStandardSchemeFactory implements SchemeFactory {
    public StatClosedPositionItemStandardScheme getScheme() {
      return new StatClosedPositionItemStandardScheme();
    }
  }

  private static class StatClosedPositionItemStandardScheme extends StandardScheme<StatClosedPositionItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatClosedPositionItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLOSED_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.closedItemId = iprot.readI64();
              struct.setClosedItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLOSED_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.closedId = iprot.readI64();
              struct.setClosedIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionItemId = iprot.readI64();
              struct.setPositionItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TARGET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetKey = iprot.readString();
              struct.setTargetKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetType = xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.findByValue(iprot.readI32());
              struct.setTargetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLOSED_QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.closedQuantity = iprot.readI32();
              struct.setClosedQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = StatDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.source = new StatDataSource();
              struct.source.read(iprot);
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // POSITION_CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionCreateTimestampMs = iprot.readI64();
              struct.setPositionCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CLOSED_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.closedTimestampMs = iprot.readI64();
              struct.setClosedTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ARCHIVED_DATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.archivedDateTimestampMs = iprot.readI64();
              struct.setArchivedDateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatClosedPositionItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetClosedItemId()) {
        oprot.writeFieldBegin(CLOSED_ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.closedItemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClosedId()) {
        oprot.writeFieldBegin(CLOSED_ID_FIELD_DESC);
        oprot.writeI64(struct.closedId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionItemId()) {
        oprot.writeFieldBegin(POSITION_ITEM_ID_FIELD_DESC);
        oprot.writeI64(struct.positionItemId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.targetKey != null) {
        if (struct.isSetTargetKey()) {
          oprot.writeFieldBegin(TARGET_KEY_FIELD_DESC);
          oprot.writeString(struct.targetKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetType != null) {
        if (struct.isSetTargetType()) {
          oprot.writeFieldBegin(TARGET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.targetType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClosedQuantity()) {
        oprot.writeFieldBegin(CLOSED_QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.closedQuantity);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          struct.source.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionCreateTimestampMs()) {
        oprot.writeFieldBegin(POSITION_CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.positionCreateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClosedTimestampMs()) {
        oprot.writeFieldBegin(CLOSED_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.closedTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArchivedDateTimestampMs()) {
        oprot.writeFieldBegin(ARCHIVED_DATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.archivedDateTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatClosedPositionItemTupleSchemeFactory implements SchemeFactory {
    public StatClosedPositionItemTupleScheme getScheme() {
      return new StatClosedPositionItemTupleScheme();
    }
  }

  private static class StatClosedPositionItemTupleScheme extends TupleScheme<StatClosedPositionItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatClosedPositionItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetClosedItemId()) {
        optionals.set(0);
      }
      if (struct.isSetClosedId()) {
        optionals.set(1);
      }
      if (struct.isSetPositionItemId()) {
        optionals.set(2);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(3);
      }
      if (struct.isSetTargetKey()) {
        optionals.set(4);
      }
      if (struct.isSetTargetType()) {
        optionals.set(5);
      }
      if (struct.isSetPrice()) {
        optionals.set(6);
      }
      if (struct.isSetClosedQuantity()) {
        optionals.set(7);
      }
      if (struct.isSetDirection()) {
        optionals.set(8);
      }
      if (struct.isSetSource()) {
        optionals.set(9);
      }
      if (struct.isSetPositionCreateTimestampMs()) {
        optionals.set(10);
      }
      if (struct.isSetClosedTimestampMs()) {
        optionals.set(11);
      }
      if (struct.isSetArchivedDateTimestampMs()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetClosedItemId()) {
        oprot.writeI64(struct.closedItemId);
      }
      if (struct.isSetClosedId()) {
        oprot.writeI64(struct.closedId);
      }
      if (struct.isSetPositionItemId()) {
        oprot.writeI64(struct.positionItemId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetTargetKey()) {
        oprot.writeString(struct.targetKey);
      }
      if (struct.isSetTargetType()) {
        oprot.writeI32(struct.targetType.getValue());
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetClosedQuantity()) {
        oprot.writeI32(struct.closedQuantity);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetSource()) {
        struct.source.write(oprot);
      }
      if (struct.isSetPositionCreateTimestampMs()) {
        oprot.writeI64(struct.positionCreateTimestampMs);
      }
      if (struct.isSetClosedTimestampMs()) {
        oprot.writeI64(struct.closedTimestampMs);
      }
      if (struct.isSetArchivedDateTimestampMs()) {
        oprot.writeI64(struct.archivedDateTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatClosedPositionItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.closedItemId = iprot.readI64();
        struct.setClosedItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.closedId = iprot.readI64();
        struct.setClosedIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.positionItemId = iprot.readI64();
        struct.setPositionItemIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.targetKey = iprot.readString();
        struct.setTargetKeyIsSet(true);
      }
      if (incoming.get(5)) {
        struct.targetType = xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.findByValue(iprot.readI32());
        struct.setTargetTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.closedQuantity = iprot.readI32();
        struct.setClosedQuantityIsSet(true);
      }
      if (incoming.get(8)) {
        struct.direction = StatDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.source = new StatDataSource();
        struct.source.read(iprot);
        struct.setSourceIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positionCreateTimestampMs = iprot.readI64();
        struct.setPositionCreateTimestampMsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.closedTimestampMs = iprot.readI64();
        struct.setClosedTimestampMsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.archivedDateTimestampMs = iprot.readI64();
        struct.setArchivedDateTimestampMsIsSet(true);
      }
    }
  }

}

