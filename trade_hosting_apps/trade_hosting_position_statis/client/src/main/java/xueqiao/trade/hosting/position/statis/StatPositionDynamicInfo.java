/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.statis;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatPositionDynamicInfo implements org.apache.thrift.TBase<StatPositionDynamicInfo, StatPositionDynamicInfo._Fields>, java.io.Serializable, Cloneable, Comparable<StatPositionDynamicInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatPositionDynamicInfo");

  private static final org.apache.thrift.protocol.TField TARGET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("targetKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("targetType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CLOSED_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closedProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField TOTAL_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField POSITION_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionValue", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField POSITION_VALUE_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("positionValueMap", org.apache.thrift.protocol.TType.MAP, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField MODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("modifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatPositionDynamicInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatPositionDynamicInfoTupleSchemeFactory());
  }

  public String targetKey; // optional
  public long subAccountId; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType; // optional
  public double lastPrice; // optional
  public double positionProfit; // optional
  public double closedProfit; // optional
  public double totalProfit; // optional
  public double positionValue; // optional
  public double leverage; // optional
  public Map<String,Double> positionValueMap; // optional
  public String currency; // optional
  public long modifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TARGET_KEY((short)1, "targetKey"),
    SUB_ACCOUNT_ID((short)2, "subAccountId"),
    /**
     * 
     * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
     */
    TARGET_TYPE((short)3, "targetType"),
    LAST_PRICE((short)5, "lastPrice"),
    POSITION_PROFIT((short)6, "positionProfit"),
    CLOSED_PROFIT((short)7, "closedProfit"),
    TOTAL_PROFIT((short)8, "totalProfit"),
    POSITION_VALUE((short)9, "positionValue"),
    LEVERAGE((short)10, "leverage"),
    POSITION_VALUE_MAP((short)13, "positionValueMap"),
    CURRENCY((short)15, "currency"),
    MODIFY_TIMESTAMP_MS((short)20, "modifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TARGET_KEY
          return TARGET_KEY;
        case 2: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 3: // TARGET_TYPE
          return TARGET_TYPE;
        case 5: // LAST_PRICE
          return LAST_PRICE;
        case 6: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 7: // CLOSED_PROFIT
          return CLOSED_PROFIT;
        case 8: // TOTAL_PROFIT
          return TOTAL_PROFIT;
        case 9: // POSITION_VALUE
          return POSITION_VALUE;
        case 10: // LEVERAGE
          return LEVERAGE;
        case 13: // POSITION_VALUE_MAP
          return POSITION_VALUE_MAP;
        case 15: // CURRENCY
          return CURRENCY;
        case 20: // MODIFY_TIMESTAMP_MS
          return MODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __LASTPRICE_ISSET_ID = 1;
  private static final int __POSITIONPROFIT_ISSET_ID = 2;
  private static final int __CLOSEDPROFIT_ISSET_ID = 3;
  private static final int __TOTALPROFIT_ISSET_ID = 4;
  private static final int __POSITIONVALUE_ISSET_ID = 5;
  private static final int __LEVERAGE_ISSET_ID = 6;
  private static final int __MODIFYTIMESTAMPMS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TARGET_KEY,_Fields.SUB_ACCOUNT_ID,_Fields.TARGET_TYPE,_Fields.LAST_PRICE,_Fields.POSITION_PROFIT,_Fields.CLOSED_PROFIT,_Fields.TOTAL_PROFIT,_Fields.POSITION_VALUE,_Fields.LEVERAGE,_Fields.POSITION_VALUE_MAP,_Fields.CURRENCY,_Fields.MODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TARGET_KEY, new org.apache.thrift.meta_data.FieldMetaData("targetKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("targetType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.class)));
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSED_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closedProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOTAL_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("totalProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_VALUE, new org.apache.thrift.meta_data.FieldMetaData("positionValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_VALUE_MAP, new org.apache.thrift.meta_data.FieldMetaData("positionValueMap", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("modifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatPositionDynamicInfo.class, metaDataMap);
  }

  public StatPositionDynamicInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatPositionDynamicInfo(StatPositionDynamicInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTargetKey()) {
      this.targetKey = other.targetKey;
    }
    this.subAccountId = other.subAccountId;
    if (other.isSetTargetType()) {
      this.targetType = other.targetType;
    }
    this.lastPrice = other.lastPrice;
    this.positionProfit = other.positionProfit;
    this.closedProfit = other.closedProfit;
    this.totalProfit = other.totalProfit;
    this.positionValue = other.positionValue;
    this.leverage = other.leverage;
    if (other.isSetPositionValueMap()) {
      Map<String,Double> __this__positionValueMap = new HashMap<String,Double>(other.positionValueMap);
      this.positionValueMap = __this__positionValueMap;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.modifyTimestampMs = other.modifyTimestampMs;
  }

  public StatPositionDynamicInfo deepCopy() {
    return new StatPositionDynamicInfo(this);
  }

  @Override
  public void clear() {
    this.targetKey = null;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.targetType = null;
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setClosedProfitIsSet(false);
    this.closedProfit = 0.0;
    setTotalProfitIsSet(false);
    this.totalProfit = 0.0;
    setPositionValueIsSet(false);
    this.positionValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
    this.positionValueMap = null;
    this.currency = null;
    setModifyTimestampMsIsSet(false);
    this.modifyTimestampMs = 0;
  }

  public String getTargetKey() {
    return this.targetKey;
  }

  public StatPositionDynamicInfo setTargetKey(String targetKey) {
    this.targetKey = targetKey;
    return this;
  }

  public void unsetTargetKey() {
    this.targetKey = null;
  }

  /** Returns true if field targetKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetKey() {
    return this.targetKey != null;
  }

  public void setTargetKeyIsSet(boolean value) {
    if (!value) {
      this.targetKey = null;
    }
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public StatPositionDynamicInfo setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType getTargetType() {
    return this.targetType;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType
   */
  public StatPositionDynamicInfo setTargetType(xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType targetType) {
    this.targetType = targetType;
    return this;
  }

  public void unsetTargetType() {
    this.targetType = null;
  }

  /** Returns true if field targetType is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetType() {
    return this.targetType != null;
  }

  public void setTargetTypeIsSet(boolean value) {
    if (!value) {
      this.targetType = null;
    }
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public StatPositionDynamicInfo setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public StatPositionDynamicInfo setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getClosedProfit() {
    return this.closedProfit;
  }

  public StatPositionDynamicInfo setClosedProfit(double closedProfit) {
    this.closedProfit = closedProfit;
    setClosedProfitIsSet(true);
    return this;
  }

  public void unsetClosedProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEDPROFIT_ISSET_ID);
  }

  /** Returns true if field closedProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetClosedProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEDPROFIT_ISSET_ID);
  }

  public void setClosedProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEDPROFIT_ISSET_ID, value);
  }

  public double getTotalProfit() {
    return this.totalProfit;
  }

  public StatPositionDynamicInfo setTotalProfit(double totalProfit) {
    this.totalProfit = totalProfit;
    setTotalProfitIsSet(true);
    return this;
  }

  public void unsetTotalProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALPROFIT_ISSET_ID);
  }

  /** Returns true if field totalProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALPROFIT_ISSET_ID);
  }

  public void setTotalProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALPROFIT_ISSET_ID, value);
  }

  public double getPositionValue() {
    return this.positionValue;
  }

  public StatPositionDynamicInfo setPositionValue(double positionValue) {
    this.positionValue = positionValue;
    setPositionValueIsSet(true);
    return this;
  }

  public void unsetPositionValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONVALUE_ISSET_ID);
  }

  /** Returns true if field positionValue is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionValue() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONVALUE_ISSET_ID);
  }

  public void setPositionValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public StatPositionDynamicInfo setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public int getPositionValueMapSize() {
    return (this.positionValueMap == null) ? 0 : this.positionValueMap.size();
  }

  public void putToPositionValueMap(String key, double val) {
    if (this.positionValueMap == null) {
      this.positionValueMap = new HashMap<String,Double>();
    }
    this.positionValueMap.put(key, val);
  }

  public Map<String,Double> getPositionValueMap() {
    return this.positionValueMap;
  }

  public StatPositionDynamicInfo setPositionValueMap(Map<String,Double> positionValueMap) {
    this.positionValueMap = positionValueMap;
    return this;
  }

  public void unsetPositionValueMap() {
    this.positionValueMap = null;
  }

  /** Returns true if field positionValueMap is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionValueMap() {
    return this.positionValueMap != null;
  }

  public void setPositionValueMapIsSet(boolean value) {
    if (!value) {
      this.positionValueMap = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public StatPositionDynamicInfo setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getModifyTimestampMs() {
    return this.modifyTimestampMs;
  }

  public StatPositionDynamicInfo setModifyTimestampMs(long modifyTimestampMs) {
    this.modifyTimestampMs = modifyTimestampMs;
    setModifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetModifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field modifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetModifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __MODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setModifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TARGET_KEY:
      if (value == null) {
        unsetTargetKey();
      } else {
        setTargetKey((String)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case TARGET_TYPE:
      if (value == null) {
        unsetTargetType();
      } else {
        setTargetType((xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType)value);
      }
      break;

    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case CLOSED_PROFIT:
      if (value == null) {
        unsetClosedProfit();
      } else {
        setClosedProfit((Double)value);
      }
      break;

    case TOTAL_PROFIT:
      if (value == null) {
        unsetTotalProfit();
      } else {
        setTotalProfit((Double)value);
      }
      break;

    case POSITION_VALUE:
      if (value == null) {
        unsetPositionValue();
      } else {
        setPositionValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    case POSITION_VALUE_MAP:
      if (value == null) {
        unsetPositionValueMap();
      } else {
        setPositionValueMap((Map<String,Double>)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case MODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetModifyTimestampMs();
      } else {
        setModifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TARGET_KEY:
      return getTargetKey();

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case TARGET_TYPE:
      return getTargetType();

    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case CLOSED_PROFIT:
      return Double.valueOf(getClosedProfit());

    case TOTAL_PROFIT:
      return Double.valueOf(getTotalProfit());

    case POSITION_VALUE:
      return Double.valueOf(getPositionValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    case POSITION_VALUE_MAP:
      return getPositionValueMap();

    case CURRENCY:
      return getCurrency();

    case MODIFY_TIMESTAMP_MS:
      return Long.valueOf(getModifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TARGET_KEY:
      return isSetTargetKey();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case TARGET_TYPE:
      return isSetTargetType();
    case LAST_PRICE:
      return isSetLastPrice();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case CLOSED_PROFIT:
      return isSetClosedProfit();
    case TOTAL_PROFIT:
      return isSetTotalProfit();
    case POSITION_VALUE:
      return isSetPositionValue();
    case LEVERAGE:
      return isSetLeverage();
    case POSITION_VALUE_MAP:
      return isSetPositionValueMap();
    case CURRENCY:
      return isSetCurrency();
    case MODIFY_TIMESTAMP_MS:
      return isSetModifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatPositionDynamicInfo)
      return this.equals((StatPositionDynamicInfo)that);
    return false;
  }

  public boolean equals(StatPositionDynamicInfo that) {
    if (that == null)
      return false;

    boolean this_present_targetKey = true && this.isSetTargetKey();
    boolean that_present_targetKey = true && that.isSetTargetKey();
    if (this_present_targetKey || that_present_targetKey) {
      if (!(this_present_targetKey && that_present_targetKey))
        return false;
      if (!this.targetKey.equals(that.targetKey))
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_targetType = true && this.isSetTargetType();
    boolean that_present_targetType = true && that.isSetTargetType();
    if (this_present_targetType || that_present_targetType) {
      if (!(this_present_targetType && that_present_targetType))
        return false;
      if (!this.targetType.equals(that.targetType))
        return false;
    }

    boolean this_present_lastPrice = true && this.isSetLastPrice();
    boolean that_present_lastPrice = true && that.isSetLastPrice();
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_closedProfit = true && this.isSetClosedProfit();
    boolean that_present_closedProfit = true && that.isSetClosedProfit();
    if (this_present_closedProfit || that_present_closedProfit) {
      if (!(this_present_closedProfit && that_present_closedProfit))
        return false;
      if (this.closedProfit != that.closedProfit)
        return false;
    }

    boolean this_present_totalProfit = true && this.isSetTotalProfit();
    boolean that_present_totalProfit = true && that.isSetTotalProfit();
    if (this_present_totalProfit || that_present_totalProfit) {
      if (!(this_present_totalProfit && that_present_totalProfit))
        return false;
      if (this.totalProfit != that.totalProfit)
        return false;
    }

    boolean this_present_positionValue = true && this.isSetPositionValue();
    boolean that_present_positionValue = true && that.isSetPositionValue();
    if (this_present_positionValue || that_present_positionValue) {
      if (!(this_present_positionValue && that_present_positionValue))
        return false;
      if (this.positionValue != that.positionValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    boolean this_present_positionValueMap = true && this.isSetPositionValueMap();
    boolean that_present_positionValueMap = true && that.isSetPositionValueMap();
    if (this_present_positionValueMap || that_present_positionValueMap) {
      if (!(this_present_positionValueMap && that_present_positionValueMap))
        return false;
      if (!this.positionValueMap.equals(that.positionValueMap))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_modifyTimestampMs = true && this.isSetModifyTimestampMs();
    boolean that_present_modifyTimestampMs = true && that.isSetModifyTimestampMs();
    if (this_present_modifyTimestampMs || that_present_modifyTimestampMs) {
      if (!(this_present_modifyTimestampMs && that_present_modifyTimestampMs))
        return false;
      if (this.modifyTimestampMs != that.modifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatPositionDynamicInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTargetKey()).compareTo(other.isSetTargetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetKey, other.targetKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetType()).compareTo(other.isSetTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetType, other.targetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClosedProfit()).compareTo(other.isSetClosedProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClosedProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedProfit, other.closedProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalProfit()).compareTo(other.isSetTotalProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalProfit, other.totalProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionValue()).compareTo(other.isSetPositionValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionValue, other.positionValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionValueMap()).compareTo(other.isSetPositionValueMap());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionValueMap()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionValueMap, other.positionValueMap);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModifyTimestampMs()).compareTo(other.isSetModifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modifyTimestampMs, other.modifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatPositionDynamicInfo(");
    boolean first = true;

    if (isSetTargetKey()) {
      sb.append("targetKey:");
      if (this.targetKey == null) {
        sb.append("null");
      } else {
        sb.append(this.targetKey);
      }
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetTargetType()) {
      if (!first) sb.append(", ");
      sb.append("targetType:");
      if (this.targetType == null) {
        sb.append("null");
      } else {
        sb.append(this.targetType);
      }
      first = false;
    }
    if (isSetLastPrice()) {
      if (!first) sb.append(", ");
      sb.append("lastPrice:");
      sb.append(this.lastPrice);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetClosedProfit()) {
      if (!first) sb.append(", ");
      sb.append("closedProfit:");
      sb.append(this.closedProfit);
      first = false;
    }
    if (isSetTotalProfit()) {
      if (!first) sb.append(", ");
      sb.append("totalProfit:");
      sb.append(this.totalProfit);
      first = false;
    }
    if (isSetPositionValue()) {
      if (!first) sb.append(", ");
      sb.append("positionValue:");
      sb.append(this.positionValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    if (isSetPositionValueMap()) {
      if (!first) sb.append(", ");
      sb.append("positionValueMap:");
      if (this.positionValueMap == null) {
        sb.append("null");
      } else {
        sb.append(this.positionValueMap);
      }
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetModifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("modifyTimestampMs:");
      sb.append(this.modifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatPositionDynamicInfoStandardSchemeFactory implements SchemeFactory {
    public StatPositionDynamicInfoStandardScheme getScheme() {
      return new StatPositionDynamicInfoStandardScheme();
    }
  }

  private static class StatPositionDynamicInfoStandardScheme extends StandardScheme<StatPositionDynamicInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatPositionDynamicInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TARGET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetKey = iprot.readString();
              struct.setTargetKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.targetType = xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.findByValue(iprot.readI32());
              struct.setTargetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLOSED_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closedProfit = iprot.readDouble();
              struct.setClosedProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOTAL_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalProfit = iprot.readDouble();
              struct.setTotalProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionValue = iprot.readDouble();
              struct.setPositionValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION_VALUE_MAP
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.positionValueMap = new HashMap<String,Double>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  String _key12;
                  double _val13;
                  _key12 = iprot.readString();
                  _val13 = iprot.readDouble();
                  struct.positionValueMap.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setPositionValueMapIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // MODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.modifyTimestampMs = iprot.readI64();
              struct.setModifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatPositionDynamicInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.targetKey != null) {
        if (struct.isSetTargetKey()) {
          oprot.writeFieldBegin(TARGET_KEY_FIELD_DESC);
          oprot.writeString(struct.targetKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.targetType != null) {
        if (struct.isSetTargetType()) {
          oprot.writeFieldBegin(TARGET_TYPE_FIELD_DESC);
          oprot.writeI32(struct.targetType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLastPrice()) {
        oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lastPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClosedProfit()) {
        oprot.writeFieldBegin(CLOSED_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closedProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTotalProfit()) {
        oprot.writeFieldBegin(TOTAL_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.totalProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionValue()) {
        oprot.writeFieldBegin(POSITION_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.positionValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      if (struct.positionValueMap != null) {
        if (struct.isSetPositionValueMap()) {
          oprot.writeFieldBegin(POSITION_VALUE_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.positionValueMap.size()));
            for (Map.Entry<String, Double> _iter14 : struct.positionValueMap.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeDouble(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetModifyTimestampMs()) {
        oprot.writeFieldBegin(MODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.modifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatPositionDynamicInfoTupleSchemeFactory implements SchemeFactory {
    public StatPositionDynamicInfoTupleScheme getScheme() {
      return new StatPositionDynamicInfoTupleScheme();
    }
  }

  private static class StatPositionDynamicInfoTupleScheme extends TupleScheme<StatPositionDynamicInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatPositionDynamicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTargetKey()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetTargetType()) {
        optionals.set(2);
      }
      if (struct.isSetLastPrice()) {
        optionals.set(3);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(4);
      }
      if (struct.isSetClosedProfit()) {
        optionals.set(5);
      }
      if (struct.isSetTotalProfit()) {
        optionals.set(6);
      }
      if (struct.isSetPositionValue()) {
        optionals.set(7);
      }
      if (struct.isSetLeverage()) {
        optionals.set(8);
      }
      if (struct.isSetPositionValueMap()) {
        optionals.set(9);
      }
      if (struct.isSetCurrency()) {
        optionals.set(10);
      }
      if (struct.isSetModifyTimestampMs()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetTargetKey()) {
        oprot.writeString(struct.targetKey);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetTargetType()) {
        oprot.writeI32(struct.targetType.getValue());
      }
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetClosedProfit()) {
        oprot.writeDouble(struct.closedProfit);
      }
      if (struct.isSetTotalProfit()) {
        oprot.writeDouble(struct.totalProfit);
      }
      if (struct.isSetPositionValue()) {
        oprot.writeDouble(struct.positionValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
      if (struct.isSetPositionValueMap()) {
        {
          oprot.writeI32(struct.positionValueMap.size());
          for (Map.Entry<String, Double> _iter15 : struct.positionValueMap.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeDouble(_iter15.getValue());
          }
        }
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetModifyTimestampMs()) {
        oprot.writeI64(struct.modifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatPositionDynamicInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.targetKey = iprot.readString();
        struct.setTargetKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetType = xueqiao.trade.hosting.arbitrage.thriftapi.HostingXQTargetType.findByValue(iprot.readI32());
        struct.setTargetTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.closedProfit = iprot.readDouble();
        struct.setClosedProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.totalProfit = iprot.readDouble();
        struct.setTotalProfitIsSet(true);
      }
      if (incoming.get(7)) {
        struct.positionValue = iprot.readDouble();
        struct.setPositionValueIsSet(true);
      }
      if (incoming.get(8)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.positionValueMap = new HashMap<String,Double>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            String _key18;
            double _val19;
            _key18 = iprot.readString();
            _val19 = iprot.readDouble();
            struct.positionValueMap.put(_key18, _val19);
          }
        }
        struct.setPositionValueMapIsSet(true);
      }
      if (incoming.get(10)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.modifyTimestampMs = iprot.readI64();
        struct.setModifyTimestampMsIsSet(true);
      }
    }
  }

}

