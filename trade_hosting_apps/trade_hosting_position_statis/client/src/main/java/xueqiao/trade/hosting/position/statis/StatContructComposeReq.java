/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.statis;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class StatContructComposeReq implements org.apache.thrift.TBase<StatContructComposeReq, StatContructComposeReq._Fields>, java.io.Serializable, Cloneable, Comparable<StatContructComposeReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatContructComposeReq");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField DIRETION_FIELD_DESC = new org.apache.thrift.protocol.TField("diretion", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField COMPOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("composePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField COMPOSE_LEGS_FIELD_DESC = new org.apache.thrift.protocol.TField("composeLegs", org.apache.thrift.protocol.TType.LIST, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new StatContructComposeReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new StatContructComposeReqTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public long composeGraphId; // optional
  /**
   * 
   * @see StatDirection
   */
  public StatDirection diretion; // optional
  public int volume; // optional
  public double composePrice; // optional
  public List<StatComposeLeg> composeLegs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    COMPOSE_GRAPH_ID((short)2, "composeGraphId"),
    /**
     * 
     * @see StatDirection
     */
    DIRETION((short)3, "diretion"),
    VOLUME((short)4, "volume"),
    COMPOSE_PRICE((short)5, "composePrice"),
    COMPOSE_LEGS((short)10, "composeLegs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // COMPOSE_GRAPH_ID
          return COMPOSE_GRAPH_ID;
        case 3: // DIRETION
          return DIRETION;
        case 4: // VOLUME
          return VOLUME;
        case 5: // COMPOSE_PRICE
          return COMPOSE_PRICE;
        case 10: // COMPOSE_LEGS
          return COMPOSE_LEGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __COMPOSEGRAPHID_ISSET_ID = 1;
  private static final int __VOLUME_ISSET_ID = 2;
  private static final int __COMPOSEPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.COMPOSE_GRAPH_ID,_Fields.DIRETION,_Fields.VOLUME,_Fields.COMPOSE_PRICE,_Fields.COMPOSE_LEGS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPOSE_GRAPH_ID, new org.apache.thrift.meta_data.FieldMetaData("composeGraphId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIRETION, new org.apache.thrift.meta_data.FieldMetaData("diretion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, StatDirection.class)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.COMPOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("composePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMPOSE_LEGS, new org.apache.thrift.meta_data.FieldMetaData("composeLegs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatComposeLeg.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatContructComposeReq.class, metaDataMap);
  }

  public StatContructComposeReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StatContructComposeReq(StatContructComposeReq other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    this.composeGraphId = other.composeGraphId;
    if (other.isSetDiretion()) {
      this.diretion = other.diretion;
    }
    this.volume = other.volume;
    this.composePrice = other.composePrice;
    if (other.isSetComposeLegs()) {
      List<StatComposeLeg> __this__composeLegs = new ArrayList<StatComposeLeg>(other.composeLegs.size());
      for (StatComposeLeg other_element : other.composeLegs) {
        __this__composeLegs.add(new StatComposeLeg(other_element));
      }
      this.composeLegs = __this__composeLegs;
    }
  }

  public StatContructComposeReq deepCopy() {
    return new StatContructComposeReq(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setComposeGraphIdIsSet(false);
    this.composeGraphId = 0;
    this.diretion = null;
    setVolumeIsSet(false);
    this.volume = 0;
    setComposePriceIsSet(false);
    this.composePrice = 0.0;
    this.composeLegs = null;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public StatContructComposeReq setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public long getComposeGraphId() {
    return this.composeGraphId;
  }

  public StatContructComposeReq setComposeGraphId(long composeGraphId) {
    this.composeGraphId = composeGraphId;
    setComposeGraphIdIsSet(true);
    return this;
  }

  public void unsetComposeGraphId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  /** Returns true if field composeGraphId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  public void setComposeGraphIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID, value);
  }

  /**
   * 
   * @see StatDirection
   */
  public StatDirection getDiretion() {
    return this.diretion;
  }

  /**
   * 
   * @see StatDirection
   */
  public StatContructComposeReq setDiretion(StatDirection diretion) {
    this.diretion = diretion;
    return this;
  }

  public void unsetDiretion() {
    this.diretion = null;
  }

  /** Returns true if field diretion is set (has been assigned a value) and false otherwise */
  public boolean isSetDiretion() {
    return this.diretion != null;
  }

  public void setDiretionIsSet(boolean value) {
    if (!value) {
      this.diretion = null;
    }
  }

  public int getVolume() {
    return this.volume;
  }

  public StatContructComposeReq setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  public double getComposePrice() {
    return this.composePrice;
  }

  public StatContructComposeReq setComposePrice(double composePrice) {
    this.composePrice = composePrice;
    setComposePriceIsSet(true);
    return this;
  }

  public void unsetComposePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEPRICE_ISSET_ID);
  }

  /** Returns true if field composePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetComposePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEPRICE_ISSET_ID);
  }

  public void setComposePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEPRICE_ISSET_ID, value);
  }

  public int getComposeLegsSize() {
    return (this.composeLegs == null) ? 0 : this.composeLegs.size();
  }

  public java.util.Iterator<StatComposeLeg> getComposeLegsIterator() {
    return (this.composeLegs == null) ? null : this.composeLegs.iterator();
  }

  public void addToComposeLegs(StatComposeLeg elem) {
    if (this.composeLegs == null) {
      this.composeLegs = new ArrayList<StatComposeLeg>();
    }
    this.composeLegs.add(elem);
  }

  public List<StatComposeLeg> getComposeLegs() {
    return this.composeLegs;
  }

  public StatContructComposeReq setComposeLegs(List<StatComposeLeg> composeLegs) {
    this.composeLegs = composeLegs;
    return this;
  }

  public void unsetComposeLegs() {
    this.composeLegs = null;
  }

  /** Returns true if field composeLegs is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeLegs() {
    return this.composeLegs != null;
  }

  public void setComposeLegsIsSet(boolean value) {
    if (!value) {
      this.composeLegs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case COMPOSE_GRAPH_ID:
      if (value == null) {
        unsetComposeGraphId();
      } else {
        setComposeGraphId((Long)value);
      }
      break;

    case DIRETION:
      if (value == null) {
        unsetDiretion();
      } else {
        setDiretion((StatDirection)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case COMPOSE_PRICE:
      if (value == null) {
        unsetComposePrice();
      } else {
        setComposePrice((Double)value);
      }
      break;

    case COMPOSE_LEGS:
      if (value == null) {
        unsetComposeLegs();
      } else {
        setComposeLegs((List<StatComposeLeg>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case COMPOSE_GRAPH_ID:
      return Long.valueOf(getComposeGraphId());

    case DIRETION:
      return getDiretion();

    case VOLUME:
      return Integer.valueOf(getVolume());

    case COMPOSE_PRICE:
      return Double.valueOf(getComposePrice());

    case COMPOSE_LEGS:
      return getComposeLegs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case COMPOSE_GRAPH_ID:
      return isSetComposeGraphId();
    case DIRETION:
      return isSetDiretion();
    case VOLUME:
      return isSetVolume();
    case COMPOSE_PRICE:
      return isSetComposePrice();
    case COMPOSE_LEGS:
      return isSetComposeLegs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StatContructComposeReq)
      return this.equals((StatContructComposeReq)that);
    return false;
  }

  public boolean equals(StatContructComposeReq that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_composeGraphId = true && this.isSetComposeGraphId();
    boolean that_present_composeGraphId = true && that.isSetComposeGraphId();
    if (this_present_composeGraphId || that_present_composeGraphId) {
      if (!(this_present_composeGraphId && that_present_composeGraphId))
        return false;
      if (this.composeGraphId != that.composeGraphId)
        return false;
    }

    boolean this_present_diretion = true && this.isSetDiretion();
    boolean that_present_diretion = true && that.isSetDiretion();
    if (this_present_diretion || that_present_diretion) {
      if (!(this_present_diretion && that_present_diretion))
        return false;
      if (!this.diretion.equals(that.diretion))
        return false;
    }

    boolean this_present_volume = true && this.isSetVolume();
    boolean that_present_volume = true && that.isSetVolume();
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_composePrice = true && this.isSetComposePrice();
    boolean that_present_composePrice = true && that.isSetComposePrice();
    if (this_present_composePrice || that_present_composePrice) {
      if (!(this_present_composePrice && that_present_composePrice))
        return false;
      if (this.composePrice != that.composePrice)
        return false;
    }

    boolean this_present_composeLegs = true && this.isSetComposeLegs();
    boolean that_present_composeLegs = true && that.isSetComposeLegs();
    if (this_present_composeLegs || that_present_composeLegs) {
      if (!(this_present_composeLegs && that_present_composeLegs))
        return false;
      if (!this.composeLegs.equals(that.composeLegs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(StatContructComposeReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphId()).compareTo(other.isSetComposeGraphId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphId, other.composeGraphId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDiretion()).compareTo(other.isSetDiretion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDiretion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.diretion, other.diretion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposePrice()).compareTo(other.isSetComposePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composePrice, other.composePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeLegs()).compareTo(other.isSetComposeLegs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeLegs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeLegs, other.composeLegs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StatContructComposeReq(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetComposeGraphId()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphId:");
      sb.append(this.composeGraphId);
      first = false;
    }
    if (isSetDiretion()) {
      if (!first) sb.append(", ");
      sb.append("diretion:");
      if (this.diretion == null) {
        sb.append("null");
      } else {
        sb.append(this.diretion);
      }
      first = false;
    }
    if (isSetVolume()) {
      if (!first) sb.append(", ");
      sb.append("volume:");
      sb.append(this.volume);
      first = false;
    }
    if (isSetComposePrice()) {
      if (!first) sb.append(", ");
      sb.append("composePrice:");
      sb.append(this.composePrice);
      first = false;
    }
    if (isSetComposeLegs()) {
      if (!first) sb.append(", ");
      sb.append("composeLegs:");
      if (this.composeLegs == null) {
        sb.append("null");
      } else {
        sb.append(this.composeLegs);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StatContructComposeReqStandardSchemeFactory implements SchemeFactory {
    public StatContructComposeReqStandardScheme getScheme() {
      return new StatContructComposeReqStandardScheme();
    }
  }

  private static class StatContructComposeReqStandardScheme extends StandardScheme<StatContructComposeReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StatContructComposeReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSE_GRAPH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.composeGraphId = iprot.readI64();
              struct.setComposeGraphIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DIRETION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.diretion = StatDirection.findByValue(iprot.readI32());
              struct.setDiretionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // COMPOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.composePrice = iprot.readDouble();
              struct.setComposePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMPOSE_LEGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list60 = iprot.readListBegin();
                struct.composeLegs = new ArrayList<StatComposeLeg>(_list60.size);
                for (int _i61 = 0; _i61 < _list60.size; ++_i61)
                {
                  StatComposeLeg _elem62;
                  _elem62 = new StatComposeLeg();
                  _elem62.read(iprot);
                  struct.composeLegs.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setComposeLegsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StatContructComposeReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeFieldBegin(COMPOSE_GRAPH_ID_FIELD_DESC);
        oprot.writeI64(struct.composeGraphId);
        oprot.writeFieldEnd();
      }
      if (struct.diretion != null) {
        if (struct.isSetDiretion()) {
          oprot.writeFieldBegin(DIRETION_FIELD_DESC);
          oprot.writeI32(struct.diretion.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVolume()) {
        oprot.writeFieldBegin(VOLUME_FIELD_DESC);
        oprot.writeI32(struct.volume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetComposePrice()) {
        oprot.writeFieldBegin(COMPOSE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.composePrice);
        oprot.writeFieldEnd();
      }
      if (struct.composeLegs != null) {
        if (struct.isSetComposeLegs()) {
          oprot.writeFieldBegin(COMPOSE_LEGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.composeLegs.size()));
            for (StatComposeLeg _iter63 : struct.composeLegs)
            {
              _iter63.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StatContructComposeReqTupleSchemeFactory implements SchemeFactory {
    public StatContructComposeReqTupleScheme getScheme() {
      return new StatContructComposeReqTupleScheme();
    }
  }

  private static class StatContructComposeReqTupleScheme extends TupleScheme<StatContructComposeReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StatContructComposeReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetComposeGraphId()) {
        optionals.set(1);
      }
      if (struct.isSetDiretion()) {
        optionals.set(2);
      }
      if (struct.isSetVolume()) {
        optionals.set(3);
      }
      if (struct.isSetComposePrice()) {
        optionals.set(4);
      }
      if (struct.isSetComposeLegs()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetComposeGraphId()) {
        oprot.writeI64(struct.composeGraphId);
      }
      if (struct.isSetDiretion()) {
        oprot.writeI32(struct.diretion.getValue());
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetComposePrice()) {
        oprot.writeDouble(struct.composePrice);
      }
      if (struct.isSetComposeLegs()) {
        {
          oprot.writeI32(struct.composeLegs.size());
          for (StatComposeLeg _iter64 : struct.composeLegs)
          {
            _iter64.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StatContructComposeReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.composeGraphId = iprot.readI64();
        struct.setComposeGraphIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.diretion = StatDirection.findByValue(iprot.readI32());
        struct.setDiretionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.composePrice = iprot.readDouble();
        struct.setComposePriceIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list65 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.composeLegs = new ArrayList<StatComposeLeg>(_list65.size);
          for (int _i66 = 0; _i66 < _list65.size; ++_i66)
          {
            StatComposeLeg _elem67;
            _elem67 = new StatComposeLeg();
            _elem67.read(iprot);
            struct.composeLegs.add(_elem67);
          }
        }
        struct.setComposeLegsIsSet(true);
      }
    }
  }

}

