/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.events;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 持仓费率（保证金 和 手续费）变化事件，使用 MessageAgent 推送
 */
public class PositionFeeChangedEvent implements org.apache.thrift.TBase<PositionFeeChangedEvent, PositionFeeChangedEvent._Fields>, java.io.Serializable, Cloneable, Comparable<PositionFeeChangedEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PositionFeeChangedEvent");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("contractId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("margin", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventCreateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionFeeChangedEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionFeeChangedEventTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public long contractId; // optional
  public xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo margin; // optional
  public xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo commission; // optional
  public long eventCreateTimestampMs; // optional
  /**
   * 
   * @see PositionFeeEventType
   */
  public PositionFeeEventType eventType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    CONTRACT_ID((short)2, "contractId"),
    MARGIN((short)10, "margin"),
    COMMISSION((short)11, "commission"),
    EVENT_CREATE_TIMESTAMP_MS((short)12, "eventCreateTimestampMs"),
    /**
     * 
     * @see PositionFeeEventType
     */
    EVENT_TYPE((short)13, "eventType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // CONTRACT_ID
          return CONTRACT_ID;
        case 10: // MARGIN
          return MARGIN;
        case 11: // COMMISSION
          return COMMISSION;
        case 12: // EVENT_CREATE_TIMESTAMP_MS
          return EVENT_CREATE_TIMESTAMP_MS;
        case 13: // EVENT_TYPE
          return EVENT_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __CONTRACTID_ISSET_ID = 1;
  private static final int __EVENTCREATETIMESTAMPMS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.CONTRACT_ID,_Fields.MARGIN,_Fields.COMMISSION,_Fields.EVENT_CREATE_TIMESTAMP_MS,_Fields.EVENT_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("contractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MARGIN, new org.apache.thrift.meta_data.FieldMetaData("margin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo.class)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo.class)));
    tmpMap.put(_Fields.EVENT_CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("eventCreateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PositionFeeEventType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PositionFeeChangedEvent.class, metaDataMap);
  }

  public PositionFeeChangedEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PositionFeeChangedEvent(PositionFeeChangedEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    this.contractId = other.contractId;
    if (other.isSetMargin()) {
      this.margin = new xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo(other.margin);
    }
    if (other.isSetCommission()) {
      this.commission = new xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo(other.commission);
    }
    this.eventCreateTimestampMs = other.eventCreateTimestampMs;
    if (other.isSetEventType()) {
      this.eventType = other.eventType;
    }
  }

  public PositionFeeChangedEvent deepCopy() {
    return new PositionFeeChangedEvent(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setContractIdIsSet(false);
    this.contractId = 0;
    this.margin = null;
    this.commission = null;
    setEventCreateTimestampMsIsSet(false);
    this.eventCreateTimestampMs = 0;
    this.eventType = null;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public PositionFeeChangedEvent setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public long getContractId() {
    return this.contractId;
  }

  public PositionFeeChangedEvent setContractId(long contractId) {
    this.contractId = contractId;
    setContractIdIsSet(true);
    return this;
  }

  public void unsetContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  /** Returns true if field contractId is set (has been assigned a value) and false otherwise */
  public boolean isSetContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTID_ISSET_ID);
  }

  public void setContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTID_ISSET_ID, value);
  }

  public xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo getMargin() {
    return this.margin;
  }

  public PositionFeeChangedEvent setMargin(xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo margin) {
    this.margin = margin;
    return this;
  }

  public void unsetMargin() {
    this.margin = null;
  }

  /** Returns true if field margin is set (has been assigned a value) and false otherwise */
  public boolean isSetMargin() {
    return this.margin != null;
  }

  public void setMarginIsSet(boolean value) {
    if (!value) {
      this.margin = null;
    }
  }

  public xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo getCommission() {
    return this.commission;
  }

  public PositionFeeChangedEvent setCommission(xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo commission) {
    this.commission = commission;
    return this;
  }

  public void unsetCommission() {
    this.commission = null;
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return this.commission != null;
  }

  public void setCommissionIsSet(boolean value) {
    if (!value) {
      this.commission = null;
    }
  }

  public long getEventCreateTimestampMs() {
    return this.eventCreateTimestampMs;
  }

  public PositionFeeChangedEvent setEventCreateTimestampMs(long eventCreateTimestampMs) {
    this.eventCreateTimestampMs = eventCreateTimestampMs;
    setEventCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetEventCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field eventCreateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEventCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  public void setEventCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID, value);
  }

  /**
   * 
   * @see PositionFeeEventType
   */
  public PositionFeeEventType getEventType() {
    return this.eventType;
  }

  /**
   * 
   * @see PositionFeeEventType
   */
  public PositionFeeChangedEvent setEventType(PositionFeeEventType eventType) {
    this.eventType = eventType;
    return this;
  }

  public void unsetEventType() {
    this.eventType = null;
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return this.eventType != null;
  }

  public void setEventTypeIsSet(boolean value) {
    if (!value) {
      this.eventType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case CONTRACT_ID:
      if (value == null) {
        unsetContractId();
      } else {
        setContractId((Long)value);
      }
      break;

    case MARGIN:
      if (value == null) {
        unsetMargin();
      } else {
        setMargin((xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo)value);
      }
      break;

    case EVENT_CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetEventCreateTimestampMs();
      } else {
        setEventCreateTimestampMs((Long)value);
      }
      break;

    case EVENT_TYPE:
      if (value == null) {
        unsetEventType();
      } else {
        setEventType((PositionFeeEventType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case CONTRACT_ID:
      return Long.valueOf(getContractId());

    case MARGIN:
      return getMargin();

    case COMMISSION:
      return getCommission();

    case EVENT_CREATE_TIMESTAMP_MS:
      return Long.valueOf(getEventCreateTimestampMs());

    case EVENT_TYPE:
      return getEventType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case CONTRACT_ID:
      return isSetContractId();
    case MARGIN:
      return isSetMargin();
    case COMMISSION:
      return isSetCommission();
    case EVENT_CREATE_TIMESTAMP_MS:
      return isSetEventCreateTimestampMs();
    case EVENT_TYPE:
      return isSetEventType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PositionFeeChangedEvent)
      return this.equals((PositionFeeChangedEvent)that);
    return false;
  }

  public boolean equals(PositionFeeChangedEvent that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_contractId = true && this.isSetContractId();
    boolean that_present_contractId = true && that.isSetContractId();
    if (this_present_contractId || that_present_contractId) {
      if (!(this_present_contractId && that_present_contractId))
        return false;
      if (this.contractId != that.contractId)
        return false;
    }

    boolean this_present_margin = true && this.isSetMargin();
    boolean that_present_margin = true && that.isSetMargin();
    if (this_present_margin || that_present_margin) {
      if (!(this_present_margin && that_present_margin))
        return false;
      if (!this.margin.equals(that.margin))
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (!this.commission.equals(that.commission))
        return false;
    }

    boolean this_present_eventCreateTimestampMs = true && this.isSetEventCreateTimestampMs();
    boolean that_present_eventCreateTimestampMs = true && that.isSetEventCreateTimestampMs();
    if (this_present_eventCreateTimestampMs || that_present_eventCreateTimestampMs) {
      if (!(this_present_eventCreateTimestampMs && that_present_eventCreateTimestampMs))
        return false;
      if (this.eventCreateTimestampMs != that.eventCreateTimestampMs)
        return false;
    }

    boolean this_present_eventType = true && this.isSetEventType();
    boolean that_present_eventType = true && that.isSetEventType();
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (!this.eventType.equals(that.eventType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PositionFeeChangedEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractId()).compareTo(other.isSetContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractId, other.contractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMargin()).compareTo(other.isSetMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.margin, other.margin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventCreateTimestampMs()).compareTo(other.isSetEventCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventCreateTimestampMs, other.eventCreateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(other.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, other.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PositionFeeChangedEvent(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetContractId()) {
      if (!first) sb.append(", ");
      sb.append("contractId:");
      sb.append(this.contractId);
      first = false;
    }
    if (isSetMargin()) {
      if (!first) sb.append(", ");
      sb.append("margin:");
      if (this.margin == null) {
        sb.append("null");
      } else {
        sb.append(this.margin);
      }
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      if (this.commission == null) {
        sb.append("null");
      } else {
        sb.append(this.commission);
      }
      first = false;
    }
    if (isSetEventCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("eventCreateTimestampMs:");
      sb.append(this.eventCreateTimestampMs);
      first = false;
    }
    if (isSetEventType()) {
      if (!first) sb.append(", ");
      sb.append("eventType:");
      if (this.eventType == null) {
        sb.append("null");
      } else {
        sb.append(this.eventType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (margin != null) {
      margin.validate();
    }
    if (commission != null) {
      commission.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionFeeChangedEventStandardSchemeFactory implements SchemeFactory {
    public PositionFeeChangedEventStandardScheme getScheme() {
      return new PositionFeeChangedEventStandardScheme();
    }
  }

  private static class PositionFeeChangedEventStandardScheme extends StandardScheme<PositionFeeChangedEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PositionFeeChangedEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.contractId = iprot.readI64();
              struct.setContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.margin = new xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo();
              struct.margin.read(iprot);
              struct.setMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commission = new xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo();
              struct.commission.read(iprot);
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EVENT_CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventCreateTimestampMs = iprot.readI64();
              struct.setEventCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventType = PositionFeeEventType.findByValue(iprot.readI32());
              struct.setEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PositionFeeChangedEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetContractId()) {
        oprot.writeFieldBegin(CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.contractId);
        oprot.writeFieldEnd();
      }
      if (struct.margin != null) {
        if (struct.isSetMargin()) {
          oprot.writeFieldBegin(MARGIN_FIELD_DESC);
          struct.margin.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commission != null) {
        if (struct.isSetCommission()) {
          oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
          struct.commission.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeFieldBegin(EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.eventCreateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.eventType != null) {
        if (struct.isSetEventType()) {
          oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
          oprot.writeI32(struct.eventType.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionFeeChangedEventTupleSchemeFactory implements SchemeFactory {
    public PositionFeeChangedEventTupleScheme getScheme() {
      return new PositionFeeChangedEventTupleScheme();
    }
  }

  private static class PositionFeeChangedEventTupleScheme extends TupleScheme<PositionFeeChangedEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PositionFeeChangedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetContractId()) {
        optionals.set(1);
      }
      if (struct.isSetMargin()) {
        optionals.set(2);
      }
      if (struct.isSetCommission()) {
        optionals.set(3);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        optionals.set(4);
      }
      if (struct.isSetEventType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetContractId()) {
        oprot.writeI64(struct.contractId);
      }
      if (struct.isSetMargin()) {
        struct.margin.write(oprot);
      }
      if (struct.isSetCommission()) {
        struct.commission.write(oprot);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeI64(struct.eventCreateTimestampMs);
      }
      if (struct.isSetEventType()) {
        oprot.writeI32(struct.eventType.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PositionFeeChangedEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractId = iprot.readI64();
        struct.setContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.margin = new xueqiao.trade.hosting.position.fee.thriftapi.MarginInfo();
        struct.margin.read(iprot);
        struct.setMarginIsSet(true);
      }
      if (incoming.get(3)) {
        struct.commission = new xueqiao.trade.hosting.position.fee.thriftapi.CommissionInfo();
        struct.commission.read(iprot);
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.eventCreateTimestampMs = iprot.readI64();
        struct.setEventCreateTimestampMsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.eventType = PositionFeeEventType.findByValue(iprot.readI32());
        struct.setEventTypeIsSet(true);
      }
    }
  }

}

