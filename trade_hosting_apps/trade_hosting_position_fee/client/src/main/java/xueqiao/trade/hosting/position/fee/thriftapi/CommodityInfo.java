/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.fee.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommodityInfo implements org.apache.thrift.TBase<CommodityInfo, CommodityInfo._Fields>, java.io.Serializable, Cloneable, Comparable<CommodityInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommodityInfo");

  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMMODITY_ENG_ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityEngAcronym", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField COMMODITY_CN_ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityCnAcronym", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeAcronym", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXCHANGE_CN_ACRONYM_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeCnAcronym", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommodityInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommodityInfoTupleSchemeFactory());
  }

  public String exchangeMic; // optional
  public String commodityEngAcronym; // optional
  public String commodityCnAcronym; // optional
  public String exchangeAcronym; // optional
  public String exchangeCnAcronym; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXCHANGE_MIC((short)1, "exchangeMic"),
    COMMODITY_ENG_ACRONYM((short)3, "commodityEngAcronym"),
    COMMODITY_CN_ACRONYM((short)4, "commodityCnAcronym"),
    EXCHANGE_ACRONYM((short)5, "exchangeAcronym"),
    EXCHANGE_CN_ACRONYM((short)6, "exchangeCnAcronym");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // COMMODITY_ENG_ACRONYM
          return COMMODITY_ENG_ACRONYM;
        case 4: // COMMODITY_CN_ACRONYM
          return COMMODITY_CN_ACRONYM;
        case 5: // EXCHANGE_ACRONYM
          return EXCHANGE_ACRONYM;
        case 6: // EXCHANGE_CN_ACRONYM
          return EXCHANGE_CN_ACRONYM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.EXCHANGE_MIC,_Fields.COMMODITY_ENG_ACRONYM,_Fields.COMMODITY_CN_ACRONYM,_Fields.EXCHANGE_ACRONYM,_Fields.EXCHANGE_CN_ACRONYM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_ENG_ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("commodityEngAcronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_CN_ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("commodityCnAcronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("exchangeAcronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_CN_ACRONYM, new org.apache.thrift.meta_data.FieldMetaData("exchangeCnAcronym", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommodityInfo.class, metaDataMap);
  }

  public CommodityInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommodityInfo(CommodityInfo other) {
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    if (other.isSetCommodityEngAcronym()) {
      this.commodityEngAcronym = other.commodityEngAcronym;
    }
    if (other.isSetCommodityCnAcronym()) {
      this.commodityCnAcronym = other.commodityCnAcronym;
    }
    if (other.isSetExchangeAcronym()) {
      this.exchangeAcronym = other.exchangeAcronym;
    }
    if (other.isSetExchangeCnAcronym()) {
      this.exchangeCnAcronym = other.exchangeCnAcronym;
    }
  }

  public CommodityInfo deepCopy() {
    return new CommodityInfo(this);
  }

  @Override
  public void clear() {
    this.exchangeMic = null;
    this.commodityEngAcronym = null;
    this.commodityCnAcronym = null;
    this.exchangeAcronym = null;
    this.exchangeCnAcronym = null;
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public CommodityInfo setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public String getCommodityEngAcronym() {
    return this.commodityEngAcronym;
  }

  public CommodityInfo setCommodityEngAcronym(String commodityEngAcronym) {
    this.commodityEngAcronym = commodityEngAcronym;
    return this;
  }

  public void unsetCommodityEngAcronym() {
    this.commodityEngAcronym = null;
  }

  /** Returns true if field commodityEngAcronym is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityEngAcronym() {
    return this.commodityEngAcronym != null;
  }

  public void setCommodityEngAcronymIsSet(boolean value) {
    if (!value) {
      this.commodityEngAcronym = null;
    }
  }

  public String getCommodityCnAcronym() {
    return this.commodityCnAcronym;
  }

  public CommodityInfo setCommodityCnAcronym(String commodityCnAcronym) {
    this.commodityCnAcronym = commodityCnAcronym;
    return this;
  }

  public void unsetCommodityCnAcronym() {
    this.commodityCnAcronym = null;
  }

  /** Returns true if field commodityCnAcronym is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityCnAcronym() {
    return this.commodityCnAcronym != null;
  }

  public void setCommodityCnAcronymIsSet(boolean value) {
    if (!value) {
      this.commodityCnAcronym = null;
    }
  }

  public String getExchangeAcronym() {
    return this.exchangeAcronym;
  }

  public CommodityInfo setExchangeAcronym(String exchangeAcronym) {
    this.exchangeAcronym = exchangeAcronym;
    return this;
  }

  public void unsetExchangeAcronym() {
    this.exchangeAcronym = null;
  }

  /** Returns true if field exchangeAcronym is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeAcronym() {
    return this.exchangeAcronym != null;
  }

  public void setExchangeAcronymIsSet(boolean value) {
    if (!value) {
      this.exchangeAcronym = null;
    }
  }

  public String getExchangeCnAcronym() {
    return this.exchangeCnAcronym;
  }

  public CommodityInfo setExchangeCnAcronym(String exchangeCnAcronym) {
    this.exchangeCnAcronym = exchangeCnAcronym;
    return this;
  }

  public void unsetExchangeCnAcronym() {
    this.exchangeCnAcronym = null;
  }

  /** Returns true if field exchangeCnAcronym is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeCnAcronym() {
    return this.exchangeCnAcronym != null;
  }

  public void setExchangeCnAcronymIsSet(boolean value) {
    if (!value) {
      this.exchangeCnAcronym = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case COMMODITY_ENG_ACRONYM:
      if (value == null) {
        unsetCommodityEngAcronym();
      } else {
        setCommodityEngAcronym((String)value);
      }
      break;

    case COMMODITY_CN_ACRONYM:
      if (value == null) {
        unsetCommodityCnAcronym();
      } else {
        setCommodityCnAcronym((String)value);
      }
      break;

    case EXCHANGE_ACRONYM:
      if (value == null) {
        unsetExchangeAcronym();
      } else {
        setExchangeAcronym((String)value);
      }
      break;

    case EXCHANGE_CN_ACRONYM:
      if (value == null) {
        unsetExchangeCnAcronym();
      } else {
        setExchangeCnAcronym((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXCHANGE_MIC:
      return getExchangeMic();

    case COMMODITY_ENG_ACRONYM:
      return getCommodityEngAcronym();

    case COMMODITY_CN_ACRONYM:
      return getCommodityCnAcronym();

    case EXCHANGE_ACRONYM:
      return getExchangeAcronym();

    case EXCHANGE_CN_ACRONYM:
      return getExchangeCnAcronym();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case COMMODITY_ENG_ACRONYM:
      return isSetCommodityEngAcronym();
    case COMMODITY_CN_ACRONYM:
      return isSetCommodityCnAcronym();
    case EXCHANGE_ACRONYM:
      return isSetExchangeAcronym();
    case EXCHANGE_CN_ACRONYM:
      return isSetExchangeCnAcronym();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommodityInfo)
      return this.equals((CommodityInfo)that);
    return false;
  }

  public boolean equals(CommodityInfo that) {
    if (that == null)
      return false;

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_commodityEngAcronym = true && this.isSetCommodityEngAcronym();
    boolean that_present_commodityEngAcronym = true && that.isSetCommodityEngAcronym();
    if (this_present_commodityEngAcronym || that_present_commodityEngAcronym) {
      if (!(this_present_commodityEngAcronym && that_present_commodityEngAcronym))
        return false;
      if (!this.commodityEngAcronym.equals(that.commodityEngAcronym))
        return false;
    }

    boolean this_present_commodityCnAcronym = true && this.isSetCommodityCnAcronym();
    boolean that_present_commodityCnAcronym = true && that.isSetCommodityCnAcronym();
    if (this_present_commodityCnAcronym || that_present_commodityCnAcronym) {
      if (!(this_present_commodityCnAcronym && that_present_commodityCnAcronym))
        return false;
      if (!this.commodityCnAcronym.equals(that.commodityCnAcronym))
        return false;
    }

    boolean this_present_exchangeAcronym = true && this.isSetExchangeAcronym();
    boolean that_present_exchangeAcronym = true && that.isSetExchangeAcronym();
    if (this_present_exchangeAcronym || that_present_exchangeAcronym) {
      if (!(this_present_exchangeAcronym && that_present_exchangeAcronym))
        return false;
      if (!this.exchangeAcronym.equals(that.exchangeAcronym))
        return false;
    }

    boolean this_present_exchangeCnAcronym = true && this.isSetExchangeCnAcronym();
    boolean that_present_exchangeCnAcronym = true && that.isSetExchangeCnAcronym();
    if (this_present_exchangeCnAcronym || that_present_exchangeCnAcronym) {
      if (!(this_present_exchangeCnAcronym && that_present_exchangeCnAcronym))
        return false;
      if (!this.exchangeCnAcronym.equals(that.exchangeCnAcronym))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommodityInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityEngAcronym()).compareTo(other.isSetCommodityEngAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityEngAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityEngAcronym, other.commodityEngAcronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityCnAcronym()).compareTo(other.isSetCommodityCnAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityCnAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityCnAcronym, other.commodityCnAcronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeAcronym()).compareTo(other.isSetExchangeAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeAcronym, other.exchangeAcronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeCnAcronym()).compareTo(other.isSetExchangeCnAcronym());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeCnAcronym()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeCnAcronym, other.exchangeCnAcronym);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommodityInfo(");
    boolean first = true;

    if (isSetExchangeMic()) {
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetCommodityEngAcronym()) {
      if (!first) sb.append(", ");
      sb.append("commodityEngAcronym:");
      if (this.commodityEngAcronym == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityEngAcronym);
      }
      first = false;
    }
    if (isSetCommodityCnAcronym()) {
      if (!first) sb.append(", ");
      sb.append("commodityCnAcronym:");
      if (this.commodityCnAcronym == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityCnAcronym);
      }
      first = false;
    }
    if (isSetExchangeAcronym()) {
      if (!first) sb.append(", ");
      sb.append("exchangeAcronym:");
      if (this.exchangeAcronym == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeAcronym);
      }
      first = false;
    }
    if (isSetExchangeCnAcronym()) {
      if (!first) sb.append(", ");
      sb.append("exchangeCnAcronym:");
      if (this.exchangeCnAcronym == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeCnAcronym);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommodityInfoStandardSchemeFactory implements SchemeFactory {
    public CommodityInfoStandardScheme getScheme() {
      return new CommodityInfoStandardScheme();
    }
  }

  private static class CommodityInfoStandardScheme extends StandardScheme<CommodityInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommodityInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_ENG_ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityEngAcronym = iprot.readString();
              struct.setCommodityEngAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMODITY_CN_ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.commodityCnAcronym = iprot.readString();
              struct.setCommodityCnAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE_ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeAcronym = iprot.readString();
              struct.setExchangeAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXCHANGE_CN_ACRONYM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeCnAcronym = iprot.readString();
              struct.setExchangeCnAcronymIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommodityInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityEngAcronym != null) {
        if (struct.isSetCommodityEngAcronym()) {
          oprot.writeFieldBegin(COMMODITY_ENG_ACRONYM_FIELD_DESC);
          oprot.writeString(struct.commodityEngAcronym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityCnAcronym != null) {
        if (struct.isSetCommodityCnAcronym()) {
          oprot.writeFieldBegin(COMMODITY_CN_ACRONYM_FIELD_DESC);
          oprot.writeString(struct.commodityCnAcronym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeAcronym != null) {
        if (struct.isSetExchangeAcronym()) {
          oprot.writeFieldBegin(EXCHANGE_ACRONYM_FIELD_DESC);
          oprot.writeString(struct.exchangeAcronym);
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeCnAcronym != null) {
        if (struct.isSetExchangeCnAcronym()) {
          oprot.writeFieldBegin(EXCHANGE_CN_ACRONYM_FIELD_DESC);
          oprot.writeString(struct.exchangeCnAcronym);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommodityInfoTupleSchemeFactory implements SchemeFactory {
    public CommodityInfoTupleScheme getScheme() {
      return new CommodityInfoTupleScheme();
    }
  }

  private static class CommodityInfoTupleScheme extends TupleScheme<CommodityInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommodityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExchangeMic()) {
        optionals.set(0);
      }
      if (struct.isSetCommodityEngAcronym()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityCnAcronym()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeAcronym()) {
        optionals.set(3);
      }
      if (struct.isSetExchangeCnAcronym()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetCommodityEngAcronym()) {
        oprot.writeString(struct.commodityEngAcronym);
      }
      if (struct.isSetCommodityCnAcronym()) {
        oprot.writeString(struct.commodityCnAcronym);
      }
      if (struct.isSetExchangeAcronym()) {
        oprot.writeString(struct.exchangeAcronym);
      }
      if (struct.isSetExchangeCnAcronym()) {
        oprot.writeString(struct.exchangeCnAcronym);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommodityInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(1)) {
        struct.commodityEngAcronym = iprot.readString();
        struct.setCommodityEngAcronymIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityCnAcronym = iprot.readString();
        struct.setCommodityCnAcronymIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeAcronym = iprot.readString();
        struct.setExchangeAcronymIsSet(true);
      }
      if (incoming.get(4)) {
        struct.exchangeCnAcronym = iprot.readString();
        struct.setExchangeCnAcronymIsSet(true);
      }
    }
  }

}

