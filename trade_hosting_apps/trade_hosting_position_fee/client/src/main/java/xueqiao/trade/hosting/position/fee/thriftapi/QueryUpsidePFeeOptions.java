/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.fee.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryUpsidePFeeOptions implements org.apache.thrift.TBase<QueryUpsidePFeeOptions, QueryUpsidePFeeOptions._Fields>, java.io.Serializable, Cloneable, Comparable<QueryUpsidePFeeOptions> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryUpsidePFeeOptions");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeMic", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractCode", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryUpsidePFeeOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryUpsidePFeeOptionsTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public String exchangeMic; // optional
  public long commodityId; // optional
  public String contractCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    EXCHANGE_MIC((short)2, "exchangeMic"),
    COMMODITY_ID((short)3, "commodityId"),
    CONTRACT_CODE((short)4, "contractCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // EXCHANGE_MIC
          return EXCHANGE_MIC;
        case 3: // COMMODITY_ID
          return COMMODITY_ID;
        case 4: // CONTRACT_CODE
          return CONTRACT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __COMMODITYID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.EXCHANGE_MIC,_Fields.COMMODITY_ID,_Fields.CONTRACT_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("exchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("commodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("contractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryUpsidePFeeOptions.class, metaDataMap);
  }

  public QueryUpsidePFeeOptions() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryUpsidePFeeOptions(QueryUpsidePFeeOptions other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetExchangeMic()) {
      this.exchangeMic = other.exchangeMic;
    }
    this.commodityId = other.commodityId;
    if (other.isSetContractCode()) {
      this.contractCode = other.contractCode;
    }
  }

  public QueryUpsidePFeeOptions deepCopy() {
    return new QueryUpsidePFeeOptions(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.exchangeMic = null;
    setCommodityIdIsSet(false);
    this.commodityId = 0;
    this.contractCode = null;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public QueryUpsidePFeeOptions setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public String getExchangeMic() {
    return this.exchangeMic;
  }

  public QueryUpsidePFeeOptions setExchangeMic(String exchangeMic) {
    this.exchangeMic = exchangeMic;
    return this;
  }

  public void unsetExchangeMic() {
    this.exchangeMic = null;
  }

  /** Returns true if field exchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeMic() {
    return this.exchangeMic != null;
  }

  public void setExchangeMicIsSet(boolean value) {
    if (!value) {
      this.exchangeMic = null;
    }
  }

  public long getCommodityId() {
    return this.commodityId;
  }

  public QueryUpsidePFeeOptions setCommodityId(long commodityId) {
    this.commodityId = commodityId;
    setCommodityIdIsSet(true);
    return this;
  }

  public void unsetCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMODITYID_ISSET_ID);
  }

  /** Returns true if field commodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMODITYID_ISSET_ID);
  }

  public void setCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMODITYID_ISSET_ID, value);
  }

  public String getContractCode() {
    return this.contractCode;
  }

  public QueryUpsidePFeeOptions setContractCode(String contractCode) {
    this.contractCode = contractCode;
    return this;
  }

  public void unsetContractCode() {
    this.contractCode = null;
  }

  /** Returns true if field contractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetContractCode() {
    return this.contractCode != null;
  }

  public void setContractCodeIsSet(boolean value) {
    if (!value) {
      this.contractCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case EXCHANGE_MIC:
      if (value == null) {
        unsetExchangeMic();
      } else {
        setExchangeMic((String)value);
      }
      break;

    case COMMODITY_ID:
      if (value == null) {
        unsetCommodityId();
      } else {
        setCommodityId((Long)value);
      }
      break;

    case CONTRACT_CODE:
      if (value == null) {
        unsetContractCode();
      } else {
        setContractCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case EXCHANGE_MIC:
      return getExchangeMic();

    case COMMODITY_ID:
      return Long.valueOf(getCommodityId());

    case CONTRACT_CODE:
      return getContractCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case EXCHANGE_MIC:
      return isSetExchangeMic();
    case COMMODITY_ID:
      return isSetCommodityId();
    case CONTRACT_CODE:
      return isSetContractCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryUpsidePFeeOptions)
      return this.equals((QueryUpsidePFeeOptions)that);
    return false;
  }

  public boolean equals(QueryUpsidePFeeOptions that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_exchangeMic = true && this.isSetExchangeMic();
    boolean that_present_exchangeMic = true && that.isSetExchangeMic();
    if (this_present_exchangeMic || that_present_exchangeMic) {
      if (!(this_present_exchangeMic && that_present_exchangeMic))
        return false;
      if (!this.exchangeMic.equals(that.exchangeMic))
        return false;
    }

    boolean this_present_commodityId = true && this.isSetCommodityId();
    boolean that_present_commodityId = true && that.isSetCommodityId();
    if (this_present_commodityId || that_present_commodityId) {
      if (!(this_present_commodityId && that_present_commodityId))
        return false;
      if (this.commodityId != that.commodityId)
        return false;
    }

    boolean this_present_contractCode = true && this.isSetContractCode();
    boolean that_present_contractCode = true && that.isSetContractCode();
    if (this_present_contractCode || that_present_contractCode) {
      if (!(this_present_contractCode && that_present_contractCode))
        return false;
      if (!this.contractCode.equals(that.contractCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryUpsidePFeeOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeMic()).compareTo(other.isSetExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeMic, other.exchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityId()).compareTo(other.isSetCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityId, other.commodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractCode()).compareTo(other.isSetContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractCode, other.contractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryUpsidePFeeOptions(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("exchangeMic:");
      if (this.exchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeMic);
      }
      first = false;
    }
    if (isSetCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("commodityId:");
      sb.append(this.commodityId);
      first = false;
    }
    if (isSetContractCode()) {
      if (!first) sb.append(", ");
      sb.append("contractCode:");
      if (this.contractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.contractCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryUpsidePFeeOptionsStandardSchemeFactory implements SchemeFactory {
    public QueryUpsidePFeeOptionsStandardScheme getScheme() {
      return new QueryUpsidePFeeOptionsStandardScheme();
    }
  }

  private static class QueryUpsidePFeeOptionsStandardScheme extends StandardScheme<QueryUpsidePFeeOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryUpsidePFeeOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeMic = iprot.readString();
              struct.setExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.commodityId = iprot.readI64();
              struct.setCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractCode = iprot.readString();
              struct.setContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryUpsidePFeeOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.exchangeMic != null) {
        if (struct.isSetExchangeMic()) {
          oprot.writeFieldBegin(EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.exchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCommodityId()) {
        oprot.writeFieldBegin(COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.commodityId);
        oprot.writeFieldEnd();
      }
      if (struct.contractCode != null) {
        if (struct.isSetContractCode()) {
          oprot.writeFieldBegin(CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.contractCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryUpsidePFeeOptionsTupleSchemeFactory implements SchemeFactory {
    public QueryUpsidePFeeOptionsTupleScheme getScheme() {
      return new QueryUpsidePFeeOptionsTupleScheme();
    }
  }

  private static class QueryUpsidePFeeOptionsTupleScheme extends TupleScheme<QueryUpsidePFeeOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryUpsidePFeeOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetExchangeMic()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityId()) {
        optionals.set(2);
      }
      if (struct.isSetContractCode()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetExchangeMic()) {
        oprot.writeString(struct.exchangeMic);
      }
      if (struct.isSetCommodityId()) {
        oprot.writeI64(struct.commodityId);
      }
      if (struct.isSetContractCode()) {
        oprot.writeString(struct.contractCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryUpsidePFeeOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.exchangeMic = iprot.readString();
        struct.setExchangeMicIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commodityId = iprot.readI64();
        struct.setCommodityIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractCode = iprot.readString();
        struct.setContractCodeIsSet(true);
      }
    }
  }

}

