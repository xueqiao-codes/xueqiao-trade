#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from contract_standard.ttypes import *
from contract.ttypes import *
from contract_online_dao_service.ttypes import *
from contract_online_dao_service import ContractOnlineDaoService

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class ContractOnlineDaoServiceStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, methodName, routeKey)

  def reqSledContract(self, routeKey, timeout, option,pageIndex,pageSize,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqSledContract', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.reqSledContract(platformArgs,option,pageIndex,pageSize,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledContract', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledContract', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqCommodityMapping(self, routeKey, timeout, option,pageIndex,pageSize,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqCommodityMapping', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.reqCommodityMapping(platformArgs,option,pageIndex,pageSize,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqCommodityMapping', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqCommodityMapping', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqSledExchange(self, routeKey, timeout, option,pageIndex,pageSize,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqSledExchange', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.reqSledExchange(platformArgs,option,pageIndex,pageSize,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledExchange', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledExchange', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqSledCommodity(self, routeKey, timeout, option,pageIndex,pageSize,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqSledCommodity', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.reqSledCommodity(platformArgs,option,pageIndex,pageSize,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledCommodity', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqSledCommodity', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqContractVersion(self, routeKey, timeout, option,pageIndex,pageSize,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqContractVersion', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.reqContractVersion(platformArgs,option,pageIndex,pageSize,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqContractVersion', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'reqContractVersion', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateContractVersion(self, routeKey, timeout, contractVersion,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateContractVersion', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.updateContractVersion(platformArgs,contractVersion,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'updateContractVersion', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'updateContractVersion', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeContractVersion(self, routeKey, timeout, versionId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeContractVersion', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=ContractOnlineDaoService.Client(protocol)
    try:
      transport.open()
      result = client.removeContractVersion(platformArgs,versionId,)
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'removeContractVersion', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(ContractOnlineDaoService.ContractOnlineDaoService_SERVICE_KEY, 'removeContractVersion', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

