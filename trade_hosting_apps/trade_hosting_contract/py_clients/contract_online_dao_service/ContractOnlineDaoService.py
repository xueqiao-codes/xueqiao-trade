#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


ContractOnlineDaoService_SERVICE_KEY=253
class Iface:
  """
  雪橇线上合约查询服务

  """
  def reqSledContract(self, platformArgs, option, pageIndex, pageSize):
    """

    查询雪橇合约详细
    返回雪橇合约详细

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    pass

  def reqCommodityMapping(self, platformArgs, option, pageIndex, pageSize):
    """
    根据 option 查询雪橇商品映射
    返回商品映射信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    pass

  def reqSledExchange(self, platformArgs, option, pageIndex, pageSize):
    """
    查询雪橇交易所
    分页返回交易所信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    pass

  def reqSledCommodity(self, platformArgs, option, pageIndex, pageSize):
    """
    根据 option 查询雪橇商品
    分页返回雪橇商品信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    pass

  def reqContractVersion(self, platformArgs, option, pageIndex, pageSize):
    """
    查询最新的合约版本信息
    返回合约版本信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    pass

  def updateContractVersion(self, platformArgs, contractVersion):
    """
    根据versionId更新合约版本信息
    返回合约版本信息

    Parameters:
     - platformArgs
     - contractVersion
    """
    pass

  def removeContractVersion(self, platformArgs, versionId):
    """
    删除versionId对应的合约版本信息


    Parameters:
     - platformArgs
     - versionId
    """
    pass


class Client(Iface):
  """
  雪橇线上合约查询服务

  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def reqSledContract(self, platformArgs, option, pageIndex, pageSize):
    """

    查询雪橇合约详细
    返回雪橇合约详细

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    self.send_reqSledContract(platformArgs, option, pageIndex, pageSize)
    return self.recv_reqSledContract()

  def send_reqSledContract(self, platformArgs, option, pageIndex, pageSize):
    self._oprot.writeMessageBegin('reqSledContract', TMessageType.CALL, self._seqid)
    args = reqSledContract_args()
    args.platformArgs = platformArgs
    args.option = option
    args.pageIndex = pageIndex
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqSledContract(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqSledContract_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqSledContract failed: unknown result");

  def reqCommodityMapping(self, platformArgs, option, pageIndex, pageSize):
    """
    根据 option 查询雪橇商品映射
    返回商品映射信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    self.send_reqCommodityMapping(platformArgs, option, pageIndex, pageSize)
    return self.recv_reqCommodityMapping()

  def send_reqCommodityMapping(self, platformArgs, option, pageIndex, pageSize):
    self._oprot.writeMessageBegin('reqCommodityMapping', TMessageType.CALL, self._seqid)
    args = reqCommodityMapping_args()
    args.platformArgs = platformArgs
    args.option = option
    args.pageIndex = pageIndex
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqCommodityMapping(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqCommodityMapping_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqCommodityMapping failed: unknown result");

  def reqSledExchange(self, platformArgs, option, pageIndex, pageSize):
    """
    查询雪橇交易所
    分页返回交易所信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    self.send_reqSledExchange(platformArgs, option, pageIndex, pageSize)
    return self.recv_reqSledExchange()

  def send_reqSledExchange(self, platformArgs, option, pageIndex, pageSize):
    self._oprot.writeMessageBegin('reqSledExchange', TMessageType.CALL, self._seqid)
    args = reqSledExchange_args()
    args.platformArgs = platformArgs
    args.option = option
    args.pageIndex = pageIndex
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqSledExchange(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqSledExchange_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqSledExchange failed: unknown result");

  def reqSledCommodity(self, platformArgs, option, pageIndex, pageSize):
    """
    根据 option 查询雪橇商品
    分页返回雪橇商品信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    self.send_reqSledCommodity(platformArgs, option, pageIndex, pageSize)
    return self.recv_reqSledCommodity()

  def send_reqSledCommodity(self, platformArgs, option, pageIndex, pageSize):
    self._oprot.writeMessageBegin('reqSledCommodity', TMessageType.CALL, self._seqid)
    args = reqSledCommodity_args()
    args.platformArgs = platformArgs
    args.option = option
    args.pageIndex = pageIndex
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqSledCommodity(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqSledCommodity_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqSledCommodity failed: unknown result");

  def reqContractVersion(self, platformArgs, option, pageIndex, pageSize):
    """
    查询最新的合约版本信息
    返回合约版本信息

    Parameters:
     - platformArgs
     - option
     - pageIndex
     - pageSize
    """
    self.send_reqContractVersion(platformArgs, option, pageIndex, pageSize)
    return self.recv_reqContractVersion()

  def send_reqContractVersion(self, platformArgs, option, pageIndex, pageSize):
    self._oprot.writeMessageBegin('reqContractVersion', TMessageType.CALL, self._seqid)
    args = reqContractVersion_args()
    args.platformArgs = platformArgs
    args.option = option
    args.pageIndex = pageIndex
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqContractVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqContractVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqContractVersion failed: unknown result");

  def updateContractVersion(self, platformArgs, contractVersion):
    """
    根据versionId更新合约版本信息
    返回合约版本信息

    Parameters:
     - platformArgs
     - contractVersion
    """
    self.send_updateContractVersion(platformArgs, contractVersion)
    self.recv_updateContractVersion()

  def send_updateContractVersion(self, platformArgs, contractVersion):
    self._oprot.writeMessageBegin('updateContractVersion', TMessageType.CALL, self._seqid)
    args = updateContractVersion_args()
    args.platformArgs = platformArgs
    args.contractVersion = contractVersion
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateContractVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateContractVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def removeContractVersion(self, platformArgs, versionId):
    """
    删除versionId对应的合约版本信息


    Parameters:
     - platformArgs
     - versionId
    """
    self.send_removeContractVersion(platformArgs, versionId)
    self.recv_removeContractVersion()

  def send_removeContractVersion(self, platformArgs, versionId):
    self._oprot.writeMessageBegin('removeContractVersion', TMessageType.CALL, self._seqid)
    args = removeContractVersion_args()
    args.platformArgs = platformArgs
    args.versionId = versionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeContractVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeContractVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["reqSledContract"] = Processor.process_reqSledContract
    self._processMap["reqCommodityMapping"] = Processor.process_reqCommodityMapping
    self._processMap["reqSledExchange"] = Processor.process_reqSledExchange
    self._processMap["reqSledCommodity"] = Processor.process_reqSledCommodity
    self._processMap["reqContractVersion"] = Processor.process_reqContractVersion
    self._processMap["updateContractVersion"] = Processor.process_updateContractVersion
    self._processMap["removeContractVersion"] = Processor.process_removeContractVersion

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_reqSledContract(self, seqid, iprot, oprot):
    args = reqSledContract_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqSledContract_result()
    try:
      result.success = self._handler.reqSledContract(args.platformArgs, args.option, args.pageIndex, args.pageSize)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqSledContract", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqCommodityMapping(self, seqid, iprot, oprot):
    args = reqCommodityMapping_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqCommodityMapping_result()
    try:
      result.success = self._handler.reqCommodityMapping(args.platformArgs, args.option, args.pageIndex, args.pageSize)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqCommodityMapping", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqSledExchange(self, seqid, iprot, oprot):
    args = reqSledExchange_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqSledExchange_result()
    try:
      result.success = self._handler.reqSledExchange(args.platformArgs, args.option, args.pageIndex, args.pageSize)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqSledExchange", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqSledCommodity(self, seqid, iprot, oprot):
    args = reqSledCommodity_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqSledCommodity_result()
    try:
      result.success = self._handler.reqSledCommodity(args.platformArgs, args.option, args.pageIndex, args.pageSize)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqSledCommodity", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqContractVersion(self, seqid, iprot, oprot):
    args = reqContractVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqContractVersion_result()
    try:
      result.success = self._handler.reqContractVersion(args.platformArgs, args.option, args.pageIndex, args.pageSize)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqContractVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateContractVersion(self, seqid, iprot, oprot):
    args = updateContractVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateContractVersion_result()
    try:
      self._handler.updateContractVersion(args.platformArgs, args.contractVersion)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateContractVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeContractVersion(self, seqid, iprot, oprot):
    args = removeContractVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeContractVersion_result()
    try:
      self._handler.removeContractVersion(args.platformArgs, args.versionId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("removeContractVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class reqSledContract_args:
  """
  Attributes:
   - platformArgs
   - option
   - pageIndex
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'option', (contract_standard.ttypes.ReqSledContractOption, contract_standard.ttypes.ReqSledContractOption.thrift_spec), None, ), # 2
    (3, TType.I32, 'pageIndex', None, None, ), # 3
    (4, TType.I32, 'pageSize', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, option=None, pageIndex=None, pageSize=None,):
    self.platformArgs = platformArgs
    self.option = option
    self.pageIndex = pageIndex
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.option = contract_standard.ttypes.ReqSledContractOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledContract_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 2)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageIndex is not None:
      oprot.writeFieldBegin('pageIndex', TType.I32, 3)
      oprot.writeI32(self.pageIndex)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 4)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqSledContract_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (contract_standard.ttypes.SledContractPage, contract_standard.ttypes.SledContractPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = contract_standard.ttypes.SledContractPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledContract_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqCommodityMapping_args:
  """
  Attributes:
   - platformArgs
   - option
   - pageIndex
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'option', (contract_standard.ttypes.ReqCommodityMappingOption, contract_standard.ttypes.ReqCommodityMappingOption.thrift_spec), None, ), # 2
    (3, TType.I32, 'pageIndex', None, None, ), # 3
    (4, TType.I32, 'pageSize', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, option=None, pageIndex=None, pageSize=None,):
    self.platformArgs = platformArgs
    self.option = option
    self.pageIndex = pageIndex
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.option = contract_standard.ttypes.ReqCommodityMappingOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqCommodityMapping_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 2)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageIndex is not None:
      oprot.writeFieldBegin('pageIndex', TType.I32, 3)
      oprot.writeI32(self.pageIndex)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 4)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqCommodityMapping_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (contract_standard.ttypes.CommodityMappingPage, contract_standard.ttypes.CommodityMappingPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = contract_standard.ttypes.CommodityMappingPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqCommodityMapping_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqSledExchange_args:
  """
  Attributes:
   - platformArgs
   - option
   - pageIndex
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.STRUCT, 'option', (contract_standard.ttypes.ReqSledExchangeOption, contract_standard.ttypes.ReqSledExchangeOption.thrift_spec), None, ), # 3
    (4, TType.I32, 'pageIndex', None, None, ), # 4
    (5, TType.I32, 'pageSize', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, option=None, pageIndex=None, pageSize=None,):
    self.platformArgs = platformArgs
    self.option = option
    self.pageIndex = pageIndex
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = contract_standard.ttypes.ReqSledExchangeOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledExchange_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageIndex is not None:
      oprot.writeFieldBegin('pageIndex', TType.I32, 4)
      oprot.writeI32(self.pageIndex)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 5)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqSledExchange_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (contract_standard.ttypes.SledExchangePage, contract_standard.ttypes.SledExchangePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = contract_standard.ttypes.SledExchangePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledExchange_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqSledCommodity_args:
  """
  Attributes:
   - platformArgs
   - option
   - pageIndex
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    None, # 2
    (3, TType.STRUCT, 'option', (contract_standard.ttypes.ReqSledCommodityOption, contract_standard.ttypes.ReqSledCommodityOption.thrift_spec), None, ), # 3
    (4, TType.I32, 'pageIndex', None, None, ), # 4
    (5, TType.I32, 'pageSize', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, option=None, pageIndex=None, pageSize=None,):
    self.platformArgs = platformArgs
    self.option = option
    self.pageIndex = pageIndex
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = contract_standard.ttypes.ReqSledCommodityOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledCommodity_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageIndex is not None:
      oprot.writeFieldBegin('pageIndex', TType.I32, 4)
      oprot.writeI32(self.pageIndex)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 5)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqSledCommodity_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (contract_standard.ttypes.SledCommodityPage, contract_standard.ttypes.SledCommodityPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = contract_standard.ttypes.SledCommodityPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqSledCommodity_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqContractVersion_args:
  """
  Attributes:
   - platformArgs
   - option
   - pageIndex
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'option', (contract.ttypes.ReqContractVersionOption, contract.ttypes.ReqContractVersionOption.thrift_spec), None, ), # 2
    (3, TType.I32, 'pageIndex', None, None, ), # 3
    (4, TType.I32, 'pageSize', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, option=None, pageIndex=None, pageSize=None,):
    self.platformArgs = platformArgs
    self.option = option
    self.pageIndex = pageIndex
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.option = contract.ttypes.ReqContractVersionOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.pageIndex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqContractVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 2)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageIndex is not None:
      oprot.writeFieldBegin('pageIndex', TType.I32, 3)
      oprot.writeI32(self.pageIndex)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 4)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqContractVersion_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (contract.ttypes.ContractVersionPage, contract.ttypes.ContractVersionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = contract.ttypes.ContractVersionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqContractVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateContractVersion_args:
  """
  Attributes:
   - platformArgs
   - contractVersion
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'contractVersion', (contract.ttypes.ContractVersion, contract.ttypes.ContractVersion.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, contractVersion=None,):
    self.platformArgs = platformArgs
    self.contractVersion = contractVersion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractVersion = contract.ttypes.ContractVersion()
          self.contractVersion.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateContractVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.contractVersion is not None:
      oprot.writeFieldBegin('contractVersion', TType.STRUCT, 2)
      self.contractVersion.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateContractVersion_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateContractVersion_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeContractVersion_args:
  """
  Attributes:
   - platformArgs
   - versionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I32, 'versionId', None, None, ), # 2
  )

  def __init__(self, platformArgs=None, versionId=None,):
    self.platformArgs = platformArgs
    self.versionId = versionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeContractVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I32, 2)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeContractVersion_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeContractVersion_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
