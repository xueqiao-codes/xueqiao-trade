#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class SledCommodityType:
  NONE = 0
  FUTURES = 1
  OPTION = 2
  SPOT = 3
  SPREAD_MONTH = 4
  SPREAD_COMMODITY = 5
  BUL = 6
  BER = 7
  STD = 8
  STG = 9
  PRT = 10
  DIRECTFOREX = 11
  INDIRECTFOREX = 12
  CROSSFOREX = 13
  INDEX = 14
  STOCK = 15

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "FUTURES",
    2: "OPTION",
    3: "SPOT",
    4: "SPREAD_MONTH",
    5: "SPREAD_COMMODITY",
    6: "BUL",
    7: "BER",
    8: "STD",
    9: "STG",
    10: "PRT",
    11: "DIRECTFOREX",
    12: "INDIRECTFOREX",
    13: "CROSSFOREX",
    14: "INDEX",
    15: "STOCK",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "FUTURES": 1,
    "OPTION": 2,
    "SPOT": 3,
    "SPREAD_MONTH": 4,
    "SPREAD_COMMODITY": 5,
    "BUL": 6,
    "BER": 7,
    "STD": 8,
    "STG": 9,
    "PRT": 10,
    "DIRECTFOREX": 11,
    "INDIRECTFOREX": 12,
    "CROSSFOREX": 13,
    "INDEX": 14,
    "STOCK": 15,
  }

class CmbDirect:
  NONE = 0
  FIRST = 1
  SECOND = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "FIRST",
    2: "SECOND",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "FIRST": 1,
    "SECOND": 2,
  }

class DeliveryMode:
  NONE = 0
  GOODS = 1
  CASH = 2
  EXECUTE = 3
  ABANDON = 4
  HKF = 5

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "GOODS",
    2: "CASH",
    3: "EXECUTE",
    4: "ABANDON",
    5: "HKF",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "GOODS": 1,
    "CASH": 2,
    "EXECUTE": 3,
    "ABANDON": 4,
    "HKF": 5,
  }

class CommodityState:
  NONE = 0
  TRADEABLE = 1
  NO_TRADEABLE = 2
  CLOSE_ONLY = 3

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "TRADEABLE",
    2: "NO_TRADEABLE",
    3: "CLOSE_ONLY",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "TRADEABLE": 1,
    "NO_TRADEABLE": 2,
    "CLOSE_ONLY": 3,
  }

class ContractStatus:
  NORMAL = 0
  EXPIRED = 1

  _VALUES_TO_NAMES = {
    0: "NORMAL",
    1: "EXPIRED",
  }

  _NAMES_TO_VALUES = {
    "NORMAL": 0,
    "EXPIRED": 1,
  }

class CalculateMode:
  COMBINE = 0
  PERCENTAGE = 1
  QUOTA = 2
  CHAPERCENTAGE = 3
  CHAQUOTA = 4
  DISCOUNT = 5

  _VALUES_TO_NAMES = {
    0: "COMBINE",
    1: "PERCENTAGE",
    2: "QUOTA",
    3: "CHAPERCENTAGE",
    4: "CHAQUOTA",
    5: "DISCOUNT",
  }

  _NAMES_TO_VALUES = {
    "COMBINE": 0,
    "PERCENTAGE": 1,
    "QUOTA": 2,
    "CHAPERCENTAGE": 3,
    "CHAQUOTA": 4,
    "DISCOUNT": 5,
  }

class ExchangeOperatingMicType:
  OPERATING_MIC = 0
  SEGMENT_MIC = 1

  _VALUES_TO_NAMES = {
    0: "OPERATING_MIC",
    1: "SEGMENT_MIC",
  }

  _NAMES_TO_VALUES = {
    "OPERATING_MIC": 0,
    "SEGMENT_MIC": 1,
  }

class TechPlatformEnv:
  NONE = 0
  REAL = 1
  SIM = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "REAL",
    2: "SIM",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "REAL": 1,
    "SIM": 2,
  }

class TechPlatform:
  NONE = 0
  CTP = 1
  ESUNNY = 2
  SP = 3
  ESUNNY_3 = 4

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "CTP",
    2: "ESUNNY",
    3: "SP",
    4: "ESUNNY_3",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "CTP": 1,
    "ESUNNY": 2,
    "SP": 3,
    "ESUNNY_3": 4,
  }

class SledContractErrorCode:
  """
  雪橇统一合约的业务错误码

  """
  SLED_COMMODITY_NOT_FOUND = 1000
  COMMODITY_MAP_NOT_FOUND = 1001
  SLED_EXCHANGE_NOT_FOUND = 1002
  COMMODITY_MAP_UPDATE_FORBID = 1003
  SLED_COMMODITY_EXISTS = 1004
  SLED_EXCHANGE_EXISTS = 1005
  CONTRACT_VERSION_NOT_FOUND = 1006
  COMMODITY_MAP_EXISTS = 1007
  SLED_CONTRACT_NOT_FOUND = 1008

  _VALUES_TO_NAMES = {
    1000: "SLED_COMMODITY_NOT_FOUND",
    1001: "COMMODITY_MAP_NOT_FOUND",
    1002: "SLED_EXCHANGE_NOT_FOUND",
    1003: "COMMODITY_MAP_UPDATE_FORBID",
    1004: "SLED_COMMODITY_EXISTS",
    1005: "SLED_EXCHANGE_EXISTS",
    1006: "CONTRACT_VERSION_NOT_FOUND",
    1007: "COMMODITY_MAP_EXISTS",
    1008: "SLED_CONTRACT_NOT_FOUND",
  }

  _NAMES_TO_VALUES = {
    "SLED_COMMODITY_NOT_FOUND": 1000,
    "COMMODITY_MAP_NOT_FOUND": 1001,
    "SLED_EXCHANGE_NOT_FOUND": 1002,
    "COMMODITY_MAP_UPDATE_FORBID": 1003,
    "SLED_COMMODITY_EXISTS": 1004,
    "SLED_EXCHANGE_EXISTS": 1005,
    "CONTRACT_VERSION_NOT_FOUND": 1006,
    "COMMODITY_MAP_EXISTS": 1007,
    "SLED_CONTRACT_NOT_FOUND": 1008,
  }


class SledExchange:
  """
  Attributes:
   - sledExchangeId
   - exchangeMic
   - country
   - countryCode
   - operatingMic
   - operatingMicType
   - nameInstitution
   - acronym
   - city
   - website
   - cnName
   - cnAcronym
   - activeStartTimestamp
   - activeEndTimestamp
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledExchangeId', None, None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.STRING, 'country', None, None, ), # 3
    (4, TType.STRING, 'countryCode', None, None, ), # 4
    (5, TType.STRING, 'operatingMic', None, None, ), # 5
    (6, TType.I32, 'operatingMicType', None, None, ), # 6
    (7, TType.STRING, 'nameInstitution', None, None, ), # 7
    (8, TType.STRING, 'acronym', None, None, ), # 8
    (9, TType.STRING, 'city', None, None, ), # 9
    (10, TType.STRING, 'website', None, None, ), # 10
    (11, TType.STRING, 'cnName', None, None, ), # 11
    (12, TType.STRING, 'cnAcronym', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    (32, TType.I64, 'activeStartTimestamp', None, None, ), # 32
    (33, TType.I64, 'activeEndTimestamp', None, None, ), # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, sledExchangeId=None, exchangeMic=None, country=None, countryCode=None, operatingMic=None, operatingMicType=None, nameInstitution=None, acronym=None, city=None, website=None, cnName=None, cnAcronym=None, activeStartTimestamp=None, activeEndTimestamp=None, createTimestamp=None, lastModityTimestamp=None,):
    self.sledExchangeId = sledExchangeId
    self.exchangeMic = exchangeMic
    self.country = country
    self.countryCode = countryCode
    self.operatingMic = operatingMic
    self.operatingMicType = operatingMicType
    self.nameInstitution = nameInstitution
    self.acronym = acronym
    self.city = city
    self.website = website
    self.cnName = cnName
    self.cnAcronym = cnAcronym
    self.activeStartTimestamp = activeStartTimestamp
    self.activeEndTimestamp = activeEndTimestamp
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledExchangeId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.country = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.countryCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.operatingMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.operatingMicType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.nameInstitution = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.acronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.city = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.website = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.cnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.cnAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.activeStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.activeEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledExchange')
    if self.sledExchangeId is not None:
      oprot.writeFieldBegin('sledExchangeId', TType.I32, 1)
      oprot.writeI32(self.sledExchangeId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.country is not None:
      oprot.writeFieldBegin('country', TType.STRING, 3)
      oprot.writeString(self.country)
      oprot.writeFieldEnd()
    if self.countryCode is not None:
      oprot.writeFieldBegin('countryCode', TType.STRING, 4)
      oprot.writeString(self.countryCode)
      oprot.writeFieldEnd()
    if self.operatingMic is not None:
      oprot.writeFieldBegin('operatingMic', TType.STRING, 5)
      oprot.writeString(self.operatingMic)
      oprot.writeFieldEnd()
    if self.operatingMicType is not None:
      oprot.writeFieldBegin('operatingMicType', TType.I32, 6)
      oprot.writeI32(self.operatingMicType)
      oprot.writeFieldEnd()
    if self.nameInstitution is not None:
      oprot.writeFieldBegin('nameInstitution', TType.STRING, 7)
      oprot.writeString(self.nameInstitution)
      oprot.writeFieldEnd()
    if self.acronym is not None:
      oprot.writeFieldBegin('acronym', TType.STRING, 8)
      oprot.writeString(self.acronym)
      oprot.writeFieldEnd()
    if self.city is not None:
      oprot.writeFieldBegin('city', TType.STRING, 9)
      oprot.writeString(self.city)
      oprot.writeFieldEnd()
    if self.website is not None:
      oprot.writeFieldBegin('website', TType.STRING, 10)
      oprot.writeString(self.website)
      oprot.writeFieldEnd()
    if self.cnName is not None:
      oprot.writeFieldBegin('cnName', TType.STRING, 11)
      oprot.writeString(self.cnName)
      oprot.writeFieldEnd()
    if self.cnAcronym is not None:
      oprot.writeFieldBegin('cnAcronym', TType.STRING, 12)
      oprot.writeString(self.cnAcronym)
      oprot.writeFieldEnd()
    if self.activeStartTimestamp is not None:
      oprot.writeFieldBegin('activeStartTimestamp', TType.I64, 32)
      oprot.writeI64(self.activeStartTimestamp)
      oprot.writeFieldEnd()
    if self.activeEndTimestamp is not None:
      oprot.writeFieldBegin('activeEndTimestamp', TType.I64, 33)
      oprot.writeI64(self.activeEndTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledCommodityConfig:
  """
  Attributes:
   - configId
   - deliveryMode
   - deliveryDays
   - maxSingleOrderVol
   - maxHoldVol
   - commissionCalculateMode
   - openCloseFee
   - marginCalculateMode
   - initialMargin
   - maintenanceMargin
   - sellInitialMargin
   - sellMaintenanceMargin
   - lockMargin
   - activeStartTimestamp
   - activeEndTimestamp
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'configId', None, None, ), # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    (12, TType.I32, 'deliveryMode', None, None, ), # 12
    (13, TType.I32, 'deliveryDays', None, None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    (17, TType.I32, 'maxSingleOrderVol', None, None, ), # 17
    (18, TType.I32, 'maxHoldVol', None, None, ), # 18
    None, # 19
    (20, TType.I32, 'commissionCalculateMode', None, None, ), # 20
    (21, TType.DOUBLE, 'openCloseFee', None, None, ), # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    (26, TType.I32, 'marginCalculateMode', None, None, ), # 26
    (27, TType.DOUBLE, 'initialMargin', None, None, ), # 27
    (28, TType.DOUBLE, 'maintenanceMargin', None, None, ), # 28
    (29, TType.DOUBLE, 'sellInitialMargin', None, None, ), # 29
    (30, TType.DOUBLE, 'sellMaintenanceMargin', None, None, ), # 30
    (31, TType.DOUBLE, 'lockMargin', None, None, ), # 31
    (32, TType.I64, 'activeStartTimestamp', None, None, ), # 32
    (33, TType.I64, 'activeEndTimestamp', None, None, ), # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, configId=None, deliveryMode=None, deliveryDays=None, maxSingleOrderVol=None, maxHoldVol=None, commissionCalculateMode=None, openCloseFee=None, marginCalculateMode=None, initialMargin=None, maintenanceMargin=None, sellInitialMargin=None, sellMaintenanceMargin=None, lockMargin=None, activeStartTimestamp=None, activeEndTimestamp=None, createTimestamp=None, lastModityTimestamp=None,):
    self.configId = configId
    self.deliveryMode = deliveryMode
    self.deliveryDays = deliveryDays
    self.maxSingleOrderVol = maxSingleOrderVol
    self.maxHoldVol = maxHoldVol
    self.commissionCalculateMode = commissionCalculateMode
    self.openCloseFee = openCloseFee
    self.marginCalculateMode = marginCalculateMode
    self.initialMargin = initialMargin
    self.maintenanceMargin = maintenanceMargin
    self.sellInitialMargin = sellInitialMargin
    self.sellMaintenanceMargin = sellMaintenanceMargin
    self.lockMargin = lockMargin
    self.activeStartTimestamp = activeStartTimestamp
    self.activeEndTimestamp = activeEndTimestamp
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.configId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.deliveryMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.deliveryDays = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.maxSingleOrderVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.maxHoldVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.commissionCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.openCloseFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.marginCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.initialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.maintenanceMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.sellInitialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.sellMaintenanceMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.lockMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.activeStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.activeEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledCommodityConfig')
    if self.configId is not None:
      oprot.writeFieldBegin('configId', TType.I32, 1)
      oprot.writeI32(self.configId)
      oprot.writeFieldEnd()
    if self.deliveryMode is not None:
      oprot.writeFieldBegin('deliveryMode', TType.I32, 12)
      oprot.writeI32(self.deliveryMode)
      oprot.writeFieldEnd()
    if self.deliveryDays is not None:
      oprot.writeFieldBegin('deliveryDays', TType.I32, 13)
      oprot.writeI32(self.deliveryDays)
      oprot.writeFieldEnd()
    if self.maxSingleOrderVol is not None:
      oprot.writeFieldBegin('maxSingleOrderVol', TType.I32, 17)
      oprot.writeI32(self.maxSingleOrderVol)
      oprot.writeFieldEnd()
    if self.maxHoldVol is not None:
      oprot.writeFieldBegin('maxHoldVol', TType.I32, 18)
      oprot.writeI32(self.maxHoldVol)
      oprot.writeFieldEnd()
    if self.commissionCalculateMode is not None:
      oprot.writeFieldBegin('commissionCalculateMode', TType.I32, 20)
      oprot.writeI32(self.commissionCalculateMode)
      oprot.writeFieldEnd()
    if self.openCloseFee is not None:
      oprot.writeFieldBegin('openCloseFee', TType.DOUBLE, 21)
      oprot.writeDouble(self.openCloseFee)
      oprot.writeFieldEnd()
    if self.marginCalculateMode is not None:
      oprot.writeFieldBegin('marginCalculateMode', TType.I32, 26)
      oprot.writeI32(self.marginCalculateMode)
      oprot.writeFieldEnd()
    if self.initialMargin is not None:
      oprot.writeFieldBegin('initialMargin', TType.DOUBLE, 27)
      oprot.writeDouble(self.initialMargin)
      oprot.writeFieldEnd()
    if self.maintenanceMargin is not None:
      oprot.writeFieldBegin('maintenanceMargin', TType.DOUBLE, 28)
      oprot.writeDouble(self.maintenanceMargin)
      oprot.writeFieldEnd()
    if self.sellInitialMargin is not None:
      oprot.writeFieldBegin('sellInitialMargin', TType.DOUBLE, 29)
      oprot.writeDouble(self.sellInitialMargin)
      oprot.writeFieldEnd()
    if self.sellMaintenanceMargin is not None:
      oprot.writeFieldBegin('sellMaintenanceMargin', TType.DOUBLE, 30)
      oprot.writeDouble(self.sellMaintenanceMargin)
      oprot.writeFieldEnd()
    if self.lockMargin is not None:
      oprot.writeFieldBegin('lockMargin', TType.DOUBLE, 31)
      oprot.writeDouble(self.lockMargin)
      oprot.writeFieldEnd()
    if self.activeStartTimestamp is not None:
      oprot.writeFieldBegin('activeStartTimestamp', TType.I64, 32)
      oprot.writeI64(self.activeStartTimestamp)
      oprot.writeFieldEnd()
    if self.activeEndTimestamp is not None:
      oprot.writeFieldBegin('activeEndTimestamp', TType.I64, 33)
      oprot.writeI64(self.activeEndTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledCommodity:
  """
  Attributes:
   - sledCommodityId
   - exchangeMic
   - sledCommodityType
   - sledCommodityCode
   - relateCommodityIds
   - tradeCurrency
   - timezone
   - contractSize
   - tickSize
   - denominator
   - cmbDirect
   - commodityState
   - sledCommodityConfig
   - engName
   - cnName
   - tcName
   - activeStartTimestamp
   - activeEndTimestamp
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledCommodityId', None, None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.I32, 'sledCommodityType', None, None, ), # 3
    (4, TType.STRING, 'sledCommodityCode', None, None, ), # 4
    (5, TType.LIST, 'relateCommodityIds', (TType.I32,None), None, ), # 5
    (6, TType.STRING, 'tradeCurrency', None, None, ), # 6
    (7, TType.STRING, 'timezone', None, None, ), # 7
    (8, TType.DOUBLE, 'contractSize', None, None, ), # 8
    (9, TType.DOUBLE, 'tickSize', None, None, ), # 9
    (10, TType.I32, 'denominator', None, None, ), # 10
    (11, TType.I32, 'cmbDirect', None, None, ), # 11
    None, # 12
    None, # 13
    None, # 14
    (15, TType.I32, 'commodityState', None, None, ), # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.LIST, 'sledCommodityConfig', (TType.STRUCT,(SledCommodityConfig, SledCommodityConfig.thrift_spec)), None, ), # 20
    None, # 21
    (22, TType.STRING, 'engName', None, None, ), # 22
    (23, TType.STRING, 'cnName', None, None, ), # 23
    (24, TType.STRING, 'tcName', None, None, ), # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    (32, TType.I64, 'activeStartTimestamp', None, None, ), # 32
    (33, TType.I64, 'activeEndTimestamp', None, None, ), # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, sledCommodityId=None, exchangeMic=None, sledCommodityType=None, sledCommodityCode=None, relateCommodityIds=None, tradeCurrency=None, timezone=None, contractSize=None, tickSize=None, denominator=None, cmbDirect=None, commodityState=None, sledCommodityConfig=None, engName=None, cnName=None, tcName=None, activeStartTimestamp=None, activeEndTimestamp=None, createTimestamp=None, lastModityTimestamp=None,):
    self.sledCommodityId = sledCommodityId
    self.exchangeMic = exchangeMic
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.relateCommodityIds = relateCommodityIds
    self.tradeCurrency = tradeCurrency
    self.timezone = timezone
    self.contractSize = contractSize
    self.tickSize = tickSize
    self.denominator = denominator
    self.cmbDirect = cmbDirect
    self.commodityState = commodityState
    self.sledCommodityConfig = sledCommodityConfig
    self.engName = engName
    self.cnName = cnName
    self.tcName = tcName
    self.activeStartTimestamp = activeStartTimestamp
    self.activeEndTimestamp = activeEndTimestamp
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sledCommodityType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.relateCommodityIds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.relateCommodityIds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tradeCurrency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.timezone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.contractSize = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.tickSize = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.denominator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cmbDirect = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.commodityState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.sledCommodityConfig = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = SledCommodityConfig()
            _elem11.read(iprot)
            self.sledCommodityConfig.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.engName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.cnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.tcName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.activeStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.activeEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledCommodity')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 1)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I32, 3)
      oprot.writeI32(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 4)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.relateCommodityIds is not None:
      oprot.writeFieldBegin('relateCommodityIds', TType.LIST, 5)
      oprot.writeListBegin(TType.I32, len(self.relateCommodityIds))
      for iter12 in self.relateCommodityIds:
        oprot.writeI32(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tradeCurrency is not None:
      oprot.writeFieldBegin('tradeCurrency', TType.STRING, 6)
      oprot.writeString(self.tradeCurrency)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.STRING, 7)
      oprot.writeString(self.timezone)
      oprot.writeFieldEnd()
    if self.contractSize is not None:
      oprot.writeFieldBegin('contractSize', TType.DOUBLE, 8)
      oprot.writeDouble(self.contractSize)
      oprot.writeFieldEnd()
    if self.tickSize is not None:
      oprot.writeFieldBegin('tickSize', TType.DOUBLE, 9)
      oprot.writeDouble(self.tickSize)
      oprot.writeFieldEnd()
    if self.denominator is not None:
      oprot.writeFieldBegin('denominator', TType.I32, 10)
      oprot.writeI32(self.denominator)
      oprot.writeFieldEnd()
    if self.cmbDirect is not None:
      oprot.writeFieldBegin('cmbDirect', TType.I32, 11)
      oprot.writeI32(self.cmbDirect)
      oprot.writeFieldEnd()
    if self.commodityState is not None:
      oprot.writeFieldBegin('commodityState', TType.I32, 15)
      oprot.writeI32(self.commodityState)
      oprot.writeFieldEnd()
    if self.sledCommodityConfig is not None:
      oprot.writeFieldBegin('sledCommodityConfig', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.sledCommodityConfig))
      for iter13 in self.sledCommodityConfig:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.engName is not None:
      oprot.writeFieldBegin('engName', TType.STRING, 22)
      oprot.writeString(self.engName)
      oprot.writeFieldEnd()
    if self.cnName is not None:
      oprot.writeFieldBegin('cnName', TType.STRING, 23)
      oprot.writeString(self.cnName)
      oprot.writeFieldEnd()
    if self.tcName is not None:
      oprot.writeFieldBegin('tcName', TType.STRING, 24)
      oprot.writeString(self.tcName)
      oprot.writeFieldEnd()
    if self.activeStartTimestamp is not None:
      oprot.writeFieldBegin('activeStartTimestamp', TType.I64, 32)
      oprot.writeI64(self.activeStartTimestamp)
      oprot.writeFieldEnd()
    if self.activeEndTimestamp is not None:
      oprot.writeFieldBegin('activeEndTimestamp', TType.I64, 33)
      oprot.writeI64(self.activeEndTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledContract:
  """
  Attributes:
   - sledContractId
   - sledCommodityId
   - sledContractCode
   - relateContractIds
   - sledTag
   - contractEngName
   - contractCnName
   - contractTcName
   - contractExpDate
   - lastTradeDate
   - firstNoticeDate
   - platformEnv
   - contractStatus
   - activeStartTimestamp
   - activeEndTimestamp
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledContractId', None, None, ), # 1
    (2, TType.I32, 'sledCommodityId', None, None, ), # 2
    (3, TType.STRING, 'sledContractCode', None, None, ), # 3
    (4, TType.LIST, 'relateContractIds', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'sledTag', None, None, ), # 5
    (6, TType.STRING, 'contractEngName', None, None, ), # 6
    (7, TType.STRING, 'contractCnName', None, None, ), # 7
    (8, TType.STRING, 'contractTcName', None, None, ), # 8
    (9, TType.I64, 'contractExpDate', None, None, ), # 9
    (10, TType.I64, 'lastTradeDate', None, None, ), # 10
    (11, TType.I64, 'firstNoticeDate', None, None, ), # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'platformEnv', None, None, ), # 20
    (21, TType.I32, 'contractStatus', None, None, ), # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    (32, TType.I64, 'activeStartTimestamp', None, None, ), # 32
    (33, TType.I64, 'activeEndTimestamp', None, None, ), # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, sledContractId=None, sledCommodityId=None, sledContractCode=None, relateContractIds=None, sledTag=None, contractEngName=None, contractCnName=None, contractTcName=None, contractExpDate=None, lastTradeDate=None, firstNoticeDate=None, platformEnv=None, contractStatus=None, activeStartTimestamp=None, activeEndTimestamp=None, createTimestamp=None, lastModityTimestamp=None,):
    self.sledContractId = sledContractId
    self.sledCommodityId = sledCommodityId
    self.sledContractCode = sledContractCode
    self.relateContractIds = relateContractIds
    self.sledTag = sledTag
    self.contractEngName = contractEngName
    self.contractCnName = contractCnName
    self.contractTcName = contractTcName
    self.contractExpDate = contractExpDate
    self.lastTradeDate = lastTradeDate
    self.firstNoticeDate = firstNoticeDate
    self.platformEnv = platformEnv
    self.contractStatus = contractStatus
    self.activeStartTimestamp = activeStartTimestamp
    self.activeEndTimestamp = activeEndTimestamp
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledContractId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.relateContractIds = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.relateContractIds.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sledTag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.contractEngName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.contractCnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.contractTcName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.contractExpDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.lastTradeDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.firstNoticeDate = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.contractStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.activeStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.activeEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledContract')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I32, 1)
      oprot.writeI32(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 2)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 3)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.relateContractIds is not None:
      oprot.writeFieldBegin('relateContractIds', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.relateContractIds))
      for iter20 in self.relateContractIds:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sledTag is not None:
      oprot.writeFieldBegin('sledTag', TType.STRING, 5)
      oprot.writeString(self.sledTag)
      oprot.writeFieldEnd()
    if self.contractEngName is not None:
      oprot.writeFieldBegin('contractEngName', TType.STRING, 6)
      oprot.writeString(self.contractEngName)
      oprot.writeFieldEnd()
    if self.contractCnName is not None:
      oprot.writeFieldBegin('contractCnName', TType.STRING, 7)
      oprot.writeString(self.contractCnName)
      oprot.writeFieldEnd()
    if self.contractTcName is not None:
      oprot.writeFieldBegin('contractTcName', TType.STRING, 8)
      oprot.writeString(self.contractTcName)
      oprot.writeFieldEnd()
    if self.contractExpDate is not None:
      oprot.writeFieldBegin('contractExpDate', TType.I64, 9)
      oprot.writeI64(self.contractExpDate)
      oprot.writeFieldEnd()
    if self.lastTradeDate is not None:
      oprot.writeFieldBegin('lastTradeDate', TType.I64, 10)
      oprot.writeI64(self.lastTradeDate)
      oprot.writeFieldEnd()
    if self.firstNoticeDate is not None:
      oprot.writeFieldBegin('firstNoticeDate', TType.I64, 11)
      oprot.writeI64(self.firstNoticeDate)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 20)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.contractStatus is not None:
      oprot.writeFieldBegin('contractStatus', TType.I32, 21)
      oprot.writeI32(self.contractStatus)
      oprot.writeFieldEnd()
    if self.activeStartTimestamp is not None:
      oprot.writeFieldBegin('activeStartTimestamp', TType.I64, 32)
      oprot.writeI64(self.activeStartTimestamp)
      oprot.writeFieldEnd()
    if self.activeEndTimestamp is not None:
      oprot.writeFieldBegin('activeEndTimestamp', TType.I64, 33)
      oprot.writeI64(self.activeEndTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommodityMapping:
  """
  Attributes:
   - mappingId
   - sledCommodityId
   - techPlatform
   - exchange
   - commodityType
   - commodityCode
   - moneyRatio
   - brokerEntryId
   - activeStartTimestamp
   - activeEndTimestamp
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mappingId', None, None, ), # 1
    None, # 2
    (3, TType.I32, 'sledCommodityId', None, None, ), # 3
    (4, TType.I32, 'techPlatform', None, None, ), # 4
    (5, TType.STRING, 'exchange', None, None, ), # 5
    (6, TType.STRING, 'commodityType', None, None, ), # 6
    (7, TType.STRING, 'commodityCode', None, None, ), # 7
    None, # 8
    (9, TType.DOUBLE, 'moneyRatio', None, None, ), # 9
    (10, TType.I32, 'brokerEntryId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    (32, TType.I64, 'activeStartTimestamp', None, None, ), # 32
    (33, TType.I64, 'activeEndTimestamp', None, None, ), # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, mappingId=None, sledCommodityId=None, techPlatform=None, exchange=None, commodityType=None, commodityCode=None, moneyRatio=None, brokerEntryId=None, activeStartTimestamp=None, activeEndTimestamp=None, createTimestamp=None, lastModityTimestamp=None,):
    self.mappingId = mappingId
    self.sledCommodityId = sledCommodityId
    self.techPlatform = techPlatform
    self.exchange = exchange
    self.commodityType = commodityType
    self.commodityCode = commodityCode
    self.moneyRatio = moneyRatio
    self.brokerEntryId = brokerEntryId
    self.activeStartTimestamp = activeStartTimestamp
    self.activeEndTimestamp = activeEndTimestamp
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mappingId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.exchange = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.commodityType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.commodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.moneyRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.brokerEntryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I64:
          self.activeStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I64:
          self.activeEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityMapping')
    if self.mappingId is not None:
      oprot.writeFieldBegin('mappingId', TType.I32, 1)
      oprot.writeI32(self.mappingId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 3)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 4)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    if self.exchange is not None:
      oprot.writeFieldBegin('exchange', TType.STRING, 5)
      oprot.writeString(self.exchange)
      oprot.writeFieldEnd()
    if self.commodityType is not None:
      oprot.writeFieldBegin('commodityType', TType.STRING, 6)
      oprot.writeString(self.commodityType)
      oprot.writeFieldEnd()
    if self.commodityCode is not None:
      oprot.writeFieldBegin('commodityCode', TType.STRING, 7)
      oprot.writeString(self.commodityCode)
      oprot.writeFieldEnd()
    if self.moneyRatio is not None:
      oprot.writeFieldBegin('moneyRatio', TType.DOUBLE, 9)
      oprot.writeDouble(self.moneyRatio)
      oprot.writeFieldEnd()
    if self.brokerEntryId is not None:
      oprot.writeFieldBegin('brokerEntryId', TType.I32, 10)
      oprot.writeI32(self.brokerEntryId)
      oprot.writeFieldEnd()
    if self.activeStartTimestamp is not None:
      oprot.writeFieldBegin('activeStartTimestamp', TType.I64, 32)
      oprot.writeI64(self.activeStartTimestamp)
      oprot.writeFieldEnd()
    if self.activeEndTimestamp is not None:
      oprot.writeFieldBegin('activeEndTimestamp', TType.I64, 33)
      oprot.writeI64(self.activeEndTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSledContractOption:
  """
  Attributes:
   - sledContractIdList
   - sledCommodityId
   - platformEnv
   - sledContractCode
   - contractStatus
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sledContractIdList', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'sledCommodityId', None, None, ), # 2
    (3, TType.I32, 'platformEnv', None, None, ), # 3
    (4, TType.STRING, 'sledContractCode', None, None, ), # 4
    (5, TType.I32, 'contractStatus', None, None, ), # 5
  )

  def __init__(self, sledContractIdList=None, sledCommodityId=None, platformEnv=None, sledContractCode=None, contractStatus=None,):
    self.sledContractIdList = sledContractIdList
    self.sledCommodityId = sledCommodityId
    self.platformEnv = platformEnv
    self.sledContractCode = sledContractCode
    self.contractStatus = contractStatus

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sledContractIdList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI32();
            self.sledContractIdList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.platformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.contractStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSledContractOption')
    if self.sledContractIdList is not None:
      oprot.writeFieldBegin('sledContractIdList', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.sledContractIdList))
      for iter27 in self.sledContractIdList:
        oprot.writeI32(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 2)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.platformEnv is not None:
      oprot.writeFieldBegin('platformEnv', TType.I32, 3)
      oprot.writeI32(self.platformEnv)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 4)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.contractStatus is not None:
      oprot.writeFieldBegin('contractStatus', TType.I32, 5)
      oprot.writeI32(self.contractStatus)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSledCommodityOption:
  """
  Attributes:
   - sledCommodityIdList
   - exchangeMic
   - sledCommodityType
   - sledCommodityCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sledCommodityIdList', (TType.I32,None), None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.I32, 'sledCommodityType', None, None, ), # 3
    (4, TType.STRING, 'sledCommodityCode', None, None, ), # 4
  )

  def __init__(self, sledCommodityIdList=None, exchangeMic=None, sledCommodityType=None, sledCommodityCode=None,):
    self.sledCommodityIdList = sledCommodityIdList
    self.exchangeMic = exchangeMic
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sledCommodityIdList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.sledCommodityIdList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.sledCommodityType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSledCommodityOption')
    if self.sledCommodityIdList is not None:
      oprot.writeFieldBegin('sledCommodityIdList', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.sledCommodityIdList))
      for iter34 in self.sledCommodityIdList:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I32, 3)
      oprot.writeI32(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 4)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSledExchangeOption:
  """
  Attributes:
   - sledExchangeIds
   - exchangeMic
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sledExchangeIds', (TType.I32,None), None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
  )

  def __init__(self, sledExchangeIds=None, exchangeMic=None,):
    self.sledExchangeIds = sledExchangeIds
    self.exchangeMic = exchangeMic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sledExchangeIds = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = iprot.readI32();
            self.sledExchangeIds.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSledExchangeOption')
    if self.sledExchangeIds is not None:
      oprot.writeFieldBegin('sledExchangeIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.sledExchangeIds))
      for iter41 in self.sledExchangeIds:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledExchangePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SledExchange, SledExchange.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = SledExchange()
            _elem47.read(iprot)
            self.page.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledExchangePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter48 in self.page:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledCommodityPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SledCommodity, SledCommodity.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = SledCommodity()
            _elem54.read(iprot)
            self.page.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledCommodityPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter55 in self.page:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SledContractPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SledContract, SledContract.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = SledContract()
            _elem61.read(iprot)
            self.page.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SledContractPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter62 in self.page:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommodityMappingPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(CommodityMapping, CommodityMapping.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = CommodityMapping()
            _elem68.read(iprot)
            self.page.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityMappingPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter69 in self.page:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqCommodityMappingOption:
  """
  Attributes:
   - sledCommodityIdList
   - exchange
   - commodityType
   - commodityCode
   - brokerEntryId
   - mapIds
   - techPlatform
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sledCommodityIdList', (TType.I32,None), None, ), # 1
    (2, TType.STRING, 'exchange', None, None, ), # 2
    (3, TType.STRING, 'commodityType', None, None, ), # 3
    (4, TType.STRING, 'commodityCode', None, None, ), # 4
    (5, TType.I32, 'brokerEntryId', None, None, ), # 5
    (6, TType.LIST, 'mapIds', (TType.I32,None), None, ), # 6
    (7, TType.I32, 'techPlatform', None, None, ), # 7
  )

  def __init__(self, sledCommodityIdList=None, exchange=None, commodityType=None, commodityCode=None, brokerEntryId=None, mapIds=None, techPlatform=None,):
    self.sledCommodityIdList = sledCommodityIdList
    self.exchange = exchange
    self.commodityType = commodityType
    self.commodityCode = commodityCode
    self.brokerEntryId = brokerEntryId
    self.mapIds = mapIds
    self.techPlatform = techPlatform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sledCommodityIdList = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readI32();
            self.sledCommodityIdList.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchange = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.commodityType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.commodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.brokerEntryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.mapIds = []
          (_etype79, _size76) = iprot.readListBegin()
          for _i80 in xrange(_size76):
            _elem81 = iprot.readI32();
            self.mapIds.append(_elem81)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqCommodityMappingOption')
    if self.sledCommodityIdList is not None:
      oprot.writeFieldBegin('sledCommodityIdList', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.sledCommodityIdList))
      for iter82 in self.sledCommodityIdList:
        oprot.writeI32(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.exchange is not None:
      oprot.writeFieldBegin('exchange', TType.STRING, 2)
      oprot.writeString(self.exchange)
      oprot.writeFieldEnd()
    if self.commodityType is not None:
      oprot.writeFieldBegin('commodityType', TType.STRING, 3)
      oprot.writeString(self.commodityType)
      oprot.writeFieldEnd()
    if self.commodityCode is not None:
      oprot.writeFieldBegin('commodityCode', TType.STRING, 4)
      oprot.writeString(self.commodityCode)
      oprot.writeFieldEnd()
    if self.brokerEntryId is not None:
      oprot.writeFieldBegin('brokerEntryId', TType.I32, 5)
      oprot.writeI32(self.brokerEntryId)
      oprot.writeFieldEnd()
    if self.mapIds is not None:
      oprot.writeFieldBegin('mapIds', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.mapIds))
      for iter83 in self.mapIds:
        oprot.writeI32(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 7)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
