#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import contract_standard.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class CommodityMapFileStatus:
  IN_USE = 0
  NO_USE = 1

  _VALUES_TO_NAMES = {
    0: "IN_USE",
    1: "NO_USE",
  }

  _NAMES_TO_VALUES = {
    "IN_USE": 0,
    "NO_USE": 1,
  }

class SyncTaskType:
  COMMODITY = 0
  CONTRACT = 1
  COMMODITY_MAPPING = 2

  _VALUES_TO_NAMES = {
    0: "COMMODITY",
    1: "CONTRACT",
    2: "COMMODITY_MAPPING",
  }

  _NAMES_TO_VALUES = {
    "COMMODITY": 0,
    "CONTRACT": 1,
    "COMMODITY_MAPPING": 2,
  }


class CommodityMapFileInfo:
  """
  Attributes:
   - commodityMapFile
   - techPlatform
   - brokerEntryId
   - fileMD5
   - path
   - url
   - version
   - fileInfoId
   - status
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'commodityMapFile', None, None, ), # 1
    (2, TType.I32, 'techPlatform', None, None, ), # 2
    (3, TType.I32, 'brokerEntryId', None, None, ), # 3
    (4, TType.STRING, 'fileMD5', None, None, ), # 4
    (5, TType.STRING, 'path', None, None, ), # 5
    (6, TType.STRING, 'url', None, None, ), # 6
    (7, TType.I32, 'version', None, None, ), # 7
    (8, TType.I32, 'fileInfoId', None, None, ), # 8
    (9, TType.I32, 'status', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, commodityMapFile=None, techPlatform=None, brokerEntryId=None, fileMD5=None, path=None, url=None, version=None, fileInfoId=None, status=None, createTimestamp=None, lastModityTimestamp=None,):
    self.commodityMapFile = commodityMapFile
    self.techPlatform = techPlatform
    self.brokerEntryId = brokerEntryId
    self.fileMD5 = fileMD5
    self.path = path
    self.url = url
    self.version = version
    self.fileInfoId = fileInfoId
    self.status = status
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.commodityMapFile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.brokerEntryId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fileMD5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.fileInfoId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityMapFileInfo')
    if self.commodityMapFile is not None:
      oprot.writeFieldBegin('commodityMapFile', TType.STRING, 1)
      oprot.writeString(self.commodityMapFile)
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 2)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    if self.brokerEntryId is not None:
      oprot.writeFieldBegin('brokerEntryId', TType.I32, 3)
      oprot.writeI32(self.brokerEntryId)
      oprot.writeFieldEnd()
    if self.fileMD5 is not None:
      oprot.writeFieldBegin('fileMD5', TType.STRING, 4)
      oprot.writeString(self.fileMD5)
      oprot.writeFieldEnd()
    if self.path is not None:
      oprot.writeFieldBegin('path', TType.STRING, 5)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.url is not None:
      oprot.writeFieldBegin('url', TType.STRING, 6)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 7)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.fileInfoId is not None:
      oprot.writeFieldBegin('fileInfoId', TType.I32, 8)
      oprot.writeI32(self.fileInfoId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 9)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommodityMapFileInfoPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(CommodityMapFileInfo, CommodityMapFileInfo.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = CommodityMapFileInfo()
            _elem5.read(iprot)
            self.page.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityMapFileInfoPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter6 in self.page:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqCommodityMapFileInfoOption:
  """
  Attributes:
   - brokerEntryIds
   - techPlatform
   - fileInfoIds
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'brokerEntryIds', (TType.I32,None), None, ), # 1
    (2, TType.I32, 'techPlatform', None, None, ), # 2
    (3, TType.LIST, 'fileInfoIds', (TType.I32,None), None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
  )

  def __init__(self, brokerEntryIds=None, techPlatform=None, fileInfoIds=None, status=None,):
    self.brokerEntryIds = brokerEntryIds
    self.techPlatform = techPlatform
    self.fileInfoIds = fileInfoIds
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.brokerEntryIds = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI32();
            self.brokerEntryIds.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.fileInfoIds = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI32();
            self.fileInfoIds.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqCommodityMapFileInfoOption')
    if self.brokerEntryIds is not None:
      oprot.writeFieldBegin('brokerEntryIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.brokerEntryIds))
      for iter19 in self.brokerEntryIds:
        oprot.writeI32(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 2)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    if self.fileInfoIds is not None:
      oprot.writeFieldBegin('fileInfoIds', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.fileInfoIds))
      for iter20 in self.fileInfoIds:
        oprot.writeI32(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SyncMappingTask:
  """
  Attributes:
   - taskId
   - syncTargetId
   - techPlatformEnv
   - taskType
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'taskId', None, None, ), # 1
    (2, TType.I32, 'syncTargetId', None, None, ), # 2
    (3, TType.I32, 'techPlatformEnv', None, None, ), # 3
    (4, TType.I32, 'taskType', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, taskId=None, syncTargetId=None, techPlatformEnv=None, taskType=None, createTimestamp=None, lastModityTimestamp=None,):
    self.taskId = taskId
    self.syncTargetId = syncTargetId
    self.techPlatformEnv = techPlatformEnv
    self.taskType = taskType
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.taskId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.syncTargetId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.techPlatformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.taskType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SyncMappingTask')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I32, 1)
      oprot.writeI32(self.taskId)
      oprot.writeFieldEnd()
    if self.syncTargetId is not None:
      oprot.writeFieldBegin('syncTargetId', TType.I32, 2)
      oprot.writeI32(self.syncTargetId)
      oprot.writeFieldEnd()
    if self.techPlatformEnv is not None:
      oprot.writeFieldBegin('techPlatformEnv', TType.I32, 3)
      oprot.writeI32(self.techPlatformEnv)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.I32, 4)
      oprot.writeI32(self.taskType)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SyncMappingTaskPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SyncMappingTask, SyncMappingTask.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = SyncMappingTask()
            _elem26.read(iprot)
            self.page.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SyncMappingTaskPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter27 in self.page:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSyncMappingTaskOption:
  """
  Attributes:
   - taskIds
   - targetIds
   - techPlatformEnv
   - taskType
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'taskIds', (TType.I32,None), None, ), # 1
    (2, TType.LIST, 'targetIds', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'techPlatformEnv', None, None, ), # 3
    (4, TType.I32, 'taskType', None, None, ), # 4
  )

  def __init__(self, taskIds=None, targetIds=None, techPlatformEnv=None, taskType=None,):
    self.taskIds = taskIds
    self.targetIds = targetIds
    self.techPlatformEnv = techPlatformEnv
    self.taskType = taskType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.taskIds = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.taskIds.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.targetIds = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readI32();
            self.targetIds.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.techPlatformEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.taskType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSyncMappingTaskOption')
    if self.taskIds is not None:
      oprot.writeFieldBegin('taskIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.taskIds))
      for iter40 in self.taskIds:
        oprot.writeI32(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetIds is not None:
      oprot.writeFieldBegin('targetIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.targetIds))
      for iter41 in self.targetIds:
        oprot.writeI32(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.techPlatformEnv is not None:
      oprot.writeFieldBegin('techPlatformEnv', TType.I32, 3)
      oprot.writeI32(self.techPlatformEnv)
      oprot.writeFieldEnd()
    if self.taskType is not None:
      oprot.writeFieldBegin('taskType', TType.I32, 4)
      oprot.writeI32(self.taskType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechPlatformCommodity:
  """
  Attributes:
   - sledCommodityId
   - exchange
   - commodityType
   - commodityCode
   - relateCommodityCodes
   - tradeCurrency
   - timezone
   - contractSize
   - tickSize
   - denominator
   - cmbDirect
   - commodityState
   - engName
   - cnName
   - tcName
   - deliveryMode
   - deliveryDays
   - maxSingleOrderVol
   - maxHoldVol
   - commissionCalculateMode
   - openCloseFee
   - marginCalculateMode
   - initialMargin
   - maintenanceMargin
   - sellInitialMargin
   - sellMaintenanceMargin
   - lockMargin
   - techPlatform
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sledCommodityId', None, None, ), # 1
    (2, TType.STRING, 'exchange', None, None, ), # 2
    (3, TType.STRING, 'commodityType', None, None, ), # 3
    (4, TType.STRING, 'commodityCode', None, None, ), # 4
    (5, TType.LIST, 'relateCommodityCodes', (TType.STRING,None), None, ), # 5
    (6, TType.STRING, 'tradeCurrency', None, None, ), # 6
    (7, TType.STRING, 'timezone', None, None, ), # 7
    (8, TType.DOUBLE, 'contractSize', None, None, ), # 8
    (9, TType.DOUBLE, 'tickSize', None, None, ), # 9
    (10, TType.I32, 'denominator', None, None, ), # 10
    (11, TType.I32, 'cmbDirect', None, None, ), # 11
    (12, TType.I32, 'deliveryMode', None, None, ), # 12
    (13, TType.I32, 'deliveryDays', None, None, ), # 13
    None, # 14
    (15, TType.I32, 'commodityState', None, None, ), # 15
    None, # 16
    (17, TType.I32, 'maxSingleOrderVol', None, None, ), # 17
    (18, TType.I32, 'maxHoldVol', None, None, ), # 18
    None, # 19
    (20, TType.I32, 'commissionCalculateMode', None, None, ), # 20
    (21, TType.DOUBLE, 'openCloseFee', None, None, ), # 21
    (22, TType.STRING, 'engName', None, None, ), # 22
    (23, TType.STRING, 'cnName', None, None, ), # 23
    (24, TType.STRING, 'tcName', None, None, ), # 24
    None, # 25
    (26, TType.I32, 'marginCalculateMode', None, None, ), # 26
    (27, TType.DOUBLE, 'initialMargin', None, None, ), # 27
    (28, TType.DOUBLE, 'maintenanceMargin', None, None, ), # 28
    (29, TType.DOUBLE, 'sellInitialMargin', None, None, ), # 29
    (30, TType.DOUBLE, 'sellMaintenanceMargin', None, None, ), # 30
    (31, TType.DOUBLE, 'lockMargin', None, None, ), # 31
    None, # 32
    None, # 33
    None, # 34
    (35, TType.I32, 'techPlatform', None, None, ), # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'createTimestamp', None, None, ), # 40
    (41, TType.I64, 'lastModityTimestamp', None, None, ), # 41
  )

  def __init__(self, sledCommodityId=None, exchange=None, commodityType=None, commodityCode=None, relateCommodityCodes=None, tradeCurrency=None, timezone=None, contractSize=None, tickSize=None, denominator=None, cmbDirect=None, commodityState=None, engName=None, cnName=None, tcName=None, deliveryMode=None, deliveryDays=None, maxSingleOrderVol=None, maxHoldVol=None, commissionCalculateMode=None, openCloseFee=None, marginCalculateMode=None, initialMargin=None, maintenanceMargin=None, sellInitialMargin=None, sellMaintenanceMargin=None, lockMargin=None, techPlatform=None, createTimestamp=None, lastModityTimestamp=None,):
    self.sledCommodityId = sledCommodityId
    self.exchange = exchange
    self.commodityType = commodityType
    self.commodityCode = commodityCode
    self.relateCommodityCodes = relateCommodityCodes
    self.tradeCurrency = tradeCurrency
    self.timezone = timezone
    self.contractSize = contractSize
    self.tickSize = tickSize
    self.denominator = denominator
    self.cmbDirect = cmbDirect
    self.commodityState = commodityState
    self.engName = engName
    self.cnName = cnName
    self.tcName = tcName
    self.deliveryMode = deliveryMode
    self.deliveryDays = deliveryDays
    self.maxSingleOrderVol = maxSingleOrderVol
    self.maxHoldVol = maxHoldVol
    self.commissionCalculateMode = commissionCalculateMode
    self.openCloseFee = openCloseFee
    self.marginCalculateMode = marginCalculateMode
    self.initialMargin = initialMargin
    self.maintenanceMargin = maintenanceMargin
    self.sellInitialMargin = sellInitialMargin
    self.sellMaintenanceMargin = sellMaintenanceMargin
    self.lockMargin = lockMargin
    self.techPlatform = techPlatform
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sledCommodityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchange = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.commodityType = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.commodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.relateCommodityCodes = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString();
            self.relateCommodityCodes.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.tradeCurrency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.timezone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.contractSize = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.tickSize = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.denominator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.cmbDirect = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.commodityState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.STRING:
          self.engName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.cnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.tcName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.deliveryMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.deliveryDays = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.maxSingleOrderVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.maxHoldVol = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.commissionCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.DOUBLE:
          self.openCloseFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.marginCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.DOUBLE:
          self.initialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.DOUBLE:
          self.maintenanceMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.DOUBLE:
          self.sellInitialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.DOUBLE:
          self.sellMaintenanceMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.DOUBLE:
          self.lockMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechPlatformCommodity')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I32, 1)
      oprot.writeI32(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.exchange is not None:
      oprot.writeFieldBegin('exchange', TType.STRING, 2)
      oprot.writeString(self.exchange)
      oprot.writeFieldEnd()
    if self.commodityType is not None:
      oprot.writeFieldBegin('commodityType', TType.STRING, 3)
      oprot.writeString(self.commodityType)
      oprot.writeFieldEnd()
    if self.commodityCode is not None:
      oprot.writeFieldBegin('commodityCode', TType.STRING, 4)
      oprot.writeString(self.commodityCode)
      oprot.writeFieldEnd()
    if self.relateCommodityCodes is not None:
      oprot.writeFieldBegin('relateCommodityCodes', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.relateCommodityCodes))
      for iter48 in self.relateCommodityCodes:
        oprot.writeString(iter48)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tradeCurrency is not None:
      oprot.writeFieldBegin('tradeCurrency', TType.STRING, 6)
      oprot.writeString(self.tradeCurrency)
      oprot.writeFieldEnd()
    if self.timezone is not None:
      oprot.writeFieldBegin('timezone', TType.STRING, 7)
      oprot.writeString(self.timezone)
      oprot.writeFieldEnd()
    if self.contractSize is not None:
      oprot.writeFieldBegin('contractSize', TType.DOUBLE, 8)
      oprot.writeDouble(self.contractSize)
      oprot.writeFieldEnd()
    if self.tickSize is not None:
      oprot.writeFieldBegin('tickSize', TType.DOUBLE, 9)
      oprot.writeDouble(self.tickSize)
      oprot.writeFieldEnd()
    if self.denominator is not None:
      oprot.writeFieldBegin('denominator', TType.I32, 10)
      oprot.writeI32(self.denominator)
      oprot.writeFieldEnd()
    if self.cmbDirect is not None:
      oprot.writeFieldBegin('cmbDirect', TType.I32, 11)
      oprot.writeI32(self.cmbDirect)
      oprot.writeFieldEnd()
    if self.deliveryMode is not None:
      oprot.writeFieldBegin('deliveryMode', TType.I32, 12)
      oprot.writeI32(self.deliveryMode)
      oprot.writeFieldEnd()
    if self.deliveryDays is not None:
      oprot.writeFieldBegin('deliveryDays', TType.I32, 13)
      oprot.writeI32(self.deliveryDays)
      oprot.writeFieldEnd()
    if self.commodityState is not None:
      oprot.writeFieldBegin('commodityState', TType.I32, 15)
      oprot.writeI32(self.commodityState)
      oprot.writeFieldEnd()
    if self.maxSingleOrderVol is not None:
      oprot.writeFieldBegin('maxSingleOrderVol', TType.I32, 17)
      oprot.writeI32(self.maxSingleOrderVol)
      oprot.writeFieldEnd()
    if self.maxHoldVol is not None:
      oprot.writeFieldBegin('maxHoldVol', TType.I32, 18)
      oprot.writeI32(self.maxHoldVol)
      oprot.writeFieldEnd()
    if self.commissionCalculateMode is not None:
      oprot.writeFieldBegin('commissionCalculateMode', TType.I32, 20)
      oprot.writeI32(self.commissionCalculateMode)
      oprot.writeFieldEnd()
    if self.openCloseFee is not None:
      oprot.writeFieldBegin('openCloseFee', TType.DOUBLE, 21)
      oprot.writeDouble(self.openCloseFee)
      oprot.writeFieldEnd()
    if self.engName is not None:
      oprot.writeFieldBegin('engName', TType.STRING, 22)
      oprot.writeString(self.engName)
      oprot.writeFieldEnd()
    if self.cnName is not None:
      oprot.writeFieldBegin('cnName', TType.STRING, 23)
      oprot.writeString(self.cnName)
      oprot.writeFieldEnd()
    if self.tcName is not None:
      oprot.writeFieldBegin('tcName', TType.STRING, 24)
      oprot.writeString(self.tcName)
      oprot.writeFieldEnd()
    if self.marginCalculateMode is not None:
      oprot.writeFieldBegin('marginCalculateMode', TType.I32, 26)
      oprot.writeI32(self.marginCalculateMode)
      oprot.writeFieldEnd()
    if self.initialMargin is not None:
      oprot.writeFieldBegin('initialMargin', TType.DOUBLE, 27)
      oprot.writeDouble(self.initialMargin)
      oprot.writeFieldEnd()
    if self.maintenanceMargin is not None:
      oprot.writeFieldBegin('maintenanceMargin', TType.DOUBLE, 28)
      oprot.writeDouble(self.maintenanceMargin)
      oprot.writeFieldEnd()
    if self.sellInitialMargin is not None:
      oprot.writeFieldBegin('sellInitialMargin', TType.DOUBLE, 29)
      oprot.writeDouble(self.sellInitialMargin)
      oprot.writeFieldEnd()
    if self.sellMaintenanceMargin is not None:
      oprot.writeFieldBegin('sellMaintenanceMargin', TType.DOUBLE, 30)
      oprot.writeDouble(self.sellMaintenanceMargin)
      oprot.writeFieldEnd()
    if self.lockMargin is not None:
      oprot.writeFieldBegin('lockMargin', TType.DOUBLE, 31)
      oprot.writeDouble(self.lockMargin)
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 35)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 40)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 41)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TechPlatformCommodityPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(TechPlatformCommodity, TechPlatformCommodity.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = TechPlatformCommodity()
            _elem54.read(iprot)
            self.page.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TechPlatformCommodityPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter55 in self.page:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqTechPlatformCommodityOption:
  """
  Attributes:
   - techPlatformCommodityIds
   - sledCommodityIds
   - techPlatform
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'techPlatformCommodityIds', (TType.I32,None), None, ), # 1
    (2, TType.LIST, 'sledCommodityIds', (TType.I32,None), None, ), # 2
    (3, TType.I32, 'techPlatform', None, None, ), # 3
  )

  def __init__(self, techPlatformCommodityIds=None, sledCommodityIds=None, techPlatform=None,):
    self.techPlatformCommodityIds = techPlatformCommodityIds
    self.sledCommodityIds = sledCommodityIds
    self.techPlatform = techPlatform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.techPlatformCommodityIds = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI32();
            self.techPlatformCommodityIds.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.sledCommodityIds = []
          (_etype65, _size62) = iprot.readListBegin()
          for _i66 in xrange(_size62):
            _elem67 = iprot.readI32();
            self.sledCommodityIds.append(_elem67)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqTechPlatformCommodityOption')
    if self.techPlatformCommodityIds is not None:
      oprot.writeFieldBegin('techPlatformCommodityIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.techPlatformCommodityIds))
      for iter68 in self.techPlatformCommodityIds:
        oprot.writeI32(iter68)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.sledCommodityIds is not None:
      oprot.writeFieldBegin('sledCommodityIds', TType.LIST, 2)
      oprot.writeListBegin(TType.I32, len(self.sledCommodityIds))
      for iter69 in self.sledCommodityIds:
        oprot.writeI32(iter69)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 3)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractVersion:
  """
  Attributes:
   - versionId
   - fileMD5
   - filePath
   - createTimestamp
   - lastModityTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'versionId', None, None, ), # 1
    (2, TType.STRING, 'fileMD5', None, None, ), # 2
    (3, TType.STRING, 'filePath', None, None, ), # 3
    (4, TType.I64, 'createTimestamp', None, None, ), # 4
    (5, TType.I64, 'lastModityTimestamp', None, None, ), # 5
  )

  def __init__(self, versionId=None, fileMD5=None, filePath=None, createTimestamp=None, lastModityTimestamp=None,):
    self.versionId = versionId
    self.fileMD5 = fileMD5
    self.filePath = filePath
    self.createTimestamp = createTimestamp
    self.lastModityTimestamp = lastModityTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.fileMD5 = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.filePath = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastModityTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractVersion')
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I32, 1)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    if self.fileMD5 is not None:
      oprot.writeFieldBegin('fileMD5', TType.STRING, 2)
      oprot.writeString(self.fileMD5)
      oprot.writeFieldEnd()
    if self.filePath is not None:
      oprot.writeFieldBegin('filePath', TType.STRING, 3)
      oprot.writeString(self.filePath)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 4)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModityTimestamp is not None:
      oprot.writeFieldBegin('lastModityTimestamp', TType.I64, 5)
      oprot.writeI64(self.lastModityTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractVersionPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(ContractVersion, ContractVersion.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = ContractVersion()
            _elem75.read(iprot)
            self.page.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractVersionPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter76 in self.page:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqContractVersionOption:
  """
  Attributes:
   - versionId
   - latest
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'versionId', None, None, ), # 1
    (2, TType.BOOL, 'latest', None, None, ), # 2
  )

  def __init__(self, versionId=None, latest=None,):
    self.versionId = versionId
    self.latest = latest

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.latest = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqContractVersionOption')
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I32, 1)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    if self.latest is not None:
      oprot.writeFieldBegin('latest', TType.BOOL, 2)
      oprot.writeBool(self.latest)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RemoveContractVersionOption:
  """
  Attributes:
   - versionId
   - all
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'versionId', None, None, ), # 1
    (2, TType.BOOL, 'all', None, None, ), # 2
  )

  def __init__(self, versionId=None, all=None,):
    self.versionId = versionId
    self.all = all

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.all = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RemoveContractVersionOption')
    if self.versionId is not None:
      oprot.writeFieldBegin('versionId', TType.I32, 1)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    if self.all is not None:
      oprot.writeFieldBegin('all', TType.BOOL, 2)
      oprot.writeBool(self.all)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DbLockingInfo:
  """
  Attributes:
   - isLocked
   - lockedBy
   - startLockedTimestamp
   - createTimestamp
   - lockArea
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'isLocked', None, None, ), # 1
    (2, TType.STRING, 'lockedBy', None, None, ), # 2
    (3, TType.I64, 'startLockedTimestamp', None, None, ), # 3
    (4, TType.I64, 'createTimestamp', None, None, ), # 4
    (5, TType.STRING, 'lockArea', None, None, ), # 5
  )

  def __init__(self, isLocked=None, lockedBy=None, startLockedTimestamp=None, createTimestamp=None, lockArea=None,):
    self.isLocked = isLocked
    self.lockedBy = lockedBy
    self.startLockedTimestamp = startLockedTimestamp
    self.createTimestamp = createTimestamp
    self.lockArea = lockArea

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.isLocked = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.lockedBy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startLockedTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lockArea = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DbLockingInfo')
    if self.isLocked is not None:
      oprot.writeFieldBegin('isLocked', TType.BOOL, 1)
      oprot.writeBool(self.isLocked)
      oprot.writeFieldEnd()
    if self.lockedBy is not None:
      oprot.writeFieldBegin('lockedBy', TType.STRING, 2)
      oprot.writeString(self.lockedBy)
      oprot.writeFieldEnd()
    if self.startLockedTimestamp is not None:
      oprot.writeFieldBegin('startLockedTimestamp', TType.I64, 3)
      oprot.writeI64(self.startLockedTimestamp)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 4)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lockArea is not None:
      oprot.writeFieldBegin('lockArea', TType.STRING, 5)
      oprot.writeString(self.lockArea)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
