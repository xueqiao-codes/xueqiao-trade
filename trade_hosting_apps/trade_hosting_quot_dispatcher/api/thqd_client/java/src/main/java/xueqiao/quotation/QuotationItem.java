/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.quotation;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuotationItem implements org.apache.thrift.TBase<QuotationItem, QuotationItem._Fields>, java.io.Serializable, Cloneable, Comparable<QuotationItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuotationItem");

  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSymbol", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPEN_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("openPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField HIGH_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("highPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField LOW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField PRE_CLOSE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preClosePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField PRE_SETTLEMENT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("preSettlementPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField PRE_OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("preOpenInterest", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField OPEN_INTEREST_FIELD_DESC = new org.apache.thrift.protocol.TField("openInterest", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField VOLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("volumn", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TURNOVER_FIELD_DESC = new org.apache.thrift.protocol.TField("turnover", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField UPDATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LAST_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField LAST_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("lastQty", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField UPPER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("upperLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField LOWER_LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("lowerLimitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("averagePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField BID_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("bidPrice", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField BID_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("bidQty", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField ASK_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("askPrice", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField ASK_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("askQty", org.apache.thrift.protocol.TType.LIST, (short)24);
  private static final org.apache.thrift.protocol.TField RECEIVED_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedTimestampMs", org.apache.thrift.protocol.TType.I64, (short)100);
  private static final org.apache.thrift.protocol.TField RECEIVED_HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedHostName", org.apache.thrift.protocol.TType.STRING, (short)101);
  private static final org.apache.thrift.protocol.TField RECEIVED_PROCESS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receivedProcessId", org.apache.thrift.protocol.TType.I16, (short)102);
  private static final org.apache.thrift.protocol.TField RACE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("raceTimestampMs", org.apache.thrift.protocol.TType.I64, (short)120);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeCode", org.apache.thrift.protocol.TType.STRING, (short)135);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I16, (short)136);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)137);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)138);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuotationItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuotationItemTupleSchemeFactory());
  }

  public String platform; // optional
  public String contractSymbol; // optional
  public double openPrice; // optional
  public double highPrice; // optional
  public double lowPrice; // optional
  public double preClosePrice; // optional
  public double preSettlementPrice; // optional
  public long preOpenInterest; // optional
  public long openInterest; // optional
  public long volumn; // optional
  public double turnover; // optional
  public long updateTimestampMs; // optional
  public double lastPrice; // optional
  public long lastQty; // optional
  public double upperLimitPrice; // optional
  public double lowerLimitPrice; // optional
  public double averagePrice; // optional
  public List<Double> bidPrice; // optional
  public List<Long> bidQty; // optional
  public List<Double> askPrice; // optional
  public List<Long> askQty; // optional
  public long receivedTimestampMs; // optional
  public String receivedHostName; // optional
  public short receivedProcessId; // optional
  public long raceTimestampMs; // optional
  public String sledExchangeCode; // optional
  public short sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public String sledContractCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATFORM((short)1, "platform"),
    CONTRACT_SYMBOL((short)2, "contractSymbol"),
    OPEN_PRICE((short)3, "openPrice"),
    HIGH_PRICE((short)4, "highPrice"),
    LOW_PRICE((short)5, "lowPrice"),
    PRE_CLOSE_PRICE((short)6, "preClosePrice"),
    PRE_SETTLEMENT_PRICE((short)7, "preSettlementPrice"),
    PRE_OPEN_INTEREST((short)8, "preOpenInterest"),
    OPEN_INTEREST((short)9, "openInterest"),
    VOLUMN((short)10, "volumn"),
    TURNOVER((short)11, "turnover"),
    UPDATE_TIMESTAMP_MS((short)12, "updateTimestampMs"),
    LAST_PRICE((short)13, "lastPrice"),
    LAST_QTY((short)14, "lastQty"),
    UPPER_LIMIT_PRICE((short)15, "upperLimitPrice"),
    LOWER_LIMIT_PRICE((short)16, "lowerLimitPrice"),
    AVERAGE_PRICE((short)17, "averagePrice"),
    BID_PRICE((short)21, "bidPrice"),
    BID_QTY((short)22, "bidQty"),
    ASK_PRICE((short)23, "askPrice"),
    ASK_QTY((short)24, "askQty"),
    RECEIVED_TIMESTAMP_MS((short)100, "receivedTimestampMs"),
    RECEIVED_HOST_NAME((short)101, "receivedHostName"),
    RECEIVED_PROCESS_ID((short)102, "receivedProcessId"),
    RACE_TIMESTAMP_MS((short)120, "raceTimestampMs"),
    SLED_EXCHANGE_CODE((short)135, "sledExchangeCode"),
    SLED_COMMODITY_TYPE((short)136, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)137, "sledCommodityCode"),
    SLED_CONTRACT_CODE((short)138, "sledContractCode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM
          return PLATFORM;
        case 2: // CONTRACT_SYMBOL
          return CONTRACT_SYMBOL;
        case 3: // OPEN_PRICE
          return OPEN_PRICE;
        case 4: // HIGH_PRICE
          return HIGH_PRICE;
        case 5: // LOW_PRICE
          return LOW_PRICE;
        case 6: // PRE_CLOSE_PRICE
          return PRE_CLOSE_PRICE;
        case 7: // PRE_SETTLEMENT_PRICE
          return PRE_SETTLEMENT_PRICE;
        case 8: // PRE_OPEN_INTEREST
          return PRE_OPEN_INTEREST;
        case 9: // OPEN_INTEREST
          return OPEN_INTEREST;
        case 10: // VOLUMN
          return VOLUMN;
        case 11: // TURNOVER
          return TURNOVER;
        case 12: // UPDATE_TIMESTAMP_MS
          return UPDATE_TIMESTAMP_MS;
        case 13: // LAST_PRICE
          return LAST_PRICE;
        case 14: // LAST_QTY
          return LAST_QTY;
        case 15: // UPPER_LIMIT_PRICE
          return UPPER_LIMIT_PRICE;
        case 16: // LOWER_LIMIT_PRICE
          return LOWER_LIMIT_PRICE;
        case 17: // AVERAGE_PRICE
          return AVERAGE_PRICE;
        case 21: // BID_PRICE
          return BID_PRICE;
        case 22: // BID_QTY
          return BID_QTY;
        case 23: // ASK_PRICE
          return ASK_PRICE;
        case 24: // ASK_QTY
          return ASK_QTY;
        case 100: // RECEIVED_TIMESTAMP_MS
          return RECEIVED_TIMESTAMP_MS;
        case 101: // RECEIVED_HOST_NAME
          return RECEIVED_HOST_NAME;
        case 102: // RECEIVED_PROCESS_ID
          return RECEIVED_PROCESS_ID;
        case 120: // RACE_TIMESTAMP_MS
          return RACE_TIMESTAMP_MS;
        case 135: // SLED_EXCHANGE_CODE
          return SLED_EXCHANGE_CODE;
        case 136: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 137: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 138: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPENPRICE_ISSET_ID = 0;
  private static final int __HIGHPRICE_ISSET_ID = 1;
  private static final int __LOWPRICE_ISSET_ID = 2;
  private static final int __PRECLOSEPRICE_ISSET_ID = 3;
  private static final int __PRESETTLEMENTPRICE_ISSET_ID = 4;
  private static final int __PREOPENINTEREST_ISSET_ID = 5;
  private static final int __OPENINTEREST_ISSET_ID = 6;
  private static final int __VOLUMN_ISSET_ID = 7;
  private static final int __TURNOVER_ISSET_ID = 8;
  private static final int __UPDATETIMESTAMPMS_ISSET_ID = 9;
  private static final int __LASTPRICE_ISSET_ID = 10;
  private static final int __LASTQTY_ISSET_ID = 11;
  private static final int __UPPERLIMITPRICE_ISSET_ID = 12;
  private static final int __LOWERLIMITPRICE_ISSET_ID = 13;
  private static final int __AVERAGEPRICE_ISSET_ID = 14;
  private static final int __RECEIVEDTIMESTAMPMS_ISSET_ID = 15;
  private static final int __RECEIVEDPROCESSID_ISSET_ID = 16;
  private static final int __RACETIMESTAMPMS_ISSET_ID = 17;
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 18;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PLATFORM,_Fields.CONTRACT_SYMBOL,_Fields.OPEN_PRICE,_Fields.HIGH_PRICE,_Fields.LOW_PRICE,_Fields.PRE_CLOSE_PRICE,_Fields.PRE_SETTLEMENT_PRICE,_Fields.PRE_OPEN_INTEREST,_Fields.OPEN_INTEREST,_Fields.VOLUMN,_Fields.TURNOVER,_Fields.UPDATE_TIMESTAMP_MS,_Fields.LAST_PRICE,_Fields.LAST_QTY,_Fields.UPPER_LIMIT_PRICE,_Fields.LOWER_LIMIT_PRICE,_Fields.AVERAGE_PRICE,_Fields.BID_PRICE,_Fields.BID_QTY,_Fields.ASK_PRICE,_Fields.ASK_QTY,_Fields.RECEIVED_TIMESTAMP_MS,_Fields.RECEIVED_HOST_NAME,_Fields.RECEIVED_PROCESS_ID,_Fields.RACE_TIMESTAMP_MS,_Fields.SLED_EXCHANGE_CODE,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.SLED_CONTRACT_CODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("contractSymbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_PRICE, new org.apache.thrift.meta_data.FieldMetaData("openPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.HIGH_PRICE, new org.apache.thrift.meta_data.FieldMetaData("highPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOW_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lowPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_CLOSE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preClosePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_SETTLEMENT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("preSettlementPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("preOpenInterest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPEN_INTEREST, new org.apache.thrift.meta_data.FieldMetaData("openInterest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VOLUMN, new org.apache.thrift.meta_data.FieldMetaData("volumn", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TURNOVER, new org.apache.thrift.meta_data.FieldMetaData("turnover", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("updateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lastPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LAST_QTY, new org.apache.thrift.meta_data.FieldMetaData("lastQty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UPPER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("upperLimitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LOWER_LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("lowerLimitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("averagePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.BID_PRICE, new org.apache.thrift.meta_data.FieldMetaData("bidPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.BID_QTY, new org.apache.thrift.meta_data.FieldMetaData("bidQty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.ASK_PRICE, new org.apache.thrift.meta_data.FieldMetaData("askPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.ASK_QTY, new org.apache.thrift.meta_data.FieldMetaData("askQty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.RECEIVED_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("receivedTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RECEIVED_HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("receivedHostName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVED_PROCESS_ID, new org.apache.thrift.meta_data.FieldMetaData("receivedProcessId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.RACE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("raceTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_EXCHANGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuotationItem.class, metaDataMap);
  }

  public QuotationItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuotationItem(QuotationItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetContractSymbol()) {
      this.contractSymbol = other.contractSymbol;
    }
    this.openPrice = other.openPrice;
    this.highPrice = other.highPrice;
    this.lowPrice = other.lowPrice;
    this.preClosePrice = other.preClosePrice;
    this.preSettlementPrice = other.preSettlementPrice;
    this.preOpenInterest = other.preOpenInterest;
    this.openInterest = other.openInterest;
    this.volumn = other.volumn;
    this.turnover = other.turnover;
    this.updateTimestampMs = other.updateTimestampMs;
    this.lastPrice = other.lastPrice;
    this.lastQty = other.lastQty;
    this.upperLimitPrice = other.upperLimitPrice;
    this.lowerLimitPrice = other.lowerLimitPrice;
    this.averagePrice = other.averagePrice;
    if (other.isSetBidPrice()) {
      List<Double> __this__bidPrice = new ArrayList<Double>(other.bidPrice);
      this.bidPrice = __this__bidPrice;
    }
    if (other.isSetBidQty()) {
      List<Long> __this__bidQty = new ArrayList<Long>(other.bidQty);
      this.bidQty = __this__bidQty;
    }
    if (other.isSetAskPrice()) {
      List<Double> __this__askPrice = new ArrayList<Double>(other.askPrice);
      this.askPrice = __this__askPrice;
    }
    if (other.isSetAskQty()) {
      List<Long> __this__askQty = new ArrayList<Long>(other.askQty);
      this.askQty = __this__askQty;
    }
    this.receivedTimestampMs = other.receivedTimestampMs;
    if (other.isSetReceivedHostName()) {
      this.receivedHostName = other.receivedHostName;
    }
    this.receivedProcessId = other.receivedProcessId;
    this.raceTimestampMs = other.raceTimestampMs;
    if (other.isSetSledExchangeCode()) {
      this.sledExchangeCode = other.sledExchangeCode;
    }
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
  }

  public QuotationItem deepCopy() {
    return new QuotationItem(this);
  }

  @Override
  public void clear() {
    this.platform = null;
    this.contractSymbol = null;
    setOpenPriceIsSet(false);
    this.openPrice = 0.0;
    setHighPriceIsSet(false);
    this.highPrice = 0.0;
    setLowPriceIsSet(false);
    this.lowPrice = 0.0;
    setPreClosePriceIsSet(false);
    this.preClosePrice = 0.0;
    setPreSettlementPriceIsSet(false);
    this.preSettlementPrice = 0.0;
    setPreOpenInterestIsSet(false);
    this.preOpenInterest = 0;
    setOpenInterestIsSet(false);
    this.openInterest = 0;
    setVolumnIsSet(false);
    this.volumn = 0;
    setTurnoverIsSet(false);
    this.turnover = 0.0;
    setUpdateTimestampMsIsSet(false);
    this.updateTimestampMs = 0;
    setLastPriceIsSet(false);
    this.lastPrice = 0.0;
    setLastQtyIsSet(false);
    this.lastQty = 0;
    setUpperLimitPriceIsSet(false);
    this.upperLimitPrice = 0.0;
    setLowerLimitPriceIsSet(false);
    this.lowerLimitPrice = 0.0;
    setAveragePriceIsSet(false);
    this.averagePrice = 0.0;
    this.bidPrice = null;
    this.bidQty = null;
    this.askPrice = null;
    this.askQty = null;
    setReceivedTimestampMsIsSet(false);
    this.receivedTimestampMs = 0;
    this.receivedHostName = null;
    setReceivedProcessIdIsSet(false);
    this.receivedProcessId = 0;
    setRaceTimestampMsIsSet(false);
    this.raceTimestampMs = 0;
    this.sledExchangeCode = null;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    this.sledContractCode = null;
  }

  public String getPlatform() {
    return this.platform;
  }

  public QuotationItem setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getContractSymbol() {
    return this.contractSymbol;
  }

  public QuotationItem setContractSymbol(String contractSymbol) {
    this.contractSymbol = contractSymbol;
    return this;
  }

  public void unsetContractSymbol() {
    this.contractSymbol = null;
  }

  /** Returns true if field contractSymbol is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSymbol() {
    return this.contractSymbol != null;
  }

  public void setContractSymbolIsSet(boolean value) {
    if (!value) {
      this.contractSymbol = null;
    }
  }

  public double getOpenPrice() {
    return this.openPrice;
  }

  public QuotationItem setOpenPrice(double openPrice) {
    this.openPrice = openPrice;
    setOpenPriceIsSet(true);
    return this;
  }

  public void unsetOpenPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  /** Returns true if field openPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENPRICE_ISSET_ID);
  }

  public void setOpenPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENPRICE_ISSET_ID, value);
  }

  public double getHighPrice() {
    return this.highPrice;
  }

  public QuotationItem setHighPrice(double highPrice) {
    this.highPrice = highPrice;
    setHighPriceIsSet(true);
    return this;
  }

  public void unsetHighPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIGHPRICE_ISSET_ID);
  }

  /** Returns true if field highPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetHighPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __HIGHPRICE_ISSET_ID);
  }

  public void setHighPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIGHPRICE_ISSET_ID, value);
  }

  public double getLowPrice() {
    return this.lowPrice;
  }

  public QuotationItem setLowPrice(double lowPrice) {
    this.lowPrice = lowPrice;
    setLowPriceIsSet(true);
    return this;
  }

  public void unsetLowPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWPRICE_ISSET_ID);
  }

  /** Returns true if field lowPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLowPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWPRICE_ISSET_ID);
  }

  public void setLowPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWPRICE_ISSET_ID, value);
  }

  public double getPreClosePrice() {
    return this.preClosePrice;
  }

  public QuotationItem setPreClosePrice(double preClosePrice) {
    this.preClosePrice = preClosePrice;
    setPreClosePriceIsSet(true);
    return this;
  }

  public void unsetPreClosePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID);
  }

  /** Returns true if field preClosePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreClosePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID);
  }

  public void setPreClosePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRECLOSEPRICE_ISSET_ID, value);
  }

  public double getPreSettlementPrice() {
    return this.preSettlementPrice;
  }

  public QuotationItem setPreSettlementPrice(double preSettlementPrice) {
    this.preSettlementPrice = preSettlementPrice;
    setPreSettlementPriceIsSet(true);
    return this;
  }

  public void unsetPreSettlementPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  /** Returns true if field preSettlementPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPreSettlementPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID);
  }

  public void setPreSettlementPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRESETTLEMENTPRICE_ISSET_ID, value);
  }

  public long getPreOpenInterest() {
    return this.preOpenInterest;
  }

  public QuotationItem setPreOpenInterest(long preOpenInterest) {
    this.preOpenInterest = preOpenInterest;
    setPreOpenInterestIsSet(true);
    return this;
  }

  public void unsetPreOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID);
  }

  /** Returns true if field preOpenInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetPreOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID);
  }

  public void setPreOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREOPENINTEREST_ISSET_ID, value);
  }

  public long getOpenInterest() {
    return this.openInterest;
  }

  public QuotationItem setOpenInterest(long openInterest) {
    this.openInterest = openInterest;
    setOpenInterestIsSet(true);
    return this;
  }

  public void unsetOpenInterest() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  /** Returns true if field openInterest is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenInterest() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENINTEREST_ISSET_ID);
  }

  public void setOpenInterestIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENINTEREST_ISSET_ID, value);
  }

  public long getVolumn() {
    return this.volumn;
  }

  public QuotationItem setVolumn(long volumn) {
    this.volumn = volumn;
    setVolumnIsSet(true);
    return this;
  }

  public void unsetVolumn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMN_ISSET_ID);
  }

  /** Returns true if field volumn is set (has been assigned a value) and false otherwise */
  public boolean isSetVolumn() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUMN_ISSET_ID);
  }

  public void setVolumnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMN_ISSET_ID, value);
  }

  public double getTurnover() {
    return this.turnover;
  }

  public QuotationItem setTurnover(double turnover) {
    this.turnover = turnover;
    setTurnoverIsSet(true);
    return this;
  }

  public void unsetTurnover() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  /** Returns true if field turnover is set (has been assigned a value) and false otherwise */
  public boolean isSetTurnover() {
    return EncodingUtils.testBit(__isset_bitfield, __TURNOVER_ISSET_ID);
  }

  public void setTurnoverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TURNOVER_ISSET_ID, value);
  }

  public long getUpdateTimestampMs() {
    return this.updateTimestampMs;
  }

  public QuotationItem setUpdateTimestampMs(long updateTimestampMs) {
    this.updateTimestampMs = updateTimestampMs;
    setUpdateTimestampMsIsSet(true);
    return this;
  }

  public void unsetUpdateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field updateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID);
  }

  public void setUpdateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID, value);
  }

  public double getLastPrice() {
    return this.lastPrice;
  }

  public QuotationItem setLastPrice(double lastPrice) {
    this.lastPrice = lastPrice;
    setLastPriceIsSet(true);
    return this;
  }

  public void unsetLastPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  /** Returns true if field lastPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTPRICE_ISSET_ID);
  }

  public void setLastPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTPRICE_ISSET_ID, value);
  }

  public long getLastQty() {
    return this.lastQty;
  }

  public QuotationItem setLastQty(long lastQty) {
    this.lastQty = lastQty;
    setLastQtyIsSet(true);
    return this;
  }

  public void unsetLastQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTQTY_ISSET_ID);
  }

  /** Returns true if field lastQty is set (has been assigned a value) and false otherwise */
  public boolean isSetLastQty() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTQTY_ISSET_ID);
  }

  public void setLastQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTQTY_ISSET_ID, value);
  }

  public double getUpperLimitPrice() {
    return this.upperLimitPrice;
  }

  public QuotationItem setUpperLimitPrice(double upperLimitPrice) {
    this.upperLimitPrice = upperLimitPrice;
    setUpperLimitPriceIsSet(true);
    return this;
  }

  public void unsetUpperLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field upperLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetUpperLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID);
  }

  public void setUpperLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPPERLIMITPRICE_ISSET_ID, value);
  }

  public double getLowerLimitPrice() {
    return this.lowerLimitPrice;
  }

  public QuotationItem setLowerLimitPrice(double lowerLimitPrice) {
    this.lowerLimitPrice = lowerLimitPrice;
    setLowerLimitPriceIsSet(true);
    return this;
  }

  public void unsetLowerLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  /** Returns true if field lowerLimitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLowerLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID);
  }

  public void setLowerLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOWERLIMITPRICE_ISSET_ID, value);
  }

  public double getAveragePrice() {
    return this.averagePrice;
  }

  public QuotationItem setAveragePrice(double averagePrice) {
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    return this;
  }

  public void unsetAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field averagePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  public void setAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID, value);
  }

  public int getBidPriceSize() {
    return (this.bidPrice == null) ? 0 : this.bidPrice.size();
  }

  public java.util.Iterator<Double> getBidPriceIterator() {
    return (this.bidPrice == null) ? null : this.bidPrice.iterator();
  }

  public void addToBidPrice(double elem) {
    if (this.bidPrice == null) {
      this.bidPrice = new ArrayList<Double>();
    }
    this.bidPrice.add(elem);
  }

  public List<Double> getBidPrice() {
    return this.bidPrice;
  }

  public QuotationItem setBidPrice(List<Double> bidPrice) {
    this.bidPrice = bidPrice;
    return this;
  }

  public void unsetBidPrice() {
    this.bidPrice = null;
  }

  /** Returns true if field bidPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetBidPrice() {
    return this.bidPrice != null;
  }

  public void setBidPriceIsSet(boolean value) {
    if (!value) {
      this.bidPrice = null;
    }
  }

  public int getBidQtySize() {
    return (this.bidQty == null) ? 0 : this.bidQty.size();
  }

  public java.util.Iterator<Long> getBidQtyIterator() {
    return (this.bidQty == null) ? null : this.bidQty.iterator();
  }

  public void addToBidQty(long elem) {
    if (this.bidQty == null) {
      this.bidQty = new ArrayList<Long>();
    }
    this.bidQty.add(elem);
  }

  public List<Long> getBidQty() {
    return this.bidQty;
  }

  public QuotationItem setBidQty(List<Long> bidQty) {
    this.bidQty = bidQty;
    return this;
  }

  public void unsetBidQty() {
    this.bidQty = null;
  }

  /** Returns true if field bidQty is set (has been assigned a value) and false otherwise */
  public boolean isSetBidQty() {
    return this.bidQty != null;
  }

  public void setBidQtyIsSet(boolean value) {
    if (!value) {
      this.bidQty = null;
    }
  }

  public int getAskPriceSize() {
    return (this.askPrice == null) ? 0 : this.askPrice.size();
  }

  public java.util.Iterator<Double> getAskPriceIterator() {
    return (this.askPrice == null) ? null : this.askPrice.iterator();
  }

  public void addToAskPrice(double elem) {
    if (this.askPrice == null) {
      this.askPrice = new ArrayList<Double>();
    }
    this.askPrice.add(elem);
  }

  public List<Double> getAskPrice() {
    return this.askPrice;
  }

  public QuotationItem setAskPrice(List<Double> askPrice) {
    this.askPrice = askPrice;
    return this;
  }

  public void unsetAskPrice() {
    this.askPrice = null;
  }

  /** Returns true if field askPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAskPrice() {
    return this.askPrice != null;
  }

  public void setAskPriceIsSet(boolean value) {
    if (!value) {
      this.askPrice = null;
    }
  }

  public int getAskQtySize() {
    return (this.askQty == null) ? 0 : this.askQty.size();
  }

  public java.util.Iterator<Long> getAskQtyIterator() {
    return (this.askQty == null) ? null : this.askQty.iterator();
  }

  public void addToAskQty(long elem) {
    if (this.askQty == null) {
      this.askQty = new ArrayList<Long>();
    }
    this.askQty.add(elem);
  }

  public List<Long> getAskQty() {
    return this.askQty;
  }

  public QuotationItem setAskQty(List<Long> askQty) {
    this.askQty = askQty;
    return this;
  }

  public void unsetAskQty() {
    this.askQty = null;
  }

  /** Returns true if field askQty is set (has been assigned a value) and false otherwise */
  public boolean isSetAskQty() {
    return this.askQty != null;
  }

  public void setAskQtyIsSet(boolean value) {
    if (!value) {
      this.askQty = null;
    }
  }

  public long getReceivedTimestampMs() {
    return this.receivedTimestampMs;
  }

  public QuotationItem setReceivedTimestampMs(long receivedTimestampMs) {
    this.receivedTimestampMs = receivedTimestampMs;
    setReceivedTimestampMsIsSet(true);
    return this;
  }

  public void unsetReceivedTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field receivedTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID);
  }

  public void setReceivedTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDTIMESTAMPMS_ISSET_ID, value);
  }

  public String getReceivedHostName() {
    return this.receivedHostName;
  }

  public QuotationItem setReceivedHostName(String receivedHostName) {
    this.receivedHostName = receivedHostName;
    return this;
  }

  public void unsetReceivedHostName() {
    this.receivedHostName = null;
  }

  /** Returns true if field receivedHostName is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedHostName() {
    return this.receivedHostName != null;
  }

  public void setReceivedHostNameIsSet(boolean value) {
    if (!value) {
      this.receivedHostName = null;
    }
  }

  public short getReceivedProcessId() {
    return this.receivedProcessId;
  }

  public QuotationItem setReceivedProcessId(short receivedProcessId) {
    this.receivedProcessId = receivedProcessId;
    setReceivedProcessIdIsSet(true);
    return this;
  }

  public void unsetReceivedProcessId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECEIVEDPROCESSID_ISSET_ID);
  }

  /** Returns true if field receivedProcessId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceivedProcessId() {
    return EncodingUtils.testBit(__isset_bitfield, __RECEIVEDPROCESSID_ISSET_ID);
  }

  public void setReceivedProcessIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECEIVEDPROCESSID_ISSET_ID, value);
  }

  public long getRaceTimestampMs() {
    return this.raceTimestampMs;
  }

  public QuotationItem setRaceTimestampMs(long raceTimestampMs) {
    this.raceTimestampMs = raceTimestampMs;
    setRaceTimestampMsIsSet(true);
    return this;
  }

  public void unsetRaceTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RACETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field raceTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetRaceTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __RACETIMESTAMPMS_ISSET_ID);
  }

  public void setRaceTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RACETIMESTAMPMS_ISSET_ID, value);
  }

  public String getSledExchangeCode() {
    return this.sledExchangeCode;
  }

  public QuotationItem setSledExchangeCode(String sledExchangeCode) {
    this.sledExchangeCode = sledExchangeCode;
    return this;
  }

  public void unsetSledExchangeCode() {
    this.sledExchangeCode = null;
  }

  /** Returns true if field sledExchangeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeCode() {
    return this.sledExchangeCode != null;
  }

  public void setSledExchangeCodeIsSet(boolean value) {
    if (!value) {
      this.sledExchangeCode = null;
    }
  }

  public short getSledCommodityType() {
    return this.sledCommodityType;
  }

  public QuotationItem setSledCommodityType(short sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public QuotationItem setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public QuotationItem setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case CONTRACT_SYMBOL:
      if (value == null) {
        unsetContractSymbol();
      } else {
        setContractSymbol((String)value);
      }
      break;

    case OPEN_PRICE:
      if (value == null) {
        unsetOpenPrice();
      } else {
        setOpenPrice((Double)value);
      }
      break;

    case HIGH_PRICE:
      if (value == null) {
        unsetHighPrice();
      } else {
        setHighPrice((Double)value);
      }
      break;

    case LOW_PRICE:
      if (value == null) {
        unsetLowPrice();
      } else {
        setLowPrice((Double)value);
      }
      break;

    case PRE_CLOSE_PRICE:
      if (value == null) {
        unsetPreClosePrice();
      } else {
        setPreClosePrice((Double)value);
      }
      break;

    case PRE_SETTLEMENT_PRICE:
      if (value == null) {
        unsetPreSettlementPrice();
      } else {
        setPreSettlementPrice((Double)value);
      }
      break;

    case PRE_OPEN_INTEREST:
      if (value == null) {
        unsetPreOpenInterest();
      } else {
        setPreOpenInterest((Long)value);
      }
      break;

    case OPEN_INTEREST:
      if (value == null) {
        unsetOpenInterest();
      } else {
        setOpenInterest((Long)value);
      }
      break;

    case VOLUMN:
      if (value == null) {
        unsetVolumn();
      } else {
        setVolumn((Long)value);
      }
      break;

    case TURNOVER:
      if (value == null) {
        unsetTurnover();
      } else {
        setTurnover((Double)value);
      }
      break;

    case UPDATE_TIMESTAMP_MS:
      if (value == null) {
        unsetUpdateTimestampMs();
      } else {
        setUpdateTimestampMs((Long)value);
      }
      break;

    case LAST_PRICE:
      if (value == null) {
        unsetLastPrice();
      } else {
        setLastPrice((Double)value);
      }
      break;

    case LAST_QTY:
      if (value == null) {
        unsetLastQty();
      } else {
        setLastQty((Long)value);
      }
      break;

    case UPPER_LIMIT_PRICE:
      if (value == null) {
        unsetUpperLimitPrice();
      } else {
        setUpperLimitPrice((Double)value);
      }
      break;

    case LOWER_LIMIT_PRICE:
      if (value == null) {
        unsetLowerLimitPrice();
      } else {
        setLowerLimitPrice((Double)value);
      }
      break;

    case AVERAGE_PRICE:
      if (value == null) {
        unsetAveragePrice();
      } else {
        setAveragePrice((Double)value);
      }
      break;

    case BID_PRICE:
      if (value == null) {
        unsetBidPrice();
      } else {
        setBidPrice((List<Double>)value);
      }
      break;

    case BID_QTY:
      if (value == null) {
        unsetBidQty();
      } else {
        setBidQty((List<Long>)value);
      }
      break;

    case ASK_PRICE:
      if (value == null) {
        unsetAskPrice();
      } else {
        setAskPrice((List<Double>)value);
      }
      break;

    case ASK_QTY:
      if (value == null) {
        unsetAskQty();
      } else {
        setAskQty((List<Long>)value);
      }
      break;

    case RECEIVED_TIMESTAMP_MS:
      if (value == null) {
        unsetReceivedTimestampMs();
      } else {
        setReceivedTimestampMs((Long)value);
      }
      break;

    case RECEIVED_HOST_NAME:
      if (value == null) {
        unsetReceivedHostName();
      } else {
        setReceivedHostName((String)value);
      }
      break;

    case RECEIVED_PROCESS_ID:
      if (value == null) {
        unsetReceivedProcessId();
      } else {
        setReceivedProcessId((Short)value);
      }
      break;

    case RACE_TIMESTAMP_MS:
      if (value == null) {
        unsetRaceTimestampMs();
      } else {
        setRaceTimestampMs((Long)value);
      }
      break;

    case SLED_EXCHANGE_CODE:
      if (value == null) {
        unsetSledExchangeCode();
      } else {
        setSledExchangeCode((String)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Short)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM:
      return getPlatform();

    case CONTRACT_SYMBOL:
      return getContractSymbol();

    case OPEN_PRICE:
      return Double.valueOf(getOpenPrice());

    case HIGH_PRICE:
      return Double.valueOf(getHighPrice());

    case LOW_PRICE:
      return Double.valueOf(getLowPrice());

    case PRE_CLOSE_PRICE:
      return Double.valueOf(getPreClosePrice());

    case PRE_SETTLEMENT_PRICE:
      return Double.valueOf(getPreSettlementPrice());

    case PRE_OPEN_INTEREST:
      return Long.valueOf(getPreOpenInterest());

    case OPEN_INTEREST:
      return Long.valueOf(getOpenInterest());

    case VOLUMN:
      return Long.valueOf(getVolumn());

    case TURNOVER:
      return Double.valueOf(getTurnover());

    case UPDATE_TIMESTAMP_MS:
      return Long.valueOf(getUpdateTimestampMs());

    case LAST_PRICE:
      return Double.valueOf(getLastPrice());

    case LAST_QTY:
      return Long.valueOf(getLastQty());

    case UPPER_LIMIT_PRICE:
      return Double.valueOf(getUpperLimitPrice());

    case LOWER_LIMIT_PRICE:
      return Double.valueOf(getLowerLimitPrice());

    case AVERAGE_PRICE:
      return Double.valueOf(getAveragePrice());

    case BID_PRICE:
      return getBidPrice();

    case BID_QTY:
      return getBidQty();

    case ASK_PRICE:
      return getAskPrice();

    case ASK_QTY:
      return getAskQty();

    case RECEIVED_TIMESTAMP_MS:
      return Long.valueOf(getReceivedTimestampMs());

    case RECEIVED_HOST_NAME:
      return getReceivedHostName();

    case RECEIVED_PROCESS_ID:
      return Short.valueOf(getReceivedProcessId());

    case RACE_TIMESTAMP_MS:
      return Long.valueOf(getRaceTimestampMs());

    case SLED_EXCHANGE_CODE:
      return getSledExchangeCode();

    case SLED_COMMODITY_TYPE:
      return Short.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM:
      return isSetPlatform();
    case CONTRACT_SYMBOL:
      return isSetContractSymbol();
    case OPEN_PRICE:
      return isSetOpenPrice();
    case HIGH_PRICE:
      return isSetHighPrice();
    case LOW_PRICE:
      return isSetLowPrice();
    case PRE_CLOSE_PRICE:
      return isSetPreClosePrice();
    case PRE_SETTLEMENT_PRICE:
      return isSetPreSettlementPrice();
    case PRE_OPEN_INTEREST:
      return isSetPreOpenInterest();
    case OPEN_INTEREST:
      return isSetOpenInterest();
    case VOLUMN:
      return isSetVolumn();
    case TURNOVER:
      return isSetTurnover();
    case UPDATE_TIMESTAMP_MS:
      return isSetUpdateTimestampMs();
    case LAST_PRICE:
      return isSetLastPrice();
    case LAST_QTY:
      return isSetLastQty();
    case UPPER_LIMIT_PRICE:
      return isSetUpperLimitPrice();
    case LOWER_LIMIT_PRICE:
      return isSetLowerLimitPrice();
    case AVERAGE_PRICE:
      return isSetAveragePrice();
    case BID_PRICE:
      return isSetBidPrice();
    case BID_QTY:
      return isSetBidQty();
    case ASK_PRICE:
      return isSetAskPrice();
    case ASK_QTY:
      return isSetAskQty();
    case RECEIVED_TIMESTAMP_MS:
      return isSetReceivedTimestampMs();
    case RECEIVED_HOST_NAME:
      return isSetReceivedHostName();
    case RECEIVED_PROCESS_ID:
      return isSetReceivedProcessId();
    case RACE_TIMESTAMP_MS:
      return isSetRaceTimestampMs();
    case SLED_EXCHANGE_CODE:
      return isSetSledExchangeCode();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuotationItem)
      return this.equals((QuotationItem)that);
    return false;
  }

  public boolean equals(QuotationItem that) {
    if (that == null)
      return false;

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_contractSymbol = true && this.isSetContractSymbol();
    boolean that_present_contractSymbol = true && that.isSetContractSymbol();
    if (this_present_contractSymbol || that_present_contractSymbol) {
      if (!(this_present_contractSymbol && that_present_contractSymbol))
        return false;
      if (!this.contractSymbol.equals(that.contractSymbol))
        return false;
    }

    boolean this_present_openPrice = true && this.isSetOpenPrice();
    boolean that_present_openPrice = true && that.isSetOpenPrice();
    if (this_present_openPrice || that_present_openPrice) {
      if (!(this_present_openPrice && that_present_openPrice))
        return false;
      if (this.openPrice != that.openPrice)
        return false;
    }

    boolean this_present_highPrice = true && this.isSetHighPrice();
    boolean that_present_highPrice = true && that.isSetHighPrice();
    if (this_present_highPrice || that_present_highPrice) {
      if (!(this_present_highPrice && that_present_highPrice))
        return false;
      if (this.highPrice != that.highPrice)
        return false;
    }

    boolean this_present_lowPrice = true && this.isSetLowPrice();
    boolean that_present_lowPrice = true && that.isSetLowPrice();
    if (this_present_lowPrice || that_present_lowPrice) {
      if (!(this_present_lowPrice && that_present_lowPrice))
        return false;
      if (this.lowPrice != that.lowPrice)
        return false;
    }

    boolean this_present_preClosePrice = true && this.isSetPreClosePrice();
    boolean that_present_preClosePrice = true && that.isSetPreClosePrice();
    if (this_present_preClosePrice || that_present_preClosePrice) {
      if (!(this_present_preClosePrice && that_present_preClosePrice))
        return false;
      if (this.preClosePrice != that.preClosePrice)
        return false;
    }

    boolean this_present_preSettlementPrice = true && this.isSetPreSettlementPrice();
    boolean that_present_preSettlementPrice = true && that.isSetPreSettlementPrice();
    if (this_present_preSettlementPrice || that_present_preSettlementPrice) {
      if (!(this_present_preSettlementPrice && that_present_preSettlementPrice))
        return false;
      if (this.preSettlementPrice != that.preSettlementPrice)
        return false;
    }

    boolean this_present_preOpenInterest = true && this.isSetPreOpenInterest();
    boolean that_present_preOpenInterest = true && that.isSetPreOpenInterest();
    if (this_present_preOpenInterest || that_present_preOpenInterest) {
      if (!(this_present_preOpenInterest && that_present_preOpenInterest))
        return false;
      if (this.preOpenInterest != that.preOpenInterest)
        return false;
    }

    boolean this_present_openInterest = true && this.isSetOpenInterest();
    boolean that_present_openInterest = true && that.isSetOpenInterest();
    if (this_present_openInterest || that_present_openInterest) {
      if (!(this_present_openInterest && that_present_openInterest))
        return false;
      if (this.openInterest != that.openInterest)
        return false;
    }

    boolean this_present_volumn = true && this.isSetVolumn();
    boolean that_present_volumn = true && that.isSetVolumn();
    if (this_present_volumn || that_present_volumn) {
      if (!(this_present_volumn && that_present_volumn))
        return false;
      if (this.volumn != that.volumn)
        return false;
    }

    boolean this_present_turnover = true && this.isSetTurnover();
    boolean that_present_turnover = true && that.isSetTurnover();
    if (this_present_turnover || that_present_turnover) {
      if (!(this_present_turnover && that_present_turnover))
        return false;
      if (this.turnover != that.turnover)
        return false;
    }

    boolean this_present_updateTimestampMs = true && this.isSetUpdateTimestampMs();
    boolean that_present_updateTimestampMs = true && that.isSetUpdateTimestampMs();
    if (this_present_updateTimestampMs || that_present_updateTimestampMs) {
      if (!(this_present_updateTimestampMs && that_present_updateTimestampMs))
        return false;
      if (this.updateTimestampMs != that.updateTimestampMs)
        return false;
    }

    boolean this_present_lastPrice = true && this.isSetLastPrice();
    boolean that_present_lastPrice = true && that.isSetLastPrice();
    if (this_present_lastPrice || that_present_lastPrice) {
      if (!(this_present_lastPrice && that_present_lastPrice))
        return false;
      if (this.lastPrice != that.lastPrice)
        return false;
    }

    boolean this_present_lastQty = true && this.isSetLastQty();
    boolean that_present_lastQty = true && that.isSetLastQty();
    if (this_present_lastQty || that_present_lastQty) {
      if (!(this_present_lastQty && that_present_lastQty))
        return false;
      if (this.lastQty != that.lastQty)
        return false;
    }

    boolean this_present_upperLimitPrice = true && this.isSetUpperLimitPrice();
    boolean that_present_upperLimitPrice = true && that.isSetUpperLimitPrice();
    if (this_present_upperLimitPrice || that_present_upperLimitPrice) {
      if (!(this_present_upperLimitPrice && that_present_upperLimitPrice))
        return false;
      if (this.upperLimitPrice != that.upperLimitPrice)
        return false;
    }

    boolean this_present_lowerLimitPrice = true && this.isSetLowerLimitPrice();
    boolean that_present_lowerLimitPrice = true && that.isSetLowerLimitPrice();
    if (this_present_lowerLimitPrice || that_present_lowerLimitPrice) {
      if (!(this_present_lowerLimitPrice && that_present_lowerLimitPrice))
        return false;
      if (this.lowerLimitPrice != that.lowerLimitPrice)
        return false;
    }

    boolean this_present_averagePrice = true && this.isSetAveragePrice();
    boolean that_present_averagePrice = true && that.isSetAveragePrice();
    if (this_present_averagePrice || that_present_averagePrice) {
      if (!(this_present_averagePrice && that_present_averagePrice))
        return false;
      if (this.averagePrice != that.averagePrice)
        return false;
    }

    boolean this_present_bidPrice = true && this.isSetBidPrice();
    boolean that_present_bidPrice = true && that.isSetBidPrice();
    if (this_present_bidPrice || that_present_bidPrice) {
      if (!(this_present_bidPrice && that_present_bidPrice))
        return false;
      if (!this.bidPrice.equals(that.bidPrice))
        return false;
    }

    boolean this_present_bidQty = true && this.isSetBidQty();
    boolean that_present_bidQty = true && that.isSetBidQty();
    if (this_present_bidQty || that_present_bidQty) {
      if (!(this_present_bidQty && that_present_bidQty))
        return false;
      if (!this.bidQty.equals(that.bidQty))
        return false;
    }

    boolean this_present_askPrice = true && this.isSetAskPrice();
    boolean that_present_askPrice = true && that.isSetAskPrice();
    if (this_present_askPrice || that_present_askPrice) {
      if (!(this_present_askPrice && that_present_askPrice))
        return false;
      if (!this.askPrice.equals(that.askPrice))
        return false;
    }

    boolean this_present_askQty = true && this.isSetAskQty();
    boolean that_present_askQty = true && that.isSetAskQty();
    if (this_present_askQty || that_present_askQty) {
      if (!(this_present_askQty && that_present_askQty))
        return false;
      if (!this.askQty.equals(that.askQty))
        return false;
    }

    boolean this_present_receivedTimestampMs = true && this.isSetReceivedTimestampMs();
    boolean that_present_receivedTimestampMs = true && that.isSetReceivedTimestampMs();
    if (this_present_receivedTimestampMs || that_present_receivedTimestampMs) {
      if (!(this_present_receivedTimestampMs && that_present_receivedTimestampMs))
        return false;
      if (this.receivedTimestampMs != that.receivedTimestampMs)
        return false;
    }

    boolean this_present_receivedHostName = true && this.isSetReceivedHostName();
    boolean that_present_receivedHostName = true && that.isSetReceivedHostName();
    if (this_present_receivedHostName || that_present_receivedHostName) {
      if (!(this_present_receivedHostName && that_present_receivedHostName))
        return false;
      if (!this.receivedHostName.equals(that.receivedHostName))
        return false;
    }

    boolean this_present_receivedProcessId = true && this.isSetReceivedProcessId();
    boolean that_present_receivedProcessId = true && that.isSetReceivedProcessId();
    if (this_present_receivedProcessId || that_present_receivedProcessId) {
      if (!(this_present_receivedProcessId && that_present_receivedProcessId))
        return false;
      if (this.receivedProcessId != that.receivedProcessId)
        return false;
    }

    boolean this_present_raceTimestampMs = true && this.isSetRaceTimestampMs();
    boolean that_present_raceTimestampMs = true && that.isSetRaceTimestampMs();
    if (this_present_raceTimestampMs || that_present_raceTimestampMs) {
      if (!(this_present_raceTimestampMs && that_present_raceTimestampMs))
        return false;
      if (this.raceTimestampMs != that.raceTimestampMs)
        return false;
    }

    boolean this_present_sledExchangeCode = true && this.isSetSledExchangeCode();
    boolean that_present_sledExchangeCode = true && that.isSetSledExchangeCode();
    if (this_present_sledExchangeCode || that_present_sledExchangeCode) {
      if (!(this_present_sledExchangeCode && that_present_sledExchangeCode))
        return false;
      if (!this.sledExchangeCode.equals(that.sledExchangeCode))
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuotationItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSymbol()).compareTo(other.isSetContractSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSymbol, other.contractSymbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenPrice()).compareTo(other.isSetOpenPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openPrice, other.openPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHighPrice()).compareTo(other.isSetHighPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHighPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.highPrice, other.highPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowPrice()).compareTo(other.isSetLowPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowPrice, other.lowPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreClosePrice()).compareTo(other.isSetPreClosePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreClosePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preClosePrice, other.preClosePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreSettlementPrice()).compareTo(other.isSetPreSettlementPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreSettlementPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preSettlementPrice, other.preSettlementPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreOpenInterest()).compareTo(other.isSetPreOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preOpenInterest, other.preOpenInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenInterest()).compareTo(other.isSetOpenInterest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenInterest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openInterest, other.openInterest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolumn()).compareTo(other.isSetVolumn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolumn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumn, other.volumn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTurnover()).compareTo(other.isSetTurnover());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTurnover()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.turnover, other.turnover);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTimestampMs()).compareTo(other.isSetUpdateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTimestampMs, other.updateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastPrice()).compareTo(other.isSetLastPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastPrice, other.lastPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastQty()).compareTo(other.isSetLastQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastQty, other.lastQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpperLimitPrice()).compareTo(other.isSetUpperLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpperLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upperLimitPrice, other.upperLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLowerLimitPrice()).compareTo(other.isSetLowerLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLowerLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lowerLimitPrice, other.lowerLimitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAveragePrice()).compareTo(other.isSetAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averagePrice, other.averagePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidPrice()).compareTo(other.isSetBidPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidPrice, other.bidPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBidQty()).compareTo(other.isSetBidQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBidQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bidQty, other.bidQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskPrice()).compareTo(other.isSetAskPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askPrice, other.askPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAskQty()).compareTo(other.isSetAskQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAskQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.askQty, other.askQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedTimestampMs()).compareTo(other.isSetReceivedTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedTimestampMs, other.receivedTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedHostName()).compareTo(other.isSetReceivedHostName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedHostName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedHostName, other.receivedHostName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceivedProcessId()).compareTo(other.isSetReceivedProcessId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceivedProcessId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receivedProcessId, other.receivedProcessId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRaceTimestampMs()).compareTo(other.isSetRaceTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRaceTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.raceTimestampMs, other.raceTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeCode()).compareTo(other.isSetSledExchangeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeCode, other.sledExchangeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuotationItem(");
    boolean first = true;

    if (isSetPlatform()) {
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetContractSymbol()) {
      if (!first) sb.append(", ");
      sb.append("contractSymbol:");
      if (this.contractSymbol == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSymbol);
      }
      first = false;
    }
    if (isSetOpenPrice()) {
      if (!first) sb.append(", ");
      sb.append("openPrice:");
      sb.append(this.openPrice);
      first = false;
    }
    if (isSetHighPrice()) {
      if (!first) sb.append(", ");
      sb.append("highPrice:");
      sb.append(this.highPrice);
      first = false;
    }
    if (isSetLowPrice()) {
      if (!first) sb.append(", ");
      sb.append("lowPrice:");
      sb.append(this.lowPrice);
      first = false;
    }
    if (isSetPreClosePrice()) {
      if (!first) sb.append(", ");
      sb.append("preClosePrice:");
      sb.append(this.preClosePrice);
      first = false;
    }
    if (isSetPreSettlementPrice()) {
      if (!first) sb.append(", ");
      sb.append("preSettlementPrice:");
      sb.append(this.preSettlementPrice);
      first = false;
    }
    if (isSetPreOpenInterest()) {
      if (!first) sb.append(", ");
      sb.append("preOpenInterest:");
      sb.append(this.preOpenInterest);
      first = false;
    }
    if (isSetOpenInterest()) {
      if (!first) sb.append(", ");
      sb.append("openInterest:");
      sb.append(this.openInterest);
      first = false;
    }
    if (isSetVolumn()) {
      if (!first) sb.append(", ");
      sb.append("volumn:");
      sb.append(this.volumn);
      first = false;
    }
    if (isSetTurnover()) {
      if (!first) sb.append(", ");
      sb.append("turnover:");
      sb.append(this.turnover);
      first = false;
    }
    if (isSetUpdateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("updateTimestampMs:");
      sb.append(this.updateTimestampMs);
      first = false;
    }
    if (isSetLastPrice()) {
      if (!first) sb.append(", ");
      sb.append("lastPrice:");
      sb.append(this.lastPrice);
      first = false;
    }
    if (isSetLastQty()) {
      if (!first) sb.append(", ");
      sb.append("lastQty:");
      sb.append(this.lastQty);
      first = false;
    }
    if (isSetUpperLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("upperLimitPrice:");
      sb.append(this.upperLimitPrice);
      first = false;
    }
    if (isSetLowerLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("lowerLimitPrice:");
      sb.append(this.lowerLimitPrice);
      first = false;
    }
    if (isSetAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("averagePrice:");
      sb.append(this.averagePrice);
      first = false;
    }
    if (isSetBidPrice()) {
      if (!first) sb.append(", ");
      sb.append("bidPrice:");
      if (this.bidPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.bidPrice);
      }
      first = false;
    }
    if (isSetBidQty()) {
      if (!first) sb.append(", ");
      sb.append("bidQty:");
      if (this.bidQty == null) {
        sb.append("null");
      } else {
        sb.append(this.bidQty);
      }
      first = false;
    }
    if (isSetAskPrice()) {
      if (!first) sb.append(", ");
      sb.append("askPrice:");
      if (this.askPrice == null) {
        sb.append("null");
      } else {
        sb.append(this.askPrice);
      }
      first = false;
    }
    if (isSetAskQty()) {
      if (!first) sb.append(", ");
      sb.append("askQty:");
      if (this.askQty == null) {
        sb.append("null");
      } else {
        sb.append(this.askQty);
      }
      first = false;
    }
    if (isSetReceivedTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("receivedTimestampMs:");
      sb.append(this.receivedTimestampMs);
      first = false;
    }
    if (isSetReceivedHostName()) {
      if (!first) sb.append(", ");
      sb.append("receivedHostName:");
      if (this.receivedHostName == null) {
        sb.append("null");
      } else {
        sb.append(this.receivedHostName);
      }
      first = false;
    }
    if (isSetReceivedProcessId()) {
      if (!first) sb.append(", ");
      sb.append("receivedProcessId:");
      sb.append(this.receivedProcessId);
      first = false;
    }
    if (isSetRaceTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("raceTimestampMs:");
      sb.append(this.raceTimestampMs);
      first = false;
    }
    if (isSetSledExchangeCode()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeCode:");
      if (this.sledExchangeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeCode);
      }
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuotationItemStandardSchemeFactory implements SchemeFactory {
    public QuotationItemStandardScheme getScheme() {
      return new QuotationItemStandardScheme();
    }
  }

  private static class QuotationItemStandardScheme extends StandardScheme<QuotationItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuotationItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractSymbol = iprot.readString();
              struct.setContractSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPEN_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openPrice = iprot.readDouble();
              struct.setOpenPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HIGH_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.highPrice = iprot.readDouble();
              struct.setHighPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOW_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowPrice = iprot.readDouble();
              struct.setLowPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PRE_CLOSE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preClosePrice = iprot.readDouble();
              struct.setPreClosePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRE_SETTLEMENT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preSettlementPrice = iprot.readDouble();
              struct.setPreSettlementPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRE_OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.preOpenInterest = iprot.readI64();
              struct.setPreOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPEN_INTEREST
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.openInterest = iprot.readI64();
              struct.setOpenInterestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VOLUMN
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.volumn = iprot.readI64();
              struct.setVolumnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TURNOVER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.turnover = iprot.readDouble();
              struct.setTurnoverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // UPDATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTimestampMs = iprot.readI64();
              struct.setUpdateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LAST_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lastPrice = iprot.readDouble();
              struct.setLastPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // LAST_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastQty = iprot.readI64();
              struct.setLastQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UPPER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.upperLimitPrice = iprot.readDouble();
              struct.setUpperLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // LOWER_LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.lowerLimitPrice = iprot.readDouble();
              struct.setLowerLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averagePrice = iprot.readDouble();
              struct.setAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // BID_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.bidPrice = new ArrayList<Double>(_list32.size);
                for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                {
                  double _elem34;
                  _elem34 = iprot.readDouble();
                  struct.bidPrice.add(_elem34);
                }
                iprot.readListEnd();
              }
              struct.setBidPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // BID_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.bidQty = new ArrayList<Long>(_list35.size);
                for (int _i36 = 0; _i36 < _list35.size; ++_i36)
                {
                  long _elem37;
                  _elem37 = iprot.readI64();
                  struct.bidQty.add(_elem37);
                }
                iprot.readListEnd();
              }
              struct.setBidQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // ASK_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.askPrice = new ArrayList<Double>(_list38.size);
                for (int _i39 = 0; _i39 < _list38.size; ++_i39)
                {
                  double _elem40;
                  _elem40 = iprot.readDouble();
                  struct.askPrice.add(_elem40);
                }
                iprot.readListEnd();
              }
              struct.setAskPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // ASK_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.askQty = new ArrayList<Long>(_list41.size);
                for (int _i42 = 0; _i42 < _list41.size; ++_i42)
                {
                  long _elem43;
                  _elem43 = iprot.readI64();
                  struct.askQty.add(_elem43);
                }
                iprot.readListEnd();
              }
              struct.setAskQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 100: // RECEIVED_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receivedTimestampMs = iprot.readI64();
              struct.setReceivedTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 101: // RECEIVED_HOST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receivedHostName = iprot.readString();
              struct.setReceivedHostNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 102: // RECEIVED_PROCESS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.receivedProcessId = iprot.readI16();
              struct.setReceivedProcessIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 120: // RACE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.raceTimestampMs = iprot.readI64();
              struct.setRaceTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 135: // SLED_EXCHANGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeCode = iprot.readString();
              struct.setSledExchangeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 136: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sledCommodityType = iprot.readI16();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 137: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 138: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuotationItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractSymbol != null) {
        if (struct.isSetContractSymbol()) {
          oprot.writeFieldBegin(CONTRACT_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.contractSymbol);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenPrice()) {
        oprot.writeFieldBegin(OPEN_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.openPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetHighPrice()) {
        oprot.writeFieldBegin(HIGH_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.highPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLowPrice()) {
        oprot.writeFieldBegin(LOW_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lowPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreClosePrice()) {
        oprot.writeFieldBegin(PRE_CLOSE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.preClosePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreSettlementPrice()) {
        oprot.writeFieldBegin(PRE_SETTLEMENT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.preSettlementPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreOpenInterest()) {
        oprot.writeFieldBegin(PRE_OPEN_INTEREST_FIELD_DESC);
        oprot.writeI64(struct.preOpenInterest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeFieldBegin(OPEN_INTEREST_FIELD_DESC);
        oprot.writeI64(struct.openInterest);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolumn()) {
        oprot.writeFieldBegin(VOLUMN_FIELD_DESC);
        oprot.writeI64(struct.volumn);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTurnover()) {
        oprot.writeFieldBegin(TURNOVER_FIELD_DESC);
        oprot.writeDouble(struct.turnover);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTimestampMs()) {
        oprot.writeFieldBegin(UPDATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.updateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastPrice()) {
        oprot.writeFieldBegin(LAST_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lastPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastQty()) {
        oprot.writeFieldBegin(LAST_QTY_FIELD_DESC);
        oprot.writeI64(struct.lastQty);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpperLimitPrice()) {
        oprot.writeFieldBegin(UPPER_LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.upperLimitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLowerLimitPrice()) {
        oprot.writeFieldBegin(LOWER_LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.lowerLimitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeFieldBegin(AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.averagePrice);
        oprot.writeFieldEnd();
      }
      if (struct.bidPrice != null) {
        if (struct.isSetBidPrice()) {
          oprot.writeFieldBegin(BID_PRICE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.bidPrice.size()));
            for (double _iter44 : struct.bidPrice)
            {
              oprot.writeDouble(_iter44);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.bidQty != null) {
        if (struct.isSetBidQty()) {
          oprot.writeFieldBegin(BID_QTY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.bidQty.size()));
            for (long _iter45 : struct.bidQty)
            {
              oprot.writeI64(_iter45);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.askPrice != null) {
        if (struct.isSetAskPrice()) {
          oprot.writeFieldBegin(ASK_PRICE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.askPrice.size()));
            for (double _iter46 : struct.askPrice)
            {
              oprot.writeDouble(_iter46);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.askQty != null) {
        if (struct.isSetAskQty()) {
          oprot.writeFieldBegin(ASK_QTY_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.askQty.size()));
            for (long _iter47 : struct.askQty)
            {
              oprot.writeI64(_iter47);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceivedTimestampMs()) {
        oprot.writeFieldBegin(RECEIVED_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.receivedTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.receivedHostName != null) {
        if (struct.isSetReceivedHostName()) {
          oprot.writeFieldBegin(RECEIVED_HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.receivedHostName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetReceivedProcessId()) {
        oprot.writeFieldBegin(RECEIVED_PROCESS_ID_FIELD_DESC);
        oprot.writeI16(struct.receivedProcessId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRaceTimestampMs()) {
        oprot.writeFieldBegin(RACE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.raceTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.sledExchangeCode != null) {
        if (struct.isSetSledExchangeCode()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_CODE_FIELD_DESC);
          oprot.writeString(struct.sledExchangeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuotationItemTupleSchemeFactory implements SchemeFactory {
    public QuotationItemTupleScheme getScheme() {
      return new QuotationItemTupleScheme();
    }
  }

  private static class QuotationItemTupleScheme extends TupleScheme<QuotationItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuotationItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatform()) {
        optionals.set(0);
      }
      if (struct.isSetContractSymbol()) {
        optionals.set(1);
      }
      if (struct.isSetOpenPrice()) {
        optionals.set(2);
      }
      if (struct.isSetHighPrice()) {
        optionals.set(3);
      }
      if (struct.isSetLowPrice()) {
        optionals.set(4);
      }
      if (struct.isSetPreClosePrice()) {
        optionals.set(5);
      }
      if (struct.isSetPreSettlementPrice()) {
        optionals.set(6);
      }
      if (struct.isSetPreOpenInterest()) {
        optionals.set(7);
      }
      if (struct.isSetOpenInterest()) {
        optionals.set(8);
      }
      if (struct.isSetVolumn()) {
        optionals.set(9);
      }
      if (struct.isSetTurnover()) {
        optionals.set(10);
      }
      if (struct.isSetUpdateTimestampMs()) {
        optionals.set(11);
      }
      if (struct.isSetLastPrice()) {
        optionals.set(12);
      }
      if (struct.isSetLastQty()) {
        optionals.set(13);
      }
      if (struct.isSetUpperLimitPrice()) {
        optionals.set(14);
      }
      if (struct.isSetLowerLimitPrice()) {
        optionals.set(15);
      }
      if (struct.isSetAveragePrice()) {
        optionals.set(16);
      }
      if (struct.isSetBidPrice()) {
        optionals.set(17);
      }
      if (struct.isSetBidQty()) {
        optionals.set(18);
      }
      if (struct.isSetAskPrice()) {
        optionals.set(19);
      }
      if (struct.isSetAskQty()) {
        optionals.set(20);
      }
      if (struct.isSetReceivedTimestampMs()) {
        optionals.set(21);
      }
      if (struct.isSetReceivedHostName()) {
        optionals.set(22);
      }
      if (struct.isSetReceivedProcessId()) {
        optionals.set(23);
      }
      if (struct.isSetRaceTimestampMs()) {
        optionals.set(24);
      }
      if (struct.isSetSledExchangeCode()) {
        optionals.set(25);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(26);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(27);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(28);
      }
      oprot.writeBitSet(optionals, 29);
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetContractSymbol()) {
        oprot.writeString(struct.contractSymbol);
      }
      if (struct.isSetOpenPrice()) {
        oprot.writeDouble(struct.openPrice);
      }
      if (struct.isSetHighPrice()) {
        oprot.writeDouble(struct.highPrice);
      }
      if (struct.isSetLowPrice()) {
        oprot.writeDouble(struct.lowPrice);
      }
      if (struct.isSetPreClosePrice()) {
        oprot.writeDouble(struct.preClosePrice);
      }
      if (struct.isSetPreSettlementPrice()) {
        oprot.writeDouble(struct.preSettlementPrice);
      }
      if (struct.isSetPreOpenInterest()) {
        oprot.writeI64(struct.preOpenInterest);
      }
      if (struct.isSetOpenInterest()) {
        oprot.writeI64(struct.openInterest);
      }
      if (struct.isSetVolumn()) {
        oprot.writeI64(struct.volumn);
      }
      if (struct.isSetTurnover()) {
        oprot.writeDouble(struct.turnover);
      }
      if (struct.isSetUpdateTimestampMs()) {
        oprot.writeI64(struct.updateTimestampMs);
      }
      if (struct.isSetLastPrice()) {
        oprot.writeDouble(struct.lastPrice);
      }
      if (struct.isSetLastQty()) {
        oprot.writeI64(struct.lastQty);
      }
      if (struct.isSetUpperLimitPrice()) {
        oprot.writeDouble(struct.upperLimitPrice);
      }
      if (struct.isSetLowerLimitPrice()) {
        oprot.writeDouble(struct.lowerLimitPrice);
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeDouble(struct.averagePrice);
      }
      if (struct.isSetBidPrice()) {
        {
          oprot.writeI32(struct.bidPrice.size());
          for (double _iter48 : struct.bidPrice)
          {
            oprot.writeDouble(_iter48);
          }
        }
      }
      if (struct.isSetBidQty()) {
        {
          oprot.writeI32(struct.bidQty.size());
          for (long _iter49 : struct.bidQty)
          {
            oprot.writeI64(_iter49);
          }
        }
      }
      if (struct.isSetAskPrice()) {
        {
          oprot.writeI32(struct.askPrice.size());
          for (double _iter50 : struct.askPrice)
          {
            oprot.writeDouble(_iter50);
          }
        }
      }
      if (struct.isSetAskQty()) {
        {
          oprot.writeI32(struct.askQty.size());
          for (long _iter51 : struct.askQty)
          {
            oprot.writeI64(_iter51);
          }
        }
      }
      if (struct.isSetReceivedTimestampMs()) {
        oprot.writeI64(struct.receivedTimestampMs);
      }
      if (struct.isSetReceivedHostName()) {
        oprot.writeString(struct.receivedHostName);
      }
      if (struct.isSetReceivedProcessId()) {
        oprot.writeI16(struct.receivedProcessId);
      }
      if (struct.isSetRaceTimestampMs()) {
        oprot.writeI64(struct.raceTimestampMs);
      }
      if (struct.isSetSledExchangeCode()) {
        oprot.writeString(struct.sledExchangeCode);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI16(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuotationItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(29);
      if (incoming.get(0)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractSymbol = iprot.readString();
        struct.setContractSymbolIsSet(true);
      }
      if (incoming.get(2)) {
        struct.openPrice = iprot.readDouble();
        struct.setOpenPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.highPrice = iprot.readDouble();
        struct.setHighPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lowPrice = iprot.readDouble();
        struct.setLowPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.preClosePrice = iprot.readDouble();
        struct.setPreClosePriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.preSettlementPrice = iprot.readDouble();
        struct.setPreSettlementPriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.preOpenInterest = iprot.readI64();
        struct.setPreOpenInterestIsSet(true);
      }
      if (incoming.get(8)) {
        struct.openInterest = iprot.readI64();
        struct.setOpenInterestIsSet(true);
      }
      if (incoming.get(9)) {
        struct.volumn = iprot.readI64();
        struct.setVolumnIsSet(true);
      }
      if (incoming.get(10)) {
        struct.turnover = iprot.readDouble();
        struct.setTurnoverIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updateTimestampMs = iprot.readI64();
        struct.setUpdateTimestampMsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.lastPrice = iprot.readDouble();
        struct.setLastPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.lastQty = iprot.readI64();
        struct.setLastQtyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.upperLimitPrice = iprot.readDouble();
        struct.setUpperLimitPriceIsSet(true);
      }
      if (incoming.get(15)) {
        struct.lowerLimitPrice = iprot.readDouble();
        struct.setLowerLimitPriceIsSet(true);
      }
      if (incoming.get(16)) {
        struct.averagePrice = iprot.readDouble();
        struct.setAveragePriceIsSet(true);
      }
      if (incoming.get(17)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.bidPrice = new ArrayList<Double>(_list52.size);
          for (int _i53 = 0; _i53 < _list52.size; ++_i53)
          {
            double _elem54;
            _elem54 = iprot.readDouble();
            struct.bidPrice.add(_elem54);
          }
        }
        struct.setBidPriceIsSet(true);
      }
      if (incoming.get(18)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.bidQty = new ArrayList<Long>(_list55.size);
          for (int _i56 = 0; _i56 < _list55.size; ++_i56)
          {
            long _elem57;
            _elem57 = iprot.readI64();
            struct.bidQty.add(_elem57);
          }
        }
        struct.setBidQtyIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.askPrice = new ArrayList<Double>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            double _elem60;
            _elem60 = iprot.readDouble();
            struct.askPrice.add(_elem60);
          }
        }
        struct.setAskPriceIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.askQty = new ArrayList<Long>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            long _elem63;
            _elem63 = iprot.readI64();
            struct.askQty.add(_elem63);
          }
        }
        struct.setAskQtyIsSet(true);
      }
      if (incoming.get(21)) {
        struct.receivedTimestampMs = iprot.readI64();
        struct.setReceivedTimestampMsIsSet(true);
      }
      if (incoming.get(22)) {
        struct.receivedHostName = iprot.readString();
        struct.setReceivedHostNameIsSet(true);
      }
      if (incoming.get(23)) {
        struct.receivedProcessId = iprot.readI16();
        struct.setReceivedProcessIdIsSet(true);
      }
      if (incoming.get(24)) {
        struct.raceTimestampMs = iprot.readI64();
        struct.setRaceTimestampMsIsSet(true);
      }
      if (incoming.get(25)) {
        struct.sledExchangeCode = iprot.readString();
        struct.setSledExchangeCodeIsSet(true);
      }
      if (incoming.get(26)) {
        struct.sledCommodityType = iprot.readI16();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(28)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
    }
  }

}

