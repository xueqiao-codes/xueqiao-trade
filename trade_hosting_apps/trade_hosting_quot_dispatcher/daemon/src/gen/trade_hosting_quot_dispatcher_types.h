/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_quot_dispatcher_TYPES_H
#define trade_hosting_quot_dispatcher_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"


namespace xueqiao { namespace trade { namespace hosting { namespace quot { namespace dispatcher {

typedef struct _SyncQuotTopic__isset {
  _SyncQuotTopic__isset() : platform(false), contractSymbol(false) {}
  bool platform;
  bool contractSymbol;
} _SyncQuotTopic__isset;

class SyncQuotTopic {
 public:

  static const char* ascii_fingerprint; // = "D0297FC5011701BD87898CC36146A565";
  static const uint8_t binary_fingerprint[16]; // = {0xD0,0x29,0x7F,0xC5,0x01,0x17,0x01,0xBD,0x87,0x89,0x8C,0xC3,0x61,0x46,0xA5,0x65};

  SyncQuotTopic() : platform(), contractSymbol() {
  }

  virtual ~SyncQuotTopic() throw() {}

  std::string platform;
  std::string contractSymbol;

  _SyncQuotTopic__isset __isset;

  void __set_platform(const std::string& val) {
    platform = val;
    __isset.platform = true;
  }

  void __set_contractSymbol(const std::string& val) {
    contractSymbol = val;
    __isset.contractSymbol = true;
  }

  bool operator == (const SyncQuotTopic & rhs) const
  {
    if (__isset.platform != rhs.__isset.platform)
      return false;
    else if (__isset.platform && !(platform == rhs.platform))
      return false;
    if (__isset.contractSymbol != rhs.__isset.contractSymbol)
      return false;
    else if (__isset.contractSymbol && !(contractSymbol == rhs.contractSymbol))
      return false;
    return true;
  }
  bool operator != (const SyncQuotTopic &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncQuotTopic & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncQuotTopic &a, SyncQuotTopic &b);

typedef struct _SyncTopicsRequest__isset {
  _SyncTopicsRequest__isset() : consumerKey(false), quotTopics(false) {}
  bool consumerKey;
  bool quotTopics;
} _SyncTopicsRequest__isset;

class SyncTopicsRequest {
 public:

  static const char* ascii_fingerprint; // = "B33D7BC9DE434DAA5357867455C5BB4A";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x3D,0x7B,0xC9,0xDE,0x43,0x4D,0xAA,0x53,0x57,0x86,0x74,0x55,0xC5,0xBB,0x4A};

  SyncTopicsRequest() : consumerKey() {
  }

  virtual ~SyncTopicsRequest() throw() {}

  std::string consumerKey;
  std::vector<SyncQuotTopic>  quotTopics;

  _SyncTopicsRequest__isset __isset;

  void __set_consumerKey(const std::string& val) {
    consumerKey = val;
    __isset.consumerKey = true;
  }

  void __set_quotTopics(const std::vector<SyncQuotTopic> & val) {
    quotTopics = val;
    __isset.quotTopics = true;
  }

  bool operator == (const SyncTopicsRequest & rhs) const
  {
    if (__isset.consumerKey != rhs.__isset.consumerKey)
      return false;
    else if (__isset.consumerKey && !(consumerKey == rhs.consumerKey))
      return false;
    if (__isset.quotTopics != rhs.__isset.quotTopics)
      return false;
    else if (__isset.quotTopics && !(quotTopics == rhs.quotTopics))
      return false;
    return true;
  }
  bool operator != (const SyncTopicsRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SyncTopicsRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(SyncTopicsRequest &a, SyncTopicsRequest &b);

}}}}} // namespace

#endif
