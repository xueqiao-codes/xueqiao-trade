/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.quot.comb.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SyncCombTopicsRequest implements org.apache.thrift.TBase<SyncCombTopicsRequest, SyncCombTopicsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SyncCombTopicsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SyncCombTopicsRequest");

  private static final org.apache.thrift.protocol.TField CONSUMER_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerKey", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphIds", org.apache.thrift.protocol.TType.SET, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SyncCombTopicsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SyncCombTopicsRequestTupleSchemeFactory());
  }

  public String consumerKey; // optional
  public Set<Long> composeGraphIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONSUMER_KEY((short)1, "consumerKey"),
    COMPOSE_GRAPH_IDS((short)2, "composeGraphIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONSUMER_KEY
          return CONSUMER_KEY;
        case 2: // COMPOSE_GRAPH_IDS
          return COMPOSE_GRAPH_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CONSUMER_KEY,_Fields.COMPOSE_GRAPH_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONSUMER_KEY, new org.apache.thrift.meta_data.FieldMetaData("consumerKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPOSE_GRAPH_IDS, new org.apache.thrift.meta_data.FieldMetaData("composeGraphIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SyncCombTopicsRequest.class, metaDataMap);
  }

  public SyncCombTopicsRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncCombTopicsRequest(SyncCombTopicsRequest other) {
    if (other.isSetConsumerKey()) {
      this.consumerKey = other.consumerKey;
    }
    if (other.isSetComposeGraphIds()) {
      Set<Long> __this__composeGraphIds = new HashSet<Long>(other.composeGraphIds);
      this.composeGraphIds = __this__composeGraphIds;
    }
  }

  public SyncCombTopicsRequest deepCopy() {
    return new SyncCombTopicsRequest(this);
  }

  @Override
  public void clear() {
    this.consumerKey = null;
    this.composeGraphIds = null;
  }

  public String getConsumerKey() {
    return this.consumerKey;
  }

  public SyncCombTopicsRequest setConsumerKey(String consumerKey) {
    this.consumerKey = consumerKey;
    return this;
  }

  public void unsetConsumerKey() {
    this.consumerKey = null;
  }

  /** Returns true if field consumerKey is set (has been assigned a value) and false otherwise */
  public boolean isSetConsumerKey() {
    return this.consumerKey != null;
  }

  public void setConsumerKeyIsSet(boolean value) {
    if (!value) {
      this.consumerKey = null;
    }
  }

  public int getComposeGraphIdsSize() {
    return (this.composeGraphIds == null) ? 0 : this.composeGraphIds.size();
  }

  public java.util.Iterator<Long> getComposeGraphIdsIterator() {
    return (this.composeGraphIds == null) ? null : this.composeGraphIds.iterator();
  }

  public void addToComposeGraphIds(long elem) {
    if (this.composeGraphIds == null) {
      this.composeGraphIds = new HashSet<Long>();
    }
    this.composeGraphIds.add(elem);
  }

  public Set<Long> getComposeGraphIds() {
    return this.composeGraphIds;
  }

  public SyncCombTopicsRequest setComposeGraphIds(Set<Long> composeGraphIds) {
    this.composeGraphIds = composeGraphIds;
    return this;
  }

  public void unsetComposeGraphIds() {
    this.composeGraphIds = null;
  }

  /** Returns true if field composeGraphIds is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphIds() {
    return this.composeGraphIds != null;
  }

  public void setComposeGraphIdsIsSet(boolean value) {
    if (!value) {
      this.composeGraphIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONSUMER_KEY:
      if (value == null) {
        unsetConsumerKey();
      } else {
        setConsumerKey((String)value);
      }
      break;

    case COMPOSE_GRAPH_IDS:
      if (value == null) {
        unsetComposeGraphIds();
      } else {
        setComposeGraphIds((Set<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONSUMER_KEY:
      return getConsumerKey();

    case COMPOSE_GRAPH_IDS:
      return getComposeGraphIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONSUMER_KEY:
      return isSetConsumerKey();
    case COMPOSE_GRAPH_IDS:
      return isSetComposeGraphIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncCombTopicsRequest)
      return this.equals((SyncCombTopicsRequest)that);
    return false;
  }

  public boolean equals(SyncCombTopicsRequest that) {
    if (that == null)
      return false;

    boolean this_present_consumerKey = true && this.isSetConsumerKey();
    boolean that_present_consumerKey = true && that.isSetConsumerKey();
    if (this_present_consumerKey || that_present_consumerKey) {
      if (!(this_present_consumerKey && that_present_consumerKey))
        return false;
      if (!this.consumerKey.equals(that.consumerKey))
        return false;
    }

    boolean this_present_composeGraphIds = true && this.isSetComposeGraphIds();
    boolean that_present_composeGraphIds = true && that.isSetComposeGraphIds();
    if (this_present_composeGraphIds || that_present_composeGraphIds) {
      if (!(this_present_composeGraphIds && that_present_composeGraphIds))
        return false;
      if (!this.composeGraphIds.equals(that.composeGraphIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SyncCombTopicsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetConsumerKey()).compareTo(other.isSetConsumerKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConsumerKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerKey, other.consumerKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeGraphIds()).compareTo(other.isSetComposeGraphIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphIds, other.composeGraphIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SyncCombTopicsRequest(");
    boolean first = true;

    if (isSetConsumerKey()) {
      sb.append("consumerKey:");
      if (this.consumerKey == null) {
        sb.append("null");
      } else {
        sb.append(this.consumerKey);
      }
      first = false;
    }
    if (isSetComposeGraphIds()) {
      if (!first) sb.append(", ");
      sb.append("composeGraphIds:");
      if (this.composeGraphIds == null) {
        sb.append("null");
      } else {
        sb.append(this.composeGraphIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SyncCombTopicsRequestStandardSchemeFactory implements SchemeFactory {
    public SyncCombTopicsRequestStandardScheme getScheme() {
      return new SyncCombTopicsRequestStandardScheme();
    }
  }

  private static class SyncCombTopicsRequestStandardScheme extends StandardScheme<SyncCombTopicsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SyncCombTopicsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONSUMER_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.consumerKey = iprot.readString();
              struct.setConsumerKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSE_GRAPH_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                struct.composeGraphIds = new HashSet<Long>(2*_set16.size);
                for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                {
                  long _elem18;
                  _elem18 = iprot.readI64();
                  struct.composeGraphIds.add(_elem18);
                }
                iprot.readSetEnd();
              }
              struct.setComposeGraphIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SyncCombTopicsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.consumerKey != null) {
        if (struct.isSetConsumerKey()) {
          oprot.writeFieldBegin(CONSUMER_KEY_FIELD_DESC);
          oprot.writeString(struct.consumerKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.composeGraphIds != null) {
        if (struct.isSetComposeGraphIds()) {
          oprot.writeFieldBegin(COMPOSE_GRAPH_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.composeGraphIds.size()));
            for (long _iter19 : struct.composeGraphIds)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SyncCombTopicsRequestTupleSchemeFactory implements SchemeFactory {
    public SyncCombTopicsRequestTupleScheme getScheme() {
      return new SyncCombTopicsRequestTupleScheme();
    }
  }

  private static class SyncCombTopicsRequestTupleScheme extends TupleScheme<SyncCombTopicsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SyncCombTopicsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetConsumerKey()) {
        optionals.set(0);
      }
      if (struct.isSetComposeGraphIds()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetConsumerKey()) {
        oprot.writeString(struct.consumerKey);
      }
      if (struct.isSetComposeGraphIds()) {
        {
          oprot.writeI32(struct.composeGraphIds.size());
          for (long _iter20 : struct.composeGraphIds)
          {
            oprot.writeI64(_iter20);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SyncCombTopicsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.consumerKey = iprot.readString();
        struct.setConsumerKeyIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set21 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.composeGraphIds = new HashSet<Long>(2*_set21.size);
          for (int _i22 = 0; _i22 < _set21.size; ++_i22)
          {
            long _elem23;
            _elem23 = iprot.readI64();
            struct.composeGraphIds.add(_elem23);
          }
        }
        struct.setComposeGraphIdsIsSet(true);
      }
    }
  }

}

