/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.quot.comb.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 组合行情定义
 */
public class HostingQuotationComb implements org.apache.thrift.TBase<HostingQuotationComb, HostingQuotationComb._Fields>, java.io.Serializable, Cloneable, Comparable<HostingQuotationComb> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingQuotationComb");

  private static final org.apache.thrift.protocol.TField COMPOSE_GRAPH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("composeGraphId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMB_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("combItem", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LEG_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("legItems", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingQuotationCombStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingQuotationCombTupleSchemeFactory());
  }

  public long composeGraphId; // optional
  public xueqiao.quotation.QuotationItem combItem; // optional
  public List<xueqiao.quotation.QuotationItem> legItems; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPOSE_GRAPH_ID((short)1, "composeGraphId"),
    COMB_ITEM((short)2, "combItem"),
    LEG_ITEMS((short)3, "legItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPOSE_GRAPH_ID
          return COMPOSE_GRAPH_ID;
        case 2: // COMB_ITEM
          return COMB_ITEM;
        case 3: // LEG_ITEMS
          return LEG_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COMPOSEGRAPHID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COMPOSE_GRAPH_ID,_Fields.COMB_ITEM,_Fields.LEG_ITEMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPOSE_GRAPH_ID, new org.apache.thrift.meta_data.FieldMetaData("composeGraphId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMB_ITEM, new org.apache.thrift.meta_data.FieldMetaData("combItem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.QuotationItem.class)));
    tmpMap.put(_Fields.LEG_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("legItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.quotation.QuotationItem.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingQuotationComb.class, metaDataMap);
  }

  public HostingQuotationComb() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingQuotationComb(HostingQuotationComb other) {
    __isset_bitfield = other.__isset_bitfield;
    this.composeGraphId = other.composeGraphId;
    if (other.isSetCombItem()) {
      this.combItem = new xueqiao.quotation.QuotationItem(other.combItem);
    }
    if (other.isSetLegItems()) {
      List<xueqiao.quotation.QuotationItem> __this__legItems = new ArrayList<xueqiao.quotation.QuotationItem>(other.legItems.size());
      for (xueqiao.quotation.QuotationItem other_element : other.legItems) {
        __this__legItems.add(new xueqiao.quotation.QuotationItem(other_element));
      }
      this.legItems = __this__legItems;
    }
  }

  public HostingQuotationComb deepCopy() {
    return new HostingQuotationComb(this);
  }

  @Override
  public void clear() {
    setComposeGraphIdIsSet(false);
    this.composeGraphId = 0;
    this.combItem = null;
    this.legItems = null;
  }

  public long getComposeGraphId() {
    return this.composeGraphId;
  }

  public HostingQuotationComb setComposeGraphId(long composeGraphId) {
    this.composeGraphId = composeGraphId;
    setComposeGraphIdIsSet(true);
    return this;
  }

  public void unsetComposeGraphId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  /** Returns true if field composeGraphId is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeGraphId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID);
  }

  public void setComposeGraphIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPOSEGRAPHID_ISSET_ID, value);
  }

  public xueqiao.quotation.QuotationItem getCombItem() {
    return this.combItem;
  }

  public HostingQuotationComb setCombItem(xueqiao.quotation.QuotationItem combItem) {
    this.combItem = combItem;
    return this;
  }

  public void unsetCombItem() {
    this.combItem = null;
  }

  /** Returns true if field combItem is set (has been assigned a value) and false otherwise */
  public boolean isSetCombItem() {
    return this.combItem != null;
  }

  public void setCombItemIsSet(boolean value) {
    if (!value) {
      this.combItem = null;
    }
  }

  public int getLegItemsSize() {
    return (this.legItems == null) ? 0 : this.legItems.size();
  }

  public java.util.Iterator<xueqiao.quotation.QuotationItem> getLegItemsIterator() {
    return (this.legItems == null) ? null : this.legItems.iterator();
  }

  public void addToLegItems(xueqiao.quotation.QuotationItem elem) {
    if (this.legItems == null) {
      this.legItems = new ArrayList<xueqiao.quotation.QuotationItem>();
    }
    this.legItems.add(elem);
  }

  public List<xueqiao.quotation.QuotationItem> getLegItems() {
    return this.legItems;
  }

  public HostingQuotationComb setLegItems(List<xueqiao.quotation.QuotationItem> legItems) {
    this.legItems = legItems;
    return this;
  }

  public void unsetLegItems() {
    this.legItems = null;
  }

  /** Returns true if field legItems is set (has been assigned a value) and false otherwise */
  public boolean isSetLegItems() {
    return this.legItems != null;
  }

  public void setLegItemsIsSet(boolean value) {
    if (!value) {
      this.legItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPOSE_GRAPH_ID:
      if (value == null) {
        unsetComposeGraphId();
      } else {
        setComposeGraphId((Long)value);
      }
      break;

    case COMB_ITEM:
      if (value == null) {
        unsetCombItem();
      } else {
        setCombItem((xueqiao.quotation.QuotationItem)value);
      }
      break;

    case LEG_ITEMS:
      if (value == null) {
        unsetLegItems();
      } else {
        setLegItems((List<xueqiao.quotation.QuotationItem>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPOSE_GRAPH_ID:
      return Long.valueOf(getComposeGraphId());

    case COMB_ITEM:
      return getCombItem();

    case LEG_ITEMS:
      return getLegItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPOSE_GRAPH_ID:
      return isSetComposeGraphId();
    case COMB_ITEM:
      return isSetCombItem();
    case LEG_ITEMS:
      return isSetLegItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingQuotationComb)
      return this.equals((HostingQuotationComb)that);
    return false;
  }

  public boolean equals(HostingQuotationComb that) {
    if (that == null)
      return false;

    boolean this_present_composeGraphId = true && this.isSetComposeGraphId();
    boolean that_present_composeGraphId = true && that.isSetComposeGraphId();
    if (this_present_composeGraphId || that_present_composeGraphId) {
      if (!(this_present_composeGraphId && that_present_composeGraphId))
        return false;
      if (this.composeGraphId != that.composeGraphId)
        return false;
    }

    boolean this_present_combItem = true && this.isSetCombItem();
    boolean that_present_combItem = true && that.isSetCombItem();
    if (this_present_combItem || that_present_combItem) {
      if (!(this_present_combItem && that_present_combItem))
        return false;
      if (!this.combItem.equals(that.combItem))
        return false;
    }

    boolean this_present_legItems = true && this.isSetLegItems();
    boolean that_present_legItems = true && that.isSetLegItems();
    if (this_present_legItems || that_present_legItems) {
      if (!(this_present_legItems && that_present_legItems))
        return false;
      if (!this.legItems.equals(that.legItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingQuotationComb other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetComposeGraphId()).compareTo(other.isSetComposeGraphId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeGraphId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeGraphId, other.composeGraphId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCombItem()).compareTo(other.isSetCombItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCombItem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.combItem, other.combItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegItems()).compareTo(other.isSetLegItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legItems, other.legItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingQuotationComb(");
    boolean first = true;

    if (isSetComposeGraphId()) {
      sb.append("composeGraphId:");
      sb.append(this.composeGraphId);
      first = false;
    }
    if (isSetCombItem()) {
      if (!first) sb.append(", ");
      sb.append("combItem:");
      if (this.combItem == null) {
        sb.append("null");
      } else {
        sb.append(this.combItem);
      }
      first = false;
    }
    if (isSetLegItems()) {
      if (!first) sb.append(", ");
      sb.append("legItems:");
      if (this.legItems == null) {
        sb.append("null");
      } else {
        sb.append(this.legItems);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (combItem != null) {
      combItem.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingQuotationCombStandardSchemeFactory implements SchemeFactory {
    public HostingQuotationCombStandardScheme getScheme() {
      return new HostingQuotationCombStandardScheme();
    }
  }

  private static class HostingQuotationCombStandardScheme extends StandardScheme<HostingQuotationComb> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingQuotationComb struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPOSE_GRAPH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.composeGraphId = iprot.readI64();
              struct.setComposeGraphIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMB_ITEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.combItem = new xueqiao.quotation.QuotationItem();
              struct.combItem.read(iprot);
              struct.setCombItemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LEG_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.legItems = new ArrayList<xueqiao.quotation.QuotationItem>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  xueqiao.quotation.QuotationItem _elem2;
                  _elem2 = new xueqiao.quotation.QuotationItem();
                  _elem2.read(iprot);
                  struct.legItems.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setLegItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingQuotationComb struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetComposeGraphId()) {
        oprot.writeFieldBegin(COMPOSE_GRAPH_ID_FIELD_DESC);
        oprot.writeI64(struct.composeGraphId);
        oprot.writeFieldEnd();
      }
      if (struct.combItem != null) {
        if (struct.isSetCombItem()) {
          oprot.writeFieldBegin(COMB_ITEM_FIELD_DESC);
          struct.combItem.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.legItems != null) {
        if (struct.isSetLegItems()) {
          oprot.writeFieldBegin(LEG_ITEMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.legItems.size()));
            for (xueqiao.quotation.QuotationItem _iter3 : struct.legItems)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingQuotationCombTupleSchemeFactory implements SchemeFactory {
    public HostingQuotationCombTupleScheme getScheme() {
      return new HostingQuotationCombTupleScheme();
    }
  }

  private static class HostingQuotationCombTupleScheme extends TupleScheme<HostingQuotationComb> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingQuotationComb struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetComposeGraphId()) {
        optionals.set(0);
      }
      if (struct.isSetCombItem()) {
        optionals.set(1);
      }
      if (struct.isSetLegItems()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetComposeGraphId()) {
        oprot.writeI64(struct.composeGraphId);
      }
      if (struct.isSetCombItem()) {
        struct.combItem.write(oprot);
      }
      if (struct.isSetLegItems()) {
        {
          oprot.writeI32(struct.legItems.size());
          for (xueqiao.quotation.QuotationItem _iter4 : struct.legItems)
          {
            _iter4.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingQuotationComb struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.composeGraphId = iprot.readI64();
        struct.setComposeGraphIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.combItem = new xueqiao.quotation.QuotationItem();
        struct.combItem.read(iprot);
        struct.setCombItemIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.legItems = new ArrayList<xueqiao.quotation.QuotationItem>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            xueqiao.quotation.QuotationItem _elem7;
            _elem7 = new xueqiao.quotation.QuotationItem();
            _elem7.read(iprot);
            struct.legItems.add(_elem7);
          }
        }
        struct.setLegItemsIsSet(true);
      }
    }
  }

}

