#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class HostingSledContractPosition:
  """
  Attributes:
   - sledContractId
   - prevPosition
   - longPosition
   - shortPosition
   - netPosition
   - positionAvgPrice
   - closeProfit
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.I64, 'prevPosition', None, None, ), # 2
    (3, TType.I64, 'longPosition', None, None, ), # 3
    (4, TType.I64, 'shortPosition', None, None, ), # 4
    (5, TType.I64, 'netPosition', None, None, ), # 5
    (6, TType.DOUBLE, 'positionAvgPrice', None, None, ), # 6
    (7, TType.DOUBLE, 'closeProfit', None, None, ), # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, sledContractId=None, prevPosition=None, longPosition=None, shortPosition=None, netPosition=None, positionAvgPrice=None, closeProfit=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.sledContractId = sledContractId
    self.prevPosition = prevPosition
    self.longPosition = longPosition
    self.shortPosition = shortPosition
    self.netPosition = netPosition
    self.positionAvgPrice = positionAvgPrice
    self.closeProfit = closeProfit
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.prevPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.longPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.shortPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.netPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.positionAvgPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSledContractPosition')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.prevPosition is not None:
      oprot.writeFieldBegin('prevPosition', TType.I64, 2)
      oprot.writeI64(self.prevPosition)
      oprot.writeFieldEnd()
    if self.longPosition is not None:
      oprot.writeFieldBegin('longPosition', TType.I64, 3)
      oprot.writeI64(self.longPosition)
      oprot.writeFieldEnd()
    if self.shortPosition is not None:
      oprot.writeFieldBegin('shortPosition', TType.I64, 4)
      oprot.writeI64(self.shortPosition)
      oprot.writeFieldEnd()
    if self.netPosition is not None:
      oprot.writeFieldBegin('netPosition', TType.I64, 5)
      oprot.writeI64(self.netPosition)
      oprot.writeFieldEnd()
    if self.positionAvgPrice is not None:
      oprot.writeFieldBegin('positionAvgPrice', TType.DOUBLE, 6)
      oprot.writeDouble(self.positionAvgPrice)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 7)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
