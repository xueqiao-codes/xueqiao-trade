/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 子账号合约持仓结算明细
 */
public class SettlementPositionDetail implements org.apache.thrift.TBase<SettlementPositionDetail, SettlementPositionDetail._Fields>, java.io.Serializable, Cloneable, Comparable<SettlementPositionDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettlementPositionDetail");

  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("position", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_AVG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionAvgPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField CALCULATE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("calculatePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField PREV_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("prevPosition", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LONG_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("longPosition", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField SHORT_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("shortPosition", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField USE_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("useCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettlementPositionDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettlementPositionDetailTupleSchemeFactory());
  }

  public long settlementId; // optional
  public long sledContractId; // optional
  public long subAccountId; // optional
  public long position; // optional
  public double positionAvgPrice; // optional
  public double positionProfit; // optional
  public double calculatePrice; // optional
  public String currency; // optional
  public long sledCommodityId; // optional
  public long prevPosition; // optional
  public long longPosition; // optional
  public long shortPosition; // optional
  public double closeProfit; // optional
  public double goodsValue; // optional
  public double leverage; // optional
  public double useMargin; // optional
  public double useCommission; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTLEMENT_ID((short)1, "settlementId"),
    SLED_CONTRACT_ID((short)2, "sledContractId"),
    SUB_ACCOUNT_ID((short)3, "subAccountId"),
    POSITION((short)4, "position"),
    POSITION_AVG_PRICE((short)5, "positionAvgPrice"),
    POSITION_PROFIT((short)6, "positionProfit"),
    CALCULATE_PRICE((short)7, "calculatePrice"),
    CURRENCY((short)9, "currency"),
    SLED_COMMODITY_ID((short)11, "sledCommodityId"),
    PREV_POSITION((short)12, "prevPosition"),
    LONG_POSITION((short)13, "longPosition"),
    SHORT_POSITION((short)14, "shortPosition"),
    CLOSE_PROFIT((short)15, "closeProfit"),
    GOODS_VALUE((short)16, "goodsValue"),
    LEVERAGE((short)17, "leverage"),
    USE_MARGIN((short)18, "useMargin"),
    USE_COMMISSION((short)19, "useCommission"),
    CREATE_TIMESTAMP_MS((short)30, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)31, "lastmodifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 2: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 3: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 4: // POSITION
          return POSITION;
        case 5: // POSITION_AVG_PRICE
          return POSITION_AVG_PRICE;
        case 6: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 7: // CALCULATE_PRICE
          return CALCULATE_PRICE;
        case 9: // CURRENCY
          return CURRENCY;
        case 11: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 12: // PREV_POSITION
          return PREV_POSITION;
        case 13: // LONG_POSITION
          return LONG_POSITION;
        case 14: // SHORT_POSITION
          return SHORT_POSITION;
        case 15: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 16: // GOODS_VALUE
          return GOODS_VALUE;
        case 17: // LEVERAGE
          return LEVERAGE;
        case 18: // USE_MARGIN
          return USE_MARGIN;
        case 19: // USE_COMMISSION
          return USE_COMMISSION;
        case 30: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 31: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEMENTID_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private static final int __SUBACCOUNTID_ISSET_ID = 2;
  private static final int __POSITION_ISSET_ID = 3;
  private static final int __POSITIONAVGPRICE_ISSET_ID = 4;
  private static final int __POSITIONPROFIT_ISSET_ID = 5;
  private static final int __CALCULATEPRICE_ISSET_ID = 6;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 7;
  private static final int __PREVPOSITION_ISSET_ID = 8;
  private static final int __LONGPOSITION_ISSET_ID = 9;
  private static final int __SHORTPOSITION_ISSET_ID = 10;
  private static final int __CLOSEPROFIT_ISSET_ID = 11;
  private static final int __GOODSVALUE_ISSET_ID = 12;
  private static final int __LEVERAGE_ISSET_ID = 13;
  private static final int __USEMARGIN_ISSET_ID = 14;
  private static final int __USECOMMISSION_ISSET_ID = 15;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 16;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SETTLEMENT_ID,_Fields.SLED_CONTRACT_ID,_Fields.SUB_ACCOUNT_ID,_Fields.POSITION,_Fields.POSITION_AVG_PRICE,_Fields.POSITION_PROFIT,_Fields.CALCULATE_PRICE,_Fields.CURRENCY,_Fields.SLED_COMMODITY_ID,_Fields.PREV_POSITION,_Fields.LONG_POSITION,_Fields.SHORT_POSITION,_Fields.CLOSE_PROFIT,_Fields.GOODS_VALUE,_Fields.LEVERAGE,_Fields.USE_MARGIN,_Fields.USE_COMMISSION,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION, new org.apache.thrift.meta_data.FieldMetaData("position", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_AVG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("positionAvgPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CALCULATE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("calculatePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PREV_POSITION, new org.apache.thrift.meta_data.FieldMetaData("prevPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LONG_POSITION, new org.apache.thrift.meta_data.FieldMetaData("longPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SHORT_POSITION, new org.apache.thrift.meta_data.FieldMetaData("shortPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("useCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettlementPositionDetail.class, metaDataMap);
  }

  public SettlementPositionDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettlementPositionDetail(SettlementPositionDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.settlementId = other.settlementId;
    this.sledContractId = other.sledContractId;
    this.subAccountId = other.subAccountId;
    this.position = other.position;
    this.positionAvgPrice = other.positionAvgPrice;
    this.positionProfit = other.positionProfit;
    this.calculatePrice = other.calculatePrice;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.sledCommodityId = other.sledCommodityId;
    this.prevPosition = other.prevPosition;
    this.longPosition = other.longPosition;
    this.shortPosition = other.shortPosition;
    this.closeProfit = other.closeProfit;
    this.goodsValue = other.goodsValue;
    this.leverage = other.leverage;
    this.useMargin = other.useMargin;
    this.useCommission = other.useCommission;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
  }

  public SettlementPositionDetail deepCopy() {
    return new SettlementPositionDetail(this);
  }

  @Override
  public void clear() {
    setSettlementIdIsSet(false);
    this.settlementId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setPositionIsSet(false);
    this.position = 0;
    setPositionAvgPriceIsSet(false);
    this.positionAvgPrice = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCalculatePriceIsSet(false);
    this.calculatePrice = 0.0;
    this.currency = null;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setPrevPositionIsSet(false);
    this.prevPosition = 0;
    setLongPositionIsSet(false);
    this.longPosition = 0;
    setShortPositionIsSet(false);
    this.shortPosition = 0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setGoodsValueIsSet(false);
    this.goodsValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setUseCommissionIsSet(false);
    this.useCommission = 0.0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
  }

  public long getSettlementId() {
    return this.settlementId;
  }

  public SettlementPositionDetail setSettlementId(long settlementId) {
    this.settlementId = settlementId;
    setSettlementIdIsSet(true);
    return this;
  }

  public void unsetSettlementId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public SettlementPositionDetail setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public SettlementPositionDetail setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public long getPosition() {
    return this.position;
  }

  public SettlementPositionDetail setPosition(long position) {
    this.position = position;
    setPositionIsSet(true);
    return this;
  }

  public void unsetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  /** Returns true if field position is set (has been assigned a value) and false otherwise */
  public boolean isSetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITION_ISSET_ID);
  }

  public void setPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITION_ISSET_ID, value);
  }

  public double getPositionAvgPrice() {
    return this.positionAvgPrice;
  }

  public SettlementPositionDetail setPositionAvgPrice(double positionAvgPrice) {
    this.positionAvgPrice = positionAvgPrice;
    setPositionAvgPriceIsSet(true);
    return this;
  }

  public void unsetPositionAvgPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONAVGPRICE_ISSET_ID);
  }

  /** Returns true if field positionAvgPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionAvgPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONAVGPRICE_ISSET_ID);
  }

  public void setPositionAvgPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONAVGPRICE_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public SettlementPositionDetail setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCalculatePrice() {
    return this.calculatePrice;
  }

  public SettlementPositionDetail setCalculatePrice(double calculatePrice) {
    this.calculatePrice = calculatePrice;
    setCalculatePriceIsSet(true);
    return this;
  }

  public void unsetCalculatePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  /** Returns true if field calculatePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCalculatePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  public void setCalculatePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public SettlementPositionDetail setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public SettlementPositionDetail setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public long getPrevPosition() {
    return this.prevPosition;
  }

  public SettlementPositionDetail setPrevPosition(long prevPosition) {
    this.prevPosition = prevPosition;
    setPrevPositionIsSet(true);
    return this;
  }

  public void unsetPrevPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREVPOSITION_ISSET_ID);
  }

  /** Returns true if field prevPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetPrevPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __PREVPOSITION_ISSET_ID);
  }

  public void setPrevPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREVPOSITION_ISSET_ID, value);
  }

  public long getLongPosition() {
    return this.longPosition;
  }

  public SettlementPositionDetail setLongPosition(long longPosition) {
    this.longPosition = longPosition;
    setLongPositionIsSet(true);
    return this;
  }

  public void unsetLongPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LONGPOSITION_ISSET_ID);
  }

  /** Returns true if field longPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetLongPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __LONGPOSITION_ISSET_ID);
  }

  public void setLongPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LONGPOSITION_ISSET_ID, value);
  }

  public long getShortPosition() {
    return this.shortPosition;
  }

  public SettlementPositionDetail setShortPosition(long shortPosition) {
    this.shortPosition = shortPosition;
    setShortPositionIsSet(true);
    return this;
  }

  public void unsetShortPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SHORTPOSITION_ISSET_ID);
  }

  /** Returns true if field shortPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetShortPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __SHORTPOSITION_ISSET_ID);
  }

  public void setShortPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SHORTPOSITION_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public SettlementPositionDetail setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getGoodsValue() {
    return this.goodsValue;
  }

  public SettlementPositionDetail setGoodsValue(double goodsValue) {
    this.goodsValue = goodsValue;
    setGoodsValueIsSet(true);
    return this;
  }

  public void unsetGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  public void setGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public SettlementPositionDetail setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public SettlementPositionDetail setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getUseCommission() {
    return this.useCommission;
  }

  public SettlementPositionDetail setUseCommission(double useCommission) {
    this.useCommission = useCommission;
    setUseCommissionIsSet(true);
    return this;
  }

  public void unsetUseCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  /** Returns true if field useCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  public void setUseCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USECOMMISSION_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public SettlementPositionDetail setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public SettlementPositionDetail setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementId();
      } else {
        setSettlementId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case POSITION:
      if (value == null) {
        unsetPosition();
      } else {
        setPosition((Long)value);
      }
      break;

    case POSITION_AVG_PRICE:
      if (value == null) {
        unsetPositionAvgPrice();
      } else {
        setPositionAvgPrice((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case CALCULATE_PRICE:
      if (value == null) {
        unsetCalculatePrice();
      } else {
        setCalculatePrice((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case PREV_POSITION:
      if (value == null) {
        unsetPrevPosition();
      } else {
        setPrevPosition((Long)value);
      }
      break;

    case LONG_POSITION:
      if (value == null) {
        unsetLongPosition();
      } else {
        setLongPosition((Long)value);
      }
      break;

    case SHORT_POSITION:
      if (value == null) {
        unsetShortPosition();
      } else {
        setShortPosition((Long)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case USE_COMMISSION:
      if (value == null) {
        unsetUseCommission();
      } else {
        setUseCommission((Double)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTLEMENT_ID:
      return Long.valueOf(getSettlementId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case POSITION:
      return Long.valueOf(getPosition());

    case POSITION_AVG_PRICE:
      return Double.valueOf(getPositionAvgPrice());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case CALCULATE_PRICE:
      return Double.valueOf(getCalculatePrice());

    case CURRENCY:
      return getCurrency();

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case PREV_POSITION:
      return Long.valueOf(getPrevPosition());

    case LONG_POSITION:
      return Long.valueOf(getLongPosition());

    case SHORT_POSITION:
      return Long.valueOf(getShortPosition());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case GOODS_VALUE:
      return Double.valueOf(getGoodsValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case USE_COMMISSION:
      return Double.valueOf(getUseCommission());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTLEMENT_ID:
      return isSetSettlementId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case POSITION:
      return isSetPosition();
    case POSITION_AVG_PRICE:
      return isSetPositionAvgPrice();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case CALCULATE_PRICE:
      return isSetCalculatePrice();
    case CURRENCY:
      return isSetCurrency();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case PREV_POSITION:
      return isSetPrevPosition();
    case LONG_POSITION:
      return isSetLongPosition();
    case SHORT_POSITION:
      return isSetShortPosition();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case LEVERAGE:
      return isSetLeverage();
    case USE_MARGIN:
      return isSetUseMargin();
    case USE_COMMISSION:
      return isSetUseCommission();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettlementPositionDetail)
      return this.equals((SettlementPositionDetail)that);
    return false;
  }

  public boolean equals(SettlementPositionDetail that) {
    if (that == null)
      return false;

    boolean this_present_settlementId = true && this.isSetSettlementId();
    boolean that_present_settlementId = true && that.isSetSettlementId();
    if (this_present_settlementId || that_present_settlementId) {
      if (!(this_present_settlementId && that_present_settlementId))
        return false;
      if (this.settlementId != that.settlementId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_position = true && this.isSetPosition();
    boolean that_present_position = true && that.isSetPosition();
    if (this_present_position || that_present_position) {
      if (!(this_present_position && that_present_position))
        return false;
      if (this.position != that.position)
        return false;
    }

    boolean this_present_positionAvgPrice = true && this.isSetPositionAvgPrice();
    boolean that_present_positionAvgPrice = true && that.isSetPositionAvgPrice();
    if (this_present_positionAvgPrice || that_present_positionAvgPrice) {
      if (!(this_present_positionAvgPrice && that_present_positionAvgPrice))
        return false;
      if (this.positionAvgPrice != that.positionAvgPrice)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_calculatePrice = true && this.isSetCalculatePrice();
    boolean that_present_calculatePrice = true && that.isSetCalculatePrice();
    if (this_present_calculatePrice || that_present_calculatePrice) {
      if (!(this_present_calculatePrice && that_present_calculatePrice))
        return false;
      if (this.calculatePrice != that.calculatePrice)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_prevPosition = true && this.isSetPrevPosition();
    boolean that_present_prevPosition = true && that.isSetPrevPosition();
    if (this_present_prevPosition || that_present_prevPosition) {
      if (!(this_present_prevPosition && that_present_prevPosition))
        return false;
      if (this.prevPosition != that.prevPosition)
        return false;
    }

    boolean this_present_longPosition = true && this.isSetLongPosition();
    boolean that_present_longPosition = true && that.isSetLongPosition();
    if (this_present_longPosition || that_present_longPosition) {
      if (!(this_present_longPosition && that_present_longPosition))
        return false;
      if (this.longPosition != that.longPosition)
        return false;
    }

    boolean this_present_shortPosition = true && this.isSetShortPosition();
    boolean that_present_shortPosition = true && that.isSetShortPosition();
    if (this_present_shortPosition || that_present_shortPosition) {
      if (!(this_present_shortPosition && that_present_shortPosition))
        return false;
      if (this.shortPosition != that.shortPosition)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (this.goodsValue != that.goodsValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_useCommission = true && this.isSetUseCommission();
    boolean that_present_useCommission = true && that.isSetUseCommission();
    if (this_present_useCommission || that_present_useCommission) {
      if (!(this_present_useCommission && that_present_useCommission))
        return false;
      if (this.useCommission != that.useCommission)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SettlementPositionDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSettlementId()).compareTo(other.isSetSettlementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementId, other.settlementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosition()).compareTo(other.isSetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.position, other.position);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionAvgPrice()).compareTo(other.isSetPositionAvgPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionAvgPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionAvgPrice, other.positionAvgPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCalculatePrice()).compareTo(other.isSetCalculatePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalculatePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calculatePrice, other.calculatePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrevPosition()).compareTo(other.isSetPrevPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrevPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevPosition, other.prevPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLongPosition()).compareTo(other.isSetLongPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLongPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longPosition, other.longPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShortPosition()).compareTo(other.isSetShortPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShortPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shortPosition, other.shortPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseCommission()).compareTo(other.isSetUseCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCommission, other.useCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettlementPositionDetail(");
    boolean first = true;

    if (isSetSettlementId()) {
      sb.append("settlementId:");
      sb.append(this.settlementId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetPosition()) {
      if (!first) sb.append(", ");
      sb.append("position:");
      sb.append(this.position);
      first = false;
    }
    if (isSetPositionAvgPrice()) {
      if (!first) sb.append(", ");
      sb.append("positionAvgPrice:");
      sb.append(this.positionAvgPrice);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetCalculatePrice()) {
      if (!first) sb.append(", ");
      sb.append("calculatePrice:");
      sb.append(this.calculatePrice);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetPrevPosition()) {
      if (!first) sb.append(", ");
      sb.append("prevPosition:");
      sb.append(this.prevPosition);
      first = false;
    }
    if (isSetLongPosition()) {
      if (!first) sb.append(", ");
      sb.append("longPosition:");
      sb.append(this.longPosition);
      first = false;
    }
    if (isSetShortPosition()) {
      if (!first) sb.append(", ");
      sb.append("shortPosition:");
      sb.append(this.shortPosition);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetGoodsValue()) {
      if (!first) sb.append(", ");
      sb.append("goodsValue:");
      sb.append(this.goodsValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetUseCommission()) {
      if (!first) sb.append(", ");
      sb.append("useCommission:");
      sb.append(this.useCommission);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettlementPositionDetailStandardSchemeFactory implements SchemeFactory {
    public SettlementPositionDetailStandardScheme getScheme() {
      return new SettlementPositionDetailStandardScheme();
    }
  }

  private static class SettlementPositionDetailStandardScheme extends StandardScheme<SettlementPositionDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettlementPositionDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settlementId = iprot.readI64();
              struct.setSettlementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.position = iprot.readI64();
              struct.setPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_AVG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionAvgPrice = iprot.readDouble();
              struct.setPositionAvgPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CALCULATE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.calculatePrice = iprot.readDouble();
              struct.setCalculatePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // PREV_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.prevPosition = iprot.readI64();
              struct.setPrevPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LONG_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.longPosition = iprot.readI64();
              struct.setLongPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHORT_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.shortPosition = iprot.readI64();
              struct.setShortPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goodsValue = iprot.readDouble();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USE_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useCommission = iprot.readDouble();
              struct.setUseCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettlementPositionDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSettlementId()) {
        oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.settlementId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPosition()) {
        oprot.writeFieldBegin(POSITION_FIELD_DESC);
        oprot.writeI64(struct.position);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionAvgPrice()) {
        oprot.writeFieldBegin(POSITION_AVG_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.positionAvgPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeFieldBegin(CALCULATE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.calculatePrice);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrevPosition()) {
        oprot.writeFieldBegin(PREV_POSITION_FIELD_DESC);
        oprot.writeI64(struct.prevPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLongPosition()) {
        oprot.writeFieldBegin(LONG_POSITION_FIELD_DESC);
        oprot.writeI64(struct.longPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetShortPosition()) {
        oprot.writeFieldBegin(SHORT_POSITION_FIELD_DESC);
        oprot.writeI64(struct.shortPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseCommission()) {
        oprot.writeFieldBegin(USE_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.useCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettlementPositionDetailTupleSchemeFactory implements SchemeFactory {
    public SettlementPositionDetailTupleScheme getScheme() {
      return new SettlementPositionDetailTupleScheme();
    }
  }

  private static class SettlementPositionDetailTupleScheme extends TupleScheme<SettlementPositionDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettlementPositionDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSettlementId()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(1);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(2);
      }
      if (struct.isSetPosition()) {
        optionals.set(3);
      }
      if (struct.isSetPositionAvgPrice()) {
        optionals.set(4);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(5);
      }
      if (struct.isSetCalculatePrice()) {
        optionals.set(6);
      }
      if (struct.isSetCurrency()) {
        optionals.set(7);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(8);
      }
      if (struct.isSetPrevPosition()) {
        optionals.set(9);
      }
      if (struct.isSetLongPosition()) {
        optionals.set(10);
      }
      if (struct.isSetShortPosition()) {
        optionals.set(11);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(12);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(13);
      }
      if (struct.isSetLeverage()) {
        optionals.set(14);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(15);
      }
      if (struct.isSetUseCommission()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(17);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetSettlementId()) {
        oprot.writeI64(struct.settlementId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetPosition()) {
        oprot.writeI64(struct.position);
      }
      if (struct.isSetPositionAvgPrice()) {
        oprot.writeDouble(struct.positionAvgPrice);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeDouble(struct.calculatePrice);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetPrevPosition()) {
        oprot.writeI64(struct.prevPosition);
      }
      if (struct.isSetLongPosition()) {
        oprot.writeI64(struct.longPosition);
      }
      if (struct.isSetShortPosition()) {
        oprot.writeI64(struct.shortPosition);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeDouble(struct.goodsValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetUseCommission()) {
        oprot.writeDouble(struct.useCommission);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettlementPositionDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.settlementId = iprot.readI64();
        struct.setSettlementIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.position = iprot.readI64();
        struct.setPositionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionAvgPrice = iprot.readDouble();
        struct.setPositionAvgPriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.calculatePrice = iprot.readDouble();
        struct.setCalculatePriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.prevPosition = iprot.readI64();
        struct.setPrevPositionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.longPosition = iprot.readI64();
        struct.setLongPositionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.shortPosition = iprot.readI64();
        struct.setShortPositionIsSet(true);
      }
      if (incoming.get(12)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.goodsValue = iprot.readDouble();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(14)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
      if (incoming.get(15)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(16)) {
        struct.useCommission = iprot.readDouble();
        struct.setUseCommissionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
    }
  }

}

