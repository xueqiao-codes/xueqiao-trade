/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqSettlementFundDetailOption implements org.apache.thrift.TBase<ReqSettlementFundDetailOption, ReqSettlementFundDetailOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqSettlementFundDetailOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqSettlementFundDetailOption");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BEGIN_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTimestampMs", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField END_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqSettlementFundDetailOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqSettlementFundDetailOptionTupleSchemeFactory());
  }

  public Set<Long> subAccountIds; // optional
  public String currency; // optional
  public long beginTimestampMs; // optional
  public long endTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_IDS((short)1, "subAccountIds"),
    CURRENCY((short)2, "currency"),
    BEGIN_TIMESTAMP_MS((short)3, "beginTimestampMs"),
    END_TIMESTAMP_MS((short)4, "endTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_IDS
          return SUB_ACCOUNT_IDS;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // BEGIN_TIMESTAMP_MS
          return BEGIN_TIMESTAMP_MS;
        case 4: // END_TIMESTAMP_MS
          return END_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGINTIMESTAMPMS_ISSET_ID = 0;
  private static final int __ENDTIMESTAMPMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_IDS,_Fields.CURRENCY,_Fields.BEGIN_TIMESTAMP_MS,_Fields.END_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_IDS, new org.apache.thrift.meta_data.FieldMetaData("subAccountIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("beginTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("endTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqSettlementFundDetailOption.class, metaDataMap);
  }

  public ReqSettlementFundDetailOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqSettlementFundDetailOption(ReqSettlementFundDetailOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubAccountIds()) {
      Set<Long> __this__subAccountIds = new HashSet<Long>(other.subAccountIds);
      this.subAccountIds = __this__subAccountIds;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.beginTimestampMs = other.beginTimestampMs;
    this.endTimestampMs = other.endTimestampMs;
  }

  public ReqSettlementFundDetailOption deepCopy() {
    return new ReqSettlementFundDetailOption(this);
  }

  @Override
  public void clear() {
    this.subAccountIds = null;
    this.currency = null;
    setBeginTimestampMsIsSet(false);
    this.beginTimestampMs = 0;
    setEndTimestampMsIsSet(false);
    this.endTimestampMs = 0;
  }

  public int getSubAccountIdsSize() {
    return (this.subAccountIds == null) ? 0 : this.subAccountIds.size();
  }

  public java.util.Iterator<Long> getSubAccountIdsIterator() {
    return (this.subAccountIds == null) ? null : this.subAccountIds.iterator();
  }

  public void addToSubAccountIds(long elem) {
    if (this.subAccountIds == null) {
      this.subAccountIds = new HashSet<Long>();
    }
    this.subAccountIds.add(elem);
  }

  public Set<Long> getSubAccountIds() {
    return this.subAccountIds;
  }

  public ReqSettlementFundDetailOption setSubAccountIds(Set<Long> subAccountIds) {
    this.subAccountIds = subAccountIds;
    return this;
  }

  public void unsetSubAccountIds() {
    this.subAccountIds = null;
  }

  /** Returns true if field subAccountIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountIds() {
    return this.subAccountIds != null;
  }

  public void setSubAccountIdsIsSet(boolean value) {
    if (!value) {
      this.subAccountIds = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public ReqSettlementFundDetailOption setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getBeginTimestampMs() {
    return this.beginTimestampMs;
  }

  public ReqSettlementFundDetailOption setBeginTimestampMs(long beginTimestampMs) {
    this.beginTimestampMs = beginTimestampMs;
    setBeginTimestampMsIsSet(true);
    return this;
  }

  public void unsetBeginTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BEGINTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field beginTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __BEGINTIMESTAMPMS_ISSET_ID);
  }

  public void setBeginTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BEGINTIMESTAMPMS_ISSET_ID, value);
  }

  public long getEndTimestampMs() {
    return this.endTimestampMs;
  }

  public ReqSettlementFundDetailOption setEndTimestampMs(long endTimestampMs) {
    this.endTimestampMs = endTimestampMs;
    setEndTimestampMsIsSet(true);
    return this;
  }

  public void unsetEndTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field endTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMESTAMPMS_ISSET_ID);
  }

  public void setEndTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_IDS:
      if (value == null) {
        unsetSubAccountIds();
      } else {
        setSubAccountIds((Set<Long>)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case BEGIN_TIMESTAMP_MS:
      if (value == null) {
        unsetBeginTimestampMs();
      } else {
        setBeginTimestampMs((Long)value);
      }
      break;

    case END_TIMESTAMP_MS:
      if (value == null) {
        unsetEndTimestampMs();
      } else {
        setEndTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_IDS:
      return getSubAccountIds();

    case CURRENCY:
      return getCurrency();

    case BEGIN_TIMESTAMP_MS:
      return Long.valueOf(getBeginTimestampMs());

    case END_TIMESTAMP_MS:
      return Long.valueOf(getEndTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_IDS:
      return isSetSubAccountIds();
    case CURRENCY:
      return isSetCurrency();
    case BEGIN_TIMESTAMP_MS:
      return isSetBeginTimestampMs();
    case END_TIMESTAMP_MS:
      return isSetEndTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqSettlementFundDetailOption)
      return this.equals((ReqSettlementFundDetailOption)that);
    return false;
  }

  public boolean equals(ReqSettlementFundDetailOption that) {
    if (that == null)
      return false;

    boolean this_present_subAccountIds = true && this.isSetSubAccountIds();
    boolean that_present_subAccountIds = true && that.isSetSubAccountIds();
    if (this_present_subAccountIds || that_present_subAccountIds) {
      if (!(this_present_subAccountIds && that_present_subAccountIds))
        return false;
      if (!this.subAccountIds.equals(that.subAccountIds))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_beginTimestampMs = true && this.isSetBeginTimestampMs();
    boolean that_present_beginTimestampMs = true && that.isSetBeginTimestampMs();
    if (this_present_beginTimestampMs || that_present_beginTimestampMs) {
      if (!(this_present_beginTimestampMs && that_present_beginTimestampMs))
        return false;
      if (this.beginTimestampMs != that.beginTimestampMs)
        return false;
    }

    boolean this_present_endTimestampMs = true && this.isSetEndTimestampMs();
    boolean that_present_endTimestampMs = true && that.isSetEndTimestampMs();
    if (this_present_endTimestampMs || that_present_endTimestampMs) {
      if (!(this_present_endTimestampMs && that_present_endTimestampMs))
        return false;
      if (this.endTimestampMs != that.endTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqSettlementFundDetailOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountIds()).compareTo(other.isSetSubAccountIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountIds, other.subAccountIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBeginTimestampMs()).compareTo(other.isSetBeginTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTimestampMs, other.beginTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimestampMs()).compareTo(other.isSetEndTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestampMs, other.endTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqSettlementFundDetailOption(");
    boolean first = true;

    if (isSetSubAccountIds()) {
      sb.append("subAccountIds:");
      if (this.subAccountIds == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountIds);
      }
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetBeginTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("beginTimestampMs:");
      sb.append(this.beginTimestampMs);
      first = false;
    }
    if (isSetEndTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("endTimestampMs:");
      sb.append(this.endTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqSettlementFundDetailOptionStandardSchemeFactory implements SchemeFactory {
    public ReqSettlementFundDetailOptionStandardScheme getScheme() {
      return new ReqSettlementFundDetailOptionStandardScheme();
    }
  }

  private static class ReqSettlementFundDetailOptionStandardScheme extends StandardScheme<ReqSettlementFundDetailOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqSettlementFundDetailOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set104 = iprot.readSetBegin();
                struct.subAccountIds = new HashSet<Long>(2*_set104.size);
                for (int _i105 = 0; _i105 < _set104.size; ++_i105)
                {
                  long _elem106;
                  _elem106 = iprot.readI64();
                  struct.subAccountIds.add(_elem106);
                }
                iprot.readSetEnd();
              }
              struct.setSubAccountIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BEGIN_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTimestampMs = iprot.readI64();
              struct.setBeginTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // END_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimestampMs = iprot.readI64();
              struct.setEndTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqSettlementFundDetailOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subAccountIds != null) {
        if (struct.isSetSubAccountIds()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.subAccountIds.size()));
            for (long _iter107 : struct.subAccountIds)
            {
              oprot.writeI64(_iter107);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBeginTimestampMs()) {
        oprot.writeFieldBegin(BEGIN_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.beginTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTimestampMs()) {
        oprot.writeFieldBegin(END_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.endTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqSettlementFundDetailOptionTupleSchemeFactory implements SchemeFactory {
    public ReqSettlementFundDetailOptionTupleScheme getScheme() {
      return new ReqSettlementFundDetailOptionTupleScheme();
    }
  }

  private static class ReqSettlementFundDetailOptionTupleScheme extends TupleScheme<ReqSettlementFundDetailOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqSettlementFundDetailOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountIds()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetBeginTimestampMs()) {
        optionals.set(2);
      }
      if (struct.isSetEndTimestampMs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetSubAccountIds()) {
        {
          oprot.writeI32(struct.subAccountIds.size());
          for (long _iter108 : struct.subAccountIds)
          {
            oprot.writeI64(_iter108);
          }
        }
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetBeginTimestampMs()) {
        oprot.writeI64(struct.beginTimestampMs);
      }
      if (struct.isSetEndTimestampMs()) {
        oprot.writeI64(struct.endTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqSettlementFundDetailOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set109 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.subAccountIds = new HashSet<Long>(2*_set109.size);
          for (int _i110 = 0; _i110 < _set109.size; ++_i110)
          {
            long _elem111;
            _elem111 = iprot.readI64();
            struct.subAccountIds.add(_elem111);
          }
        }
        struct.setSubAccountIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.beginTimestampMs = iprot.readI64();
        struct.setBeginTimestampMsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTimestampMs = iprot.readI64();
        struct.setEndTimestampMsIsSet(true);
      }
    }
  }

}

