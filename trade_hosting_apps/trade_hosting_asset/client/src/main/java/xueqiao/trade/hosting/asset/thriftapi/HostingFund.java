/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 子账号实时某一时刻的资金
 */
public class HostingFund implements org.apache.thrift.TBase<HostingFund, HostingFund._Fields>, java.io.Serializable, Cloneable, Comparable<HostingFund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingFund");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PRE_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("preFund", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DEPOSIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("depositAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField WITHDRAW_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField USE_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("useCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("availableFund", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField DYNAMIC_BENEFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicBenefit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField RISK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskRate", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CREDIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("creditAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)22);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingFundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingFundTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public double preFund; // optional
  public double depositAmount; // optional
  public double withdrawAmount; // optional
  public double closeProfit; // optional
  public double positionProfit; // optional
  public double useMargin; // optional
  public double frozenMargin; // optional
  public double useCommission; // optional
  public double frozenCommission; // optional
  public double availableFund; // optional
  public double dynamicBenefit; // optional
  public double riskRate; // optional
  public String currency; // optional
  public double creditAmount; // optional
  public double goodsValue; // optional
  public double leverage; // optional
  public long createTimestampMs; // optional
  public long lastModifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    PRE_FUND((short)2, "preFund"),
    DEPOSIT_AMOUNT((short)3, "depositAmount"),
    WITHDRAW_AMOUNT((short)4, "withdrawAmount"),
    CLOSE_PROFIT((short)5, "closeProfit"),
    POSITION_PROFIT((short)6, "positionProfit"),
    USE_MARGIN((short)7, "useMargin"),
    FROZEN_MARGIN((short)8, "frozenMargin"),
    USE_COMMISSION((short)9, "useCommission"),
    FROZEN_COMMISSION((short)10, "frozenCommission"),
    AVAILABLE_FUND((short)11, "availableFund"),
    DYNAMIC_BENEFIT((short)12, "dynamicBenefit"),
    RISK_RATE((short)13, "riskRate"),
    CURRENCY((short)14, "currency"),
    CREDIT_AMOUNT((short)15, "creditAmount"),
    GOODS_VALUE((short)16, "goodsValue"),
    LEVERAGE((short)17, "leverage"),
    CREATE_TIMESTAMP_MS((short)21, "createTimestampMs"),
    LAST_MODIFY_TIMESTAMP_MS((short)22, "lastModifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // PRE_FUND
          return PRE_FUND;
        case 3: // DEPOSIT_AMOUNT
          return DEPOSIT_AMOUNT;
        case 4: // WITHDRAW_AMOUNT
          return WITHDRAW_AMOUNT;
        case 5: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 6: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 7: // USE_MARGIN
          return USE_MARGIN;
        case 8: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 9: // USE_COMMISSION
          return USE_COMMISSION;
        case 10: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 11: // AVAILABLE_FUND
          return AVAILABLE_FUND;
        case 12: // DYNAMIC_BENEFIT
          return DYNAMIC_BENEFIT;
        case 13: // RISK_RATE
          return RISK_RATE;
        case 14: // CURRENCY
          return CURRENCY;
        case 15: // CREDIT_AMOUNT
          return CREDIT_AMOUNT;
        case 16: // GOODS_VALUE
          return GOODS_VALUE;
        case 17: // LEVERAGE
          return LEVERAGE;
        case 21: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 22: // LAST_MODIFY_TIMESTAMP_MS
          return LAST_MODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __PREFUND_ISSET_ID = 1;
  private static final int __DEPOSITAMOUNT_ISSET_ID = 2;
  private static final int __WITHDRAWAMOUNT_ISSET_ID = 3;
  private static final int __CLOSEPROFIT_ISSET_ID = 4;
  private static final int __POSITIONPROFIT_ISSET_ID = 5;
  private static final int __USEMARGIN_ISSET_ID = 6;
  private static final int __FROZENMARGIN_ISSET_ID = 7;
  private static final int __USECOMMISSION_ISSET_ID = 8;
  private static final int __FROZENCOMMISSION_ISSET_ID = 9;
  private static final int __AVAILABLEFUND_ISSET_ID = 10;
  private static final int __DYNAMICBENEFIT_ISSET_ID = 11;
  private static final int __RISKRATE_ISSET_ID = 12;
  private static final int __CREDITAMOUNT_ISSET_ID = 13;
  private static final int __GOODSVALUE_ISSET_ID = 14;
  private static final int __LEVERAGE_ISSET_ID = 15;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 16;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 17;
  private int __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.PRE_FUND,_Fields.DEPOSIT_AMOUNT,_Fields.WITHDRAW_AMOUNT,_Fields.CLOSE_PROFIT,_Fields.POSITION_PROFIT,_Fields.USE_MARGIN,_Fields.FROZEN_MARGIN,_Fields.USE_COMMISSION,_Fields.FROZEN_COMMISSION,_Fields.AVAILABLE_FUND,_Fields.DYNAMIC_BENEFIT,_Fields.RISK_RATE,_Fields.CURRENCY,_Fields.CREDIT_AMOUNT,_Fields.GOODS_VALUE,_Fields.LEVERAGE,_Fields.CREATE_TIMESTAMP_MS,_Fields.LAST_MODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRE_FUND, new org.apache.thrift.meta_data.FieldMetaData("preFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("depositAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("withdrawAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("useCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE_FUND, new org.apache.thrift.meta_data.FieldMetaData("availableFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DYNAMIC_BENEFIT, new org.apache.thrift.meta_data.FieldMetaData("dynamicBenefit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISK_RATE, new org.apache.thrift.meta_data.FieldMetaData("riskRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("creditAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingFund.class, metaDataMap);
  }

  public HostingFund() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingFund(HostingFund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    this.preFund = other.preFund;
    this.depositAmount = other.depositAmount;
    this.withdrawAmount = other.withdrawAmount;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.useMargin = other.useMargin;
    this.frozenMargin = other.frozenMargin;
    this.useCommission = other.useCommission;
    this.frozenCommission = other.frozenCommission;
    this.availableFund = other.availableFund;
    this.dynamicBenefit = other.dynamicBenefit;
    this.riskRate = other.riskRate;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.creditAmount = other.creditAmount;
    this.goodsValue = other.goodsValue;
    this.leverage = other.leverage;
    this.createTimestampMs = other.createTimestampMs;
    this.lastModifyTimestampMs = other.lastModifyTimestampMs;
  }

  public HostingFund deepCopy() {
    return new HostingFund(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setPreFundIsSet(false);
    this.preFund = 0.0;
    setDepositAmountIsSet(false);
    this.depositAmount = 0.0;
    setWithdrawAmountIsSet(false);
    this.withdrawAmount = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setUseCommissionIsSet(false);
    this.useCommission = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    setAvailableFundIsSet(false);
    this.availableFund = 0.0;
    setDynamicBenefitIsSet(false);
    this.dynamicBenefit = 0.0;
    setRiskRateIsSet(false);
    this.riskRate = 0.0;
    this.currency = null;
    setCreditAmountIsSet(false);
    this.creditAmount = 0.0;
    setGoodsValueIsSet(false);
    this.goodsValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastModifyTimestampMsIsSet(false);
    this.lastModifyTimestampMs = 0;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingFund setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public double getPreFund() {
    return this.preFund;
  }

  public HostingFund setPreFund(double preFund) {
    this.preFund = preFund;
    setPreFundIsSet(true);
    return this;
  }

  public void unsetPreFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREFUND_ISSET_ID);
  }

  /** Returns true if field preFund is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFund() {
    return EncodingUtils.testBit(__isset_bitfield, __PREFUND_ISSET_ID);
  }

  public void setPreFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREFUND_ISSET_ID, value);
  }

  public double getDepositAmount() {
    return this.depositAmount;
  }

  public HostingFund setDepositAmount(double depositAmount) {
    this.depositAmount = depositAmount;
    setDepositAmountIsSet(true);
    return this;
  }

  public void unsetDepositAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID);
  }

  /** Returns true if field depositAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID);
  }

  public void setDepositAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID, value);
  }

  public double getWithdrawAmount() {
    return this.withdrawAmount;
  }

  public HostingFund setWithdrawAmount(double withdrawAmount) {
    this.withdrawAmount = withdrawAmount;
    setWithdrawAmountIsSet(true);
    return this;
  }

  public void unsetWithdrawAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  /** Returns true if field withdrawAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  public void setWithdrawAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public HostingFund setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public HostingFund setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public HostingFund setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public HostingFund setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getUseCommission() {
    return this.useCommission;
  }

  public HostingFund setUseCommission(double useCommission) {
    this.useCommission = useCommission;
    setUseCommissionIsSet(true);
    return this;
  }

  public void unsetUseCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  /** Returns true if field useCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  public void setUseCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USECOMMISSION_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public HostingFund setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public double getAvailableFund() {
    return this.availableFund;
  }

  public HostingFund setAvailableFund(double availableFund) {
    this.availableFund = availableFund;
    setAvailableFundIsSet(true);
    return this;
  }

  public void unsetAvailableFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID);
  }

  /** Returns true if field availableFund is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailableFund() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID);
  }

  public void setAvailableFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLEFUND_ISSET_ID, value);
  }

  public double getDynamicBenefit() {
    return this.dynamicBenefit;
  }

  public HostingFund setDynamicBenefit(double dynamicBenefit) {
    this.dynamicBenefit = dynamicBenefit;
    setDynamicBenefitIsSet(true);
    return this;
  }

  public void unsetDynamicBenefit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  /** Returns true if field dynamicBenefit is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicBenefit() {
    return EncodingUtils.testBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  public void setDynamicBenefitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID, value);
  }

  public double getRiskRate() {
    return this.riskRate;
  }

  public HostingFund setRiskRate(double riskRate) {
    this.riskRate = riskRate;
    setRiskRateIsSet(true);
    return this;
  }

  public void unsetRiskRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  /** Returns true if field riskRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  public void setRiskRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKRATE_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public HostingFund setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getCreditAmount() {
    return this.creditAmount;
  }

  public HostingFund setCreditAmount(double creditAmount) {
    this.creditAmount = creditAmount;
    setCreditAmountIsSet(true);
    return this;
  }

  public void unsetCreditAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDITAMOUNT_ISSET_ID);
  }

  /** Returns true if field creditAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetCreditAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDITAMOUNT_ISSET_ID);
  }

  public void setCreditAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDITAMOUNT_ISSET_ID, value);
  }

  public double getGoodsValue() {
    return this.goodsValue;
  }

  public HostingFund setGoodsValue(double goodsValue) {
    this.goodsValue = goodsValue;
    setGoodsValueIsSet(true);
    return this;
  }

  public void unsetGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  public void setGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public HostingFund setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingFund setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastModifyTimestampMs() {
    return this.lastModifyTimestampMs;
  }

  public HostingFund setLastModifyTimestampMs(long lastModifyTimestampMs) {
    this.lastModifyTimestampMs = lastModifyTimestampMs;
    setLastModifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastModifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case PRE_FUND:
      if (value == null) {
        unsetPreFund();
      } else {
        setPreFund((Double)value);
      }
      break;

    case DEPOSIT_AMOUNT:
      if (value == null) {
        unsetDepositAmount();
      } else {
        setDepositAmount((Double)value);
      }
      break;

    case WITHDRAW_AMOUNT:
      if (value == null) {
        unsetWithdrawAmount();
      } else {
        setWithdrawAmount((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case USE_COMMISSION:
      if (value == null) {
        unsetUseCommission();
      } else {
        setUseCommission((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case AVAILABLE_FUND:
      if (value == null) {
        unsetAvailableFund();
      } else {
        setAvailableFund((Double)value);
      }
      break;

    case DYNAMIC_BENEFIT:
      if (value == null) {
        unsetDynamicBenefit();
      } else {
        setDynamicBenefit((Double)value);
      }
      break;

    case RISK_RATE:
      if (value == null) {
        unsetRiskRate();
      } else {
        setRiskRate((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case CREDIT_AMOUNT:
      if (value == null) {
        unsetCreditAmount();
      } else {
        setCreditAmount((Double)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastModifyTimestampMs();
      } else {
        setLastModifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case PRE_FUND:
      return Double.valueOf(getPreFund());

    case DEPOSIT_AMOUNT:
      return Double.valueOf(getDepositAmount());

    case WITHDRAW_AMOUNT:
      return Double.valueOf(getWithdrawAmount());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case USE_COMMISSION:
      return Double.valueOf(getUseCommission());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case AVAILABLE_FUND:
      return Double.valueOf(getAvailableFund());

    case DYNAMIC_BENEFIT:
      return Double.valueOf(getDynamicBenefit());

    case RISK_RATE:
      return Double.valueOf(getRiskRate());

    case CURRENCY:
      return getCurrency();

    case CREDIT_AMOUNT:
      return Double.valueOf(getCreditAmount());

    case GOODS_VALUE:
      return Double.valueOf(getGoodsValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LAST_MODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastModifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case PRE_FUND:
      return isSetPreFund();
    case DEPOSIT_AMOUNT:
      return isSetDepositAmount();
    case WITHDRAW_AMOUNT:
      return isSetWithdrawAmount();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case USE_MARGIN:
      return isSetUseMargin();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case USE_COMMISSION:
      return isSetUseCommission();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case AVAILABLE_FUND:
      return isSetAvailableFund();
    case DYNAMIC_BENEFIT:
      return isSetDynamicBenefit();
    case RISK_RATE:
      return isSetRiskRate();
    case CURRENCY:
      return isSetCurrency();
    case CREDIT_AMOUNT:
      return isSetCreditAmount();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case LEVERAGE:
      return isSetLeverage();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LAST_MODIFY_TIMESTAMP_MS:
      return isSetLastModifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingFund)
      return this.equals((HostingFund)that);
    return false;
  }

  public boolean equals(HostingFund that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_preFund = true && this.isSetPreFund();
    boolean that_present_preFund = true && that.isSetPreFund();
    if (this_present_preFund || that_present_preFund) {
      if (!(this_present_preFund && that_present_preFund))
        return false;
      if (this.preFund != that.preFund)
        return false;
    }

    boolean this_present_depositAmount = true && this.isSetDepositAmount();
    boolean that_present_depositAmount = true && that.isSetDepositAmount();
    if (this_present_depositAmount || that_present_depositAmount) {
      if (!(this_present_depositAmount && that_present_depositAmount))
        return false;
      if (this.depositAmount != that.depositAmount)
        return false;
    }

    boolean this_present_withdrawAmount = true && this.isSetWithdrawAmount();
    boolean that_present_withdrawAmount = true && that.isSetWithdrawAmount();
    if (this_present_withdrawAmount || that_present_withdrawAmount) {
      if (!(this_present_withdrawAmount && that_present_withdrawAmount))
        return false;
      if (this.withdrawAmount != that.withdrawAmount)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_useCommission = true && this.isSetUseCommission();
    boolean that_present_useCommission = true && that.isSetUseCommission();
    if (this_present_useCommission || that_present_useCommission) {
      if (!(this_present_useCommission && that_present_useCommission))
        return false;
      if (this.useCommission != that.useCommission)
        return false;
    }

    boolean this_present_frozenCommission = true && this.isSetFrozenCommission();
    boolean that_present_frozenCommission = true && that.isSetFrozenCommission();
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_availableFund = true && this.isSetAvailableFund();
    boolean that_present_availableFund = true && that.isSetAvailableFund();
    if (this_present_availableFund || that_present_availableFund) {
      if (!(this_present_availableFund && that_present_availableFund))
        return false;
      if (this.availableFund != that.availableFund)
        return false;
    }

    boolean this_present_dynamicBenefit = true && this.isSetDynamicBenefit();
    boolean that_present_dynamicBenefit = true && that.isSetDynamicBenefit();
    if (this_present_dynamicBenefit || that_present_dynamicBenefit) {
      if (!(this_present_dynamicBenefit && that_present_dynamicBenefit))
        return false;
      if (this.dynamicBenefit != that.dynamicBenefit)
        return false;
    }

    boolean this_present_riskRate = true && this.isSetRiskRate();
    boolean that_present_riskRate = true && that.isSetRiskRate();
    if (this_present_riskRate || that_present_riskRate) {
      if (!(this_present_riskRate && that_present_riskRate))
        return false;
      if (this.riskRate != that.riskRate)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_creditAmount = true && this.isSetCreditAmount();
    boolean that_present_creditAmount = true && that.isSetCreditAmount();
    if (this_present_creditAmount || that_present_creditAmount) {
      if (!(this_present_creditAmount && that_present_creditAmount))
        return false;
      if (this.creditAmount != that.creditAmount)
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (this.goodsValue != that.goodsValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastModifyTimestampMs = true && this.isSetLastModifyTimestampMs();
    boolean that_present_lastModifyTimestampMs = true && that.isSetLastModifyTimestampMs();
    if (this_present_lastModifyTimestampMs || that_present_lastModifyTimestampMs) {
      if (!(this_present_lastModifyTimestampMs && that_present_lastModifyTimestampMs))
        return false;
      if (this.lastModifyTimestampMs != that.lastModifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingFund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreFund()).compareTo(other.isSetPreFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preFund, other.preFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositAmount()).compareTo(other.isSetDepositAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositAmount, other.depositAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAmount()).compareTo(other.isSetWithdrawAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAmount, other.withdrawAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseCommission()).compareTo(other.isSetUseCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCommission, other.useCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailableFund()).compareTo(other.isSetAvailableFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailableFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.availableFund, other.availableFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicBenefit()).compareTo(other.isSetDynamicBenefit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicBenefit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicBenefit, other.dynamicBenefit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskRate()).compareTo(other.isSetRiskRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskRate, other.riskRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreditAmount()).compareTo(other.isSetCreditAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreditAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.creditAmount, other.creditAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestampMs()).compareTo(other.isSetLastModifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestampMs, other.lastModifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingFund(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetPreFund()) {
      if (!first) sb.append(", ");
      sb.append("preFund:");
      sb.append(this.preFund);
      first = false;
    }
    if (isSetDepositAmount()) {
      if (!first) sb.append(", ");
      sb.append("depositAmount:");
      sb.append(this.depositAmount);
      first = false;
    }
    if (isSetWithdrawAmount()) {
      if (!first) sb.append(", ");
      sb.append("withdrawAmount:");
      sb.append(this.withdrawAmount);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetUseCommission()) {
      if (!first) sb.append(", ");
      sb.append("useCommission:");
      sb.append(this.useCommission);
      first = false;
    }
    if (isSetFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("frozenCommission:");
      sb.append(this.frozenCommission);
      first = false;
    }
    if (isSetAvailableFund()) {
      if (!first) sb.append(", ");
      sb.append("availableFund:");
      sb.append(this.availableFund);
      first = false;
    }
    if (isSetDynamicBenefit()) {
      if (!first) sb.append(", ");
      sb.append("dynamicBenefit:");
      sb.append(this.dynamicBenefit);
      first = false;
    }
    if (isSetRiskRate()) {
      if (!first) sb.append(", ");
      sb.append("riskRate:");
      sb.append(this.riskRate);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetCreditAmount()) {
      if (!first) sb.append(", ");
      sb.append("creditAmount:");
      sb.append(this.creditAmount);
      first = false;
    }
    if (isSetGoodsValue()) {
      if (!first) sb.append(", ");
      sb.append("goodsValue:");
      sb.append(this.goodsValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastModifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestampMs:");
      sb.append(this.lastModifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingFundStandardSchemeFactory implements SchemeFactory {
    public HostingFundStandardScheme getScheme() {
      return new HostingFundStandardScheme();
    }
  }

  private static class HostingFundStandardScheme extends StandardScheme<HostingFund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingFund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRE_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preFund = iprot.readDouble();
              struct.setPreFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPOSIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.depositAmount = iprot.readDouble();
              struct.setDepositAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WITHDRAW_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdrawAmount = iprot.readDouble();
              struct.setWithdrawAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USE_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useCommission = iprot.readDouble();
              struct.setUseCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // AVAILABLE_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.availableFund = iprot.readDouble();
              struct.setAvailableFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DYNAMIC_BENEFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dynamicBenefit = iprot.readDouble();
              struct.setDynamicBenefitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // RISK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.riskRate = iprot.readDouble();
              struct.setRiskRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CREDIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.creditAmount = iprot.readDouble();
              struct.setCreditAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goodsValue = iprot.readDouble();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LAST_MODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestampMs = iprot.readI64();
              struct.setLastModifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingFund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreFund()) {
        oprot.writeFieldBegin(PRE_FUND_FIELD_DESC);
        oprot.writeDouble(struct.preFund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepositAmount()) {
        oprot.writeFieldBegin(DEPOSIT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.depositAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdrawAmount()) {
        oprot.writeFieldBegin(WITHDRAW_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.withdrawAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseCommission()) {
        oprot.writeFieldBegin(USE_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.useCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.frozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvailableFund()) {
        oprot.writeFieldBegin(AVAILABLE_FUND_FIELD_DESC);
        oprot.writeDouble(struct.availableFund);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDynamicBenefit()) {
        oprot.writeFieldBegin(DYNAMIC_BENEFIT_FIELD_DESC);
        oprot.writeDouble(struct.dynamicBenefit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRiskRate()) {
        oprot.writeFieldBegin(RISK_RATE_FIELD_DESC);
        oprot.writeDouble(struct.riskRate);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreditAmount()) {
        oprot.writeFieldBegin(CREDIT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.creditAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingFundTupleSchemeFactory implements SchemeFactory {
    public HostingFundTupleScheme getScheme() {
      return new HostingFundTupleScheme();
    }
  }

  private static class HostingFundTupleScheme extends TupleScheme<HostingFund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingFund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetPreFund()) {
        optionals.set(1);
      }
      if (struct.isSetDepositAmount()) {
        optionals.set(2);
      }
      if (struct.isSetWithdrawAmount()) {
        optionals.set(3);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(4);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(5);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(6);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(7);
      }
      if (struct.isSetUseCommission()) {
        optionals.set(8);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(9);
      }
      if (struct.isSetAvailableFund()) {
        optionals.set(10);
      }
      if (struct.isSetDynamicBenefit()) {
        optionals.set(11);
      }
      if (struct.isSetRiskRate()) {
        optionals.set(12);
      }
      if (struct.isSetCurrency()) {
        optionals.set(13);
      }
      if (struct.isSetCreditAmount()) {
        optionals.set(14);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(15);
      }
      if (struct.isSetLeverage()) {
        optionals.set(16);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(17);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetPreFund()) {
        oprot.writeDouble(struct.preFund);
      }
      if (struct.isSetDepositAmount()) {
        oprot.writeDouble(struct.depositAmount);
      }
      if (struct.isSetWithdrawAmount()) {
        oprot.writeDouble(struct.withdrawAmount);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetUseCommission()) {
        oprot.writeDouble(struct.useCommission);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetAvailableFund()) {
        oprot.writeDouble(struct.availableFund);
      }
      if (struct.isSetDynamicBenefit()) {
        oprot.writeDouble(struct.dynamicBenefit);
      }
      if (struct.isSetRiskRate()) {
        oprot.writeDouble(struct.riskRate);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetCreditAmount()) {
        oprot.writeDouble(struct.creditAmount);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeDouble(struct.goodsValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeI64(struct.lastModifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingFund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.preFund = iprot.readDouble();
        struct.setPreFundIsSet(true);
      }
      if (incoming.get(2)) {
        struct.depositAmount = iprot.readDouble();
        struct.setDepositAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.withdrawAmount = iprot.readDouble();
        struct.setWithdrawAmountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(5)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(6)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(7)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(8)) {
        struct.useCommission = iprot.readDouble();
        struct.setUseCommissionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.availableFund = iprot.readDouble();
        struct.setAvailableFundIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dynamicBenefit = iprot.readDouble();
        struct.setDynamicBenefitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.riskRate = iprot.readDouble();
        struct.setRiskRateIsSet(true);
      }
      if (incoming.get(13)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(14)) {
        struct.creditAmount = iprot.readDouble();
        struct.setCreditAmountIsSet(true);
      }
      if (incoming.get(15)) {
        struct.goodsValue = iprot.readDouble();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(16)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
      if (incoming.get(17)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(18)) {
        struct.lastModifyTimestampMs = iprot.readI64();
        struct.setLastModifyTimestampMsIsSet(true);
      }
    }
  }

}

