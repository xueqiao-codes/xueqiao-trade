/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqHostingFundOption implements org.apache.thrift.TBase<ReqHostingFundOption, ReqHostingFundOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqHostingFundOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqHostingFundOption");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountIds", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCurrency", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqHostingFundOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqHostingFundOptionTupleSchemeFactory());
  }

  public Set<Long> subAccountIds; // optional
  public boolean baseCurrency; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_IDS((short)1, "subAccountIds"),
    BASE_CURRENCY((short)2, "baseCurrency");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_IDS
          return SUB_ACCOUNT_IDS;
        case 2: // BASE_CURRENCY
          return BASE_CURRENCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BASECURRENCY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_IDS,_Fields.BASE_CURRENCY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_IDS, new org.apache.thrift.meta_data.FieldMetaData("subAccountIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.BASE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("baseCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqHostingFundOption.class, metaDataMap);
  }

  public ReqHostingFundOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqHostingFundOption(ReqHostingFundOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubAccountIds()) {
      Set<Long> __this__subAccountIds = new HashSet<Long>(other.subAccountIds);
      this.subAccountIds = __this__subAccountIds;
    }
    this.baseCurrency = other.baseCurrency;
  }

  public ReqHostingFundOption deepCopy() {
    return new ReqHostingFundOption(this);
  }

  @Override
  public void clear() {
    this.subAccountIds = null;
    setBaseCurrencyIsSet(false);
    this.baseCurrency = false;
  }

  public int getSubAccountIdsSize() {
    return (this.subAccountIds == null) ? 0 : this.subAccountIds.size();
  }

  public java.util.Iterator<Long> getSubAccountIdsIterator() {
    return (this.subAccountIds == null) ? null : this.subAccountIds.iterator();
  }

  public void addToSubAccountIds(long elem) {
    if (this.subAccountIds == null) {
      this.subAccountIds = new HashSet<Long>();
    }
    this.subAccountIds.add(elem);
  }

  public Set<Long> getSubAccountIds() {
    return this.subAccountIds;
  }

  public ReqHostingFundOption setSubAccountIds(Set<Long> subAccountIds) {
    this.subAccountIds = subAccountIds;
    return this;
  }

  public void unsetSubAccountIds() {
    this.subAccountIds = null;
  }

  /** Returns true if field subAccountIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountIds() {
    return this.subAccountIds != null;
  }

  public void setSubAccountIdsIsSet(boolean value) {
    if (!value) {
      this.subAccountIds = null;
    }
  }

  public boolean isBaseCurrency() {
    return this.baseCurrency;
  }

  public ReqHostingFundOption setBaseCurrency(boolean baseCurrency) {
    this.baseCurrency = baseCurrency;
    setBaseCurrencyIsSet(true);
    return this;
  }

  public void unsetBaseCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASECURRENCY_ISSET_ID);
  }

  /** Returns true if field baseCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __BASECURRENCY_ISSET_ID);
  }

  public void setBaseCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASECURRENCY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_IDS:
      if (value == null) {
        unsetSubAccountIds();
      } else {
        setSubAccountIds((Set<Long>)value);
      }
      break;

    case BASE_CURRENCY:
      if (value == null) {
        unsetBaseCurrency();
      } else {
        setBaseCurrency((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_IDS:
      return getSubAccountIds();

    case BASE_CURRENCY:
      return Boolean.valueOf(isBaseCurrency());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_IDS:
      return isSetSubAccountIds();
    case BASE_CURRENCY:
      return isSetBaseCurrency();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqHostingFundOption)
      return this.equals((ReqHostingFundOption)that);
    return false;
  }

  public boolean equals(ReqHostingFundOption that) {
    if (that == null)
      return false;

    boolean this_present_subAccountIds = true && this.isSetSubAccountIds();
    boolean that_present_subAccountIds = true && that.isSetSubAccountIds();
    if (this_present_subAccountIds || that_present_subAccountIds) {
      if (!(this_present_subAccountIds && that_present_subAccountIds))
        return false;
      if (!this.subAccountIds.equals(that.subAccountIds))
        return false;
    }

    boolean this_present_baseCurrency = true && this.isSetBaseCurrency();
    boolean that_present_baseCurrency = true && that.isSetBaseCurrency();
    if (this_present_baseCurrency || that_present_baseCurrency) {
      if (!(this_present_baseCurrency && that_present_baseCurrency))
        return false;
      if (this.baseCurrency != that.baseCurrency)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqHostingFundOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountIds()).compareTo(other.isSetSubAccountIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountIds, other.subAccountIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseCurrency()).compareTo(other.isSetBaseCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCurrency, other.baseCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqHostingFundOption(");
    boolean first = true;

    if (isSetSubAccountIds()) {
      sb.append("subAccountIds:");
      if (this.subAccountIds == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountIds);
      }
      first = false;
    }
    if (isSetBaseCurrency()) {
      if (!first) sb.append(", ");
      sb.append("baseCurrency:");
      sb.append(this.baseCurrency);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqHostingFundOptionStandardSchemeFactory implements SchemeFactory {
    public ReqHostingFundOptionStandardScheme getScheme() {
      return new ReqHostingFundOptionStandardScheme();
    }
  }

  private static class ReqHostingFundOptionStandardScheme extends StandardScheme<ReqHostingFundOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqHostingFundOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.subAccountIds = new HashSet<Long>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.subAccountIds.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setSubAccountIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.baseCurrency = iprot.readBool();
              struct.setBaseCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqHostingFundOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subAccountIds != null) {
        if (struct.isSetSubAccountIds()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.subAccountIds.size()));
            for (long _iter27 : struct.subAccountIds)
            {
              oprot.writeI64(_iter27);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBaseCurrency()) {
        oprot.writeFieldBegin(BASE_CURRENCY_FIELD_DESC);
        oprot.writeBool(struct.baseCurrency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqHostingFundOptionTupleSchemeFactory implements SchemeFactory {
    public ReqHostingFundOptionTupleScheme getScheme() {
      return new ReqHostingFundOptionTupleScheme();
    }
  }

  private static class ReqHostingFundOptionTupleScheme extends TupleScheme<ReqHostingFundOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqHostingFundOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountIds()) {
        optionals.set(0);
      }
      if (struct.isSetBaseCurrency()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetSubAccountIds()) {
        {
          oprot.writeI32(struct.subAccountIds.size());
          for (long _iter28 : struct.subAccountIds)
          {
            oprot.writeI64(_iter28);
          }
        }
      }
      if (struct.isSetBaseCurrency()) {
        oprot.writeBool(struct.baseCurrency);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqHostingFundOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.subAccountIds = new HashSet<Long>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            long _elem31;
            _elem31 = iprot.readI64();
            struct.subAccountIds.add(_elem31);
          }
        }
        struct.setSubAccountIdsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseCurrency = iprot.readBool();
        struct.setBaseCurrencyIsSet(true);
      }
    }
  }

}

