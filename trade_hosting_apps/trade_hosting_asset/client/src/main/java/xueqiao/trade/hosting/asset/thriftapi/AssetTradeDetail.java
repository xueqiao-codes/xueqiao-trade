/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 资源结算层面的成交明细（从成交列表中的成交明细转换成适合结算用的成交明细）
 */
public class AssetTradeDetail implements org.apache.thrift.TBase<AssetTradeDetail, AssetTradeDetail._Fields>, java.io.Serializable, Cloneable, Comparable<AssetTradeDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssetTradeDetail");

  private static final org.apache.thrift.protocol.TField EXEC_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVolume", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeDirection", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("config", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField ORDER_TOTAL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTotalVolume", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField TRADE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField ASSET_TRADE_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("assetTradeDetailId", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)18);
  private static final org.apache.thrift.protocol.TField SLED_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledOrderId", org.apache.thrift.protocol.TType.STRING, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssetTradeDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssetTradeDetailTupleSchemeFactory());
  }

  public long execTradeId; // optional
  public long subAccountId; // optional
  public long sledContractId; // optional
  public long execOrderId; // optional
  public double tradePrice; // optional
  public int tradeVolume; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public xueqiao.trade.hosting.HostingExecTradeDirection execTradeDirection; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public long sledCommodityId; // optional
  public AssetCalculateConfig config; // optional
  public int orderTotalVolume; // optional
  public double limitPrice; // optional
  public String source; // optional
  public long tradeAccountId; // optional
  public long tradeTimestampMs; // optional
  public long assetTradeDetailId; // optional
  public int subUserId; // optional
  public String sledOrderId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXEC_TRADE_ID((short)1, "execTradeId"),
    SUB_ACCOUNT_ID((short)2, "subAccountId"),
    SLED_CONTRACT_ID((short)3, "sledContractId"),
    EXEC_ORDER_ID((short)4, "execOrderId"),
    TRADE_PRICE((short)5, "tradePrice"),
    TRADE_VOLUME((short)6, "tradeVolume"),
    /**
     * 
     * @see xueqiao.trade.hosting.HostingExecTradeDirection
     */
    EXEC_TRADE_DIRECTION((short)7, "execTradeDirection"),
    CREATE_TIMESTAMP_MS((short)8, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)9, "lastmodifyTimestampMs"),
    SLED_COMMODITY_ID((short)10, "sledCommodityId"),
    CONFIG((short)11, "config"),
    ORDER_TOTAL_VOLUME((short)12, "orderTotalVolume"),
    LIMIT_PRICE((short)13, "limitPrice"),
    SOURCE((short)14, "source"),
    TRADE_ACCOUNT_ID((short)15, "tradeAccountId"),
    TRADE_TIMESTAMP_MS((short)16, "tradeTimestampMs"),
    ASSET_TRADE_DETAIL_ID((short)17, "assetTradeDetailId"),
    SUB_USER_ID((short)18, "subUserId"),
    SLED_ORDER_ID((short)19, "sledOrderId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_TRADE_ID
          return EXEC_TRADE_ID;
        case 2: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 3: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 4: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 5: // TRADE_PRICE
          return TRADE_PRICE;
        case 6: // TRADE_VOLUME
          return TRADE_VOLUME;
        case 7: // EXEC_TRADE_DIRECTION
          return EXEC_TRADE_DIRECTION;
        case 8: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 9: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 10: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 11: // CONFIG
          return CONFIG;
        case 12: // ORDER_TOTAL_VOLUME
          return ORDER_TOTAL_VOLUME;
        case 13: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 14: // SOURCE
          return SOURCE;
        case 15: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 16: // TRADE_TIMESTAMP_MS
          return TRADE_TIMESTAMP_MS;
        case 17: // ASSET_TRADE_DETAIL_ID
          return ASSET_TRADE_DETAIL_ID;
        case 18: // SUB_USER_ID
          return SUB_USER_ID;
        case 19: // SLED_ORDER_ID
          return SLED_ORDER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECTRADEID_ISSET_ID = 0;
  private static final int __SUBACCOUNTID_ISSET_ID = 1;
  private static final int __SLEDCONTRACTID_ISSET_ID = 2;
  private static final int __EXECORDERID_ISSET_ID = 3;
  private static final int __TRADEPRICE_ISSET_ID = 4;
  private static final int __TRADEVOLUME_ISSET_ID = 5;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 7;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 8;
  private static final int __ORDERTOTALVOLUME_ISSET_ID = 9;
  private static final int __LIMITPRICE_ISSET_ID = 10;
  private static final int __TRADEACCOUNTID_ISSET_ID = 11;
  private static final int __TRADETIMESTAMPMS_ISSET_ID = 12;
  private static final int __ASSETTRADEDETAILID_ISSET_ID = 13;
  private static final int __SUBUSERID_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_TRADE_ID,_Fields.SUB_ACCOUNT_ID,_Fields.SLED_CONTRACT_ID,_Fields.EXEC_ORDER_ID,_Fields.TRADE_PRICE,_Fields.TRADE_VOLUME,_Fields.EXEC_TRADE_DIRECTION,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.SLED_COMMODITY_ID,_Fields.CONFIG,_Fields.ORDER_TOTAL_VOLUME,_Fields.LIMIT_PRICE,_Fields.SOURCE,_Fields.TRADE_ACCOUNT_ID,_Fields.TRADE_TIMESTAMP_MS,_Fields.ASSET_TRADE_DETAIL_ID,_Fields.SUB_USER_ID,_Fields.SLED_ORDER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("execTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXEC_TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("execTradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.HostingExecTradeDirection.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONFIG, new org.apache.thrift.meta_data.FieldMetaData("config", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AssetCalculateConfig.class)));
    tmpMap.put(_Fields.ORDER_TOTAL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("orderTotalVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("tradeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ASSET_TRADE_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("assetTradeDetailId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sledOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssetTradeDetail.class, metaDataMap);
  }

  public AssetTradeDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssetTradeDetail(AssetTradeDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.execTradeId = other.execTradeId;
    this.subAccountId = other.subAccountId;
    this.sledContractId = other.sledContractId;
    this.execOrderId = other.execOrderId;
    this.tradePrice = other.tradePrice;
    this.tradeVolume = other.tradeVolume;
    if (other.isSetExecTradeDirection()) {
      this.execTradeDirection = other.execTradeDirection;
    }
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetConfig()) {
      this.config = new AssetCalculateConfig(other.config);
    }
    this.orderTotalVolume = other.orderTotalVolume;
    this.limitPrice = other.limitPrice;
    if (other.isSetSource()) {
      this.source = other.source;
    }
    this.tradeAccountId = other.tradeAccountId;
    this.tradeTimestampMs = other.tradeTimestampMs;
    this.assetTradeDetailId = other.assetTradeDetailId;
    this.subUserId = other.subUserId;
    if (other.isSetSledOrderId()) {
      this.sledOrderId = other.sledOrderId;
    }
  }

  public AssetTradeDetail deepCopy() {
    return new AssetTradeDetail(this);
  }

  @Override
  public void clear() {
    setExecTradeIdIsSet(false);
    this.execTradeId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    setTradePriceIsSet(false);
    this.tradePrice = 0.0;
    setTradeVolumeIsSet(false);
    this.tradeVolume = 0;
    this.execTradeDirection = null;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.config = null;
    setOrderTotalVolumeIsSet(false);
    this.orderTotalVolume = 0;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    this.source = null;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setTradeTimestampMsIsSet(false);
    this.tradeTimestampMs = 0;
    setAssetTradeDetailIdIsSet(false);
    this.assetTradeDetailId = 0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    this.sledOrderId = null;
  }

  public long getExecTradeId() {
    return this.execTradeId;
  }

  public AssetTradeDetail setExecTradeId(long execTradeId) {
    this.execTradeId = execTradeId;
    setExecTradeIdIsSet(true);
    return this;
  }

  public void unsetExecTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  /** Returns true if field execTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  public void setExecTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADEID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public AssetTradeDetail setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public AssetTradeDetail setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public AssetTradeDetail setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public double getTradePrice() {
    return this.tradePrice;
  }

  public AssetTradeDetail setTradePrice(double tradePrice) {
    this.tradePrice = tradePrice;
    setTradePriceIsSet(true);
    return this;
  }

  public void unsetTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  /** Returns true if field tradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  public void setTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEPRICE_ISSET_ID, value);
  }

  public int getTradeVolume() {
    return this.tradeVolume;
  }

  public AssetTradeDetail setTradeVolume(int tradeVolume) {
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    return this;
  }

  public void unsetTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  public void setTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public xueqiao.trade.hosting.HostingExecTradeDirection getExecTradeDirection() {
    return this.execTradeDirection;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public AssetTradeDetail setExecTradeDirection(xueqiao.trade.hosting.HostingExecTradeDirection execTradeDirection) {
    this.execTradeDirection = execTradeDirection;
    return this;
  }

  public void unsetExecTradeDirection() {
    this.execTradeDirection = null;
  }

  /** Returns true if field execTradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeDirection() {
    return this.execTradeDirection != null;
  }

  public void setExecTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.execTradeDirection = null;
    }
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public AssetTradeDetail setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public AssetTradeDetail setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public AssetTradeDetail setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public AssetCalculateConfig getConfig() {
    return this.config;
  }

  public AssetTradeDetail setConfig(AssetCalculateConfig config) {
    this.config = config;
    return this;
  }

  public void unsetConfig() {
    this.config = null;
  }

  /** Returns true if field config is set (has been assigned a value) and false otherwise */
  public boolean isSetConfig() {
    return this.config != null;
  }

  public void setConfigIsSet(boolean value) {
    if (!value) {
      this.config = null;
    }
  }

  public int getOrderTotalVolume() {
    return this.orderTotalVolume;
  }

  public AssetTradeDetail setOrderTotalVolume(int orderTotalVolume) {
    this.orderTotalVolume = orderTotalVolume;
    setOrderTotalVolumeIsSet(true);
    return this;
  }

  public void unsetOrderTotalVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERTOTALVOLUME_ISSET_ID);
  }

  /** Returns true if field orderTotalVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTotalVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERTOTALVOLUME_ISSET_ID);
  }

  public void setOrderTotalVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERTOTALVOLUME_ISSET_ID, value);
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public AssetTradeDetail setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public String getSource() {
    return this.source;
  }

  public AssetTradeDetail setSource(String source) {
    this.source = source;
    return this;
  }

  public void unsetSource() {
    this.source = null;
  }

  /** Returns true if field source is set (has been assigned a value) and false otherwise */
  public boolean isSetSource() {
    return this.source != null;
  }

  public void setSourceIsSet(boolean value) {
    if (!value) {
      this.source = null;
    }
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public AssetTradeDetail setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public long getTradeTimestampMs() {
    return this.tradeTimestampMs;
  }

  public AssetTradeDetail setTradeTimestampMs(long tradeTimestampMs) {
    this.tradeTimestampMs = tradeTimestampMs;
    setTradeTimestampMsIsSet(true);
    return this;
  }

  public void unsetTradeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field tradeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADETIMESTAMPMS_ISSET_ID);
  }

  public void setTradeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADETIMESTAMPMS_ISSET_ID, value);
  }

  public long getAssetTradeDetailId() {
    return this.assetTradeDetailId;
  }

  public AssetTradeDetail setAssetTradeDetailId(long assetTradeDetailId) {
    this.assetTradeDetailId = assetTradeDetailId;
    setAssetTradeDetailIdIsSet(true);
    return this;
  }

  public void unsetAssetTradeDetailId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASSETTRADEDETAILID_ISSET_ID);
  }

  /** Returns true if field assetTradeDetailId is set (has been assigned a value) and false otherwise */
  public boolean isSetAssetTradeDetailId() {
    return EncodingUtils.testBit(__isset_bitfield, __ASSETTRADEDETAILID_ISSET_ID);
  }

  public void setAssetTradeDetailIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASSETTRADEDETAILID_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public AssetTradeDetail setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public String getSledOrderId() {
    return this.sledOrderId;
  }

  public AssetTradeDetail setSledOrderId(String sledOrderId) {
    this.sledOrderId = sledOrderId;
    return this;
  }

  public void unsetSledOrderId() {
    this.sledOrderId = null;
  }

  /** Returns true if field sledOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledOrderId() {
    return this.sledOrderId != null;
  }

  public void setSledOrderIdIsSet(boolean value) {
    if (!value) {
      this.sledOrderId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_TRADE_ID:
      if (value == null) {
        unsetExecTradeId();
      } else {
        setExecTradeId((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case TRADE_PRICE:
      if (value == null) {
        unsetTradePrice();
      } else {
        setTradePrice((Double)value);
      }
      break;

    case TRADE_VOLUME:
      if (value == null) {
        unsetTradeVolume();
      } else {
        setTradeVolume((Integer)value);
      }
      break;

    case EXEC_TRADE_DIRECTION:
      if (value == null) {
        unsetExecTradeDirection();
      } else {
        setExecTradeDirection((xueqiao.trade.hosting.HostingExecTradeDirection)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case CONFIG:
      if (value == null) {
        unsetConfig();
      } else {
        setConfig((AssetCalculateConfig)value);
      }
      break;

    case ORDER_TOTAL_VOLUME:
      if (value == null) {
        unsetOrderTotalVolume();
      } else {
        setOrderTotalVolume((Integer)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case SOURCE:
      if (value == null) {
        unsetSource();
      } else {
        setSource((String)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case TRADE_TIMESTAMP_MS:
      if (value == null) {
        unsetTradeTimestampMs();
      } else {
        setTradeTimestampMs((Long)value);
      }
      break;

    case ASSET_TRADE_DETAIL_ID:
      if (value == null) {
        unsetAssetTradeDetailId();
      } else {
        setAssetTradeDetailId((Long)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case SLED_ORDER_ID:
      if (value == null) {
        unsetSledOrderId();
      } else {
        setSledOrderId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_TRADE_ID:
      return Long.valueOf(getExecTradeId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case TRADE_PRICE:
      return Double.valueOf(getTradePrice());

    case TRADE_VOLUME:
      return Integer.valueOf(getTradeVolume());

    case EXEC_TRADE_DIRECTION:
      return getExecTradeDirection();

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case CONFIG:
      return getConfig();

    case ORDER_TOTAL_VOLUME:
      return Integer.valueOf(getOrderTotalVolume());

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case SOURCE:
      return getSource();

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case TRADE_TIMESTAMP_MS:
      return Long.valueOf(getTradeTimestampMs());

    case ASSET_TRADE_DETAIL_ID:
      return Long.valueOf(getAssetTradeDetailId());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case SLED_ORDER_ID:
      return getSledOrderId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_TRADE_ID:
      return isSetExecTradeId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case TRADE_PRICE:
      return isSetTradePrice();
    case TRADE_VOLUME:
      return isSetTradeVolume();
    case EXEC_TRADE_DIRECTION:
      return isSetExecTradeDirection();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case CONFIG:
      return isSetConfig();
    case ORDER_TOTAL_VOLUME:
      return isSetOrderTotalVolume();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case SOURCE:
      return isSetSource();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case TRADE_TIMESTAMP_MS:
      return isSetTradeTimestampMs();
    case ASSET_TRADE_DETAIL_ID:
      return isSetAssetTradeDetailId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case SLED_ORDER_ID:
      return isSetSledOrderId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssetTradeDetail)
      return this.equals((AssetTradeDetail)that);
    return false;
  }

  public boolean equals(AssetTradeDetail that) {
    if (that == null)
      return false;

    boolean this_present_execTradeId = true && this.isSetExecTradeId();
    boolean that_present_execTradeId = true && that.isSetExecTradeId();
    if (this_present_execTradeId || that_present_execTradeId) {
      if (!(this_present_execTradeId && that_present_execTradeId))
        return false;
      if (this.execTradeId != that.execTradeId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_tradePrice = true && this.isSetTradePrice();
    boolean that_present_tradePrice = true && that.isSetTradePrice();
    if (this_present_tradePrice || that_present_tradePrice) {
      if (!(this_present_tradePrice && that_present_tradePrice))
        return false;
      if (this.tradePrice != that.tradePrice)
        return false;
    }

    boolean this_present_tradeVolume = true && this.isSetTradeVolume();
    boolean that_present_tradeVolume = true && that.isSetTradeVolume();
    if (this_present_tradeVolume || that_present_tradeVolume) {
      if (!(this_present_tradeVolume && that_present_tradeVolume))
        return false;
      if (this.tradeVolume != that.tradeVolume)
        return false;
    }

    boolean this_present_execTradeDirection = true && this.isSetExecTradeDirection();
    boolean that_present_execTradeDirection = true && that.isSetExecTradeDirection();
    if (this_present_execTradeDirection || that_present_execTradeDirection) {
      if (!(this_present_execTradeDirection && that_present_execTradeDirection))
        return false;
      if (!this.execTradeDirection.equals(that.execTradeDirection))
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_config = true && this.isSetConfig();
    boolean that_present_config = true && that.isSetConfig();
    if (this_present_config || that_present_config) {
      if (!(this_present_config && that_present_config))
        return false;
      if (!this.config.equals(that.config))
        return false;
    }

    boolean this_present_orderTotalVolume = true && this.isSetOrderTotalVolume();
    boolean that_present_orderTotalVolume = true && that.isSetOrderTotalVolume();
    if (this_present_orderTotalVolume || that_present_orderTotalVolume) {
      if (!(this_present_orderTotalVolume && that_present_orderTotalVolume))
        return false;
      if (this.orderTotalVolume != that.orderTotalVolume)
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_source = true && this.isSetSource();
    boolean that_present_source = true && that.isSetSource();
    if (this_present_source || that_present_source) {
      if (!(this_present_source && that_present_source))
        return false;
      if (!this.source.equals(that.source))
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_tradeTimestampMs = true && this.isSetTradeTimestampMs();
    boolean that_present_tradeTimestampMs = true && that.isSetTradeTimestampMs();
    if (this_present_tradeTimestampMs || that_present_tradeTimestampMs) {
      if (!(this_present_tradeTimestampMs && that_present_tradeTimestampMs))
        return false;
      if (this.tradeTimestampMs != that.tradeTimestampMs)
        return false;
    }

    boolean this_present_assetTradeDetailId = true && this.isSetAssetTradeDetailId();
    boolean that_present_assetTradeDetailId = true && that.isSetAssetTradeDetailId();
    if (this_present_assetTradeDetailId || that_present_assetTradeDetailId) {
      if (!(this_present_assetTradeDetailId && that_present_assetTradeDetailId))
        return false;
      if (this.assetTradeDetailId != that.assetTradeDetailId)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_sledOrderId = true && this.isSetSledOrderId();
    boolean that_present_sledOrderId = true && that.isSetSledOrderId();
    if (this_present_sledOrderId || that_present_sledOrderId) {
      if (!(this_present_sledOrderId && that_present_sledOrderId))
        return false;
      if (!this.sledOrderId.equals(that.sledOrderId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AssetTradeDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecTradeId()).compareTo(other.isSetExecTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeId, other.execTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradePrice()).compareTo(other.isSetTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradePrice, other.tradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVolume()).compareTo(other.isSetTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVolume, other.tradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeDirection()).compareTo(other.isSetExecTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeDirection, other.execTradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConfig()).compareTo(other.isSetConfig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConfig()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.config, other.config);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTotalVolume()).compareTo(other.isSetOrderTotalVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTotalVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTotalVolume, other.orderTotalVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSource()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTimestampMs()).compareTo(other.isSetTradeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTimestampMs, other.tradeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAssetTradeDetailId()).compareTo(other.isSetAssetTradeDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssetTradeDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assetTradeDetailId, other.assetTradeDetailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledOrderId()).compareTo(other.isSetSledOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledOrderId, other.sledOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssetTradeDetail(");
    boolean first = true;

    if (isSetExecTradeId()) {
      sb.append("execTradeId:");
      sb.append(this.execTradeId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetExecOrderId()) {
      if (!first) sb.append(", ");
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetTradePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradePrice:");
      sb.append(this.tradePrice);
      first = false;
    }
    if (isSetTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("tradeVolume:");
      sb.append(this.tradeVolume);
      first = false;
    }
    if (isSetExecTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("execTradeDirection:");
      if (this.execTradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.execTradeDirection);
      }
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetConfig()) {
      if (!first) sb.append(", ");
      sb.append("config:");
      if (this.config == null) {
        sb.append("null");
      } else {
        sb.append(this.config);
      }
      first = false;
    }
    if (isSetOrderTotalVolume()) {
      if (!first) sb.append(", ");
      sb.append("orderTotalVolume:");
      sb.append(this.orderTotalVolume);
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetSource()) {
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetTradeTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("tradeTimestampMs:");
      sb.append(this.tradeTimestampMs);
      first = false;
    }
    if (isSetAssetTradeDetailId()) {
      if (!first) sb.append(", ");
      sb.append("assetTradeDetailId:");
      sb.append(this.assetTradeDetailId);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetSledOrderId()) {
      if (!first) sb.append(", ");
      sb.append("sledOrderId:");
      if (this.sledOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.sledOrderId);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (config != null) {
      config.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssetTradeDetailStandardSchemeFactory implements SchemeFactory {
    public AssetTradeDetailStandardScheme getScheme() {
      return new AssetTradeDetailStandardScheme();
    }
  }

  private static class AssetTradeDetailStandardScheme extends StandardScheme<AssetTradeDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssetTradeDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTradeId = iprot.readI64();
              struct.setExecTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradePrice = iprot.readDouble();
              struct.setTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVolume = iprot.readI32();
              struct.setTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXEC_TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execTradeDirection = xueqiao.trade.hosting.HostingExecTradeDirection.findByValue(iprot.readI32());
              struct.setExecTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CONFIG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.config = new AssetCalculateConfig();
              struct.config.read(iprot);
              struct.setConfigIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // ORDER_TOTAL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderTotalVolume = iprot.readI32();
              struct.setOrderTotalVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SOURCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.source = iprot.readString();
              struct.setSourceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // TRADE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeTimestampMs = iprot.readI64();
              struct.setTradeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // ASSET_TRADE_DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.assetTradeDetailId = iprot.readI64();
              struct.setAssetTradeDetailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // SLED_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledOrderId = iprot.readString();
              struct.setSledOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssetTradeDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetExecTradeId()) {
        oprot.writeFieldBegin(EXEC_TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.execTradeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradePrice()) {
        oprot.writeFieldBegin(TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeFieldBegin(TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.tradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.execTradeDirection != null) {
        if (struct.isSetExecTradeDirection()) {
          oprot.writeFieldBegin(EXEC_TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.execTradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.config != null) {
        if (struct.isSetConfig()) {
          oprot.writeFieldBegin(CONFIG_FIELD_DESC);
          struct.config.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderTotalVolume()) {
        oprot.writeFieldBegin(ORDER_TOTAL_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.orderTotalVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.source != null) {
        if (struct.isSetSource()) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeTimestampMs()) {
        oprot.writeFieldBegin(TRADE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.tradeTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAssetTradeDetailId()) {
        oprot.writeFieldBegin(ASSET_TRADE_DETAIL_ID_FIELD_DESC);
        oprot.writeI64(struct.assetTradeDetailId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.sledOrderId != null) {
        if (struct.isSetSledOrderId()) {
          oprot.writeFieldBegin(SLED_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.sledOrderId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssetTradeDetailTupleSchemeFactory implements SchemeFactory {
    public AssetTradeDetailTupleScheme getScheme() {
      return new AssetTradeDetailTupleScheme();
    }
  }

  private static class AssetTradeDetailTupleScheme extends TupleScheme<AssetTradeDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssetTradeDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecTradeId()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(2);
      }
      if (struct.isSetExecOrderId()) {
        optionals.set(3);
      }
      if (struct.isSetTradePrice()) {
        optionals.set(4);
      }
      if (struct.isSetTradeVolume()) {
        optionals.set(5);
      }
      if (struct.isSetExecTradeDirection()) {
        optionals.set(6);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(7);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(8);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(9);
      }
      if (struct.isSetConfig()) {
        optionals.set(10);
      }
      if (struct.isSetOrderTotalVolume()) {
        optionals.set(11);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(12);
      }
      if (struct.isSetSource()) {
        optionals.set(13);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(14);
      }
      if (struct.isSetTradeTimestampMs()) {
        optionals.set(15);
      }
      if (struct.isSetAssetTradeDetailId()) {
        optionals.set(16);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(17);
      }
      if (struct.isSetSledOrderId()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetExecTradeId()) {
        oprot.writeI64(struct.execTradeId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetTradePrice()) {
        oprot.writeDouble(struct.tradePrice);
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeI32(struct.tradeVolume);
      }
      if (struct.isSetExecTradeDirection()) {
        oprot.writeI32(struct.execTradeDirection.getValue());
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetConfig()) {
        struct.config.write(oprot);
      }
      if (struct.isSetOrderTotalVolume()) {
        oprot.writeI32(struct.orderTotalVolume);
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetSource()) {
        oprot.writeString(struct.source);
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetTradeTimestampMs()) {
        oprot.writeI64(struct.tradeTimestampMs);
      }
      if (struct.isSetAssetTradeDetailId()) {
        oprot.writeI64(struct.assetTradeDetailId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetSledOrderId()) {
        oprot.writeString(struct.sledOrderId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssetTradeDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.execTradeId = iprot.readI64();
        struct.setExecTradeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradePrice = iprot.readDouble();
        struct.setTradePriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.tradeVolume = iprot.readI32();
        struct.setTradeVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.execTradeDirection = xueqiao.trade.hosting.HostingExecTradeDirection.findByValue(iprot.readI32());
        struct.setExecTradeDirectionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.config = new AssetCalculateConfig();
        struct.config.read(iprot);
        struct.setConfigIsSet(true);
      }
      if (incoming.get(11)) {
        struct.orderTotalVolume = iprot.readI32();
        struct.setOrderTotalVolumeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.source = iprot.readString();
        struct.setSourceIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.tradeTimestampMs = iprot.readI64();
        struct.setTradeTimestampMsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.assetTradeDetailId = iprot.readI64();
        struct.setAssetTradeDetailIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(18)) {
        struct.sledOrderId = iprot.readString();
        struct.setSledOrderIdIsSet(true);
      }
    }
  }

}

