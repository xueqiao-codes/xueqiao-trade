/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 子账号资金结算时的资金明细
 */
public class SettlementFundDetail implements org.apache.thrift.TBase<SettlementFundDetail, SettlementFundDetail._Fields>, java.io.Serializable, Cloneable, Comparable<SettlementFundDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SettlementFundDetail");

  private static final org.apache.thrift.protocol.TField SETTLEMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PRE_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("preFund", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SETTLEMENT_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DEPOSIT_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("depositAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField WITHDRAW_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField USE_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("useCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField EXCHANGE_RATE_HISTORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeRateHistoryId", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SettlementFundDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SettlementFundDetailTupleSchemeFactory());
  }

  public long settlementId; // optional
  public long subAccountId; // optional
  public double preFund; // optional
  public String currency; // optional
  public long settlementTimestamp; // optional
  public double depositAmount; // optional
  public double withdrawAmount; // optional
  public double closeProfit; // optional
  public double useMargin; // optional
  public double useCommission; // optional
  public long createTimestampMs; // optional
  public long lastModifyTimestampMs; // optional
  public double balance; // optional
  public long exchangeRateHistoryId; // optional
  public double goodsValue; // optional
  public double leverage; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SETTLEMENT_ID((short)1, "settlementId"),
    SUB_ACCOUNT_ID((short)2, "subAccountId"),
    PRE_FUND((short)3, "preFund"),
    CURRENCY((short)4, "currency"),
    SETTLEMENT_TIMESTAMP((short)5, "settlementTimestamp"),
    DEPOSIT_AMOUNT((short)6, "depositAmount"),
    WITHDRAW_AMOUNT((short)7, "withdrawAmount"),
    CLOSE_PROFIT((short)8, "closeProfit"),
    USE_MARGIN((short)9, "useMargin"),
    USE_COMMISSION((short)10, "useCommission"),
    CREATE_TIMESTAMP_MS((short)11, "createTimestampMs"),
    LAST_MODIFY_TIMESTAMP_MS((short)12, "lastModifyTimestampMs"),
    BALANCE((short)13, "balance"),
    EXCHANGE_RATE_HISTORY_ID((short)14, "exchangeRateHistoryId"),
    GOODS_VALUE((short)16, "goodsValue"),
    LEVERAGE((short)17, "leverage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SETTLEMENT_ID
          return SETTLEMENT_ID;
        case 2: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 3: // PRE_FUND
          return PRE_FUND;
        case 4: // CURRENCY
          return CURRENCY;
        case 5: // SETTLEMENT_TIMESTAMP
          return SETTLEMENT_TIMESTAMP;
        case 6: // DEPOSIT_AMOUNT
          return DEPOSIT_AMOUNT;
        case 7: // WITHDRAW_AMOUNT
          return WITHDRAW_AMOUNT;
        case 8: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 9: // USE_MARGIN
          return USE_MARGIN;
        case 10: // USE_COMMISSION
          return USE_COMMISSION;
        case 11: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 12: // LAST_MODIFY_TIMESTAMP_MS
          return LAST_MODIFY_TIMESTAMP_MS;
        case 13: // BALANCE
          return BALANCE;
        case 14: // EXCHANGE_RATE_HISTORY_ID
          return EXCHANGE_RATE_HISTORY_ID;
        case 16: // GOODS_VALUE
          return GOODS_VALUE;
        case 17: // LEVERAGE
          return LEVERAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SETTLEMENTID_ISSET_ID = 0;
  private static final int __SUBACCOUNTID_ISSET_ID = 1;
  private static final int __PREFUND_ISSET_ID = 2;
  private static final int __SETTLEMENTTIMESTAMP_ISSET_ID = 3;
  private static final int __DEPOSITAMOUNT_ISSET_ID = 4;
  private static final int __WITHDRAWAMOUNT_ISSET_ID = 5;
  private static final int __CLOSEPROFIT_ISSET_ID = 6;
  private static final int __USEMARGIN_ISSET_ID = 7;
  private static final int __USECOMMISSION_ISSET_ID = 8;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 9;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 10;
  private static final int __BALANCE_ISSET_ID = 11;
  private static final int __EXCHANGERATEHISTORYID_ISSET_ID = 12;
  private static final int __GOODSVALUE_ISSET_ID = 13;
  private static final int __LEVERAGE_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SETTLEMENT_ID,_Fields.SUB_ACCOUNT_ID,_Fields.PRE_FUND,_Fields.CURRENCY,_Fields.SETTLEMENT_TIMESTAMP,_Fields.DEPOSIT_AMOUNT,_Fields.WITHDRAW_AMOUNT,_Fields.CLOSE_PROFIT,_Fields.USE_MARGIN,_Fields.USE_COMMISSION,_Fields.CREATE_TIMESTAMP_MS,_Fields.LAST_MODIFY_TIMESTAMP_MS,_Fields.BALANCE,_Fields.EXCHANGE_RATE_HISTORY_ID,_Fields.GOODS_VALUE,_Fields.LEVERAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SETTLEMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("settlementId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRE_FUND, new org.apache.thrift.meta_data.FieldMetaData("preFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SETTLEMENT_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("settlementTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DEPOSIT_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("depositAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("withdrawAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("useCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXCHANGE_RATE_HISTORY_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeRateHistoryId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SettlementFundDetail.class, metaDataMap);
  }

  public SettlementFundDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SettlementFundDetail(SettlementFundDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    this.settlementId = other.settlementId;
    this.subAccountId = other.subAccountId;
    this.preFund = other.preFund;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.settlementTimestamp = other.settlementTimestamp;
    this.depositAmount = other.depositAmount;
    this.withdrawAmount = other.withdrawAmount;
    this.closeProfit = other.closeProfit;
    this.useMargin = other.useMargin;
    this.useCommission = other.useCommission;
    this.createTimestampMs = other.createTimestampMs;
    this.lastModifyTimestampMs = other.lastModifyTimestampMs;
    this.balance = other.balance;
    this.exchangeRateHistoryId = other.exchangeRateHistoryId;
    this.goodsValue = other.goodsValue;
    this.leverage = other.leverage;
  }

  public SettlementFundDetail deepCopy() {
    return new SettlementFundDetail(this);
  }

  @Override
  public void clear() {
    setSettlementIdIsSet(false);
    this.settlementId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setPreFundIsSet(false);
    this.preFund = 0.0;
    this.currency = null;
    setSettlementTimestampIsSet(false);
    this.settlementTimestamp = 0;
    setDepositAmountIsSet(false);
    this.depositAmount = 0.0;
    setWithdrawAmountIsSet(false);
    this.withdrawAmount = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setUseCommissionIsSet(false);
    this.useCommission = 0.0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastModifyTimestampMsIsSet(false);
    this.lastModifyTimestampMs = 0;
    setBalanceIsSet(false);
    this.balance = 0.0;
    setExchangeRateHistoryIdIsSet(false);
    this.exchangeRateHistoryId = 0;
    setGoodsValueIsSet(false);
    this.goodsValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
  }

  public long getSettlementId() {
    return this.settlementId;
  }

  public SettlementFundDetail setSettlementId(long settlementId) {
    this.settlementId = settlementId;
    setSettlementIdIsSet(true);
    return this;
  }

  public void unsetSettlementId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  /** Returns true if field settlementId is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementId() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID);
  }

  public void setSettlementIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public SettlementFundDetail setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public double getPreFund() {
    return this.preFund;
  }

  public SettlementFundDetail setPreFund(double preFund) {
    this.preFund = preFund;
    setPreFundIsSet(true);
    return this;
  }

  public void unsetPreFund() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREFUND_ISSET_ID);
  }

  /** Returns true if field preFund is set (has been assigned a value) and false otherwise */
  public boolean isSetPreFund() {
    return EncodingUtils.testBit(__isset_bitfield, __PREFUND_ISSET_ID);
  }

  public void setPreFundIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREFUND_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public SettlementFundDetail setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getSettlementTimestamp() {
    return this.settlementTimestamp;
  }

  public SettlementFundDetail setSettlementTimestamp(long settlementTimestamp) {
    this.settlementTimestamp = settlementTimestamp;
    setSettlementTimestampIsSet(true);
    return this;
  }

  public void unsetSettlementTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SETTLEMENTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field settlementTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetSettlementTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __SETTLEMENTTIMESTAMP_ISSET_ID);
  }

  public void setSettlementTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SETTLEMENTTIMESTAMP_ISSET_ID, value);
  }

  public double getDepositAmount() {
    return this.depositAmount;
  }

  public SettlementFundDetail setDepositAmount(double depositAmount) {
    this.depositAmount = depositAmount;
    setDepositAmountIsSet(true);
    return this;
  }

  public void unsetDepositAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID);
  }

  /** Returns true if field depositAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID);
  }

  public void setDepositAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSITAMOUNT_ISSET_ID, value);
  }

  public double getWithdrawAmount() {
    return this.withdrawAmount;
  }

  public SettlementFundDetail setWithdrawAmount(double withdrawAmount) {
    this.withdrawAmount = withdrawAmount;
    setWithdrawAmountIsSet(true);
    return this;
  }

  public void unsetWithdrawAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  /** Returns true if field withdrawAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID);
  }

  public void setWithdrawAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWAMOUNT_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public SettlementFundDetail setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public SettlementFundDetail setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getUseCommission() {
    return this.useCommission;
  }

  public SettlementFundDetail setUseCommission(double useCommission) {
    this.useCommission = useCommission;
    setUseCommissionIsSet(true);
    return this;
  }

  public void unsetUseCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  /** Returns true if field useCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetUseCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __USECOMMISSION_ISSET_ID);
  }

  public void setUseCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USECOMMISSION_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public SettlementFundDetail setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastModifyTimestampMs() {
    return this.lastModifyTimestampMs;
  }

  public SettlementFundDetail setLastModifyTimestampMs(long lastModifyTimestampMs) {
    this.lastModifyTimestampMs = lastModifyTimestampMs;
    setLastModifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastModifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public double getBalance() {
    return this.balance;
  }

  public SettlementFundDetail setBalance(double balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public long getExchangeRateHistoryId() {
    return this.exchangeRateHistoryId;
  }

  public SettlementFundDetail setExchangeRateHistoryId(long exchangeRateHistoryId) {
    this.exchangeRateHistoryId = exchangeRateHistoryId;
    setExchangeRateHistoryIdIsSet(true);
    return this;
  }

  public void unsetExchangeRateHistoryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGERATEHISTORYID_ISSET_ID);
  }

  /** Returns true if field exchangeRateHistoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeRateHistoryId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGERATEHISTORYID_ISSET_ID);
  }

  public void setExchangeRateHistoryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGERATEHISTORYID_ISSET_ID, value);
  }

  public double getGoodsValue() {
    return this.goodsValue;
  }

  public SettlementFundDetail setGoodsValue(double goodsValue) {
    this.goodsValue = goodsValue;
    setGoodsValueIsSet(true);
    return this;
  }

  public void unsetGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  public void setGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public SettlementFundDetail setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SETTLEMENT_ID:
      if (value == null) {
        unsetSettlementId();
      } else {
        setSettlementId((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case PRE_FUND:
      if (value == null) {
        unsetPreFund();
      } else {
        setPreFund((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case SETTLEMENT_TIMESTAMP:
      if (value == null) {
        unsetSettlementTimestamp();
      } else {
        setSettlementTimestamp((Long)value);
      }
      break;

    case DEPOSIT_AMOUNT:
      if (value == null) {
        unsetDepositAmount();
      } else {
        setDepositAmount((Double)value);
      }
      break;

    case WITHDRAW_AMOUNT:
      if (value == null) {
        unsetWithdrawAmount();
      } else {
        setWithdrawAmount((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case USE_COMMISSION:
      if (value == null) {
        unsetUseCommission();
      } else {
        setUseCommission((Double)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastModifyTimestampMs();
      } else {
        setLastModifyTimestampMs((Long)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Double)value);
      }
      break;

    case EXCHANGE_RATE_HISTORY_ID:
      if (value == null) {
        unsetExchangeRateHistoryId();
      } else {
        setExchangeRateHistoryId((Long)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SETTLEMENT_ID:
      return Long.valueOf(getSettlementId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case PRE_FUND:
      return Double.valueOf(getPreFund());

    case CURRENCY:
      return getCurrency();

    case SETTLEMENT_TIMESTAMP:
      return Long.valueOf(getSettlementTimestamp());

    case DEPOSIT_AMOUNT:
      return Double.valueOf(getDepositAmount());

    case WITHDRAW_AMOUNT:
      return Double.valueOf(getWithdrawAmount());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case USE_COMMISSION:
      return Double.valueOf(getUseCommission());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LAST_MODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastModifyTimestampMs());

    case BALANCE:
      return Double.valueOf(getBalance());

    case EXCHANGE_RATE_HISTORY_ID:
      return Long.valueOf(getExchangeRateHistoryId());

    case GOODS_VALUE:
      return Double.valueOf(getGoodsValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SETTLEMENT_ID:
      return isSetSettlementId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case PRE_FUND:
      return isSetPreFund();
    case CURRENCY:
      return isSetCurrency();
    case SETTLEMENT_TIMESTAMP:
      return isSetSettlementTimestamp();
    case DEPOSIT_AMOUNT:
      return isSetDepositAmount();
    case WITHDRAW_AMOUNT:
      return isSetWithdrawAmount();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case USE_MARGIN:
      return isSetUseMargin();
    case USE_COMMISSION:
      return isSetUseCommission();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LAST_MODIFY_TIMESTAMP_MS:
      return isSetLastModifyTimestampMs();
    case BALANCE:
      return isSetBalance();
    case EXCHANGE_RATE_HISTORY_ID:
      return isSetExchangeRateHistoryId();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case LEVERAGE:
      return isSetLeverage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SettlementFundDetail)
      return this.equals((SettlementFundDetail)that);
    return false;
  }

  public boolean equals(SettlementFundDetail that) {
    if (that == null)
      return false;

    boolean this_present_settlementId = true && this.isSetSettlementId();
    boolean that_present_settlementId = true && that.isSetSettlementId();
    if (this_present_settlementId || that_present_settlementId) {
      if (!(this_present_settlementId && that_present_settlementId))
        return false;
      if (this.settlementId != that.settlementId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_preFund = true && this.isSetPreFund();
    boolean that_present_preFund = true && that.isSetPreFund();
    if (this_present_preFund || that_present_preFund) {
      if (!(this_present_preFund && that_present_preFund))
        return false;
      if (this.preFund != that.preFund)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_settlementTimestamp = true && this.isSetSettlementTimestamp();
    boolean that_present_settlementTimestamp = true && that.isSetSettlementTimestamp();
    if (this_present_settlementTimestamp || that_present_settlementTimestamp) {
      if (!(this_present_settlementTimestamp && that_present_settlementTimestamp))
        return false;
      if (this.settlementTimestamp != that.settlementTimestamp)
        return false;
    }

    boolean this_present_depositAmount = true && this.isSetDepositAmount();
    boolean that_present_depositAmount = true && that.isSetDepositAmount();
    if (this_present_depositAmount || that_present_depositAmount) {
      if (!(this_present_depositAmount && that_present_depositAmount))
        return false;
      if (this.depositAmount != that.depositAmount)
        return false;
    }

    boolean this_present_withdrawAmount = true && this.isSetWithdrawAmount();
    boolean that_present_withdrawAmount = true && that.isSetWithdrawAmount();
    if (this_present_withdrawAmount || that_present_withdrawAmount) {
      if (!(this_present_withdrawAmount && that_present_withdrawAmount))
        return false;
      if (this.withdrawAmount != that.withdrawAmount)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_useCommission = true && this.isSetUseCommission();
    boolean that_present_useCommission = true && that.isSetUseCommission();
    if (this_present_useCommission || that_present_useCommission) {
      if (!(this_present_useCommission && that_present_useCommission))
        return false;
      if (this.useCommission != that.useCommission)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastModifyTimestampMs = true && this.isSetLastModifyTimestampMs();
    boolean that_present_lastModifyTimestampMs = true && that.isSetLastModifyTimestampMs();
    if (this_present_lastModifyTimestampMs || that_present_lastModifyTimestampMs) {
      if (!(this_present_lastModifyTimestampMs && that_present_lastModifyTimestampMs))
        return false;
      if (this.lastModifyTimestampMs != that.lastModifyTimestampMs)
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_exchangeRateHistoryId = true && this.isSetExchangeRateHistoryId();
    boolean that_present_exchangeRateHistoryId = true && that.isSetExchangeRateHistoryId();
    if (this_present_exchangeRateHistoryId || that_present_exchangeRateHistoryId) {
      if (!(this_present_exchangeRateHistoryId && that_present_exchangeRateHistoryId))
        return false;
      if (this.exchangeRateHistoryId != that.exchangeRateHistoryId)
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (this.goodsValue != that.goodsValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SettlementFundDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSettlementId()).compareTo(other.isSetSettlementId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementId, other.settlementId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreFund()).compareTo(other.isSetPreFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preFund, other.preFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSettlementTimestamp()).compareTo(other.isSetSettlementTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSettlementTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementTimestamp, other.settlementTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositAmount()).compareTo(other.isSetDepositAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositAmount, other.depositAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAmount()).compareTo(other.isSetWithdrawAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAmount, other.withdrawAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseCommission()).compareTo(other.isSetUseCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useCommission, other.useCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestampMs()).compareTo(other.isSetLastModifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestampMs, other.lastModifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeRateHistoryId()).compareTo(other.isSetExchangeRateHistoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeRateHistoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeRateHistoryId, other.exchangeRateHistoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SettlementFundDetail(");
    boolean first = true;

    if (isSetSettlementId()) {
      sb.append("settlementId:");
      sb.append(this.settlementId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetPreFund()) {
      if (!first) sb.append(", ");
      sb.append("preFund:");
      sb.append(this.preFund);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetSettlementTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("settlementTimestamp:");
      sb.append(this.settlementTimestamp);
      first = false;
    }
    if (isSetDepositAmount()) {
      if (!first) sb.append(", ");
      sb.append("depositAmount:");
      sb.append(this.depositAmount);
      first = false;
    }
    if (isSetWithdrawAmount()) {
      if (!first) sb.append(", ");
      sb.append("withdrawAmount:");
      sb.append(this.withdrawAmount);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetUseCommission()) {
      if (!first) sb.append(", ");
      sb.append("useCommission:");
      sb.append(this.useCommission);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastModifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestampMs:");
      sb.append(this.lastModifyTimestampMs);
      first = false;
    }
    if (isSetBalance()) {
      if (!first) sb.append(", ");
      sb.append("balance:");
      sb.append(this.balance);
      first = false;
    }
    if (isSetExchangeRateHistoryId()) {
      if (!first) sb.append(", ");
      sb.append("exchangeRateHistoryId:");
      sb.append(this.exchangeRateHistoryId);
      first = false;
    }
    if (isSetGoodsValue()) {
      if (!first) sb.append(", ");
      sb.append("goodsValue:");
      sb.append(this.goodsValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettlementFundDetailStandardSchemeFactory implements SchemeFactory {
    public SettlementFundDetailStandardScheme getScheme() {
      return new SettlementFundDetailStandardScheme();
    }
  }

  private static class SettlementFundDetailStandardScheme extends StandardScheme<SettlementFundDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SettlementFundDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SETTLEMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settlementId = iprot.readI64();
              struct.setSettlementIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRE_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preFund = iprot.readDouble();
              struct.setPreFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SETTLEMENT_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.settlementTimestamp = iprot.readI64();
              struct.setSettlementTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPOSIT_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.depositAmount = iprot.readDouble();
              struct.setDepositAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WITHDRAW_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdrawAmount = iprot.readDouble();
              struct.setWithdrawAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // USE_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useCommission = iprot.readDouble();
              struct.setUseCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LAST_MODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestampMs = iprot.readI64();
              struct.setLastModifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.balance = iprot.readDouble();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // EXCHANGE_RATE_HISTORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.exchangeRateHistoryId = iprot.readI64();
              struct.setExchangeRateHistoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goodsValue = iprot.readDouble();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SettlementFundDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSettlementId()) {
        oprot.writeFieldBegin(SETTLEMENT_ID_FIELD_DESC);
        oprot.writeI64(struct.settlementId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreFund()) {
        oprot.writeFieldBegin(PRE_FUND_FIELD_DESC);
        oprot.writeDouble(struct.preFund);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSettlementTimestamp()) {
        oprot.writeFieldBegin(SETTLEMENT_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.settlementTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepositAmount()) {
        oprot.writeFieldBegin(DEPOSIT_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.depositAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdrawAmount()) {
        oprot.writeFieldBegin(WITHDRAW_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.withdrawAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseCommission()) {
        oprot.writeFieldBegin(USE_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.useCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBalance()) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.balance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExchangeRateHistoryId()) {
        oprot.writeFieldBegin(EXCHANGE_RATE_HISTORY_ID_FIELD_DESC);
        oprot.writeI64(struct.exchangeRateHistoryId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettlementFundDetailTupleSchemeFactory implements SchemeFactory {
    public SettlementFundDetailTupleScheme getScheme() {
      return new SettlementFundDetailTupleScheme();
    }
  }

  private static class SettlementFundDetailTupleScheme extends TupleScheme<SettlementFundDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SettlementFundDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSettlementId()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetPreFund()) {
        optionals.set(2);
      }
      if (struct.isSetCurrency()) {
        optionals.set(3);
      }
      if (struct.isSetSettlementTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetDepositAmount()) {
        optionals.set(5);
      }
      if (struct.isSetWithdrawAmount()) {
        optionals.set(6);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(7);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(8);
      }
      if (struct.isSetUseCommission()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(10);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        optionals.set(11);
      }
      if (struct.isSetBalance()) {
        optionals.set(12);
      }
      if (struct.isSetExchangeRateHistoryId()) {
        optionals.set(13);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(14);
      }
      if (struct.isSetLeverage()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetSettlementId()) {
        oprot.writeI64(struct.settlementId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetPreFund()) {
        oprot.writeDouble(struct.preFund);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetSettlementTimestamp()) {
        oprot.writeI64(struct.settlementTimestamp);
      }
      if (struct.isSetDepositAmount()) {
        oprot.writeDouble(struct.depositAmount);
      }
      if (struct.isSetWithdrawAmount()) {
        oprot.writeDouble(struct.withdrawAmount);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetUseCommission()) {
        oprot.writeDouble(struct.useCommission);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeI64(struct.lastModifyTimestampMs);
      }
      if (struct.isSetBalance()) {
        oprot.writeDouble(struct.balance);
      }
      if (struct.isSetExchangeRateHistoryId()) {
        oprot.writeI64(struct.exchangeRateHistoryId);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeDouble(struct.goodsValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SettlementFundDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.settlementId = iprot.readI64();
        struct.setSettlementIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.preFund = iprot.readDouble();
        struct.setPreFundIsSet(true);
      }
      if (incoming.get(3)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(4)) {
        struct.settlementTimestamp = iprot.readI64();
        struct.setSettlementTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.depositAmount = iprot.readDouble();
        struct.setDepositAmountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withdrawAmount = iprot.readDouble();
        struct.setWithdrawAmountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(8)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.useCommission = iprot.readDouble();
        struct.setUseCommissionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastModifyTimestampMs = iprot.readI64();
        struct.setLastModifyTimestampMsIsSet(true);
      }
      if (incoming.get(12)) {
        struct.balance = iprot.readDouble();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.exchangeRateHistoryId = iprot.readI64();
        struct.setExchangeRateHistoryIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.goodsValue = iprot.readDouble();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(15)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
    }
  }

}

