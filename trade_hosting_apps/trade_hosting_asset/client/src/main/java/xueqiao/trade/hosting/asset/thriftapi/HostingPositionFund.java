/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 雪橇合约资金根据不同价格计算变动信息
 */
public class HostingPositionFund implements org.apache.thrift.TBase<HostingPositionFund, HostingPositionFund._Fields>, java.io.Serializable, Cloneable, Comparable<HostingPositionFund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingPositionFund");

  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CALCULATE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("calculatePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField FROZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)18);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingPositionFundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingPositionFundTupleSchemeFactory());
  }

  public long sledContractId; // optional
  public long subAccountId; // optional
  public double positionProfit; // optional
  public double calculatePrice; // optional
  public double useMargin; // optional
  public double frozenMargin; // optional
  public double frozenCommission; // optional
  public String currency; // optional
  public double goodsValue; // optional
  public double leverage; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_CONTRACT_ID((short)1, "sledContractId"),
    SUB_ACCOUNT_ID((short)2, "subAccountId"),
    POSITION_PROFIT((short)9, "positionProfit"),
    CALCULATE_PRICE((short)11, "calculatePrice"),
    USE_MARGIN((short)12, "useMargin"),
    FROZEN_MARGIN((short)13, "frozenMargin"),
    FROZEN_COMMISSION((short)15, "frozenCommission"),
    CURRENCY((short)16, "currency"),
    GOODS_VALUE((short)17, "goodsValue"),
    LEVERAGE((short)18, "leverage");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 2: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 9: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 11: // CALCULATE_PRICE
          return CALCULATE_PRICE;
        case 12: // USE_MARGIN
          return USE_MARGIN;
        case 13: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 15: // FROZEN_COMMISSION
          return FROZEN_COMMISSION;
        case 16: // CURRENCY
          return CURRENCY;
        case 17: // GOODS_VALUE
          return GOODS_VALUE;
        case 18: // LEVERAGE
          return LEVERAGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCONTRACTID_ISSET_ID = 0;
  private static final int __SUBACCOUNTID_ISSET_ID = 1;
  private static final int __POSITIONPROFIT_ISSET_ID = 2;
  private static final int __CALCULATEPRICE_ISSET_ID = 3;
  private static final int __USEMARGIN_ISSET_ID = 4;
  private static final int __FROZENMARGIN_ISSET_ID = 5;
  private static final int __FROZENCOMMISSION_ISSET_ID = 6;
  private static final int __GOODSVALUE_ISSET_ID = 7;
  private static final int __LEVERAGE_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_CONTRACT_ID,_Fields.SUB_ACCOUNT_ID,_Fields.POSITION_PROFIT,_Fields.CALCULATE_PRICE,_Fields.USE_MARGIN,_Fields.FROZEN_MARGIN,_Fields.FROZEN_COMMISSION,_Fields.CURRENCY,_Fields.GOODS_VALUE,_Fields.LEVERAGE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CALCULATE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("calculatePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("frozenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingPositionFund.class, metaDataMap);
  }

  public HostingPositionFund() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingPositionFund(HostingPositionFund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledContractId = other.sledContractId;
    this.subAccountId = other.subAccountId;
    this.positionProfit = other.positionProfit;
    this.calculatePrice = other.calculatePrice;
    this.useMargin = other.useMargin;
    this.frozenMargin = other.frozenMargin;
    this.frozenCommission = other.frozenCommission;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.goodsValue = other.goodsValue;
    this.leverage = other.leverage;
  }

  public HostingPositionFund deepCopy() {
    return new HostingPositionFund(this);
  }

  @Override
  public void clear() {
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCalculatePriceIsSet(false);
    this.calculatePrice = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setFrozenCommissionIsSet(false);
    this.frozenCommission = 0.0;
    this.currency = null;
    setGoodsValueIsSet(false);
    this.goodsValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public HostingPositionFund setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingPositionFund setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public HostingPositionFund setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCalculatePrice() {
    return this.calculatePrice;
  }

  public HostingPositionFund setCalculatePrice(double calculatePrice) {
    this.calculatePrice = calculatePrice;
    setCalculatePriceIsSet(true);
    return this;
  }

  public void unsetCalculatePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  /** Returns true if field calculatePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCalculatePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  public void setCalculatePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public HostingPositionFund setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public HostingPositionFund setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getFrozenCommission() {
    return this.frozenCommission;
  }

  public HostingPositionFund setFrozenCommission(double frozenCommission) {
    this.frozenCommission = frozenCommission;
    setFrozenCommissionIsSet(true);
    return this;
  }

  public void unsetFrozenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field frozenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID);
  }

  public void setFrozenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCOMMISSION_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public HostingPositionFund setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getGoodsValue() {
    return this.goodsValue;
  }

  public HostingPositionFund setGoodsValue(double goodsValue) {
    this.goodsValue = goodsValue;
    setGoodsValueIsSet(true);
    return this;
  }

  public void unsetGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  public void setGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public HostingPositionFund setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case CALCULATE_PRICE:
      if (value == null) {
        unsetCalculatePrice();
      } else {
        setCalculatePrice((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case FROZEN_COMMISSION:
      if (value == null) {
        unsetFrozenCommission();
      } else {
        setFrozenCommission((Double)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case CALCULATE_PRICE:
      return Double.valueOf(getCalculatePrice());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case FROZEN_COMMISSION:
      return Double.valueOf(getFrozenCommission());

    case CURRENCY:
      return getCurrency();

    case GOODS_VALUE:
      return Double.valueOf(getGoodsValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case CALCULATE_PRICE:
      return isSetCalculatePrice();
    case USE_MARGIN:
      return isSetUseMargin();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case FROZEN_COMMISSION:
      return isSetFrozenCommission();
    case CURRENCY:
      return isSetCurrency();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case LEVERAGE:
      return isSetLeverage();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingPositionFund)
      return this.equals((HostingPositionFund)that);
    return false;
  }

  public boolean equals(HostingPositionFund that) {
    if (that == null)
      return false;

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_calculatePrice = true && this.isSetCalculatePrice();
    boolean that_present_calculatePrice = true && that.isSetCalculatePrice();
    if (this_present_calculatePrice || that_present_calculatePrice) {
      if (!(this_present_calculatePrice && that_present_calculatePrice))
        return false;
      if (this.calculatePrice != that.calculatePrice)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_frozenCommission = true && this.isSetFrozenCommission();
    boolean that_present_frozenCommission = true && that.isSetFrozenCommission();
    if (this_present_frozenCommission || that_present_frozenCommission) {
      if (!(this_present_frozenCommission && that_present_frozenCommission))
        return false;
      if (this.frozenCommission != that.frozenCommission)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (this.goodsValue != that.goodsValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingPositionFund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCalculatePrice()).compareTo(other.isSetCalculatePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalculatePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calculatePrice, other.calculatePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCommission()).compareTo(other.isSetFrozenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCommission, other.frozenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingPositionFund(");
    boolean first = true;

    if (isSetSledContractId()) {
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetCalculatePrice()) {
      if (!first) sb.append(", ");
      sb.append("calculatePrice:");
      sb.append(this.calculatePrice);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetFrozenCommission()) {
      if (!first) sb.append(", ");
      sb.append("frozenCommission:");
      sb.append(this.frozenCommission);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetGoodsValue()) {
      if (!first) sb.append(", ");
      sb.append("goodsValue:");
      sb.append(this.goodsValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingPositionFundStandardSchemeFactory implements SchemeFactory {
    public HostingPositionFundStandardScheme getScheme() {
      return new HostingPositionFundStandardScheme();
    }
  }

  private static class HostingPositionFundStandardScheme extends StandardScheme<HostingPositionFund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingPositionFund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CALCULATE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.calculatePrice = iprot.readDouble();
              struct.setCalculatePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FROZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCommission = iprot.readDouble();
              struct.setFrozenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goodsValue = iprot.readDouble();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingPositionFund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeFieldBegin(CALCULATE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.calculatePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeFieldBegin(FROZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.frozenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingPositionFundTupleSchemeFactory implements SchemeFactory {
    public HostingPositionFundTupleScheme getScheme() {
      return new HostingPositionFundTupleScheme();
    }
  }

  private static class HostingPositionFundTupleScheme extends TupleScheme<HostingPositionFund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingPositionFund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledContractId()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(2);
      }
      if (struct.isSetCalculatePrice()) {
        optionals.set(3);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(4);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(5);
      }
      if (struct.isSetFrozenCommission()) {
        optionals.set(6);
      }
      if (struct.isSetCurrency()) {
        optionals.set(7);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(8);
      }
      if (struct.isSetLeverage()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeDouble(struct.calculatePrice);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetFrozenCommission()) {
        oprot.writeDouble(struct.frozenCommission);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeDouble(struct.goodsValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingPositionFund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.calculatePrice = iprot.readDouble();
        struct.setCalculatePriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(5)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.frozenCommission = iprot.readDouble();
        struct.setFrozenCommissionIsSet(true);
      }
      if (incoming.get(7)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(8)) {
        struct.goodsValue = iprot.readDouble();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(9)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
    }
  }

}

