/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 计算参数
 * 成交时的商品设置信息, 做存档排查(来源: 商品信息或者用户设置)
 */
public class AssetCalculateConfig implements org.apache.thrift.TBase<AssetCalculateConfig, AssetCalculateConfig._Fields>, java.io.Serializable, Cloneable, Comparable<AssetCalculateConfig> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AssetCalculateConfig");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTRACT_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSize", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField CHARGE_UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("chargeUnit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField COMMISSION_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionFee", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("margin", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("initialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField SELL_INITIAL_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("sellInitialMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField COMMISSION_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionCalculateMode", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField MARGIN_CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginCalculateMode", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AssetCalculateConfigStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AssetCalculateConfigTupleSchemeFactory());
  }

  public long sledCommodityId; // optional
  public String currency; // optional
  public double contractSize; // optional
  public double chargeUnit; // optional
  public CommissionFee commissionFee; // optional
  public Margin margin; // optional
  public long sledContractId; // optional
  public double openCloseFee; // optional
  public double initialMargin; // optional
  public double sellInitialMargin; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode commissionCalculateMode; // optional
  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode marginCalculateMode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    CURRENCY((short)2, "currency"),
    CONTRACT_SIZE((short)3, "contractSize"),
    CHARGE_UNIT((short)4, "chargeUnit"),
    COMMISSION_FEE((short)10, "commissionFee"),
    MARGIN((short)11, "margin"),
    SLED_CONTRACT_ID((short)12, "sledContractId"),
    OPEN_CLOSE_FEE((short)5, "openCloseFee"),
    INITIAL_MARGIN((short)6, "initialMargin"),
    SELL_INITIAL_MARGIN((short)7, "sellInitialMargin"),
    /**
     * 
     * @see CalculateMode
     */
    COMMISSION_CALCULATE_MODE((short)8, "commissionCalculateMode"),
    /**
     * 
     * @see CalculateMode
     */
    MARGIN_CALCULATE_MODE((short)9, "marginCalculateMode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // CONTRACT_SIZE
          return CONTRACT_SIZE;
        case 4: // CHARGE_UNIT
          return CHARGE_UNIT;
        case 10: // COMMISSION_FEE
          return COMMISSION_FEE;
        case 11: // MARGIN
          return MARGIN;
        case 12: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 5: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 6: // INITIAL_MARGIN
          return INITIAL_MARGIN;
        case 7: // SELL_INITIAL_MARGIN
          return SELL_INITIAL_MARGIN;
        case 8: // COMMISSION_CALCULATE_MODE
          return COMMISSION_CALCULATE_MODE;
        case 9: // MARGIN_CALCULATE_MODE
          return MARGIN_CALCULATE_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __CONTRACTSIZE_ISSET_ID = 1;
  private static final int __CHARGEUNIT_ISSET_ID = 2;
  private static final int __SLEDCONTRACTID_ISSET_ID = 3;
  private static final int __OPENCLOSEFEE_ISSET_ID = 4;
  private static final int __INITIALMARGIN_ISSET_ID = 5;
  private static final int __SELLINITIALMARGIN_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.CURRENCY,_Fields.CONTRACT_SIZE,_Fields.CHARGE_UNIT,_Fields.COMMISSION_FEE,_Fields.MARGIN,_Fields.SLED_CONTRACT_ID,_Fields.OPEN_CLOSE_FEE,_Fields.INITIAL_MARGIN,_Fields.SELL_INITIAL_MARGIN,_Fields.COMMISSION_CALCULATE_MODE,_Fields.MARGIN_CALCULATE_MODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SIZE, new org.apache.thrift.meta_data.FieldMetaData("contractSize", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHARGE_UNIT, new org.apache.thrift.meta_data.FieldMetaData("chargeUnit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION_FEE, new org.apache.thrift.meta_data.FieldMetaData("commissionFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommissionFee.class)));
    tmpMap.put(_Fields.MARGIN, new org.apache.thrift.meta_data.FieldMetaData("margin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Margin.class)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("initialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SELL_INITIAL_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("sellInitialMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("commissionCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    tmpMap.put(_Fields.MARGIN_CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("marginCalculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CalculateMode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AssetCalculateConfig.class, metaDataMap);
  }

  public AssetCalculateConfig() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AssetCalculateConfig(AssetCalculateConfig other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.contractSize = other.contractSize;
    this.chargeUnit = other.chargeUnit;
    if (other.isSetCommissionFee()) {
      this.commissionFee = new CommissionFee(other.commissionFee);
    }
    if (other.isSetMargin()) {
      this.margin = new Margin(other.margin);
    }
    this.sledContractId = other.sledContractId;
    this.openCloseFee = other.openCloseFee;
    this.initialMargin = other.initialMargin;
    this.sellInitialMargin = other.sellInitialMargin;
    if (other.isSetCommissionCalculateMode()) {
      this.commissionCalculateMode = other.commissionCalculateMode;
    }
    if (other.isSetMarginCalculateMode()) {
      this.marginCalculateMode = other.marginCalculateMode;
    }
  }

  public AssetCalculateConfig deepCopy() {
    return new AssetCalculateConfig(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.currency = null;
    setContractSizeIsSet(false);
    this.contractSize = 0.0;
    setChargeUnitIsSet(false);
    this.chargeUnit = 0.0;
    this.commissionFee = null;
    this.margin = null;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    setInitialMarginIsSet(false);
    this.initialMargin = 0.0;
    setSellInitialMarginIsSet(false);
    this.sellInitialMargin = 0.0;
    this.commissionCalculateMode = null;
    this.marginCalculateMode = null;
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public AssetCalculateConfig setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public AssetCalculateConfig setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getContractSize() {
    return this.contractSize;
  }

  public AssetCalculateConfig setContractSize(double contractSize) {
    this.contractSize = contractSize;
    setContractSizeIsSet(true);
    return this;
  }

  public void unsetContractSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  /** Returns true if field contractSize is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSize() {
    return EncodingUtils.testBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID);
  }

  public void setContractSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONTRACTSIZE_ISSET_ID, value);
  }

  public double getChargeUnit() {
    return this.chargeUnit;
  }

  public AssetCalculateConfig setChargeUnit(double chargeUnit) {
    this.chargeUnit = chargeUnit;
    setChargeUnitIsSet(true);
    return this;
  }

  public void unsetChargeUnit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID);
  }

  /** Returns true if field chargeUnit is set (has been assigned a value) and false otherwise */
  public boolean isSetChargeUnit() {
    return EncodingUtils.testBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID);
  }

  public void setChargeUnitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHARGEUNIT_ISSET_ID, value);
  }

  public CommissionFee getCommissionFee() {
    return this.commissionFee;
  }

  public AssetCalculateConfig setCommissionFee(CommissionFee commissionFee) {
    this.commissionFee = commissionFee;
    return this;
  }

  public void unsetCommissionFee() {
    this.commissionFee = null;
  }

  /** Returns true if field commissionFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionFee() {
    return this.commissionFee != null;
  }

  public void setCommissionFeeIsSet(boolean value) {
    if (!value) {
      this.commissionFee = null;
    }
  }

  public Margin getMargin() {
    return this.margin;
  }

  public AssetCalculateConfig setMargin(Margin margin) {
    this.margin = margin;
    return this;
  }

  public void unsetMargin() {
    this.margin = null;
  }

  /** Returns true if field margin is set (has been assigned a value) and false otherwise */
  public boolean isSetMargin() {
    return this.margin != null;
  }

  public void setMarginIsSet(boolean value) {
    if (!value) {
      this.margin = null;
    }
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public AssetCalculateConfig setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public AssetCalculateConfig setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  public double getInitialMargin() {
    return this.initialMargin;
  }

  public AssetCalculateConfig setInitialMargin(double initialMargin) {
    this.initialMargin = initialMargin;
    setInitialMarginIsSet(true);
    return this;
  }

  public void unsetInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field initialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID);
  }

  public void setInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INITIALMARGIN_ISSET_ID, value);
  }

  public double getSellInitialMargin() {
    return this.sellInitialMargin;
  }

  public AssetCalculateConfig setSellInitialMargin(double sellInitialMargin) {
    this.sellInitialMargin = sellInitialMargin;
    setSellInitialMarginIsSet(true);
    return this;
  }

  public void unsetSellInitialMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  /** Returns true if field sellInitialMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetSellInitialMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID);
  }

  public void setSellInitialMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELLINITIALMARGIN_ISSET_ID, value);
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getCommissionCalculateMode() {
    return this.commissionCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public AssetCalculateConfig setCommissionCalculateMode(CalculateMode commissionCalculateMode) {
    this.commissionCalculateMode = commissionCalculateMode;
    return this;
  }

  public void unsetCommissionCalculateMode() {
    this.commissionCalculateMode = null;
  }

  /** Returns true if field commissionCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionCalculateMode() {
    return this.commissionCalculateMode != null;
  }

  public void setCommissionCalculateModeIsSet(boolean value) {
    if (!value) {
      this.commissionCalculateMode = null;
    }
  }

  /**
   * 
   * @see CalculateMode
   */
  public CalculateMode getMarginCalculateMode() {
    return this.marginCalculateMode;
  }

  /**
   * 
   * @see CalculateMode
   */
  public AssetCalculateConfig setMarginCalculateMode(CalculateMode marginCalculateMode) {
    this.marginCalculateMode = marginCalculateMode;
    return this;
  }

  public void unsetMarginCalculateMode() {
    this.marginCalculateMode = null;
  }

  /** Returns true if field marginCalculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginCalculateMode() {
    return this.marginCalculateMode != null;
  }

  public void setMarginCalculateModeIsSet(boolean value) {
    if (!value) {
      this.marginCalculateMode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case CONTRACT_SIZE:
      if (value == null) {
        unsetContractSize();
      } else {
        setContractSize((Double)value);
      }
      break;

    case CHARGE_UNIT:
      if (value == null) {
        unsetChargeUnit();
      } else {
        setChargeUnit((Double)value);
      }
      break;

    case COMMISSION_FEE:
      if (value == null) {
        unsetCommissionFee();
      } else {
        setCommissionFee((CommissionFee)value);
      }
      break;

    case MARGIN:
      if (value == null) {
        unsetMargin();
      } else {
        setMargin((Margin)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case INITIAL_MARGIN:
      if (value == null) {
        unsetInitialMargin();
      } else {
        setInitialMargin((Double)value);
      }
      break;

    case SELL_INITIAL_MARGIN:
      if (value == null) {
        unsetSellInitialMargin();
      } else {
        setSellInitialMargin((Double)value);
      }
      break;

    case COMMISSION_CALCULATE_MODE:
      if (value == null) {
        unsetCommissionCalculateMode();
      } else {
        setCommissionCalculateMode((CalculateMode)value);
      }
      break;

    case MARGIN_CALCULATE_MODE:
      if (value == null) {
        unsetMarginCalculateMode();
      } else {
        setMarginCalculateMode((CalculateMode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case CURRENCY:
      return getCurrency();

    case CONTRACT_SIZE:
      return Double.valueOf(getContractSize());

    case CHARGE_UNIT:
      return Double.valueOf(getChargeUnit());

    case COMMISSION_FEE:
      return getCommissionFee();

    case MARGIN:
      return getMargin();

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case INITIAL_MARGIN:
      return Double.valueOf(getInitialMargin());

    case SELL_INITIAL_MARGIN:
      return Double.valueOf(getSellInitialMargin());

    case COMMISSION_CALCULATE_MODE:
      return getCommissionCalculateMode();

    case MARGIN_CALCULATE_MODE:
      return getMarginCalculateMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case CURRENCY:
      return isSetCurrency();
    case CONTRACT_SIZE:
      return isSetContractSize();
    case CHARGE_UNIT:
      return isSetChargeUnit();
    case COMMISSION_FEE:
      return isSetCommissionFee();
    case MARGIN:
      return isSetMargin();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case INITIAL_MARGIN:
      return isSetInitialMargin();
    case SELL_INITIAL_MARGIN:
      return isSetSellInitialMargin();
    case COMMISSION_CALCULATE_MODE:
      return isSetCommissionCalculateMode();
    case MARGIN_CALCULATE_MODE:
      return isSetMarginCalculateMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AssetCalculateConfig)
      return this.equals((AssetCalculateConfig)that);
    return false;
  }

  public boolean equals(AssetCalculateConfig that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_contractSize = true && this.isSetContractSize();
    boolean that_present_contractSize = true && that.isSetContractSize();
    if (this_present_contractSize || that_present_contractSize) {
      if (!(this_present_contractSize && that_present_contractSize))
        return false;
      if (this.contractSize != that.contractSize)
        return false;
    }

    boolean this_present_chargeUnit = true && this.isSetChargeUnit();
    boolean that_present_chargeUnit = true && that.isSetChargeUnit();
    if (this_present_chargeUnit || that_present_chargeUnit) {
      if (!(this_present_chargeUnit && that_present_chargeUnit))
        return false;
      if (this.chargeUnit != that.chargeUnit)
        return false;
    }

    boolean this_present_commissionFee = true && this.isSetCommissionFee();
    boolean that_present_commissionFee = true && that.isSetCommissionFee();
    if (this_present_commissionFee || that_present_commissionFee) {
      if (!(this_present_commissionFee && that_present_commissionFee))
        return false;
      if (!this.commissionFee.equals(that.commissionFee))
        return false;
    }

    boolean this_present_margin = true && this.isSetMargin();
    boolean that_present_margin = true && that.isSetMargin();
    if (this_present_margin || that_present_margin) {
      if (!(this_present_margin && that_present_margin))
        return false;
      if (!this.margin.equals(that.margin))
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_initialMargin = true && this.isSetInitialMargin();
    boolean that_present_initialMargin = true && that.isSetInitialMargin();
    if (this_present_initialMargin || that_present_initialMargin) {
      if (!(this_present_initialMargin && that_present_initialMargin))
        return false;
      if (this.initialMargin != that.initialMargin)
        return false;
    }

    boolean this_present_sellInitialMargin = true && this.isSetSellInitialMargin();
    boolean that_present_sellInitialMargin = true && that.isSetSellInitialMargin();
    if (this_present_sellInitialMargin || that_present_sellInitialMargin) {
      if (!(this_present_sellInitialMargin && that_present_sellInitialMargin))
        return false;
      if (this.sellInitialMargin != that.sellInitialMargin)
        return false;
    }

    boolean this_present_commissionCalculateMode = true && this.isSetCommissionCalculateMode();
    boolean that_present_commissionCalculateMode = true && that.isSetCommissionCalculateMode();
    if (this_present_commissionCalculateMode || that_present_commissionCalculateMode) {
      if (!(this_present_commissionCalculateMode && that_present_commissionCalculateMode))
        return false;
      if (!this.commissionCalculateMode.equals(that.commissionCalculateMode))
        return false;
    }

    boolean this_present_marginCalculateMode = true && this.isSetMarginCalculateMode();
    boolean that_present_marginCalculateMode = true && that.isSetMarginCalculateMode();
    if (this_present_marginCalculateMode || that_present_marginCalculateMode) {
      if (!(this_present_marginCalculateMode && that_present_marginCalculateMode))
        return false;
      if (!this.marginCalculateMode.equals(that.marginCalculateMode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(AssetCalculateConfig other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSize()).compareTo(other.isSetContractSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSize, other.contractSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChargeUnit()).compareTo(other.isSetChargeUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChargeUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chargeUnit, other.chargeUnit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionFee()).compareTo(other.isSetCommissionFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionFee, other.commissionFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMargin()).compareTo(other.isSetMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.margin, other.margin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInitialMargin()).compareTo(other.isSetInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.initialMargin, other.initialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSellInitialMargin()).compareTo(other.isSetSellInitialMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSellInitialMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sellInitialMargin, other.sellInitialMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionCalculateMode()).compareTo(other.isSetCommissionCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionCalculateMode, other.commissionCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginCalculateMode()).compareTo(other.isSetMarginCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginCalculateMode, other.marginCalculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AssetCalculateConfig(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetContractSize()) {
      if (!first) sb.append(", ");
      sb.append("contractSize:");
      sb.append(this.contractSize);
      first = false;
    }
    if (isSetChargeUnit()) {
      if (!first) sb.append(", ");
      sb.append("chargeUnit:");
      sb.append(this.chargeUnit);
      first = false;
    }
    if (isSetCommissionFee()) {
      if (!first) sb.append(", ");
      sb.append("commissionFee:");
      if (this.commissionFee == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionFee);
      }
      first = false;
    }
    if (isSetMargin()) {
      if (!first) sb.append(", ");
      sb.append("margin:");
      if (this.margin == null) {
        sb.append("null");
      } else {
        sb.append(this.margin);
      }
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("initialMargin:");
      sb.append(this.initialMargin);
      first = false;
    }
    if (isSetSellInitialMargin()) {
      if (!first) sb.append(", ");
      sb.append("sellInitialMargin:");
      sb.append(this.sellInitialMargin);
      first = false;
    }
    if (isSetCommissionCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("commissionCalculateMode:");
      if (this.commissionCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionCalculateMode);
      }
      first = false;
    }
    if (isSetMarginCalculateMode()) {
      if (!first) sb.append(", ");
      sb.append("marginCalculateMode:");
      if (this.marginCalculateMode == null) {
        sb.append("null");
      } else {
        sb.append(this.marginCalculateMode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (commissionFee != null) {
      commissionFee.validate();
    }
    if (margin != null) {
      margin.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AssetCalculateConfigStandardSchemeFactory implements SchemeFactory {
    public AssetCalculateConfigStandardScheme getScheme() {
      return new AssetCalculateConfigStandardScheme();
    }
  }

  private static class AssetCalculateConfigStandardScheme extends StandardScheme<AssetCalculateConfig> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AssetCalculateConfig struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTRACT_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.contractSize = iprot.readDouble();
              struct.setContractSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHARGE_UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chargeUnit = iprot.readDouble();
              struct.setChargeUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // COMMISSION_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commissionFee = new CommissionFee();
              struct.commissionFee.read(iprot);
              struct.setCommissionFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.margin = new Margin();
              struct.margin.read(iprot);
              struct.setMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.initialMargin = iprot.readDouble();
              struct.setInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SELL_INITIAL_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.sellInitialMargin = iprot.readDouble();
              struct.setSellInitialMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMISSION_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setCommissionCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MARGIN_CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
              struct.setMarginCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AssetCalculateConfig struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetContractSize()) {
        oprot.writeFieldBegin(CONTRACT_SIZE_FIELD_DESC);
        oprot.writeDouble(struct.contractSize);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChargeUnit()) {
        oprot.writeFieldBegin(CHARGE_UNIT_FIELD_DESC);
        oprot.writeDouble(struct.chargeUnit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeFieldBegin(INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.initialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeFieldBegin(SELL_INITIAL_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.sellInitialMargin);
        oprot.writeFieldEnd();
      }
      if (struct.commissionCalculateMode != null) {
        if (struct.isSetCommissionCalculateMode()) {
          oprot.writeFieldBegin(COMMISSION_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.commissionCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.marginCalculateMode != null) {
        if (struct.isSetMarginCalculateMode()) {
          oprot.writeFieldBegin(MARGIN_CALCULATE_MODE_FIELD_DESC);
          oprot.writeI32(struct.marginCalculateMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commissionFee != null) {
        if (struct.isSetCommissionFee()) {
          oprot.writeFieldBegin(COMMISSION_FEE_FIELD_DESC);
          struct.commissionFee.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.margin != null) {
        if (struct.isSetMargin()) {
          oprot.writeFieldBegin(MARGIN_FIELD_DESC);
          struct.margin.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AssetCalculateConfigTupleSchemeFactory implements SchemeFactory {
    public AssetCalculateConfigTupleScheme getScheme() {
      return new AssetCalculateConfigTupleScheme();
    }
  }

  private static class AssetCalculateConfigTupleScheme extends TupleScheme<AssetCalculateConfig> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AssetCalculateConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetContractSize()) {
        optionals.set(2);
      }
      if (struct.isSetChargeUnit()) {
        optionals.set(3);
      }
      if (struct.isSetCommissionFee()) {
        optionals.set(4);
      }
      if (struct.isSetMargin()) {
        optionals.set(5);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(6);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(7);
      }
      if (struct.isSetInitialMargin()) {
        optionals.set(8);
      }
      if (struct.isSetSellInitialMargin()) {
        optionals.set(9);
      }
      if (struct.isSetCommissionCalculateMode()) {
        optionals.set(10);
      }
      if (struct.isSetMarginCalculateMode()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetContractSize()) {
        oprot.writeDouble(struct.contractSize);
      }
      if (struct.isSetChargeUnit()) {
        oprot.writeDouble(struct.chargeUnit);
      }
      if (struct.isSetCommissionFee()) {
        struct.commissionFee.write(oprot);
      }
      if (struct.isSetMargin()) {
        struct.margin.write(oprot);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetInitialMargin()) {
        oprot.writeDouble(struct.initialMargin);
      }
      if (struct.isSetSellInitialMargin()) {
        oprot.writeDouble(struct.sellInitialMargin);
      }
      if (struct.isSetCommissionCalculateMode()) {
        oprot.writeI32(struct.commissionCalculateMode.getValue());
      }
      if (struct.isSetMarginCalculateMode()) {
        oprot.writeI32(struct.marginCalculateMode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AssetCalculateConfig struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.contractSize = iprot.readDouble();
        struct.setContractSizeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chargeUnit = iprot.readDouble();
        struct.setChargeUnitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.commissionFee = new CommissionFee();
        struct.commissionFee.read(iprot);
        struct.setCommissionFeeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.margin = new Margin();
        struct.margin.read(iprot);
        struct.setMarginIsSet(true);
      }
      if (incoming.get(6)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.initialMargin = iprot.readDouble();
        struct.setInitialMarginIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sellInitialMargin = iprot.readDouble();
        struct.setSellInitialMarginIsSet(true);
      }
      if (incoming.get(10)) {
        struct.commissionCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setCommissionCalculateModeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.marginCalculateMode = CalculateMode.findByValue(iprot.readI32());
        struct.setMarginCalculateModeIsSet(true);
      }
    }
  }

}

