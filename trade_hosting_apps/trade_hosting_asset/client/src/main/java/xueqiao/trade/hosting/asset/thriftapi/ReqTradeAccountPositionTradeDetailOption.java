/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqTradeAccountPositionTradeDetailOption implements org.apache.thrift.TBase<ReqTradeAccountPositionTradeDetailOption, ReqTradeAccountPositionTradeDetailOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqTradeAccountPositionTradeDetailOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqTradeAccountPositionTradeDetailOption");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField START_TRADE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("startTradeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField END_TRADE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("endTradeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqTradeAccountPositionTradeDetailOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqTradeAccountPositionTradeDetailOptionTupleSchemeFactory());
  }

  public long tradeAccountId; // optional
  public long sledContractId; // optional
  public long startTradeTimestampMs; // optional
  public long endTradeTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT_ID((short)1, "tradeAccountId"),
    SLED_CONTRACT_ID((short)2, "sledContractId"),
    START_TRADE_TIMESTAMP_MS((short)10, "startTradeTimestampMs"),
    END_TRADE_TIMESTAMP_MS((short)11, "endTradeTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 2: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 10: // START_TRADE_TIMESTAMP_MS
          return START_TRADE_TIMESTAMP_MS;
        case 11: // END_TRADE_TIMESTAMP_MS
          return END_TRADE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private static final int __STARTTRADETIMESTAMPMS_ISSET_ID = 2;
  private static final int __ENDTRADETIMESTAMPMS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT_ID,_Fields.SLED_CONTRACT_ID,_Fields.START_TRADE_TIMESTAMP_MS,_Fields.END_TRADE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TRADE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("startTradeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TRADE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("endTradeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqTradeAccountPositionTradeDetailOption.class, metaDataMap);
  }

  public ReqTradeAccountPositionTradeDetailOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqTradeAccountPositionTradeDetailOption(ReqTradeAccountPositionTradeDetailOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeAccountId = other.tradeAccountId;
    this.sledContractId = other.sledContractId;
    this.startTradeTimestampMs = other.startTradeTimestampMs;
    this.endTradeTimestampMs = other.endTradeTimestampMs;
  }

  public ReqTradeAccountPositionTradeDetailOption deepCopy() {
    return new ReqTradeAccountPositionTradeDetailOption(this);
  }

  @Override
  public void clear() {
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setStartTradeTimestampMsIsSet(false);
    this.startTradeTimestampMs = 0;
    setEndTradeTimestampMsIsSet(false);
    this.endTradeTimestampMs = 0;
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public ReqTradeAccountPositionTradeDetailOption setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public ReqTradeAccountPositionTradeDetailOption setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getStartTradeTimestampMs() {
    return this.startTradeTimestampMs;
  }

  public ReqTradeAccountPositionTradeDetailOption setStartTradeTimestampMs(long startTradeTimestampMs) {
    this.startTradeTimestampMs = startTradeTimestampMs;
    setStartTradeTimestampMsIsSet(true);
    return this;
  }

  public void unsetStartTradeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field startTradeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTradeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID);
  }

  public void setStartTradeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID, value);
  }

  public long getEndTradeTimestampMs() {
    return this.endTradeTimestampMs;
  }

  public ReqTradeAccountPositionTradeDetailOption setEndTradeTimestampMs(long endTradeTimestampMs) {
    this.endTradeTimestampMs = endTradeTimestampMs;
    setEndTradeTimestampMsIsSet(true);
    return this;
  }

  public void unsetEndTradeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field endTradeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTradeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID);
  }

  public void setEndTradeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case START_TRADE_TIMESTAMP_MS:
      if (value == null) {
        unsetStartTradeTimestampMs();
      } else {
        setStartTradeTimestampMs((Long)value);
      }
      break;

    case END_TRADE_TIMESTAMP_MS:
      if (value == null) {
        unsetEndTradeTimestampMs();
      } else {
        setEndTradeTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case START_TRADE_TIMESTAMP_MS:
      return Long.valueOf(getStartTradeTimestampMs());

    case END_TRADE_TIMESTAMP_MS:
      return Long.valueOf(getEndTradeTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case START_TRADE_TIMESTAMP_MS:
      return isSetStartTradeTimestampMs();
    case END_TRADE_TIMESTAMP_MS:
      return isSetEndTradeTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqTradeAccountPositionTradeDetailOption)
      return this.equals((ReqTradeAccountPositionTradeDetailOption)that);
    return false;
  }

  public boolean equals(ReqTradeAccountPositionTradeDetailOption that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_startTradeTimestampMs = true && this.isSetStartTradeTimestampMs();
    boolean that_present_startTradeTimestampMs = true && that.isSetStartTradeTimestampMs();
    if (this_present_startTradeTimestampMs || that_present_startTradeTimestampMs) {
      if (!(this_present_startTradeTimestampMs && that_present_startTradeTimestampMs))
        return false;
      if (this.startTradeTimestampMs != that.startTradeTimestampMs)
        return false;
    }

    boolean this_present_endTradeTimestampMs = true && this.isSetEndTradeTimestampMs();
    boolean that_present_endTradeTimestampMs = true && that.isSetEndTradeTimestampMs();
    if (this_present_endTradeTimestampMs || that_present_endTradeTimestampMs) {
      if (!(this_present_endTradeTimestampMs && that_present_endTradeTimestampMs))
        return false;
      if (this.endTradeTimestampMs != that.endTradeTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqTradeAccountPositionTradeDetailOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTradeTimestampMs()).compareTo(other.isSetStartTradeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTradeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTradeTimestampMs, other.startTradeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTradeTimestampMs()).compareTo(other.isSetEndTradeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTradeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTradeTimestampMs, other.endTradeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqTradeAccountPositionTradeDetailOption(");
    boolean first = true;

    if (isSetTradeAccountId()) {
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetStartTradeTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("startTradeTimestampMs:");
      sb.append(this.startTradeTimestampMs);
      first = false;
    }
    if (isSetEndTradeTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("endTradeTimestampMs:");
      sb.append(this.endTradeTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqTradeAccountPositionTradeDetailOptionStandardSchemeFactory implements SchemeFactory {
    public ReqTradeAccountPositionTradeDetailOptionStandardScheme getScheme() {
      return new ReqTradeAccountPositionTradeDetailOptionStandardScheme();
    }
  }

  private static class ReqTradeAccountPositionTradeDetailOptionStandardScheme extends StandardScheme<ReqTradeAccountPositionTradeDetailOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqTradeAccountPositionTradeDetailOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START_TRADE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTradeTimestampMs = iprot.readI64();
              struct.setStartTradeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // END_TRADE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTradeTimestampMs = iprot.readI64();
              struct.setEndTradeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqTradeAccountPositionTradeDetailOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartTradeTimestampMs()) {
        oprot.writeFieldBegin(START_TRADE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.startTradeTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTradeTimestampMs()) {
        oprot.writeFieldBegin(END_TRADE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.endTradeTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqTradeAccountPositionTradeDetailOptionTupleSchemeFactory implements SchemeFactory {
    public ReqTradeAccountPositionTradeDetailOptionTupleScheme getScheme() {
      return new ReqTradeAccountPositionTradeDetailOptionTupleScheme();
    }
  }

  private static class ReqTradeAccountPositionTradeDetailOptionTupleScheme extends TupleScheme<ReqTradeAccountPositionTradeDetailOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqTradeAccountPositionTradeDetailOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(1);
      }
      if (struct.isSetStartTradeTimestampMs()) {
        optionals.set(2);
      }
      if (struct.isSetEndTradeTimestampMs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetStartTradeTimestampMs()) {
        oprot.writeI64(struct.startTradeTimestampMs);
      }
      if (struct.isSetEndTradeTimestampMs()) {
        oprot.writeI64(struct.endTradeTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqTradeAccountPositionTradeDetailOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.startTradeTimestampMs = iprot.readI64();
        struct.setStartTradeTimestampMsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endTradeTimestampMs = iprot.readI64();
        struct.setEndTradeTimestampMsIsSet(true);
      }
    }
  }

}

