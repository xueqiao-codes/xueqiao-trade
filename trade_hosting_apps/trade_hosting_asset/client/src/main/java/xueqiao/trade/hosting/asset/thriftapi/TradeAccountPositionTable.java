/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeAccountPositionTable implements org.apache.thrift.TBase<TradeAccountPositionTable, TradeAccountPositionTable._Fields>, java.io.Serializable, Cloneable, Comparable<TradeAccountPositionTable> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeAccountPositionTable");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField NET_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("netPosition", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeAccountPositionTableStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeAccountPositionTableTupleSchemeFactory());
  }

  public long tradeAccount; // optional
  public long sledContractId; // optional
  public int netPosition; // optional
  public long createTimestampMs; // optional
  public long lastModifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT((short)1, "tradeAccount"),
    SLED_CONTRACT_ID((short)2, "sledContractId"),
    NET_POSITION((short)3, "netPosition"),
    CREATE_TIMESTAMP_MS((short)4, "createTimestampMs"),
    LAST_MODIFY_TIMESTAMP_MS((short)5, "lastModifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ACCOUNT
          return TRADE_ACCOUNT;
        case 2: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 3: // NET_POSITION
          return NET_POSITION;
        case 4: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 5: // LAST_MODIFY_TIMESTAMP_MS
          return LAST_MODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNT_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private static final int __NETPOSITION_ISSET_ID = 2;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 3;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT,_Fields.SLED_CONTRACT_ID,_Fields.NET_POSITION,_Fields.CREATE_TIMESTAMP_MS,_Fields.LAST_MODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("tradeAccount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NET_POSITION, new org.apache.thrift.meta_data.FieldMetaData("netPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeAccountPositionTable.class, metaDataMap);
  }

  public TradeAccountPositionTable() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeAccountPositionTable(TradeAccountPositionTable other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeAccount = other.tradeAccount;
    this.sledContractId = other.sledContractId;
    this.netPosition = other.netPosition;
    this.createTimestampMs = other.createTimestampMs;
    this.lastModifyTimestampMs = other.lastModifyTimestampMs;
  }

  public TradeAccountPositionTable deepCopy() {
    return new TradeAccountPositionTable(this);
  }

  @Override
  public void clear() {
    setTradeAccountIsSet(false);
    this.tradeAccount = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setNetPositionIsSet(false);
    this.netPosition = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastModifyTimestampMsIsSet(false);
    this.lastModifyTimestampMs = 0;
  }

  public long getTradeAccount() {
    return this.tradeAccount;
  }

  public TradeAccountPositionTable setTradeAccount(long tradeAccount) {
    this.tradeAccount = tradeAccount;
    setTradeAccountIsSet(true);
    return this;
  }

  public void unsetTradeAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNT_ISSET_ID);
  }

  /** Returns true if field tradeAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNT_ISSET_ID);
  }

  public void setTradeAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNT_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public TradeAccountPositionTable setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public int getNetPosition() {
    return this.netPosition;
  }

  public TradeAccountPositionTable setNetPosition(int netPosition) {
    this.netPosition = netPosition;
    setNetPositionIsSet(true);
    return this;
  }

  public void unsetNetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETPOSITION_ISSET_ID);
  }

  /** Returns true if field netPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetNetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __NETPOSITION_ISSET_ID);
  }

  public void setNetPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETPOSITION_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public TradeAccountPositionTable setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastModifyTimestampMs() {
    return this.lastModifyTimestampMs;
  }

  public TradeAccountPositionTable setLastModifyTimestampMs(long lastModifyTimestampMs) {
    this.lastModifyTimestampMs = lastModifyTimestampMs;
    setLastModifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastModifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT:
      if (value == null) {
        unsetTradeAccount();
      } else {
        setTradeAccount((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case NET_POSITION:
      if (value == null) {
        unsetNetPosition();
      } else {
        setNetPosition((Integer)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastModifyTimestampMs();
      } else {
        setLastModifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT:
      return Long.valueOf(getTradeAccount());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case NET_POSITION:
      return Integer.valueOf(getNetPosition());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LAST_MODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastModifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT:
      return isSetTradeAccount();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case NET_POSITION:
      return isSetNetPosition();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LAST_MODIFY_TIMESTAMP_MS:
      return isSetLastModifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeAccountPositionTable)
      return this.equals((TradeAccountPositionTable)that);
    return false;
  }

  public boolean equals(TradeAccountPositionTable that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccount = true && this.isSetTradeAccount();
    boolean that_present_tradeAccount = true && that.isSetTradeAccount();
    if (this_present_tradeAccount || that_present_tradeAccount) {
      if (!(this_present_tradeAccount && that_present_tradeAccount))
        return false;
      if (this.tradeAccount != that.tradeAccount)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_netPosition = true && this.isSetNetPosition();
    boolean that_present_netPosition = true && that.isSetNetPosition();
    if (this_present_netPosition || that_present_netPosition) {
      if (!(this_present_netPosition && that_present_netPosition))
        return false;
      if (this.netPosition != that.netPosition)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastModifyTimestampMs = true && this.isSetLastModifyTimestampMs();
    boolean that_present_lastModifyTimestampMs = true && that.isSetLastModifyTimestampMs();
    if (this_present_lastModifyTimestampMs || that_present_lastModifyTimestampMs) {
      if (!(this_present_lastModifyTimestampMs && that_present_lastModifyTimestampMs))
        return false;
      if (this.lastModifyTimestampMs != that.lastModifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeAccountPositionTable other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccount()).compareTo(other.isSetTradeAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccount, other.tradeAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetPosition()).compareTo(other.isSetNetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netPosition, other.netPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestampMs()).compareTo(other.isSetLastModifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestampMs, other.lastModifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeAccountPositionTable(");
    boolean first = true;

    if (isSetTradeAccount()) {
      sb.append("tradeAccount:");
      sb.append(this.tradeAccount);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetNetPosition()) {
      if (!first) sb.append(", ");
      sb.append("netPosition:");
      sb.append(this.netPosition);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastModifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestampMs:");
      sb.append(this.lastModifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeAccountPositionTableStandardSchemeFactory implements SchemeFactory {
    public TradeAccountPositionTableStandardScheme getScheme() {
      return new TradeAccountPositionTableStandardScheme();
    }
  }

  private static class TradeAccountPositionTableStandardScheme extends StandardScheme<TradeAccountPositionTable> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeAccountPositionTable struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccount = iprot.readI64();
              struct.setTradeAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NET_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.netPosition = iprot.readI32();
              struct.setNetPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LAST_MODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestampMs = iprot.readI64();
              struct.setLastModifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeAccountPositionTable struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeAccount()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_FIELD_DESC);
        oprot.writeI64(struct.tradeAccount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetNetPosition()) {
        oprot.writeFieldBegin(NET_POSITION_FIELD_DESC);
        oprot.writeI32(struct.netPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeAccountPositionTableTupleSchemeFactory implements SchemeFactory {
    public TradeAccountPositionTableTupleScheme getScheme() {
      return new TradeAccountPositionTableTupleScheme();
    }
  }

  private static class TradeAccountPositionTableTupleScheme extends TupleScheme<TradeAccountPositionTable> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeAccountPositionTable struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccount()) {
        optionals.set(0);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(1);
      }
      if (struct.isSetNetPosition()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(3);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTradeAccount()) {
        oprot.writeI64(struct.tradeAccount);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetNetPosition()) {
        oprot.writeI32(struct.netPosition);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeI64(struct.lastModifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeAccountPositionTable struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.tradeAccount = iprot.readI64();
        struct.setTradeAccountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.netPosition = iprot.readI32();
        struct.setNetPositionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastModifyTimestampMs = iprot.readI64();
        struct.setLastModifyTimestampMsIsSet(true);
      }
    }
  }

}

