/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.events;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 实时操作账号资金信息事件，使用 PushApi 推送
 */
public class HostingFundEvent implements org.apache.thrift.TBase<HostingFundEvent, HostingFundEvent._Fields>, java.io.Serializable, Cloneable, Comparable<HostingFundEvent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingFundEvent");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOSTING_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("hostingFund", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("eventCreateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BASE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCurrency", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingFundEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingFundEventTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public String currency; // optional
  public xueqiao.trade.hosting.asset.thriftapi.HostingFund hostingFund; // optional
  public long eventCreateTimestampMs; // optional
  public boolean baseCurrency; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    CURRENCY((short)2, "currency"),
    HOSTING_FUND((short)3, "hostingFund"),
    EVENT_CREATE_TIMESTAMP_MS((short)4, "eventCreateTimestampMs"),
    BASE_CURRENCY((short)5, "baseCurrency");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // HOSTING_FUND
          return HOSTING_FUND;
        case 4: // EVENT_CREATE_TIMESTAMP_MS
          return EVENT_CREATE_TIMESTAMP_MS;
        case 5: // BASE_CURRENCY
          return BASE_CURRENCY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __EVENTCREATETIMESTAMPMS_ISSET_ID = 1;
  private static final int __BASECURRENCY_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.CURRENCY,_Fields.HOSTING_FUND,_Fields.EVENT_CREATE_TIMESTAMP_MS,_Fields.BASE_CURRENCY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTING_FUND, new org.apache.thrift.meta_data.FieldMetaData("hostingFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.asset.thriftapi.HostingFund.class)));
    tmpMap.put(_Fields.EVENT_CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("eventCreateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BASE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("baseCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingFundEvent.class, metaDataMap);
  }

  public HostingFundEvent() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingFundEvent(HostingFundEvent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetHostingFund()) {
      this.hostingFund = new xueqiao.trade.hosting.asset.thriftapi.HostingFund(other.hostingFund);
    }
    this.eventCreateTimestampMs = other.eventCreateTimestampMs;
    this.baseCurrency = other.baseCurrency;
  }

  public HostingFundEvent deepCopy() {
    return new HostingFundEvent(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.currency = null;
    this.hostingFund = null;
    setEventCreateTimestampMsIsSet(false);
    this.eventCreateTimestampMs = 0;
    setBaseCurrencyIsSet(false);
    this.baseCurrency = false;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingFundEvent setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public HostingFundEvent setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public xueqiao.trade.hosting.asset.thriftapi.HostingFund getHostingFund() {
    return this.hostingFund;
  }

  public HostingFundEvent setHostingFund(xueqiao.trade.hosting.asset.thriftapi.HostingFund hostingFund) {
    this.hostingFund = hostingFund;
    return this;
  }

  public void unsetHostingFund() {
    this.hostingFund = null;
  }

  /** Returns true if field hostingFund is set (has been assigned a value) and false otherwise */
  public boolean isSetHostingFund() {
    return this.hostingFund != null;
  }

  public void setHostingFundIsSet(boolean value) {
    if (!value) {
      this.hostingFund = null;
    }
  }

  public long getEventCreateTimestampMs() {
    return this.eventCreateTimestampMs;
  }

  public HostingFundEvent setEventCreateTimestampMs(long eventCreateTimestampMs) {
    this.eventCreateTimestampMs = eventCreateTimestampMs;
    setEventCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetEventCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field eventCreateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEventCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID);
  }

  public void setEventCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EVENTCREATETIMESTAMPMS_ISSET_ID, value);
  }

  public boolean isBaseCurrency() {
    return this.baseCurrency;
  }

  public HostingFundEvent setBaseCurrency(boolean baseCurrency) {
    this.baseCurrency = baseCurrency;
    setBaseCurrencyIsSet(true);
    return this;
  }

  public void unsetBaseCurrency() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BASECURRENCY_ISSET_ID);
  }

  /** Returns true if field baseCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseCurrency() {
    return EncodingUtils.testBit(__isset_bitfield, __BASECURRENCY_ISSET_ID);
  }

  public void setBaseCurrencyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BASECURRENCY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case HOSTING_FUND:
      if (value == null) {
        unsetHostingFund();
      } else {
        setHostingFund((xueqiao.trade.hosting.asset.thriftapi.HostingFund)value);
      }
      break;

    case EVENT_CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetEventCreateTimestampMs();
      } else {
        setEventCreateTimestampMs((Long)value);
      }
      break;

    case BASE_CURRENCY:
      if (value == null) {
        unsetBaseCurrency();
      } else {
        setBaseCurrency((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case CURRENCY:
      return getCurrency();

    case HOSTING_FUND:
      return getHostingFund();

    case EVENT_CREATE_TIMESTAMP_MS:
      return Long.valueOf(getEventCreateTimestampMs());

    case BASE_CURRENCY:
      return Boolean.valueOf(isBaseCurrency());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case CURRENCY:
      return isSetCurrency();
    case HOSTING_FUND:
      return isSetHostingFund();
    case EVENT_CREATE_TIMESTAMP_MS:
      return isSetEventCreateTimestampMs();
    case BASE_CURRENCY:
      return isSetBaseCurrency();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingFundEvent)
      return this.equals((HostingFundEvent)that);
    return false;
  }

  public boolean equals(HostingFundEvent that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_hostingFund = true && this.isSetHostingFund();
    boolean that_present_hostingFund = true && that.isSetHostingFund();
    if (this_present_hostingFund || that_present_hostingFund) {
      if (!(this_present_hostingFund && that_present_hostingFund))
        return false;
      if (!this.hostingFund.equals(that.hostingFund))
        return false;
    }

    boolean this_present_eventCreateTimestampMs = true && this.isSetEventCreateTimestampMs();
    boolean that_present_eventCreateTimestampMs = true && that.isSetEventCreateTimestampMs();
    if (this_present_eventCreateTimestampMs || that_present_eventCreateTimestampMs) {
      if (!(this_present_eventCreateTimestampMs && that_present_eventCreateTimestampMs))
        return false;
      if (this.eventCreateTimestampMs != that.eventCreateTimestampMs)
        return false;
    }

    boolean this_present_baseCurrency = true && this.isSetBaseCurrency();
    boolean that_present_baseCurrency = true && that.isSetBaseCurrency();
    if (this_present_baseCurrency || that_present_baseCurrency) {
      if (!(this_present_baseCurrency && that_present_baseCurrency))
        return false;
      if (this.baseCurrency != that.baseCurrency)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingFundEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostingFund()).compareTo(other.isSetHostingFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostingFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostingFund, other.hostingFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEventCreateTimestampMs()).compareTo(other.isSetEventCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventCreateTimestampMs, other.eventCreateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseCurrency()).compareTo(other.isSetBaseCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCurrency, other.baseCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingFundEvent(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetHostingFund()) {
      if (!first) sb.append(", ");
      sb.append("hostingFund:");
      if (this.hostingFund == null) {
        sb.append("null");
      } else {
        sb.append(this.hostingFund);
      }
      first = false;
    }
    if (isSetEventCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("eventCreateTimestampMs:");
      sb.append(this.eventCreateTimestampMs);
      first = false;
    }
    if (isSetBaseCurrency()) {
      if (!first) sb.append(", ");
      sb.append("baseCurrency:");
      sb.append(this.baseCurrency);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (hostingFund != null) {
      hostingFund.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingFundEventStandardSchemeFactory implements SchemeFactory {
    public HostingFundEventStandardScheme getScheme() {
      return new HostingFundEventStandardScheme();
    }
  }

  private static class HostingFundEventStandardScheme extends StandardScheme<HostingFundEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingFundEvent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOSTING_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.hostingFund = new xueqiao.trade.hosting.asset.thriftapi.HostingFund();
              struct.hostingFund.read(iprot);
              struct.setHostingFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EVENT_CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.eventCreateTimestampMs = iprot.readI64();
              struct.setEventCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BASE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.baseCurrency = iprot.readBool();
              struct.setBaseCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingFundEvent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.hostingFund != null) {
        if (struct.isSetHostingFund()) {
          oprot.writeFieldBegin(HOSTING_FUND_FIELD_DESC);
          struct.hostingFund.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeFieldBegin(EVENT_CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.eventCreateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBaseCurrency()) {
        oprot.writeFieldBegin(BASE_CURRENCY_FIELD_DESC);
        oprot.writeBool(struct.baseCurrency);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingFundEventTupleSchemeFactory implements SchemeFactory {
    public HostingFundEventTupleScheme getScheme() {
      return new HostingFundEventTupleScheme();
    }
  }

  private static class HostingFundEventTupleScheme extends TupleScheme<HostingFundEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingFundEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetHostingFund()) {
        optionals.set(2);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        optionals.set(3);
      }
      if (struct.isSetBaseCurrency()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetHostingFund()) {
        struct.hostingFund.write(oprot);
      }
      if (struct.isSetEventCreateTimestampMs()) {
        oprot.writeI64(struct.eventCreateTimestampMs);
      }
      if (struct.isSetBaseCurrency()) {
        oprot.writeBool(struct.baseCurrency);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingFundEvent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostingFund = new xueqiao.trade.hosting.asset.thriftapi.HostingFund();
        struct.hostingFund.read(iprot);
        struct.setHostingFundIsSet(true);
      }
      if (incoming.get(3)) {
        struct.eventCreateTimestampMs = iprot.readI64();
        struct.setEventCreateTimestampMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.baseCurrency = iprot.readBool();
        struct.setBaseCurrencyIsSet(true);
      }
    }
  }

}

