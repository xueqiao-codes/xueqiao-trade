/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CreditAmountChange implements org.apache.thrift.TBase<CreditAmountChange, CreditAmountChange._Fields>, java.io.Serializable, Cloneable, Comparable<CreditAmountChange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreditAmountChange");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccount", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreditAmountChangeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreditAmountChangeTupleSchemeFactory());
  }

  public long subAccount; // optional
  public String currency; // optional
  public double totalAmount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT((short)1, "subAccount"),
    CURRENCY((short)2, "currency"),
    TOTAL_AMOUNT((short)3, "totalAmount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT
          return SUB_ACCOUNT;
        case 2: // CURRENCY
          return CURRENCY;
        case 3: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNT_ISSET_ID = 0;
  private static final int __TOTALAMOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT,_Fields.CURRENCY,_Fields.TOTAL_AMOUNT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT, new org.apache.thrift.meta_data.FieldMetaData("subAccount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreditAmountChange.class, metaDataMap);
  }

  public CreditAmountChange() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreditAmountChange(CreditAmountChange other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccount = other.subAccount;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.totalAmount = other.totalAmount;
  }

  public CreditAmountChange deepCopy() {
    return new CreditAmountChange(this);
  }

  @Override
  public void clear() {
    setSubAccountIsSet(false);
    this.subAccount = 0;
    this.currency = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
  }

  public long getSubAccount() {
    return this.subAccount;
  }

  public CreditAmountChange setSubAccount(long subAccount) {
    this.subAccount = subAccount;
    setSubAccountIsSet(true);
    return this;
  }

  public void unsetSubAccount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNT_ISSET_ID);
  }

  /** Returns true if field subAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccount() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNT_ISSET_ID);
  }

  public void setSubAccountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNT_ISSET_ID, value);
  }

  public String getCurrency() {
    return this.currency;
  }

  public CreditAmountChange setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public CreditAmountChange setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT:
      if (value == null) {
        unsetSubAccount();
      } else {
        setSubAccount((Long)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT:
      return Long.valueOf(getSubAccount());

    case CURRENCY:
      return getCurrency();

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT:
      return isSetSubAccount();
    case CURRENCY:
      return isSetCurrency();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreditAmountChange)
      return this.equals((CreditAmountChange)that);
    return false;
  }

  public boolean equals(CreditAmountChange that) {
    if (that == null)
      return false;

    boolean this_present_subAccount = true && this.isSetSubAccount();
    boolean that_present_subAccount = true && that.isSetSubAccount();
    if (this_present_subAccount || that_present_subAccount) {
      if (!(this_present_subAccount && that_present_subAccount))
        return false;
      if (this.subAccount != that.subAccount)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CreditAmountChange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccount()).compareTo(other.isSetSubAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccount, other.subAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreditAmountChange(");
    boolean first = true;

    if (isSetSubAccount()) {
      sb.append("subAccount:");
      sb.append(this.subAccount);
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreditAmountChangeStandardSchemeFactory implements SchemeFactory {
    public CreditAmountChangeStandardScheme getScheme() {
      return new CreditAmountChangeStandardScheme();
    }
  }

  private static class CreditAmountChangeStandardScheme extends StandardScheme<CreditAmountChange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreditAmountChange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccount = iprot.readI64();
              struct.setSubAccountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreditAmountChange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccount()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_FIELD_DESC);
        oprot.writeI64(struct.subAccount);
        oprot.writeFieldEnd();
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreditAmountChangeTupleSchemeFactory implements SchemeFactory {
    public CreditAmountChangeTupleScheme getScheme() {
      return new CreditAmountChangeTupleScheme();
    }
  }

  private static class CreditAmountChangeTupleScheme extends TupleScheme<CreditAmountChange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreditAmountChange struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccount()) {
        optionals.set(0);
      }
      if (struct.isSetCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubAccount()) {
        oprot.writeI64(struct.subAccount);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreditAmountChange struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.subAccount = iprot.readI64();
        struct.setSubAccountIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
    }
  }

}

