/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.asset.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 托管机出入金记录
 */
public class HostingSubAccountMoneyRecord implements org.apache.thrift.TBase<HostingSubAccountMoneyRecord, HostingSubAccountMoneyRecord._Fields>, java.io.Serializable, Cloneable, Comparable<HostingSubAccountMoneyRecord> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingSubAccountMoneyRecord");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_AMOUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalAmount", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField DEPOSIT_AMOUNT_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("depositAmountBefore", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DEPOSIT_AMOUNT_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("depositAmountAfter", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField WITHDRAW_AMOUNT_BEFORE_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAmountBefore", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField WITHDRAW_AMOUNT_AFTER_FIELD_DESC = new org.apache.thrift.protocol.TField("withdrawAmountAfter", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RECORD_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("recordTimestampMs", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingSubAccountMoneyRecordStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingSubAccountMoneyRecordTupleSchemeFactory());
  }

  public long subAccountId; // optional
  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecordDirection direction; // optional
  public double totalAmount; // optional
  public double depositAmountBefore; // optional
  public double depositAmountAfter; // optional
  public double withdrawAmountBefore; // optional
  public double withdrawAmountAfter; // optional
  public long recordTimestampMs; // optional
  public String ticket; // optional
  public String currency; // optional
  public long createTimestampMs; // optional
  public long lastModifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    /**
     * 
     * @see HostingSubAccountMoneyRecordDirection
     */
    DIRECTION((short)2, "direction"),
    TOTAL_AMOUNT((short)3, "totalAmount"),
    DEPOSIT_AMOUNT_BEFORE((short)5, "depositAmountBefore"),
    DEPOSIT_AMOUNT_AFTER((short)6, "depositAmountAfter"),
    WITHDRAW_AMOUNT_BEFORE((short)7, "withdrawAmountBefore"),
    WITHDRAW_AMOUNT_AFTER((short)8, "withdrawAmountAfter"),
    RECORD_TIMESTAMP_MS((short)9, "recordTimestampMs"),
    TICKET((short)10, "ticket"),
    CURRENCY((short)11, "currency"),
    CREATE_TIMESTAMP_MS((short)20, "createTimestampMs"),
    LAST_MODIFY_TIMESTAMP_MS((short)21, "lastModifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // DIRECTION
          return DIRECTION;
        case 3: // TOTAL_AMOUNT
          return TOTAL_AMOUNT;
        case 5: // DEPOSIT_AMOUNT_BEFORE
          return DEPOSIT_AMOUNT_BEFORE;
        case 6: // DEPOSIT_AMOUNT_AFTER
          return DEPOSIT_AMOUNT_AFTER;
        case 7: // WITHDRAW_AMOUNT_BEFORE
          return WITHDRAW_AMOUNT_BEFORE;
        case 8: // WITHDRAW_AMOUNT_AFTER
          return WITHDRAW_AMOUNT_AFTER;
        case 9: // RECORD_TIMESTAMP_MS
          return RECORD_TIMESTAMP_MS;
        case 10: // TICKET
          return TICKET;
        case 11: // CURRENCY
          return CURRENCY;
        case 20: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 21: // LAST_MODIFY_TIMESTAMP_MS
          return LAST_MODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private static final int __TOTALAMOUNT_ISSET_ID = 1;
  private static final int __DEPOSITAMOUNTBEFORE_ISSET_ID = 2;
  private static final int __DEPOSITAMOUNTAFTER_ISSET_ID = 3;
  private static final int __WITHDRAWAMOUNTBEFORE_ISSET_ID = 4;
  private static final int __WITHDRAWAMOUNTAFTER_ISSET_ID = 5;
  private static final int __RECORDTIMESTAMPMS_ISSET_ID = 6;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 7;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.DIRECTION,_Fields.TOTAL_AMOUNT,_Fields.DEPOSIT_AMOUNT_BEFORE,_Fields.DEPOSIT_AMOUNT_AFTER,_Fields.WITHDRAW_AMOUNT_BEFORE,_Fields.WITHDRAW_AMOUNT_AFTER,_Fields.RECORD_TIMESTAMP_MS,_Fields.TICKET,_Fields.CURRENCY,_Fields.CREATE_TIMESTAMP_MS,_Fields.LAST_MODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingSubAccountMoneyRecordDirection.class)));
    tmpMap.put(_Fields.TOTAL_AMOUNT, new org.apache.thrift.meta_data.FieldMetaData("totalAmount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT_AMOUNT_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("depositAmountBefore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT_AMOUNT_AFTER, new org.apache.thrift.meta_data.FieldMetaData("depositAmountAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW_AMOUNT_BEFORE, new org.apache.thrift.meta_data.FieldMetaData("withdrawAmountBefore", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW_AMOUNT_AFTER, new org.apache.thrift.meta_data.FieldMetaData("withdrawAmountAfter", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RECORD_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("recordTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET, new org.apache.thrift.meta_data.FieldMetaData("ticket", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingSubAccountMoneyRecord.class, metaDataMap);
  }

  public HostingSubAccountMoneyRecord() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingSubAccountMoneyRecord(HostingSubAccountMoneyRecord other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    this.totalAmount = other.totalAmount;
    this.depositAmountBefore = other.depositAmountBefore;
    this.depositAmountAfter = other.depositAmountAfter;
    this.withdrawAmountBefore = other.withdrawAmountBefore;
    this.withdrawAmountAfter = other.withdrawAmountAfter;
    this.recordTimestampMs = other.recordTimestampMs;
    if (other.isSetTicket()) {
      this.ticket = other.ticket;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    this.createTimestampMs = other.createTimestampMs;
    this.lastModifyTimestampMs = other.lastModifyTimestampMs;
  }

  public HostingSubAccountMoneyRecord deepCopy() {
    return new HostingSubAccountMoneyRecord(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.direction = null;
    setTotalAmountIsSet(false);
    this.totalAmount = 0.0;
    setDepositAmountBeforeIsSet(false);
    this.depositAmountBefore = 0.0;
    setDepositAmountAfterIsSet(false);
    this.depositAmountAfter = 0.0;
    setWithdrawAmountBeforeIsSet(false);
    this.withdrawAmountBefore = 0.0;
    setWithdrawAmountAfterIsSet(false);
    this.withdrawAmountAfter = 0.0;
    setRecordTimestampMsIsSet(false);
    this.recordTimestampMs = 0;
    this.ticket = null;
    this.currency = null;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastModifyTimestampMsIsSet(false);
    this.lastModifyTimestampMs = 0;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingSubAccountMoneyRecord setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecordDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see HostingSubAccountMoneyRecordDirection
   */
  public HostingSubAccountMoneyRecord setDirection(HostingSubAccountMoneyRecordDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public double getTotalAmount() {
    return this.totalAmount;
  }

  public HostingSubAccountMoneyRecord setTotalAmount(double totalAmount) {
    this.totalAmount = totalAmount;
    setTotalAmountIsSet(true);
    return this;
  }

  public void unsetTotalAmount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  /** Returns true if field totalAmount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalAmount() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID);
  }

  public void setTotalAmountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALAMOUNT_ISSET_ID, value);
  }

  public double getDepositAmountBefore() {
    return this.depositAmountBefore;
  }

  public HostingSubAccountMoneyRecord setDepositAmountBefore(double depositAmountBefore) {
    this.depositAmountBefore = depositAmountBefore;
    setDepositAmountBeforeIsSet(true);
    return this;
  }

  public void unsetDepositAmountBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSITAMOUNTBEFORE_ISSET_ID);
  }

  /** Returns true if field depositAmountBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositAmountBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSITAMOUNTBEFORE_ISSET_ID);
  }

  public void setDepositAmountBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSITAMOUNTBEFORE_ISSET_ID, value);
  }

  public double getDepositAmountAfter() {
    return this.depositAmountAfter;
  }

  public HostingSubAccountMoneyRecord setDepositAmountAfter(double depositAmountAfter) {
    this.depositAmountAfter = depositAmountAfter;
    setDepositAmountAfterIsSet(true);
    return this;
  }

  public void unsetDepositAmountAfter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSITAMOUNTAFTER_ISSET_ID);
  }

  /** Returns true if field depositAmountAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetDepositAmountAfter() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSITAMOUNTAFTER_ISSET_ID);
  }

  public void setDepositAmountAfterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSITAMOUNTAFTER_ISSET_ID, value);
  }

  public double getWithdrawAmountBefore() {
    return this.withdrawAmountBefore;
  }

  public HostingSubAccountMoneyRecord setWithdrawAmountBefore(double withdrawAmountBefore) {
    this.withdrawAmountBefore = withdrawAmountBefore;
    setWithdrawAmountBeforeIsSet(true);
    return this;
  }

  public void unsetWithdrawAmountBefore() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWAMOUNTBEFORE_ISSET_ID);
  }

  /** Returns true if field withdrawAmountBefore is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAmountBefore() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWAMOUNTBEFORE_ISSET_ID);
  }

  public void setWithdrawAmountBeforeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWAMOUNTBEFORE_ISSET_ID, value);
  }

  public double getWithdrawAmountAfter() {
    return this.withdrawAmountAfter;
  }

  public HostingSubAccountMoneyRecord setWithdrawAmountAfter(double withdrawAmountAfter) {
    this.withdrawAmountAfter = withdrawAmountAfter;
    setWithdrawAmountAfterIsSet(true);
    return this;
  }

  public void unsetWithdrawAmountAfter() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAWAMOUNTAFTER_ISSET_ID);
  }

  /** Returns true if field withdrawAmountAfter is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdrawAmountAfter() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAWAMOUNTAFTER_ISSET_ID);
  }

  public void setWithdrawAmountAfterIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAWAMOUNTAFTER_ISSET_ID, value);
  }

  public long getRecordTimestampMs() {
    return this.recordTimestampMs;
  }

  public HostingSubAccountMoneyRecord setRecordTimestampMs(long recordTimestampMs) {
    this.recordTimestampMs = recordTimestampMs;
    setRecordTimestampMsIsSet(true);
    return this;
  }

  public void unsetRecordTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RECORDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field recordTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetRecordTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __RECORDTIMESTAMPMS_ISSET_ID);
  }

  public void setRecordTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RECORDTIMESTAMPMS_ISSET_ID, value);
  }

  public String getTicket() {
    return this.ticket;
  }

  public HostingSubAccountMoneyRecord setTicket(String ticket) {
    this.ticket = ticket;
    return this;
  }

  public void unsetTicket() {
    this.ticket = null;
  }

  /** Returns true if field ticket is set (has been assigned a value) and false otherwise */
  public boolean isSetTicket() {
    return this.ticket != null;
  }

  public void setTicketIsSet(boolean value) {
    if (!value) {
      this.ticket = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public HostingSubAccountMoneyRecord setCurrency(String currency) {
    this.currency = currency;
    return this;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingSubAccountMoneyRecord setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastModifyTimestampMs() {
    return this.lastModifyTimestampMs;
  }

  public HostingSubAccountMoneyRecord setLastModifyTimestampMs(long lastModifyTimestampMs) {
    this.lastModifyTimestampMs = lastModifyTimestampMs;
    setLastModifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastModifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((HostingSubAccountMoneyRecordDirection)value);
      }
      break;

    case TOTAL_AMOUNT:
      if (value == null) {
        unsetTotalAmount();
      } else {
        setTotalAmount((Double)value);
      }
      break;

    case DEPOSIT_AMOUNT_BEFORE:
      if (value == null) {
        unsetDepositAmountBefore();
      } else {
        setDepositAmountBefore((Double)value);
      }
      break;

    case DEPOSIT_AMOUNT_AFTER:
      if (value == null) {
        unsetDepositAmountAfter();
      } else {
        setDepositAmountAfter((Double)value);
      }
      break;

    case WITHDRAW_AMOUNT_BEFORE:
      if (value == null) {
        unsetWithdrawAmountBefore();
      } else {
        setWithdrawAmountBefore((Double)value);
      }
      break;

    case WITHDRAW_AMOUNT_AFTER:
      if (value == null) {
        unsetWithdrawAmountAfter();
      } else {
        setWithdrawAmountAfter((Double)value);
      }
      break;

    case RECORD_TIMESTAMP_MS:
      if (value == null) {
        unsetRecordTimestampMs();
      } else {
        setRecordTimestampMs((Long)value);
      }
      break;

    case TICKET:
      if (value == null) {
        unsetTicket();
      } else {
        setTicket((String)value);
      }
      break;

    case CURRENCY:
      if (value == null) {
        unsetCurrency();
      } else {
        setCurrency((String)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastModifyTimestampMs();
      } else {
        setLastModifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case DIRECTION:
      return getDirection();

    case TOTAL_AMOUNT:
      return Double.valueOf(getTotalAmount());

    case DEPOSIT_AMOUNT_BEFORE:
      return Double.valueOf(getDepositAmountBefore());

    case DEPOSIT_AMOUNT_AFTER:
      return Double.valueOf(getDepositAmountAfter());

    case WITHDRAW_AMOUNT_BEFORE:
      return Double.valueOf(getWithdrawAmountBefore());

    case WITHDRAW_AMOUNT_AFTER:
      return Double.valueOf(getWithdrawAmountAfter());

    case RECORD_TIMESTAMP_MS:
      return Long.valueOf(getRecordTimestampMs());

    case TICKET:
      return getTicket();

    case CURRENCY:
      return getCurrency();

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LAST_MODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastModifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case DIRECTION:
      return isSetDirection();
    case TOTAL_AMOUNT:
      return isSetTotalAmount();
    case DEPOSIT_AMOUNT_BEFORE:
      return isSetDepositAmountBefore();
    case DEPOSIT_AMOUNT_AFTER:
      return isSetDepositAmountAfter();
    case WITHDRAW_AMOUNT_BEFORE:
      return isSetWithdrawAmountBefore();
    case WITHDRAW_AMOUNT_AFTER:
      return isSetWithdrawAmountAfter();
    case RECORD_TIMESTAMP_MS:
      return isSetRecordTimestampMs();
    case TICKET:
      return isSetTicket();
    case CURRENCY:
      return isSetCurrency();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LAST_MODIFY_TIMESTAMP_MS:
      return isSetLastModifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingSubAccountMoneyRecord)
      return this.equals((HostingSubAccountMoneyRecord)that);
    return false;
  }

  public boolean equals(HostingSubAccountMoneyRecord that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_totalAmount = true && this.isSetTotalAmount();
    boolean that_present_totalAmount = true && that.isSetTotalAmount();
    if (this_present_totalAmount || that_present_totalAmount) {
      if (!(this_present_totalAmount && that_present_totalAmount))
        return false;
      if (this.totalAmount != that.totalAmount)
        return false;
    }

    boolean this_present_depositAmountBefore = true && this.isSetDepositAmountBefore();
    boolean that_present_depositAmountBefore = true && that.isSetDepositAmountBefore();
    if (this_present_depositAmountBefore || that_present_depositAmountBefore) {
      if (!(this_present_depositAmountBefore && that_present_depositAmountBefore))
        return false;
      if (this.depositAmountBefore != that.depositAmountBefore)
        return false;
    }

    boolean this_present_depositAmountAfter = true && this.isSetDepositAmountAfter();
    boolean that_present_depositAmountAfter = true && that.isSetDepositAmountAfter();
    if (this_present_depositAmountAfter || that_present_depositAmountAfter) {
      if (!(this_present_depositAmountAfter && that_present_depositAmountAfter))
        return false;
      if (this.depositAmountAfter != that.depositAmountAfter)
        return false;
    }

    boolean this_present_withdrawAmountBefore = true && this.isSetWithdrawAmountBefore();
    boolean that_present_withdrawAmountBefore = true && that.isSetWithdrawAmountBefore();
    if (this_present_withdrawAmountBefore || that_present_withdrawAmountBefore) {
      if (!(this_present_withdrawAmountBefore && that_present_withdrawAmountBefore))
        return false;
      if (this.withdrawAmountBefore != that.withdrawAmountBefore)
        return false;
    }

    boolean this_present_withdrawAmountAfter = true && this.isSetWithdrawAmountAfter();
    boolean that_present_withdrawAmountAfter = true && that.isSetWithdrawAmountAfter();
    if (this_present_withdrawAmountAfter || that_present_withdrawAmountAfter) {
      if (!(this_present_withdrawAmountAfter && that_present_withdrawAmountAfter))
        return false;
      if (this.withdrawAmountAfter != that.withdrawAmountAfter)
        return false;
    }

    boolean this_present_recordTimestampMs = true && this.isSetRecordTimestampMs();
    boolean that_present_recordTimestampMs = true && that.isSetRecordTimestampMs();
    if (this_present_recordTimestampMs || that_present_recordTimestampMs) {
      if (!(this_present_recordTimestampMs && that_present_recordTimestampMs))
        return false;
      if (this.recordTimestampMs != that.recordTimestampMs)
        return false;
    }

    boolean this_present_ticket = true && this.isSetTicket();
    boolean that_present_ticket = true && that.isSetTicket();
    if (this_present_ticket || that_present_ticket) {
      if (!(this_present_ticket && that_present_ticket))
        return false;
      if (!this.ticket.equals(that.ticket))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastModifyTimestampMs = true && this.isSetLastModifyTimestampMs();
    boolean that_present_lastModifyTimestampMs = true && that.isSetLastModifyTimestampMs();
    if (this_present_lastModifyTimestampMs || that_present_lastModifyTimestampMs) {
      if (!(this_present_lastModifyTimestampMs && that_present_lastModifyTimestampMs))
        return false;
      if (this.lastModifyTimestampMs != that.lastModifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingSubAccountMoneyRecord other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalAmount()).compareTo(other.isSetTotalAmount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalAmount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalAmount, other.totalAmount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositAmountBefore()).compareTo(other.isSetDepositAmountBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositAmountBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositAmountBefore, other.depositAmountBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepositAmountAfter()).compareTo(other.isSetDepositAmountAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepositAmountAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depositAmountAfter, other.depositAmountAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAmountBefore()).compareTo(other.isSetWithdrawAmountBefore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAmountBefore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAmountBefore, other.withdrawAmountBefore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdrawAmountAfter()).compareTo(other.isSetWithdrawAmountAfter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdrawAmountAfter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdrawAmountAfter, other.withdrawAmountAfter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRecordTimestampMs()).compareTo(other.isSetRecordTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecordTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.recordTimestampMs, other.recordTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTicket()).compareTo(other.isSetTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket, other.ticket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrency()).compareTo(other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestampMs()).compareTo(other.isSetLastModifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestampMs, other.lastModifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingSubAccountMoneyRecord(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetDirection()) {
      if (!first) sb.append(", ");
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetTotalAmount()) {
      if (!first) sb.append(", ");
      sb.append("totalAmount:");
      sb.append(this.totalAmount);
      first = false;
    }
    if (isSetDepositAmountBefore()) {
      if (!first) sb.append(", ");
      sb.append("depositAmountBefore:");
      sb.append(this.depositAmountBefore);
      first = false;
    }
    if (isSetDepositAmountAfter()) {
      if (!first) sb.append(", ");
      sb.append("depositAmountAfter:");
      sb.append(this.depositAmountAfter);
      first = false;
    }
    if (isSetWithdrawAmountBefore()) {
      if (!first) sb.append(", ");
      sb.append("withdrawAmountBefore:");
      sb.append(this.withdrawAmountBefore);
      first = false;
    }
    if (isSetWithdrawAmountAfter()) {
      if (!first) sb.append(", ");
      sb.append("withdrawAmountAfter:");
      sb.append(this.withdrawAmountAfter);
      first = false;
    }
    if (isSetRecordTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("recordTimestampMs:");
      sb.append(this.recordTimestampMs);
      first = false;
    }
    if (isSetTicket()) {
      if (!first) sb.append(", ");
      sb.append("ticket:");
      if (this.ticket == null) {
        sb.append("null");
      } else {
        sb.append(this.ticket);
      }
      first = false;
    }
    if (isSetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("currency:");
      if (this.currency == null) {
        sb.append("null");
      } else {
        sb.append(this.currency);
      }
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastModifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestampMs:");
      sb.append(this.lastModifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingSubAccountMoneyRecordStandardSchemeFactory implements SchemeFactory {
    public HostingSubAccountMoneyRecordStandardScheme getScheme() {
      return new HostingSubAccountMoneyRecordStandardScheme();
    }
  }

  private static class HostingSubAccountMoneyRecordStandardScheme extends StandardScheme<HostingSubAccountMoneyRecord> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = HostingSubAccountMoneyRecordDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_AMOUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.totalAmount = iprot.readDouble();
              struct.setTotalAmountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEPOSIT_AMOUNT_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.depositAmountBefore = iprot.readDouble();
              struct.setDepositAmountBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPOSIT_AMOUNT_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.depositAmountAfter = iprot.readDouble();
              struct.setDepositAmountAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WITHDRAW_AMOUNT_BEFORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdrawAmountBefore = iprot.readDouble();
              struct.setWithdrawAmountBeforeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WITHDRAW_AMOUNT_AFTER
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdrawAmountAfter = iprot.readDouble();
              struct.setWithdrawAmountAfterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RECORD_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.recordTimestampMs = iprot.readI64();
              struct.setRecordTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticket = iprot.readString();
              struct.setTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currency = iprot.readString();
              struct.setCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // LAST_MODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModifyTimestampMs = iprot.readI64();
              struct.setLastModifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeFieldBegin(TOTAL_AMOUNT_FIELD_DESC);
        oprot.writeDouble(struct.totalAmount);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepositAmountBefore()) {
        oprot.writeFieldBegin(DEPOSIT_AMOUNT_BEFORE_FIELD_DESC);
        oprot.writeDouble(struct.depositAmountBefore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepositAmountAfter()) {
        oprot.writeFieldBegin(DEPOSIT_AMOUNT_AFTER_FIELD_DESC);
        oprot.writeDouble(struct.depositAmountAfter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdrawAmountBefore()) {
        oprot.writeFieldBegin(WITHDRAW_AMOUNT_BEFORE_FIELD_DESC);
        oprot.writeDouble(struct.withdrawAmountBefore);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdrawAmountAfter()) {
        oprot.writeFieldBegin(WITHDRAW_AMOUNT_AFTER_FIELD_DESC);
        oprot.writeDouble(struct.withdrawAmountAfter);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRecordTimestampMs()) {
        oprot.writeFieldBegin(RECORD_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.recordTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.ticket != null) {
        if (struct.isSetTicket()) {
          oprot.writeFieldBegin(TICKET_FIELD_DESC);
          oprot.writeString(struct.ticket);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currency != null) {
        if (struct.isSetCurrency()) {
          oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
          oprot.writeString(struct.currency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastModifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingSubAccountMoneyRecordTupleSchemeFactory implements SchemeFactory {
    public HostingSubAccountMoneyRecordTupleScheme getScheme() {
      return new HostingSubAccountMoneyRecordTupleScheme();
    }
  }

  private static class HostingSubAccountMoneyRecordTupleScheme extends TupleScheme<HostingSubAccountMoneyRecord> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetDirection()) {
        optionals.set(1);
      }
      if (struct.isSetTotalAmount()) {
        optionals.set(2);
      }
      if (struct.isSetDepositAmountBefore()) {
        optionals.set(3);
      }
      if (struct.isSetDepositAmountAfter()) {
        optionals.set(4);
      }
      if (struct.isSetWithdrawAmountBefore()) {
        optionals.set(5);
      }
      if (struct.isSetWithdrawAmountAfter()) {
        optionals.set(6);
      }
      if (struct.isSetRecordTimestampMs()) {
        optionals.set(7);
      }
      if (struct.isSetTicket()) {
        optionals.set(8);
      }
      if (struct.isSetCurrency()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(10);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetTotalAmount()) {
        oprot.writeDouble(struct.totalAmount);
      }
      if (struct.isSetDepositAmountBefore()) {
        oprot.writeDouble(struct.depositAmountBefore);
      }
      if (struct.isSetDepositAmountAfter()) {
        oprot.writeDouble(struct.depositAmountAfter);
      }
      if (struct.isSetWithdrawAmountBefore()) {
        oprot.writeDouble(struct.withdrawAmountBefore);
      }
      if (struct.isSetWithdrawAmountAfter()) {
        oprot.writeDouble(struct.withdrawAmountAfter);
      }
      if (struct.isSetRecordTimestampMs()) {
        oprot.writeI64(struct.recordTimestampMs);
      }
      if (struct.isSetTicket()) {
        oprot.writeString(struct.ticket);
      }
      if (struct.isSetCurrency()) {
        oprot.writeString(struct.currency);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastModifyTimestampMs()) {
        oprot.writeI64(struct.lastModifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingSubAccountMoneyRecord struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.direction = HostingSubAccountMoneyRecordDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalAmount = iprot.readDouble();
        struct.setTotalAmountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.depositAmountBefore = iprot.readDouble();
        struct.setDepositAmountBeforeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.depositAmountAfter = iprot.readDouble();
        struct.setDepositAmountAfterIsSet(true);
      }
      if (incoming.get(5)) {
        struct.withdrawAmountBefore = iprot.readDouble();
        struct.setWithdrawAmountBeforeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withdrawAmountAfter = iprot.readDouble();
        struct.setWithdrawAmountAfterIsSet(true);
      }
      if (incoming.get(7)) {
        struct.recordTimestampMs = iprot.readI64();
        struct.setRecordTimestampMsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ticket = iprot.readString();
        struct.setTicketIsSet(true);
      }
      if (incoming.get(9)) {
        struct.currency = iprot.readString();
        struct.setCurrencyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.lastModifyTimestampMs = iprot.readI64();
        struct.setLastModifyTimestampMsIsSet(true);
      }
    }
  }

}

