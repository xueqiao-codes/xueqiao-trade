/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.longsheng.xueqiao.currency.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ExchangeRate implements org.apache.thrift.TBase<ExchangeRate, ExchangeRate._Fields>, java.io.Serializable, Cloneable, Comparable<ExchangeRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExchangeRate");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BASE_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("baseCurrency", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TARGET_CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("targetCurrency", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField EXCHANGE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeRate", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I64, (short)40);
  private static final org.apache.thrift.protocol.TField LAST_MODITY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModityTimestamp", org.apache.thrift.protocol.TType.I64, (short)41);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExchangeRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExchangeRateTupleSchemeFactory());
  }

  public String name; // optional
  public String baseCurrency; // optional
  public String targetCurrency; // optional
  public double exchangeRate; // optional
  public long createTimestamp; // optional
  public long lastModityTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)2, "name"),
    BASE_CURRENCY((short)3, "baseCurrency"),
    TARGET_CURRENCY((short)4, "targetCurrency"),
    EXCHANGE_RATE((short)5, "exchangeRate"),
    CREATE_TIMESTAMP((short)40, "createTimestamp"),
    LAST_MODITY_TIMESTAMP((short)41, "lastModityTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // NAME
          return NAME;
        case 3: // BASE_CURRENCY
          return BASE_CURRENCY;
        case 4: // TARGET_CURRENCY
          return TARGET_CURRENCY;
        case 5: // EXCHANGE_RATE
          return EXCHANGE_RATE;
        case 40: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 41: // LAST_MODITY_TIMESTAMP
          return LAST_MODITY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXCHANGERATE_ISSET_ID = 0;
  private static final int __CREATETIMESTAMP_ISSET_ID = 1;
  private static final int __LASTMODITYTIMESTAMP_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NAME,_Fields.BASE_CURRENCY,_Fields.TARGET_CURRENCY,_Fields.EXCHANGE_RATE,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODITY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("baseCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("targetCurrency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXCHANGE_RATE, new org.apache.thrift.meta_data.FieldMetaData("exchangeRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LAST_MODITY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModityTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExchangeRate.class, metaDataMap);
  }

  public ExchangeRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExchangeRate(ExchangeRate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetBaseCurrency()) {
      this.baseCurrency = other.baseCurrency;
    }
    if (other.isSetTargetCurrency()) {
      this.targetCurrency = other.targetCurrency;
    }
    this.exchangeRate = other.exchangeRate;
    this.createTimestamp = other.createTimestamp;
    this.lastModityTimestamp = other.lastModityTimestamp;
  }

  public ExchangeRate deepCopy() {
    return new ExchangeRate(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.baseCurrency = null;
    this.targetCurrency = null;
    setExchangeRateIsSet(false);
    this.exchangeRate = 0.0;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModityTimestampIsSet(false);
    this.lastModityTimestamp = 0;
  }

  public String getName() {
    return this.name;
  }

  public ExchangeRate setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getBaseCurrency() {
    return this.baseCurrency;
  }

  public ExchangeRate setBaseCurrency(String baseCurrency) {
    this.baseCurrency = baseCurrency;
    return this;
  }

  public void unsetBaseCurrency() {
    this.baseCurrency = null;
  }

  /** Returns true if field baseCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseCurrency() {
    return this.baseCurrency != null;
  }

  public void setBaseCurrencyIsSet(boolean value) {
    if (!value) {
      this.baseCurrency = null;
    }
  }

  public String getTargetCurrency() {
    return this.targetCurrency;
  }

  public ExchangeRate setTargetCurrency(String targetCurrency) {
    this.targetCurrency = targetCurrency;
    return this;
  }

  public void unsetTargetCurrency() {
    this.targetCurrency = null;
  }

  /** Returns true if field targetCurrency is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetCurrency() {
    return this.targetCurrency != null;
  }

  public void setTargetCurrencyIsSet(boolean value) {
    if (!value) {
      this.targetCurrency = null;
    }
  }

  public double getExchangeRate() {
    return this.exchangeRate;
  }

  public ExchangeRate setExchangeRate(double exchangeRate) {
    this.exchangeRate = exchangeRate;
    setExchangeRateIsSet(true);
    return this;
  }

  public void unsetExchangeRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID);
  }

  /** Returns true if field exchangeRate is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeRate() {
    return EncodingUtils.testBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID);
  }

  public void setExchangeRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXCHANGERATE_ISSET_ID, value);
  }

  public long getCreateTimestamp() {
    return this.createTimestamp;
  }

  public ExchangeRate setCreateTimestamp(long createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public long getLastModityTimestamp() {
    return this.lastModityTimestamp;
  }

  public ExchangeRate setLastModityTimestamp(long lastModityTimestamp) {
    this.lastModityTimestamp = lastModityTimestamp;
    setLastModityTimestampIsSet(true);
    return this;
  }

  public void unsetLastModityTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModityTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModityTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID);
  }

  public void setLastModityTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODITYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case BASE_CURRENCY:
      if (value == null) {
        unsetBaseCurrency();
      } else {
        setBaseCurrency((String)value);
      }
      break;

    case TARGET_CURRENCY:
      if (value == null) {
        unsetTargetCurrency();
      } else {
        setTargetCurrency((String)value);
      }
      break;

    case EXCHANGE_RATE:
      if (value == null) {
        unsetExchangeRate();
      } else {
        setExchangeRate((Double)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Long)value);
      }
      break;

    case LAST_MODITY_TIMESTAMP:
      if (value == null) {
        unsetLastModityTimestamp();
      } else {
        setLastModityTimestamp((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case BASE_CURRENCY:
      return getBaseCurrency();

    case TARGET_CURRENCY:
      return getTargetCurrency();

    case EXCHANGE_RATE:
      return Double.valueOf(getExchangeRate());

    case CREATE_TIMESTAMP:
      return Long.valueOf(getCreateTimestamp());

    case LAST_MODITY_TIMESTAMP:
      return Long.valueOf(getLastModityTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case BASE_CURRENCY:
      return isSetBaseCurrency();
    case TARGET_CURRENCY:
      return isSetTargetCurrency();
    case EXCHANGE_RATE:
      return isSetExchangeRate();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODITY_TIMESTAMP:
      return isSetLastModityTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExchangeRate)
      return this.equals((ExchangeRate)that);
    return false;
  }

  public boolean equals(ExchangeRate that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_baseCurrency = true && this.isSetBaseCurrency();
    boolean that_present_baseCurrency = true && that.isSetBaseCurrency();
    if (this_present_baseCurrency || that_present_baseCurrency) {
      if (!(this_present_baseCurrency && that_present_baseCurrency))
        return false;
      if (!this.baseCurrency.equals(that.baseCurrency))
        return false;
    }

    boolean this_present_targetCurrency = true && this.isSetTargetCurrency();
    boolean that_present_targetCurrency = true && that.isSetTargetCurrency();
    if (this_present_targetCurrency || that_present_targetCurrency) {
      if (!(this_present_targetCurrency && that_present_targetCurrency))
        return false;
      if (!this.targetCurrency.equals(that.targetCurrency))
        return false;
    }

    boolean this_present_exchangeRate = true && this.isSetExchangeRate();
    boolean that_present_exchangeRate = true && that.isSetExchangeRate();
    if (this_present_exchangeRate || that_present_exchangeRate) {
      if (!(this_present_exchangeRate && that_present_exchangeRate))
        return false;
      if (this.exchangeRate != that.exchangeRate)
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModityTimestamp = true && this.isSetLastModityTimestamp();
    boolean that_present_lastModityTimestamp = true && that.isSetLastModityTimestamp();
    if (this_present_lastModityTimestamp || that_present_lastModityTimestamp) {
      if (!(this_present_lastModityTimestamp && that_present_lastModityTimestamp))
        return false;
      if (this.lastModityTimestamp != that.lastModityTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ExchangeRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBaseCurrency()).compareTo(other.isSetBaseCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseCurrency, other.baseCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTargetCurrency()).compareTo(other.isSetTargetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetCurrency()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetCurrency, other.targetCurrency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeRate()).compareTo(other.isSetExchangeRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeRate, other.exchangeRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModityTimestamp()).compareTo(other.isSetLastModityTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModityTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModityTimestamp, other.lastModityTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExchangeRate(");
    boolean first = true;

    if (isSetName()) {
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
    }
    if (isSetBaseCurrency()) {
      if (!first) sb.append(", ");
      sb.append("baseCurrency:");
      if (this.baseCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.baseCurrency);
      }
      first = false;
    }
    if (isSetTargetCurrency()) {
      if (!first) sb.append(", ");
      sb.append("targetCurrency:");
      if (this.targetCurrency == null) {
        sb.append("null");
      } else {
        sb.append(this.targetCurrency);
      }
      first = false;
    }
    if (isSetExchangeRate()) {
      if (!first) sb.append(", ");
      sb.append("exchangeRate:");
      sb.append(this.exchangeRate);
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModityTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModityTimestamp:");
      sb.append(this.lastModityTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExchangeRateStandardSchemeFactory implements SchemeFactory {
    public ExchangeRateStandardScheme getScheme() {
      return new ExchangeRateStandardScheme();
    }
  }

  private static class ExchangeRateStandardScheme extends StandardScheme<ExchangeRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExchangeRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BASE_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.baseCurrency = iprot.readString();
              struct.setBaseCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TARGET_CURRENCY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetCurrency = iprot.readString();
              struct.setTargetCurrencyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXCHANGE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.exchangeRate = iprot.readDouble();
              struct.setExchangeRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestamp = iprot.readI64();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // LAST_MODITY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastModityTimestamp = iprot.readI64();
              struct.setLastModityTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExchangeRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        if (struct.isSetName()) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
      }
      if (struct.baseCurrency != null) {
        if (struct.isSetBaseCurrency()) {
          oprot.writeFieldBegin(BASE_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.baseCurrency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.targetCurrency != null) {
        if (struct.isSetTargetCurrency()) {
          oprot.writeFieldBegin(TARGET_CURRENCY_FIELD_DESC);
          oprot.writeString(struct.targetCurrency);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExchangeRate()) {
        oprot.writeFieldBegin(EXCHANGE_RATE_FIELD_DESC);
        oprot.writeDouble(struct.exchangeRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeFieldBegin(LAST_MODITY_TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.lastModityTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExchangeRateTupleSchemeFactory implements SchemeFactory {
    public ExchangeRateTupleScheme getScheme() {
      return new ExchangeRateTupleScheme();
    }
  }

  private static class ExchangeRateTupleScheme extends TupleScheme<ExchangeRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExchangeRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetBaseCurrency()) {
        optionals.set(1);
      }
      if (struct.isSetTargetCurrency()) {
        optionals.set(2);
      }
      if (struct.isSetExchangeRate()) {
        optionals.set(3);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(4);
      }
      if (struct.isSetLastModityTimestamp()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetBaseCurrency()) {
        oprot.writeString(struct.baseCurrency);
      }
      if (struct.isSetTargetCurrency()) {
        oprot.writeString(struct.targetCurrency);
      }
      if (struct.isSetExchangeRate()) {
        oprot.writeDouble(struct.exchangeRate);
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI64(struct.createTimestamp);
      }
      if (struct.isSetLastModityTimestamp()) {
        oprot.writeI64(struct.lastModityTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExchangeRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.baseCurrency = iprot.readString();
        struct.setBaseCurrencyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.targetCurrency = iprot.readString();
        struct.setTargetCurrencyIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exchangeRate = iprot.readDouble();
        struct.setExchangeRateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.createTimestamp = iprot.readI64();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastModityTimestamp = iprot.readI64();
        struct.setLastModityTimestampIsSet(true);
      }
    }
  }

}

