/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.tasknote.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingTaskNote implements org.apache.thrift.TBase<HostingTaskNote, HostingTaskNote._Fields>, java.io.Serializable, Cloneable, Comparable<HostingTaskNote> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingTaskNote");

  private static final org.apache.thrift.protocol.TField NOTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("noteType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NOTE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("noteKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField NOTE_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("noteContent", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingTaskNoteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingTaskNoteTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public HostingTaskNoteType noteType; // optional
  public HostingTaskNoteKey noteKey; // optional
  public String noteContent; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingTaskNoteType
     */
    NOTE_TYPE((short)1, "noteType"),
    NOTE_KEY((short)2, "noteKey"),
    NOTE_CONTENT((short)3, "noteContent"),
    CREATE_TIMESTAMP_MS((short)4, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)5, "lastmodifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTE_TYPE
          return NOTE_TYPE;
        case 2: // NOTE_KEY
          return NOTE_KEY;
        case 3: // NOTE_CONTENT
          return NOTE_CONTENT;
        case 4: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 5: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 0;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.NOTE_TYPE,_Fields.NOTE_KEY,_Fields.NOTE_CONTENT,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("noteType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingTaskNoteType.class)));
    tmpMap.put(_Fields.NOTE_KEY, new org.apache.thrift.meta_data.FieldMetaData("noteKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingTaskNoteKey.class)));
    tmpMap.put(_Fields.NOTE_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("noteContent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingTaskNote.class, metaDataMap);
  }

  public HostingTaskNote() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingTaskNote(HostingTaskNote other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetNoteType()) {
      this.noteType = other.noteType;
    }
    if (other.isSetNoteKey()) {
      this.noteKey = new HostingTaskNoteKey(other.noteKey);
    }
    if (other.isSetNoteContent()) {
      this.noteContent = other.noteContent;
    }
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
  }

  public HostingTaskNote deepCopy() {
    return new HostingTaskNote(this);
  }

  @Override
  public void clear() {
    this.noteType = null;
    this.noteKey = null;
    this.noteContent = null;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public HostingTaskNoteType getNoteType() {
    return this.noteType;
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public HostingTaskNote setNoteType(HostingTaskNoteType noteType) {
    this.noteType = noteType;
    return this;
  }

  public void unsetNoteType() {
    this.noteType = null;
  }

  /** Returns true if field noteType is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteType() {
    return this.noteType != null;
  }

  public void setNoteTypeIsSet(boolean value) {
    if (!value) {
      this.noteType = null;
    }
  }

  public HostingTaskNoteKey getNoteKey() {
    return this.noteKey;
  }

  public HostingTaskNote setNoteKey(HostingTaskNoteKey noteKey) {
    this.noteKey = noteKey;
    return this;
  }

  public void unsetNoteKey() {
    this.noteKey = null;
  }

  /** Returns true if field noteKey is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteKey() {
    return this.noteKey != null;
  }

  public void setNoteKeyIsSet(boolean value) {
    if (!value) {
      this.noteKey = null;
    }
  }

  public String getNoteContent() {
    return this.noteContent;
  }

  public HostingTaskNote setNoteContent(String noteContent) {
    this.noteContent = noteContent;
    return this;
  }

  public void unsetNoteContent() {
    this.noteContent = null;
  }

  /** Returns true if field noteContent is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteContent() {
    return this.noteContent != null;
  }

  public void setNoteContentIsSet(boolean value) {
    if (!value) {
      this.noteContent = null;
    }
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingTaskNote setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingTaskNote setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTE_TYPE:
      if (value == null) {
        unsetNoteType();
      } else {
        setNoteType((HostingTaskNoteType)value);
      }
      break;

    case NOTE_KEY:
      if (value == null) {
        unsetNoteKey();
      } else {
        setNoteKey((HostingTaskNoteKey)value);
      }
      break;

    case NOTE_CONTENT:
      if (value == null) {
        unsetNoteContent();
      } else {
        setNoteContent((String)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTE_TYPE:
      return getNoteType();

    case NOTE_KEY:
      return getNoteKey();

    case NOTE_CONTENT:
      return getNoteContent();

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTE_TYPE:
      return isSetNoteType();
    case NOTE_KEY:
      return isSetNoteKey();
    case NOTE_CONTENT:
      return isSetNoteContent();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingTaskNote)
      return this.equals((HostingTaskNote)that);
    return false;
  }

  public boolean equals(HostingTaskNote that) {
    if (that == null)
      return false;

    boolean this_present_noteType = true && this.isSetNoteType();
    boolean that_present_noteType = true && that.isSetNoteType();
    if (this_present_noteType || that_present_noteType) {
      if (!(this_present_noteType && that_present_noteType))
        return false;
      if (!this.noteType.equals(that.noteType))
        return false;
    }

    boolean this_present_noteKey = true && this.isSetNoteKey();
    boolean that_present_noteKey = true && that.isSetNoteKey();
    if (this_present_noteKey || that_present_noteKey) {
      if (!(this_present_noteKey && that_present_noteKey))
        return false;
      if (!this.noteKey.equals(that.noteKey))
        return false;
    }

    boolean this_present_noteContent = true && this.isSetNoteContent();
    boolean that_present_noteContent = true && that.isSetNoteContent();
    if (this_present_noteContent || that_present_noteContent) {
      if (!(this_present_noteContent && that_present_noteContent))
        return false;
      if (!this.noteContent.equals(that.noteContent))
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingTaskNote other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNoteType()).compareTo(other.isSetNoteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteType, other.noteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoteKey()).compareTo(other.isSetNoteKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteKey, other.noteKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoteContent()).compareTo(other.isSetNoteContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteContent, other.noteContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingTaskNote(");
    boolean first = true;

    if (isSetNoteType()) {
      sb.append("noteType:");
      if (this.noteType == null) {
        sb.append("null");
      } else {
        sb.append(this.noteType);
      }
      first = false;
    }
    if (isSetNoteKey()) {
      if (!first) sb.append(", ");
      sb.append("noteKey:");
      if (this.noteKey == null) {
        sb.append("null");
      } else {
        sb.append(this.noteKey);
      }
      first = false;
    }
    if (isSetNoteContent()) {
      if (!first) sb.append(", ");
      sb.append("noteContent:");
      if (this.noteContent == null) {
        sb.append("null");
      } else {
        sb.append(this.noteContent);
      }
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (noteKey != null) {
      noteKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingTaskNoteStandardSchemeFactory implements SchemeFactory {
    public HostingTaskNoteStandardScheme getScheme() {
      return new HostingTaskNoteStandardScheme();
    }
  }

  private static class HostingTaskNoteStandardScheme extends StandardScheme<HostingTaskNote> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingTaskNote struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noteType = HostingTaskNoteType.findByValue(iprot.readI32());
              struct.setNoteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOTE_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.noteKey = new HostingTaskNoteKey();
              struct.noteKey.read(iprot);
              struct.setNoteKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTE_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noteContent = iprot.readString();
              struct.setNoteContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingTaskNote struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.noteType != null) {
        if (struct.isSetNoteType()) {
          oprot.writeFieldBegin(NOTE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.noteType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.noteKey != null) {
        if (struct.isSetNoteKey()) {
          oprot.writeFieldBegin(NOTE_KEY_FIELD_DESC);
          struct.noteKey.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.noteContent != null) {
        if (struct.isSetNoteContent()) {
          oprot.writeFieldBegin(NOTE_CONTENT_FIELD_DESC);
          oprot.writeString(struct.noteContent);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingTaskNoteTupleSchemeFactory implements SchemeFactory {
    public HostingTaskNoteTupleScheme getScheme() {
      return new HostingTaskNoteTupleScheme();
    }
  }

  private static class HostingTaskNoteTupleScheme extends TupleScheme<HostingTaskNote> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingTaskNote struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNoteType()) {
        optionals.set(0);
      }
      if (struct.isSetNoteKey()) {
        optionals.set(1);
      }
      if (struct.isSetNoteContent()) {
        optionals.set(2);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(3);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetNoteType()) {
        oprot.writeI32(struct.noteType.getValue());
      }
      if (struct.isSetNoteKey()) {
        struct.noteKey.write(oprot);
      }
      if (struct.isSetNoteContent()) {
        oprot.writeString(struct.noteContent);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingTaskNote struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.noteType = HostingTaskNoteType.findByValue(iprot.readI32());
        struct.setNoteTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.noteKey = new HostingTaskNoteKey();
        struct.noteKey.read(iprot);
        struct.setNoteKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.noteContent = iprot.readString();
        struct.setNoteContentIsSet(true);
      }
      if (incoming.get(3)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
    }
  }

}

