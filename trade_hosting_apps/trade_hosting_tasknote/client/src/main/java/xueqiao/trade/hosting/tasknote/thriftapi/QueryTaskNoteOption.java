/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.tasknote.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryTaskNoteOption implements org.apache.thrift.TBase<QueryTaskNoteOption, QueryTaskNoteOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTaskNoteOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryTaskNoteOption");

  private static final org.apache.thrift.protocol.TField NOTE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("noteType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField KEY1_FIELD_DESC = new org.apache.thrift.protocol.TField("key1", org.apache.thrift.protocol.TType.SET, (short)2);
  private static final org.apache.thrift.protocol.TField KEY2_FIELD_DESC = new org.apache.thrift.protocol.TField("key2", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField KEY3_FIELD_DESC = new org.apache.thrift.protocol.TField("key3", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryTaskNoteOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryTaskNoteOptionTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public HostingTaskNoteType noteType; // required
  public Set<Long> key1; // optional
  public Set<Long> key2; // optional
  public Set<String> key3; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingTaskNoteType
     */
    NOTE_TYPE((short)1, "noteType"),
    KEY1((short)2, "key1"),
    KEY2((short)3, "key2"),
    KEY3((short)4, "key3");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NOTE_TYPE
          return NOTE_TYPE;
        case 2: // KEY1
          return KEY1;
        case 3: // KEY2
          return KEY2;
        case 4: // KEY3
          return KEY3;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.KEY1,_Fields.KEY2,_Fields.KEY3};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("noteType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingTaskNoteType.class)));
    tmpMap.put(_Fields.KEY1, new org.apache.thrift.meta_data.FieldMetaData("key1", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.KEY2, new org.apache.thrift.meta_data.FieldMetaData("key2", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.KEY3, new org.apache.thrift.meta_data.FieldMetaData("key3", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTaskNoteOption.class, metaDataMap);
  }

  public QueryTaskNoteOption() {
  }

  public QueryTaskNoteOption(
    HostingTaskNoteType noteType)
  {
    this();
    this.noteType = noteType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryTaskNoteOption(QueryTaskNoteOption other) {
    if (other.isSetNoteType()) {
      this.noteType = other.noteType;
    }
    if (other.isSetKey1()) {
      Set<Long> __this__key1 = new HashSet<Long>(other.key1);
      this.key1 = __this__key1;
    }
    if (other.isSetKey2()) {
      Set<Long> __this__key2 = new HashSet<Long>(other.key2);
      this.key2 = __this__key2;
    }
    if (other.isSetKey3()) {
      Set<String> __this__key3 = new HashSet<String>(other.key3);
      this.key3 = __this__key3;
    }
  }

  public QueryTaskNoteOption deepCopy() {
    return new QueryTaskNoteOption(this);
  }

  @Override
  public void clear() {
    this.noteType = null;
    this.key1 = null;
    this.key2 = null;
    this.key3 = null;
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public HostingTaskNoteType getNoteType() {
    return this.noteType;
  }

  /**
   * 
   * @see HostingTaskNoteType
   */
  public QueryTaskNoteOption setNoteType(HostingTaskNoteType noteType) {
    this.noteType = noteType;
    return this;
  }

  public void unsetNoteType() {
    this.noteType = null;
  }

  /** Returns true if field noteType is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteType() {
    return this.noteType != null;
  }

  public void setNoteTypeIsSet(boolean value) {
    if (!value) {
      this.noteType = null;
    }
  }

  public int getKey1Size() {
    return (this.key1 == null) ? 0 : this.key1.size();
  }

  public java.util.Iterator<Long> getKey1Iterator() {
    return (this.key1 == null) ? null : this.key1.iterator();
  }

  public void addToKey1(long elem) {
    if (this.key1 == null) {
      this.key1 = new HashSet<Long>();
    }
    this.key1.add(elem);
  }

  public Set<Long> getKey1() {
    return this.key1;
  }

  public QueryTaskNoteOption setKey1(Set<Long> key1) {
    this.key1 = key1;
    return this;
  }

  public void unsetKey1() {
    this.key1 = null;
  }

  /** Returns true if field key1 is set (has been assigned a value) and false otherwise */
  public boolean isSetKey1() {
    return this.key1 != null;
  }

  public void setKey1IsSet(boolean value) {
    if (!value) {
      this.key1 = null;
    }
  }

  public int getKey2Size() {
    return (this.key2 == null) ? 0 : this.key2.size();
  }

  public java.util.Iterator<Long> getKey2Iterator() {
    return (this.key2 == null) ? null : this.key2.iterator();
  }

  public void addToKey2(long elem) {
    if (this.key2 == null) {
      this.key2 = new HashSet<Long>();
    }
    this.key2.add(elem);
  }

  public Set<Long> getKey2() {
    return this.key2;
  }

  public QueryTaskNoteOption setKey2(Set<Long> key2) {
    this.key2 = key2;
    return this;
  }

  public void unsetKey2() {
    this.key2 = null;
  }

  /** Returns true if field key2 is set (has been assigned a value) and false otherwise */
  public boolean isSetKey2() {
    return this.key2 != null;
  }

  public void setKey2IsSet(boolean value) {
    if (!value) {
      this.key2 = null;
    }
  }

  public int getKey3Size() {
    return (this.key3 == null) ? 0 : this.key3.size();
  }

  public java.util.Iterator<String> getKey3Iterator() {
    return (this.key3 == null) ? null : this.key3.iterator();
  }

  public void addToKey3(String elem) {
    if (this.key3 == null) {
      this.key3 = new HashSet<String>();
    }
    this.key3.add(elem);
  }

  public Set<String> getKey3() {
    return this.key3;
  }

  public QueryTaskNoteOption setKey3(Set<String> key3) {
    this.key3 = key3;
    return this;
  }

  public void unsetKey3() {
    this.key3 = null;
  }

  /** Returns true if field key3 is set (has been assigned a value) and false otherwise */
  public boolean isSetKey3() {
    return this.key3 != null;
  }

  public void setKey3IsSet(boolean value) {
    if (!value) {
      this.key3 = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NOTE_TYPE:
      if (value == null) {
        unsetNoteType();
      } else {
        setNoteType((HostingTaskNoteType)value);
      }
      break;

    case KEY1:
      if (value == null) {
        unsetKey1();
      } else {
        setKey1((Set<Long>)value);
      }
      break;

    case KEY2:
      if (value == null) {
        unsetKey2();
      } else {
        setKey2((Set<Long>)value);
      }
      break;

    case KEY3:
      if (value == null) {
        unsetKey3();
      } else {
        setKey3((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTE_TYPE:
      return getNoteType();

    case KEY1:
      return getKey1();

    case KEY2:
      return getKey2();

    case KEY3:
      return getKey3();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NOTE_TYPE:
      return isSetNoteType();
    case KEY1:
      return isSetKey1();
    case KEY2:
      return isSetKey2();
    case KEY3:
      return isSetKey3();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryTaskNoteOption)
      return this.equals((QueryTaskNoteOption)that);
    return false;
  }

  public boolean equals(QueryTaskNoteOption that) {
    if (that == null)
      return false;

    boolean this_present_noteType = true && this.isSetNoteType();
    boolean that_present_noteType = true && that.isSetNoteType();
    if (this_present_noteType || that_present_noteType) {
      if (!(this_present_noteType && that_present_noteType))
        return false;
      if (!this.noteType.equals(that.noteType))
        return false;
    }

    boolean this_present_key1 = true && this.isSetKey1();
    boolean that_present_key1 = true && that.isSetKey1();
    if (this_present_key1 || that_present_key1) {
      if (!(this_present_key1 && that_present_key1))
        return false;
      if (!this.key1.equals(that.key1))
        return false;
    }

    boolean this_present_key2 = true && this.isSetKey2();
    boolean that_present_key2 = true && that.isSetKey2();
    if (this_present_key2 || that_present_key2) {
      if (!(this_present_key2 && that_present_key2))
        return false;
      if (!this.key2.equals(that.key2))
        return false;
    }

    boolean this_present_key3 = true && this.isSetKey3();
    boolean that_present_key3 = true && that.isSetKey3();
    if (this_present_key3 || that_present_key3) {
      if (!(this_present_key3 && that_present_key3))
        return false;
      if (!this.key3.equals(that.key3))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryTaskNoteOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetNoteType()).compareTo(other.isSetNoteType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteType, other.noteType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey1()).compareTo(other.isSetKey1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key1, other.key1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey2()).compareTo(other.isSetKey2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key2, other.key2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKey3()).compareTo(other.isSetKey3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key3, other.key3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryTaskNoteOption(");
    boolean first = true;

    sb.append("noteType:");
    if (this.noteType == null) {
      sb.append("null");
    } else {
      sb.append(this.noteType);
    }
    first = false;
    if (isSetKey1()) {
      if (!first) sb.append(", ");
      sb.append("key1:");
      if (this.key1 == null) {
        sb.append("null");
      } else {
        sb.append(this.key1);
      }
      first = false;
    }
    if (isSetKey2()) {
      if (!first) sb.append(", ");
      sb.append("key2:");
      if (this.key2 == null) {
        sb.append("null");
      } else {
        sb.append(this.key2);
      }
      first = false;
    }
    if (isSetKey3()) {
      if (!first) sb.append(", ");
      sb.append("key3:");
      if (this.key3 == null) {
        sb.append("null");
      } else {
        sb.append(this.key3);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (noteType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'noteType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryTaskNoteOptionStandardSchemeFactory implements SchemeFactory {
    public QueryTaskNoteOptionStandardScheme getScheme() {
      return new QueryTaskNoteOptionStandardScheme();
    }
  }

  private static class QueryTaskNoteOptionStandardScheme extends StandardScheme<QueryTaskNoteOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTaskNoteOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NOTE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.noteType = HostingTaskNoteType.findByValue(iprot.readI32());
              struct.setNoteTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY1
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set24 = iprot.readSetBegin();
                struct.key1 = new HashSet<Long>(2*_set24.size);
                for (int _i25 = 0; _i25 < _set24.size; ++_i25)
                {
                  long _elem26;
                  _elem26 = iprot.readI64();
                  struct.key1.add(_elem26);
                }
                iprot.readSetEnd();
              }
              struct.setKey1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY2
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set27 = iprot.readSetBegin();
                struct.key2 = new HashSet<Long>(2*_set27.size);
                for (int _i28 = 0; _i28 < _set27.size; ++_i28)
                {
                  long _elem29;
                  _elem29 = iprot.readI64();
                  struct.key2.add(_elem29);
                }
                iprot.readSetEnd();
              }
              struct.setKey2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // KEY3
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set30 = iprot.readSetBegin();
                struct.key3 = new HashSet<String>(2*_set30.size);
                for (int _i31 = 0; _i31 < _set30.size; ++_i31)
                {
                  String _elem32;
                  _elem32 = iprot.readString();
                  struct.key3.add(_elem32);
                }
                iprot.readSetEnd();
              }
              struct.setKey3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTaskNoteOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.noteType != null) {
        oprot.writeFieldBegin(NOTE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.noteType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.key1 != null) {
        if (struct.isSetKey1()) {
          oprot.writeFieldBegin(KEY1_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.key1.size()));
            for (long _iter33 : struct.key1)
            {
              oprot.writeI64(_iter33);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key2 != null) {
        if (struct.isSetKey2()) {
          oprot.writeFieldBegin(KEY2_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.key2.size()));
            for (long _iter34 : struct.key2)
            {
              oprot.writeI64(_iter34);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.key3 != null) {
        if (struct.isSetKey3()) {
          oprot.writeFieldBegin(KEY3_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.key3.size()));
            for (String _iter35 : struct.key3)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTaskNoteOptionTupleSchemeFactory implements SchemeFactory {
    public QueryTaskNoteOptionTupleScheme getScheme() {
      return new QueryTaskNoteOptionTupleScheme();
    }
  }

  private static class QueryTaskNoteOptionTupleScheme extends TupleScheme<QueryTaskNoteOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryTaskNoteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.noteType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetKey1()) {
        optionals.set(0);
      }
      if (struct.isSetKey2()) {
        optionals.set(1);
      }
      if (struct.isSetKey3()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKey1()) {
        {
          oprot.writeI32(struct.key1.size());
          for (long _iter36 : struct.key1)
          {
            oprot.writeI64(_iter36);
          }
        }
      }
      if (struct.isSetKey2()) {
        {
          oprot.writeI32(struct.key2.size());
          for (long _iter37 : struct.key2)
          {
            oprot.writeI64(_iter37);
          }
        }
      }
      if (struct.isSetKey3()) {
        {
          oprot.writeI32(struct.key3.size());
          for (String _iter38 : struct.key3)
          {
            oprot.writeString(_iter38);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryTaskNoteOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.noteType = HostingTaskNoteType.findByValue(iprot.readI32());
      struct.setNoteTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set39 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.key1 = new HashSet<Long>(2*_set39.size);
          for (int _i40 = 0; _i40 < _set39.size; ++_i40)
          {
            long _elem41;
            _elem41 = iprot.readI64();
            struct.key1.add(_elem41);
          }
        }
        struct.setKey1IsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TSet _set42 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.key2 = new HashSet<Long>(2*_set42.size);
          for (int _i43 = 0; _i43 < _set42.size; ++_i43)
          {
            long _elem44;
            _elem44 = iprot.readI64();
            struct.key2.add(_elem44);
          }
        }
        struct.setKey2IsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.key3 = new HashSet<String>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            String _elem47;
            _elem47 = iprot.readString();
            struct.key3.add(_elem47);
          }
        }
        struct.setKey3IsSet(true);
      }
    }
  }

}

