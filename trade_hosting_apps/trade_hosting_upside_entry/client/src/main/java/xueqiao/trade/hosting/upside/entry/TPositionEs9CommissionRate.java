/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPositionEs9CommissionRate implements org.apache.thrift.TBase<TPositionEs9CommissionRate, TPositionEs9CommissionRate._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionEs9CommissionRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionEs9CommissionRate");

  private static final org.apache.thrift.protocol.TField CALCULATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("calculateMode", org.apache.thrift.protocol.TType.I16, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_GROUP_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyGroupNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_CLOSE_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("openCloseFee", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField CLOSE_TODAY_FEE_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTodayFee", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionEs9CommissionRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionEs9CommissionRateTupleSchemeFactory());
  }

  public short calculateMode; // optional
  public String currencyGroupNo; // optional
  public String currencyNo; // optional
  public double openCloseFee; // optional
  public double closeTodayFee; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALCULATE_MODE((short)1, "calculateMode"),
    CURRENCY_GROUP_NO((short)2, "currencyGroupNo"),
    CURRENCY_NO((short)3, "currencyNo"),
    OPEN_CLOSE_FEE((short)4, "openCloseFee"),
    CLOSE_TODAY_FEE((short)5, "closeTodayFee");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALCULATE_MODE
          return CALCULATE_MODE;
        case 2: // CURRENCY_GROUP_NO
          return CURRENCY_GROUP_NO;
        case 3: // CURRENCY_NO
          return CURRENCY_NO;
        case 4: // OPEN_CLOSE_FEE
          return OPEN_CLOSE_FEE;
        case 5: // CLOSE_TODAY_FEE
          return CLOSE_TODAY_FEE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CALCULATEMODE_ISSET_ID = 0;
  private static final int __OPENCLOSEFEE_ISSET_ID = 1;
  private static final int __CLOSETODAYFEE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.CALCULATE_MODE,_Fields.CURRENCY_GROUP_NO,_Fields.CURRENCY_NO,_Fields.OPEN_CLOSE_FEE,_Fields.CLOSE_TODAY_FEE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALCULATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("calculateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.CURRENCY_GROUP_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyGroupNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_CLOSE_FEE, new org.apache.thrift.meta_data.FieldMetaData("openCloseFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_TODAY_FEE, new org.apache.thrift.meta_data.FieldMetaData("closeTodayFee", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionEs9CommissionRate.class, metaDataMap);
  }

  public TPositionEs9CommissionRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionEs9CommissionRate(TPositionEs9CommissionRate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.calculateMode = other.calculateMode;
    if (other.isSetCurrencyGroupNo()) {
      this.currencyGroupNo = other.currencyGroupNo;
    }
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    this.openCloseFee = other.openCloseFee;
    this.closeTodayFee = other.closeTodayFee;
  }

  public TPositionEs9CommissionRate deepCopy() {
    return new TPositionEs9CommissionRate(this);
  }

  @Override
  public void clear() {
    setCalculateModeIsSet(false);
    this.calculateMode = 0;
    this.currencyGroupNo = null;
    this.currencyNo = null;
    setOpenCloseFeeIsSet(false);
    this.openCloseFee = 0.0;
    setCloseTodayFeeIsSet(false);
    this.closeTodayFee = 0.0;
  }

  public short getCalculateMode() {
    return this.calculateMode;
  }

  public TPositionEs9CommissionRate setCalculateMode(short calculateMode) {
    this.calculateMode = calculateMode;
    setCalculateModeIsSet(true);
    return this;
  }

  public void unsetCalculateMode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALCULATEMODE_ISSET_ID);
  }

  /** Returns true if field calculateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetCalculateMode() {
    return EncodingUtils.testBit(__isset_bitfield, __CALCULATEMODE_ISSET_ID);
  }

  public void setCalculateModeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALCULATEMODE_ISSET_ID, value);
  }

  public String getCurrencyGroupNo() {
    return this.currencyGroupNo;
  }

  public TPositionEs9CommissionRate setCurrencyGroupNo(String currencyGroupNo) {
    this.currencyGroupNo = currencyGroupNo;
    return this;
  }

  public void unsetCurrencyGroupNo() {
    this.currencyGroupNo = null;
  }

  /** Returns true if field currencyGroupNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyGroupNo() {
    return this.currencyGroupNo != null;
  }

  public void setCurrencyGroupNoIsSet(boolean value) {
    if (!value) {
      this.currencyGroupNo = null;
    }
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public TPositionEs9CommissionRate setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public double getOpenCloseFee() {
    return this.openCloseFee;
  }

  public TPositionEs9CommissionRate setOpenCloseFee(double openCloseFee) {
    this.openCloseFee = openCloseFee;
    setOpenCloseFeeIsSet(true);
    return this;
  }

  public void unsetOpenCloseFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  /** Returns true if field openCloseFee is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCloseFee() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID);
  }

  public void setOpenCloseFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENCLOSEFEE_ISSET_ID, value);
  }

  public double getCloseTodayFee() {
    return this.closeTodayFee;
  }

  public TPositionEs9CommissionRate setCloseTodayFee(double closeTodayFee) {
    this.closeTodayFee = closeTodayFee;
    setCloseTodayFeeIsSet(true);
    return this;
  }

  public void unsetCloseTodayFee() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  /** Returns true if field closeTodayFee is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTodayFee() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID);
  }

  public void setCloseTodayFeeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSETODAYFEE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CALCULATE_MODE:
      if (value == null) {
        unsetCalculateMode();
      } else {
        setCalculateMode((Short)value);
      }
      break;

    case CURRENCY_GROUP_NO:
      if (value == null) {
        unsetCurrencyGroupNo();
      } else {
        setCurrencyGroupNo((String)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case OPEN_CLOSE_FEE:
      if (value == null) {
        unsetOpenCloseFee();
      } else {
        setOpenCloseFee((Double)value);
      }
      break;

    case CLOSE_TODAY_FEE:
      if (value == null) {
        unsetCloseTodayFee();
      } else {
        setCloseTodayFee((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CALCULATE_MODE:
      return Short.valueOf(getCalculateMode());

    case CURRENCY_GROUP_NO:
      return getCurrencyGroupNo();

    case CURRENCY_NO:
      return getCurrencyNo();

    case OPEN_CLOSE_FEE:
      return Double.valueOf(getOpenCloseFee());

    case CLOSE_TODAY_FEE:
      return Double.valueOf(getCloseTodayFee());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CALCULATE_MODE:
      return isSetCalculateMode();
    case CURRENCY_GROUP_NO:
      return isSetCurrencyGroupNo();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case OPEN_CLOSE_FEE:
      return isSetOpenCloseFee();
    case CLOSE_TODAY_FEE:
      return isSetCloseTodayFee();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionEs9CommissionRate)
      return this.equals((TPositionEs9CommissionRate)that);
    return false;
  }

  public boolean equals(TPositionEs9CommissionRate that) {
    if (that == null)
      return false;

    boolean this_present_calculateMode = true && this.isSetCalculateMode();
    boolean that_present_calculateMode = true && that.isSetCalculateMode();
    if (this_present_calculateMode || that_present_calculateMode) {
      if (!(this_present_calculateMode && that_present_calculateMode))
        return false;
      if (this.calculateMode != that.calculateMode)
        return false;
    }

    boolean this_present_currencyGroupNo = true && this.isSetCurrencyGroupNo();
    boolean that_present_currencyGroupNo = true && that.isSetCurrencyGroupNo();
    if (this_present_currencyGroupNo || that_present_currencyGroupNo) {
      if (!(this_present_currencyGroupNo && that_present_currencyGroupNo))
        return false;
      if (!this.currencyGroupNo.equals(that.currencyGroupNo))
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_openCloseFee = true && this.isSetOpenCloseFee();
    boolean that_present_openCloseFee = true && that.isSetOpenCloseFee();
    if (this_present_openCloseFee || that_present_openCloseFee) {
      if (!(this_present_openCloseFee && that_present_openCloseFee))
        return false;
      if (this.openCloseFee != that.openCloseFee)
        return false;
    }

    boolean this_present_closeTodayFee = true && this.isSetCloseTodayFee();
    boolean that_present_closeTodayFee = true && that.isSetCloseTodayFee();
    if (this_present_closeTodayFee || that_present_closeTodayFee) {
      if (!(this_present_closeTodayFee && that_present_closeTodayFee))
        return false;
      if (this.closeTodayFee != that.closeTodayFee)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionEs9CommissionRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCalculateMode()).compareTo(other.isSetCalculateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalculateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calculateMode, other.calculateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyGroupNo()).compareTo(other.isSetCurrencyGroupNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyGroupNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyGroupNo, other.currencyGroupNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCloseFee()).compareTo(other.isSetOpenCloseFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCloseFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCloseFee, other.openCloseFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTodayFee()).compareTo(other.isSetCloseTodayFee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTodayFee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTodayFee, other.closeTodayFee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionEs9CommissionRate(");
    boolean first = true;

    if (isSetCalculateMode()) {
      sb.append("calculateMode:");
      sb.append(this.calculateMode);
      first = false;
    }
    if (isSetCurrencyGroupNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyGroupNo:");
      if (this.currencyGroupNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyGroupNo);
      }
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetOpenCloseFee()) {
      if (!first) sb.append(", ");
      sb.append("openCloseFee:");
      sb.append(this.openCloseFee);
      first = false;
    }
    if (isSetCloseTodayFee()) {
      if (!first) sb.append(", ");
      sb.append("closeTodayFee:");
      sb.append(this.closeTodayFee);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionEs9CommissionRateStandardSchemeFactory implements SchemeFactory {
    public TPositionEs9CommissionRateStandardScheme getScheme() {
      return new TPositionEs9CommissionRateStandardScheme();
    }
  }

  private static class TPositionEs9CommissionRateStandardScheme extends StandardScheme<TPositionEs9CommissionRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionEs9CommissionRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALCULATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.calculateMode = iprot.readI16();
              struct.setCalculateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY_GROUP_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyGroupNo = iprot.readString();
              struct.setCurrencyGroupNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_CLOSE_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.openCloseFee = iprot.readDouble();
              struct.setOpenCloseFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLOSE_TODAY_FEE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeTodayFee = iprot.readDouble();
              struct.setCloseTodayFeeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionEs9CommissionRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetCalculateMode()) {
        oprot.writeFieldBegin(CALCULATE_MODE_FIELD_DESC);
        oprot.writeI16(struct.calculateMode);
        oprot.writeFieldEnd();
      }
      if (struct.currencyGroupNo != null) {
        if (struct.isSetCurrencyGroupNo()) {
          oprot.writeFieldBegin(CURRENCY_GROUP_NO_FIELD_DESC);
          oprot.writeString(struct.currencyGroupNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeFieldBegin(OPEN_CLOSE_FEE_FIELD_DESC);
        oprot.writeDouble(struct.openCloseFee);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeFieldBegin(CLOSE_TODAY_FEE_FIELD_DESC);
        oprot.writeDouble(struct.closeTodayFee);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionEs9CommissionRateTupleSchemeFactory implements SchemeFactory {
    public TPositionEs9CommissionRateTupleScheme getScheme() {
      return new TPositionEs9CommissionRateTupleScheme();
    }
  }

  private static class TPositionEs9CommissionRateTupleScheme extends TupleScheme<TPositionEs9CommissionRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionEs9CommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCalculateMode()) {
        optionals.set(0);
      }
      if (struct.isSetCurrencyGroupNo()) {
        optionals.set(1);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(2);
      }
      if (struct.isSetOpenCloseFee()) {
        optionals.set(3);
      }
      if (struct.isSetCloseTodayFee()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetCalculateMode()) {
        oprot.writeI16(struct.calculateMode);
      }
      if (struct.isSetCurrencyGroupNo()) {
        oprot.writeString(struct.currencyGroupNo);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetOpenCloseFee()) {
        oprot.writeDouble(struct.openCloseFee);
      }
      if (struct.isSetCloseTodayFee()) {
        oprot.writeDouble(struct.closeTodayFee);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionEs9CommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.calculateMode = iprot.readI16();
        struct.setCalculateModeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currencyGroupNo = iprot.readString();
        struct.setCurrencyGroupNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openCloseFee = iprot.readDouble();
        struct.setOpenCloseFeeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.closeTodayFee = iprot.readDouble();
        struct.setCloseTodayFeeIsSet(true);
      }
    }
  }

}

