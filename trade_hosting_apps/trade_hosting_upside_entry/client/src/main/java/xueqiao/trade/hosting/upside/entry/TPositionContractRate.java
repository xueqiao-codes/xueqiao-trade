/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPositionContractRate implements org.apache.thrift.TBase<TPositionContractRate, TPositionContractRate._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionContractRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionContractRate");

  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRate", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField COMMISSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionRate", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionContractRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionContractRateTupleSchemeFactory());
  }

  public String sledContractCode; // optional
  public TPositionMarginRate marginRate; // optional
  public TPositionCommissionRate commissionRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_CONTRACT_CODE((short)1, "sledContractCode"),
    MARGIN_RATE((short)3, "marginRate"),
    COMMISSION_RATE((short)4, "commissionRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 3: // MARGIN_RATE
          return MARGIN_RATE;
        case 4: // COMMISSION_RATE
          return COMMISSION_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.SLED_CONTRACT_CODE,_Fields.MARGIN_RATE,_Fields.COMMISSION_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARGIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("marginRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionMarginRate.class)));
    tmpMap.put(_Fields.COMMISSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("commissionRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionCommissionRate.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionContractRate.class, metaDataMap);
  }

  public TPositionContractRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionContractRate(TPositionContractRate other) {
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    if (other.isSetMarginRate()) {
      this.marginRate = new TPositionMarginRate(other.marginRate);
    }
    if (other.isSetCommissionRate()) {
      this.commissionRate = new TPositionCommissionRate(other.commissionRate);
    }
  }

  public TPositionContractRate deepCopy() {
    return new TPositionContractRate(this);
  }

  @Override
  public void clear() {
    this.sledContractCode = null;
    this.marginRate = null;
    this.commissionRate = null;
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public TPositionContractRate setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public TPositionMarginRate getMarginRate() {
    return this.marginRate;
  }

  public TPositionContractRate setMarginRate(TPositionMarginRate marginRate) {
    this.marginRate = marginRate;
    return this;
  }

  public void unsetMarginRate() {
    this.marginRate = null;
  }

  /** Returns true if field marginRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRate() {
    return this.marginRate != null;
  }

  public void setMarginRateIsSet(boolean value) {
    if (!value) {
      this.marginRate = null;
    }
  }

  public TPositionCommissionRate getCommissionRate() {
    return this.commissionRate;
  }

  public TPositionContractRate setCommissionRate(TPositionCommissionRate commissionRate) {
    this.commissionRate = commissionRate;
    return this;
  }

  public void unsetCommissionRate() {
    this.commissionRate = null;
  }

  /** Returns true if field commissionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionRate() {
    return this.commissionRate != null;
  }

  public void setCommissionRateIsSet(boolean value) {
    if (!value) {
      this.commissionRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case MARGIN_RATE:
      if (value == null) {
        unsetMarginRate();
      } else {
        setMarginRate((TPositionMarginRate)value);
      }
      break;

    case COMMISSION_RATE:
      if (value == null) {
        unsetCommissionRate();
      } else {
        setCommissionRate((TPositionCommissionRate)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case MARGIN_RATE:
      return getMarginRate();

    case COMMISSION_RATE:
      return getCommissionRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case MARGIN_RATE:
      return isSetMarginRate();
    case COMMISSION_RATE:
      return isSetCommissionRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionContractRate)
      return this.equals((TPositionContractRate)that);
    return false;
  }

  public boolean equals(TPositionContractRate that) {
    if (that == null)
      return false;

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_marginRate = true && this.isSetMarginRate();
    boolean that_present_marginRate = true && that.isSetMarginRate();
    if (this_present_marginRate || that_present_marginRate) {
      if (!(this_present_marginRate && that_present_marginRate))
        return false;
      if (!this.marginRate.equals(that.marginRate))
        return false;
    }

    boolean this_present_commissionRate = true && this.isSetCommissionRate();
    boolean that_present_commissionRate = true && that.isSetCommissionRate();
    if (this_present_commissionRate || that_present_commissionRate) {
      if (!(this_present_commissionRate && that_present_commissionRate))
        return false;
      if (!this.commissionRate.equals(that.commissionRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionContractRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRate()).compareTo(other.isSetMarginRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRate, other.marginRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionRate()).compareTo(other.isSetCommissionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionRate, other.commissionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionContractRate(");
    boolean first = true;

    if (isSetSledContractCode()) {
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetMarginRate()) {
      if (!first) sb.append(", ");
      sb.append("marginRate:");
      if (this.marginRate == null) {
        sb.append("null");
      } else {
        sb.append(this.marginRate);
      }
      first = false;
    }
    if (isSetCommissionRate()) {
      if (!first) sb.append(", ");
      sb.append("commissionRate:");
      if (this.commissionRate == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionRate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (marginRate != null) {
      marginRate.validate();
    }
    if (commissionRate != null) {
      commissionRate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionContractRateStandardSchemeFactory implements SchemeFactory {
    public TPositionContractRateStandardScheme getScheme() {
      return new TPositionContractRateStandardScheme();
    }
  }

  private static class TPositionContractRateStandardScheme extends StandardScheme<TPositionContractRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionContractRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MARGIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.marginRate = new TPositionMarginRate();
              struct.marginRate.read(iprot);
              struct.setMarginRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // COMMISSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commissionRate = new TPositionCommissionRate();
              struct.commissionRate.read(iprot);
              struct.setCommissionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionContractRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marginRate != null) {
        if (struct.isSetMarginRate()) {
          oprot.writeFieldBegin(MARGIN_RATE_FIELD_DESC);
          struct.marginRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commissionRate != null) {
        if (struct.isSetCommissionRate()) {
          oprot.writeFieldBegin(COMMISSION_RATE_FIELD_DESC);
          struct.commissionRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionContractRateTupleSchemeFactory implements SchemeFactory {
    public TPositionContractRateTupleScheme getScheme() {
      return new TPositionContractRateTupleScheme();
    }
  }

  private static class TPositionContractRateTupleScheme extends TupleScheme<TPositionContractRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionContractRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledContractCode()) {
        optionals.set(0);
      }
      if (struct.isSetMarginRate()) {
        optionals.set(1);
      }
      if (struct.isSetCommissionRate()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetMarginRate()) {
        struct.marginRate.write(oprot);
      }
      if (struct.isSetCommissionRate()) {
        struct.commissionRate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionContractRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.marginRate = new TPositionMarginRate();
        struct.marginRate.read(iprot);
        struct.setMarginRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.commissionRate = new TPositionCommissionRate();
        struct.commissionRate.read(iprot);
        struct.setCommissionRateIsSet(true);
      }
    }
  }

}

