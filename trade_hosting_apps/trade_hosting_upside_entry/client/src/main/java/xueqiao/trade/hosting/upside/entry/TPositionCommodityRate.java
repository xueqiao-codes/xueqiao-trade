/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPositionCommodityRate implements org.apache.thrift.TBase<TPositionCommodityRate, TPositionCommodityRate._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionCommodityRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionCommodityRate");

  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_MIC_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeMic", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MARGIN_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("marginRate", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField COMMISSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("commissionRate", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField CONTRACT_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("contractRates", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionCommodityRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionCommodityRateTupleSchemeFactory());
  }

  public long sledCommodityId; // optional
  public short sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public String sledExchangeMic; // optional
  public TPositionMarginRate marginRate; // optional
  public TPositionCommissionRate commissionRate; // optional
  public Map<String,TPositionContractRate> contractRates; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_COMMODITY_ID((short)1, "sledCommodityId"),
    SLED_COMMODITY_TYPE((short)2, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)3, "sledCommodityCode"),
    SLED_EXCHANGE_MIC((short)4, "sledExchangeMic"),
    MARGIN_RATE((short)5, "marginRate"),
    COMMISSION_RATE((short)6, "commissionRate"),
    CONTRACT_RATES((short)7, "contractRates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 2: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 3: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 4: // SLED_EXCHANGE_MIC
          return SLED_EXCHANGE_MIC;
        case 5: // MARGIN_RATE
          return MARGIN_RATE;
        case 6: // COMMISSION_RATE
          return COMMISSION_RATE;
        case 7: // CONTRACT_RATES
          return CONTRACT_RATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_COMMODITY_ID,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.SLED_EXCHANGE_MIC,_Fields.MARGIN_RATE,_Fields.COMMISSION_RATE,_Fields.CONTRACT_RATES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_EXCHANGE_MIC, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeMic", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MARGIN_RATE, new org.apache.thrift.meta_data.FieldMetaData("marginRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionMarginRate.class)));
    tmpMap.put(_Fields.COMMISSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("commissionRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionCommissionRate.class)));
    tmpMap.put(_Fields.CONTRACT_RATES, new org.apache.thrift.meta_data.FieldMetaData("contractRates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionContractRate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionCommodityRate.class, metaDataMap);
  }

  public TPositionCommodityRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionCommodityRate(TPositionCommodityRate other) {
    __isset_bitfield = other.__isset_bitfield;
    this.sledCommodityId = other.sledCommodityId;
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    if (other.isSetSledExchangeMic()) {
      this.sledExchangeMic = other.sledExchangeMic;
    }
    if (other.isSetMarginRate()) {
      this.marginRate = new TPositionMarginRate(other.marginRate);
    }
    if (other.isSetCommissionRate()) {
      this.commissionRate = new TPositionCommissionRate(other.commissionRate);
    }
    if (other.isSetContractRates()) {
      Map<String,TPositionContractRate> __this__contractRates = new HashMap<String,TPositionContractRate>(other.contractRates.size());
      for (Map.Entry<String, TPositionContractRate> other_element : other.contractRates.entrySet()) {

        String other_element_key = other_element.getKey();
        TPositionContractRate other_element_value = other_element.getValue();

        String __this__contractRates_copy_key = other_element_key;

        TPositionContractRate __this__contractRates_copy_value = new TPositionContractRate(other_element_value);

        __this__contractRates.put(__this__contractRates_copy_key, __this__contractRates_copy_value);
      }
      this.contractRates = __this__contractRates;
    }
  }

  public TPositionCommodityRate deepCopy() {
    return new TPositionCommodityRate(this);
  }

  @Override
  public void clear() {
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    this.sledExchangeMic = null;
    this.marginRate = null;
    this.commissionRate = null;
    this.contractRates = null;
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public TPositionCommodityRate setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public short getSledCommodityType() {
    return this.sledCommodityType;
  }

  public TPositionCommodityRate setSledCommodityType(short sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public TPositionCommodityRate setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public String getSledExchangeMic() {
    return this.sledExchangeMic;
  }

  public TPositionCommodityRate setSledExchangeMic(String sledExchangeMic) {
    this.sledExchangeMic = sledExchangeMic;
    return this;
  }

  public void unsetSledExchangeMic() {
    this.sledExchangeMic = null;
  }

  /** Returns true if field sledExchangeMic is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeMic() {
    return this.sledExchangeMic != null;
  }

  public void setSledExchangeMicIsSet(boolean value) {
    if (!value) {
      this.sledExchangeMic = null;
    }
  }

  public TPositionMarginRate getMarginRate() {
    return this.marginRate;
  }

  public TPositionCommodityRate setMarginRate(TPositionMarginRate marginRate) {
    this.marginRate = marginRate;
    return this;
  }

  public void unsetMarginRate() {
    this.marginRate = null;
  }

  /** Returns true if field marginRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMarginRate() {
    return this.marginRate != null;
  }

  public void setMarginRateIsSet(boolean value) {
    if (!value) {
      this.marginRate = null;
    }
  }

  public TPositionCommissionRate getCommissionRate() {
    return this.commissionRate;
  }

  public TPositionCommodityRate setCommissionRate(TPositionCommissionRate commissionRate) {
    this.commissionRate = commissionRate;
    return this;
  }

  public void unsetCommissionRate() {
    this.commissionRate = null;
  }

  /** Returns true if field commissionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCommissionRate() {
    return this.commissionRate != null;
  }

  public void setCommissionRateIsSet(boolean value) {
    if (!value) {
      this.commissionRate = null;
    }
  }

  public int getContractRatesSize() {
    return (this.contractRates == null) ? 0 : this.contractRates.size();
  }

  public void putToContractRates(String key, TPositionContractRate val) {
    if (this.contractRates == null) {
      this.contractRates = new HashMap<String,TPositionContractRate>();
    }
    this.contractRates.put(key, val);
  }

  public Map<String,TPositionContractRate> getContractRates() {
    return this.contractRates;
  }

  public TPositionCommodityRate setContractRates(Map<String,TPositionContractRate> contractRates) {
    this.contractRates = contractRates;
    return this;
  }

  public void unsetContractRates() {
    this.contractRates = null;
  }

  /** Returns true if field contractRates is set (has been assigned a value) and false otherwise */
  public boolean isSetContractRates() {
    return this.contractRates != null;
  }

  public void setContractRatesIsSet(boolean value) {
    if (!value) {
      this.contractRates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Short)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case SLED_EXCHANGE_MIC:
      if (value == null) {
        unsetSledExchangeMic();
      } else {
        setSledExchangeMic((String)value);
      }
      break;

    case MARGIN_RATE:
      if (value == null) {
        unsetMarginRate();
      } else {
        setMarginRate((TPositionMarginRate)value);
      }
      break;

    case COMMISSION_RATE:
      if (value == null) {
        unsetCommissionRate();
      } else {
        setCommissionRate((TPositionCommissionRate)value);
      }
      break;

    case CONTRACT_RATES:
      if (value == null) {
        unsetContractRates();
      } else {
        setContractRates((Map<String,TPositionContractRate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case SLED_COMMODITY_TYPE:
      return Short.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case SLED_EXCHANGE_MIC:
      return getSledExchangeMic();

    case MARGIN_RATE:
      return getMarginRate();

    case COMMISSION_RATE:
      return getCommissionRate();

    case CONTRACT_RATES:
      return getContractRates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case SLED_EXCHANGE_MIC:
      return isSetSledExchangeMic();
    case MARGIN_RATE:
      return isSetMarginRate();
    case COMMISSION_RATE:
      return isSetCommissionRate();
    case CONTRACT_RATES:
      return isSetContractRates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionCommodityRate)
      return this.equals((TPositionCommodityRate)that);
    return false;
  }

  public boolean equals(TPositionCommodityRate that) {
    if (that == null)
      return false;

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_sledExchangeMic = true && this.isSetSledExchangeMic();
    boolean that_present_sledExchangeMic = true && that.isSetSledExchangeMic();
    if (this_present_sledExchangeMic || that_present_sledExchangeMic) {
      if (!(this_present_sledExchangeMic && that_present_sledExchangeMic))
        return false;
      if (!this.sledExchangeMic.equals(that.sledExchangeMic))
        return false;
    }

    boolean this_present_marginRate = true && this.isSetMarginRate();
    boolean that_present_marginRate = true && that.isSetMarginRate();
    if (this_present_marginRate || that_present_marginRate) {
      if (!(this_present_marginRate && that_present_marginRate))
        return false;
      if (!this.marginRate.equals(that.marginRate))
        return false;
    }

    boolean this_present_commissionRate = true && this.isSetCommissionRate();
    boolean that_present_commissionRate = true && that.isSetCommissionRate();
    if (this_present_commissionRate || that_present_commissionRate) {
      if (!(this_present_commissionRate && that_present_commissionRate))
        return false;
      if (!this.commissionRate.equals(that.commissionRate))
        return false;
    }

    boolean this_present_contractRates = true && this.isSetContractRates();
    boolean that_present_contractRates = true && that.isSetContractRates();
    if (this_present_contractRates || that_present_contractRates) {
      if (!(this_present_contractRates && that_present_contractRates))
        return false;
      if (!this.contractRates.equals(that.contractRates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionCommodityRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledExchangeMic()).compareTo(other.isSetSledExchangeMic());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeMic()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeMic, other.sledExchangeMic);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMarginRate()).compareTo(other.isSetMarginRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMarginRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.marginRate, other.marginRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommissionRate()).compareTo(other.isSetCommissionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommissionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commissionRate, other.commissionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractRates()).compareTo(other.isSetContractRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractRates, other.contractRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionCommodityRate(");
    boolean first = true;

    if (isSetSledCommodityId()) {
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetSledExchangeMic()) {
      if (!first) sb.append(", ");
      sb.append("sledExchangeMic:");
      if (this.sledExchangeMic == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeMic);
      }
      first = false;
    }
    if (isSetMarginRate()) {
      if (!first) sb.append(", ");
      sb.append("marginRate:");
      if (this.marginRate == null) {
        sb.append("null");
      } else {
        sb.append(this.marginRate);
      }
      first = false;
    }
    if (isSetCommissionRate()) {
      if (!first) sb.append(", ");
      sb.append("commissionRate:");
      if (this.commissionRate == null) {
        sb.append("null");
      } else {
        sb.append(this.commissionRate);
      }
      first = false;
    }
    if (isSetContractRates()) {
      if (!first) sb.append(", ");
      sb.append("contractRates:");
      if (this.contractRates == null) {
        sb.append("null");
      } else {
        sb.append(this.contractRates);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (marginRate != null) {
      marginRate.validate();
    }
    if (commissionRate != null) {
      commissionRate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionCommodityRateStandardSchemeFactory implements SchemeFactory {
    public TPositionCommodityRateStandardScheme getScheme() {
      return new TPositionCommodityRateStandardScheme();
    }
  }

  private static class TPositionCommodityRateStandardScheme extends StandardScheme<TPositionCommodityRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionCommodityRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sledCommodityType = iprot.readI16();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_EXCHANGE_MIC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeMic = iprot.readString();
              struct.setSledExchangeMicIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MARGIN_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.marginRate = new TPositionMarginRate();
              struct.marginRate.read(iprot);
              struct.setMarginRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMMISSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.commissionRate = new TPositionCommissionRate();
              struct.commissionRate.read(iprot);
              struct.setCommissionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTRACT_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.contractRates = new HashMap<String,TPositionContractRate>(2*_map26.size);
                for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                {
                  String _key28;
                  TPositionContractRate _val29;
                  _key28 = iprot.readString();
                  _val29 = new TPositionContractRate();
                  _val29.read(iprot);
                  struct.contractRates.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setContractRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionCommodityRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sledExchangeMic != null) {
        if (struct.isSetSledExchangeMic()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_MIC_FIELD_DESC);
          oprot.writeString(struct.sledExchangeMic);
          oprot.writeFieldEnd();
        }
      }
      if (struct.marginRate != null) {
        if (struct.isSetMarginRate()) {
          oprot.writeFieldBegin(MARGIN_RATE_FIELD_DESC);
          struct.marginRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.commissionRate != null) {
        if (struct.isSetCommissionRate()) {
          oprot.writeFieldBegin(COMMISSION_RATE_FIELD_DESC);
          struct.commissionRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractRates != null) {
        if (struct.isSetContractRates()) {
          oprot.writeFieldBegin(CONTRACT_RATES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.contractRates.size()));
            for (Map.Entry<String, TPositionContractRate> _iter30 : struct.contractRates.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              _iter30.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionCommodityRateTupleSchemeFactory implements SchemeFactory {
    public TPositionCommodityRateTupleScheme getScheme() {
      return new TPositionCommodityRateTupleScheme();
    }
  }

  private static class TPositionCommodityRateTupleScheme extends TupleScheme<TPositionCommodityRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionCommodityRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledCommodityId()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(2);
      }
      if (struct.isSetSledExchangeMic()) {
        optionals.set(3);
      }
      if (struct.isSetMarginRate()) {
        optionals.set(4);
      }
      if (struct.isSetCommissionRate()) {
        optionals.set(5);
      }
      if (struct.isSetContractRates()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI16(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetSledExchangeMic()) {
        oprot.writeString(struct.sledExchangeMic);
      }
      if (struct.isSetMarginRate()) {
        struct.marginRate.write(oprot);
      }
      if (struct.isSetCommissionRate()) {
        struct.commissionRate.write(oprot);
      }
      if (struct.isSetContractRates()) {
        {
          oprot.writeI32(struct.contractRates.size());
          for (Map.Entry<String, TPositionContractRate> _iter31 : struct.contractRates.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionCommodityRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityType = iprot.readI16();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledExchangeMic = iprot.readString();
        struct.setSledExchangeMicIsSet(true);
      }
      if (incoming.get(4)) {
        struct.marginRate = new TPositionMarginRate();
        struct.marginRate.read(iprot);
        struct.setMarginRateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.commissionRate = new TPositionCommissionRate();
        struct.commissionRate.read(iprot);
        struct.setCommissionRateIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contractRates = new HashMap<String,TPositionContractRate>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34;
            TPositionContractRate _val35;
            _key34 = iprot.readString();
            _val35 = new TPositionContractRate();
            _val35.read(iprot);
            struct.contractRates.put(_key34, _val35);
          }
        }
        struct.setContractRatesIsSet(true);
      }
    }
  }

}

