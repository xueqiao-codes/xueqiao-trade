/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 交易账号的持仓费率详情
 */
public class TPositionRateDetails implements org.apache.thrift.TBase<TPositionRateDetails, TPositionRateDetails._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionRateDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionRateDetails");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TECH_PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("techPlatform", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField COMMODITY_RATES_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityRates", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionRateDetailsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionRateDetailsTupleSchemeFactory());
  }

  public long tradeAccountId; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.BrokerTechPlatform
   */
  public xueqiao.trade.hosting.BrokerTechPlatform techPlatform; // optional
  public List<TPositionCommodityRate> commodityRates; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT_ID((short)1, "tradeAccountId"),
    /**
     * 
     * @see xueqiao.trade.hosting.BrokerTechPlatform
     */
    TECH_PLATFORM((short)2, "techPlatform"),
    COMMODITY_RATES((short)3, "commodityRates");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 2: // TECH_PLATFORM
          return TECH_PLATFORM;
        case 3: // COMMODITY_RATES
          return COMMODITY_RATES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT_ID,_Fields.TECH_PLATFORM,_Fields.COMMODITY_RATES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TECH_PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("techPlatform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.BrokerTechPlatform.class)));
    tmpMap.put(_Fields.COMMODITY_RATES, new org.apache.thrift.meta_data.FieldMetaData("commodityRates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionCommodityRate.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionRateDetails.class, metaDataMap);
  }

  public TPositionRateDetails() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionRateDetails(TPositionRateDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeAccountId = other.tradeAccountId;
    if (other.isSetTechPlatform()) {
      this.techPlatform = other.techPlatform;
    }
    if (other.isSetCommodityRates()) {
      List<TPositionCommodityRate> __this__commodityRates = new ArrayList<TPositionCommodityRate>(other.commodityRates.size());
      for (TPositionCommodityRate other_element : other.commodityRates) {
        __this__commodityRates.add(new TPositionCommodityRate(other_element));
      }
      this.commodityRates = __this__commodityRates;
    }
  }

  public TPositionRateDetails deepCopy() {
    return new TPositionRateDetails(this);
  }

  @Override
  public void clear() {
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    this.techPlatform = null;
    this.commodityRates = null;
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public TPositionRateDetails setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.BrokerTechPlatform
   */
  public xueqiao.trade.hosting.BrokerTechPlatform getTechPlatform() {
    return this.techPlatform;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.BrokerTechPlatform
   */
  public TPositionRateDetails setTechPlatform(xueqiao.trade.hosting.BrokerTechPlatform techPlatform) {
    this.techPlatform = techPlatform;
    return this;
  }

  public void unsetTechPlatform() {
    this.techPlatform = null;
  }

  /** Returns true if field techPlatform is set (has been assigned a value) and false otherwise */
  public boolean isSetTechPlatform() {
    return this.techPlatform != null;
  }

  public void setTechPlatformIsSet(boolean value) {
    if (!value) {
      this.techPlatform = null;
    }
  }

  public int getCommodityRatesSize() {
    return (this.commodityRates == null) ? 0 : this.commodityRates.size();
  }

  public java.util.Iterator<TPositionCommodityRate> getCommodityRatesIterator() {
    return (this.commodityRates == null) ? null : this.commodityRates.iterator();
  }

  public void addToCommodityRates(TPositionCommodityRate elem) {
    if (this.commodityRates == null) {
      this.commodityRates = new ArrayList<TPositionCommodityRate>();
    }
    this.commodityRates.add(elem);
  }

  public List<TPositionCommodityRate> getCommodityRates() {
    return this.commodityRates;
  }

  public TPositionRateDetails setCommodityRates(List<TPositionCommodityRate> commodityRates) {
    this.commodityRates = commodityRates;
    return this;
  }

  public void unsetCommodityRates() {
    this.commodityRates = null;
  }

  /** Returns true if field commodityRates is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityRates() {
    return this.commodityRates != null;
  }

  public void setCommodityRatesIsSet(boolean value) {
    if (!value) {
      this.commodityRates = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case TECH_PLATFORM:
      if (value == null) {
        unsetTechPlatform();
      } else {
        setTechPlatform((xueqiao.trade.hosting.BrokerTechPlatform)value);
      }
      break;

    case COMMODITY_RATES:
      if (value == null) {
        unsetCommodityRates();
      } else {
        setCommodityRates((List<TPositionCommodityRate>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case TECH_PLATFORM:
      return getTechPlatform();

    case COMMODITY_RATES:
      return getCommodityRates();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case TECH_PLATFORM:
      return isSetTechPlatform();
    case COMMODITY_RATES:
      return isSetCommodityRates();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionRateDetails)
      return this.equals((TPositionRateDetails)that);
    return false;
  }

  public boolean equals(TPositionRateDetails that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_techPlatform = true && this.isSetTechPlatform();
    boolean that_present_techPlatform = true && that.isSetTechPlatform();
    if (this_present_techPlatform || that_present_techPlatform) {
      if (!(this_present_techPlatform && that_present_techPlatform))
        return false;
      if (!this.techPlatform.equals(that.techPlatform))
        return false;
    }

    boolean this_present_commodityRates = true && this.isSetCommodityRates();
    boolean that_present_commodityRates = true && that.isSetCommodityRates();
    if (this_present_commodityRates || that_present_commodityRates) {
      if (!(this_present_commodityRates && that_present_commodityRates))
        return false;
      if (!this.commodityRates.equals(that.commodityRates))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionRateDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTechPlatform()).compareTo(other.isSetTechPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTechPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.techPlatform, other.techPlatform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityRates()).compareTo(other.isSetCommodityRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityRates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityRates, other.commodityRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionRateDetails(");
    boolean first = true;

    if (isSetTradeAccountId()) {
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetTechPlatform()) {
      if (!first) sb.append(", ");
      sb.append("techPlatform:");
      if (this.techPlatform == null) {
        sb.append("null");
      } else {
        sb.append(this.techPlatform);
      }
      first = false;
    }
    if (isSetCommodityRates()) {
      if (!first) sb.append(", ");
      sb.append("commodityRates:");
      if (this.commodityRates == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityRates);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionRateDetailsStandardSchemeFactory implements SchemeFactory {
    public TPositionRateDetailsStandardScheme getScheme() {
      return new TPositionRateDetailsStandardScheme();
    }
  }

  private static class TPositionRateDetailsStandardScheme extends StandardScheme<TPositionRateDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionRateDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TECH_PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.techPlatform = xueqiao.trade.hosting.BrokerTechPlatform.findByValue(iprot.readI32());
              struct.setTechPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COMMODITY_RATES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                struct.commodityRates = new ArrayList<TPositionCommodityRate>(_list44.size);
                for (int _i45 = 0; _i45 < _list44.size; ++_i45)
                {
                  TPositionCommodityRate _elem46;
                  _elem46 = new TPositionCommodityRate();
                  _elem46.read(iprot);
                  struct.commodityRates.add(_elem46);
                }
                iprot.readListEnd();
              }
              struct.setCommodityRatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionRateDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.techPlatform != null) {
        if (struct.isSetTechPlatform()) {
          oprot.writeFieldBegin(TECH_PLATFORM_FIELD_DESC);
          oprot.writeI32(struct.techPlatform.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityRates != null) {
        if (struct.isSetCommodityRates()) {
          oprot.writeFieldBegin(COMMODITY_RATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.commodityRates.size()));
            for (TPositionCommodityRate _iter47 : struct.commodityRates)
            {
              _iter47.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionRateDetailsTupleSchemeFactory implements SchemeFactory {
    public TPositionRateDetailsTupleScheme getScheme() {
      return new TPositionRateDetailsTupleScheme();
    }
  }

  private static class TPositionRateDetailsTupleScheme extends TupleScheme<TPositionRateDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionRateDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetTechPlatform()) {
        optionals.set(1);
      }
      if (struct.isSetCommodityRates()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetTechPlatform()) {
        oprot.writeI32(struct.techPlatform.getValue());
      }
      if (struct.isSetCommodityRates()) {
        {
          oprot.writeI32(struct.commodityRates.size());
          for (TPositionCommodityRate _iter48 : struct.commodityRates)
          {
            _iter48.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionRateDetails struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.techPlatform = xueqiao.trade.hosting.BrokerTechPlatform.findByValue(iprot.readI32());
        struct.setTechPlatformIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.commodityRates = new ArrayList<TPositionCommodityRate>(_list49.size);
          for (int _i50 = 0; _i50 < _list49.size; ++_i50)
          {
            TPositionCommodityRate _elem51;
            _elem51 = new TPositionCommodityRate();
            _elem51.read(iprot);
            struct.commodityRates.add(_elem51);
          }
        }
        struct.setCommodityRatesIsSet(true);
      }
    }
  }

}

