/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPositionInfo implements org.apache.thrift.TBase<TPositionInfo, TPositionInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionInfo");

  private static final org.apache.thrift.protocol.TField SLED_EXCHANGE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledExchangeCode", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityType", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityCode", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NET_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("netVolume", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("averagePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField YD_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("ydVolume", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField TD_BUY_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tdBuyVolume", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField TD_SELL_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tdSellVolume", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField CALCULATE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("calculatePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField USE_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("useMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField FRONZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("fronzenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField FRONZEN_COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("fronzenCommission", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField GOODS_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("goodsValue", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField LEVERAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("leverage", org.apache.thrift.protocol.TType.DOUBLE, (short)20);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionInfoTupleSchemeFactory());
  }

  public String sledExchangeCode; // optional
  public short sledCommodityType; // optional
  public String sledCommodityCode; // optional
  public long sledCommodityId; // optional
  public String sledContractCode; // optional
  public long netVolume; // optional
  public double averagePrice; // optional
  public long ydVolume; // optional
  public long tdBuyVolume; // optional
  public long tdSellVolume; // optional
  public double positionProfit; // optional
  public double closeProfit; // optional
  public double calculatePrice; // optional
  public double useMargin; // optional
  public double fronzenMargin; // optional
  public double commission; // optional
  public double fronzenCommission; // optional
  public double goodsValue; // optional
  public double leverage; // optional
  public String currencyNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SLED_EXCHANGE_CODE((short)2, "sledExchangeCode"),
    SLED_COMMODITY_TYPE((short)3, "sledCommodityType"),
    SLED_COMMODITY_CODE((short)4, "sledCommodityCode"),
    SLED_COMMODITY_ID((short)5, "sledCommodityId"),
    SLED_CONTRACT_CODE((short)6, "sledContractCode"),
    NET_VOLUME((short)7, "netVolume"),
    AVERAGE_PRICE((short)8, "averagePrice"),
    YD_VOLUME((short)9, "ydVolume"),
    TD_BUY_VOLUME((short)10, "tdBuyVolume"),
    TD_SELL_VOLUME((short)11, "tdSellVolume"),
    POSITION_PROFIT((short)12, "positionProfit"),
    CLOSE_PROFIT((short)13, "closeProfit"),
    CALCULATE_PRICE((short)14, "calculatePrice"),
    USE_MARGIN((short)15, "useMargin"),
    FRONZEN_MARGIN((short)16, "fronzenMargin"),
    COMMISSION((short)17, "commission"),
    FRONZEN_COMMISSION((short)18, "fronzenCommission"),
    GOODS_VALUE((short)19, "goodsValue"),
    LEVERAGE((short)20, "leverage"),
    CURRENCY_NO((short)21, "currencyNo");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // SLED_EXCHANGE_CODE
          return SLED_EXCHANGE_CODE;
        case 3: // SLED_COMMODITY_TYPE
          return SLED_COMMODITY_TYPE;
        case 4: // SLED_COMMODITY_CODE
          return SLED_COMMODITY_CODE;
        case 5: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 6: // SLED_CONTRACT_CODE
          return SLED_CONTRACT_CODE;
        case 7: // NET_VOLUME
          return NET_VOLUME;
        case 8: // AVERAGE_PRICE
          return AVERAGE_PRICE;
        case 9: // YD_VOLUME
          return YD_VOLUME;
        case 10: // TD_BUY_VOLUME
          return TD_BUY_VOLUME;
        case 11: // TD_SELL_VOLUME
          return TD_SELL_VOLUME;
        case 12: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 13: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 14: // CALCULATE_PRICE
          return CALCULATE_PRICE;
        case 15: // USE_MARGIN
          return USE_MARGIN;
        case 16: // FRONZEN_MARGIN
          return FRONZEN_MARGIN;
        case 17: // COMMISSION
          return COMMISSION;
        case 18: // FRONZEN_COMMISSION
          return FRONZEN_COMMISSION;
        case 19: // GOODS_VALUE
          return GOODS_VALUE;
        case 20: // LEVERAGE
          return LEVERAGE;
        case 21: // CURRENCY_NO
          return CURRENCY_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYTYPE_ISSET_ID = 0;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 1;
  private static final int __NETVOLUME_ISSET_ID = 2;
  private static final int __AVERAGEPRICE_ISSET_ID = 3;
  private static final int __YDVOLUME_ISSET_ID = 4;
  private static final int __TDBUYVOLUME_ISSET_ID = 5;
  private static final int __TDSELLVOLUME_ISSET_ID = 6;
  private static final int __POSITIONPROFIT_ISSET_ID = 7;
  private static final int __CLOSEPROFIT_ISSET_ID = 8;
  private static final int __CALCULATEPRICE_ISSET_ID = 9;
  private static final int __USEMARGIN_ISSET_ID = 10;
  private static final int __FRONZENMARGIN_ISSET_ID = 11;
  private static final int __COMMISSION_ISSET_ID = 12;
  private static final int __FRONZENCOMMISSION_ISSET_ID = 13;
  private static final int __GOODSVALUE_ISSET_ID = 14;
  private static final int __LEVERAGE_ISSET_ID = 15;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SLED_EXCHANGE_CODE,_Fields.SLED_COMMODITY_TYPE,_Fields.SLED_COMMODITY_CODE,_Fields.SLED_COMMODITY_ID,_Fields.SLED_CONTRACT_CODE,_Fields.NET_VOLUME,_Fields.AVERAGE_PRICE,_Fields.YD_VOLUME,_Fields.TD_BUY_VOLUME,_Fields.TD_SELL_VOLUME,_Fields.POSITION_PROFIT,_Fields.CLOSE_PROFIT,_Fields.CALCULATE_PRICE,_Fields.USE_MARGIN,_Fields.FRONZEN_MARGIN,_Fields.COMMISSION,_Fields.FRONZEN_COMMISSION,_Fields.GOODS_VALUE,_Fields.LEVERAGE,_Fields.CURRENCY_NO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SLED_EXCHANGE_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledExchangeCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.SLED_COMMODITY_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_CODE, new org.apache.thrift.meta_data.FieldMetaData("sledContractCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NET_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("netVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("averagePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YD_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("ydVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TD_BUY_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tdBuyVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TD_SELL_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tdSellVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CALCULATE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("calculatePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.USE_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("useMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FRONZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("fronzenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FRONZEN_COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("fronzenCommission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.GOODS_VALUE, new org.apache.thrift.meta_data.FieldMetaData("goodsValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.LEVERAGE, new org.apache.thrift.meta_data.FieldMetaData("leverage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionInfo.class, metaDataMap);
  }

  public TPositionInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionInfo(TPositionInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSledExchangeCode()) {
      this.sledExchangeCode = other.sledExchangeCode;
    }
    this.sledCommodityType = other.sledCommodityType;
    if (other.isSetSledCommodityCode()) {
      this.sledCommodityCode = other.sledCommodityCode;
    }
    this.sledCommodityId = other.sledCommodityId;
    if (other.isSetSledContractCode()) {
      this.sledContractCode = other.sledContractCode;
    }
    this.netVolume = other.netVolume;
    this.averagePrice = other.averagePrice;
    this.ydVolume = other.ydVolume;
    this.tdBuyVolume = other.tdBuyVolume;
    this.tdSellVolume = other.tdSellVolume;
    this.positionProfit = other.positionProfit;
    this.closeProfit = other.closeProfit;
    this.calculatePrice = other.calculatePrice;
    this.useMargin = other.useMargin;
    this.fronzenMargin = other.fronzenMargin;
    this.commission = other.commission;
    this.fronzenCommission = other.fronzenCommission;
    this.goodsValue = other.goodsValue;
    this.leverage = other.leverage;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
  }

  public TPositionInfo deepCopy() {
    return new TPositionInfo(this);
  }

  @Override
  public void clear() {
    this.sledExchangeCode = null;
    setSledCommodityTypeIsSet(false);
    this.sledCommodityType = 0;
    this.sledCommodityCode = null;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    this.sledContractCode = null;
    setNetVolumeIsSet(false);
    this.netVolume = 0;
    setAveragePriceIsSet(false);
    this.averagePrice = 0.0;
    setYdVolumeIsSet(false);
    this.ydVolume = 0;
    setTdBuyVolumeIsSet(false);
    this.tdBuyVolume = 0;
    setTdSellVolumeIsSet(false);
    this.tdSellVolume = 0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setCalculatePriceIsSet(false);
    this.calculatePrice = 0.0;
    setUseMarginIsSet(false);
    this.useMargin = 0.0;
    setFronzenMarginIsSet(false);
    this.fronzenMargin = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setFronzenCommissionIsSet(false);
    this.fronzenCommission = 0.0;
    setGoodsValueIsSet(false);
    this.goodsValue = 0.0;
    setLeverageIsSet(false);
    this.leverage = 0.0;
    this.currencyNo = null;
  }

  public String getSledExchangeCode() {
    return this.sledExchangeCode;
  }

  public TPositionInfo setSledExchangeCode(String sledExchangeCode) {
    this.sledExchangeCode = sledExchangeCode;
    return this;
  }

  public void unsetSledExchangeCode() {
    this.sledExchangeCode = null;
  }

  /** Returns true if field sledExchangeCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledExchangeCode() {
    return this.sledExchangeCode != null;
  }

  public void setSledExchangeCodeIsSet(boolean value) {
    if (!value) {
      this.sledExchangeCode = null;
    }
  }

  public short getSledCommodityType() {
    return this.sledCommodityType;
  }

  public TPositionInfo setSledCommodityType(short sledCommodityType) {
    this.sledCommodityType = sledCommodityType;
    setSledCommodityTypeIsSet(true);
    return this;
  }

  public void unsetSledCommodityType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  /** Returns true if field sledCommodityType is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityType() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID);
  }

  public void setSledCommodityTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYTYPE_ISSET_ID, value);
  }

  public String getSledCommodityCode() {
    return this.sledCommodityCode;
  }

  public TPositionInfo setSledCommodityCode(String sledCommodityCode) {
    this.sledCommodityCode = sledCommodityCode;
    return this;
  }

  public void unsetSledCommodityCode() {
    this.sledCommodityCode = null;
  }

  /** Returns true if field sledCommodityCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityCode() {
    return this.sledCommodityCode != null;
  }

  public void setSledCommodityCodeIsSet(boolean value) {
    if (!value) {
      this.sledCommodityCode = null;
    }
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public TPositionInfo setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public String getSledContractCode() {
    return this.sledContractCode;
  }

  public TPositionInfo setSledContractCode(String sledContractCode) {
    this.sledContractCode = sledContractCode;
    return this;
  }

  public void unsetSledContractCode() {
    this.sledContractCode = null;
  }

  /** Returns true if field sledContractCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractCode() {
    return this.sledContractCode != null;
  }

  public void setSledContractCodeIsSet(boolean value) {
    if (!value) {
      this.sledContractCode = null;
    }
  }

  public long getNetVolume() {
    return this.netVolume;
  }

  public TPositionInfo setNetVolume(long netVolume) {
    this.netVolume = netVolume;
    setNetVolumeIsSet(true);
    return this;
  }

  public void unsetNetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NETVOLUME_ISSET_ID);
  }

  /** Returns true if field netVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetNetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __NETVOLUME_ISSET_ID);
  }

  public void setNetVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NETVOLUME_ISSET_ID, value);
  }

  public double getAveragePrice() {
    return this.averagePrice;
  }

  public TPositionInfo setAveragePrice(double averagePrice) {
    this.averagePrice = averagePrice;
    setAveragePriceIsSet(true);
    return this;
  }

  public void unsetAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field averagePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID);
  }

  public void setAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGEPRICE_ISSET_ID, value);
  }

  public long getYdVolume() {
    return this.ydVolume;
  }

  public TPositionInfo setYdVolume(long ydVolume) {
    this.ydVolume = ydVolume;
    setYdVolumeIsSet(true);
    return this;
  }

  public void unsetYdVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YDVOLUME_ISSET_ID);
  }

  /** Returns true if field ydVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetYdVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __YDVOLUME_ISSET_ID);
  }

  public void setYdVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YDVOLUME_ISSET_ID, value);
  }

  public long getTdBuyVolume() {
    return this.tdBuyVolume;
  }

  public TPositionInfo setTdBuyVolume(long tdBuyVolume) {
    this.tdBuyVolume = tdBuyVolume;
    setTdBuyVolumeIsSet(true);
    return this;
  }

  public void unsetTdBuyVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TDBUYVOLUME_ISSET_ID);
  }

  /** Returns true if field tdBuyVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTdBuyVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TDBUYVOLUME_ISSET_ID);
  }

  public void setTdBuyVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TDBUYVOLUME_ISSET_ID, value);
  }

  public long getTdSellVolume() {
    return this.tdSellVolume;
  }

  public TPositionInfo setTdSellVolume(long tdSellVolume) {
    this.tdSellVolume = tdSellVolume;
    setTdSellVolumeIsSet(true);
    return this;
  }

  public void unsetTdSellVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TDSELLVOLUME_ISSET_ID);
  }

  /** Returns true if field tdSellVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTdSellVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TDSELLVOLUME_ISSET_ID);
  }

  public void setTdSellVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TDSELLVOLUME_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public TPositionInfo setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public TPositionInfo setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getCalculatePrice() {
    return this.calculatePrice;
  }

  public TPositionInfo setCalculatePrice(double calculatePrice) {
    this.calculatePrice = calculatePrice;
    setCalculatePriceIsSet(true);
    return this;
  }

  public void unsetCalculatePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  /** Returns true if field calculatePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetCalculatePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID);
  }

  public void setCalculatePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALCULATEPRICE_ISSET_ID, value);
  }

  public double getUseMargin() {
    return this.useMargin;
  }

  public TPositionInfo setUseMargin(double useMargin) {
    this.useMargin = useMargin;
    setUseMarginIsSet(true);
    return this;
  }

  public void unsetUseMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  /** Returns true if field useMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetUseMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __USEMARGIN_ISSET_ID);
  }

  public void setUseMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USEMARGIN_ISSET_ID, value);
  }

  public double getFronzenMargin() {
    return this.fronzenMargin;
  }

  public TPositionInfo setFronzenMargin(double fronzenMargin) {
    this.fronzenMargin = fronzenMargin;
    setFronzenMarginIsSet(true);
    return this;
  }

  public void unsetFronzenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONZENMARGIN_ISSET_ID);
  }

  /** Returns true if field fronzenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFronzenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONZENMARGIN_ISSET_ID);
  }

  public void setFronzenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONZENMARGIN_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public TPositionInfo setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getFronzenCommission() {
    return this.fronzenCommission;
  }

  public TPositionInfo setFronzenCommission(double fronzenCommission) {
    this.fronzenCommission = fronzenCommission;
    setFronzenCommissionIsSet(true);
    return this;
  }

  public void unsetFronzenCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FRONZENCOMMISSION_ISSET_ID);
  }

  /** Returns true if field fronzenCommission is set (has been assigned a value) and false otherwise */
  public boolean isSetFronzenCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __FRONZENCOMMISSION_ISSET_ID);
  }

  public void setFronzenCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FRONZENCOMMISSION_ISSET_ID, value);
  }

  public double getGoodsValue() {
    return this.goodsValue;
  }

  public TPositionInfo setGoodsValue(double goodsValue) {
    this.goodsValue = goodsValue;
    setGoodsValueIsSet(true);
    return this;
  }

  public void unsetGoodsValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  /** Returns true if field goodsValue is set (has been assigned a value) and false otherwise */
  public boolean isSetGoodsValue() {
    return EncodingUtils.testBit(__isset_bitfield, __GOODSVALUE_ISSET_ID);
  }

  public void setGoodsValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GOODSVALUE_ISSET_ID, value);
  }

  public double getLeverage() {
    return this.leverage;
  }

  public TPositionInfo setLeverage(double leverage) {
    this.leverage = leverage;
    setLeverageIsSet(true);
    return this;
  }

  public void unsetLeverage() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  /** Returns true if field leverage is set (has been assigned a value) and false otherwise */
  public boolean isSetLeverage() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVERAGE_ISSET_ID);
  }

  public void setLeverageIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVERAGE_ISSET_ID, value);
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public TPositionInfo setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SLED_EXCHANGE_CODE:
      if (value == null) {
        unsetSledExchangeCode();
      } else {
        setSledExchangeCode((String)value);
      }
      break;

    case SLED_COMMODITY_TYPE:
      if (value == null) {
        unsetSledCommodityType();
      } else {
        setSledCommodityType((Short)value);
      }
      break;

    case SLED_COMMODITY_CODE:
      if (value == null) {
        unsetSledCommodityCode();
      } else {
        setSledCommodityCode((String)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case SLED_CONTRACT_CODE:
      if (value == null) {
        unsetSledContractCode();
      } else {
        setSledContractCode((String)value);
      }
      break;

    case NET_VOLUME:
      if (value == null) {
        unsetNetVolume();
      } else {
        setNetVolume((Long)value);
      }
      break;

    case AVERAGE_PRICE:
      if (value == null) {
        unsetAveragePrice();
      } else {
        setAveragePrice((Double)value);
      }
      break;

    case YD_VOLUME:
      if (value == null) {
        unsetYdVolume();
      } else {
        setYdVolume((Long)value);
      }
      break;

    case TD_BUY_VOLUME:
      if (value == null) {
        unsetTdBuyVolume();
      } else {
        setTdBuyVolume((Long)value);
      }
      break;

    case TD_SELL_VOLUME:
      if (value == null) {
        unsetTdSellVolume();
      } else {
        setTdSellVolume((Long)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case CALCULATE_PRICE:
      if (value == null) {
        unsetCalculatePrice();
      } else {
        setCalculatePrice((Double)value);
      }
      break;

    case USE_MARGIN:
      if (value == null) {
        unsetUseMargin();
      } else {
        setUseMargin((Double)value);
      }
      break;

    case FRONZEN_MARGIN:
      if (value == null) {
        unsetFronzenMargin();
      } else {
        setFronzenMargin((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case FRONZEN_COMMISSION:
      if (value == null) {
        unsetFronzenCommission();
      } else {
        setFronzenCommission((Double)value);
      }
      break;

    case GOODS_VALUE:
      if (value == null) {
        unsetGoodsValue();
      } else {
        setGoodsValue((Double)value);
      }
      break;

    case LEVERAGE:
      if (value == null) {
        unsetLeverage();
      } else {
        setLeverage((Double)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SLED_EXCHANGE_CODE:
      return getSledExchangeCode();

    case SLED_COMMODITY_TYPE:
      return Short.valueOf(getSledCommodityType());

    case SLED_COMMODITY_CODE:
      return getSledCommodityCode();

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case SLED_CONTRACT_CODE:
      return getSledContractCode();

    case NET_VOLUME:
      return Long.valueOf(getNetVolume());

    case AVERAGE_PRICE:
      return Double.valueOf(getAveragePrice());

    case YD_VOLUME:
      return Long.valueOf(getYdVolume());

    case TD_BUY_VOLUME:
      return Long.valueOf(getTdBuyVolume());

    case TD_SELL_VOLUME:
      return Long.valueOf(getTdSellVolume());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case CALCULATE_PRICE:
      return Double.valueOf(getCalculatePrice());

    case USE_MARGIN:
      return Double.valueOf(getUseMargin());

    case FRONZEN_MARGIN:
      return Double.valueOf(getFronzenMargin());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case FRONZEN_COMMISSION:
      return Double.valueOf(getFronzenCommission());

    case GOODS_VALUE:
      return Double.valueOf(getGoodsValue());

    case LEVERAGE:
      return Double.valueOf(getLeverage());

    case CURRENCY_NO:
      return getCurrencyNo();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SLED_EXCHANGE_CODE:
      return isSetSledExchangeCode();
    case SLED_COMMODITY_TYPE:
      return isSetSledCommodityType();
    case SLED_COMMODITY_CODE:
      return isSetSledCommodityCode();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_CONTRACT_CODE:
      return isSetSledContractCode();
    case NET_VOLUME:
      return isSetNetVolume();
    case AVERAGE_PRICE:
      return isSetAveragePrice();
    case YD_VOLUME:
      return isSetYdVolume();
    case TD_BUY_VOLUME:
      return isSetTdBuyVolume();
    case TD_SELL_VOLUME:
      return isSetTdSellVolume();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case CALCULATE_PRICE:
      return isSetCalculatePrice();
    case USE_MARGIN:
      return isSetUseMargin();
    case FRONZEN_MARGIN:
      return isSetFronzenMargin();
    case COMMISSION:
      return isSetCommission();
    case FRONZEN_COMMISSION:
      return isSetFronzenCommission();
    case GOODS_VALUE:
      return isSetGoodsValue();
    case LEVERAGE:
      return isSetLeverage();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionInfo)
      return this.equals((TPositionInfo)that);
    return false;
  }

  public boolean equals(TPositionInfo that) {
    if (that == null)
      return false;

    boolean this_present_sledExchangeCode = true && this.isSetSledExchangeCode();
    boolean that_present_sledExchangeCode = true && that.isSetSledExchangeCode();
    if (this_present_sledExchangeCode || that_present_sledExchangeCode) {
      if (!(this_present_sledExchangeCode && that_present_sledExchangeCode))
        return false;
      if (!this.sledExchangeCode.equals(that.sledExchangeCode))
        return false;
    }

    boolean this_present_sledCommodityType = true && this.isSetSledCommodityType();
    boolean that_present_sledCommodityType = true && that.isSetSledCommodityType();
    if (this_present_sledCommodityType || that_present_sledCommodityType) {
      if (!(this_present_sledCommodityType && that_present_sledCommodityType))
        return false;
      if (this.sledCommodityType != that.sledCommodityType)
        return false;
    }

    boolean this_present_sledCommodityCode = true && this.isSetSledCommodityCode();
    boolean that_present_sledCommodityCode = true && that.isSetSledCommodityCode();
    if (this_present_sledCommodityCode || that_present_sledCommodityCode) {
      if (!(this_present_sledCommodityCode && that_present_sledCommodityCode))
        return false;
      if (!this.sledCommodityCode.equals(that.sledCommodityCode))
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledContractCode = true && this.isSetSledContractCode();
    boolean that_present_sledContractCode = true && that.isSetSledContractCode();
    if (this_present_sledContractCode || that_present_sledContractCode) {
      if (!(this_present_sledContractCode && that_present_sledContractCode))
        return false;
      if (!this.sledContractCode.equals(that.sledContractCode))
        return false;
    }

    boolean this_present_netVolume = true && this.isSetNetVolume();
    boolean that_present_netVolume = true && that.isSetNetVolume();
    if (this_present_netVolume || that_present_netVolume) {
      if (!(this_present_netVolume && that_present_netVolume))
        return false;
      if (this.netVolume != that.netVolume)
        return false;
    }

    boolean this_present_averagePrice = true && this.isSetAveragePrice();
    boolean that_present_averagePrice = true && that.isSetAveragePrice();
    if (this_present_averagePrice || that_present_averagePrice) {
      if (!(this_present_averagePrice && that_present_averagePrice))
        return false;
      if (this.averagePrice != that.averagePrice)
        return false;
    }

    boolean this_present_ydVolume = true && this.isSetYdVolume();
    boolean that_present_ydVolume = true && that.isSetYdVolume();
    if (this_present_ydVolume || that_present_ydVolume) {
      if (!(this_present_ydVolume && that_present_ydVolume))
        return false;
      if (this.ydVolume != that.ydVolume)
        return false;
    }

    boolean this_present_tdBuyVolume = true && this.isSetTdBuyVolume();
    boolean that_present_tdBuyVolume = true && that.isSetTdBuyVolume();
    if (this_present_tdBuyVolume || that_present_tdBuyVolume) {
      if (!(this_present_tdBuyVolume && that_present_tdBuyVolume))
        return false;
      if (this.tdBuyVolume != that.tdBuyVolume)
        return false;
    }

    boolean this_present_tdSellVolume = true && this.isSetTdSellVolume();
    boolean that_present_tdSellVolume = true && that.isSetTdSellVolume();
    if (this_present_tdSellVolume || that_present_tdSellVolume) {
      if (!(this_present_tdSellVolume && that_present_tdSellVolume))
        return false;
      if (this.tdSellVolume != that.tdSellVolume)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_calculatePrice = true && this.isSetCalculatePrice();
    boolean that_present_calculatePrice = true && that.isSetCalculatePrice();
    if (this_present_calculatePrice || that_present_calculatePrice) {
      if (!(this_present_calculatePrice && that_present_calculatePrice))
        return false;
      if (this.calculatePrice != that.calculatePrice)
        return false;
    }

    boolean this_present_useMargin = true && this.isSetUseMargin();
    boolean that_present_useMargin = true && that.isSetUseMargin();
    if (this_present_useMargin || that_present_useMargin) {
      if (!(this_present_useMargin && that_present_useMargin))
        return false;
      if (this.useMargin != that.useMargin)
        return false;
    }

    boolean this_present_fronzenMargin = true && this.isSetFronzenMargin();
    boolean that_present_fronzenMargin = true && that.isSetFronzenMargin();
    if (this_present_fronzenMargin || that_present_fronzenMargin) {
      if (!(this_present_fronzenMargin && that_present_fronzenMargin))
        return false;
      if (this.fronzenMargin != that.fronzenMargin)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_fronzenCommission = true && this.isSetFronzenCommission();
    boolean that_present_fronzenCommission = true && that.isSetFronzenCommission();
    if (this_present_fronzenCommission || that_present_fronzenCommission) {
      if (!(this_present_fronzenCommission && that_present_fronzenCommission))
        return false;
      if (this.fronzenCommission != that.fronzenCommission)
        return false;
    }

    boolean this_present_goodsValue = true && this.isSetGoodsValue();
    boolean that_present_goodsValue = true && that.isSetGoodsValue();
    if (this_present_goodsValue || that_present_goodsValue) {
      if (!(this_present_goodsValue && that_present_goodsValue))
        return false;
      if (this.goodsValue != that.goodsValue)
        return false;
    }

    boolean this_present_leverage = true && this.isSetLeverage();
    boolean that_present_leverage = true && that.isSetLeverage();
    if (this_present_leverage || that_present_leverage) {
      if (!(this_present_leverage && that_present_leverage))
        return false;
      if (this.leverage != that.leverage)
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSledExchangeCode()).compareTo(other.isSetSledExchangeCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledExchangeCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledExchangeCode, other.sledExchangeCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityType()).compareTo(other.isSetSledCommodityType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityType, other.sledCommodityType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityCode()).compareTo(other.isSetSledCommodityCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityCode, other.sledCommodityCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractCode()).compareTo(other.isSetSledContractCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractCode, other.sledContractCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetVolume()).compareTo(other.isSetNetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.netVolume, other.netVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAveragePrice()).compareTo(other.isSetAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averagePrice, other.averagePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdVolume()).compareTo(other.isSetYdVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydVolume, other.ydVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdBuyVolume()).compareTo(other.isSetTdBuyVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdBuyVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdBuyVolume, other.tdBuyVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTdSellVolume()).compareTo(other.isSetTdSellVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTdSellVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tdSellVolume, other.tdSellVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCalculatePrice()).compareTo(other.isSetCalculatePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalculatePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calculatePrice, other.calculatePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUseMargin()).compareTo(other.isSetUseMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUseMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useMargin, other.useMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFronzenMargin()).compareTo(other.isSetFronzenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFronzenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fronzenMargin, other.fronzenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFronzenCommission()).compareTo(other.isSetFronzenCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFronzenCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fronzenCommission, other.fronzenCommission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoodsValue()).compareTo(other.isSetGoodsValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoodsValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goodsValue, other.goodsValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeverage()).compareTo(other.isSetLeverage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeverage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leverage, other.leverage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionInfo(");
    boolean first = true;

    if (isSetSledExchangeCode()) {
      sb.append("sledExchangeCode:");
      if (this.sledExchangeCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledExchangeCode);
      }
      first = false;
    }
    if (isSetSledCommodityType()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityType:");
      sb.append(this.sledCommodityType);
      first = false;
    }
    if (isSetSledCommodityCode()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityCode:");
      if (this.sledCommodityCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledCommodityCode);
      }
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledContractCode()) {
      if (!first) sb.append(", ");
      sb.append("sledContractCode:");
      if (this.sledContractCode == null) {
        sb.append("null");
      } else {
        sb.append(this.sledContractCode);
      }
      first = false;
    }
    if (isSetNetVolume()) {
      if (!first) sb.append(", ");
      sb.append("netVolume:");
      sb.append(this.netVolume);
      first = false;
    }
    if (isSetAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("averagePrice:");
      sb.append(this.averagePrice);
      first = false;
    }
    if (isSetYdVolume()) {
      if (!first) sb.append(", ");
      sb.append("ydVolume:");
      sb.append(this.ydVolume);
      first = false;
    }
    if (isSetTdBuyVolume()) {
      if (!first) sb.append(", ");
      sb.append("tdBuyVolume:");
      sb.append(this.tdBuyVolume);
      first = false;
    }
    if (isSetTdSellVolume()) {
      if (!first) sb.append(", ");
      sb.append("tdSellVolume:");
      sb.append(this.tdSellVolume);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetCalculatePrice()) {
      if (!first) sb.append(", ");
      sb.append("calculatePrice:");
      sb.append(this.calculatePrice);
      first = false;
    }
    if (isSetUseMargin()) {
      if (!first) sb.append(", ");
      sb.append("useMargin:");
      sb.append(this.useMargin);
      first = false;
    }
    if (isSetFronzenMargin()) {
      if (!first) sb.append(", ");
      sb.append("fronzenMargin:");
      sb.append(this.fronzenMargin);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetFronzenCommission()) {
      if (!first) sb.append(", ");
      sb.append("fronzenCommission:");
      sb.append(this.fronzenCommission);
      first = false;
    }
    if (isSetGoodsValue()) {
      if (!first) sb.append(", ");
      sb.append("goodsValue:");
      sb.append(this.goodsValue);
      first = false;
    }
    if (isSetLeverage()) {
      if (!first) sb.append(", ");
      sb.append("leverage:");
      sb.append(this.leverage);
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionInfoStandardSchemeFactory implements SchemeFactory {
    public TPositionInfoStandardScheme getScheme() {
      return new TPositionInfoStandardScheme();
    }
  }

  private static class TPositionInfoStandardScheme extends StandardScheme<TPositionInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // SLED_EXCHANGE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledExchangeCode = iprot.readString();
              struct.setSledExchangeCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_COMMODITY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.sledCommodityType = iprot.readI16();
              struct.setSledCommodityTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_COMMODITY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledCommodityCode = iprot.readString();
              struct.setSledCommodityCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SLED_CONTRACT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sledContractCode = iprot.readString();
              struct.setSledContractCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NET_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.netVolume = iprot.readI64();
              struct.setNetVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.averagePrice = iprot.readDouble();
              struct.setAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // YD_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ydVolume = iprot.readI64();
              struct.setYdVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TD_BUY_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tdBuyVolume = iprot.readI64();
              struct.setTdBuyVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TD_SELL_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tdSellVolume = iprot.readI64();
              struct.setTdSellVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CALCULATE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.calculatePrice = iprot.readDouble();
              struct.setCalculatePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // USE_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.useMargin = iprot.readDouble();
              struct.setUseMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FRONZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fronzenMargin = iprot.readDouble();
              struct.setFronzenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // FRONZEN_COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.fronzenCommission = iprot.readDouble();
              struct.setFronzenCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // GOODS_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.goodsValue = iprot.readDouble();
              struct.setGoodsValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // LEVERAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.leverage = iprot.readDouble();
              struct.setLeverageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sledExchangeCode != null) {
        if (struct.isSetSledExchangeCode()) {
          oprot.writeFieldBegin(SLED_EXCHANGE_CODE_FIELD_DESC);
          oprot.writeString(struct.sledExchangeCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeFieldBegin(SLED_COMMODITY_TYPE_FIELD_DESC);
        oprot.writeI16(struct.sledCommodityType);
        oprot.writeFieldEnd();
      }
      if (struct.sledCommodityCode != null) {
        if (struct.isSetSledCommodityCode()) {
          oprot.writeFieldBegin(SLED_COMMODITY_CODE_FIELD_DESC);
          oprot.writeString(struct.sledCommodityCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.sledContractCode != null) {
        if (struct.isSetSledContractCode()) {
          oprot.writeFieldBegin(SLED_CONTRACT_CODE_FIELD_DESC);
          oprot.writeString(struct.sledContractCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetNetVolume()) {
        oprot.writeFieldBegin(NET_VOLUME_FIELD_DESC);
        oprot.writeI64(struct.netVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeFieldBegin(AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.averagePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetYdVolume()) {
        oprot.writeFieldBegin(YD_VOLUME_FIELD_DESC);
        oprot.writeI64(struct.ydVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTdBuyVolume()) {
        oprot.writeFieldBegin(TD_BUY_VOLUME_FIELD_DESC);
        oprot.writeI64(struct.tdBuyVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTdSellVolume()) {
        oprot.writeFieldBegin(TD_SELL_VOLUME_FIELD_DESC);
        oprot.writeI64(struct.tdSellVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeFieldBegin(CALCULATE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.calculatePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUseMargin()) {
        oprot.writeFieldBegin(USE_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.useMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFronzenMargin()) {
        oprot.writeFieldBegin(FRONZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.fronzenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFronzenCommission()) {
        oprot.writeFieldBegin(FRONZEN_COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.fronzenCommission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeFieldBegin(GOODS_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.goodsValue);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLeverage()) {
        oprot.writeFieldBegin(LEVERAGE_FIELD_DESC);
        oprot.writeDouble(struct.leverage);
        oprot.writeFieldEnd();
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionInfoTupleSchemeFactory implements SchemeFactory {
    public TPositionInfoTupleScheme getScheme() {
      return new TPositionInfoTupleScheme();
    }
  }

  private static class TPositionInfoTupleScheme extends TupleScheme<TPositionInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSledExchangeCode()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityType()) {
        optionals.set(1);
      }
      if (struct.isSetSledCommodityCode()) {
        optionals.set(2);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(3);
      }
      if (struct.isSetSledContractCode()) {
        optionals.set(4);
      }
      if (struct.isSetNetVolume()) {
        optionals.set(5);
      }
      if (struct.isSetAveragePrice()) {
        optionals.set(6);
      }
      if (struct.isSetYdVolume()) {
        optionals.set(7);
      }
      if (struct.isSetTdBuyVolume()) {
        optionals.set(8);
      }
      if (struct.isSetTdSellVolume()) {
        optionals.set(9);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(10);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(11);
      }
      if (struct.isSetCalculatePrice()) {
        optionals.set(12);
      }
      if (struct.isSetUseMargin()) {
        optionals.set(13);
      }
      if (struct.isSetFronzenMargin()) {
        optionals.set(14);
      }
      if (struct.isSetCommission()) {
        optionals.set(15);
      }
      if (struct.isSetFronzenCommission()) {
        optionals.set(16);
      }
      if (struct.isSetGoodsValue()) {
        optionals.set(17);
      }
      if (struct.isSetLeverage()) {
        optionals.set(18);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetSledExchangeCode()) {
        oprot.writeString(struct.sledExchangeCode);
      }
      if (struct.isSetSledCommodityType()) {
        oprot.writeI16(struct.sledCommodityType);
      }
      if (struct.isSetSledCommodityCode()) {
        oprot.writeString(struct.sledCommodityCode);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetSledContractCode()) {
        oprot.writeString(struct.sledContractCode);
      }
      if (struct.isSetNetVolume()) {
        oprot.writeI64(struct.netVolume);
      }
      if (struct.isSetAveragePrice()) {
        oprot.writeDouble(struct.averagePrice);
      }
      if (struct.isSetYdVolume()) {
        oprot.writeI64(struct.ydVolume);
      }
      if (struct.isSetTdBuyVolume()) {
        oprot.writeI64(struct.tdBuyVolume);
      }
      if (struct.isSetTdSellVolume()) {
        oprot.writeI64(struct.tdSellVolume);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetCalculatePrice()) {
        oprot.writeDouble(struct.calculatePrice);
      }
      if (struct.isSetUseMargin()) {
        oprot.writeDouble(struct.useMargin);
      }
      if (struct.isSetFronzenMargin()) {
        oprot.writeDouble(struct.fronzenMargin);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetFronzenCommission()) {
        oprot.writeDouble(struct.fronzenCommission);
      }
      if (struct.isSetGoodsValue()) {
        oprot.writeDouble(struct.goodsValue);
      }
      if (struct.isSetLeverage()) {
        oprot.writeDouble(struct.leverage);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.sledExchangeCode = iprot.readString();
        struct.setSledExchangeCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityType = iprot.readI16();
        struct.setSledCommodityTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledCommodityCode = iprot.readString();
        struct.setSledCommodityCodeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledContractCode = iprot.readString();
        struct.setSledContractCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.netVolume = iprot.readI64();
        struct.setNetVolumeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.averagePrice = iprot.readDouble();
        struct.setAveragePriceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ydVolume = iprot.readI64();
        struct.setYdVolumeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tdBuyVolume = iprot.readI64();
        struct.setTdBuyVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.tdSellVolume = iprot.readI64();
        struct.setTdSellVolumeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(11)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.calculatePrice = iprot.readDouble();
        struct.setCalculatePriceIsSet(true);
      }
      if (incoming.get(13)) {
        struct.useMargin = iprot.readDouble();
        struct.setUseMarginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.fronzenMargin = iprot.readDouble();
        struct.setFronzenMarginIsSet(true);
      }
      if (incoming.get(15)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(16)) {
        struct.fronzenCommission = iprot.readDouble();
        struct.setFronzenCommissionIsSet(true);
      }
      if (incoming.get(17)) {
        struct.goodsValue = iprot.readDouble();
        struct.setGoodsValueIsSet(true);
      }
      if (incoming.get(18)) {
        struct.leverage = iprot.readDouble();
        struct.setLeverageIsSet(true);
      }
      if (incoming.get(19)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
    }
  }

}

