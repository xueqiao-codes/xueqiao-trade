/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TPositionCommissionRate implements org.apache.thrift.TBase<TPositionCommissionRate, TPositionCommissionRate._Fields>, java.io.Serializable, Cloneable, Comparable<TPositionCommissionRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPositionCommissionRate");

  private static final org.apache.thrift.protocol.TField CTP_COMMISSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("ctpCommissionRate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ES9_COMMISSION_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("es9CommissionRate", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPositionCommissionRateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPositionCommissionRateTupleSchemeFactory());
  }

  public TPositionCTPCommissionRate ctpCommissionRate; // optional
  public TPositionEs9CommissionRate es9CommissionRate; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CTP_COMMISSION_RATE((short)1, "ctpCommissionRate"),
    ES9_COMMISSION_RATE((short)2, "es9CommissionRate");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CTP_COMMISSION_RATE
          return CTP_COMMISSION_RATE;
        case 2: // ES9_COMMISSION_RATE
          return ES9_COMMISSION_RATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CTP_COMMISSION_RATE,_Fields.ES9_COMMISSION_RATE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CTP_COMMISSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("ctpCommissionRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionCTPCommissionRate.class)));
    tmpMap.put(_Fields.ES9_COMMISSION_RATE, new org.apache.thrift.meta_data.FieldMetaData("es9CommissionRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPositionEs9CommissionRate.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPositionCommissionRate.class, metaDataMap);
  }

  public TPositionCommissionRate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPositionCommissionRate(TPositionCommissionRate other) {
    if (other.isSetCtpCommissionRate()) {
      this.ctpCommissionRate = new TPositionCTPCommissionRate(other.ctpCommissionRate);
    }
    if (other.isSetEs9CommissionRate()) {
      this.es9CommissionRate = new TPositionEs9CommissionRate(other.es9CommissionRate);
    }
  }

  public TPositionCommissionRate deepCopy() {
    return new TPositionCommissionRate(this);
  }

  @Override
  public void clear() {
    this.ctpCommissionRate = null;
    this.es9CommissionRate = null;
  }

  public TPositionCTPCommissionRate getCtpCommissionRate() {
    return this.ctpCommissionRate;
  }

  public TPositionCommissionRate setCtpCommissionRate(TPositionCTPCommissionRate ctpCommissionRate) {
    this.ctpCommissionRate = ctpCommissionRate;
    return this;
  }

  public void unsetCtpCommissionRate() {
    this.ctpCommissionRate = null;
  }

  /** Returns true if field ctpCommissionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetCtpCommissionRate() {
    return this.ctpCommissionRate != null;
  }

  public void setCtpCommissionRateIsSet(boolean value) {
    if (!value) {
      this.ctpCommissionRate = null;
    }
  }

  public TPositionEs9CommissionRate getEs9CommissionRate() {
    return this.es9CommissionRate;
  }

  public TPositionCommissionRate setEs9CommissionRate(TPositionEs9CommissionRate es9CommissionRate) {
    this.es9CommissionRate = es9CommissionRate;
    return this;
  }

  public void unsetEs9CommissionRate() {
    this.es9CommissionRate = null;
  }

  /** Returns true if field es9CommissionRate is set (has been assigned a value) and false otherwise */
  public boolean isSetEs9CommissionRate() {
    return this.es9CommissionRate != null;
  }

  public void setEs9CommissionRateIsSet(boolean value) {
    if (!value) {
      this.es9CommissionRate = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CTP_COMMISSION_RATE:
      if (value == null) {
        unsetCtpCommissionRate();
      } else {
        setCtpCommissionRate((TPositionCTPCommissionRate)value);
      }
      break;

    case ES9_COMMISSION_RATE:
      if (value == null) {
        unsetEs9CommissionRate();
      } else {
        setEs9CommissionRate((TPositionEs9CommissionRate)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CTP_COMMISSION_RATE:
      return getCtpCommissionRate();

    case ES9_COMMISSION_RATE:
      return getEs9CommissionRate();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CTP_COMMISSION_RATE:
      return isSetCtpCommissionRate();
    case ES9_COMMISSION_RATE:
      return isSetEs9CommissionRate();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPositionCommissionRate)
      return this.equals((TPositionCommissionRate)that);
    return false;
  }

  public boolean equals(TPositionCommissionRate that) {
    if (that == null)
      return false;

    boolean this_present_ctpCommissionRate = true && this.isSetCtpCommissionRate();
    boolean that_present_ctpCommissionRate = true && that.isSetCtpCommissionRate();
    if (this_present_ctpCommissionRate || that_present_ctpCommissionRate) {
      if (!(this_present_ctpCommissionRate && that_present_ctpCommissionRate))
        return false;
      if (!this.ctpCommissionRate.equals(that.ctpCommissionRate))
        return false;
    }

    boolean this_present_es9CommissionRate = true && this.isSetEs9CommissionRate();
    boolean that_present_es9CommissionRate = true && that.isSetEs9CommissionRate();
    if (this_present_es9CommissionRate || that_present_es9CommissionRate) {
      if (!(this_present_es9CommissionRate && that_present_es9CommissionRate))
        return false;
      if (!this.es9CommissionRate.equals(that.es9CommissionRate))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TPositionCommissionRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCtpCommissionRate()).compareTo(other.isSetCtpCommissionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtpCommissionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctpCommissionRate, other.ctpCommissionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEs9CommissionRate()).compareTo(other.isSetEs9CommissionRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEs9CommissionRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.es9CommissionRate, other.es9CommissionRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPositionCommissionRate(");
    boolean first = true;

    if (isSetCtpCommissionRate()) {
      sb.append("ctpCommissionRate:");
      if (this.ctpCommissionRate == null) {
        sb.append("null");
      } else {
        sb.append(this.ctpCommissionRate);
      }
      first = false;
    }
    if (isSetEs9CommissionRate()) {
      if (!first) sb.append(", ");
      sb.append("es9CommissionRate:");
      if (this.es9CommissionRate == null) {
        sb.append("null");
      } else {
        sb.append(this.es9CommissionRate);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ctpCommissionRate != null) {
      ctpCommissionRate.validate();
    }
    if (es9CommissionRate != null) {
      es9CommissionRate.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPositionCommissionRateStandardSchemeFactory implements SchemeFactory {
    public TPositionCommissionRateStandardScheme getScheme() {
      return new TPositionCommissionRateStandardScheme();
    }
  }

  private static class TPositionCommissionRateStandardScheme extends StandardScheme<TPositionCommissionRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPositionCommissionRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CTP_COMMISSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ctpCommissionRate = new TPositionCTPCommissionRate();
              struct.ctpCommissionRate.read(iprot);
              struct.setCtpCommissionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ES9_COMMISSION_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.es9CommissionRate = new TPositionEs9CommissionRate();
              struct.es9CommissionRate.read(iprot);
              struct.setEs9CommissionRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPositionCommissionRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ctpCommissionRate != null) {
        if (struct.isSetCtpCommissionRate()) {
          oprot.writeFieldBegin(CTP_COMMISSION_RATE_FIELD_DESC);
          struct.ctpCommissionRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.es9CommissionRate != null) {
        if (struct.isSetEs9CommissionRate()) {
          oprot.writeFieldBegin(ES9_COMMISSION_RATE_FIELD_DESC);
          struct.es9CommissionRate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPositionCommissionRateTupleSchemeFactory implements SchemeFactory {
    public TPositionCommissionRateTupleScheme getScheme() {
      return new TPositionCommissionRateTupleScheme();
    }
  }

  private static class TPositionCommissionRateTupleScheme extends TupleScheme<TPositionCommissionRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPositionCommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCtpCommissionRate()) {
        optionals.set(0);
      }
      if (struct.isSetEs9CommissionRate()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCtpCommissionRate()) {
        struct.ctpCommissionRate.write(oprot);
      }
      if (struct.isSetEs9CommissionRate()) {
        struct.es9CommissionRate.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPositionCommissionRate struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.ctpCommissionRate = new TPositionCTPCommissionRate();
        struct.ctpCommissionRate.read(iprot);
        struct.setCtpCommissionRateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.es9CommissionRate = new TPositionEs9CommissionRate();
        struct.es9CommissionRate.read(iprot);
        struct.setEs9CommissionRateIsSet(true);
      }
    }
  }

}

