/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_upside_events_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace events {

const char* UpsidePositionRateDetailsUpdatedEvent::ascii_fingerprint = "148F3AAAC1D9859963D5E800D187BF26";
const uint8_t UpsidePositionRateDetailsUpdatedEvent::binary_fingerprint[16] = {0x14,0x8F,0x3A,0xAA,0xC1,0xD9,0x85,0x99,0x63,0xD5,0xE8,0x00,0xD1,0x87,0xBF,0x26};

uint32_t UpsidePositionRateDetailsUpdatedEvent::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tradeAccountId);
          this->__isset.tradeAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpsidePositionRateDetailsUpdatedEvent::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpsidePositionRateDetailsUpdatedEvent");

  if (this->__isset.tradeAccountId) {
    xfer += oprot->writeFieldBegin("tradeAccountId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->tradeAccountId);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UpsidePositionRateDetailsUpdatedEvent &a, UpsidePositionRateDetailsUpdatedEvent &b) {
  using ::std::swap;
  swap(a.tradeAccountId, b.tradeAccountId);
  swap(a.__isset, b.__isset);
}

}}}} // namespace
