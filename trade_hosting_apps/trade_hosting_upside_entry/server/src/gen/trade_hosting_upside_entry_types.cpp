/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "trade_hosting_upside_entry_types.h"

#include <algorithm>

namespace xueqiao { namespace trade { namespace hosting { namespace upside { namespace entry {

const char* TSubProcessTimeInfo::ascii_fingerprint = "C1241AF5AA92C586B664FD41DC97C576";
const uint8_t TSubProcessTimeInfo::binary_fingerprint[16] = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

uint32_t TSubProcessTimeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->startTimestamp);
          this->__isset.startTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->exitedTimestamp);
          this->__isset.exitedTimestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSubProcessTimeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSubProcessTimeInfo");

  if (this->__isset.startTimestamp) {
    xfer += oprot->writeFieldBegin("startTimestamp", ::apache::thrift::protocol::T_I32, 1);
    xfer += oprot->writeI32(this->startTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.exitedTimestamp) {
    xfer += oprot->writeFieldBegin("exitedTimestamp", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->exitedTimestamp);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSubProcessTimeInfo &a, TSubProcessTimeInfo &b) {
  using ::std::swap;
  swap(a.startTimestamp, b.startTimestamp);
  swap(a.exitedTimestamp, b.exitedTimestamp);
  swap(a.__isset, b.__isset);
}

const char* TSubProcessInfo::ascii_fingerprint = "9113457402BE87E123D6991E999F0915";
const uint8_t TSubProcessInfo::binary_fingerprint[16] = {0x91,0x13,0x45,0x74,0x02,0xBE,0x87,0xE1,0x23,0xD6,0x99,0x1E,0x99,0x9F,0x09,0x15};

uint32_t TSubProcessInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tradeAccountId);
          this->__isset.tradeAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->timeInfos.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->timeInfos.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->timeInfos[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.timeInfos = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSubProcessInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSubProcessInfo");

  if (this->__isset.tradeAccountId) {
    xfer += oprot->writeFieldBegin("tradeAccountId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->tradeAccountId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.pid) {
    xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32(this->pid);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timeInfos) {
    xfer += oprot->writeFieldBegin("timeInfos", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->timeInfos.size()));
      std::vector<TSubProcessTimeInfo> ::const_iterator _iter5;
      for (_iter5 = this->timeInfos.begin(); _iter5 != this->timeInfos.end(); ++_iter5)
      {
        xfer += (*_iter5).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSubProcessInfo &a, TSubProcessInfo &b) {
  using ::std::swap;
  swap(a.tradeAccountId, b.tradeAccountId);
  swap(a.pid, b.pid);
  swap(a.timeInfos, b.timeInfos);
  swap(a.__isset, b.__isset);
}

const char* TSyncOrderStateBatchReq::ascii_fingerprint = "B37C83ED71C2A6C196B2839D805DEE84";
const uint8_t TSyncOrderStateBatchReq::binary_fingerprint[16] = {0xB3,0x7C,0x83,0xED,0x71,0xC2,0xA6,0xC1,0x96,0xB2,0x83,0x9D,0x80,0x5D,0xEE,0x84};

uint32_t TSyncOrderStateBatchReq::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->accountSummary.read(iprot);
          this->__isset.accountSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ctpContractSummary.read(iprot);
          this->__isset.ctpContractSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esunny3ContractSummary.read(iprot);
          this->__isset.esunny3ContractSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->esunny9ContractSummary.read(iprot);
          this->__isset.esunny9ContractSummary = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSyncOrderStateBatchReq::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSyncOrderStateBatchReq");

  if (this->__isset.accountSummary) {
    xfer += oprot->writeFieldBegin("accountSummary", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->accountSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ctpContractSummary) {
    xfer += oprot->writeFieldBegin("ctpContractSummary", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->ctpContractSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.esunny3ContractSummary) {
    xfer += oprot->writeFieldBegin("esunny3ContractSummary", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->esunny3ContractSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.esunny9ContractSummary) {
    xfer += oprot->writeFieldBegin("esunny9ContractSummary", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->esunny9ContractSummary.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSyncOrderStateBatchReq &a, TSyncOrderStateBatchReq &b) {
  using ::std::swap;
  swap(a.accountSummary, b.accountSummary);
  swap(a.ctpContractSummary, b.ctpContractSummary);
  swap(a.esunny3ContractSummary, b.esunny3ContractSummary);
  swap(a.esunny9ContractSummary, b.esunny9ContractSummary);
  swap(a.__isset, b.__isset);
}

const char* TFund::ascii_fingerprint = "8D7BF2131FDAF021A365D246D9F83F2D";
const uint8_t TFund::binary_fingerprint[16] = {0x8D,0x7B,0xF2,0x13,0x1F,0xDA,0xF0,0x21,0xA3,0x65,0xD2,0x46,0xD9,0xF8,0x3F,0x2D};

uint32_t TFund::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyNo);
          this->__isset.currencyNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyChannel);
          this->__isset.currencyChannel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->credit);
          this->__isset.credit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->preBalance);
          this->__isset.preBalance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->deposit);
          this->__isset.deposit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->withdraw);
          this->__isset.withdraw = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frozenMargin);
          this->__isset.frozenMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->frozenCash);
          this->__isset.frozenCash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->currMargin);
          this->__isset.currMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->commission);
          this->__isset.commission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeProfit);
          this->__isset.closeProfit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->positionProfit);
          this->__isset.positionProfit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->available);
          this->__isset.available = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->dynamicBenefit);
          this->__isset.dynamicBenefit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->riskRate);
          this->__isset.riskRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TFund::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TFund");

  if (this->__isset.currencyNo) {
    xfer += oprot->writeFieldBegin("currencyNo", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->currencyNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyChannel) {
    xfer += oprot->writeFieldBegin("currencyChannel", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->currencyChannel);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.credit) {
    xfer += oprot->writeFieldBegin("credit", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->credit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.preBalance) {
    xfer += oprot->writeFieldBegin("preBalance", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->preBalance);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.deposit) {
    xfer += oprot->writeFieldBegin("deposit", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->deposit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.withdraw) {
    xfer += oprot->writeFieldBegin("withdraw", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->withdraw);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frozenMargin) {
    xfer += oprot->writeFieldBegin("frozenMargin", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->frozenMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.frozenCash) {
    xfer += oprot->writeFieldBegin("frozenCash", ::apache::thrift::protocol::T_DOUBLE, 9);
    xfer += oprot->writeDouble(this->frozenCash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currMargin) {
    xfer += oprot->writeFieldBegin("currMargin", ::apache::thrift::protocol::T_DOUBLE, 10);
    xfer += oprot->writeDouble(this->currMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commission) {
    xfer += oprot->writeFieldBegin("commission", ::apache::thrift::protocol::T_DOUBLE, 11);
    xfer += oprot->writeDouble(this->commission);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeProfit) {
    xfer += oprot->writeFieldBegin("closeProfit", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->closeProfit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.positionProfit) {
    xfer += oprot->writeFieldBegin("positionProfit", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->positionProfit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.available) {
    xfer += oprot->writeFieldBegin("available", ::apache::thrift::protocol::T_DOUBLE, 14);
    xfer += oprot->writeDouble(this->available);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.dynamicBenefit) {
    xfer += oprot->writeFieldBegin("dynamicBenefit", ::apache::thrift::protocol::T_DOUBLE, 15);
    xfer += oprot->writeDouble(this->dynamicBenefit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.riskRate) {
    xfer += oprot->writeFieldBegin("riskRate", ::apache::thrift::protocol::T_DOUBLE, 16);
    xfer += oprot->writeDouble(this->riskRate);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TFund &a, TFund &b) {
  using ::std::swap;
  swap(a.currencyNo, b.currencyNo);
  swap(a.currencyChannel, b.currencyChannel);
  swap(a.credit, b.credit);
  swap(a.preBalance, b.preBalance);
  swap(a.deposit, b.deposit);
  swap(a.withdraw, b.withdraw);
  swap(a.frozenMargin, b.frozenMargin);
  swap(a.frozenCash, b.frozenCash);
  swap(a.currMargin, b.currMargin);
  swap(a.commission, b.commission);
  swap(a.closeProfit, b.closeProfit);
  swap(a.positionProfit, b.positionProfit);
  swap(a.available, b.available);
  swap(a.dynamicBenefit, b.dynamicBenefit);
  swap(a.riskRate, b.riskRate);
  swap(a.__isset, b.__isset);
}

const char* TSettlementInfo::ascii_fingerprint = "59D64D5C81ECA4E3369F3E82BF0421BD";
const uint8_t TSettlementInfo::binary_fingerprint[16] = {0x59,0xD6,0x4D,0x5C,0x81,0xEC,0xA4,0xE3,0x36,0x9F,0x3E,0x82,0xBF,0x04,0x21,0xBD};

uint32_t TSettlementInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->settlementDate);
          this->__isset.settlementDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->settlementContent);
          this->__isset.settlementContent = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSettlementInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSettlementInfo");

  if (this->__isset.settlementDate) {
    xfer += oprot->writeFieldBegin("settlementDate", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->settlementDate);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.settlementContent) {
    xfer += oprot->writeFieldBegin("settlementContent", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->settlementContent);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSettlementInfo &a, TSettlementInfo &b) {
  using ::std::swap;
  swap(a.settlementDate, b.settlementDate);
  swap(a.settlementContent, b.settlementContent);
  swap(a.__isset, b.__isset);
}

const char* TNetPositionSummary::ascii_fingerprint = "24D21D354C05399669F1B8BB25054795";
const uint8_t TNetPositionSummary::binary_fingerprint[16] = {0x24,0xD2,0x1D,0x35,0x4C,0x05,0x39,0x96,0x69,0xF1,0xB8,0xBB,0x25,0x05,0x47,0x95};

uint32_t TNetPositionSummary::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeCode);
          this->__isset.sledExchangeCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->netVolume);
          this->__isset.netVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->averagePrice);
          this->__isset.averagePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TNetPositionSummary::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TNetPositionSummary");

  if (this->__isset.sledExchangeCode) {
    xfer += oprot->writeFieldBegin("sledExchangeCode", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->sledExchangeCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.netVolume) {
    xfer += oprot->writeFieldBegin("netVolume", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->netVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.averagePrice) {
    xfer += oprot->writeFieldBegin("averagePrice", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->averagePrice);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TNetPositionSummary &a, TNetPositionSummary &b) {
  using ::std::swap;
  swap(a.sledExchangeCode, b.sledExchangeCode);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.netVolume, b.netVolume);
  swap(a.averagePrice, b.averagePrice);
  swap(a.__isset, b.__isset);
}

const char* TPositionInfo::ascii_fingerprint = "97C370866B5B916E747F3F8A7AEDEBF8";
const uint8_t TPositionInfo::binary_fingerprint[16] = {0x97,0xC3,0x70,0x86,0x6B,0x5B,0x91,0x6E,0x74,0x7F,0x3F,0x8A,0x7A,0xED,0xEB,0xF8};

uint32_t TPositionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeCode);
          this->__isset.sledExchangeCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->netVolume);
          this->__isset.netVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->averagePrice);
          this->__isset.averagePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ydVolume);
          this->__isset.ydVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tdBuyVolume);
          this->__isset.tdBuyVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tdSellVolume);
          this->__isset.tdSellVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->positionProfit);
          this->__isset.positionProfit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeProfit);
          this->__isset.closeProfit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->calculatePrice);
          this->__isset.calculatePrice = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->useMargin);
          this->__isset.useMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fronzenMargin);
          this->__isset.fronzenMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->commission);
          this->__isset.commission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->fronzenCommission);
          this->__isset.fronzenCommission = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->goodsValue);
          this->__isset.goodsValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->leverage);
          this->__isset.leverage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyNo);
          this->__isset.currencyNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionInfo");

  if (this->__isset.sledExchangeCode) {
    xfer += oprot->writeFieldBegin("sledExchangeCode", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->sledExchangeCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 3);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 6);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.netVolume) {
    xfer += oprot->writeFieldBegin("netVolume", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->netVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.averagePrice) {
    xfer += oprot->writeFieldBegin("averagePrice", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->averagePrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ydVolume) {
    xfer += oprot->writeFieldBegin("ydVolume", ::apache::thrift::protocol::T_I64, 9);
    xfer += oprot->writeI64(this->ydVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tdBuyVolume) {
    xfer += oprot->writeFieldBegin("tdBuyVolume", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->tdBuyVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tdSellVolume) {
    xfer += oprot->writeFieldBegin("tdSellVolume", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->tdSellVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.positionProfit) {
    xfer += oprot->writeFieldBegin("positionProfit", ::apache::thrift::protocol::T_DOUBLE, 12);
    xfer += oprot->writeDouble(this->positionProfit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeProfit) {
    xfer += oprot->writeFieldBegin("closeProfit", ::apache::thrift::protocol::T_DOUBLE, 13);
    xfer += oprot->writeDouble(this->closeProfit);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.calculatePrice) {
    xfer += oprot->writeFieldBegin("calculatePrice", ::apache::thrift::protocol::T_DOUBLE, 14);
    xfer += oprot->writeDouble(this->calculatePrice);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.useMargin) {
    xfer += oprot->writeFieldBegin("useMargin", ::apache::thrift::protocol::T_DOUBLE, 15);
    xfer += oprot->writeDouble(this->useMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fronzenMargin) {
    xfer += oprot->writeFieldBegin("fronzenMargin", ::apache::thrift::protocol::T_DOUBLE, 16);
    xfer += oprot->writeDouble(this->fronzenMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commission) {
    xfer += oprot->writeFieldBegin("commission", ::apache::thrift::protocol::T_DOUBLE, 17);
    xfer += oprot->writeDouble(this->commission);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.fronzenCommission) {
    xfer += oprot->writeFieldBegin("fronzenCommission", ::apache::thrift::protocol::T_DOUBLE, 18);
    xfer += oprot->writeDouble(this->fronzenCommission);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.goodsValue) {
    xfer += oprot->writeFieldBegin("goodsValue", ::apache::thrift::protocol::T_DOUBLE, 19);
    xfer += oprot->writeDouble(this->goodsValue);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.leverage) {
    xfer += oprot->writeFieldBegin("leverage", ::apache::thrift::protocol::T_DOUBLE, 20);
    xfer += oprot->writeDouble(this->leverage);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyNo) {
    xfer += oprot->writeFieldBegin("currencyNo", ::apache::thrift::protocol::T_STRING, 21);
    xfer += oprot->writeString(this->currencyNo);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionInfo &a, TPositionInfo &b) {
  using ::std::swap;
  swap(a.sledExchangeCode, b.sledExchangeCode);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.netVolume, b.netVolume);
  swap(a.averagePrice, b.averagePrice);
  swap(a.ydVolume, b.ydVolume);
  swap(a.tdBuyVolume, b.tdBuyVolume);
  swap(a.tdSellVolume, b.tdSellVolume);
  swap(a.positionProfit, b.positionProfit);
  swap(a.closeProfit, b.closeProfit);
  swap(a.calculatePrice, b.calculatePrice);
  swap(a.useMargin, b.useMargin);
  swap(a.fronzenMargin, b.fronzenMargin);
  swap(a.commission, b.commission);
  swap(a.fronzenCommission, b.fronzenCommission);
  swap(a.goodsValue, b.goodsValue);
  swap(a.leverage, b.leverage);
  swap(a.currencyNo, b.currencyNo);
  swap(a.__isset, b.__isset);
}

const char* TPositionCTPExchangeMarginRate::ascii_fingerprint = "8EB9CA8B22048427C4379808AA451A12";
const uint8_t TPositionCTPExchangeMarginRate::binary_fingerprint[16] = {0x8E,0xB9,0xCA,0x8B,0x22,0x04,0x84,0x27,0xC4,0x37,0x98,0x08,0xAA,0x45,0x1A,0x12};

uint32_t TPositionCTPExchangeMarginRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longMarginRatioByMoney);
          this->__isset.longMarginRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longMarginRatioByVolume);
          this->__isset.longMarginRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->shortMarginRatioByMoney);
          this->__isset.shortMarginRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->shortMarginRatioByVolume);
          this->__isset.shortMarginRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCTPExchangeMarginRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCTPExchangeMarginRate");

  if (this->__isset.longMarginRatioByMoney) {
    xfer += oprot->writeFieldBegin("longMarginRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->longMarginRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longMarginRatioByVolume) {
    xfer += oprot->writeFieldBegin("longMarginRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->longMarginRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortMarginRatioByMoney) {
    xfer += oprot->writeFieldBegin("shortMarginRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->shortMarginRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortMarginRatioByVolume) {
    xfer += oprot->writeFieldBegin("shortMarginRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->shortMarginRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCTPExchangeMarginRate &a, TPositionCTPExchangeMarginRate &b) {
  using ::std::swap;
  swap(a.longMarginRatioByMoney, b.longMarginRatioByMoney);
  swap(a.longMarginRatioByVolume, b.longMarginRatioByVolume);
  swap(a.shortMarginRatioByMoney, b.shortMarginRatioByMoney);
  swap(a.shortMarginRatioByVolume, b.shortMarginRatioByVolume);
  swap(a.__isset, b.__isset);
}

const char* TPositionCTPInstrumentMarginRate::ascii_fingerprint = "240A0E006E2A9655055860E975C79131";
const uint8_t TPositionCTPInstrumentMarginRate::binary_fingerprint[16] = {0x24,0x0A,0x0E,0x00,0x6E,0x2A,0x96,0x55,0x05,0x58,0x60,0xE9,0x75,0xC7,0x91,0x31};

uint32_t TPositionCTPInstrumentMarginRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longMarginRatioByMoney);
          this->__isset.longMarginRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longMarginRatioByVolume);
          this->__isset.longMarginRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->shortMarginRatioByMoney);
          this->__isset.shortMarginRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->shortMarginRatioByVolume);
          this->__isset.shortMarginRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isRelative);
          this->__isset.isRelative = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCTPInstrumentMarginRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCTPInstrumentMarginRate");

  if (this->__isset.longMarginRatioByMoney) {
    xfer += oprot->writeFieldBegin("longMarginRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->longMarginRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.longMarginRatioByVolume) {
    xfer += oprot->writeFieldBegin("longMarginRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->longMarginRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortMarginRatioByMoney) {
    xfer += oprot->writeFieldBegin("shortMarginRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->shortMarginRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.shortMarginRatioByVolume) {
    xfer += oprot->writeFieldBegin("shortMarginRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->shortMarginRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.isRelative) {
    xfer += oprot->writeFieldBegin("isRelative", ::apache::thrift::protocol::T_BOOL, 5);
    xfer += oprot->writeBool(this->isRelative);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCTPInstrumentMarginRate &a, TPositionCTPInstrumentMarginRate &b) {
  using ::std::swap;
  swap(a.longMarginRatioByMoney, b.longMarginRatioByMoney);
  swap(a.longMarginRatioByVolume, b.longMarginRatioByVolume);
  swap(a.shortMarginRatioByMoney, b.shortMarginRatioByMoney);
  swap(a.shortMarginRatioByVolume, b.shortMarginRatioByVolume);
  swap(a.isRelative, b.isRelative);
  swap(a.__isset, b.__isset);
}

const char* TPositionCTPMarginRate::ascii_fingerprint = "FEFF26BC97298C7B08D30C15C41F34F6";
const uint8_t TPositionCTPMarginRate::binary_fingerprint[16] = {0xFE,0xFF,0x26,0xBC,0x97,0x29,0x8C,0x7B,0x08,0xD3,0x0C,0x15,0xC4,0x1F,0x34,0xF6};

uint32_t TPositionCTPMarginRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->exchangeMarginRate.read(iprot);
          this->__isset.exchangeMarginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->instrumentMarginRate.read(iprot);
          this->__isset.instrumentMarginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCTPMarginRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCTPMarginRate");

  if (this->__isset.exchangeMarginRate) {
    xfer += oprot->writeFieldBegin("exchangeMarginRate", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->exchangeMarginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.instrumentMarginRate) {
    xfer += oprot->writeFieldBegin("instrumentMarginRate", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->instrumentMarginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCTPMarginRate &a, TPositionCTPMarginRate &b) {
  using ::std::swap;
  swap(a.exchangeMarginRate, b.exchangeMarginRate);
  swap(a.instrumentMarginRate, b.instrumentMarginRate);
  swap(a.__isset, b.__isset);
}

const char* TPositionCTPCommissionRate::ascii_fingerprint = "0F27140B48EB4D1A127CCA32C32AB394";
const uint8_t TPositionCTPCommissionRate::binary_fingerprint[16] = {0x0F,0x27,0x14,0x0B,0x48,0xEB,0x4D,0x1A,0x12,0x7C,0xCA,0x32,0xC3,0x2A,0xB3,0x94};

uint32_t TPositionCTPCommissionRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->openRatioByMoney);
          this->__isset.openRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->openRatioByVolume);
          this->__isset.openRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeRatioByMoney);
          this->__isset.closeRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeRatioByVolume);
          this->__isset.closeRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeTodayRatioByMoney);
          this->__isset.closeTodayRatioByMoney = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeTodayRatioByVolume);
          this->__isset.closeTodayRatioByVolume = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCTPCommissionRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCTPCommissionRate");

  if (this->__isset.openRatioByMoney) {
    xfer += oprot->writeFieldBegin("openRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 1);
    xfer += oprot->writeDouble(this->openRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openRatioByVolume) {
    xfer += oprot->writeFieldBegin("openRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 2);
    xfer += oprot->writeDouble(this->openRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeRatioByMoney) {
    xfer += oprot->writeFieldBegin("closeRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 3);
    xfer += oprot->writeDouble(this->closeRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeRatioByVolume) {
    xfer += oprot->writeFieldBegin("closeRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->closeRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeTodayRatioByMoney) {
    xfer += oprot->writeFieldBegin("closeTodayRatioByMoney", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->closeTodayRatioByMoney);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeTodayRatioByVolume) {
    xfer += oprot->writeFieldBegin("closeTodayRatioByVolume", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->closeTodayRatioByVolume);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCTPCommissionRate &a, TPositionCTPCommissionRate &b) {
  using ::std::swap;
  swap(a.openRatioByMoney, b.openRatioByMoney);
  swap(a.openRatioByVolume, b.openRatioByVolume);
  swap(a.closeRatioByMoney, b.closeRatioByMoney);
  swap(a.closeRatioByVolume, b.closeRatioByVolume);
  swap(a.closeTodayRatioByMoney, b.closeTodayRatioByMoney);
  swap(a.closeTodayRatioByVolume, b.closeTodayRatioByVolume);
  swap(a.__isset, b.__isset);
}

const char* TPositionES9MarginRate::ascii_fingerprint = "AE36CB3214C8D49DE73538729BE6246F";
const uint8_t TPositionES9MarginRate::binary_fingerprint[16] = {0xAE,0x36,0xCB,0x32,0x14,0xC8,0xD4,0x9D,0xE7,0x35,0x38,0x72,0x9B,0xE6,0x24,0x6F};

uint32_t TPositionES9MarginRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->calculateMode);
          this->__isset.calculateMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyGroupNo);
          this->__isset.currencyGroupNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyNo);
          this->__isset.currencyNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->initialMargin);
          this->__isset.initialMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->maintenanceMargin);
          this->__isset.maintenanceMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sellInitialMargin);
          this->__isset.sellInitialMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sellMaintenanceMargin);
          this->__isset.sellMaintenanceMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lockMargin);
          this->__isset.lockMargin = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionES9MarginRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionES9MarginRate");

  if (this->__isset.calculateMode) {
    xfer += oprot->writeFieldBegin("calculateMode", ::apache::thrift::protocol::T_I16, 1);
    xfer += oprot->writeI16(this->calculateMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyGroupNo) {
    xfer += oprot->writeFieldBegin("currencyGroupNo", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->currencyGroupNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyNo) {
    xfer += oprot->writeFieldBegin("currencyNo", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->currencyNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.initialMargin) {
    xfer += oprot->writeFieldBegin("initialMargin", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->initialMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.maintenanceMargin) {
    xfer += oprot->writeFieldBegin("maintenanceMargin", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->maintenanceMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellInitialMargin) {
    xfer += oprot->writeFieldBegin("sellInitialMargin", ::apache::thrift::protocol::T_DOUBLE, 6);
    xfer += oprot->writeDouble(this->sellInitialMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sellMaintenanceMargin) {
    xfer += oprot->writeFieldBegin("sellMaintenanceMargin", ::apache::thrift::protocol::T_DOUBLE, 7);
    xfer += oprot->writeDouble(this->sellMaintenanceMargin);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.lockMargin) {
    xfer += oprot->writeFieldBegin("lockMargin", ::apache::thrift::protocol::T_DOUBLE, 8);
    xfer += oprot->writeDouble(this->lockMargin);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionES9MarginRate &a, TPositionES9MarginRate &b) {
  using ::std::swap;
  swap(a.calculateMode, b.calculateMode);
  swap(a.currencyGroupNo, b.currencyGroupNo);
  swap(a.currencyNo, b.currencyNo);
  swap(a.initialMargin, b.initialMargin);
  swap(a.maintenanceMargin, b.maintenanceMargin);
  swap(a.sellInitialMargin, b.sellInitialMargin);
  swap(a.sellMaintenanceMargin, b.sellMaintenanceMargin);
  swap(a.lockMargin, b.lockMargin);
  swap(a.__isset, b.__isset);
}

const char* TPositionEs9CommissionRate::ascii_fingerprint = "E7A344A974B6829E64C02C3D6D986237";
const uint8_t TPositionEs9CommissionRate::binary_fingerprint[16] = {0xE7,0xA3,0x44,0xA9,0x74,0xB6,0x82,0x9E,0x64,0xC0,0x2C,0x3D,0x6D,0x98,0x62,0x37};

uint32_t TPositionEs9CommissionRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->calculateMode);
          this->__isset.calculateMode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyGroupNo);
          this->__isset.currencyGroupNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->currencyNo);
          this->__isset.currencyNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->openCloseFee);
          this->__isset.openCloseFee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->closeTodayFee);
          this->__isset.closeTodayFee = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionEs9CommissionRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionEs9CommissionRate");

  if (this->__isset.calculateMode) {
    xfer += oprot->writeFieldBegin("calculateMode", ::apache::thrift::protocol::T_I16, 1);
    xfer += oprot->writeI16(this->calculateMode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyGroupNo) {
    xfer += oprot->writeFieldBegin("currencyGroupNo", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->currencyGroupNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.currencyNo) {
    xfer += oprot->writeFieldBegin("currencyNo", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->currencyNo);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.openCloseFee) {
    xfer += oprot->writeFieldBegin("openCloseFee", ::apache::thrift::protocol::T_DOUBLE, 4);
    xfer += oprot->writeDouble(this->openCloseFee);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.closeTodayFee) {
    xfer += oprot->writeFieldBegin("closeTodayFee", ::apache::thrift::protocol::T_DOUBLE, 5);
    xfer += oprot->writeDouble(this->closeTodayFee);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionEs9CommissionRate &a, TPositionEs9CommissionRate &b) {
  using ::std::swap;
  swap(a.calculateMode, b.calculateMode);
  swap(a.currencyGroupNo, b.currencyGroupNo);
  swap(a.currencyNo, b.currencyNo);
  swap(a.openCloseFee, b.openCloseFee);
  swap(a.closeTodayFee, b.closeTodayFee);
  swap(a.__isset, b.__isset);
}

const char* TPositionMarginRate::ascii_fingerprint = "6715E996770B12A02F96AB2650F8C4A0";
const uint8_t TPositionMarginRate::binary_fingerprint[16] = {0x67,0x15,0xE9,0x96,0x77,0x0B,0x12,0xA0,0x2F,0x96,0xAB,0x26,0x50,0xF8,0xC4,0xA0};

uint32_t TPositionMarginRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ctpMarginRate.read(iprot);
          this->__isset.ctpMarginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->es9MarginRate.read(iprot);
          this->__isset.es9MarginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionMarginRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionMarginRate");

  if (this->__isset.ctpMarginRate) {
    xfer += oprot->writeFieldBegin("ctpMarginRate", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ctpMarginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.es9MarginRate) {
    xfer += oprot->writeFieldBegin("es9MarginRate", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->es9MarginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionMarginRate &a, TPositionMarginRate &b) {
  using ::std::swap;
  swap(a.ctpMarginRate, b.ctpMarginRate);
  swap(a.es9MarginRate, b.es9MarginRate);
  swap(a.__isset, b.__isset);
}

const char* TPositionCommissionRate::ascii_fingerprint = "DAE39580EBADE881F84C94B79AA70745";
const uint8_t TPositionCommissionRate::binary_fingerprint[16] = {0xDA,0xE3,0x95,0x80,0xEB,0xAD,0xE8,0x81,0xF8,0x4C,0x94,0xB7,0x9A,0xA7,0x07,0x45};

uint32_t TPositionCommissionRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ctpCommissionRate.read(iprot);
          this->__isset.ctpCommissionRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->es9CommissionRate.read(iprot);
          this->__isset.es9CommissionRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCommissionRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCommissionRate");

  if (this->__isset.ctpCommissionRate) {
    xfer += oprot->writeFieldBegin("ctpCommissionRate", ::apache::thrift::protocol::T_STRUCT, 1);
    xfer += this->ctpCommissionRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.es9CommissionRate) {
    xfer += oprot->writeFieldBegin("es9CommissionRate", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->es9CommissionRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCommissionRate &a, TPositionCommissionRate &b) {
  using ::std::swap;
  swap(a.ctpCommissionRate, b.ctpCommissionRate);
  swap(a.es9CommissionRate, b.es9CommissionRate);
  swap(a.__isset, b.__isset);
}

const char* TPositionContractRate::ascii_fingerprint = "BFE06721A184424419730A7257DF0482";
const uint8_t TPositionContractRate::binary_fingerprint[16] = {0xBF,0xE0,0x67,0x21,0xA1,0x84,0x42,0x44,0x19,0x73,0x0A,0x72,0x57,0xDF,0x04,0x82};

uint32_t TPositionContractRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledContractCode);
          this->__isset.sledContractCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->marginRate.read(iprot);
          this->__isset.marginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->commissionRate.read(iprot);
          this->__isset.commissionRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionContractRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionContractRate");

  if (this->__isset.sledContractCode) {
    xfer += oprot->writeFieldBegin("sledContractCode", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->sledContractCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.marginRate) {
    xfer += oprot->writeFieldBegin("marginRate", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->marginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commissionRate) {
    xfer += oprot->writeFieldBegin("commissionRate", ::apache::thrift::protocol::T_STRUCT, 4);
    xfer += this->commissionRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionContractRate &a, TPositionContractRate &b) {
  using ::std::swap;
  swap(a.sledContractCode, b.sledContractCode);
  swap(a.marginRate, b.marginRate);
  swap(a.commissionRate, b.commissionRate);
  swap(a.__isset, b.__isset);
}

const char* TPositionCommodityRate::ascii_fingerprint = "135E458B11A98AFD679FB1847BB14DEB";
const uint8_t TPositionCommodityRate::binary_fingerprint[16] = {0x13,0x5E,0x45,0x8B,0x11,0xA9,0x8A,0xFD,0x67,0x9F,0xB1,0x84,0x7B,0xB1,0x4D,0xEB};

uint32_t TPositionCommodityRate::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->sledCommodityId);
          this->__isset.sledCommodityId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->sledCommodityType);
          this->__isset.sledCommodityType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledCommodityCode);
          this->__isset.sledCommodityCode = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sledExchangeMic);
          this->__isset.sledExchangeMic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->marginRate.read(iprot);
          this->__isset.marginRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->commissionRate.read(iprot);
          this->__isset.commissionRate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_MAP) {
          {
            this->contractRates.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _ktype7;
            ::apache::thrift::protocol::TType _vtype8;
            xfer += iprot->readMapBegin(_ktype7, _vtype8, _size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              std::string _key11;
              xfer += iprot->readString(_key11);
              TPositionContractRate& _val12 = this->contractRates[_key11];
              xfer += _val12.read(iprot);
            }
            xfer += iprot->readMapEnd();
          }
          this->__isset.contractRates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionCommodityRate::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionCommodityRate");

  if (this->__isset.sledCommodityId) {
    xfer += oprot->writeFieldBegin("sledCommodityId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->sledCommodityId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityType) {
    xfer += oprot->writeFieldBegin("sledCommodityType", ::apache::thrift::protocol::T_I16, 2);
    xfer += oprot->writeI16(this->sledCommodityType);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledCommodityCode) {
    xfer += oprot->writeFieldBegin("sledCommodityCode", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->sledCommodityCode);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.sledExchangeMic) {
    xfer += oprot->writeFieldBegin("sledExchangeMic", ::apache::thrift::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->sledExchangeMic);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.marginRate) {
    xfer += oprot->writeFieldBegin("marginRate", ::apache::thrift::protocol::T_STRUCT, 5);
    xfer += this->marginRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commissionRate) {
    xfer += oprot->writeFieldBegin("commissionRate", ::apache::thrift::protocol::T_STRUCT, 6);
    xfer += this->commissionRate.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.contractRates) {
    xfer += oprot->writeFieldBegin("contractRates", ::apache::thrift::protocol::T_MAP, 7);
    {
      xfer += oprot->writeMapBegin(::apache::thrift::protocol::T_STRING, ::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->contractRates.size()));
      std::map<std::string, TPositionContractRate> ::const_iterator _iter13;
      for (_iter13 = this->contractRates.begin(); _iter13 != this->contractRates.end(); ++_iter13)
      {
        xfer += oprot->writeString(_iter13->first);
        xfer += _iter13->second.write(oprot);
      }
      xfer += oprot->writeMapEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionCommodityRate &a, TPositionCommodityRate &b) {
  using ::std::swap;
  swap(a.sledCommodityId, b.sledCommodityId);
  swap(a.sledCommodityType, b.sledCommodityType);
  swap(a.sledCommodityCode, b.sledCommodityCode);
  swap(a.sledExchangeMic, b.sledExchangeMic);
  swap(a.marginRate, b.marginRate);
  swap(a.commissionRate, b.commissionRate);
  swap(a.contractRates, b.contractRates);
  swap(a.__isset, b.__isset);
}

const char* TPositionRateDetails::ascii_fingerprint = "3CACB250DFD72B11C1F78B0157BBA590";
const uint8_t TPositionRateDetails::binary_fingerprint[16] = {0x3C,0xAC,0xB2,0x50,0xDF,0xD7,0x2B,0x11,0xC1,0xF7,0x8B,0x01,0x57,0xBB,0xA5,0x90};

uint32_t TPositionRateDetails::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tradeAccountId);
          this->__isset.tradeAccountId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast14;
          xfer += iprot->readI32(ecast14);
          this->techPlatform = ( ::xueqiao::trade::hosting::BrokerTechPlatform::type)ecast14;
          this->__isset.techPlatform = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->commodityRates.clear();
            uint32_t _size15;
            ::apache::thrift::protocol::TType _etype18;
            xfer += iprot->readListBegin(_etype18, _size15);
            this->commodityRates.resize(_size15);
            uint32_t _i19;
            for (_i19 = 0; _i19 < _size15; ++_i19)
            {
              xfer += this->commodityRates[_i19].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.commodityRates = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPositionRateDetails::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TPositionRateDetails");

  if (this->__isset.tradeAccountId) {
    xfer += oprot->writeFieldBegin("tradeAccountId", ::apache::thrift::protocol::T_I64, 1);
    xfer += oprot->writeI64(this->tradeAccountId);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.techPlatform) {
    xfer += oprot->writeFieldBegin("techPlatform", ::apache::thrift::protocol::T_I32, 2);
    xfer += oprot->writeI32((int32_t)this->techPlatform);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.commodityRates) {
    xfer += oprot->writeFieldBegin("commodityRates", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->commodityRates.size()));
      std::vector<TPositionCommodityRate> ::const_iterator _iter20;
      for (_iter20 = this->commodityRates.begin(); _iter20 != this->commodityRates.end(); ++_iter20)
      {
        xfer += (*_iter20).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPositionRateDetails &a, TPositionRateDetails &b) {
  using ::std::swap;
  swap(a.tradeAccountId, b.tradeAccountId);
  swap(a.techPlatform, b.techPlatform);
  swap(a.commodityRates, b.commodityRates);
  swap(a.__isset, b.__isset);
}

}}}}} // namespace
