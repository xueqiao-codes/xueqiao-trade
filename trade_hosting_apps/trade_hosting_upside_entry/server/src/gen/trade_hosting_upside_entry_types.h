/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef trade_hosting_upside_entry_TYPES_H
#define trade_hosting_upside_entry_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>
#include "comm_types.h"
#include "trade_hosting_basic_types.h"
#include "trade_hosting_upside_position_types.h"


namespace xueqiao { namespace trade { namespace hosting { namespace upside { namespace entry {

typedef struct _TSubProcessTimeInfo__isset {
  _TSubProcessTimeInfo__isset() : startTimestamp(false), exitedTimestamp(false) {}
  bool startTimestamp;
  bool exitedTimestamp;
} _TSubProcessTimeInfo__isset;

class TSubProcessTimeInfo {
 public:

  static const char* ascii_fingerprint; // = "C1241AF5AA92C586B664FD41DC97C576";
  static const uint8_t binary_fingerprint[16]; // = {0xC1,0x24,0x1A,0xF5,0xAA,0x92,0xC5,0x86,0xB6,0x64,0xFD,0x41,0xDC,0x97,0xC5,0x76};

  TSubProcessTimeInfo() : startTimestamp(0), exitedTimestamp(0) {
  }

  virtual ~TSubProcessTimeInfo() throw() {}

  int32_t startTimestamp;
  int32_t exitedTimestamp;

  _TSubProcessTimeInfo__isset __isset;

  void __set_startTimestamp(const int32_t val) {
    startTimestamp = val;
    __isset.startTimestamp = true;
  }

  void __set_exitedTimestamp(const int32_t val) {
    exitedTimestamp = val;
    __isset.exitedTimestamp = true;
  }

  bool operator == (const TSubProcessTimeInfo & rhs) const
  {
    if (__isset.startTimestamp != rhs.__isset.startTimestamp)
      return false;
    else if (__isset.startTimestamp && !(startTimestamp == rhs.startTimestamp))
      return false;
    if (__isset.exitedTimestamp != rhs.__isset.exitedTimestamp)
      return false;
    else if (__isset.exitedTimestamp && !(exitedTimestamp == rhs.exitedTimestamp))
      return false;
    return true;
  }
  bool operator != (const TSubProcessTimeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSubProcessTimeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSubProcessTimeInfo &a, TSubProcessTimeInfo &b);

typedef struct _TSubProcessInfo__isset {
  _TSubProcessInfo__isset() : tradeAccountId(false), pid(false), timeInfos(false) {}
  bool tradeAccountId;
  bool pid;
  bool timeInfos;
} _TSubProcessInfo__isset;

class TSubProcessInfo {
 public:

  static const char* ascii_fingerprint; // = "9113457402BE87E123D6991E999F0915";
  static const uint8_t binary_fingerprint[16]; // = {0x91,0x13,0x45,0x74,0x02,0xBE,0x87,0xE1,0x23,0xD6,0x99,0x1E,0x99,0x9F,0x09,0x15};

  TSubProcessInfo() : tradeAccountId(0), pid(0) {
  }

  virtual ~TSubProcessInfo() throw() {}

  int64_t tradeAccountId;
  int32_t pid;
  std::vector<TSubProcessTimeInfo>  timeInfos;

  _TSubProcessInfo__isset __isset;

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
    __isset.tradeAccountId = true;
  }

  void __set_pid(const int32_t val) {
    pid = val;
    __isset.pid = true;
  }

  void __set_timeInfos(const std::vector<TSubProcessTimeInfo> & val) {
    timeInfos = val;
    __isset.timeInfos = true;
  }

  bool operator == (const TSubProcessInfo & rhs) const
  {
    if (__isset.tradeAccountId != rhs.__isset.tradeAccountId)
      return false;
    else if (__isset.tradeAccountId && !(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (__isset.pid != rhs.__isset.pid)
      return false;
    else if (__isset.pid && !(pid == rhs.pid))
      return false;
    if (__isset.timeInfos != rhs.__isset.timeInfos)
      return false;
    else if (__isset.timeInfos && !(timeInfos == rhs.timeInfos))
      return false;
    return true;
  }
  bool operator != (const TSubProcessInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSubProcessInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSubProcessInfo &a, TSubProcessInfo &b);

typedef struct _TSyncOrderStateBatchReq__isset {
  _TSyncOrderStateBatchReq__isset() : accountSummary(false), ctpContractSummary(false), esunny3ContractSummary(false), esunny9ContractSummary(false) {}
  bool accountSummary;
  bool ctpContractSummary;
  bool esunny3ContractSummary;
  bool esunny9ContractSummary;
} _TSyncOrderStateBatchReq__isset;

class TSyncOrderStateBatchReq {
 public:

  static const char* ascii_fingerprint; // = "B37C83ED71C2A6C196B2839D805DEE84";
  static const uint8_t binary_fingerprint[16]; // = {0xB3,0x7C,0x83,0xED,0x71,0xC2,0xA6,0xC1,0x96,0xB2,0x83,0x9D,0x80,0x5D,0xEE,0x84};

  TSyncOrderStateBatchReq() {
  }

  virtual ~TSyncOrderStateBatchReq() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary accountSummary;
   ::xueqiao::trade::hosting::CTPContractSummary ctpContractSummary;
   ::xueqiao::trade::hosting::ESunny3ContractSummary esunny3ContractSummary;
   ::xueqiao::trade::hosting::ESunny9ContractSummary esunny9ContractSummary;

  _TSyncOrderStateBatchReq__isset __isset;

  void __set_accountSummary(const  ::xueqiao::trade::hosting::HostingExecOrderTradeAccountSummary& val) {
    accountSummary = val;
    __isset.accountSummary = true;
  }

  void __set_ctpContractSummary(const  ::xueqiao::trade::hosting::CTPContractSummary& val) {
    ctpContractSummary = val;
    __isset.ctpContractSummary = true;
  }

  void __set_esunny3ContractSummary(const  ::xueqiao::trade::hosting::ESunny3ContractSummary& val) {
    esunny3ContractSummary = val;
    __isset.esunny3ContractSummary = true;
  }

  void __set_esunny9ContractSummary(const  ::xueqiao::trade::hosting::ESunny9ContractSummary& val) {
    esunny9ContractSummary = val;
    __isset.esunny9ContractSummary = true;
  }

  bool operator == (const TSyncOrderStateBatchReq & rhs) const
  {
    if (__isset.accountSummary != rhs.__isset.accountSummary)
      return false;
    else if (__isset.accountSummary && !(accountSummary == rhs.accountSummary))
      return false;
    if (__isset.ctpContractSummary != rhs.__isset.ctpContractSummary)
      return false;
    else if (__isset.ctpContractSummary && !(ctpContractSummary == rhs.ctpContractSummary))
      return false;
    if (__isset.esunny3ContractSummary != rhs.__isset.esunny3ContractSummary)
      return false;
    else if (__isset.esunny3ContractSummary && !(esunny3ContractSummary == rhs.esunny3ContractSummary))
      return false;
    if (__isset.esunny9ContractSummary != rhs.__isset.esunny9ContractSummary)
      return false;
    else if (__isset.esunny9ContractSummary && !(esunny9ContractSummary == rhs.esunny9ContractSummary))
      return false;
    return true;
  }
  bool operator != (const TSyncOrderStateBatchReq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSyncOrderStateBatchReq & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSyncOrderStateBatchReq &a, TSyncOrderStateBatchReq &b);

typedef struct _TFund__isset {
  _TFund__isset() : currencyNo(false), currencyChannel(false), credit(false), preBalance(false), deposit(false), withdraw(false), frozenMargin(false), frozenCash(false), currMargin(false), commission(false), closeProfit(false), positionProfit(false), available(false), dynamicBenefit(false), riskRate(false) {}
  bool currencyNo;
  bool currencyChannel;
  bool credit;
  bool preBalance;
  bool deposit;
  bool withdraw;
  bool frozenMargin;
  bool frozenCash;
  bool currMargin;
  bool commission;
  bool closeProfit;
  bool positionProfit;
  bool available;
  bool dynamicBenefit;
  bool riskRate;
} _TFund__isset;

class TFund {
 public:

  static const char* ascii_fingerprint; // = "8D7BF2131FDAF021A365D246D9F83F2D";
  static const uint8_t binary_fingerprint[16]; // = {0x8D,0x7B,0xF2,0x13,0x1F,0xDA,0xF0,0x21,0xA3,0x65,0xD2,0x46,0xD9,0xF8,0x3F,0x2D};

  TFund() : currencyNo(), currencyChannel(), credit(0), preBalance(0), deposit(0), withdraw(0), frozenMargin(0), frozenCash(0), currMargin(0), commission(0), closeProfit(0), positionProfit(0), available(0), dynamicBenefit(0), riskRate(0) {
  }

  virtual ~TFund() throw() {}

  std::string currencyNo;
  std::string currencyChannel;
  double credit;
  double preBalance;
  double deposit;
  double withdraw;
  double frozenMargin;
  double frozenCash;
  double currMargin;
  double commission;
  double closeProfit;
  double positionProfit;
  double available;
  double dynamicBenefit;
  double riskRate;

  _TFund__isset __isset;

  void __set_currencyNo(const std::string& val) {
    currencyNo = val;
    __isset.currencyNo = true;
  }

  void __set_currencyChannel(const std::string& val) {
    currencyChannel = val;
    __isset.currencyChannel = true;
  }

  void __set_credit(const double val) {
    credit = val;
    __isset.credit = true;
  }

  void __set_preBalance(const double val) {
    preBalance = val;
    __isset.preBalance = true;
  }

  void __set_deposit(const double val) {
    deposit = val;
    __isset.deposit = true;
  }

  void __set_withdraw(const double val) {
    withdraw = val;
    __isset.withdraw = true;
  }

  void __set_frozenMargin(const double val) {
    frozenMargin = val;
    __isset.frozenMargin = true;
  }

  void __set_frozenCash(const double val) {
    frozenCash = val;
    __isset.frozenCash = true;
  }

  void __set_currMargin(const double val) {
    currMargin = val;
    __isset.currMargin = true;
  }

  void __set_commission(const double val) {
    commission = val;
    __isset.commission = true;
  }

  void __set_closeProfit(const double val) {
    closeProfit = val;
    __isset.closeProfit = true;
  }

  void __set_positionProfit(const double val) {
    positionProfit = val;
    __isset.positionProfit = true;
  }

  void __set_available(const double val) {
    available = val;
    __isset.available = true;
  }

  void __set_dynamicBenefit(const double val) {
    dynamicBenefit = val;
    __isset.dynamicBenefit = true;
  }

  void __set_riskRate(const double val) {
    riskRate = val;
    __isset.riskRate = true;
  }

  bool operator == (const TFund & rhs) const
  {
    if (__isset.currencyNo != rhs.__isset.currencyNo)
      return false;
    else if (__isset.currencyNo && !(currencyNo == rhs.currencyNo))
      return false;
    if (__isset.currencyChannel != rhs.__isset.currencyChannel)
      return false;
    else if (__isset.currencyChannel && !(currencyChannel == rhs.currencyChannel))
      return false;
    if (__isset.credit != rhs.__isset.credit)
      return false;
    else if (__isset.credit && !(credit == rhs.credit))
      return false;
    if (__isset.preBalance != rhs.__isset.preBalance)
      return false;
    else if (__isset.preBalance && !(preBalance == rhs.preBalance))
      return false;
    if (__isset.deposit != rhs.__isset.deposit)
      return false;
    else if (__isset.deposit && !(deposit == rhs.deposit))
      return false;
    if (__isset.withdraw != rhs.__isset.withdraw)
      return false;
    else if (__isset.withdraw && !(withdraw == rhs.withdraw))
      return false;
    if (__isset.frozenMargin != rhs.__isset.frozenMargin)
      return false;
    else if (__isset.frozenMargin && !(frozenMargin == rhs.frozenMargin))
      return false;
    if (__isset.frozenCash != rhs.__isset.frozenCash)
      return false;
    else if (__isset.frozenCash && !(frozenCash == rhs.frozenCash))
      return false;
    if (__isset.currMargin != rhs.__isset.currMargin)
      return false;
    else if (__isset.currMargin && !(currMargin == rhs.currMargin))
      return false;
    if (__isset.commission != rhs.__isset.commission)
      return false;
    else if (__isset.commission && !(commission == rhs.commission))
      return false;
    if (__isset.closeProfit != rhs.__isset.closeProfit)
      return false;
    else if (__isset.closeProfit && !(closeProfit == rhs.closeProfit))
      return false;
    if (__isset.positionProfit != rhs.__isset.positionProfit)
      return false;
    else if (__isset.positionProfit && !(positionProfit == rhs.positionProfit))
      return false;
    if (__isset.available != rhs.__isset.available)
      return false;
    else if (__isset.available && !(available == rhs.available))
      return false;
    if (__isset.dynamicBenefit != rhs.__isset.dynamicBenefit)
      return false;
    else if (__isset.dynamicBenefit && !(dynamicBenefit == rhs.dynamicBenefit))
      return false;
    if (__isset.riskRate != rhs.__isset.riskRate)
      return false;
    else if (__isset.riskRate && !(riskRate == rhs.riskRate))
      return false;
    return true;
  }
  bool operator != (const TFund &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TFund & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TFund &a, TFund &b);

typedef struct _TSettlementInfo__isset {
  _TSettlementInfo__isset() : settlementDate(false), settlementContent(false) {}
  bool settlementDate;
  bool settlementContent;
} _TSettlementInfo__isset;

class TSettlementInfo {
 public:

  static const char* ascii_fingerprint; // = "59D64D5C81ECA4E3369F3E82BF0421BD";
  static const uint8_t binary_fingerprint[16]; // = {0x59,0xD6,0x4D,0x5C,0x81,0xEC,0xA4,0xE3,0x36,0x9F,0x3E,0x82,0xBF,0x04,0x21,0xBD};

  TSettlementInfo() : settlementDate(), settlementContent() {
  }

  virtual ~TSettlementInfo() throw() {}

  std::string settlementDate;
  std::string settlementContent;

  _TSettlementInfo__isset __isset;

  void __set_settlementDate(const std::string& val) {
    settlementDate = val;
    __isset.settlementDate = true;
  }

  void __set_settlementContent(const std::string& val) {
    settlementContent = val;
    __isset.settlementContent = true;
  }

  bool operator == (const TSettlementInfo & rhs) const
  {
    if (__isset.settlementDate != rhs.__isset.settlementDate)
      return false;
    else if (__isset.settlementDate && !(settlementDate == rhs.settlementDate))
      return false;
    if (__isset.settlementContent != rhs.__isset.settlementContent)
      return false;
    else if (__isset.settlementContent && !(settlementContent == rhs.settlementContent))
      return false;
    return true;
  }
  bool operator != (const TSettlementInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TSettlementInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TSettlementInfo &a, TSettlementInfo &b);

typedef struct _TNetPositionSummary__isset {
  _TNetPositionSummary__isset() : sledExchangeCode(false), sledCommodityType(false), sledCommodityCode(false), sledCommodityId(false), sledContractCode(false), netVolume(false), averagePrice(false) {}
  bool sledExchangeCode;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool sledCommodityId;
  bool sledContractCode;
  bool netVolume;
  bool averagePrice;
} _TNetPositionSummary__isset;

class TNetPositionSummary {
 public:

  static const char* ascii_fingerprint; // = "24D21D354C05399669F1B8BB25054795";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xD2,0x1D,0x35,0x4C,0x05,0x39,0x96,0x69,0xF1,0xB8,0xBB,0x25,0x05,0x47,0x95};

  TNetPositionSummary() : sledExchangeCode(), sledCommodityType(0), sledCommodityCode(), sledCommodityId(0), sledContractCode(), netVolume(0), averagePrice(0) {
  }

  virtual ~TNetPositionSummary() throw() {}

  std::string sledExchangeCode;
  int16_t sledCommodityType;
  std::string sledCommodityCode;
  int64_t sledCommodityId;
  std::string sledContractCode;
  int64_t netVolume;
  double averagePrice;

  _TNetPositionSummary__isset __isset;

  void __set_sledExchangeCode(const std::string& val) {
    sledExchangeCode = val;
    __isset.sledExchangeCode = true;
  }

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_sledCommodityId(const int64_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_netVolume(const int64_t val) {
    netVolume = val;
    __isset.netVolume = true;
  }

  void __set_averagePrice(const double val) {
    averagePrice = val;
    __isset.averagePrice = true;
  }

  bool operator == (const TNetPositionSummary & rhs) const
  {
    if (__isset.sledExchangeCode != rhs.__isset.sledExchangeCode)
      return false;
    else if (__isset.sledExchangeCode && !(sledExchangeCode == rhs.sledExchangeCode))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.netVolume != rhs.__isset.netVolume)
      return false;
    else if (__isset.netVolume && !(netVolume == rhs.netVolume))
      return false;
    if (__isset.averagePrice != rhs.__isset.averagePrice)
      return false;
    else if (__isset.averagePrice && !(averagePrice == rhs.averagePrice))
      return false;
    return true;
  }
  bool operator != (const TNetPositionSummary &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TNetPositionSummary & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TNetPositionSummary &a, TNetPositionSummary &b);

typedef struct _TPositionInfo__isset {
  _TPositionInfo__isset() : sledExchangeCode(false), sledCommodityType(false), sledCommodityCode(false), sledCommodityId(false), sledContractCode(false), netVolume(false), averagePrice(false), ydVolume(false), tdBuyVolume(false), tdSellVolume(false), positionProfit(false), closeProfit(false), calculatePrice(false), useMargin(false), fronzenMargin(false), commission(false), fronzenCommission(false), goodsValue(false), leverage(false), currencyNo(false) {}
  bool sledExchangeCode;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool sledCommodityId;
  bool sledContractCode;
  bool netVolume;
  bool averagePrice;
  bool ydVolume;
  bool tdBuyVolume;
  bool tdSellVolume;
  bool positionProfit;
  bool closeProfit;
  bool calculatePrice;
  bool useMargin;
  bool fronzenMargin;
  bool commission;
  bool fronzenCommission;
  bool goodsValue;
  bool leverage;
  bool currencyNo;
} _TPositionInfo__isset;

class TPositionInfo {
 public:

  static const char* ascii_fingerprint; // = "97C370866B5B916E747F3F8A7AEDEBF8";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0xC3,0x70,0x86,0x6B,0x5B,0x91,0x6E,0x74,0x7F,0x3F,0x8A,0x7A,0xED,0xEB,0xF8};

  TPositionInfo() : sledExchangeCode(), sledCommodityType(0), sledCommodityCode(), sledCommodityId(0), sledContractCode(), netVolume(0), averagePrice(0), ydVolume(0), tdBuyVolume(0), tdSellVolume(0), positionProfit(0), closeProfit(0), calculatePrice(0), useMargin(0), fronzenMargin(0), commission(0), fronzenCommission(0), goodsValue(0), leverage(0), currencyNo() {
  }

  virtual ~TPositionInfo() throw() {}

  std::string sledExchangeCode;
  int16_t sledCommodityType;
  std::string sledCommodityCode;
  int64_t sledCommodityId;
  std::string sledContractCode;
  int64_t netVolume;
  double averagePrice;
  int64_t ydVolume;
  int64_t tdBuyVolume;
  int64_t tdSellVolume;
  double positionProfit;
  double closeProfit;
  double calculatePrice;
  double useMargin;
  double fronzenMargin;
  double commission;
  double fronzenCommission;
  double goodsValue;
  double leverage;
  std::string currencyNo;

  _TPositionInfo__isset __isset;

  void __set_sledExchangeCode(const std::string& val) {
    sledExchangeCode = val;
    __isset.sledExchangeCode = true;
  }

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_sledCommodityId(const int64_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_netVolume(const int64_t val) {
    netVolume = val;
    __isset.netVolume = true;
  }

  void __set_averagePrice(const double val) {
    averagePrice = val;
    __isset.averagePrice = true;
  }

  void __set_ydVolume(const int64_t val) {
    ydVolume = val;
    __isset.ydVolume = true;
  }

  void __set_tdBuyVolume(const int64_t val) {
    tdBuyVolume = val;
    __isset.tdBuyVolume = true;
  }

  void __set_tdSellVolume(const int64_t val) {
    tdSellVolume = val;
    __isset.tdSellVolume = true;
  }

  void __set_positionProfit(const double val) {
    positionProfit = val;
    __isset.positionProfit = true;
  }

  void __set_closeProfit(const double val) {
    closeProfit = val;
    __isset.closeProfit = true;
  }

  void __set_calculatePrice(const double val) {
    calculatePrice = val;
    __isset.calculatePrice = true;
  }

  void __set_useMargin(const double val) {
    useMargin = val;
    __isset.useMargin = true;
  }

  void __set_fronzenMargin(const double val) {
    fronzenMargin = val;
    __isset.fronzenMargin = true;
  }

  void __set_commission(const double val) {
    commission = val;
    __isset.commission = true;
  }

  void __set_fronzenCommission(const double val) {
    fronzenCommission = val;
    __isset.fronzenCommission = true;
  }

  void __set_goodsValue(const double val) {
    goodsValue = val;
    __isset.goodsValue = true;
  }

  void __set_leverage(const double val) {
    leverage = val;
    __isset.leverage = true;
  }

  void __set_currencyNo(const std::string& val) {
    currencyNo = val;
    __isset.currencyNo = true;
  }

  bool operator == (const TPositionInfo & rhs) const
  {
    if (__isset.sledExchangeCode != rhs.__isset.sledExchangeCode)
      return false;
    else if (__isset.sledExchangeCode && !(sledExchangeCode == rhs.sledExchangeCode))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.netVolume != rhs.__isset.netVolume)
      return false;
    else if (__isset.netVolume && !(netVolume == rhs.netVolume))
      return false;
    if (__isset.averagePrice != rhs.__isset.averagePrice)
      return false;
    else if (__isset.averagePrice && !(averagePrice == rhs.averagePrice))
      return false;
    if (__isset.ydVolume != rhs.__isset.ydVolume)
      return false;
    else if (__isset.ydVolume && !(ydVolume == rhs.ydVolume))
      return false;
    if (__isset.tdBuyVolume != rhs.__isset.tdBuyVolume)
      return false;
    else if (__isset.tdBuyVolume && !(tdBuyVolume == rhs.tdBuyVolume))
      return false;
    if (__isset.tdSellVolume != rhs.__isset.tdSellVolume)
      return false;
    else if (__isset.tdSellVolume && !(tdSellVolume == rhs.tdSellVolume))
      return false;
    if (__isset.positionProfit != rhs.__isset.positionProfit)
      return false;
    else if (__isset.positionProfit && !(positionProfit == rhs.positionProfit))
      return false;
    if (__isset.closeProfit != rhs.__isset.closeProfit)
      return false;
    else if (__isset.closeProfit && !(closeProfit == rhs.closeProfit))
      return false;
    if (__isset.calculatePrice != rhs.__isset.calculatePrice)
      return false;
    else if (__isset.calculatePrice && !(calculatePrice == rhs.calculatePrice))
      return false;
    if (__isset.useMargin != rhs.__isset.useMargin)
      return false;
    else if (__isset.useMargin && !(useMargin == rhs.useMargin))
      return false;
    if (__isset.fronzenMargin != rhs.__isset.fronzenMargin)
      return false;
    else if (__isset.fronzenMargin && !(fronzenMargin == rhs.fronzenMargin))
      return false;
    if (__isset.commission != rhs.__isset.commission)
      return false;
    else if (__isset.commission && !(commission == rhs.commission))
      return false;
    if (__isset.fronzenCommission != rhs.__isset.fronzenCommission)
      return false;
    else if (__isset.fronzenCommission && !(fronzenCommission == rhs.fronzenCommission))
      return false;
    if (__isset.goodsValue != rhs.__isset.goodsValue)
      return false;
    else if (__isset.goodsValue && !(goodsValue == rhs.goodsValue))
      return false;
    if (__isset.leverage != rhs.__isset.leverage)
      return false;
    else if (__isset.leverage && !(leverage == rhs.leverage))
      return false;
    if (__isset.currencyNo != rhs.__isset.currencyNo)
      return false;
    else if (__isset.currencyNo && !(currencyNo == rhs.currencyNo))
      return false;
    return true;
  }
  bool operator != (const TPositionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionInfo &a, TPositionInfo &b);

typedef struct _TPositionCTPExchangeMarginRate__isset {
  _TPositionCTPExchangeMarginRate__isset() : longMarginRatioByMoney(false), longMarginRatioByVolume(false), shortMarginRatioByMoney(false), shortMarginRatioByVolume(false) {}
  bool longMarginRatioByMoney;
  bool longMarginRatioByVolume;
  bool shortMarginRatioByMoney;
  bool shortMarginRatioByVolume;
} _TPositionCTPExchangeMarginRate__isset;

class TPositionCTPExchangeMarginRate {
 public:

  static const char* ascii_fingerprint; // = "8EB9CA8B22048427C4379808AA451A12";
  static const uint8_t binary_fingerprint[16]; // = {0x8E,0xB9,0xCA,0x8B,0x22,0x04,0x84,0x27,0xC4,0x37,0x98,0x08,0xAA,0x45,0x1A,0x12};

  TPositionCTPExchangeMarginRate() : longMarginRatioByMoney(0), longMarginRatioByVolume(0), shortMarginRatioByMoney(0), shortMarginRatioByVolume(0) {
  }

  virtual ~TPositionCTPExchangeMarginRate() throw() {}

  double longMarginRatioByMoney;
  double longMarginRatioByVolume;
  double shortMarginRatioByMoney;
  double shortMarginRatioByVolume;

  _TPositionCTPExchangeMarginRate__isset __isset;

  void __set_longMarginRatioByMoney(const double val) {
    longMarginRatioByMoney = val;
    __isset.longMarginRatioByMoney = true;
  }

  void __set_longMarginRatioByVolume(const double val) {
    longMarginRatioByVolume = val;
    __isset.longMarginRatioByVolume = true;
  }

  void __set_shortMarginRatioByMoney(const double val) {
    shortMarginRatioByMoney = val;
    __isset.shortMarginRatioByMoney = true;
  }

  void __set_shortMarginRatioByVolume(const double val) {
    shortMarginRatioByVolume = val;
    __isset.shortMarginRatioByVolume = true;
  }

  bool operator == (const TPositionCTPExchangeMarginRate & rhs) const
  {
    if (__isset.longMarginRatioByMoney != rhs.__isset.longMarginRatioByMoney)
      return false;
    else if (__isset.longMarginRatioByMoney && !(longMarginRatioByMoney == rhs.longMarginRatioByMoney))
      return false;
    if (__isset.longMarginRatioByVolume != rhs.__isset.longMarginRatioByVolume)
      return false;
    else if (__isset.longMarginRatioByVolume && !(longMarginRatioByVolume == rhs.longMarginRatioByVolume))
      return false;
    if (__isset.shortMarginRatioByMoney != rhs.__isset.shortMarginRatioByMoney)
      return false;
    else if (__isset.shortMarginRatioByMoney && !(shortMarginRatioByMoney == rhs.shortMarginRatioByMoney))
      return false;
    if (__isset.shortMarginRatioByVolume != rhs.__isset.shortMarginRatioByVolume)
      return false;
    else if (__isset.shortMarginRatioByVolume && !(shortMarginRatioByVolume == rhs.shortMarginRatioByVolume))
      return false;
    return true;
  }
  bool operator != (const TPositionCTPExchangeMarginRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCTPExchangeMarginRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCTPExchangeMarginRate &a, TPositionCTPExchangeMarginRate &b);

typedef struct _TPositionCTPInstrumentMarginRate__isset {
  _TPositionCTPInstrumentMarginRate__isset() : longMarginRatioByMoney(false), longMarginRatioByVolume(false), shortMarginRatioByMoney(false), shortMarginRatioByVolume(false), isRelative(false) {}
  bool longMarginRatioByMoney;
  bool longMarginRatioByVolume;
  bool shortMarginRatioByMoney;
  bool shortMarginRatioByVolume;
  bool isRelative;
} _TPositionCTPInstrumentMarginRate__isset;

class TPositionCTPInstrumentMarginRate {
 public:

  static const char* ascii_fingerprint; // = "240A0E006E2A9655055860E975C79131";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0x0A,0x0E,0x00,0x6E,0x2A,0x96,0x55,0x05,0x58,0x60,0xE9,0x75,0xC7,0x91,0x31};

  TPositionCTPInstrumentMarginRate() : longMarginRatioByMoney(0), longMarginRatioByVolume(0), shortMarginRatioByMoney(0), shortMarginRatioByVolume(0), isRelative(0) {
  }

  virtual ~TPositionCTPInstrumentMarginRate() throw() {}

  double longMarginRatioByMoney;
  double longMarginRatioByVolume;
  double shortMarginRatioByMoney;
  double shortMarginRatioByVolume;
  bool isRelative;

  _TPositionCTPInstrumentMarginRate__isset __isset;

  void __set_longMarginRatioByMoney(const double val) {
    longMarginRatioByMoney = val;
    __isset.longMarginRatioByMoney = true;
  }

  void __set_longMarginRatioByVolume(const double val) {
    longMarginRatioByVolume = val;
    __isset.longMarginRatioByVolume = true;
  }

  void __set_shortMarginRatioByMoney(const double val) {
    shortMarginRatioByMoney = val;
    __isset.shortMarginRatioByMoney = true;
  }

  void __set_shortMarginRatioByVolume(const double val) {
    shortMarginRatioByVolume = val;
    __isset.shortMarginRatioByVolume = true;
  }

  void __set_isRelative(const bool val) {
    isRelative = val;
    __isset.isRelative = true;
  }

  bool operator == (const TPositionCTPInstrumentMarginRate & rhs) const
  {
    if (__isset.longMarginRatioByMoney != rhs.__isset.longMarginRatioByMoney)
      return false;
    else if (__isset.longMarginRatioByMoney && !(longMarginRatioByMoney == rhs.longMarginRatioByMoney))
      return false;
    if (__isset.longMarginRatioByVolume != rhs.__isset.longMarginRatioByVolume)
      return false;
    else if (__isset.longMarginRatioByVolume && !(longMarginRatioByVolume == rhs.longMarginRatioByVolume))
      return false;
    if (__isset.shortMarginRatioByMoney != rhs.__isset.shortMarginRatioByMoney)
      return false;
    else if (__isset.shortMarginRatioByMoney && !(shortMarginRatioByMoney == rhs.shortMarginRatioByMoney))
      return false;
    if (__isset.shortMarginRatioByVolume != rhs.__isset.shortMarginRatioByVolume)
      return false;
    else if (__isset.shortMarginRatioByVolume && !(shortMarginRatioByVolume == rhs.shortMarginRatioByVolume))
      return false;
    if (__isset.isRelative != rhs.__isset.isRelative)
      return false;
    else if (__isset.isRelative && !(isRelative == rhs.isRelative))
      return false;
    return true;
  }
  bool operator != (const TPositionCTPInstrumentMarginRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCTPInstrumentMarginRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCTPInstrumentMarginRate &a, TPositionCTPInstrumentMarginRate &b);

typedef struct _TPositionCTPMarginRate__isset {
  _TPositionCTPMarginRate__isset() : exchangeMarginRate(false), instrumentMarginRate(false) {}
  bool exchangeMarginRate;
  bool instrumentMarginRate;
} _TPositionCTPMarginRate__isset;

class TPositionCTPMarginRate {
 public:

  static const char* ascii_fingerprint; // = "FEFF26BC97298C7B08D30C15C41F34F6";
  static const uint8_t binary_fingerprint[16]; // = {0xFE,0xFF,0x26,0xBC,0x97,0x29,0x8C,0x7B,0x08,0xD3,0x0C,0x15,0xC4,0x1F,0x34,0xF6};

  TPositionCTPMarginRate() {
  }

  virtual ~TPositionCTPMarginRate() throw() {}

  TPositionCTPExchangeMarginRate exchangeMarginRate;
  TPositionCTPInstrumentMarginRate instrumentMarginRate;

  _TPositionCTPMarginRate__isset __isset;

  void __set_exchangeMarginRate(const TPositionCTPExchangeMarginRate& val) {
    exchangeMarginRate = val;
    __isset.exchangeMarginRate = true;
  }

  void __set_instrumentMarginRate(const TPositionCTPInstrumentMarginRate& val) {
    instrumentMarginRate = val;
    __isset.instrumentMarginRate = true;
  }

  bool operator == (const TPositionCTPMarginRate & rhs) const
  {
    if (__isset.exchangeMarginRate != rhs.__isset.exchangeMarginRate)
      return false;
    else if (__isset.exchangeMarginRate && !(exchangeMarginRate == rhs.exchangeMarginRate))
      return false;
    if (__isset.instrumentMarginRate != rhs.__isset.instrumentMarginRate)
      return false;
    else if (__isset.instrumentMarginRate && !(instrumentMarginRate == rhs.instrumentMarginRate))
      return false;
    return true;
  }
  bool operator != (const TPositionCTPMarginRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCTPMarginRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCTPMarginRate &a, TPositionCTPMarginRate &b);

typedef struct _TPositionCTPCommissionRate__isset {
  _TPositionCTPCommissionRate__isset() : openRatioByMoney(false), openRatioByVolume(false), closeRatioByMoney(false), closeRatioByVolume(false), closeTodayRatioByMoney(false), closeTodayRatioByVolume(false) {}
  bool openRatioByMoney;
  bool openRatioByVolume;
  bool closeRatioByMoney;
  bool closeRatioByVolume;
  bool closeTodayRatioByMoney;
  bool closeTodayRatioByVolume;
} _TPositionCTPCommissionRate__isset;

class TPositionCTPCommissionRate {
 public:

  static const char* ascii_fingerprint; // = "0F27140B48EB4D1A127CCA32C32AB394";
  static const uint8_t binary_fingerprint[16]; // = {0x0F,0x27,0x14,0x0B,0x48,0xEB,0x4D,0x1A,0x12,0x7C,0xCA,0x32,0xC3,0x2A,0xB3,0x94};

  TPositionCTPCommissionRate() : openRatioByMoney(0), openRatioByVolume(0), closeRatioByMoney(0), closeRatioByVolume(0), closeTodayRatioByMoney(0), closeTodayRatioByVolume(0) {
  }

  virtual ~TPositionCTPCommissionRate() throw() {}

  double openRatioByMoney;
  double openRatioByVolume;
  double closeRatioByMoney;
  double closeRatioByVolume;
  double closeTodayRatioByMoney;
  double closeTodayRatioByVolume;

  _TPositionCTPCommissionRate__isset __isset;

  void __set_openRatioByMoney(const double val) {
    openRatioByMoney = val;
    __isset.openRatioByMoney = true;
  }

  void __set_openRatioByVolume(const double val) {
    openRatioByVolume = val;
    __isset.openRatioByVolume = true;
  }

  void __set_closeRatioByMoney(const double val) {
    closeRatioByMoney = val;
    __isset.closeRatioByMoney = true;
  }

  void __set_closeRatioByVolume(const double val) {
    closeRatioByVolume = val;
    __isset.closeRatioByVolume = true;
  }

  void __set_closeTodayRatioByMoney(const double val) {
    closeTodayRatioByMoney = val;
    __isset.closeTodayRatioByMoney = true;
  }

  void __set_closeTodayRatioByVolume(const double val) {
    closeTodayRatioByVolume = val;
    __isset.closeTodayRatioByVolume = true;
  }

  bool operator == (const TPositionCTPCommissionRate & rhs) const
  {
    if (__isset.openRatioByMoney != rhs.__isset.openRatioByMoney)
      return false;
    else if (__isset.openRatioByMoney && !(openRatioByMoney == rhs.openRatioByMoney))
      return false;
    if (__isset.openRatioByVolume != rhs.__isset.openRatioByVolume)
      return false;
    else if (__isset.openRatioByVolume && !(openRatioByVolume == rhs.openRatioByVolume))
      return false;
    if (__isset.closeRatioByMoney != rhs.__isset.closeRatioByMoney)
      return false;
    else if (__isset.closeRatioByMoney && !(closeRatioByMoney == rhs.closeRatioByMoney))
      return false;
    if (__isset.closeRatioByVolume != rhs.__isset.closeRatioByVolume)
      return false;
    else if (__isset.closeRatioByVolume && !(closeRatioByVolume == rhs.closeRatioByVolume))
      return false;
    if (__isset.closeTodayRatioByMoney != rhs.__isset.closeTodayRatioByMoney)
      return false;
    else if (__isset.closeTodayRatioByMoney && !(closeTodayRatioByMoney == rhs.closeTodayRatioByMoney))
      return false;
    if (__isset.closeTodayRatioByVolume != rhs.__isset.closeTodayRatioByVolume)
      return false;
    else if (__isset.closeTodayRatioByVolume && !(closeTodayRatioByVolume == rhs.closeTodayRatioByVolume))
      return false;
    return true;
  }
  bool operator != (const TPositionCTPCommissionRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCTPCommissionRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCTPCommissionRate &a, TPositionCTPCommissionRate &b);

typedef struct _TPositionES9MarginRate__isset {
  _TPositionES9MarginRate__isset() : calculateMode(false), currencyGroupNo(false), currencyNo(false), initialMargin(false), maintenanceMargin(false), sellInitialMargin(false), sellMaintenanceMargin(false), lockMargin(false) {}
  bool calculateMode;
  bool currencyGroupNo;
  bool currencyNo;
  bool initialMargin;
  bool maintenanceMargin;
  bool sellInitialMargin;
  bool sellMaintenanceMargin;
  bool lockMargin;
} _TPositionES9MarginRate__isset;

class TPositionES9MarginRate {
 public:

  static const char* ascii_fingerprint; // = "AE36CB3214C8D49DE73538729BE6246F";
  static const uint8_t binary_fingerprint[16]; // = {0xAE,0x36,0xCB,0x32,0x14,0xC8,0xD4,0x9D,0xE7,0x35,0x38,0x72,0x9B,0xE6,0x24,0x6F};

  TPositionES9MarginRate() : calculateMode(0), currencyGroupNo(), currencyNo(), initialMargin(0), maintenanceMargin(0), sellInitialMargin(0), sellMaintenanceMargin(0), lockMargin(0) {
  }

  virtual ~TPositionES9MarginRate() throw() {}

  int16_t calculateMode;
  std::string currencyGroupNo;
  std::string currencyNo;
  double initialMargin;
  double maintenanceMargin;
  double sellInitialMargin;
  double sellMaintenanceMargin;
  double lockMargin;

  _TPositionES9MarginRate__isset __isset;

  void __set_calculateMode(const int16_t val) {
    calculateMode = val;
    __isset.calculateMode = true;
  }

  void __set_currencyGroupNo(const std::string& val) {
    currencyGroupNo = val;
    __isset.currencyGroupNo = true;
  }

  void __set_currencyNo(const std::string& val) {
    currencyNo = val;
    __isset.currencyNo = true;
  }

  void __set_initialMargin(const double val) {
    initialMargin = val;
    __isset.initialMargin = true;
  }

  void __set_maintenanceMargin(const double val) {
    maintenanceMargin = val;
    __isset.maintenanceMargin = true;
  }

  void __set_sellInitialMargin(const double val) {
    sellInitialMargin = val;
    __isset.sellInitialMargin = true;
  }

  void __set_sellMaintenanceMargin(const double val) {
    sellMaintenanceMargin = val;
    __isset.sellMaintenanceMargin = true;
  }

  void __set_lockMargin(const double val) {
    lockMargin = val;
    __isset.lockMargin = true;
  }

  bool operator == (const TPositionES9MarginRate & rhs) const
  {
    if (__isset.calculateMode != rhs.__isset.calculateMode)
      return false;
    else if (__isset.calculateMode && !(calculateMode == rhs.calculateMode))
      return false;
    if (__isset.currencyGroupNo != rhs.__isset.currencyGroupNo)
      return false;
    else if (__isset.currencyGroupNo && !(currencyGroupNo == rhs.currencyGroupNo))
      return false;
    if (__isset.currencyNo != rhs.__isset.currencyNo)
      return false;
    else if (__isset.currencyNo && !(currencyNo == rhs.currencyNo))
      return false;
    if (__isset.initialMargin != rhs.__isset.initialMargin)
      return false;
    else if (__isset.initialMargin && !(initialMargin == rhs.initialMargin))
      return false;
    if (__isset.maintenanceMargin != rhs.__isset.maintenanceMargin)
      return false;
    else if (__isset.maintenanceMargin && !(maintenanceMargin == rhs.maintenanceMargin))
      return false;
    if (__isset.sellInitialMargin != rhs.__isset.sellInitialMargin)
      return false;
    else if (__isset.sellInitialMargin && !(sellInitialMargin == rhs.sellInitialMargin))
      return false;
    if (__isset.sellMaintenanceMargin != rhs.__isset.sellMaintenanceMargin)
      return false;
    else if (__isset.sellMaintenanceMargin && !(sellMaintenanceMargin == rhs.sellMaintenanceMargin))
      return false;
    if (__isset.lockMargin != rhs.__isset.lockMargin)
      return false;
    else if (__isset.lockMargin && !(lockMargin == rhs.lockMargin))
      return false;
    return true;
  }
  bool operator != (const TPositionES9MarginRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionES9MarginRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionES9MarginRate &a, TPositionES9MarginRate &b);

typedef struct _TPositionEs9CommissionRate__isset {
  _TPositionEs9CommissionRate__isset() : calculateMode(false), currencyGroupNo(false), currencyNo(false), openCloseFee(false), closeTodayFee(false) {}
  bool calculateMode;
  bool currencyGroupNo;
  bool currencyNo;
  bool openCloseFee;
  bool closeTodayFee;
} _TPositionEs9CommissionRate__isset;

class TPositionEs9CommissionRate {
 public:

  static const char* ascii_fingerprint; // = "E7A344A974B6829E64C02C3D6D986237";
  static const uint8_t binary_fingerprint[16]; // = {0xE7,0xA3,0x44,0xA9,0x74,0xB6,0x82,0x9E,0x64,0xC0,0x2C,0x3D,0x6D,0x98,0x62,0x37};

  TPositionEs9CommissionRate() : calculateMode(0), currencyGroupNo(), currencyNo(), openCloseFee(0), closeTodayFee(0) {
  }

  virtual ~TPositionEs9CommissionRate() throw() {}

  int16_t calculateMode;
  std::string currencyGroupNo;
  std::string currencyNo;
  double openCloseFee;
  double closeTodayFee;

  _TPositionEs9CommissionRate__isset __isset;

  void __set_calculateMode(const int16_t val) {
    calculateMode = val;
    __isset.calculateMode = true;
  }

  void __set_currencyGroupNo(const std::string& val) {
    currencyGroupNo = val;
    __isset.currencyGroupNo = true;
  }

  void __set_currencyNo(const std::string& val) {
    currencyNo = val;
    __isset.currencyNo = true;
  }

  void __set_openCloseFee(const double val) {
    openCloseFee = val;
    __isset.openCloseFee = true;
  }

  void __set_closeTodayFee(const double val) {
    closeTodayFee = val;
    __isset.closeTodayFee = true;
  }

  bool operator == (const TPositionEs9CommissionRate & rhs) const
  {
    if (__isset.calculateMode != rhs.__isset.calculateMode)
      return false;
    else if (__isset.calculateMode && !(calculateMode == rhs.calculateMode))
      return false;
    if (__isset.currencyGroupNo != rhs.__isset.currencyGroupNo)
      return false;
    else if (__isset.currencyGroupNo && !(currencyGroupNo == rhs.currencyGroupNo))
      return false;
    if (__isset.currencyNo != rhs.__isset.currencyNo)
      return false;
    else if (__isset.currencyNo && !(currencyNo == rhs.currencyNo))
      return false;
    if (__isset.openCloseFee != rhs.__isset.openCloseFee)
      return false;
    else if (__isset.openCloseFee && !(openCloseFee == rhs.openCloseFee))
      return false;
    if (__isset.closeTodayFee != rhs.__isset.closeTodayFee)
      return false;
    else if (__isset.closeTodayFee && !(closeTodayFee == rhs.closeTodayFee))
      return false;
    return true;
  }
  bool operator != (const TPositionEs9CommissionRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionEs9CommissionRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionEs9CommissionRate &a, TPositionEs9CommissionRate &b);

typedef struct _TPositionMarginRate__isset {
  _TPositionMarginRate__isset() : ctpMarginRate(false), es9MarginRate(false) {}
  bool ctpMarginRate;
  bool es9MarginRate;
} _TPositionMarginRate__isset;

class TPositionMarginRate {
 public:

  static const char* ascii_fingerprint; // = "6715E996770B12A02F96AB2650F8C4A0";
  static const uint8_t binary_fingerprint[16]; // = {0x67,0x15,0xE9,0x96,0x77,0x0B,0x12,0xA0,0x2F,0x96,0xAB,0x26,0x50,0xF8,0xC4,0xA0};

  TPositionMarginRate() {
  }

  virtual ~TPositionMarginRate() throw() {}

  TPositionCTPMarginRate ctpMarginRate;
  TPositionES9MarginRate es9MarginRate;

  _TPositionMarginRate__isset __isset;

  void __set_ctpMarginRate(const TPositionCTPMarginRate& val) {
    ctpMarginRate = val;
    __isset.ctpMarginRate = true;
  }

  void __set_es9MarginRate(const TPositionES9MarginRate& val) {
    es9MarginRate = val;
    __isset.es9MarginRate = true;
  }

  bool operator == (const TPositionMarginRate & rhs) const
  {
    if (__isset.ctpMarginRate != rhs.__isset.ctpMarginRate)
      return false;
    else if (__isset.ctpMarginRate && !(ctpMarginRate == rhs.ctpMarginRate))
      return false;
    if (__isset.es9MarginRate != rhs.__isset.es9MarginRate)
      return false;
    else if (__isset.es9MarginRate && !(es9MarginRate == rhs.es9MarginRate))
      return false;
    return true;
  }
  bool operator != (const TPositionMarginRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionMarginRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionMarginRate &a, TPositionMarginRate &b);

typedef struct _TPositionCommissionRate__isset {
  _TPositionCommissionRate__isset() : ctpCommissionRate(false), es9CommissionRate(false) {}
  bool ctpCommissionRate;
  bool es9CommissionRate;
} _TPositionCommissionRate__isset;

class TPositionCommissionRate {
 public:

  static const char* ascii_fingerprint; // = "DAE39580EBADE881F84C94B79AA70745";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xE3,0x95,0x80,0xEB,0xAD,0xE8,0x81,0xF8,0x4C,0x94,0xB7,0x9A,0xA7,0x07,0x45};

  TPositionCommissionRate() {
  }

  virtual ~TPositionCommissionRate() throw() {}

  TPositionCTPCommissionRate ctpCommissionRate;
  TPositionEs9CommissionRate es9CommissionRate;

  _TPositionCommissionRate__isset __isset;

  void __set_ctpCommissionRate(const TPositionCTPCommissionRate& val) {
    ctpCommissionRate = val;
    __isset.ctpCommissionRate = true;
  }

  void __set_es9CommissionRate(const TPositionEs9CommissionRate& val) {
    es9CommissionRate = val;
    __isset.es9CommissionRate = true;
  }

  bool operator == (const TPositionCommissionRate & rhs) const
  {
    if (__isset.ctpCommissionRate != rhs.__isset.ctpCommissionRate)
      return false;
    else if (__isset.ctpCommissionRate && !(ctpCommissionRate == rhs.ctpCommissionRate))
      return false;
    if (__isset.es9CommissionRate != rhs.__isset.es9CommissionRate)
      return false;
    else if (__isset.es9CommissionRate && !(es9CommissionRate == rhs.es9CommissionRate))
      return false;
    return true;
  }
  bool operator != (const TPositionCommissionRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCommissionRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCommissionRate &a, TPositionCommissionRate &b);

typedef struct _TPositionContractRate__isset {
  _TPositionContractRate__isset() : sledContractCode(false), marginRate(false), commissionRate(false) {}
  bool sledContractCode;
  bool marginRate;
  bool commissionRate;
} _TPositionContractRate__isset;

class TPositionContractRate {
 public:

  static const char* ascii_fingerprint; // = "BFE06721A184424419730A7257DF0482";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xE0,0x67,0x21,0xA1,0x84,0x42,0x44,0x19,0x73,0x0A,0x72,0x57,0xDF,0x04,0x82};

  TPositionContractRate() : sledContractCode() {
  }

  virtual ~TPositionContractRate() throw() {}

  std::string sledContractCode;
  TPositionMarginRate marginRate;
  TPositionCommissionRate commissionRate;

  _TPositionContractRate__isset __isset;

  void __set_sledContractCode(const std::string& val) {
    sledContractCode = val;
    __isset.sledContractCode = true;
  }

  void __set_marginRate(const TPositionMarginRate& val) {
    marginRate = val;
    __isset.marginRate = true;
  }

  void __set_commissionRate(const TPositionCommissionRate& val) {
    commissionRate = val;
    __isset.commissionRate = true;
  }

  bool operator == (const TPositionContractRate & rhs) const
  {
    if (__isset.sledContractCode != rhs.__isset.sledContractCode)
      return false;
    else if (__isset.sledContractCode && !(sledContractCode == rhs.sledContractCode))
      return false;
    if (__isset.marginRate != rhs.__isset.marginRate)
      return false;
    else if (__isset.marginRate && !(marginRate == rhs.marginRate))
      return false;
    if (__isset.commissionRate != rhs.__isset.commissionRate)
      return false;
    else if (__isset.commissionRate && !(commissionRate == rhs.commissionRate))
      return false;
    return true;
  }
  bool operator != (const TPositionContractRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionContractRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionContractRate &a, TPositionContractRate &b);

typedef struct _TPositionCommodityRate__isset {
  _TPositionCommodityRate__isset() : sledCommodityId(false), sledCommodityType(false), sledCommodityCode(false), sledExchangeMic(false), marginRate(false), commissionRate(false), contractRates(false) {}
  bool sledCommodityId;
  bool sledCommodityType;
  bool sledCommodityCode;
  bool sledExchangeMic;
  bool marginRate;
  bool commissionRate;
  bool contractRates;
} _TPositionCommodityRate__isset;

class TPositionCommodityRate {
 public:

  static const char* ascii_fingerprint; // = "135E458B11A98AFD679FB1847BB14DEB";
  static const uint8_t binary_fingerprint[16]; // = {0x13,0x5E,0x45,0x8B,0x11,0xA9,0x8A,0xFD,0x67,0x9F,0xB1,0x84,0x7B,0xB1,0x4D,0xEB};

  TPositionCommodityRate() : sledCommodityId(0), sledCommodityType(0), sledCommodityCode(), sledExchangeMic() {
  }

  virtual ~TPositionCommodityRate() throw() {}

  int64_t sledCommodityId;
  int16_t sledCommodityType;
  std::string sledCommodityCode;
  std::string sledExchangeMic;
  TPositionMarginRate marginRate;
  TPositionCommissionRate commissionRate;
  std::map<std::string, TPositionContractRate>  contractRates;

  _TPositionCommodityRate__isset __isset;

  void __set_sledCommodityId(const int64_t val) {
    sledCommodityId = val;
    __isset.sledCommodityId = true;
  }

  void __set_sledCommodityType(const int16_t val) {
    sledCommodityType = val;
    __isset.sledCommodityType = true;
  }

  void __set_sledCommodityCode(const std::string& val) {
    sledCommodityCode = val;
    __isset.sledCommodityCode = true;
  }

  void __set_sledExchangeMic(const std::string& val) {
    sledExchangeMic = val;
    __isset.sledExchangeMic = true;
  }

  void __set_marginRate(const TPositionMarginRate& val) {
    marginRate = val;
    __isset.marginRate = true;
  }

  void __set_commissionRate(const TPositionCommissionRate& val) {
    commissionRate = val;
    __isset.commissionRate = true;
  }

  void __set_contractRates(const std::map<std::string, TPositionContractRate> & val) {
    contractRates = val;
    __isset.contractRates = true;
  }

  bool operator == (const TPositionCommodityRate & rhs) const
  {
    if (__isset.sledCommodityId != rhs.__isset.sledCommodityId)
      return false;
    else if (__isset.sledCommodityId && !(sledCommodityId == rhs.sledCommodityId))
      return false;
    if (__isset.sledCommodityType != rhs.__isset.sledCommodityType)
      return false;
    else if (__isset.sledCommodityType && !(sledCommodityType == rhs.sledCommodityType))
      return false;
    if (__isset.sledCommodityCode != rhs.__isset.sledCommodityCode)
      return false;
    else if (__isset.sledCommodityCode && !(sledCommodityCode == rhs.sledCommodityCode))
      return false;
    if (__isset.sledExchangeMic != rhs.__isset.sledExchangeMic)
      return false;
    else if (__isset.sledExchangeMic && !(sledExchangeMic == rhs.sledExchangeMic))
      return false;
    if (__isset.marginRate != rhs.__isset.marginRate)
      return false;
    else if (__isset.marginRate && !(marginRate == rhs.marginRate))
      return false;
    if (__isset.commissionRate != rhs.__isset.commissionRate)
      return false;
    else if (__isset.commissionRate && !(commissionRate == rhs.commissionRate))
      return false;
    if (__isset.contractRates != rhs.__isset.contractRates)
      return false;
    else if (__isset.contractRates && !(contractRates == rhs.contractRates))
      return false;
    return true;
  }
  bool operator != (const TPositionCommodityRate &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionCommodityRate & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionCommodityRate &a, TPositionCommodityRate &b);

typedef struct _TPositionRateDetails__isset {
  _TPositionRateDetails__isset() : tradeAccountId(false), techPlatform(false), commodityRates(false) {}
  bool tradeAccountId;
  bool techPlatform;
  bool commodityRates;
} _TPositionRateDetails__isset;

class TPositionRateDetails {
 public:

  static const char* ascii_fingerprint; // = "3CACB250DFD72B11C1F78B0157BBA590";
  static const uint8_t binary_fingerprint[16]; // = {0x3C,0xAC,0xB2,0x50,0xDF,0xD7,0x2B,0x11,0xC1,0xF7,0x8B,0x01,0x57,0xBB,0xA5,0x90};

  TPositionRateDetails() : tradeAccountId(0), techPlatform(( ::xueqiao::trade::hosting::BrokerTechPlatform::type)0) {
  }

  virtual ~TPositionRateDetails() throw() {}

  int64_t tradeAccountId;
   ::xueqiao::trade::hosting::BrokerTechPlatform::type techPlatform;
  std::vector<TPositionCommodityRate>  commodityRates;

  _TPositionRateDetails__isset __isset;

  void __set_tradeAccountId(const int64_t val) {
    tradeAccountId = val;
    __isset.tradeAccountId = true;
  }

  void __set_techPlatform(const  ::xueqiao::trade::hosting::BrokerTechPlatform::type val) {
    techPlatform = val;
    __isset.techPlatform = true;
  }

  void __set_commodityRates(const std::vector<TPositionCommodityRate> & val) {
    commodityRates = val;
    __isset.commodityRates = true;
  }

  bool operator == (const TPositionRateDetails & rhs) const
  {
    if (__isset.tradeAccountId != rhs.__isset.tradeAccountId)
      return false;
    else if (__isset.tradeAccountId && !(tradeAccountId == rhs.tradeAccountId))
      return false;
    if (__isset.techPlatform != rhs.__isset.techPlatform)
      return false;
    else if (__isset.techPlatform && !(techPlatform == rhs.techPlatform))
      return false;
    if (__isset.commodityRates != rhs.__isset.commodityRates)
      return false;
    else if (__isset.commodityRates && !(commodityRates == rhs.commodityRates))
      return false;
    return true;
  }
  bool operator != (const TPositionRateDetails &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TPositionRateDetails & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(TPositionRateDetails &a, TPositionRateDetails &b);

}}}}} // namespace

#endif
