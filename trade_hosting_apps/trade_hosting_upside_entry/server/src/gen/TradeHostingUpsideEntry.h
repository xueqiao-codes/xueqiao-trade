/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TradeHostingUpsideEntry_H
#define TradeHostingUpsideEntry_H

#include <thrift/TDispatchProcessor.h>
#include "trade_hosting_upside_entry_types.h"

namespace xueqiao { namespace trade { namespace hosting { namespace upside { namespace entry {

class TradeHostingUpsideEntryIf {
 public:
  virtual ~TradeHostingUpsideEntryIf() {}
  virtual void getSubProcessInfos(std::vector<TSubProcessInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void restartSubProcess(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t trade_account_id) = 0;
  virtual void allocOrderRef( ::xueqiao::trade::hosting::HostingExecOrderRef& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void orderInsert(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& insertOrder) = 0;
  virtual void orderDelete(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& deleteOrder) = 0;
  virtual void syncOrderState(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder) = 0;
  virtual void syncOrderTrades(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder) = 0;
  virtual void syncOrderStateBatch(const  ::platform::comm::PlatformArgs& platformArgs, const TSyncOrderStateBatchReq& batchReq) = 0;
  virtual int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void dumpPositionSummaries(std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getFunds(std::vector<TFund> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getSettlementInfo(TSettlementInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs, const std::string& settlementDate) = 0;
  virtual void getNetPositionSummaries(std::vector<TNetPositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getPositionInfos(std::vector<TPositionInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
  virtual void getPositionRateDetails(TPositionRateDetails& _return, const  ::platform::comm::PlatformArgs& platformArgs) = 0;
};

class TradeHostingUpsideEntryIfFactory {
 public:
  typedef TradeHostingUpsideEntryIf Handler;

  virtual ~TradeHostingUpsideEntryIfFactory() {}

  virtual TradeHostingUpsideEntryIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TradeHostingUpsideEntryIf* /* handler */) = 0;
};

class TradeHostingUpsideEntryIfSingletonFactory : virtual public TradeHostingUpsideEntryIfFactory {
 public:
  TradeHostingUpsideEntryIfSingletonFactory(const boost::shared_ptr<TradeHostingUpsideEntryIf>& iface) : iface_(iface) {}
  virtual ~TradeHostingUpsideEntryIfSingletonFactory() {}

  virtual TradeHostingUpsideEntryIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TradeHostingUpsideEntryIf* /* handler */) {}

 protected:
  boost::shared_ptr<TradeHostingUpsideEntryIf> iface_;
};

class TradeHostingUpsideEntryNull : virtual public TradeHostingUpsideEntryIf {
 public:
  virtual ~TradeHostingUpsideEntryNull() {}
  void getSubProcessInfos(std::vector<TSubProcessInfo> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void restartSubProcess(const  ::platform::comm::PlatformArgs& /* platformArgs */, const int64_t /* trade_account_id */) {
    return;
  }
  void allocOrderRef( ::xueqiao::trade::hosting::HostingExecOrderRef& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void orderInsert(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrder& /* insertOrder */) {
    return;
  }
  void orderDelete(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrder& /* deleteOrder */) {
    return;
  }
  void syncOrderState(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrder& /* syncOrder */) {
    return;
  }
  void syncOrderTrades(const  ::platform::comm::PlatformArgs& /* platformArgs */, const  ::xueqiao::trade::hosting::HostingExecOrder& /* syncOrder */) {
    return;
  }
  void syncOrderStateBatch(const  ::platform::comm::PlatformArgs& /* platformArgs */, const TSyncOrderStateBatchReq& /* batchReq */) {
    return;
  }
  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    int64_t _return = 0;
    return _return;
  }
  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void dumpPositionSummaries(std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getFunds(std::vector<TFund> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getSettlementInfo(TSettlementInfo& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */, const std::string& /* settlementDate */) {
    return;
  }
  void getNetPositionSummaries(std::vector<TNetPositionSummary> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getPositionInfos(std::vector<TPositionInfo> & /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
  void getPositionRateDetails(TPositionRateDetails& /* _return */, const  ::platform::comm::PlatformArgs& /* platformArgs */) {
    return;
  }
};

typedef struct _TradeHostingUpsideEntry_getSubProcessInfos_args__isset {
  _TradeHostingUpsideEntry_getSubProcessInfos_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getSubProcessInfos_args__isset;

class TradeHostingUpsideEntry_getSubProcessInfos_args {
 public:

  TradeHostingUpsideEntry_getSubProcessInfos_args() {
  }

  virtual ~TradeHostingUpsideEntry_getSubProcessInfos_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getSubProcessInfos_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getSubProcessInfos_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getSubProcessInfos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getSubProcessInfos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getSubProcessInfos_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getSubProcessInfos_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getSubProcessInfos_result__isset {
  _TradeHostingUpsideEntry_getSubProcessInfos_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getSubProcessInfos_result__isset;

class TradeHostingUpsideEntry_getSubProcessInfos_result {
 public:

  TradeHostingUpsideEntry_getSubProcessInfos_result() {
  }

  virtual ~TradeHostingUpsideEntry_getSubProcessInfos_result() throw() {}

  std::vector<TSubProcessInfo>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getSubProcessInfos_result__isset __isset;

  void __set_success(const std::vector<TSubProcessInfo> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getSubProcessInfos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getSubProcessInfos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getSubProcessInfos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getSubProcessInfos_presult__isset {
  _TradeHostingUpsideEntry_getSubProcessInfos_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getSubProcessInfos_presult__isset;

class TradeHostingUpsideEntry_getSubProcessInfos_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getSubProcessInfos_presult() throw() {}

  std::vector<TSubProcessInfo> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getSubProcessInfos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_restartSubProcess_args__isset {
  _TradeHostingUpsideEntry_restartSubProcess_args__isset() : platformArgs(false), trade_account_id(false) {}
  bool platformArgs;
  bool trade_account_id;
} _TradeHostingUpsideEntry_restartSubProcess_args__isset;

class TradeHostingUpsideEntry_restartSubProcess_args {
 public:

  TradeHostingUpsideEntry_restartSubProcess_args() : trade_account_id(0) {
  }

  virtual ~TradeHostingUpsideEntry_restartSubProcess_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  int64_t trade_account_id;

  _TradeHostingUpsideEntry_restartSubProcess_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_trade_account_id(const int64_t val) {
    trade_account_id = val;
  }

  bool operator == (const TradeHostingUpsideEntry_restartSubProcess_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(trade_account_id == rhs.trade_account_id))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_restartSubProcess_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_restartSubProcess_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_restartSubProcess_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_restartSubProcess_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const int64_t* trade_account_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_restartSubProcess_result__isset {
  _TradeHostingUpsideEntry_restartSubProcess_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_restartSubProcess_result__isset;

class TradeHostingUpsideEntry_restartSubProcess_result {
 public:

  TradeHostingUpsideEntry_restartSubProcess_result() {
  }

  virtual ~TradeHostingUpsideEntry_restartSubProcess_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_restartSubProcess_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_restartSubProcess_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_restartSubProcess_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_restartSubProcess_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_restartSubProcess_presult__isset {
  _TradeHostingUpsideEntry_restartSubProcess_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_restartSubProcess_presult__isset;

class TradeHostingUpsideEntry_restartSubProcess_presult {
 public:


  virtual ~TradeHostingUpsideEntry_restartSubProcess_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_restartSubProcess_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_allocOrderRef_args__isset {
  _TradeHostingUpsideEntry_allocOrderRef_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_allocOrderRef_args__isset;

class TradeHostingUpsideEntry_allocOrderRef_args {
 public:

  TradeHostingUpsideEntry_allocOrderRef_args() {
  }

  virtual ~TradeHostingUpsideEntry_allocOrderRef_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_allocOrderRef_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_allocOrderRef_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_allocOrderRef_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_allocOrderRef_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_allocOrderRef_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_allocOrderRef_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_allocOrderRef_result__isset {
  _TradeHostingUpsideEntry_allocOrderRef_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_allocOrderRef_result__isset;

class TradeHostingUpsideEntry_allocOrderRef_result {
 public:

  TradeHostingUpsideEntry_allocOrderRef_result() {
  }

  virtual ~TradeHostingUpsideEntry_allocOrderRef_result() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrderRef success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_allocOrderRef_result__isset __isset;

  void __set_success(const  ::xueqiao::trade::hosting::HostingExecOrderRef& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_allocOrderRef_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_allocOrderRef_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_allocOrderRef_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_allocOrderRef_presult__isset {
  _TradeHostingUpsideEntry_allocOrderRef_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_allocOrderRef_presult__isset;

class TradeHostingUpsideEntry_allocOrderRef_presult {
 public:


  virtual ~TradeHostingUpsideEntry_allocOrderRef_presult() throw() {}

   ::xueqiao::trade::hosting::HostingExecOrderRef* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_allocOrderRef_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_orderInsert_args__isset {
  _TradeHostingUpsideEntry_orderInsert_args__isset() : platformArgs(false), insertOrder(false) {}
  bool platformArgs;
  bool insertOrder;
} _TradeHostingUpsideEntry_orderInsert_args__isset;

class TradeHostingUpsideEntry_orderInsert_args {
 public:

  TradeHostingUpsideEntry_orderInsert_args() {
  }

  virtual ~TradeHostingUpsideEntry_orderInsert_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrder insertOrder;

  _TradeHostingUpsideEntry_orderInsert_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_insertOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    insertOrder = val;
  }

  bool operator == (const TradeHostingUpsideEntry_orderInsert_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(insertOrder == rhs.insertOrder))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_orderInsert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_orderInsert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_orderInsert_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_orderInsert_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrder* insertOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_orderInsert_result__isset {
  _TradeHostingUpsideEntry_orderInsert_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_orderInsert_result__isset;

class TradeHostingUpsideEntry_orderInsert_result {
 public:

  TradeHostingUpsideEntry_orderInsert_result() {
  }

  virtual ~TradeHostingUpsideEntry_orderInsert_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_orderInsert_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_orderInsert_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_orderInsert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_orderInsert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_orderInsert_presult__isset {
  _TradeHostingUpsideEntry_orderInsert_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_orderInsert_presult__isset;

class TradeHostingUpsideEntry_orderInsert_presult {
 public:


  virtual ~TradeHostingUpsideEntry_orderInsert_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_orderInsert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_orderDelete_args__isset {
  _TradeHostingUpsideEntry_orderDelete_args__isset() : platformArgs(false), deleteOrder(false) {}
  bool platformArgs;
  bool deleteOrder;
} _TradeHostingUpsideEntry_orderDelete_args__isset;

class TradeHostingUpsideEntry_orderDelete_args {
 public:

  TradeHostingUpsideEntry_orderDelete_args() {
  }

  virtual ~TradeHostingUpsideEntry_orderDelete_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrder deleteOrder;

  _TradeHostingUpsideEntry_orderDelete_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_deleteOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    deleteOrder = val;
  }

  bool operator == (const TradeHostingUpsideEntry_orderDelete_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(deleteOrder == rhs.deleteOrder))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_orderDelete_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_orderDelete_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_orderDelete_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_orderDelete_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrder* deleteOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_orderDelete_result__isset {
  _TradeHostingUpsideEntry_orderDelete_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_orderDelete_result__isset;

class TradeHostingUpsideEntry_orderDelete_result {
 public:

  TradeHostingUpsideEntry_orderDelete_result() {
  }

  virtual ~TradeHostingUpsideEntry_orderDelete_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_orderDelete_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_orderDelete_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_orderDelete_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_orderDelete_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_orderDelete_presult__isset {
  _TradeHostingUpsideEntry_orderDelete_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_orderDelete_presult__isset;

class TradeHostingUpsideEntry_orderDelete_presult {
 public:


  virtual ~TradeHostingUpsideEntry_orderDelete_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_orderDelete_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_syncOrderState_args__isset {
  _TradeHostingUpsideEntry_syncOrderState_args__isset() : platformArgs(false), syncOrder(false) {}
  bool platformArgs;
  bool syncOrder;
} _TradeHostingUpsideEntry_syncOrderState_args__isset;

class TradeHostingUpsideEntry_syncOrderState_args {
 public:

  TradeHostingUpsideEntry_syncOrderState_args() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderState_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrder syncOrder;

  _TradeHostingUpsideEntry_syncOrderState_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_syncOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    syncOrder = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderState_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(syncOrder == rhs.syncOrder))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderState_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderState_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_syncOrderState_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderState_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrder* syncOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderState_result__isset {
  _TradeHostingUpsideEntry_syncOrderState_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderState_result__isset;

class TradeHostingUpsideEntry_syncOrderState_result {
 public:

  TradeHostingUpsideEntry_syncOrderState_result() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderState_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderState_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderState_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderState_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderState_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderState_presult__isset {
  _TradeHostingUpsideEntry_syncOrderState_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderState_presult__isset;

class TradeHostingUpsideEntry_syncOrderState_presult {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderState_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderState_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_syncOrderTrades_args__isset {
  _TradeHostingUpsideEntry_syncOrderTrades_args__isset() : platformArgs(false), syncOrder(false) {}
  bool platformArgs;
  bool syncOrder;
} _TradeHostingUpsideEntry_syncOrderTrades_args__isset;

class TradeHostingUpsideEntry_syncOrderTrades_args {
 public:

  TradeHostingUpsideEntry_syncOrderTrades_args() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderTrades_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
   ::xueqiao::trade::hosting::HostingExecOrder syncOrder;

  _TradeHostingUpsideEntry_syncOrderTrades_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_syncOrder(const  ::xueqiao::trade::hosting::HostingExecOrder& val) {
    syncOrder = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderTrades_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(syncOrder == rhs.syncOrder))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderTrades_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderTrades_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_syncOrderTrades_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderTrades_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const  ::xueqiao::trade::hosting::HostingExecOrder* syncOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderTrades_result__isset {
  _TradeHostingUpsideEntry_syncOrderTrades_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderTrades_result__isset;

class TradeHostingUpsideEntry_syncOrderTrades_result {
 public:

  TradeHostingUpsideEntry_syncOrderTrades_result() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderTrades_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderTrades_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderTrades_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderTrades_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderTrades_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderTrades_presult__isset {
  _TradeHostingUpsideEntry_syncOrderTrades_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderTrades_presult__isset;

class TradeHostingUpsideEntry_syncOrderTrades_presult {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderTrades_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderTrades_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_syncOrderStateBatch_args__isset {
  _TradeHostingUpsideEntry_syncOrderStateBatch_args__isset() : platformArgs(false), batchReq(false) {}
  bool platformArgs;
  bool batchReq;
} _TradeHostingUpsideEntry_syncOrderStateBatch_args__isset;

class TradeHostingUpsideEntry_syncOrderStateBatch_args {
 public:

  TradeHostingUpsideEntry_syncOrderStateBatch_args() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderStateBatch_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  TSyncOrderStateBatchReq batchReq;

  _TradeHostingUpsideEntry_syncOrderStateBatch_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_batchReq(const TSyncOrderStateBatchReq& val) {
    batchReq = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderStateBatch_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(batchReq == rhs.batchReq))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderStateBatch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderStateBatch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_syncOrderStateBatch_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderStateBatch_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const TSyncOrderStateBatchReq* batchReq;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderStateBatch_result__isset {
  _TradeHostingUpsideEntry_syncOrderStateBatch_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderStateBatch_result__isset;

class TradeHostingUpsideEntry_syncOrderStateBatch_result {
 public:

  TradeHostingUpsideEntry_syncOrderStateBatch_result() {
  }

  virtual ~TradeHostingUpsideEntry_syncOrderStateBatch_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderStateBatch_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_syncOrderStateBatch_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_syncOrderStateBatch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_syncOrderStateBatch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_syncOrderStateBatch_presult__isset {
  _TradeHostingUpsideEntry_syncOrderStateBatch_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_syncOrderStateBatch_presult__isset;

class TradeHostingUpsideEntry_syncOrderStateBatch_presult {
 public:


  virtual ~TradeHostingUpsideEntry_syncOrderStateBatch_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_syncOrderStateBatch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args__isset {
  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args__isset;

class TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args {
 public:

  TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args() {
  }

  virtual ~TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result__isset {
  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result__isset;

class TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result {
 public:

  TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result() : success(0) {
  }

  virtual ~TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result() throw() {}

  int64_t success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult__isset {
  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult__isset;

class TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult() throw() {}

  int64_t* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getLastUpsideEffectiveTimestamp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_sendUpsideHeartBeat_args__isset {
  _TradeHostingUpsideEntry_sendUpsideHeartBeat_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_sendUpsideHeartBeat_args__isset;

class TradeHostingUpsideEntry_sendUpsideHeartBeat_args {
 public:

  TradeHostingUpsideEntry_sendUpsideHeartBeat_args() {
  }

  virtual ~TradeHostingUpsideEntry_sendUpsideHeartBeat_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_sendUpsideHeartBeat_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_sendUpsideHeartBeat_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_sendUpsideHeartBeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_sendUpsideHeartBeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_sendUpsideHeartBeat_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_sendUpsideHeartBeat_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_sendUpsideHeartBeat_result__isset {
  _TradeHostingUpsideEntry_sendUpsideHeartBeat_result__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_sendUpsideHeartBeat_result__isset;

class TradeHostingUpsideEntry_sendUpsideHeartBeat_result {
 public:

  TradeHostingUpsideEntry_sendUpsideHeartBeat_result() {
  }

  virtual ~TradeHostingUpsideEntry_sendUpsideHeartBeat_result() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_sendUpsideHeartBeat_result__isset __isset;

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_sendUpsideHeartBeat_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_sendUpsideHeartBeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_sendUpsideHeartBeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_sendUpsideHeartBeat_presult__isset {
  _TradeHostingUpsideEntry_sendUpsideHeartBeat_presult__isset() : err(false) {}
  bool err;
} _TradeHostingUpsideEntry_sendUpsideHeartBeat_presult__isset;

class TradeHostingUpsideEntry_sendUpsideHeartBeat_presult {
 public:


  virtual ~TradeHostingUpsideEntry_sendUpsideHeartBeat_presult() throw() {}

   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_sendUpsideHeartBeat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_dumpPositionSummaries_args__isset {
  _TradeHostingUpsideEntry_dumpPositionSummaries_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_dumpPositionSummaries_args__isset;

class TradeHostingUpsideEntry_dumpPositionSummaries_args {
 public:

  TradeHostingUpsideEntry_dumpPositionSummaries_args() {
  }

  virtual ~TradeHostingUpsideEntry_dumpPositionSummaries_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_dumpPositionSummaries_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_dumpPositionSummaries_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_dumpPositionSummaries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_dumpPositionSummaries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_dumpPositionSummaries_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_dumpPositionSummaries_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_dumpPositionSummaries_result__isset {
  _TradeHostingUpsideEntry_dumpPositionSummaries_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_dumpPositionSummaries_result__isset;

class TradeHostingUpsideEntry_dumpPositionSummaries_result {
 public:

  TradeHostingUpsideEntry_dumpPositionSummaries_result() {
  }

  virtual ~TradeHostingUpsideEntry_dumpPositionSummaries_result() throw() {}

  std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_dumpPositionSummaries_result__isset __isset;

  void __set_success(const std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_dumpPositionSummaries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_dumpPositionSummaries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_dumpPositionSummaries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_dumpPositionSummaries_presult__isset {
  _TradeHostingUpsideEntry_dumpPositionSummaries_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_dumpPositionSummaries_presult__isset;

class TradeHostingUpsideEntry_dumpPositionSummaries_presult {
 public:


  virtual ~TradeHostingUpsideEntry_dumpPositionSummaries_presult() throw() {}

  std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_dumpPositionSummaries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getFunds_args__isset {
  _TradeHostingUpsideEntry_getFunds_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getFunds_args__isset;

class TradeHostingUpsideEntry_getFunds_args {
 public:

  TradeHostingUpsideEntry_getFunds_args() {
  }

  virtual ~TradeHostingUpsideEntry_getFunds_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getFunds_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getFunds_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getFunds_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getFunds_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getFunds_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getFunds_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getFunds_result__isset {
  _TradeHostingUpsideEntry_getFunds_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getFunds_result__isset;

class TradeHostingUpsideEntry_getFunds_result {
 public:

  TradeHostingUpsideEntry_getFunds_result() {
  }

  virtual ~TradeHostingUpsideEntry_getFunds_result() throw() {}

  std::vector<TFund>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getFunds_result__isset __isset;

  void __set_success(const std::vector<TFund> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getFunds_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getFunds_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getFunds_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getFunds_presult__isset {
  _TradeHostingUpsideEntry_getFunds_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getFunds_presult__isset;

class TradeHostingUpsideEntry_getFunds_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getFunds_presult() throw() {}

  std::vector<TFund> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getFunds_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getSettlementInfo_args__isset {
  _TradeHostingUpsideEntry_getSettlementInfo_args__isset() : platformArgs(false), settlementDate(false) {}
  bool platformArgs;
  bool settlementDate;
} _TradeHostingUpsideEntry_getSettlementInfo_args__isset;

class TradeHostingUpsideEntry_getSettlementInfo_args {
 public:

  TradeHostingUpsideEntry_getSettlementInfo_args() : settlementDate() {
  }

  virtual ~TradeHostingUpsideEntry_getSettlementInfo_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;
  std::string settlementDate;

  _TradeHostingUpsideEntry_getSettlementInfo_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  void __set_settlementDate(const std::string& val) {
    settlementDate = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getSettlementInfo_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    if (!(settlementDate == rhs.settlementDate))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getSettlementInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getSettlementInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getSettlementInfo_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getSettlementInfo_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;
  const std::string* settlementDate;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getSettlementInfo_result__isset {
  _TradeHostingUpsideEntry_getSettlementInfo_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getSettlementInfo_result__isset;

class TradeHostingUpsideEntry_getSettlementInfo_result {
 public:

  TradeHostingUpsideEntry_getSettlementInfo_result() {
  }

  virtual ~TradeHostingUpsideEntry_getSettlementInfo_result() throw() {}

  TSettlementInfo success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getSettlementInfo_result__isset __isset;

  void __set_success(const TSettlementInfo& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getSettlementInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getSettlementInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getSettlementInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getSettlementInfo_presult__isset {
  _TradeHostingUpsideEntry_getSettlementInfo_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getSettlementInfo_presult__isset;

class TradeHostingUpsideEntry_getSettlementInfo_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getSettlementInfo_presult() throw() {}

  TSettlementInfo* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getSettlementInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getNetPositionSummaries_args__isset {
  _TradeHostingUpsideEntry_getNetPositionSummaries_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getNetPositionSummaries_args__isset;

class TradeHostingUpsideEntry_getNetPositionSummaries_args {
 public:

  TradeHostingUpsideEntry_getNetPositionSummaries_args() {
  }

  virtual ~TradeHostingUpsideEntry_getNetPositionSummaries_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getNetPositionSummaries_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getNetPositionSummaries_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getNetPositionSummaries_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getNetPositionSummaries_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getNetPositionSummaries_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getNetPositionSummaries_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getNetPositionSummaries_result__isset {
  _TradeHostingUpsideEntry_getNetPositionSummaries_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getNetPositionSummaries_result__isset;

class TradeHostingUpsideEntry_getNetPositionSummaries_result {
 public:

  TradeHostingUpsideEntry_getNetPositionSummaries_result() {
  }

  virtual ~TradeHostingUpsideEntry_getNetPositionSummaries_result() throw() {}

  std::vector<TNetPositionSummary>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getNetPositionSummaries_result__isset __isset;

  void __set_success(const std::vector<TNetPositionSummary> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getNetPositionSummaries_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getNetPositionSummaries_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getNetPositionSummaries_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getNetPositionSummaries_presult__isset {
  _TradeHostingUpsideEntry_getNetPositionSummaries_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getNetPositionSummaries_presult__isset;

class TradeHostingUpsideEntry_getNetPositionSummaries_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getNetPositionSummaries_presult() throw() {}

  std::vector<TNetPositionSummary> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getNetPositionSummaries_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getPositionInfos_args__isset {
  _TradeHostingUpsideEntry_getPositionInfos_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getPositionInfos_args__isset;

class TradeHostingUpsideEntry_getPositionInfos_args {
 public:

  TradeHostingUpsideEntry_getPositionInfos_args() {
  }

  virtual ~TradeHostingUpsideEntry_getPositionInfos_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getPositionInfos_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getPositionInfos_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getPositionInfos_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getPositionInfos_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getPositionInfos_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getPositionInfos_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getPositionInfos_result__isset {
  _TradeHostingUpsideEntry_getPositionInfos_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getPositionInfos_result__isset;

class TradeHostingUpsideEntry_getPositionInfos_result {
 public:

  TradeHostingUpsideEntry_getPositionInfos_result() {
  }

  virtual ~TradeHostingUpsideEntry_getPositionInfos_result() throw() {}

  std::vector<TPositionInfo>  success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getPositionInfos_result__isset __isset;

  void __set_success(const std::vector<TPositionInfo> & val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getPositionInfos_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getPositionInfos_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getPositionInfos_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getPositionInfos_presult__isset {
  _TradeHostingUpsideEntry_getPositionInfos_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getPositionInfos_presult__isset;

class TradeHostingUpsideEntry_getPositionInfos_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getPositionInfos_presult() throw() {}

  std::vector<TPositionInfo> * success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getPositionInfos_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TradeHostingUpsideEntry_getPositionRateDetails_args__isset {
  _TradeHostingUpsideEntry_getPositionRateDetails_args__isset() : platformArgs(false) {}
  bool platformArgs;
} _TradeHostingUpsideEntry_getPositionRateDetails_args__isset;

class TradeHostingUpsideEntry_getPositionRateDetails_args {
 public:

  TradeHostingUpsideEntry_getPositionRateDetails_args() {
  }

  virtual ~TradeHostingUpsideEntry_getPositionRateDetails_args() throw() {}

   ::platform::comm::PlatformArgs platformArgs;

  _TradeHostingUpsideEntry_getPositionRateDetails_args__isset __isset;

  void __set_platformArgs(const  ::platform::comm::PlatformArgs& val) {
    platformArgs = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getPositionRateDetails_args & rhs) const
  {
    if (!(platformArgs == rhs.platformArgs))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getPositionRateDetails_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getPositionRateDetails_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TradeHostingUpsideEntry_getPositionRateDetails_pargs {
 public:


  virtual ~TradeHostingUpsideEntry_getPositionRateDetails_pargs() throw() {}

  const  ::platform::comm::PlatformArgs* platformArgs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getPositionRateDetails_result__isset {
  _TradeHostingUpsideEntry_getPositionRateDetails_result__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getPositionRateDetails_result__isset;

class TradeHostingUpsideEntry_getPositionRateDetails_result {
 public:

  TradeHostingUpsideEntry_getPositionRateDetails_result() {
  }

  virtual ~TradeHostingUpsideEntry_getPositionRateDetails_result() throw() {}

  TPositionRateDetails success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getPositionRateDetails_result__isset __isset;

  void __set_success(const TPositionRateDetails& val) {
    success = val;
  }

  void __set_err(const  ::platform::comm::ErrorInfo& val) {
    err = val;
  }

  bool operator == (const TradeHostingUpsideEntry_getPositionRateDetails_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const TradeHostingUpsideEntry_getPositionRateDetails_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TradeHostingUpsideEntry_getPositionRateDetails_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TradeHostingUpsideEntry_getPositionRateDetails_presult__isset {
  _TradeHostingUpsideEntry_getPositionRateDetails_presult__isset() : success(false), err(false) {}
  bool success;
  bool err;
} _TradeHostingUpsideEntry_getPositionRateDetails_presult__isset;

class TradeHostingUpsideEntry_getPositionRateDetails_presult {
 public:


  virtual ~TradeHostingUpsideEntry_getPositionRateDetails_presult() throw() {}

  TPositionRateDetails* success;
   ::platform::comm::ErrorInfo err;

  _TradeHostingUpsideEntry_getPositionRateDetails_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TradeHostingUpsideEntryClient : virtual public TradeHostingUpsideEntryIf {
 public:
  TradeHostingUpsideEntryClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  TradeHostingUpsideEntryClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getSubProcessInfos(std::vector<TSubProcessInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getSubProcessInfos(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getSubProcessInfos(std::vector<TSubProcessInfo> & _return);
  void restartSubProcess(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t trade_account_id);
  void send_restartSubProcess(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t trade_account_id);
  void recv_restartSubProcess();
  void allocOrderRef( ::xueqiao::trade::hosting::HostingExecOrderRef& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_allocOrderRef(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_allocOrderRef( ::xueqiao::trade::hosting::HostingExecOrderRef& _return);
  void orderInsert(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& insertOrder);
  void send_orderInsert(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& insertOrder);
  void recv_orderInsert();
  void orderDelete(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& deleteOrder);
  void send_orderDelete(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& deleteOrder);
  void recv_orderDelete();
  void syncOrderState(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder);
  void send_syncOrderState(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder);
  void recv_syncOrderState();
  void syncOrderTrades(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder);
  void send_syncOrderTrades(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder);
  void recv_syncOrderTrades();
  void syncOrderStateBatch(const  ::platform::comm::PlatformArgs& platformArgs, const TSyncOrderStateBatchReq& batchReq);
  void send_syncOrderStateBatch(const  ::platform::comm::PlatformArgs& platformArgs, const TSyncOrderStateBatchReq& batchReq);
  void recv_syncOrderStateBatch();
  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs);
  int64_t recv_getLastUpsideEffectiveTimestamp();
  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs);
  void send_sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_sendUpsideHeartBeat();
  void dumpPositionSummaries(std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_dumpPositionSummaries(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_dumpPositionSummaries(std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & _return);
  void getFunds(std::vector<TFund> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getFunds(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getFunds(std::vector<TFund> & _return);
  void getSettlementInfo(TSettlementInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs, const std::string& settlementDate);
  void send_getSettlementInfo(const  ::platform::comm::PlatformArgs& platformArgs, const std::string& settlementDate);
  void recv_getSettlementInfo(TSettlementInfo& _return);
  void getNetPositionSummaries(std::vector<TNetPositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getNetPositionSummaries(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getNetPositionSummaries(std::vector<TNetPositionSummary> & _return);
  void getPositionInfos(std::vector<TPositionInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getPositionInfos(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getPositionInfos(std::vector<TPositionInfo> & _return);
  void getPositionRateDetails(TPositionRateDetails& _return, const  ::platform::comm::PlatformArgs& platformArgs);
  void send_getPositionRateDetails(const  ::platform::comm::PlatformArgs& platformArgs);
  void recv_getPositionRateDetails(TPositionRateDetails& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TradeHostingUpsideEntryProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TradeHostingUpsideEntryIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TradeHostingUpsideEntryProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getSubProcessInfos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_restartSubProcess(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_allocOrderRef(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_orderInsert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_orderDelete(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncOrderState(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncOrderTrades(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_syncOrderStateBatch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLastUpsideEffectiveTimestamp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendUpsideHeartBeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dumpPositionSummaries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFunds(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSettlementInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNetPositionSummaries(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPositionInfos(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getPositionRateDetails(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TradeHostingUpsideEntryProcessor(boost::shared_ptr<TradeHostingUpsideEntryIf> iface) :
    iface_(iface) {
    processMap_["getSubProcessInfos"] = &TradeHostingUpsideEntryProcessor::process_getSubProcessInfos;
    processMap_["restartSubProcess"] = &TradeHostingUpsideEntryProcessor::process_restartSubProcess;
    processMap_["allocOrderRef"] = &TradeHostingUpsideEntryProcessor::process_allocOrderRef;
    processMap_["orderInsert"] = &TradeHostingUpsideEntryProcessor::process_orderInsert;
    processMap_["orderDelete"] = &TradeHostingUpsideEntryProcessor::process_orderDelete;
    processMap_["syncOrderState"] = &TradeHostingUpsideEntryProcessor::process_syncOrderState;
    processMap_["syncOrderTrades"] = &TradeHostingUpsideEntryProcessor::process_syncOrderTrades;
    processMap_["syncOrderStateBatch"] = &TradeHostingUpsideEntryProcessor::process_syncOrderStateBatch;
    processMap_["getLastUpsideEffectiveTimestamp"] = &TradeHostingUpsideEntryProcessor::process_getLastUpsideEffectiveTimestamp;
    processMap_["sendUpsideHeartBeat"] = &TradeHostingUpsideEntryProcessor::process_sendUpsideHeartBeat;
    processMap_["dumpPositionSummaries"] = &TradeHostingUpsideEntryProcessor::process_dumpPositionSummaries;
    processMap_["getFunds"] = &TradeHostingUpsideEntryProcessor::process_getFunds;
    processMap_["getSettlementInfo"] = &TradeHostingUpsideEntryProcessor::process_getSettlementInfo;
    processMap_["getNetPositionSummaries"] = &TradeHostingUpsideEntryProcessor::process_getNetPositionSummaries;
    processMap_["getPositionInfos"] = &TradeHostingUpsideEntryProcessor::process_getPositionInfos;
    processMap_["getPositionRateDetails"] = &TradeHostingUpsideEntryProcessor::process_getPositionRateDetails;
  }

  virtual ~TradeHostingUpsideEntryProcessor() {}
};

class TradeHostingUpsideEntryProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TradeHostingUpsideEntryProcessorFactory(const ::boost::shared_ptr< TradeHostingUpsideEntryIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TradeHostingUpsideEntryIfFactory > handlerFactory_;
};

class TradeHostingUpsideEntryMultiface : virtual public TradeHostingUpsideEntryIf {
 public:
  TradeHostingUpsideEntryMultiface(std::vector<boost::shared_ptr<TradeHostingUpsideEntryIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TradeHostingUpsideEntryMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TradeHostingUpsideEntryIf> > ifaces_;
  TradeHostingUpsideEntryMultiface() {}
  void add(boost::shared_ptr<TradeHostingUpsideEntryIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getSubProcessInfos(std::vector<TSubProcessInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSubProcessInfos(_return, platformArgs);
    }
    ifaces_[i]->getSubProcessInfos(_return, platformArgs);
    return;
  }

  void restartSubProcess(const  ::platform::comm::PlatformArgs& platformArgs, const int64_t trade_account_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->restartSubProcess(platformArgs, trade_account_id);
    }
    ifaces_[i]->restartSubProcess(platformArgs, trade_account_id);
  }

  void allocOrderRef( ::xueqiao::trade::hosting::HostingExecOrderRef& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->allocOrderRef(_return, platformArgs);
    }
    ifaces_[i]->allocOrderRef(_return, platformArgs);
    return;
  }

  void orderInsert(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& insertOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->orderInsert(platformArgs, insertOrder);
    }
    ifaces_[i]->orderInsert(platformArgs, insertOrder);
  }

  void orderDelete(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& deleteOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->orderDelete(platformArgs, deleteOrder);
    }
    ifaces_[i]->orderDelete(platformArgs, deleteOrder);
  }

  void syncOrderState(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncOrderState(platformArgs, syncOrder);
    }
    ifaces_[i]->syncOrderState(platformArgs, syncOrder);
  }

  void syncOrderTrades(const  ::platform::comm::PlatformArgs& platformArgs, const  ::xueqiao::trade::hosting::HostingExecOrder& syncOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncOrderTrades(platformArgs, syncOrder);
    }
    ifaces_[i]->syncOrderTrades(platformArgs, syncOrder);
  }

  void syncOrderStateBatch(const  ::platform::comm::PlatformArgs& platformArgs, const TSyncOrderStateBatchReq& batchReq) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->syncOrderStateBatch(platformArgs, batchReq);
    }
    ifaces_[i]->syncOrderStateBatch(platformArgs, batchReq);
  }

  int64_t getLastUpsideEffectiveTimestamp(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLastUpsideEffectiveTimestamp(platformArgs);
    }
    return ifaces_[i]->getLastUpsideEffectiveTimestamp(platformArgs);
  }

  void sendUpsideHeartBeat(const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendUpsideHeartBeat(platformArgs);
    }
    ifaces_[i]->sendUpsideHeartBeat(platformArgs);
  }

  void dumpPositionSummaries(std::vector< ::xueqiao::trade::hosting::upside::position::PositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dumpPositionSummaries(_return, platformArgs);
    }
    ifaces_[i]->dumpPositionSummaries(_return, platformArgs);
    return;
  }

  void getFunds(std::vector<TFund> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFunds(_return, platformArgs);
    }
    ifaces_[i]->getFunds(_return, platformArgs);
    return;
  }

  void getSettlementInfo(TSettlementInfo& _return, const  ::platform::comm::PlatformArgs& platformArgs, const std::string& settlementDate) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSettlementInfo(_return, platformArgs, settlementDate);
    }
    ifaces_[i]->getSettlementInfo(_return, platformArgs, settlementDate);
    return;
  }

  void getNetPositionSummaries(std::vector<TNetPositionSummary> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNetPositionSummaries(_return, platformArgs);
    }
    ifaces_[i]->getNetPositionSummaries(_return, platformArgs);
    return;
  }

  void getPositionInfos(std::vector<TPositionInfo> & _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPositionInfos(_return, platformArgs);
    }
    ifaces_[i]->getPositionInfos(_return, platformArgs);
    return;
  }

  void getPositionRateDetails(TPositionRateDetails& _return, const  ::platform::comm::PlatformArgs& platformArgs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getPositionRateDetails(_return, platformArgs);
    }
    ifaces_[i]->getPositionRateDetails(_return, platformArgs);
    return;
  }

};

}}}}} // namespace

#endif
