/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.risk.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeHostingRiskManager {

  public interface Iface {

    /**
     * 获取所有支持的风控项
     * 
     * @param platformArgs
     */
    public List<HostingRiskSupportedItem> getAllSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 获取风控结构的版本
     * 
     * @param platformArgs
     * @param subAccountId
     */
    public int getRiskRuleJointVersion(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 获取风控结构
     * 
     * @param platformArgs
     * @param subAccountId
     */
    public HostingRiskRuleJoint getRiskRuleJoint(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 批量设置关注风控项
     * 
     * @param platformArgs
     * @param subAccountId
     * @param version
     * @param openedItemIds
     * @param closedItemIds
     */
    public HostingRiskRuleJoint batchSetSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 批量操作可交易商品, 禁用商品会导致商品上的规则禁用
     * 
     * @param platformArgs
     * @param subAccountId
     * @param version
     * @param enabledCommodityIds
     * @param disabledCommodityIds
     */
    public HostingRiskRuleJoint batchSetTradedCommodityItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 批量设置全局风控规则
     *   以全局开放指标为Key
     * 
     * @param platformArgs
     * @param subAccountId
     * @param version
     * @param ruleItems
     */
    public HostingRiskRuleJoint batchSetGlobalRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 批量设置商品风控规则
     * 
     * @param platformArgs
     * @param subAccountId
     * @param version
     * @param rules
     */
    public HostingRiskRuleJoint batchSetCommodityRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 开启和关闭风控
     * 
     * @param platformArgs
     * @param subAccountId
     * @param version
     * @param riskEnabled
     */
    public HostingRiskRuleJoint setRiskEnabled(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 获取风控数据
     * 
     * @param platformArgs
     * @param subAccountId
     */
    public HostingRiskFrameDataInfo getRiskFrameDataInfo(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRiskRuleJointVersion(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRiskRuleJoint(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchSetSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchSetTradedCommodityItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchSetGlobalRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void batchSetCommodityRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setRiskEnabled(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRiskFrameDataInfo(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<HostingRiskSupportedItem> getAllSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getAllSupportedItems(platformArgs);
      return recv_getAllSupportedItems();
    }

    public void send_getAllSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.apache.thrift.TException
    {
      getAllSupportedItems_args args = new getAllSupportedItems_args();
      args.setPlatformArgs(platformArgs);
      sendBase("getAllSupportedItems", args);
    }

    public List<HostingRiskSupportedItem> recv_getAllSupportedItems() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getAllSupportedItems_result result = new getAllSupportedItems_result();
      receiveBase(result, "getAllSupportedItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSupportedItems failed: unknown result");
    }

    public int getRiskRuleJointVersion(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getRiskRuleJointVersion(platformArgs, subAccountId);
      return recv_getRiskRuleJointVersion();
    }

    public void send_getRiskRuleJointVersion(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.apache.thrift.TException
    {
      getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      sendBase("getRiskRuleJointVersion", args);
    }

    public int recv_getRiskRuleJointVersion() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
      receiveBase(result, "getRiskRuleJointVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRiskRuleJointVersion failed: unknown result");
    }

    public HostingRiskRuleJoint getRiskRuleJoint(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getRiskRuleJoint(platformArgs, subAccountId);
      return recv_getRiskRuleJoint();
    }

    public void send_getRiskRuleJoint(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.apache.thrift.TException
    {
      getRiskRuleJoint_args args = new getRiskRuleJoint_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      sendBase("getRiskRuleJoint", args);
    }

    public HostingRiskRuleJoint recv_getRiskRuleJoint() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getRiskRuleJoint_result result = new getRiskRuleJoint_result();
      receiveBase(result, "getRiskRuleJoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRiskRuleJoint failed: unknown result");
    }

    public HostingRiskRuleJoint batchSetSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_batchSetSupportedItems(platformArgs, subAccountId, version, openedItemIds, closedItemIds);
      return recv_batchSetSupportedItems();
    }

    public void send_batchSetSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds) throws org.apache.thrift.TException
    {
      batchSetSupportedItems_args args = new batchSetSupportedItems_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setVersion(version);
      args.setOpenedItemIds(openedItemIds);
      args.setClosedItemIds(closedItemIds);
      sendBase("batchSetSupportedItems", args);
    }

    public HostingRiskRuleJoint recv_batchSetSupportedItems() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      batchSetSupportedItems_result result = new batchSetSupportedItems_result();
      receiveBase(result, "batchSetSupportedItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchSetSupportedItems failed: unknown result");
    }

    public HostingRiskRuleJoint batchSetTradedCommodityItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_batchSetTradedCommodityItems(platformArgs, subAccountId, version, enabledCommodityIds, disabledCommodityIds);
      return recv_batchSetTradedCommodityItems();
    }

    public void send_batchSetTradedCommodityItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds) throws org.apache.thrift.TException
    {
      batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setVersion(version);
      args.setEnabledCommodityIds(enabledCommodityIds);
      args.setDisabledCommodityIds(disabledCommodityIds);
      sendBase("batchSetTradedCommodityItems", args);
    }

    public HostingRiskRuleJoint recv_batchSetTradedCommodityItems() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
      receiveBase(result, "batchSetTradedCommodityItems");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchSetTradedCommodityItems failed: unknown result");
    }

    public HostingRiskRuleJoint batchSetGlobalRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_batchSetGlobalRules(platformArgs, subAccountId, version, ruleItems);
      return recv_batchSetGlobalRules();
    }

    public void send_batchSetGlobalRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems) throws org.apache.thrift.TException
    {
      batchSetGlobalRules_args args = new batchSetGlobalRules_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setVersion(version);
      args.setRuleItems(ruleItems);
      sendBase("batchSetGlobalRules", args);
    }

    public HostingRiskRuleJoint recv_batchSetGlobalRules() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      batchSetGlobalRules_result result = new batchSetGlobalRules_result();
      receiveBase(result, "batchSetGlobalRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchSetGlobalRules failed: unknown result");
    }

    public HostingRiskRuleJoint batchSetCommodityRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_batchSetCommodityRules(platformArgs, subAccountId, version, rules);
      return recv_batchSetCommodityRules();
    }

    public void send_batchSetCommodityRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules) throws org.apache.thrift.TException
    {
      batchSetCommodityRules_args args = new batchSetCommodityRules_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setVersion(version);
      args.setRules(rules);
      sendBase("batchSetCommodityRules", args);
    }

    public HostingRiskRuleJoint recv_batchSetCommodityRules() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      batchSetCommodityRules_result result = new batchSetCommodityRules_result();
      receiveBase(result, "batchSetCommodityRules");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "batchSetCommodityRules failed: unknown result");
    }

    public HostingRiskRuleJoint setRiskEnabled(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_setRiskEnabled(platformArgs, subAccountId, version, riskEnabled);
      return recv_setRiskEnabled();
    }

    public void send_setRiskEnabled(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled) throws org.apache.thrift.TException
    {
      setRiskEnabled_args args = new setRiskEnabled_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setVersion(version);
      args.setRiskEnabled(riskEnabled);
      sendBase("setRiskEnabled", args);
    }

    public HostingRiskRuleJoint recv_setRiskEnabled() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      setRiskEnabled_result result = new setRiskEnabled_result();
      receiveBase(result, "setRiskEnabled");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setRiskEnabled failed: unknown result");
    }

    public HostingRiskFrameDataInfo getRiskFrameDataInfo(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_getRiskFrameDataInfo(platformArgs, subAccountId);
      return recv_getRiskFrameDataInfo();
    }

    public void send_getRiskFrameDataInfo(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId) throws org.apache.thrift.TException
    {
      getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      sendBase("getRiskFrameDataInfo", args);
    }

    public HostingRiskFrameDataInfo recv_getRiskFrameDataInfo() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
      receiveBase(result, "getRiskFrameDataInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRiskFrameDataInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSupportedItems_call method_call = new getAllSupportedItems_call(platformArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSupportedItems_call extends org.apache.thrift.async.TAsyncMethodCall <getAllSupportedItems_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      public getAllSupportedItems_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSupportedItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSupportedItems_args args = new getAllSupportedItems_args();
        args.setPlatformArgs(platformArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<HostingRiskSupportedItem> getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSupportedItems();
      }
    }

    public void getRiskRuleJointVersion(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRiskRuleJointVersion_call method_call = new getRiskRuleJointVersion_call(platformArgs, subAccountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRiskRuleJointVersion_call extends org.apache.thrift.async.TAsyncMethodCall <getRiskRuleJointVersion_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      public getRiskRuleJointVersion_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRiskRuleJointVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRiskRuleJointVersion_args args = new getRiskRuleJointVersion_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRiskRuleJointVersion();
      }
    }

    public void getRiskRuleJoint(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRiskRuleJoint_call method_call = new getRiskRuleJoint_call(platformArgs, subAccountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRiskRuleJoint_call extends org.apache.thrift.async.TAsyncMethodCall <getRiskRuleJoint_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      public getRiskRuleJoint_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRiskRuleJoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRiskRuleJoint_args args = new getRiskRuleJoint_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRiskRuleJoint();
      }
    }

    public void batchSetSupportedItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchSetSupportedItems_call method_call = new batchSetSupportedItems_call(platformArgs, subAccountId, version, openedItemIds, closedItemIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchSetSupportedItems_call extends org.apache.thrift.async.TAsyncMethodCall <batchSetSupportedItems_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private int version;
      private Set<String> openedItemIds;
      private Set<String> closedItemIds;
      public batchSetSupportedItems_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<String> openedItemIds, Set<String> closedItemIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.version = version;
        this.openedItemIds = openedItemIds;
        this.closedItemIds = closedItemIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchSetSupportedItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchSetSupportedItems_args args = new batchSetSupportedItems_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setVersion(version);
        args.setOpenedItemIds(openedItemIds);
        args.setClosedItemIds(closedItemIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchSetSupportedItems();
      }
    }

    public void batchSetTradedCommodityItems(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchSetTradedCommodityItems_call method_call = new batchSetTradedCommodityItems_call(platformArgs, subAccountId, version, enabledCommodityIds, disabledCommodityIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchSetTradedCommodityItems_call extends org.apache.thrift.async.TAsyncMethodCall <batchSetTradedCommodityItems_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private int version;
      private Set<Long> enabledCommodityIds;
      private Set<Long> disabledCommodityIds;
      public batchSetTradedCommodityItems_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Set<Long> enabledCommodityIds, Set<Long> disabledCommodityIds, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.version = version;
        this.enabledCommodityIds = enabledCommodityIds;
        this.disabledCommodityIds = disabledCommodityIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchSetTradedCommodityItems", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchSetTradedCommodityItems_args args = new batchSetTradedCommodityItems_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setVersion(version);
        args.setEnabledCommodityIds(enabledCommodityIds);
        args.setDisabledCommodityIds(disabledCommodityIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchSetTradedCommodityItems();
      }
    }

    public void batchSetGlobalRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchSetGlobalRules_call method_call = new batchSetGlobalRules_call(platformArgs, subAccountId, version, ruleItems, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchSetGlobalRules_call extends org.apache.thrift.async.TAsyncMethodCall <batchSetGlobalRules_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private int version;
      private Map<String,HostingRiskRuleItem> ruleItems;
      public batchSetGlobalRules_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<String,HostingRiskRuleItem> ruleItems, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.version = version;
        this.ruleItems = ruleItems;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchSetGlobalRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchSetGlobalRules_args args = new batchSetGlobalRules_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setVersion(version);
        args.setRuleItems(ruleItems);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchSetGlobalRules();
      }
    }

    public void batchSetCommodityRules(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      batchSetCommodityRules_call method_call = new batchSetCommodityRules_call(platformArgs, subAccountId, version, rules, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class batchSetCommodityRules_call extends org.apache.thrift.async.TAsyncMethodCall <batchSetCommodityRules_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private int version;
      private Map<Long,Map<String,HostingRiskRuleItem>> rules;
      public batchSetCommodityRules_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, Map<Long,Map<String,HostingRiskRuleItem>> rules, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.version = version;
        this.rules = rules;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("batchSetCommodityRules", org.apache.thrift.protocol.TMessageType.CALL, 0));
        batchSetCommodityRules_args args = new batchSetCommodityRules_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setVersion(version);
        args.setRules(rules);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_batchSetCommodityRules();
      }
    }

    public void setRiskEnabled(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setRiskEnabled_call method_call = new setRiskEnabled_call(platformArgs, subAccountId, version, riskEnabled, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setRiskEnabled_call extends org.apache.thrift.async.TAsyncMethodCall <setRiskEnabled_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private int version;
      private boolean riskEnabled;
      public setRiskEnabled_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, int version, boolean riskEnabled, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.version = version;
        this.riskEnabled = riskEnabled;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRiskEnabled", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setRiskEnabled_args args = new setRiskEnabled_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setVersion(version);
        args.setRiskEnabled(riskEnabled);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskRuleJoint getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setRiskEnabled();
      }
    }

    public void getRiskFrameDataInfo(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRiskFrameDataInfo_call method_call = new getRiskFrameDataInfo_call(platformArgs, subAccountId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRiskFrameDataInfo_call extends org.apache.thrift.async.TAsyncMethodCall <getRiskFrameDataInfo_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      public getRiskFrameDataInfo_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRiskFrameDataInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRiskFrameDataInfo_args args = new getRiskFrameDataInfo_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingRiskFrameDataInfo getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRiskFrameDataInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllSupportedItems", new getAllSupportedItems());
      processMap.put("getRiskRuleJointVersion", new getRiskRuleJointVersion());
      processMap.put("getRiskRuleJoint", new getRiskRuleJoint());
      processMap.put("batchSetSupportedItems", new batchSetSupportedItems());
      processMap.put("batchSetTradedCommodityItems", new batchSetTradedCommodityItems());
      processMap.put("batchSetGlobalRules", new batchSetGlobalRules());
      processMap.put("batchSetCommodityRules", new batchSetCommodityRules());
      processMap.put("setRiskEnabled", new setRiskEnabled());
      processMap.put("getRiskFrameDataInfo", new getRiskFrameDataInfo());
      return processMap;
    }

    public static class getAllSupportedItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSupportedItems_args> {
      public getAllSupportedItems() {
        super("getAllSupportedItems");
      }

      public getAllSupportedItems_args getEmptyArgsInstance() {
        return new getAllSupportedItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllSupportedItems_result getResult(I iface, getAllSupportedItems_args args) throws org.apache.thrift.TException {
        getAllSupportedItems_result result = new getAllSupportedItems_result();
        try {
          result.success = iface.getAllSupportedItems(args.platformArgs);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getRiskRuleJointVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRiskRuleJointVersion_args> {
      public getRiskRuleJointVersion() {
        super("getRiskRuleJointVersion");
      }

      public getRiskRuleJointVersion_args getEmptyArgsInstance() {
        return new getRiskRuleJointVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRiskRuleJointVersion_result getResult(I iface, getRiskRuleJointVersion_args args) throws org.apache.thrift.TException {
        getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
        try {
          result.success = iface.getRiskRuleJointVersion(args.platformArgs, args.subAccountId);
          result.setSuccessIsSet(true);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getRiskRuleJoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRiskRuleJoint_args> {
      public getRiskRuleJoint() {
        super("getRiskRuleJoint");
      }

      public getRiskRuleJoint_args getEmptyArgsInstance() {
        return new getRiskRuleJoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRiskRuleJoint_result getResult(I iface, getRiskRuleJoint_args args) throws org.apache.thrift.TException {
        getRiskRuleJoint_result result = new getRiskRuleJoint_result();
        try {
          result.success = iface.getRiskRuleJoint(args.platformArgs, args.subAccountId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class batchSetSupportedItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchSetSupportedItems_args> {
      public batchSetSupportedItems() {
        super("batchSetSupportedItems");
      }

      public batchSetSupportedItems_args getEmptyArgsInstance() {
        return new batchSetSupportedItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchSetSupportedItems_result getResult(I iface, batchSetSupportedItems_args args) throws org.apache.thrift.TException {
        batchSetSupportedItems_result result = new batchSetSupportedItems_result();
        try {
          result.success = iface.batchSetSupportedItems(args.platformArgs, args.subAccountId, args.version, args.openedItemIds, args.closedItemIds);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class batchSetTradedCommodityItems<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchSetTradedCommodityItems_args> {
      public batchSetTradedCommodityItems() {
        super("batchSetTradedCommodityItems");
      }

      public batchSetTradedCommodityItems_args getEmptyArgsInstance() {
        return new batchSetTradedCommodityItems_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchSetTradedCommodityItems_result getResult(I iface, batchSetTradedCommodityItems_args args) throws org.apache.thrift.TException {
        batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
        try {
          result.success = iface.batchSetTradedCommodityItems(args.platformArgs, args.subAccountId, args.version, args.enabledCommodityIds, args.disabledCommodityIds);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class batchSetGlobalRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchSetGlobalRules_args> {
      public batchSetGlobalRules() {
        super("batchSetGlobalRules");
      }

      public batchSetGlobalRules_args getEmptyArgsInstance() {
        return new batchSetGlobalRules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchSetGlobalRules_result getResult(I iface, batchSetGlobalRules_args args) throws org.apache.thrift.TException {
        batchSetGlobalRules_result result = new batchSetGlobalRules_result();
        try {
          result.success = iface.batchSetGlobalRules(args.platformArgs, args.subAccountId, args.version, args.ruleItems);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class batchSetCommodityRules<I extends Iface> extends org.apache.thrift.ProcessFunction<I, batchSetCommodityRules_args> {
      public batchSetCommodityRules() {
        super("batchSetCommodityRules");
      }

      public batchSetCommodityRules_args getEmptyArgsInstance() {
        return new batchSetCommodityRules_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public batchSetCommodityRules_result getResult(I iface, batchSetCommodityRules_args args) throws org.apache.thrift.TException {
        batchSetCommodityRules_result result = new batchSetCommodityRules_result();
        try {
          result.success = iface.batchSetCommodityRules(args.platformArgs, args.subAccountId, args.version, args.rules);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class setRiskEnabled<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRiskEnabled_args> {
      public setRiskEnabled() {
        super("setRiskEnabled");
      }

      public setRiskEnabled_args getEmptyArgsInstance() {
        return new setRiskEnabled_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setRiskEnabled_result getResult(I iface, setRiskEnabled_args args) throws org.apache.thrift.TException {
        setRiskEnabled_result result = new setRiskEnabled_result();
        try {
          result.success = iface.setRiskEnabled(args.platformArgs, args.subAccountId, args.version, args.riskEnabled);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class getRiskFrameDataInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRiskFrameDataInfo_args> {
      public getRiskFrameDataInfo() {
        super("getRiskFrameDataInfo");
      }

      public getRiskFrameDataInfo_args getEmptyArgsInstance() {
        return new getRiskFrameDataInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRiskFrameDataInfo_result getResult(I iface, getRiskFrameDataInfo_args args) throws org.apache.thrift.TException {
        getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
        try {
          result.success = iface.getRiskFrameDataInfo(args.platformArgs, args.subAccountId);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllSupportedItems", new getAllSupportedItems());
      processMap.put("getRiskRuleJointVersion", new getRiskRuleJointVersion());
      processMap.put("getRiskRuleJoint", new getRiskRuleJoint());
      processMap.put("batchSetSupportedItems", new batchSetSupportedItems());
      processMap.put("batchSetTradedCommodityItems", new batchSetTradedCommodityItems());
      processMap.put("batchSetGlobalRules", new batchSetGlobalRules());
      processMap.put("batchSetCommodityRules", new batchSetCommodityRules());
      processMap.put("setRiskEnabled", new setRiskEnabled());
      processMap.put("getRiskFrameDataInfo", new getRiskFrameDataInfo());
      return processMap;
    }

    public static class getAllSupportedItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSupportedItems_args, List<HostingRiskSupportedItem>> {
      public getAllSupportedItems() {
        super("getAllSupportedItems");
      }

      public getAllSupportedItems_args getEmptyArgsInstance() {
        return new getAllSupportedItems_args();
      }

      public AsyncMethodCallback<List<HostingRiskSupportedItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<HostingRiskSupportedItem>>() { 
          public void onComplete(List<HostingRiskSupportedItem> o) {
            getAllSupportedItems_result result = new getAllSupportedItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllSupportedItems_result result = new getAllSupportedItems_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSupportedItems_args args, org.apache.thrift.async.AsyncMethodCallback<List<HostingRiskSupportedItem>> resultHandler) throws TException {
        iface.getAllSupportedItems(args.platformArgs,resultHandler);
      }
    }

    public static class getRiskRuleJointVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRiskRuleJointVersion_args, Integer> {
      public getRiskRuleJointVersion() {
        super("getRiskRuleJointVersion");
      }

      public getRiskRuleJointVersion_args getEmptyArgsInstance() {
        return new getRiskRuleJointVersion_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRiskRuleJointVersion_result result = new getRiskRuleJointVersion_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRiskRuleJointVersion_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getRiskRuleJointVersion(args.platformArgs, args.subAccountId,resultHandler);
      }
    }

    public static class getRiskRuleJoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRiskRuleJoint_args, HostingRiskRuleJoint> {
      public getRiskRuleJoint() {
        super("getRiskRuleJoint");
      }

      public getRiskRuleJoint_args getEmptyArgsInstance() {
        return new getRiskRuleJoint_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            getRiskRuleJoint_result result = new getRiskRuleJoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRiskRuleJoint_result result = new getRiskRuleJoint_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRiskRuleJoint_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.getRiskRuleJoint(args.platformArgs, args.subAccountId,resultHandler);
      }
    }

    public static class batchSetSupportedItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchSetSupportedItems_args, HostingRiskRuleJoint> {
      public batchSetSupportedItems() {
        super("batchSetSupportedItems");
      }

      public batchSetSupportedItems_args getEmptyArgsInstance() {
        return new batchSetSupportedItems_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            batchSetSupportedItems_result result = new batchSetSupportedItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchSetSupportedItems_result result = new batchSetSupportedItems_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchSetSupportedItems_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.batchSetSupportedItems(args.platformArgs, args.subAccountId, args.version, args.openedItemIds, args.closedItemIds,resultHandler);
      }
    }

    public static class batchSetTradedCommodityItems<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchSetTradedCommodityItems_args, HostingRiskRuleJoint> {
      public batchSetTradedCommodityItems() {
        super("batchSetTradedCommodityItems");
      }

      public batchSetTradedCommodityItems_args getEmptyArgsInstance() {
        return new batchSetTradedCommodityItems_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchSetTradedCommodityItems_result result = new batchSetTradedCommodityItems_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchSetTradedCommodityItems_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.batchSetTradedCommodityItems(args.platformArgs, args.subAccountId, args.version, args.enabledCommodityIds, args.disabledCommodityIds,resultHandler);
      }
    }

    public static class batchSetGlobalRules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchSetGlobalRules_args, HostingRiskRuleJoint> {
      public batchSetGlobalRules() {
        super("batchSetGlobalRules");
      }

      public batchSetGlobalRules_args getEmptyArgsInstance() {
        return new batchSetGlobalRules_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            batchSetGlobalRules_result result = new batchSetGlobalRules_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchSetGlobalRules_result result = new batchSetGlobalRules_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchSetGlobalRules_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.batchSetGlobalRules(args.platformArgs, args.subAccountId, args.version, args.ruleItems,resultHandler);
      }
    }

    public static class batchSetCommodityRules<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, batchSetCommodityRules_args, HostingRiskRuleJoint> {
      public batchSetCommodityRules() {
        super("batchSetCommodityRules");
      }

      public batchSetCommodityRules_args getEmptyArgsInstance() {
        return new batchSetCommodityRules_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            batchSetCommodityRules_result result = new batchSetCommodityRules_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            batchSetCommodityRules_result result = new batchSetCommodityRules_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, batchSetCommodityRules_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.batchSetCommodityRules(args.platformArgs, args.subAccountId, args.version, args.rules,resultHandler);
      }
    }

    public static class setRiskEnabled<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setRiskEnabled_args, HostingRiskRuleJoint> {
      public setRiskEnabled() {
        super("setRiskEnabled");
      }

      public setRiskEnabled_args getEmptyArgsInstance() {
        return new setRiskEnabled_args();
      }

      public AsyncMethodCallback<HostingRiskRuleJoint> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskRuleJoint>() { 
          public void onComplete(HostingRiskRuleJoint o) {
            setRiskEnabled_result result = new setRiskEnabled_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setRiskEnabled_result result = new setRiskEnabled_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setRiskEnabled_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskRuleJoint> resultHandler) throws TException {
        iface.setRiskEnabled(args.platformArgs, args.subAccountId, args.version, args.riskEnabled,resultHandler);
      }
    }

    public static class getRiskFrameDataInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRiskFrameDataInfo_args, HostingRiskFrameDataInfo> {
      public getRiskFrameDataInfo() {
        super("getRiskFrameDataInfo");
      }

      public getRiskFrameDataInfo_args getEmptyArgsInstance() {
        return new getRiskFrameDataInfo_args();
      }

      public AsyncMethodCallback<HostingRiskFrameDataInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingRiskFrameDataInfo>() { 
          public void onComplete(HostingRiskFrameDataInfo o) {
            getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRiskFrameDataInfo_result result = new getRiskFrameDataInfo_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRiskFrameDataInfo_args args, org.apache.thrift.async.AsyncMethodCallback<HostingRiskFrameDataInfo> resultHandler) throws TException {
        iface.getRiskFrameDataInfo(args.platformArgs, args.subAccountId,resultHandler);
      }
    }

  }

  public static class getAllSupportedItems_args implements org.apache.thrift.TBase<getAllSupportedItems_args, getAllSupportedItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSupportedItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSupportedItems_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSupportedItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSupportedItems_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSupportedItems_args.class, metaDataMap);
    }

    public getAllSupportedItems_args() {
    }

    public getAllSupportedItems_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs)
    {
      this();
      this.platformArgs = platformArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSupportedItems_args(getAllSupportedItems_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
    }

    public getAllSupportedItems_args deepCopy() {
      return new getAllSupportedItems_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getAllSupportedItems_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSupportedItems_args)
        return this.equals((getAllSupportedItems_args)that);
      return false;
    }

    public boolean equals(getAllSupportedItems_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSupportedItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSupportedItems_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSupportedItems_argsStandardSchemeFactory implements SchemeFactory {
      public getAllSupportedItems_argsStandardScheme getScheme() {
        return new getAllSupportedItems_argsStandardScheme();
      }
    }

    private static class getAllSupportedItems_argsStandardScheme extends StandardScheme<getAllSupportedItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSupportedItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSupportedItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSupportedItems_argsTupleSchemeFactory implements SchemeFactory {
      public getAllSupportedItems_argsTupleScheme getScheme() {
        return new getAllSupportedItems_argsTupleScheme();
      }
    }

    private static class getAllSupportedItems_argsTupleScheme extends TupleScheme<getAllSupportedItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSupportedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSupportedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
      }
    }

  }

  public static class getAllSupportedItems_result implements org.apache.thrift.TBase<getAllSupportedItems_result, getAllSupportedItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSupportedItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSupportedItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllSupportedItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllSupportedItems_resultTupleSchemeFactory());
    }

    public List<HostingRiskSupportedItem> success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskSupportedItem.class))));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSupportedItems_result.class, metaDataMap);
    }

    public getAllSupportedItems_result() {
    }

    public getAllSupportedItems_result(
      List<HostingRiskSupportedItem> success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSupportedItems_result(getAllSupportedItems_result other) {
      if (other.isSetSuccess()) {
        List<HostingRiskSupportedItem> __this__success = new ArrayList<HostingRiskSupportedItem>(other.success.size());
        for (HostingRiskSupportedItem other_element : other.success) {
          __this__success.add(new HostingRiskSupportedItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getAllSupportedItems_result deepCopy() {
      return new getAllSupportedItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<HostingRiskSupportedItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(HostingRiskSupportedItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<HostingRiskSupportedItem>();
      }
      this.success.add(elem);
    }

    public List<HostingRiskSupportedItem> getSuccess() {
      return this.success;
    }

    public getAllSupportedItems_result setSuccess(List<HostingRiskSupportedItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getAllSupportedItems_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<HostingRiskSupportedItem>)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSupportedItems_result)
        return this.equals((getAllSupportedItems_result)that);
      return false;
    }

    public boolean equals(getAllSupportedItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllSupportedItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllSupportedItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSupportedItems_resultStandardSchemeFactory implements SchemeFactory {
      public getAllSupportedItems_resultStandardScheme getScheme() {
        return new getAllSupportedItems_resultStandardScheme();
      }
    }

    private static class getAllSupportedItems_resultStandardScheme extends StandardScheme<getAllSupportedItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSupportedItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list286 = iprot.readListBegin();
                  struct.success = new ArrayList<HostingRiskSupportedItem>(_list286.size);
                  for (int _i287 = 0; _i287 < _list286.size; ++_i287)
                  {
                    HostingRiskSupportedItem _elem288;
                    _elem288 = new HostingRiskSupportedItem();
                    _elem288.read(iprot);
                    struct.success.add(_elem288);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSupportedItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (HostingRiskSupportedItem _iter289 : struct.success)
            {
              _iter289.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSupportedItems_resultTupleSchemeFactory implements SchemeFactory {
      public getAllSupportedItems_resultTupleScheme getScheme() {
        return new getAllSupportedItems_resultTupleScheme();
      }
    }

    private static class getAllSupportedItems_resultTupleScheme extends TupleScheme<getAllSupportedItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSupportedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (HostingRiskSupportedItem _iter290 : struct.success)
            {
              _iter290.write(oprot);
            }
          }
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSupportedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<HostingRiskSupportedItem>(_list291.size);
            for (int _i292 = 0; _i292 < _list291.size; ++_i292)
            {
              HostingRiskSupportedItem _elem293;
              _elem293 = new HostingRiskSupportedItem();
              _elem293.read(iprot);
              struct.success.add(_elem293);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class getRiskRuleJointVersion_args implements org.apache.thrift.TBase<getRiskRuleJointVersion_args, getRiskRuleJointVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRuleJointVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRuleJointVersion_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRuleJointVersion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRuleJointVersion_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRuleJointVersion_args.class, metaDataMap);
    }

    public getRiskRuleJointVersion_args() {
    }

    public getRiskRuleJointVersion_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRuleJointVersion_args(getRiskRuleJointVersion_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
    }

    public getRiskRuleJointVersion_args deepCopy() {
      return new getRiskRuleJointVersion_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getRiskRuleJointVersion_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public getRiskRuleJointVersion_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRuleJointVersion_args)
        return this.equals((getRiskRuleJointVersion_args)that);
      return false;
    }

    public boolean equals(getRiskRuleJointVersion_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskRuleJointVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRuleJointVersion_argsStandardSchemeFactory implements SchemeFactory {
      public getRiskRuleJointVersion_argsStandardScheme getScheme() {
        return new getRiskRuleJointVersion_argsStandardScheme();
      }
    }

    private static class getRiskRuleJointVersion_argsStandardScheme extends StandardScheme<getRiskRuleJointVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRuleJointVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRuleJointVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRuleJointVersion_argsTupleSchemeFactory implements SchemeFactory {
      public getRiskRuleJointVersion_argsTupleScheme getScheme() {
        return new getRiskRuleJointVersion_argsTupleScheme();
      }
    }

    private static class getRiskRuleJointVersion_argsTupleScheme extends TupleScheme<getRiskRuleJointVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJointVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJointVersion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
      }
    }

  }

  public static class getRiskRuleJointVersion_result implements org.apache.thrift.TBase<getRiskRuleJointVersion_result, getRiskRuleJointVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRuleJointVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRuleJointVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRuleJointVersion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRuleJointVersion_resultTupleSchemeFactory());
    }

    public int success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRuleJointVersion_result.class, metaDataMap);
    }

    public getRiskRuleJointVersion_result() {
    }

    public getRiskRuleJointVersion_result(
      int success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRuleJointVersion_result(getRiskRuleJointVersion_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getRiskRuleJointVersion_result deepCopy() {
      return new getRiskRuleJointVersion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.err = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getRiskRuleJointVersion_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getRiskRuleJointVersion_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRuleJointVersion_result)
        return this.equals((getRiskRuleJointVersion_result)that);
      return false;
    }

    public boolean equals(getRiskRuleJointVersion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskRuleJointVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRuleJointVersion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRuleJointVersion_resultStandardSchemeFactory implements SchemeFactory {
      public getRiskRuleJointVersion_resultStandardScheme getScheme() {
        return new getRiskRuleJointVersion_resultStandardScheme();
      }
    }

    private static class getRiskRuleJointVersion_resultStandardScheme extends StandardScheme<getRiskRuleJointVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRuleJointVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRuleJointVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRuleJointVersion_resultTupleSchemeFactory implements SchemeFactory {
      public getRiskRuleJointVersion_resultTupleScheme getScheme() {
        return new getRiskRuleJointVersion_resultTupleScheme();
      }
    }

    private static class getRiskRuleJointVersion_resultTupleScheme extends TupleScheme<getRiskRuleJointVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJointVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJointVersion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class getRiskRuleJoint_args implements org.apache.thrift.TBase<getRiskRuleJoint_args, getRiskRuleJoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRuleJoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRuleJoint_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRuleJoint_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRuleJoint_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRuleJoint_args.class, metaDataMap);
    }

    public getRiskRuleJoint_args() {
    }

    public getRiskRuleJoint_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRuleJoint_args(getRiskRuleJoint_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
    }

    public getRiskRuleJoint_args deepCopy() {
      return new getRiskRuleJoint_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getRiskRuleJoint_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public getRiskRuleJoint_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRuleJoint_args)
        return this.equals((getRiskRuleJoint_args)that);
      return false;
    }

    public boolean equals(getRiskRuleJoint_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskRuleJoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRuleJoint_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRuleJoint_argsStandardSchemeFactory implements SchemeFactory {
      public getRiskRuleJoint_argsStandardScheme getScheme() {
        return new getRiskRuleJoint_argsStandardScheme();
      }
    }

    private static class getRiskRuleJoint_argsStandardScheme extends StandardScheme<getRiskRuleJoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRuleJoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRuleJoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRuleJoint_argsTupleSchemeFactory implements SchemeFactory {
      public getRiskRuleJoint_argsTupleScheme getScheme() {
        return new getRiskRuleJoint_argsTupleScheme();
      }
    }

    private static class getRiskRuleJoint_argsTupleScheme extends TupleScheme<getRiskRuleJoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJoint_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
      }
    }

  }

  public static class getRiskRuleJoint_result implements org.apache.thrift.TBase<getRiskRuleJoint_result, getRiskRuleJoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskRuleJoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskRuleJoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskRuleJoint_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskRuleJoint_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskRuleJoint_result.class, metaDataMap);
    }

    public getRiskRuleJoint_result() {
    }

    public getRiskRuleJoint_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskRuleJoint_result(getRiskRuleJoint_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getRiskRuleJoint_result deepCopy() {
      return new getRiskRuleJoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public getRiskRuleJoint_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getRiskRuleJoint_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskRuleJoint_result)
        return this.equals((getRiskRuleJoint_result)that);
      return false;
    }

    public boolean equals(getRiskRuleJoint_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskRuleJoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskRuleJoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskRuleJoint_resultStandardSchemeFactory implements SchemeFactory {
      public getRiskRuleJoint_resultStandardScheme getScheme() {
        return new getRiskRuleJoint_resultStandardScheme();
      }
    }

    private static class getRiskRuleJoint_resultStandardScheme extends StandardScheme<getRiskRuleJoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskRuleJoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskRuleJoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskRuleJoint_resultTupleSchemeFactory implements SchemeFactory {
      public getRiskRuleJoint_resultTupleScheme getScheme() {
        return new getRiskRuleJoint_resultTupleScheme();
      }
    }

    private static class getRiskRuleJoint_resultTupleScheme extends TupleScheme<getRiskRuleJoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskRuleJoint_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class batchSetSupportedItems_args implements org.apache.thrift.TBase<batchSetSupportedItems_args, batchSetSupportedItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetSupportedItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetSupportedItems_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField OPENED_ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("openedItemIds", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField CLOSED_ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("closedItemIds", org.apache.thrift.protocol.TType.SET, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetSupportedItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetSupportedItems_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public int version; // required
    public Set<String> openedItemIds; // required
    public Set<String> closedItemIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      VERSION((short)3, "version"),
      OPENED_ITEM_IDS((short)4, "openedItemIds"),
      CLOSED_ITEM_IDS((short)5, "closedItemIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // OPENED_ITEM_IDS
            return OPENED_ITEM_IDS;
          case 5: // CLOSED_ITEM_IDS
            return CLOSED_ITEM_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OPENED_ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("openedItemIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CLOSED_ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("closedItemIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetSupportedItems_args.class, metaDataMap);
    }

    public batchSetSupportedItems_args() {
    }

    public batchSetSupportedItems_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      int version,
      Set<String> openedItemIds,
      Set<String> closedItemIds)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.version = version;
      setVersionIsSet(true);
      this.openedItemIds = openedItemIds;
      this.closedItemIds = closedItemIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetSupportedItems_args(batchSetSupportedItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      this.version = other.version;
      if (other.isSetOpenedItemIds()) {
        Set<String> __this__openedItemIds = new HashSet<String>(other.openedItemIds);
        this.openedItemIds = __this__openedItemIds;
      }
      if (other.isSetClosedItemIds()) {
        Set<String> __this__closedItemIds = new HashSet<String>(other.closedItemIds);
        this.closedItemIds = __this__closedItemIds;
      }
    }

    public batchSetSupportedItems_args deepCopy() {
      return new batchSetSupportedItems_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      setVersionIsSet(false);
      this.version = 0;
      this.openedItemIds = null;
      this.closedItemIds = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public batchSetSupportedItems_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public batchSetSupportedItems_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public int getVersion() {
      return this.version;
    }

    public batchSetSupportedItems_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getOpenedItemIdsSize() {
      return (this.openedItemIds == null) ? 0 : this.openedItemIds.size();
    }

    public java.util.Iterator<String> getOpenedItemIdsIterator() {
      return (this.openedItemIds == null) ? null : this.openedItemIds.iterator();
    }

    public void addToOpenedItemIds(String elem) {
      if (this.openedItemIds == null) {
        this.openedItemIds = new HashSet<String>();
      }
      this.openedItemIds.add(elem);
    }

    public Set<String> getOpenedItemIds() {
      return this.openedItemIds;
    }

    public batchSetSupportedItems_args setOpenedItemIds(Set<String> openedItemIds) {
      this.openedItemIds = openedItemIds;
      return this;
    }

    public void unsetOpenedItemIds() {
      this.openedItemIds = null;
    }

    /** Returns true if field openedItemIds is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenedItemIds() {
      return this.openedItemIds != null;
    }

    public void setOpenedItemIdsIsSet(boolean value) {
      if (!value) {
        this.openedItemIds = null;
      }
    }

    public int getClosedItemIdsSize() {
      return (this.closedItemIds == null) ? 0 : this.closedItemIds.size();
    }

    public java.util.Iterator<String> getClosedItemIdsIterator() {
      return (this.closedItemIds == null) ? null : this.closedItemIds.iterator();
    }

    public void addToClosedItemIds(String elem) {
      if (this.closedItemIds == null) {
        this.closedItemIds = new HashSet<String>();
      }
      this.closedItemIds.add(elem);
    }

    public Set<String> getClosedItemIds() {
      return this.closedItemIds;
    }

    public batchSetSupportedItems_args setClosedItemIds(Set<String> closedItemIds) {
      this.closedItemIds = closedItemIds;
      return this;
    }

    public void unsetClosedItemIds() {
      this.closedItemIds = null;
    }

    /** Returns true if field closedItemIds is set (has been assigned a value) and false otherwise */
    public boolean isSetClosedItemIds() {
      return this.closedItemIds != null;
    }

    public void setClosedItemIdsIsSet(boolean value) {
      if (!value) {
        this.closedItemIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case OPENED_ITEM_IDS:
        if (value == null) {
          unsetOpenedItemIds();
        } else {
          setOpenedItemIds((Set<String>)value);
        }
        break;

      case CLOSED_ITEM_IDS:
        if (value == null) {
          unsetClosedItemIds();
        } else {
          setClosedItemIds((Set<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case VERSION:
        return Integer.valueOf(getVersion());

      case OPENED_ITEM_IDS:
        return getOpenedItemIds();

      case CLOSED_ITEM_IDS:
        return getClosedItemIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case VERSION:
        return isSetVersion();
      case OPENED_ITEM_IDS:
        return isSetOpenedItemIds();
      case CLOSED_ITEM_IDS:
        return isSetClosedItemIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetSupportedItems_args)
        return this.equals((batchSetSupportedItems_args)that);
      return false;
    }

    public boolean equals(batchSetSupportedItems_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_openedItemIds = true && this.isSetOpenedItemIds();
      boolean that_present_openedItemIds = true && that.isSetOpenedItemIds();
      if (this_present_openedItemIds || that_present_openedItemIds) {
        if (!(this_present_openedItemIds && that_present_openedItemIds))
          return false;
        if (!this.openedItemIds.equals(that.openedItemIds))
          return false;
      }

      boolean this_present_closedItemIds = true && this.isSetClosedItemIds();
      boolean that_present_closedItemIds = true && that.isSetClosedItemIds();
      if (this_present_closedItemIds || that_present_closedItemIds) {
        if (!(this_present_closedItemIds && that_present_closedItemIds))
          return false;
        if (!this.closedItemIds.equals(that.closedItemIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetSupportedItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOpenedItemIds()).compareTo(other.isSetOpenedItemIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenedItemIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedItemIds, other.openedItemIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClosedItemIds()).compareTo(other.isSetClosedItemIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClosedItemIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closedItemIds, other.closedItemIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetSupportedItems_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("openedItemIds:");
      if (this.openedItemIds == null) {
        sb.append("null");
      } else {
        sb.append(this.openedItemIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("closedItemIds:");
      if (this.closedItemIds == null) {
        sb.append("null");
      } else {
        sb.append(this.closedItemIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetSupportedItems_argsStandardSchemeFactory implements SchemeFactory {
      public batchSetSupportedItems_argsStandardScheme getScheme() {
        return new batchSetSupportedItems_argsStandardScheme();
      }
    }

    private static class batchSetSupportedItems_argsStandardScheme extends StandardScheme<batchSetSupportedItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetSupportedItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPENED_ITEM_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set294 = iprot.readSetBegin();
                  struct.openedItemIds = new HashSet<String>(2*_set294.size);
                  for (int _i295 = 0; _i295 < _set294.size; ++_i295)
                  {
                    String _elem296;
                    _elem296 = iprot.readString();
                    struct.openedItemIds.add(_elem296);
                  }
                  iprot.readSetEnd();
                }
                struct.setOpenedItemIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // CLOSED_ITEM_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set297 = iprot.readSetBegin();
                  struct.closedItemIds = new HashSet<String>(2*_set297.size);
                  for (int _i298 = 0; _i298 < _set297.size; ++_i298)
                  {
                    String _elem299;
                    _elem299 = iprot.readString();
                    struct.closedItemIds.add(_elem299);
                  }
                  iprot.readSetEnd();
                }
                struct.setClosedItemIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetSupportedItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.openedItemIds != null) {
          oprot.writeFieldBegin(OPENED_ITEM_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.openedItemIds.size()));
            for (String _iter300 : struct.openedItemIds)
            {
              oprot.writeString(_iter300);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.closedItemIds != null) {
          oprot.writeFieldBegin(CLOSED_ITEM_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.closedItemIds.size()));
            for (String _iter301 : struct.closedItemIds)
            {
              oprot.writeString(_iter301);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetSupportedItems_argsTupleSchemeFactory implements SchemeFactory {
      public batchSetSupportedItems_argsTupleScheme getScheme() {
        return new batchSetSupportedItems_argsTupleScheme();
      }
    }

    private static class batchSetSupportedItems_argsTupleScheme extends TupleScheme<batchSetSupportedItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetSupportedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetOpenedItemIds()) {
          optionals.set(3);
        }
        if (struct.isSetClosedItemIds()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetOpenedItemIds()) {
          {
            oprot.writeI32(struct.openedItemIds.size());
            for (String _iter302 : struct.openedItemIds)
            {
              oprot.writeString(_iter302);
            }
          }
        }
        if (struct.isSetClosedItemIds()) {
          {
            oprot.writeI32(struct.closedItemIds.size());
            for (String _iter303 : struct.closedItemIds)
            {
              oprot.writeString(_iter303);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetSupportedItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set304 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.openedItemIds = new HashSet<String>(2*_set304.size);
            for (int _i305 = 0; _i305 < _set304.size; ++_i305)
            {
              String _elem306;
              _elem306 = iprot.readString();
              struct.openedItemIds.add(_elem306);
            }
          }
          struct.setOpenedItemIdsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TSet _set307 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.closedItemIds = new HashSet<String>(2*_set307.size);
            for (int _i308 = 0; _i308 < _set307.size; ++_i308)
            {
              String _elem309;
              _elem309 = iprot.readString();
              struct.closedItemIds.add(_elem309);
            }
          }
          struct.setClosedItemIdsIsSet(true);
        }
      }
    }

  }

  public static class batchSetSupportedItems_result implements org.apache.thrift.TBase<batchSetSupportedItems_result, batchSetSupportedItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetSupportedItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetSupportedItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetSupportedItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetSupportedItems_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetSupportedItems_result.class, metaDataMap);
    }

    public batchSetSupportedItems_result() {
    }

    public batchSetSupportedItems_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetSupportedItems_result(batchSetSupportedItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public batchSetSupportedItems_result deepCopy() {
      return new batchSetSupportedItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public batchSetSupportedItems_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public batchSetSupportedItems_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetSupportedItems_result)
        return this.equals((batchSetSupportedItems_result)that);
      return false;
    }

    public boolean equals(batchSetSupportedItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetSupportedItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetSupportedItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetSupportedItems_resultStandardSchemeFactory implements SchemeFactory {
      public batchSetSupportedItems_resultStandardScheme getScheme() {
        return new batchSetSupportedItems_resultStandardScheme();
      }
    }

    private static class batchSetSupportedItems_resultStandardScheme extends StandardScheme<batchSetSupportedItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetSupportedItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetSupportedItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetSupportedItems_resultTupleSchemeFactory implements SchemeFactory {
      public batchSetSupportedItems_resultTupleScheme getScheme() {
        return new batchSetSupportedItems_resultTupleScheme();
      }
    }

    private static class batchSetSupportedItems_resultTupleScheme extends TupleScheme<batchSetSupportedItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetSupportedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetSupportedItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class batchSetTradedCommodityItems_args implements org.apache.thrift.TBase<batchSetTradedCommodityItems_args, batchSetTradedCommodityItems_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetTradedCommodityItems_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetTradedCommodityItems_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField ENABLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("enabledCommodityIds", org.apache.thrift.protocol.TType.SET, (short)4);
    private static final org.apache.thrift.protocol.TField DISABLED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("disabledCommodityIds", org.apache.thrift.protocol.TType.SET, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetTradedCommodityItems_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetTradedCommodityItems_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public int version; // required
    public Set<Long> enabledCommodityIds; // required
    public Set<Long> disabledCommodityIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      VERSION((short)3, "version"),
      ENABLED_COMMODITY_IDS((short)4, "enabledCommodityIds"),
      DISABLED_COMMODITY_IDS((short)5, "disabledCommodityIds");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // ENABLED_COMMODITY_IDS
            return ENABLED_COMMODITY_IDS;
          case 5: // DISABLED_COMMODITY_IDS
            return DISABLED_COMMODITY_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ENABLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("enabledCommodityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      tmpMap.put(_Fields.DISABLED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("disabledCommodityIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetTradedCommodityItems_args.class, metaDataMap);
    }

    public batchSetTradedCommodityItems_args() {
    }

    public batchSetTradedCommodityItems_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      int version,
      Set<Long> enabledCommodityIds,
      Set<Long> disabledCommodityIds)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.version = version;
      setVersionIsSet(true);
      this.enabledCommodityIds = enabledCommodityIds;
      this.disabledCommodityIds = disabledCommodityIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetTradedCommodityItems_args(batchSetTradedCommodityItems_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      this.version = other.version;
      if (other.isSetEnabledCommodityIds()) {
        Set<Long> __this__enabledCommodityIds = new HashSet<Long>(other.enabledCommodityIds);
        this.enabledCommodityIds = __this__enabledCommodityIds;
      }
      if (other.isSetDisabledCommodityIds()) {
        Set<Long> __this__disabledCommodityIds = new HashSet<Long>(other.disabledCommodityIds);
        this.disabledCommodityIds = __this__disabledCommodityIds;
      }
    }

    public batchSetTradedCommodityItems_args deepCopy() {
      return new batchSetTradedCommodityItems_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      setVersionIsSet(false);
      this.version = 0;
      this.enabledCommodityIds = null;
      this.disabledCommodityIds = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public batchSetTradedCommodityItems_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public batchSetTradedCommodityItems_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public int getVersion() {
      return this.version;
    }

    public batchSetTradedCommodityItems_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getEnabledCommodityIdsSize() {
      return (this.enabledCommodityIds == null) ? 0 : this.enabledCommodityIds.size();
    }

    public java.util.Iterator<Long> getEnabledCommodityIdsIterator() {
      return (this.enabledCommodityIds == null) ? null : this.enabledCommodityIds.iterator();
    }

    public void addToEnabledCommodityIds(long elem) {
      if (this.enabledCommodityIds == null) {
        this.enabledCommodityIds = new HashSet<Long>();
      }
      this.enabledCommodityIds.add(elem);
    }

    public Set<Long> getEnabledCommodityIds() {
      return this.enabledCommodityIds;
    }

    public batchSetTradedCommodityItems_args setEnabledCommodityIds(Set<Long> enabledCommodityIds) {
      this.enabledCommodityIds = enabledCommodityIds;
      return this;
    }

    public void unsetEnabledCommodityIds() {
      this.enabledCommodityIds = null;
    }

    /** Returns true if field enabledCommodityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetEnabledCommodityIds() {
      return this.enabledCommodityIds != null;
    }

    public void setEnabledCommodityIdsIsSet(boolean value) {
      if (!value) {
        this.enabledCommodityIds = null;
      }
    }

    public int getDisabledCommodityIdsSize() {
      return (this.disabledCommodityIds == null) ? 0 : this.disabledCommodityIds.size();
    }

    public java.util.Iterator<Long> getDisabledCommodityIdsIterator() {
      return (this.disabledCommodityIds == null) ? null : this.disabledCommodityIds.iterator();
    }

    public void addToDisabledCommodityIds(long elem) {
      if (this.disabledCommodityIds == null) {
        this.disabledCommodityIds = new HashSet<Long>();
      }
      this.disabledCommodityIds.add(elem);
    }

    public Set<Long> getDisabledCommodityIds() {
      return this.disabledCommodityIds;
    }

    public batchSetTradedCommodityItems_args setDisabledCommodityIds(Set<Long> disabledCommodityIds) {
      this.disabledCommodityIds = disabledCommodityIds;
      return this;
    }

    public void unsetDisabledCommodityIds() {
      this.disabledCommodityIds = null;
    }

    /** Returns true if field disabledCommodityIds is set (has been assigned a value) and false otherwise */
    public boolean isSetDisabledCommodityIds() {
      return this.disabledCommodityIds != null;
    }

    public void setDisabledCommodityIdsIsSet(boolean value) {
      if (!value) {
        this.disabledCommodityIds = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case ENABLED_COMMODITY_IDS:
        if (value == null) {
          unsetEnabledCommodityIds();
        } else {
          setEnabledCommodityIds((Set<Long>)value);
        }
        break;

      case DISABLED_COMMODITY_IDS:
        if (value == null) {
          unsetDisabledCommodityIds();
        } else {
          setDisabledCommodityIds((Set<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case VERSION:
        return Integer.valueOf(getVersion());

      case ENABLED_COMMODITY_IDS:
        return getEnabledCommodityIds();

      case DISABLED_COMMODITY_IDS:
        return getDisabledCommodityIds();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case VERSION:
        return isSetVersion();
      case ENABLED_COMMODITY_IDS:
        return isSetEnabledCommodityIds();
      case DISABLED_COMMODITY_IDS:
        return isSetDisabledCommodityIds();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetTradedCommodityItems_args)
        return this.equals((batchSetTradedCommodityItems_args)that);
      return false;
    }

    public boolean equals(batchSetTradedCommodityItems_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_enabledCommodityIds = true && this.isSetEnabledCommodityIds();
      boolean that_present_enabledCommodityIds = true && that.isSetEnabledCommodityIds();
      if (this_present_enabledCommodityIds || that_present_enabledCommodityIds) {
        if (!(this_present_enabledCommodityIds && that_present_enabledCommodityIds))
          return false;
        if (!this.enabledCommodityIds.equals(that.enabledCommodityIds))
          return false;
      }

      boolean this_present_disabledCommodityIds = true && this.isSetDisabledCommodityIds();
      boolean that_present_disabledCommodityIds = true && that.isSetDisabledCommodityIds();
      if (this_present_disabledCommodityIds || that_present_disabledCommodityIds) {
        if (!(this_present_disabledCommodityIds && that_present_disabledCommodityIds))
          return false;
        if (!this.disabledCommodityIds.equals(that.disabledCommodityIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetTradedCommodityItems_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEnabledCommodityIds()).compareTo(other.isSetEnabledCommodityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnabledCommodityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enabledCommodityIds, other.enabledCommodityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDisabledCommodityIds()).compareTo(other.isSetDisabledCommodityIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisabledCommodityIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.disabledCommodityIds, other.disabledCommodityIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("enabledCommodityIds:");
      if (this.enabledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.enabledCommodityIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("disabledCommodityIds:");
      if (this.disabledCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.disabledCommodityIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetTradedCommodityItems_argsStandardSchemeFactory implements SchemeFactory {
      public batchSetTradedCommodityItems_argsStandardScheme getScheme() {
        return new batchSetTradedCommodityItems_argsStandardScheme();
      }
    }

    private static class batchSetTradedCommodityItems_argsStandardScheme extends StandardScheme<batchSetTradedCommodityItems_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetTradedCommodityItems_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENABLED_COMMODITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set310 = iprot.readSetBegin();
                  struct.enabledCommodityIds = new HashSet<Long>(2*_set310.size);
                  for (int _i311 = 0; _i311 < _set310.size; ++_i311)
                  {
                    long _elem312;
                    _elem312 = iprot.readI64();
                    struct.enabledCommodityIds.add(_elem312);
                  }
                  iprot.readSetEnd();
                }
                struct.setEnabledCommodityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DISABLED_COMMODITY_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
                {
                  org.apache.thrift.protocol.TSet _set313 = iprot.readSetBegin();
                  struct.disabledCommodityIds = new HashSet<Long>(2*_set313.size);
                  for (int _i314 = 0; _i314 < _set313.size; ++_i314)
                  {
                    long _elem315;
                    _elem315 = iprot.readI64();
                    struct.disabledCommodityIds.add(_elem315);
                  }
                  iprot.readSetEnd();
                }
                struct.setDisabledCommodityIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetTradedCommodityItems_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.enabledCommodityIds != null) {
          oprot.writeFieldBegin(ENABLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.enabledCommodityIds.size()));
            for (long _iter316 : struct.enabledCommodityIds)
            {
              oprot.writeI64(_iter316);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.disabledCommodityIds != null) {
          oprot.writeFieldBegin(DISABLED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.disabledCommodityIds.size()));
            for (long _iter317 : struct.disabledCommodityIds)
            {
              oprot.writeI64(_iter317);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetTradedCommodityItems_argsTupleSchemeFactory implements SchemeFactory {
      public batchSetTradedCommodityItems_argsTupleScheme getScheme() {
        return new batchSetTradedCommodityItems_argsTupleScheme();
      }
    }

    private static class batchSetTradedCommodityItems_argsTupleScheme extends TupleScheme<batchSetTradedCommodityItems_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetTradedCommodityItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetEnabledCommodityIds()) {
          optionals.set(3);
        }
        if (struct.isSetDisabledCommodityIds()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetEnabledCommodityIds()) {
          {
            oprot.writeI32(struct.enabledCommodityIds.size());
            for (long _iter318 : struct.enabledCommodityIds)
            {
              oprot.writeI64(_iter318);
            }
          }
        }
        if (struct.isSetDisabledCommodityIds()) {
          {
            oprot.writeI32(struct.disabledCommodityIds.size());
            for (long _iter319 : struct.disabledCommodityIds)
            {
              oprot.writeI64(_iter319);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetTradedCommodityItems_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TSet _set320 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.enabledCommodityIds = new HashSet<Long>(2*_set320.size);
            for (int _i321 = 0; _i321 < _set320.size; ++_i321)
            {
              long _elem322;
              _elem322 = iprot.readI64();
              struct.enabledCommodityIds.add(_elem322);
            }
          }
          struct.setEnabledCommodityIdsIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TSet _set323 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.disabledCommodityIds = new HashSet<Long>(2*_set323.size);
            for (int _i324 = 0; _i324 < _set323.size; ++_i324)
            {
              long _elem325;
              _elem325 = iprot.readI64();
              struct.disabledCommodityIds.add(_elem325);
            }
          }
          struct.setDisabledCommodityIdsIsSet(true);
        }
      }
    }

  }

  public static class batchSetTradedCommodityItems_result implements org.apache.thrift.TBase<batchSetTradedCommodityItems_result, batchSetTradedCommodityItems_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetTradedCommodityItems_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetTradedCommodityItems_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetTradedCommodityItems_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetTradedCommodityItems_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetTradedCommodityItems_result.class, metaDataMap);
    }

    public batchSetTradedCommodityItems_result() {
    }

    public batchSetTradedCommodityItems_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetTradedCommodityItems_result(batchSetTradedCommodityItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public batchSetTradedCommodityItems_result deepCopy() {
      return new batchSetTradedCommodityItems_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public batchSetTradedCommodityItems_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public batchSetTradedCommodityItems_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetTradedCommodityItems_result)
        return this.equals((batchSetTradedCommodityItems_result)that);
      return false;
    }

    public boolean equals(batchSetTradedCommodityItems_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetTradedCommodityItems_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetTradedCommodityItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetTradedCommodityItems_resultStandardSchemeFactory implements SchemeFactory {
      public batchSetTradedCommodityItems_resultStandardScheme getScheme() {
        return new batchSetTradedCommodityItems_resultStandardScheme();
      }
    }

    private static class batchSetTradedCommodityItems_resultStandardScheme extends StandardScheme<batchSetTradedCommodityItems_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetTradedCommodityItems_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetTradedCommodityItems_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetTradedCommodityItems_resultTupleSchemeFactory implements SchemeFactory {
      public batchSetTradedCommodityItems_resultTupleScheme getScheme() {
        return new batchSetTradedCommodityItems_resultTupleScheme();
      }
    }

    private static class batchSetTradedCommodityItems_resultTupleScheme extends TupleScheme<batchSetTradedCommodityItems_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetTradedCommodityItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetTradedCommodityItems_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class batchSetGlobalRules_args implements org.apache.thrift.TBase<batchSetGlobalRules_args, batchSetGlobalRules_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetGlobalRules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetGlobalRules_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RULE_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("ruleItems", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetGlobalRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetGlobalRules_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public int version; // required
    public Map<String,HostingRiskRuleItem> ruleItems; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      VERSION((short)3, "version"),
      RULE_ITEMS((short)4, "ruleItems");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // RULE_ITEMS
            return RULE_ITEMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RULE_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("ruleItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetGlobalRules_args.class, metaDataMap);
    }

    public batchSetGlobalRules_args() {
    }

    public batchSetGlobalRules_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      int version,
      Map<String,HostingRiskRuleItem> ruleItems)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.version = version;
      setVersionIsSet(true);
      this.ruleItems = ruleItems;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetGlobalRules_args(batchSetGlobalRules_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      this.version = other.version;
      if (other.isSetRuleItems()) {
        Map<String,HostingRiskRuleItem> __this__ruleItems = new HashMap<String,HostingRiskRuleItem>(other.ruleItems.size());
        for (Map.Entry<String, HostingRiskRuleItem> other_element : other.ruleItems.entrySet()) {

          String other_element_key = other_element.getKey();
          HostingRiskRuleItem other_element_value = other_element.getValue();

          String __this__ruleItems_copy_key = other_element_key;

          HostingRiskRuleItem __this__ruleItems_copy_value = new HostingRiskRuleItem(other_element_value);

          __this__ruleItems.put(__this__ruleItems_copy_key, __this__ruleItems_copy_value);
        }
        this.ruleItems = __this__ruleItems;
      }
    }

    public batchSetGlobalRules_args deepCopy() {
      return new batchSetGlobalRules_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      setVersionIsSet(false);
      this.version = 0;
      this.ruleItems = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public batchSetGlobalRules_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public batchSetGlobalRules_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public int getVersion() {
      return this.version;
    }

    public batchSetGlobalRules_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getRuleItemsSize() {
      return (this.ruleItems == null) ? 0 : this.ruleItems.size();
    }

    public void putToRuleItems(String key, HostingRiskRuleItem val) {
      if (this.ruleItems == null) {
        this.ruleItems = new HashMap<String,HostingRiskRuleItem>();
      }
      this.ruleItems.put(key, val);
    }

    public Map<String,HostingRiskRuleItem> getRuleItems() {
      return this.ruleItems;
    }

    public batchSetGlobalRules_args setRuleItems(Map<String,HostingRiskRuleItem> ruleItems) {
      this.ruleItems = ruleItems;
      return this;
    }

    public void unsetRuleItems() {
      this.ruleItems = null;
    }

    /** Returns true if field ruleItems is set (has been assigned a value) and false otherwise */
    public boolean isSetRuleItems() {
      return this.ruleItems != null;
    }

    public void setRuleItemsIsSet(boolean value) {
      if (!value) {
        this.ruleItems = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case RULE_ITEMS:
        if (value == null) {
          unsetRuleItems();
        } else {
          setRuleItems((Map<String,HostingRiskRuleItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case VERSION:
        return Integer.valueOf(getVersion());

      case RULE_ITEMS:
        return getRuleItems();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case VERSION:
        return isSetVersion();
      case RULE_ITEMS:
        return isSetRuleItems();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetGlobalRules_args)
        return this.equals((batchSetGlobalRules_args)that);
      return false;
    }

    public boolean equals(batchSetGlobalRules_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_ruleItems = true && this.isSetRuleItems();
      boolean that_present_ruleItems = true && that.isSetRuleItems();
      if (this_present_ruleItems || that_present_ruleItems) {
        if (!(this_present_ruleItems && that_present_ruleItems))
          return false;
        if (!this.ruleItems.equals(that.ruleItems))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetGlobalRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRuleItems()).compareTo(other.isSetRuleItems());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRuleItems()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ruleItems, other.ruleItems);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetGlobalRules_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ruleItems:");
      if (this.ruleItems == null) {
        sb.append("null");
      } else {
        sb.append(this.ruleItems);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetGlobalRules_argsStandardSchemeFactory implements SchemeFactory {
      public batchSetGlobalRules_argsStandardScheme getScheme() {
        return new batchSetGlobalRules_argsStandardScheme();
      }
    }

    private static class batchSetGlobalRules_argsStandardScheme extends StandardScheme<batchSetGlobalRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetGlobalRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RULE_ITEMS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map326 = iprot.readMapBegin();
                  struct.ruleItems = new HashMap<String,HostingRiskRuleItem>(2*_map326.size);
                  for (int _i327 = 0; _i327 < _map326.size; ++_i327)
                  {
                    String _key328;
                    HostingRiskRuleItem _val329;
                    _key328 = iprot.readString();
                    _val329 = new HostingRiskRuleItem();
                    _val329.read(iprot);
                    struct.ruleItems.put(_key328, _val329);
                  }
                  iprot.readMapEnd();
                }
                struct.setRuleItemsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetGlobalRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.ruleItems != null) {
          oprot.writeFieldBegin(RULE_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.ruleItems.size()));
            for (Map.Entry<String, HostingRiskRuleItem> _iter330 : struct.ruleItems.entrySet())
            {
              oprot.writeString(_iter330.getKey());
              _iter330.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetGlobalRules_argsTupleSchemeFactory implements SchemeFactory {
      public batchSetGlobalRules_argsTupleScheme getScheme() {
        return new batchSetGlobalRules_argsTupleScheme();
      }
    }

    private static class batchSetGlobalRules_argsTupleScheme extends TupleScheme<batchSetGlobalRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetGlobalRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetRuleItems()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetRuleItems()) {
          {
            oprot.writeI32(struct.ruleItems.size());
            for (Map.Entry<String, HostingRiskRuleItem> _iter331 : struct.ruleItems.entrySet())
            {
              oprot.writeString(_iter331.getKey());
              _iter331.getValue().write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetGlobalRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map332 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.ruleItems = new HashMap<String,HostingRiskRuleItem>(2*_map332.size);
            for (int _i333 = 0; _i333 < _map332.size; ++_i333)
            {
              String _key334;
              HostingRiskRuleItem _val335;
              _key334 = iprot.readString();
              _val335 = new HostingRiskRuleItem();
              _val335.read(iprot);
              struct.ruleItems.put(_key334, _val335);
            }
          }
          struct.setRuleItemsIsSet(true);
        }
      }
    }

  }

  public static class batchSetGlobalRules_result implements org.apache.thrift.TBase<batchSetGlobalRules_result, batchSetGlobalRules_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetGlobalRules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetGlobalRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetGlobalRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetGlobalRules_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetGlobalRules_result.class, metaDataMap);
    }

    public batchSetGlobalRules_result() {
    }

    public batchSetGlobalRules_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetGlobalRules_result(batchSetGlobalRules_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public batchSetGlobalRules_result deepCopy() {
      return new batchSetGlobalRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public batchSetGlobalRules_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public batchSetGlobalRules_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetGlobalRules_result)
        return this.equals((batchSetGlobalRules_result)that);
      return false;
    }

    public boolean equals(batchSetGlobalRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetGlobalRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetGlobalRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetGlobalRules_resultStandardSchemeFactory implements SchemeFactory {
      public batchSetGlobalRules_resultStandardScheme getScheme() {
        return new batchSetGlobalRules_resultStandardScheme();
      }
    }

    private static class batchSetGlobalRules_resultStandardScheme extends StandardScheme<batchSetGlobalRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetGlobalRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetGlobalRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetGlobalRules_resultTupleSchemeFactory implements SchemeFactory {
      public batchSetGlobalRules_resultTupleScheme getScheme() {
        return new batchSetGlobalRules_resultTupleScheme();
      }
    }

    private static class batchSetGlobalRules_resultTupleScheme extends TupleScheme<batchSetGlobalRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetGlobalRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetGlobalRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class batchSetCommodityRules_args implements org.apache.thrift.TBase<batchSetCommodityRules_args, batchSetCommodityRules_args._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetCommodityRules_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetCommodityRules_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("rules", org.apache.thrift.protocol.TType.MAP, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetCommodityRules_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetCommodityRules_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public int version; // required
    public Map<Long,Map<String,HostingRiskRuleItem>> rules; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      VERSION((short)3, "version"),
      RULES((short)4, "rules");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // RULES
            return RULES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RULES, new org.apache.thrift.meta_data.FieldMetaData("rules", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleItem.class)))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetCommodityRules_args.class, metaDataMap);
    }

    public batchSetCommodityRules_args() {
    }

    public batchSetCommodityRules_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      int version,
      Map<Long,Map<String,HostingRiskRuleItem>> rules)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.version = version;
      setVersionIsSet(true);
      this.rules = rules;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetCommodityRules_args(batchSetCommodityRules_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      this.version = other.version;
      if (other.isSetRules()) {
        Map<Long,Map<String,HostingRiskRuleItem>> __this__rules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(other.rules.size());
        for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> other_element : other.rules.entrySet()) {

          Long other_element_key = other_element.getKey();
          Map<String,HostingRiskRuleItem> other_element_value = other_element.getValue();

          Long __this__rules_copy_key = other_element_key;

          Map<String,HostingRiskRuleItem> __this__rules_copy_value = new HashMap<String,HostingRiskRuleItem>(other_element_value.size());
          for (Map.Entry<String, HostingRiskRuleItem> other_element_value_element : other_element_value.entrySet()) {

            String other_element_value_element_key = other_element_value_element.getKey();
            HostingRiskRuleItem other_element_value_element_value = other_element_value_element.getValue();

            String __this__rules_copy_value_copy_key = other_element_value_element_key;

            HostingRiskRuleItem __this__rules_copy_value_copy_value = new HostingRiskRuleItem(other_element_value_element_value);

            __this__rules_copy_value.put(__this__rules_copy_value_copy_key, __this__rules_copy_value_copy_value);
          }

          __this__rules.put(__this__rules_copy_key, __this__rules_copy_value);
        }
        this.rules = __this__rules;
      }
    }

    public batchSetCommodityRules_args deepCopy() {
      return new batchSetCommodityRules_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      setVersionIsSet(false);
      this.version = 0;
      this.rules = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public batchSetCommodityRules_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public batchSetCommodityRules_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public int getVersion() {
      return this.version;
    }

    public batchSetCommodityRules_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public int getRulesSize() {
      return (this.rules == null) ? 0 : this.rules.size();
    }

    public void putToRules(long key, Map<String,HostingRiskRuleItem> val) {
      if (this.rules == null) {
        this.rules = new HashMap<Long,Map<String,HostingRiskRuleItem>>();
      }
      this.rules.put(key, val);
    }

    public Map<Long,Map<String,HostingRiskRuleItem>> getRules() {
      return this.rules;
    }

    public batchSetCommodityRules_args setRules(Map<Long,Map<String,HostingRiskRuleItem>> rules) {
      this.rules = rules;
      return this;
    }

    public void unsetRules() {
      this.rules = null;
    }

    /** Returns true if field rules is set (has been assigned a value) and false otherwise */
    public boolean isSetRules() {
      return this.rules != null;
    }

    public void setRulesIsSet(boolean value) {
      if (!value) {
        this.rules = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case RULES:
        if (value == null) {
          unsetRules();
        } else {
          setRules((Map<Long,Map<String,HostingRiskRuleItem>>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case VERSION:
        return Integer.valueOf(getVersion());

      case RULES:
        return getRules();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case VERSION:
        return isSetVersion();
      case RULES:
        return isSetRules();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetCommodityRules_args)
        return this.equals((batchSetCommodityRules_args)that);
      return false;
    }

    public boolean equals(batchSetCommodityRules_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_rules = true && this.isSetRules();
      boolean that_present_rules = true && that.isSetRules();
      if (this_present_rules || that_present_rules) {
        if (!(this_present_rules && that_present_rules))
          return false;
        if (!this.rules.equals(that.rules))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetCommodityRules_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRules()).compareTo(other.isSetRules());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRules()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rules, other.rules);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetCommodityRules_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rules:");
      if (this.rules == null) {
        sb.append("null");
      } else {
        sb.append(this.rules);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetCommodityRules_argsStandardSchemeFactory implements SchemeFactory {
      public batchSetCommodityRules_argsStandardScheme getScheme() {
        return new batchSetCommodityRules_argsStandardScheme();
      }
    }

    private static class batchSetCommodityRules_argsStandardScheme extends StandardScheme<batchSetCommodityRules_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetCommodityRules_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RULES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map336 = iprot.readMapBegin();
                  struct.rules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(2*_map336.size);
                  for (int _i337 = 0; _i337 < _map336.size; ++_i337)
                  {
                    long _key338;
                    Map<String,HostingRiskRuleItem> _val339;
                    _key338 = iprot.readI64();
                    {
                      org.apache.thrift.protocol.TMap _map340 = iprot.readMapBegin();
                      _val339 = new HashMap<String,HostingRiskRuleItem>(2*_map340.size);
                      for (int _i341 = 0; _i341 < _map340.size; ++_i341)
                      {
                        String _key342;
                        HostingRiskRuleItem _val343;
                        _key342 = iprot.readString();
                        _val343 = new HostingRiskRuleItem();
                        _val343.read(iprot);
                        _val339.put(_key342, _val343);
                      }
                      iprot.readMapEnd();
                    }
                    struct.rules.put(_key338, _val339);
                  }
                  iprot.readMapEnd();
                }
                struct.setRulesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetCommodityRules_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        if (struct.rules != null) {
          oprot.writeFieldBegin(RULES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, struct.rules.size()));
            for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> _iter344 : struct.rules.entrySet())
            {
              oprot.writeI64(_iter344.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter344.getValue().size()));
                for (Map.Entry<String, HostingRiskRuleItem> _iter345 : _iter344.getValue().entrySet())
                {
                  oprot.writeString(_iter345.getKey());
                  _iter345.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetCommodityRules_argsTupleSchemeFactory implements SchemeFactory {
      public batchSetCommodityRules_argsTupleScheme getScheme() {
        return new batchSetCommodityRules_argsTupleScheme();
      }
    }

    private static class batchSetCommodityRules_argsTupleScheme extends TupleScheme<batchSetCommodityRules_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetCommodityRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetRules()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetRules()) {
          {
            oprot.writeI32(struct.rules.size());
            for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> _iter346 : struct.rules.entrySet())
            {
              oprot.writeI64(_iter346.getKey());
              {
                oprot.writeI32(_iter346.getValue().size());
                for (Map.Entry<String, HostingRiskRuleItem> _iter347 : _iter346.getValue().entrySet())
                {
                  oprot.writeString(_iter347.getKey());
                  _iter347.getValue().write(oprot);
                }
              }
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetCommodityRules_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          {
            org.apache.thrift.protocol.TMap _map348 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.rules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(2*_map348.size);
            for (int _i349 = 0; _i349 < _map348.size; ++_i349)
            {
              long _key350;
              Map<String,HostingRiskRuleItem> _val351;
              _key350 = iprot.readI64();
              {
                org.apache.thrift.protocol.TMap _map352 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                _val351 = new HashMap<String,HostingRiskRuleItem>(2*_map352.size);
                for (int _i353 = 0; _i353 < _map352.size; ++_i353)
                {
                  String _key354;
                  HostingRiskRuleItem _val355;
                  _key354 = iprot.readString();
                  _val355 = new HostingRiskRuleItem();
                  _val355.read(iprot);
                  _val351.put(_key354, _val355);
                }
              }
              struct.rules.put(_key350, _val351);
            }
          }
          struct.setRulesIsSet(true);
        }
      }
    }

  }

  public static class batchSetCommodityRules_result implements org.apache.thrift.TBase<batchSetCommodityRules_result, batchSetCommodityRules_result._Fields>, java.io.Serializable, Cloneable, Comparable<batchSetCommodityRules_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("batchSetCommodityRules_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new batchSetCommodityRules_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new batchSetCommodityRules_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(batchSetCommodityRules_result.class, metaDataMap);
    }

    public batchSetCommodityRules_result() {
    }

    public batchSetCommodityRules_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public batchSetCommodityRules_result(batchSetCommodityRules_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public batchSetCommodityRules_result deepCopy() {
      return new batchSetCommodityRules_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public batchSetCommodityRules_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public batchSetCommodityRules_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof batchSetCommodityRules_result)
        return this.equals((batchSetCommodityRules_result)that);
      return false;
    }

    public boolean equals(batchSetCommodityRules_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(batchSetCommodityRules_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("batchSetCommodityRules_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class batchSetCommodityRules_resultStandardSchemeFactory implements SchemeFactory {
      public batchSetCommodityRules_resultStandardScheme getScheme() {
        return new batchSetCommodityRules_resultStandardScheme();
      }
    }

    private static class batchSetCommodityRules_resultStandardScheme extends StandardScheme<batchSetCommodityRules_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, batchSetCommodityRules_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, batchSetCommodityRules_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class batchSetCommodityRules_resultTupleSchemeFactory implements SchemeFactory {
      public batchSetCommodityRules_resultTupleScheme getScheme() {
        return new batchSetCommodityRules_resultTupleScheme();
      }
    }

    private static class batchSetCommodityRules_resultTupleScheme extends TupleScheme<batchSetCommodityRules_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, batchSetCommodityRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, batchSetCommodityRules_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class setRiskEnabled_args implements org.apache.thrift.TBase<setRiskEnabled_args, setRiskEnabled_args._Fields>, java.io.Serializable, Cloneable, Comparable<setRiskEnabled_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRiskEnabled_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField RISK_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("riskEnabled", org.apache.thrift.protocol.TType.BOOL, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRiskEnabled_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRiskEnabled_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public int version; // required
    public boolean riskEnabled; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      VERSION((short)3, "version"),
      RISK_ENABLED((short)4, "riskEnabled");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // VERSION
            return VERSION;
          case 4: // RISK_ENABLED
            return RISK_ENABLED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private static final int __VERSION_ISSET_ID = 1;
    private static final int __RISKENABLED_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RISK_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("riskEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRiskEnabled_args.class, metaDataMap);
    }

    public setRiskEnabled_args() {
    }

    public setRiskEnabled_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      int version,
      boolean riskEnabled)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.version = version;
      setVersionIsSet(true);
      this.riskEnabled = riskEnabled;
      setRiskEnabledIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRiskEnabled_args(setRiskEnabled_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      this.version = other.version;
      this.riskEnabled = other.riskEnabled;
    }

    public setRiskEnabled_args deepCopy() {
      return new setRiskEnabled_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      setVersionIsSet(false);
      this.version = 0;
      setRiskEnabledIsSet(false);
      this.riskEnabled = false;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public setRiskEnabled_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public setRiskEnabled_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public int getVersion() {
      return this.version;
    }

    public setRiskEnabled_args setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public boolean isRiskEnabled() {
      return this.riskEnabled;
    }

    public setRiskEnabled_args setRiskEnabled(boolean riskEnabled) {
      this.riskEnabled = riskEnabled;
      setRiskEnabledIsSet(true);
      return this;
    }

    public void unsetRiskEnabled() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKENABLED_ISSET_ID);
    }

    /** Returns true if field riskEnabled is set (has been assigned a value) and false otherwise */
    public boolean isSetRiskEnabled() {
      return EncodingUtils.testBit(__isset_bitfield, __RISKENABLED_ISSET_ID);
    }

    public void setRiskEnabledIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKENABLED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Integer)value);
        }
        break;

      case RISK_ENABLED:
        if (value == null) {
          unsetRiskEnabled();
        } else {
          setRiskEnabled((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case VERSION:
        return Integer.valueOf(getVersion());

      case RISK_ENABLED:
        return Boolean.valueOf(isRiskEnabled());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case VERSION:
        return isSetVersion();
      case RISK_ENABLED:
        return isSetRiskEnabled();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRiskEnabled_args)
        return this.equals((setRiskEnabled_args)that);
      return false;
    }

    public boolean equals(setRiskEnabled_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_riskEnabled = true;
      boolean that_present_riskEnabled = true;
      if (this_present_riskEnabled || that_present_riskEnabled) {
        if (!(this_present_riskEnabled && that_present_riskEnabled))
          return false;
        if (this.riskEnabled != that.riskEnabled)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setRiskEnabled_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRiskEnabled()).compareTo(other.isSetRiskEnabled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRiskEnabled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskEnabled, other.riskEnabled);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRiskEnabled_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("riskEnabled:");
      sb.append(this.riskEnabled);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRiskEnabled_argsStandardSchemeFactory implements SchemeFactory {
      public setRiskEnabled_argsStandardScheme getScheme() {
        return new setRiskEnabled_argsStandardScheme();
      }
    }

    private static class setRiskEnabled_argsStandardScheme extends StandardScheme<setRiskEnabled_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRiskEnabled_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.version = iprot.readI32();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RISK_ENABLED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.riskEnabled = iprot.readBool();
                struct.setRiskEnabledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRiskEnabled_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(RISK_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.riskEnabled);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRiskEnabled_argsTupleSchemeFactory implements SchemeFactory {
      public setRiskEnabled_argsTupleScheme getScheme() {
        return new setRiskEnabled_argsTupleScheme();
      }
    }

    private static class setRiskEnabled_argsTupleScheme extends TupleScheme<setRiskEnabled_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRiskEnabled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetVersion()) {
          optionals.set(2);
        }
        if (struct.isSetRiskEnabled()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetVersion()) {
          oprot.writeI32(struct.version);
        }
        if (struct.isSetRiskEnabled()) {
          oprot.writeBool(struct.riskEnabled);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRiskEnabled_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.version = iprot.readI32();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(3)) {
          struct.riskEnabled = iprot.readBool();
          struct.setRiskEnabledIsSet(true);
        }
      }
    }

  }

  public static class setRiskEnabled_result implements org.apache.thrift.TBase<setRiskEnabled_result, setRiskEnabled_result._Fields>, java.io.Serializable, Cloneable, Comparable<setRiskEnabled_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setRiskEnabled_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setRiskEnabled_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setRiskEnabled_resultTupleSchemeFactory());
    }

    public HostingRiskRuleJoint success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleJoint.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRiskEnabled_result.class, metaDataMap);
    }

    public setRiskEnabled_result() {
    }

    public setRiskEnabled_result(
      HostingRiskRuleJoint success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setRiskEnabled_result(setRiskEnabled_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskRuleJoint(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public setRiskEnabled_result deepCopy() {
      return new setRiskEnabled_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskRuleJoint getSuccess() {
      return this.success;
    }

    public setRiskEnabled_result setSuccess(HostingRiskRuleJoint success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public setRiskEnabled_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskRuleJoint)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setRiskEnabled_result)
        return this.equals((setRiskEnabled_result)that);
      return false;
    }

    public boolean equals(setRiskEnabled_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setRiskEnabled_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setRiskEnabled_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setRiskEnabled_resultStandardSchemeFactory implements SchemeFactory {
      public setRiskEnabled_resultStandardScheme getScheme() {
        return new setRiskEnabled_resultStandardScheme();
      }
    }

    private static class setRiskEnabled_resultStandardScheme extends StandardScheme<setRiskEnabled_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setRiskEnabled_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskRuleJoint();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setRiskEnabled_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setRiskEnabled_resultTupleSchemeFactory implements SchemeFactory {
      public setRiskEnabled_resultTupleScheme getScheme() {
        return new setRiskEnabled_resultTupleScheme();
      }
    }

    private static class setRiskEnabled_resultTupleScheme extends TupleScheme<setRiskEnabled_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setRiskEnabled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setRiskEnabled_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskRuleJoint();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class getRiskFrameDataInfo_args implements org.apache.thrift.TBase<getRiskFrameDataInfo_args, getRiskFrameDataInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskFrameDataInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskFrameDataInfo_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskFrameDataInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskFrameDataInfo_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskFrameDataInfo_args.class, metaDataMap);
    }

    public getRiskFrameDataInfo_args() {
    }

    public getRiskFrameDataInfo_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskFrameDataInfo_args(getRiskFrameDataInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
    }

    public getRiskFrameDataInfo_args deepCopy() {
      return new getRiskFrameDataInfo_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public getRiskFrameDataInfo_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public getRiskFrameDataInfo_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskFrameDataInfo_args)
        return this.equals((getRiskFrameDataInfo_args)that);
      return false;
    }

    public boolean equals(getRiskFrameDataInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskFrameDataInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskFrameDataInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getRiskFrameDataInfo_argsStandardScheme getScheme() {
        return new getRiskFrameDataInfo_argsStandardScheme();
      }
    }

    private static class getRiskFrameDataInfo_argsStandardScheme extends StandardScheme<getRiskFrameDataInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskFrameDataInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskFrameDataInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskFrameDataInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getRiskFrameDataInfo_argsTupleScheme getScheme() {
        return new getRiskFrameDataInfo_argsTupleScheme();
      }
    }

    private static class getRiskFrameDataInfo_argsTupleScheme extends TupleScheme<getRiskFrameDataInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskFrameDataInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskFrameDataInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
      }
    }

  }

  public static class getRiskFrameDataInfo_result implements org.apache.thrift.TBase<getRiskFrameDataInfo_result, getRiskFrameDataInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRiskFrameDataInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRiskFrameDataInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRiskFrameDataInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRiskFrameDataInfo_resultTupleSchemeFactory());
    }

    public HostingRiskFrameDataInfo success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskFrameDataInfo.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRiskFrameDataInfo_result.class, metaDataMap);
    }

    public getRiskFrameDataInfo_result() {
    }

    public getRiskFrameDataInfo_result(
      HostingRiskFrameDataInfo success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRiskFrameDataInfo_result(getRiskFrameDataInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingRiskFrameDataInfo(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public getRiskFrameDataInfo_result deepCopy() {
      return new getRiskFrameDataInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingRiskFrameDataInfo getSuccess() {
      return this.success;
    }

    public getRiskFrameDataInfo_result setSuccess(HostingRiskFrameDataInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public getRiskFrameDataInfo_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingRiskFrameDataInfo)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRiskFrameDataInfo_result)
        return this.equals((getRiskFrameDataInfo_result)that);
      return false;
    }

    public boolean equals(getRiskFrameDataInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRiskFrameDataInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRiskFrameDataInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRiskFrameDataInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getRiskFrameDataInfo_resultStandardScheme getScheme() {
        return new getRiskFrameDataInfo_resultStandardScheme();
      }
    }

    private static class getRiskFrameDataInfo_resultStandardScheme extends StandardScheme<getRiskFrameDataInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRiskFrameDataInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingRiskFrameDataInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRiskFrameDataInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRiskFrameDataInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getRiskFrameDataInfo_resultTupleScheme getScheme() {
        return new getRiskFrameDataInfo_resultTupleScheme();
      }
    }

    private static class getRiskFrameDataInfo_resultTupleScheme extends TupleScheme<getRiskFrameDataInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRiskFrameDataInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRiskFrameDataInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingRiskFrameDataInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
