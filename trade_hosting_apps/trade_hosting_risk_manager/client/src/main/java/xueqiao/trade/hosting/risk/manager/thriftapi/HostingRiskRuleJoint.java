/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.risk.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 风控结构
 */
public class HostingRiskRuleJoint implements org.apache.thrift.TBase<HostingRiskRuleJoint, HostingRiskRuleJoint._Fields>, java.io.Serializable, Cloneable, Comparable<HostingRiskRuleJoint> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingRiskRuleJoint");

  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField RISK_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("riskEnabled", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField GLOBAL_OPENED_ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("globalOpenedItemIds", org.apache.thrift.protocol.TType.SET, (short)4);
  private static final org.apache.thrift.protocol.TField GLOBAL_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("globalRules", org.apache.thrift.protocol.TType.MAP, (short)5);
  private static final org.apache.thrift.protocol.TField TRADED_COMMODITY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("tradedCommodityIds", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField COMMODITY_RULES_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityRules", org.apache.thrift.protocol.TType.MAP, (short)7);
  private static final org.apache.thrift.protocol.TField COMMODITY_OPENED_ITEM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("commodityOpenedItemIds", org.apache.thrift.protocol.TType.SET, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingRiskRuleJointStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingRiskRuleJointTupleSchemeFactory());
  }

  public int version; // optional
  public long subAccountId; // optional
  public boolean riskEnabled; // optional
  public Set<String> globalOpenedItemIds; // optional
  public Map<String,HostingRiskRuleItem> globalRules; // optional
  public Set<Long> tradedCommodityIds; // optional
  public Map<Long,Map<String,HostingRiskRuleItem>> commodityRules; // optional
  public Set<String> commodityOpenedItemIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VERSION((short)1, "version"),
    SUB_ACCOUNT_ID((short)2, "subAccountId"),
    RISK_ENABLED((short)3, "riskEnabled"),
    GLOBAL_OPENED_ITEM_IDS((short)4, "globalOpenedItemIds"),
    GLOBAL_RULES((short)5, "globalRules"),
    TRADED_COMMODITY_IDS((short)6, "tradedCommodityIds"),
    COMMODITY_RULES((short)7, "commodityRules"),
    COMMODITY_OPENED_ITEM_IDS((short)8, "commodityOpenedItemIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VERSION
          return VERSION;
        case 2: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 3: // RISK_ENABLED
          return RISK_ENABLED;
        case 4: // GLOBAL_OPENED_ITEM_IDS
          return GLOBAL_OPENED_ITEM_IDS;
        case 5: // GLOBAL_RULES
          return GLOBAL_RULES;
        case 6: // TRADED_COMMODITY_IDS
          return TRADED_COMMODITY_IDS;
        case 7: // COMMODITY_RULES
          return COMMODITY_RULES;
        case 8: // COMMODITY_OPENED_ITEM_IDS
          return COMMODITY_OPENED_ITEM_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __SUBACCOUNTID_ISSET_ID = 1;
  private static final int __RISKENABLED_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.VERSION,_Fields.SUB_ACCOUNT_ID,_Fields.RISK_ENABLED,_Fields.GLOBAL_OPENED_ITEM_IDS,_Fields.GLOBAL_RULES,_Fields.TRADED_COMMODITY_IDS,_Fields.COMMODITY_RULES,_Fields.COMMODITY_OPENED_ITEM_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.RISK_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("riskEnabled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.GLOBAL_OPENED_ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("globalOpenedItemIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GLOBAL_RULES, new org.apache.thrift.meta_data.FieldMetaData("globalRules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleItem.class))));
    tmpMap.put(_Fields.TRADED_COMMODITY_IDS, new org.apache.thrift.meta_data.FieldMetaData("tradedCommodityIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COMMODITY_RULES, new org.apache.thrift.meta_data.FieldMetaData("commodityRules", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleItem.class)))));
    tmpMap.put(_Fields.COMMODITY_OPENED_ITEM_IDS, new org.apache.thrift.meta_data.FieldMetaData("commodityOpenedItemIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingRiskRuleJoint.class, metaDataMap);
  }

  public HostingRiskRuleJoint() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingRiskRuleJoint(HostingRiskRuleJoint other) {
    __isset_bitfield = other.__isset_bitfield;
    this.version = other.version;
    this.subAccountId = other.subAccountId;
    this.riskEnabled = other.riskEnabled;
    if (other.isSetGlobalOpenedItemIds()) {
      Set<String> __this__globalOpenedItemIds = new HashSet<String>(other.globalOpenedItemIds);
      this.globalOpenedItemIds = __this__globalOpenedItemIds;
    }
    if (other.isSetGlobalRules()) {
      Map<String,HostingRiskRuleItem> __this__globalRules = new HashMap<String,HostingRiskRuleItem>(other.globalRules.size());
      for (Map.Entry<String, HostingRiskRuleItem> other_element : other.globalRules.entrySet()) {

        String other_element_key = other_element.getKey();
        HostingRiskRuleItem other_element_value = other_element.getValue();

        String __this__globalRules_copy_key = other_element_key;

        HostingRiskRuleItem __this__globalRules_copy_value = new HostingRiskRuleItem(other_element_value);

        __this__globalRules.put(__this__globalRules_copy_key, __this__globalRules_copy_value);
      }
      this.globalRules = __this__globalRules;
    }
    if (other.isSetTradedCommodityIds()) {
      Set<Long> __this__tradedCommodityIds = new HashSet<Long>(other.tradedCommodityIds);
      this.tradedCommodityIds = __this__tradedCommodityIds;
    }
    if (other.isSetCommodityRules()) {
      Map<Long,Map<String,HostingRiskRuleItem>> __this__commodityRules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(other.commodityRules.size());
      for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> other_element : other.commodityRules.entrySet()) {

        Long other_element_key = other_element.getKey();
        Map<String,HostingRiskRuleItem> other_element_value = other_element.getValue();

        Long __this__commodityRules_copy_key = other_element_key;

        Map<String,HostingRiskRuleItem> __this__commodityRules_copy_value = new HashMap<String,HostingRiskRuleItem>(other_element_value.size());
        for (Map.Entry<String, HostingRiskRuleItem> other_element_value_element : other_element_value.entrySet()) {

          String other_element_value_element_key = other_element_value_element.getKey();
          HostingRiskRuleItem other_element_value_element_value = other_element_value_element.getValue();

          String __this__commodityRules_copy_value_copy_key = other_element_value_element_key;

          HostingRiskRuleItem __this__commodityRules_copy_value_copy_value = new HostingRiskRuleItem(other_element_value_element_value);

          __this__commodityRules_copy_value.put(__this__commodityRules_copy_value_copy_key, __this__commodityRules_copy_value_copy_value);
        }

        __this__commodityRules.put(__this__commodityRules_copy_key, __this__commodityRules_copy_value);
      }
      this.commodityRules = __this__commodityRules;
    }
    if (other.isSetCommodityOpenedItemIds()) {
      Set<String> __this__commodityOpenedItemIds = new HashSet<String>(other.commodityOpenedItemIds);
      this.commodityOpenedItemIds = __this__commodityOpenedItemIds;
    }
  }

  public HostingRiskRuleJoint deepCopy() {
    return new HostingRiskRuleJoint(this);
  }

  @Override
  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    setRiskEnabledIsSet(false);
    this.riskEnabled = false;
    this.globalOpenedItemIds = null;
    this.globalRules = null;
    this.tradedCommodityIds = null;
    this.commodityRules = null;
    this.commodityOpenedItemIds = null;
  }

  public int getVersion() {
    return this.version;
  }

  public HostingRiskRuleJoint setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingRiskRuleJoint setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public boolean isRiskEnabled() {
    return this.riskEnabled;
  }

  public HostingRiskRuleJoint setRiskEnabled(boolean riskEnabled) {
    this.riskEnabled = riskEnabled;
    setRiskEnabledIsSet(true);
    return this;
  }

  public void unsetRiskEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKENABLED_ISSET_ID);
  }

  /** Returns true if field riskEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKENABLED_ISSET_ID);
  }

  public void setRiskEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKENABLED_ISSET_ID, value);
  }

  public int getGlobalOpenedItemIdsSize() {
    return (this.globalOpenedItemIds == null) ? 0 : this.globalOpenedItemIds.size();
  }

  public java.util.Iterator<String> getGlobalOpenedItemIdsIterator() {
    return (this.globalOpenedItemIds == null) ? null : this.globalOpenedItemIds.iterator();
  }

  public void addToGlobalOpenedItemIds(String elem) {
    if (this.globalOpenedItemIds == null) {
      this.globalOpenedItemIds = new HashSet<String>();
    }
    this.globalOpenedItemIds.add(elem);
  }

  public Set<String> getGlobalOpenedItemIds() {
    return this.globalOpenedItemIds;
  }

  public HostingRiskRuleJoint setGlobalOpenedItemIds(Set<String> globalOpenedItemIds) {
    this.globalOpenedItemIds = globalOpenedItemIds;
    return this;
  }

  public void unsetGlobalOpenedItemIds() {
    this.globalOpenedItemIds = null;
  }

  /** Returns true if field globalOpenedItemIds is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalOpenedItemIds() {
    return this.globalOpenedItemIds != null;
  }

  public void setGlobalOpenedItemIdsIsSet(boolean value) {
    if (!value) {
      this.globalOpenedItemIds = null;
    }
  }

  public int getGlobalRulesSize() {
    return (this.globalRules == null) ? 0 : this.globalRules.size();
  }

  public void putToGlobalRules(String key, HostingRiskRuleItem val) {
    if (this.globalRules == null) {
      this.globalRules = new HashMap<String,HostingRiskRuleItem>();
    }
    this.globalRules.put(key, val);
  }

  public Map<String,HostingRiskRuleItem> getGlobalRules() {
    return this.globalRules;
  }

  public HostingRiskRuleJoint setGlobalRules(Map<String,HostingRiskRuleItem> globalRules) {
    this.globalRules = globalRules;
    return this;
  }

  public void unsetGlobalRules() {
    this.globalRules = null;
  }

  /** Returns true if field globalRules is set (has been assigned a value) and false otherwise */
  public boolean isSetGlobalRules() {
    return this.globalRules != null;
  }

  public void setGlobalRulesIsSet(boolean value) {
    if (!value) {
      this.globalRules = null;
    }
  }

  public int getTradedCommodityIdsSize() {
    return (this.tradedCommodityIds == null) ? 0 : this.tradedCommodityIds.size();
  }

  public java.util.Iterator<Long> getTradedCommodityIdsIterator() {
    return (this.tradedCommodityIds == null) ? null : this.tradedCommodityIds.iterator();
  }

  public void addToTradedCommodityIds(long elem) {
    if (this.tradedCommodityIds == null) {
      this.tradedCommodityIds = new HashSet<Long>();
    }
    this.tradedCommodityIds.add(elem);
  }

  public Set<Long> getTradedCommodityIds() {
    return this.tradedCommodityIds;
  }

  public HostingRiskRuleJoint setTradedCommodityIds(Set<Long> tradedCommodityIds) {
    this.tradedCommodityIds = tradedCommodityIds;
    return this;
  }

  public void unsetTradedCommodityIds() {
    this.tradedCommodityIds = null;
  }

  /** Returns true if field tradedCommodityIds is set (has been assigned a value) and false otherwise */
  public boolean isSetTradedCommodityIds() {
    return this.tradedCommodityIds != null;
  }

  public void setTradedCommodityIdsIsSet(boolean value) {
    if (!value) {
      this.tradedCommodityIds = null;
    }
  }

  public int getCommodityRulesSize() {
    return (this.commodityRules == null) ? 0 : this.commodityRules.size();
  }

  public void putToCommodityRules(long key, Map<String,HostingRiskRuleItem> val) {
    if (this.commodityRules == null) {
      this.commodityRules = new HashMap<Long,Map<String,HostingRiskRuleItem>>();
    }
    this.commodityRules.put(key, val);
  }

  public Map<Long,Map<String,HostingRiskRuleItem>> getCommodityRules() {
    return this.commodityRules;
  }

  public HostingRiskRuleJoint setCommodityRules(Map<Long,Map<String,HostingRiskRuleItem>> commodityRules) {
    this.commodityRules = commodityRules;
    return this;
  }

  public void unsetCommodityRules() {
    this.commodityRules = null;
  }

  /** Returns true if field commodityRules is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityRules() {
    return this.commodityRules != null;
  }

  public void setCommodityRulesIsSet(boolean value) {
    if (!value) {
      this.commodityRules = null;
    }
  }

  public int getCommodityOpenedItemIdsSize() {
    return (this.commodityOpenedItemIds == null) ? 0 : this.commodityOpenedItemIds.size();
  }

  public java.util.Iterator<String> getCommodityOpenedItemIdsIterator() {
    return (this.commodityOpenedItemIds == null) ? null : this.commodityOpenedItemIds.iterator();
  }

  public void addToCommodityOpenedItemIds(String elem) {
    if (this.commodityOpenedItemIds == null) {
      this.commodityOpenedItemIds = new HashSet<String>();
    }
    this.commodityOpenedItemIds.add(elem);
  }

  public Set<String> getCommodityOpenedItemIds() {
    return this.commodityOpenedItemIds;
  }

  public HostingRiskRuleJoint setCommodityOpenedItemIds(Set<String> commodityOpenedItemIds) {
    this.commodityOpenedItemIds = commodityOpenedItemIds;
    return this;
  }

  public void unsetCommodityOpenedItemIds() {
    this.commodityOpenedItemIds = null;
  }

  /** Returns true if field commodityOpenedItemIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCommodityOpenedItemIds() {
    return this.commodityOpenedItemIds != null;
  }

  public void setCommodityOpenedItemIdsIsSet(boolean value) {
    if (!value) {
      this.commodityOpenedItemIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case RISK_ENABLED:
      if (value == null) {
        unsetRiskEnabled();
      } else {
        setRiskEnabled((Boolean)value);
      }
      break;

    case GLOBAL_OPENED_ITEM_IDS:
      if (value == null) {
        unsetGlobalOpenedItemIds();
      } else {
        setGlobalOpenedItemIds((Set<String>)value);
      }
      break;

    case GLOBAL_RULES:
      if (value == null) {
        unsetGlobalRules();
      } else {
        setGlobalRules((Map<String,HostingRiskRuleItem>)value);
      }
      break;

    case TRADED_COMMODITY_IDS:
      if (value == null) {
        unsetTradedCommodityIds();
      } else {
        setTradedCommodityIds((Set<Long>)value);
      }
      break;

    case COMMODITY_RULES:
      if (value == null) {
        unsetCommodityRules();
      } else {
        setCommodityRules((Map<Long,Map<String,HostingRiskRuleItem>>)value);
      }
      break;

    case COMMODITY_OPENED_ITEM_IDS:
      if (value == null) {
        unsetCommodityOpenedItemIds();
      } else {
        setCommodityOpenedItemIds((Set<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VERSION:
      return Integer.valueOf(getVersion());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case RISK_ENABLED:
      return Boolean.valueOf(isRiskEnabled());

    case GLOBAL_OPENED_ITEM_IDS:
      return getGlobalOpenedItemIds();

    case GLOBAL_RULES:
      return getGlobalRules();

    case TRADED_COMMODITY_IDS:
      return getTradedCommodityIds();

    case COMMODITY_RULES:
      return getCommodityRules();

    case COMMODITY_OPENED_ITEM_IDS:
      return getCommodityOpenedItemIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VERSION:
      return isSetVersion();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case RISK_ENABLED:
      return isSetRiskEnabled();
    case GLOBAL_OPENED_ITEM_IDS:
      return isSetGlobalOpenedItemIds();
    case GLOBAL_RULES:
      return isSetGlobalRules();
    case TRADED_COMMODITY_IDS:
      return isSetTradedCommodityIds();
    case COMMODITY_RULES:
      return isSetCommodityRules();
    case COMMODITY_OPENED_ITEM_IDS:
      return isSetCommodityOpenedItemIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingRiskRuleJoint)
      return this.equals((HostingRiskRuleJoint)that);
    return false;
  }

  public boolean equals(HostingRiskRuleJoint that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_riskEnabled = true && this.isSetRiskEnabled();
    boolean that_present_riskEnabled = true && that.isSetRiskEnabled();
    if (this_present_riskEnabled || that_present_riskEnabled) {
      if (!(this_present_riskEnabled && that_present_riskEnabled))
        return false;
      if (this.riskEnabled != that.riskEnabled)
        return false;
    }

    boolean this_present_globalOpenedItemIds = true && this.isSetGlobalOpenedItemIds();
    boolean that_present_globalOpenedItemIds = true && that.isSetGlobalOpenedItemIds();
    if (this_present_globalOpenedItemIds || that_present_globalOpenedItemIds) {
      if (!(this_present_globalOpenedItemIds && that_present_globalOpenedItemIds))
        return false;
      if (!this.globalOpenedItemIds.equals(that.globalOpenedItemIds))
        return false;
    }

    boolean this_present_globalRules = true && this.isSetGlobalRules();
    boolean that_present_globalRules = true && that.isSetGlobalRules();
    if (this_present_globalRules || that_present_globalRules) {
      if (!(this_present_globalRules && that_present_globalRules))
        return false;
      if (!this.globalRules.equals(that.globalRules))
        return false;
    }

    boolean this_present_tradedCommodityIds = true && this.isSetTradedCommodityIds();
    boolean that_present_tradedCommodityIds = true && that.isSetTradedCommodityIds();
    if (this_present_tradedCommodityIds || that_present_tradedCommodityIds) {
      if (!(this_present_tradedCommodityIds && that_present_tradedCommodityIds))
        return false;
      if (!this.tradedCommodityIds.equals(that.tradedCommodityIds))
        return false;
    }

    boolean this_present_commodityRules = true && this.isSetCommodityRules();
    boolean that_present_commodityRules = true && that.isSetCommodityRules();
    if (this_present_commodityRules || that_present_commodityRules) {
      if (!(this_present_commodityRules && that_present_commodityRules))
        return false;
      if (!this.commodityRules.equals(that.commodityRules))
        return false;
    }

    boolean this_present_commodityOpenedItemIds = true && this.isSetCommodityOpenedItemIds();
    boolean that_present_commodityOpenedItemIds = true && that.isSetCommodityOpenedItemIds();
    if (this_present_commodityOpenedItemIds || that_present_commodityOpenedItemIds) {
      if (!(this_present_commodityOpenedItemIds && that_present_commodityOpenedItemIds))
        return false;
      if (!this.commodityOpenedItemIds.equals(that.commodityOpenedItemIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingRiskRuleJoint other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskEnabled()).compareTo(other.isSetRiskEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskEnabled, other.riskEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalOpenedItemIds()).compareTo(other.isSetGlobalOpenedItemIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalOpenedItemIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalOpenedItemIds, other.globalOpenedItemIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGlobalRules()).compareTo(other.isSetGlobalRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGlobalRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.globalRules, other.globalRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradedCommodityIds()).compareTo(other.isSetTradedCommodityIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradedCommodityIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradedCommodityIds, other.tradedCommodityIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityRules()).compareTo(other.isSetCommodityRules());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityRules()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityRules, other.commodityRules);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommodityOpenedItemIds()).compareTo(other.isSetCommodityOpenedItemIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommodityOpenedItemIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commodityOpenedItemIds, other.commodityOpenedItemIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingRiskRuleJoint(");
    boolean first = true;

    if (isSetVersion()) {
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetRiskEnabled()) {
      if (!first) sb.append(", ");
      sb.append("riskEnabled:");
      sb.append(this.riskEnabled);
      first = false;
    }
    if (isSetGlobalOpenedItemIds()) {
      if (!first) sb.append(", ");
      sb.append("globalOpenedItemIds:");
      if (this.globalOpenedItemIds == null) {
        sb.append("null");
      } else {
        sb.append(this.globalOpenedItemIds);
      }
      first = false;
    }
    if (isSetGlobalRules()) {
      if (!first) sb.append(", ");
      sb.append("globalRules:");
      if (this.globalRules == null) {
        sb.append("null");
      } else {
        sb.append(this.globalRules);
      }
      first = false;
    }
    if (isSetTradedCommodityIds()) {
      if (!first) sb.append(", ");
      sb.append("tradedCommodityIds:");
      if (this.tradedCommodityIds == null) {
        sb.append("null");
      } else {
        sb.append(this.tradedCommodityIds);
      }
      first = false;
    }
    if (isSetCommodityRules()) {
      if (!first) sb.append(", ");
      sb.append("commodityRules:");
      if (this.commodityRules == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityRules);
      }
      first = false;
    }
    if (isSetCommodityOpenedItemIds()) {
      if (!first) sb.append(", ");
      sb.append("commodityOpenedItemIds:");
      if (this.commodityOpenedItemIds == null) {
        sb.append("null");
      } else {
        sb.append(this.commodityOpenedItemIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingRiskRuleJointStandardSchemeFactory implements SchemeFactory {
    public HostingRiskRuleJointStandardScheme getScheme() {
      return new HostingRiskRuleJointStandardScheme();
    }
  }

  private static class HostingRiskRuleJointStandardScheme extends StandardScheme<HostingRiskRuleJoint> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingRiskRuleJoint struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RISK_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.riskEnabled = iprot.readBool();
              struct.setRiskEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GLOBAL_OPENED_ITEM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set54 = iprot.readSetBegin();
                struct.globalOpenedItemIds = new HashSet<String>(2*_set54.size);
                for (int _i55 = 0; _i55 < _set54.size; ++_i55)
                {
                  String _elem56;
                  _elem56 = iprot.readString();
                  struct.globalOpenedItemIds.add(_elem56);
                }
                iprot.readSetEnd();
              }
              struct.setGlobalOpenedItemIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GLOBAL_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map57 = iprot.readMapBegin();
                struct.globalRules = new HashMap<String,HostingRiskRuleItem>(2*_map57.size);
                for (int _i58 = 0; _i58 < _map57.size; ++_i58)
                {
                  String _key59;
                  HostingRiskRuleItem _val60;
                  _key59 = iprot.readString();
                  _val60 = new HostingRiskRuleItem();
                  _val60.read(iprot);
                  struct.globalRules.put(_key59, _val60);
                }
                iprot.readMapEnd();
              }
              struct.setGlobalRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TRADED_COMMODITY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set61 = iprot.readSetBegin();
                struct.tradedCommodityIds = new HashSet<Long>(2*_set61.size);
                for (int _i62 = 0; _i62 < _set61.size; ++_i62)
                {
                  long _elem63;
                  _elem63 = iprot.readI64();
                  struct.tradedCommodityIds.add(_elem63);
                }
                iprot.readSetEnd();
              }
              struct.setTradedCommodityIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMMODITY_RULES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                struct.commodityRules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(2*_map64.size);
                for (int _i65 = 0; _i65 < _map64.size; ++_i65)
                {
                  long _key66;
                  Map<String,HostingRiskRuleItem> _val67;
                  _key66 = iprot.readI64();
                  {
                    org.apache.thrift.protocol.TMap _map68 = iprot.readMapBegin();
                    _val67 = new HashMap<String,HostingRiskRuleItem>(2*_map68.size);
                    for (int _i69 = 0; _i69 < _map68.size; ++_i69)
                    {
                      String _key70;
                      HostingRiskRuleItem _val71;
                      _key70 = iprot.readString();
                      _val71 = new HostingRiskRuleItem();
                      _val71.read(iprot);
                      _val67.put(_key70, _val71);
                    }
                    iprot.readMapEnd();
                  }
                  struct.commodityRules.put(_key66, _val67);
                }
                iprot.readMapEnd();
              }
              struct.setCommodityRulesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMMODITY_OPENED_ITEM_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set72 = iprot.readSetBegin();
                struct.commodityOpenedItemIds = new HashSet<String>(2*_set72.size);
                for (int _i73 = 0; _i73 < _set72.size; ++_i73)
                {
                  String _elem74;
                  _elem74 = iprot.readString();
                  struct.commodityOpenedItemIds.add(_elem74);
                }
                iprot.readSetEnd();
              }
              struct.setCommodityOpenedItemIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingRiskRuleJoint struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRiskEnabled()) {
        oprot.writeFieldBegin(RISK_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.riskEnabled);
        oprot.writeFieldEnd();
      }
      if (struct.globalOpenedItemIds != null) {
        if (struct.isSetGlobalOpenedItemIds()) {
          oprot.writeFieldBegin(GLOBAL_OPENED_ITEM_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.globalOpenedItemIds.size()));
            for (String _iter75 : struct.globalOpenedItemIds)
            {
              oprot.writeString(_iter75);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.globalRules != null) {
        if (struct.isSetGlobalRules()) {
          oprot.writeFieldBegin(GLOBAL_RULES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.globalRules.size()));
            for (Map.Entry<String, HostingRiskRuleItem> _iter76 : struct.globalRules.entrySet())
            {
              oprot.writeString(_iter76.getKey());
              _iter76.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradedCommodityIds != null) {
        if (struct.isSetTradedCommodityIds()) {
          oprot.writeFieldBegin(TRADED_COMMODITY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.tradedCommodityIds.size()));
            for (long _iter77 : struct.tradedCommodityIds)
            {
              oprot.writeI64(_iter77);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityRules != null) {
        if (struct.isSetCommodityRules()) {
          oprot.writeFieldBegin(COMMODITY_RULES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, struct.commodityRules.size()));
            for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> _iter78 : struct.commodityRules.entrySet())
            {
              oprot.writeI64(_iter78.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter78.getValue().size()));
                for (Map.Entry<String, HostingRiskRuleItem> _iter79 : _iter78.getValue().entrySet())
                {
                  oprot.writeString(_iter79.getKey());
                  _iter79.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.commodityOpenedItemIds != null) {
        if (struct.isSetCommodityOpenedItemIds()) {
          oprot.writeFieldBegin(COMMODITY_OPENED_ITEM_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.commodityOpenedItemIds.size()));
            for (String _iter80 : struct.commodityOpenedItemIds)
            {
              oprot.writeString(_iter80);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingRiskRuleJointTupleSchemeFactory implements SchemeFactory {
    public HostingRiskRuleJointTupleScheme getScheme() {
      return new HostingRiskRuleJointTupleScheme();
    }
  }

  private static class HostingRiskRuleJointTupleScheme extends TupleScheme<HostingRiskRuleJoint> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingRiskRuleJoint struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetVersion()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetRiskEnabled()) {
        optionals.set(2);
      }
      if (struct.isSetGlobalOpenedItemIds()) {
        optionals.set(3);
      }
      if (struct.isSetGlobalRules()) {
        optionals.set(4);
      }
      if (struct.isSetTradedCommodityIds()) {
        optionals.set(5);
      }
      if (struct.isSetCommodityRules()) {
        optionals.set(6);
      }
      if (struct.isSetCommodityOpenedItemIds()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetRiskEnabled()) {
        oprot.writeBool(struct.riskEnabled);
      }
      if (struct.isSetGlobalOpenedItemIds()) {
        {
          oprot.writeI32(struct.globalOpenedItemIds.size());
          for (String _iter81 : struct.globalOpenedItemIds)
          {
            oprot.writeString(_iter81);
          }
        }
      }
      if (struct.isSetGlobalRules()) {
        {
          oprot.writeI32(struct.globalRules.size());
          for (Map.Entry<String, HostingRiskRuleItem> _iter82 : struct.globalRules.entrySet())
          {
            oprot.writeString(_iter82.getKey());
            _iter82.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetTradedCommodityIds()) {
        {
          oprot.writeI32(struct.tradedCommodityIds.size());
          for (long _iter83 : struct.tradedCommodityIds)
          {
            oprot.writeI64(_iter83);
          }
        }
      }
      if (struct.isSetCommodityRules()) {
        {
          oprot.writeI32(struct.commodityRules.size());
          for (Map.Entry<Long, Map<String,HostingRiskRuleItem>> _iter84 : struct.commodityRules.entrySet())
          {
            oprot.writeI64(_iter84.getKey());
            {
              oprot.writeI32(_iter84.getValue().size());
              for (Map.Entry<String, HostingRiskRuleItem> _iter85 : _iter84.getValue().entrySet())
              {
                oprot.writeString(_iter85.getKey());
                _iter85.getValue().write(oprot);
              }
            }
          }
        }
      }
      if (struct.isSetCommodityOpenedItemIds()) {
        {
          oprot.writeI32(struct.commodityOpenedItemIds.size());
          for (String _iter86 : struct.commodityOpenedItemIds)
          {
            oprot.writeString(_iter86);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingRiskRuleJoint struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.riskEnabled = iprot.readBool();
        struct.setRiskEnabledIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set87 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.globalOpenedItemIds = new HashSet<String>(2*_set87.size);
          for (int _i88 = 0; _i88 < _set87.size; ++_i88)
          {
            String _elem89;
            _elem89 = iprot.readString();
            struct.globalOpenedItemIds.add(_elem89);
          }
        }
        struct.setGlobalOpenedItemIdsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.globalRules = new HashMap<String,HostingRiskRuleItem>(2*_map90.size);
          for (int _i91 = 0; _i91 < _map90.size; ++_i91)
          {
            String _key92;
            HostingRiskRuleItem _val93;
            _key92 = iprot.readString();
            _val93 = new HostingRiskRuleItem();
            _val93.read(iprot);
            struct.globalRules.put(_key92, _val93);
          }
        }
        struct.setGlobalRulesIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TSet _set94 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.tradedCommodityIds = new HashSet<Long>(2*_set94.size);
          for (int _i95 = 0; _i95 < _set94.size; ++_i95)
          {
            long _elem96;
            _elem96 = iprot.readI64();
            struct.tradedCommodityIds.add(_elem96);
          }
        }
        struct.setTradedCommodityIdsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map97 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.commodityRules = new HashMap<Long,Map<String,HostingRiskRuleItem>>(2*_map97.size);
          for (int _i98 = 0; _i98 < _map97.size; ++_i98)
          {
            long _key99;
            Map<String,HostingRiskRuleItem> _val100;
            _key99 = iprot.readI64();
            {
              org.apache.thrift.protocol.TMap _map101 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val100 = new HashMap<String,HostingRiskRuleItem>(2*_map101.size);
              for (int _i102 = 0; _i102 < _map101.size; ++_i102)
              {
                String _key103;
                HostingRiskRuleItem _val104;
                _key103 = iprot.readString();
                _val104 = new HostingRiskRuleItem();
                _val104.read(iprot);
                _val100.put(_key103, _val104);
              }
            }
            struct.commodityRules.put(_key99, _val100);
          }
        }
        struct.setCommodityRulesIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set105 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.commodityOpenedItemIds = new HashSet<String>(2*_set105.size);
          for (int _i106 = 0; _i106 < _set105.size; ++_i106)
          {
            String _elem107;
            _elem107 = iprot.readString();
            struct.commodityOpenedItemIds.add(_elem107);
          }
        }
        struct.setCommodityOpenedItemIdsIsSet(true);
      }
    }
  }

}

