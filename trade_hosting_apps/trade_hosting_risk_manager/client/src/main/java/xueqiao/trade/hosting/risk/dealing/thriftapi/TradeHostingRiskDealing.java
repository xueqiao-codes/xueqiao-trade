/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.risk.dealing.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeHostingRiskDealing {

  public interface Iface {

    public HostingExecOrderRiskAction riskCheck(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void riskCheck(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public HostingExecOrderRiskAction riskCheck(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_riskCheck(platformArgs, subAccountId, orderContractSummary, orderDetail);
      return recv_riskCheck();
    }

    public void send_riskCheck(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail) throws org.apache.thrift.TException
    {
      riskCheck_args args = new riskCheck_args();
      args.setPlatformArgs(platformArgs);
      args.setSubAccountId(subAccountId);
      args.setOrderContractSummary(orderContractSummary);
      args.setOrderDetail(orderDetail);
      sendBase("riskCheck", args);
    }

    public HostingExecOrderRiskAction recv_riskCheck() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      riskCheck_result result = new riskCheck_result();
      receiveBase(result, "riskCheck");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "riskCheck failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void riskCheck(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      riskCheck_call method_call = new riskCheck_call(platformArgs, subAccountId, orderContractSummary, orderDetail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class riskCheck_call extends org.apache.thrift.async.TAsyncMethodCall <riskCheck_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long subAccountId;
      private xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary;
      private xueqiao.trade.hosting.HostingExecOrderDetail orderDetail;
      public riskCheck_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long subAccountId, xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary, xueqiao.trade.hosting.HostingExecOrderDetail orderDetail, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.subAccountId = subAccountId;
        this.orderContractSummary = orderContractSummary;
        this.orderDetail = orderDetail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("riskCheck", org.apache.thrift.protocol.TMessageType.CALL, 0));
        riskCheck_args args = new riskCheck_args();
        args.setPlatformArgs(platformArgs);
        args.setSubAccountId(subAccountId);
        args.setOrderContractSummary(orderContractSummary);
        args.setOrderDetail(orderDetail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public HostingExecOrderRiskAction getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_riskCheck();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("riskCheck", new riskCheck());
      return processMap;
    }

    public static class riskCheck<I extends Iface> extends org.apache.thrift.ProcessFunction<I, riskCheck_args> {
      public riskCheck() {
        super("riskCheck");
      }

      public riskCheck_args getEmptyArgsInstance() {
        return new riskCheck_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public riskCheck_result getResult(I iface, riskCheck_args args) throws org.apache.thrift.TException {
        riskCheck_result result = new riskCheck_result();
        try {
          result.success = iface.riskCheck(args.platformArgs, args.subAccountId, args.orderContractSummary, args.orderDetail);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("riskCheck", new riskCheck());
      return processMap;
    }

    public static class riskCheck<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, riskCheck_args, HostingExecOrderRiskAction> {
      public riskCheck() {
        super("riskCheck");
      }

      public riskCheck_args getEmptyArgsInstance() {
        return new riskCheck_args();
      }

      public AsyncMethodCallback<HostingExecOrderRiskAction> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<HostingExecOrderRiskAction>() { 
          public void onComplete(HostingExecOrderRiskAction o) {
            riskCheck_result result = new riskCheck_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            riskCheck_result result = new riskCheck_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, riskCheck_args args, org.apache.thrift.async.AsyncMethodCallback<HostingExecOrderRiskAction> resultHandler) throws TException {
        iface.riskCheck(args.platformArgs, args.subAccountId, args.orderContractSummary, args.orderDetail,resultHandler);
      }
    }

  }

  public static class riskCheck_args implements org.apache.thrift.TBase<riskCheck_args, riskCheck_args._Fields>, java.io.Serializable, Cloneable, Comparable<riskCheck_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("riskCheck_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField ORDER_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new riskCheck_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new riskCheck_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long subAccountId; // required
    public xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary; // required
    public xueqiao.trade.hosting.HostingExecOrderDetail orderDetail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      SUB_ACCOUNT_ID((short)2, "subAccountId"),
      ORDER_CONTRACT_SUMMARY((short)3, "orderContractSummary"),
      ORDER_DETAIL((short)4, "orderDetail");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // SUB_ACCOUNT_ID
            return SUB_ACCOUNT_ID;
          case 3: // ORDER_CONTRACT_SUMMARY
            return ORDER_CONTRACT_SUMMARY;
          case 4: // ORDER_DETAIL
            return ORDER_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUBACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ORDER_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("orderContractSummary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrderContractSummary.class)));
      tmpMap.put(_Fields.ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("orderDetail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrderDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(riskCheck_args.class, metaDataMap);
    }

    public riskCheck_args() {
    }

    public riskCheck_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long subAccountId,
      xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary,
      xueqiao.trade.hosting.HostingExecOrderDetail orderDetail)
    {
      this();
      this.platformArgs = platformArgs;
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      this.orderContractSummary = orderContractSummary;
      this.orderDetail = orderDetail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public riskCheck_args(riskCheck_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.subAccountId = other.subAccountId;
      if (other.isSetOrderContractSummary()) {
        this.orderContractSummary = new xueqiao.trade.hosting.HostingExecOrderContractSummary(other.orderContractSummary);
      }
      if (other.isSetOrderDetail()) {
        this.orderDetail = new xueqiao.trade.hosting.HostingExecOrderDetail(other.orderDetail);
      }
    }

    public riskCheck_args deepCopy() {
      return new riskCheck_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setSubAccountIdIsSet(false);
      this.subAccountId = 0;
      this.orderContractSummary = null;
      this.orderDetail = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public riskCheck_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getSubAccountId() {
      return this.subAccountId;
    }

    public riskCheck_args setSubAccountId(long subAccountId) {
      this.subAccountId = subAccountId;
      setSubAccountIdIsSet(true);
      return this;
    }

    public void unsetSubAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetSubAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
    }

    public void setSubAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
    }

    public xueqiao.trade.hosting.HostingExecOrderContractSummary getOrderContractSummary() {
      return this.orderContractSummary;
    }

    public riskCheck_args setOrderContractSummary(xueqiao.trade.hosting.HostingExecOrderContractSummary orderContractSummary) {
      this.orderContractSummary = orderContractSummary;
      return this;
    }

    public void unsetOrderContractSummary() {
      this.orderContractSummary = null;
    }

    /** Returns true if field orderContractSummary is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderContractSummary() {
      return this.orderContractSummary != null;
    }

    public void setOrderContractSummaryIsSet(boolean value) {
      if (!value) {
        this.orderContractSummary = null;
      }
    }

    public xueqiao.trade.hosting.HostingExecOrderDetail getOrderDetail() {
      return this.orderDetail;
    }

    public riskCheck_args setOrderDetail(xueqiao.trade.hosting.HostingExecOrderDetail orderDetail) {
      this.orderDetail = orderDetail;
      return this;
    }

    public void unsetOrderDetail() {
      this.orderDetail = null;
    }

    /** Returns true if field orderDetail is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderDetail() {
      return this.orderDetail != null;
    }

    public void setOrderDetailIsSet(boolean value) {
      if (!value) {
        this.orderDetail = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case SUB_ACCOUNT_ID:
        if (value == null) {
          unsetSubAccountId();
        } else {
          setSubAccountId((Long)value);
        }
        break;

      case ORDER_CONTRACT_SUMMARY:
        if (value == null) {
          unsetOrderContractSummary();
        } else {
          setOrderContractSummary((xueqiao.trade.hosting.HostingExecOrderContractSummary)value);
        }
        break;

      case ORDER_DETAIL:
        if (value == null) {
          unsetOrderDetail();
        } else {
          setOrderDetail((xueqiao.trade.hosting.HostingExecOrderDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case SUB_ACCOUNT_ID:
        return Long.valueOf(getSubAccountId());

      case ORDER_CONTRACT_SUMMARY:
        return getOrderContractSummary();

      case ORDER_DETAIL:
        return getOrderDetail();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case SUB_ACCOUNT_ID:
        return isSetSubAccountId();
      case ORDER_CONTRACT_SUMMARY:
        return isSetOrderContractSummary();
      case ORDER_DETAIL:
        return isSetOrderDetail();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof riskCheck_args)
        return this.equals((riskCheck_args)that);
      return false;
    }

    public boolean equals(riskCheck_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_subAccountId = true;
      boolean that_present_subAccountId = true;
      if (this_present_subAccountId || that_present_subAccountId) {
        if (!(this_present_subAccountId && that_present_subAccountId))
          return false;
        if (this.subAccountId != that.subAccountId)
          return false;
      }

      boolean this_present_orderContractSummary = true && this.isSetOrderContractSummary();
      boolean that_present_orderContractSummary = true && that.isSetOrderContractSummary();
      if (this_present_orderContractSummary || that_present_orderContractSummary) {
        if (!(this_present_orderContractSummary && that_present_orderContractSummary))
          return false;
        if (!this.orderContractSummary.equals(that.orderContractSummary))
          return false;
      }

      boolean this_present_orderDetail = true && this.isSetOrderDetail();
      boolean that_present_orderDetail = true && that.isSetOrderDetail();
      if (this_present_orderDetail || that_present_orderDetail) {
        if (!(this_present_orderDetail && that_present_orderDetail))
          return false;
        if (!this.orderDetail.equals(that.orderDetail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(riskCheck_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSubAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderContractSummary()).compareTo(other.isSetOrderContractSummary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderContractSummary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderContractSummary, other.orderContractSummary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOrderDetail()).compareTo(other.isSetOrderDetail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderDetail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetail, other.orderDetail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("riskCheck_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderContractSummary:");
      if (this.orderContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.orderContractSummary);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderDetail:");
      if (this.orderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDetail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (orderContractSummary != null) {
        orderContractSummary.validate();
      }
      if (orderDetail != null) {
        orderDetail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class riskCheck_argsStandardSchemeFactory implements SchemeFactory {
      public riskCheck_argsStandardScheme getScheme() {
        return new riskCheck_argsStandardScheme();
      }
    }

    private static class riskCheck_argsStandardScheme extends StandardScheme<riskCheck_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, riskCheck_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SUB_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.subAccountId = iprot.readI64();
                struct.setSubAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ORDER_CONTRACT_SUMMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orderContractSummary = new xueqiao.trade.hosting.HostingExecOrderContractSummary();
                struct.orderContractSummary.read(iprot);
                struct.setOrderContractSummaryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ORDER_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.orderDetail = new xueqiao.trade.hosting.HostingExecOrderDetail();
                struct.orderDetail.read(iprot);
                struct.setOrderDetailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, riskCheck_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
        if (struct.orderContractSummary != null) {
          oprot.writeFieldBegin(ORDER_CONTRACT_SUMMARY_FIELD_DESC);
          struct.orderContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orderDetail != null) {
          oprot.writeFieldBegin(ORDER_DETAIL_FIELD_DESC);
          struct.orderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class riskCheck_argsTupleSchemeFactory implements SchemeFactory {
      public riskCheck_argsTupleScheme getScheme() {
        return new riskCheck_argsTupleScheme();
      }
    }

    private static class riskCheck_argsTupleScheme extends TupleScheme<riskCheck_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, riskCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetSubAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetOrderContractSummary()) {
          optionals.set(2);
        }
        if (struct.isSetOrderDetail()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetSubAccountId()) {
          oprot.writeI64(struct.subAccountId);
        }
        if (struct.isSetOrderContractSummary()) {
          struct.orderContractSummary.write(oprot);
        }
        if (struct.isSetOrderDetail()) {
          struct.orderDetail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, riskCheck_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.subAccountId = iprot.readI64();
          struct.setSubAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.orderContractSummary = new xueqiao.trade.hosting.HostingExecOrderContractSummary();
          struct.orderContractSummary.read(iprot);
          struct.setOrderContractSummaryIsSet(true);
        }
        if (incoming.get(3)) {
          struct.orderDetail = new xueqiao.trade.hosting.HostingExecOrderDetail();
          struct.orderDetail.read(iprot);
          struct.setOrderDetailIsSet(true);
        }
      }
    }

  }

  public static class riskCheck_result implements org.apache.thrift.TBase<riskCheck_result, riskCheck_result._Fields>, java.io.Serializable, Cloneable, Comparable<riskCheck_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("riskCheck_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new riskCheck_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new riskCheck_resultTupleSchemeFactory());
    }

    public HostingExecOrderRiskAction success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingExecOrderRiskAction.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(riskCheck_result.class, metaDataMap);
    }

    public riskCheck_result() {
    }

    public riskCheck_result(
      HostingExecOrderRiskAction success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public riskCheck_result(riskCheck_result other) {
      if (other.isSetSuccess()) {
        this.success = new HostingExecOrderRiskAction(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public riskCheck_result deepCopy() {
      return new riskCheck_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public HostingExecOrderRiskAction getSuccess() {
      return this.success;
    }

    public riskCheck_result setSuccess(HostingExecOrderRiskAction success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public riskCheck_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((HostingExecOrderRiskAction)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof riskCheck_result)
        return this.equals((riskCheck_result)that);
      return false;
    }

    public boolean equals(riskCheck_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(riskCheck_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("riskCheck_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class riskCheck_resultStandardSchemeFactory implements SchemeFactory {
      public riskCheck_resultStandardScheme getScheme() {
        return new riskCheck_resultStandardScheme();
      }
    }

    private static class riskCheck_resultStandardScheme extends StandardScheme<riskCheck_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, riskCheck_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new HostingExecOrderRiskAction();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, riskCheck_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class riskCheck_resultTupleSchemeFactory implements SchemeFactory {
      public riskCheck_resultTupleScheme getScheme() {
        return new riskCheck_resultTupleScheme();
      }
    }

    private static class riskCheck_resultTupleScheme extends TupleScheme<riskCheck_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, riskCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, riskCheck_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new HostingExecOrderRiskAction();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
