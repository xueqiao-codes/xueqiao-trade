/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.risk.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingRiskSupportedItem implements org.apache.thrift.TBase<HostingRiskSupportedItem, HostingRiskSupportedItem._Fields>, java.io.Serializable, Cloneable, Comparable<HostingRiskSupportedItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingRiskSupportedItem");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RISK_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLevel", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ITEM_CN_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemCnName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("itemDescription", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_VALUE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemValueType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField RISK_LADDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskLadderType", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField ITEM_VALUE_LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("itemValueLevel", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingRiskSupportedItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingRiskSupportedItemTupleSchemeFactory());
  }

  public String itemId; // optional
  /**
   * 
   * @see EHostingRiskLevel
   */
  public EHostingRiskLevel riskLevel; // optional
  public String itemCnName; // optional
  public String itemDescription; // optional
  /**
   * 
   * @see EHostingRiskItemValueType
   */
  public EHostingRiskItemValueType itemValueType; // optional
  /**
   * 
   * @see EHostingRiskLadderType
   */
  public EHostingRiskLadderType riskLadderType; // optional
  /**
   * 
   * @see EHostingRiskItemValueLevel
   */
  public EHostingRiskItemValueLevel itemValueLevel; // optional
  public int orderNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    /**
     * 
     * @see EHostingRiskLevel
     */
    RISK_LEVEL((short)2, "riskLevel"),
    ITEM_CN_NAME((short)3, "itemCnName"),
    ITEM_DESCRIPTION((short)4, "itemDescription"),
    /**
     * 
     * @see EHostingRiskItemValueType
     */
    ITEM_VALUE_TYPE((short)5, "itemValueType"),
    /**
     * 
     * @see EHostingRiskLadderType
     */
    RISK_LADDER_TYPE((short)6, "riskLadderType"),
    /**
     * 
     * @see EHostingRiskItemValueLevel
     */
    ITEM_VALUE_LEVEL((short)7, "itemValueLevel"),
    ORDER_NUM((short)8, "orderNum");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // RISK_LEVEL
          return RISK_LEVEL;
        case 3: // ITEM_CN_NAME
          return ITEM_CN_NAME;
        case 4: // ITEM_DESCRIPTION
          return ITEM_DESCRIPTION;
        case 5: // ITEM_VALUE_TYPE
          return ITEM_VALUE_TYPE;
        case 6: // RISK_LADDER_TYPE
          return RISK_LADDER_TYPE;
        case 7: // ITEM_VALUE_LEVEL
          return ITEM_VALUE_LEVEL;
        case 8: // ORDER_NUM
          return ORDER_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ITEM_ID,_Fields.RISK_LEVEL,_Fields.ITEM_CN_NAME,_Fields.ITEM_DESCRIPTION,_Fields.ITEM_VALUE_TYPE,_Fields.RISK_LADDER_TYPE,_Fields.ITEM_VALUE_LEVEL,_Fields.ORDER_NUM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RISK_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("riskLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EHostingRiskLevel.class)));
    tmpMap.put(_Fields.ITEM_CN_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemCnName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("itemDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_VALUE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("itemValueType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EHostingRiskItemValueType.class)));
    tmpMap.put(_Fields.RISK_LADDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("riskLadderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EHostingRiskLadderType.class)));
    tmpMap.put(_Fields.ITEM_VALUE_LEVEL, new org.apache.thrift.meta_data.FieldMetaData("itemValueLevel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EHostingRiskItemValueLevel.class)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingRiskSupportedItem.class, metaDataMap);
  }

  public HostingRiskSupportedItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingRiskSupportedItem(HostingRiskSupportedItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    if (other.isSetRiskLevel()) {
      this.riskLevel = other.riskLevel;
    }
    if (other.isSetItemCnName()) {
      this.itemCnName = other.itemCnName;
    }
    if (other.isSetItemDescription()) {
      this.itemDescription = other.itemDescription;
    }
    if (other.isSetItemValueType()) {
      this.itemValueType = other.itemValueType;
    }
    if (other.isSetRiskLadderType()) {
      this.riskLadderType = other.riskLadderType;
    }
    if (other.isSetItemValueLevel()) {
      this.itemValueLevel = other.itemValueLevel;
    }
    this.orderNum = other.orderNum;
  }

  public HostingRiskSupportedItem deepCopy() {
    return new HostingRiskSupportedItem(this);
  }

  @Override
  public void clear() {
    this.itemId = null;
    this.riskLevel = null;
    this.itemCnName = null;
    this.itemDescription = null;
    this.itemValueType = null;
    this.riskLadderType = null;
    this.itemValueLevel = null;
    setOrderNumIsSet(false);
    this.orderNum = 0;
  }

  public String getItemId() {
    return this.itemId;
  }

  public HostingRiskSupportedItem setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  /**
   * 
   * @see EHostingRiskLevel
   */
  public EHostingRiskLevel getRiskLevel() {
    return this.riskLevel;
  }

  /**
   * 
   * @see EHostingRiskLevel
   */
  public HostingRiskSupportedItem setRiskLevel(EHostingRiskLevel riskLevel) {
    this.riskLevel = riskLevel;
    return this;
  }

  public void unsetRiskLevel() {
    this.riskLevel = null;
  }

  /** Returns true if field riskLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskLevel() {
    return this.riskLevel != null;
  }

  public void setRiskLevelIsSet(boolean value) {
    if (!value) {
      this.riskLevel = null;
    }
  }

  public String getItemCnName() {
    return this.itemCnName;
  }

  public HostingRiskSupportedItem setItemCnName(String itemCnName) {
    this.itemCnName = itemCnName;
    return this;
  }

  public void unsetItemCnName() {
    this.itemCnName = null;
  }

  /** Returns true if field itemCnName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemCnName() {
    return this.itemCnName != null;
  }

  public void setItemCnNameIsSet(boolean value) {
    if (!value) {
      this.itemCnName = null;
    }
  }

  public String getItemDescription() {
    return this.itemDescription;
  }

  public HostingRiskSupportedItem setItemDescription(String itemDescription) {
    this.itemDescription = itemDescription;
    return this;
  }

  public void unsetItemDescription() {
    this.itemDescription = null;
  }

  /** Returns true if field itemDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetItemDescription() {
    return this.itemDescription != null;
  }

  public void setItemDescriptionIsSet(boolean value) {
    if (!value) {
      this.itemDescription = null;
    }
  }

  /**
   * 
   * @see EHostingRiskItemValueType
   */
  public EHostingRiskItemValueType getItemValueType() {
    return this.itemValueType;
  }

  /**
   * 
   * @see EHostingRiskItemValueType
   */
  public HostingRiskSupportedItem setItemValueType(EHostingRiskItemValueType itemValueType) {
    this.itemValueType = itemValueType;
    return this;
  }

  public void unsetItemValueType() {
    this.itemValueType = null;
  }

  /** Returns true if field itemValueType is set (has been assigned a value) and false otherwise */
  public boolean isSetItemValueType() {
    return this.itemValueType != null;
  }

  public void setItemValueTypeIsSet(boolean value) {
    if (!value) {
      this.itemValueType = null;
    }
  }

  /**
   * 
   * @see EHostingRiskLadderType
   */
  public EHostingRiskLadderType getRiskLadderType() {
    return this.riskLadderType;
  }

  /**
   * 
   * @see EHostingRiskLadderType
   */
  public HostingRiskSupportedItem setRiskLadderType(EHostingRiskLadderType riskLadderType) {
    this.riskLadderType = riskLadderType;
    return this;
  }

  public void unsetRiskLadderType() {
    this.riskLadderType = null;
  }

  /** Returns true if field riskLadderType is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskLadderType() {
    return this.riskLadderType != null;
  }

  public void setRiskLadderTypeIsSet(boolean value) {
    if (!value) {
      this.riskLadderType = null;
    }
  }

  /**
   * 
   * @see EHostingRiskItemValueLevel
   */
  public EHostingRiskItemValueLevel getItemValueLevel() {
    return this.itemValueLevel;
  }

  /**
   * 
   * @see EHostingRiskItemValueLevel
   */
  public HostingRiskSupportedItem setItemValueLevel(EHostingRiskItemValueLevel itemValueLevel) {
    this.itemValueLevel = itemValueLevel;
    return this;
  }

  public void unsetItemValueLevel() {
    this.itemValueLevel = null;
  }

  /** Returns true if field itemValueLevel is set (has been assigned a value) and false otherwise */
  public boolean isSetItemValueLevel() {
    return this.itemValueLevel != null;
  }

  public void setItemValueLevelIsSet(boolean value) {
    if (!value) {
      this.itemValueLevel = null;
    }
  }

  public int getOrderNum() {
    return this.orderNum;
  }

  public HostingRiskSupportedItem setOrderNum(int orderNum) {
    this.orderNum = orderNum;
    setOrderNumIsSet(true);
    return this;
  }

  public void unsetOrderNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  public void setOrderNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case RISK_LEVEL:
      if (value == null) {
        unsetRiskLevel();
      } else {
        setRiskLevel((EHostingRiskLevel)value);
      }
      break;

    case ITEM_CN_NAME:
      if (value == null) {
        unsetItemCnName();
      } else {
        setItemCnName((String)value);
      }
      break;

    case ITEM_DESCRIPTION:
      if (value == null) {
        unsetItemDescription();
      } else {
        setItemDescription((String)value);
      }
      break;

    case ITEM_VALUE_TYPE:
      if (value == null) {
        unsetItemValueType();
      } else {
        setItemValueType((EHostingRiskItemValueType)value);
      }
      break;

    case RISK_LADDER_TYPE:
      if (value == null) {
        unsetRiskLadderType();
      } else {
        setRiskLadderType((EHostingRiskLadderType)value);
      }
      break;

    case ITEM_VALUE_LEVEL:
      if (value == null) {
        unsetItemValueLevel();
      } else {
        setItemValueLevel((EHostingRiskItemValueLevel)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return getItemId();

    case RISK_LEVEL:
      return getRiskLevel();

    case ITEM_CN_NAME:
      return getItemCnName();

    case ITEM_DESCRIPTION:
      return getItemDescription();

    case ITEM_VALUE_TYPE:
      return getItemValueType();

    case RISK_LADDER_TYPE:
      return getRiskLadderType();

    case ITEM_VALUE_LEVEL:
      return getItemValueLevel();

    case ORDER_NUM:
      return Integer.valueOf(getOrderNum());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case RISK_LEVEL:
      return isSetRiskLevel();
    case ITEM_CN_NAME:
      return isSetItemCnName();
    case ITEM_DESCRIPTION:
      return isSetItemDescription();
    case ITEM_VALUE_TYPE:
      return isSetItemValueType();
    case RISK_LADDER_TYPE:
      return isSetRiskLadderType();
    case ITEM_VALUE_LEVEL:
      return isSetItemValueLevel();
    case ORDER_NUM:
      return isSetOrderNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingRiskSupportedItem)
      return this.equals((HostingRiskSupportedItem)that);
    return false;
  }

  public boolean equals(HostingRiskSupportedItem that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_riskLevel = true && this.isSetRiskLevel();
    boolean that_present_riskLevel = true && that.isSetRiskLevel();
    if (this_present_riskLevel || that_present_riskLevel) {
      if (!(this_present_riskLevel && that_present_riskLevel))
        return false;
      if (!this.riskLevel.equals(that.riskLevel))
        return false;
    }

    boolean this_present_itemCnName = true && this.isSetItemCnName();
    boolean that_present_itemCnName = true && that.isSetItemCnName();
    if (this_present_itemCnName || that_present_itemCnName) {
      if (!(this_present_itemCnName && that_present_itemCnName))
        return false;
      if (!this.itemCnName.equals(that.itemCnName))
        return false;
    }

    boolean this_present_itemDescription = true && this.isSetItemDescription();
    boolean that_present_itemDescription = true && that.isSetItemDescription();
    if (this_present_itemDescription || that_present_itemDescription) {
      if (!(this_present_itemDescription && that_present_itemDescription))
        return false;
      if (!this.itemDescription.equals(that.itemDescription))
        return false;
    }

    boolean this_present_itemValueType = true && this.isSetItemValueType();
    boolean that_present_itemValueType = true && that.isSetItemValueType();
    if (this_present_itemValueType || that_present_itemValueType) {
      if (!(this_present_itemValueType && that_present_itemValueType))
        return false;
      if (!this.itemValueType.equals(that.itemValueType))
        return false;
    }

    boolean this_present_riskLadderType = true && this.isSetRiskLadderType();
    boolean that_present_riskLadderType = true && that.isSetRiskLadderType();
    if (this_present_riskLadderType || that_present_riskLadderType) {
      if (!(this_present_riskLadderType && that_present_riskLadderType))
        return false;
      if (!this.riskLadderType.equals(that.riskLadderType))
        return false;
    }

    boolean this_present_itemValueLevel = true && this.isSetItemValueLevel();
    boolean that_present_itemValueLevel = true && that.isSetItemValueLevel();
    if (this_present_itemValueLevel || that_present_itemValueLevel) {
      if (!(this_present_itemValueLevel && that_present_itemValueLevel))
        return false;
      if (!this.itemValueLevel.equals(that.itemValueLevel))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (this.orderNum != that.orderNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingRiskSupportedItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskLevel()).compareTo(other.isSetRiskLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLevel, other.riskLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemCnName()).compareTo(other.isSetItemCnName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemCnName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemCnName, other.itemCnName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemDescription()).compareTo(other.isSetItemDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemDescription, other.itemDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemValueType()).compareTo(other.isSetItemValueType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemValueType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemValueType, other.itemValueType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskLadderType()).compareTo(other.isSetRiskLadderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskLadderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskLadderType, other.riskLadderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemValueLevel()).compareTo(other.isSetItemValueLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemValueLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemValueLevel, other.itemValueLevel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderNum()).compareTo(other.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, other.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingRiskSupportedItem(");
    boolean first = true;

    if (isSetItemId()) {
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
    }
    if (isSetRiskLevel()) {
      if (!first) sb.append(", ");
      sb.append("riskLevel:");
      if (this.riskLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLevel);
      }
      first = false;
    }
    if (isSetItemCnName()) {
      if (!first) sb.append(", ");
      sb.append("itemCnName:");
      if (this.itemCnName == null) {
        sb.append("null");
      } else {
        sb.append(this.itemCnName);
      }
      first = false;
    }
    if (isSetItemDescription()) {
      if (!first) sb.append(", ");
      sb.append("itemDescription:");
      if (this.itemDescription == null) {
        sb.append("null");
      } else {
        sb.append(this.itemDescription);
      }
      first = false;
    }
    if (isSetItemValueType()) {
      if (!first) sb.append(", ");
      sb.append("itemValueType:");
      if (this.itemValueType == null) {
        sb.append("null");
      } else {
        sb.append(this.itemValueType);
      }
      first = false;
    }
    if (isSetRiskLadderType()) {
      if (!first) sb.append(", ");
      sb.append("riskLadderType:");
      if (this.riskLadderType == null) {
        sb.append("null");
      } else {
        sb.append(this.riskLadderType);
      }
      first = false;
    }
    if (isSetItemValueLevel()) {
      if (!first) sb.append(", ");
      sb.append("itemValueLevel:");
      if (this.itemValueLevel == null) {
        sb.append("null");
      } else {
        sb.append(this.itemValueLevel);
      }
      first = false;
    }
    if (isSetOrderNum()) {
      if (!first) sb.append(", ");
      sb.append("orderNum:");
      sb.append(this.orderNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingRiskSupportedItemStandardSchemeFactory implements SchemeFactory {
    public HostingRiskSupportedItemStandardScheme getScheme() {
      return new HostingRiskSupportedItemStandardScheme();
    }
  }

  private static class HostingRiskSupportedItemStandardScheme extends StandardScheme<HostingRiskSupportedItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingRiskSupportedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RISK_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.riskLevel = EHostingRiskLevel.findByValue(iprot.readI32());
              struct.setRiskLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ITEM_CN_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemCnName = iprot.readString();
              struct.setItemCnNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemDescription = iprot.readString();
              struct.setItemDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_VALUE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemValueType = EHostingRiskItemValueType.findByValue(iprot.readI32());
              struct.setItemValueTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RISK_LADDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.riskLadderType = EHostingRiskLadderType.findByValue(iprot.readI32());
              struct.setRiskLadderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ITEM_VALUE_LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.itemValueLevel = EHostingRiskItemValueLevel.findByValue(iprot.readI32());
              struct.setItemValueLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderNum = iprot.readI32();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingRiskSupportedItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.itemId != null) {
        if (struct.isSetItemId()) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.riskLevel != null) {
        if (struct.isSetRiskLevel()) {
          oprot.writeFieldBegin(RISK_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.riskLevel.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemCnName != null) {
        if (struct.isSetItemCnName()) {
          oprot.writeFieldBegin(ITEM_CN_NAME_FIELD_DESC);
          oprot.writeString(struct.itemCnName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemDescription != null) {
        if (struct.isSetItemDescription()) {
          oprot.writeFieldBegin(ITEM_DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.itemDescription);
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemValueType != null) {
        if (struct.isSetItemValueType()) {
          oprot.writeFieldBegin(ITEM_VALUE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.itemValueType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.riskLadderType != null) {
        if (struct.isSetRiskLadderType()) {
          oprot.writeFieldBegin(RISK_LADDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.riskLadderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemValueLevel != null) {
        if (struct.isSetItemValueLevel()) {
          oprot.writeFieldBegin(ITEM_VALUE_LEVEL_FIELD_DESC);
          oprot.writeI32(struct.itemValueLevel.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderNum()) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeI32(struct.orderNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingRiskSupportedItemTupleSchemeFactory implements SchemeFactory {
    public HostingRiskSupportedItemTupleScheme getScheme() {
      return new HostingRiskSupportedItemTupleScheme();
    }
  }

  private static class HostingRiskSupportedItemTupleScheme extends TupleScheme<HostingRiskSupportedItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingRiskSupportedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetRiskLevel()) {
        optionals.set(1);
      }
      if (struct.isSetItemCnName()) {
        optionals.set(2);
      }
      if (struct.isSetItemDescription()) {
        optionals.set(3);
      }
      if (struct.isSetItemValueType()) {
        optionals.set(4);
      }
      if (struct.isSetRiskLadderType()) {
        optionals.set(5);
      }
      if (struct.isSetItemValueLevel()) {
        optionals.set(6);
      }
      if (struct.isSetOrderNum()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetRiskLevel()) {
        oprot.writeI32(struct.riskLevel.getValue());
      }
      if (struct.isSetItemCnName()) {
        oprot.writeString(struct.itemCnName);
      }
      if (struct.isSetItemDescription()) {
        oprot.writeString(struct.itemDescription);
      }
      if (struct.isSetItemValueType()) {
        oprot.writeI32(struct.itemValueType.getValue());
      }
      if (struct.isSetRiskLadderType()) {
        oprot.writeI32(struct.riskLadderType.getValue());
      }
      if (struct.isSetItemValueLevel()) {
        oprot.writeI32(struct.itemValueLevel.getValue());
      }
      if (struct.isSetOrderNum()) {
        oprot.writeI32(struct.orderNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingRiskSupportedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.riskLevel = EHostingRiskLevel.findByValue(iprot.readI32());
        struct.setRiskLevelIsSet(true);
      }
      if (incoming.get(2)) {
        struct.itemCnName = iprot.readString();
        struct.setItemCnNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemDescription = iprot.readString();
        struct.setItemDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.itemValueType = EHostingRiskItemValueType.findByValue(iprot.readI32());
        struct.setItemValueTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.riskLadderType = EHostingRiskLadderType.findByValue(iprot.readI32());
        struct.setRiskLadderTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.itemValueLevel = EHostingRiskItemValueLevel.findByValue(iprot.readI32());
        struct.setItemValueLevelIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderNum = iprot.readI32();
        struct.setOrderNumIsSet(true);
      }
    }
  }

}

