/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.risk.manager.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 风控条目的数据信息
 */
public class HostingRiskItemDataInfo implements org.apache.thrift.TBase<HostingRiskItemDataInfo, HostingRiskItemDataInfo._Fields>, java.io.Serializable, Cloneable, Comparable<HostingRiskItemDataInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingRiskItemDataInfo");

  private static final org.apache.thrift.protocol.TField ITEM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("itemId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("itemValue", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField ALARM_TRIGGERED_FIELD_DESC = new org.apache.thrift.protocol.TField("alarmTriggered", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField FORBIDDEN_OPEN_POSITION_TRIGGERED_FIELD_DESC = new org.apache.thrift.protocol.TField("forbiddenOpenPositionTriggered", org.apache.thrift.protocol.TType.BOOL, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingRiskItemDataInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingRiskItemDataInfoTupleSchemeFactory());
  }

  public String itemId; // optional
  public long sledCommodityId; // optional
  public long sledContractId; // optional
  public HostingRiskRuleItemValue itemValue; // optional
  public boolean alarmTriggered; // optional
  public boolean forbiddenOpenPositionTriggered; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ITEM_ID((short)1, "itemId"),
    SLED_COMMODITY_ID((short)2, "sledCommodityId"),
    SLED_CONTRACT_ID((short)3, "sledContractId"),
    ITEM_VALUE((short)4, "itemValue"),
    ALARM_TRIGGERED((short)5, "alarmTriggered"),
    FORBIDDEN_OPEN_POSITION_TRIGGERED((short)6, "forbiddenOpenPositionTriggered");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ITEM_ID
          return ITEM_ID;
        case 2: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 3: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 4: // ITEM_VALUE
          return ITEM_VALUE;
        case 5: // ALARM_TRIGGERED
          return ALARM_TRIGGERED;
        case 6: // FORBIDDEN_OPEN_POSITION_TRIGGERED
          return FORBIDDEN_OPEN_POSITION_TRIGGERED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SLEDCOMMODITYID_ISSET_ID = 0;
  private static final int __SLEDCONTRACTID_ISSET_ID = 1;
  private static final int __ALARMTRIGGERED_ISSET_ID = 2;
  private static final int __FORBIDDENOPENPOSITIONTRIGGERED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ITEM_ID,_Fields.SLED_COMMODITY_ID,_Fields.SLED_CONTRACT_ID,_Fields.ITEM_VALUE,_Fields.ALARM_TRIGGERED,_Fields.FORBIDDEN_OPEN_POSITION_TRIGGERED};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ITEM_ID, new org.apache.thrift.meta_data.FieldMetaData("itemId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ITEM_VALUE, new org.apache.thrift.meta_data.FieldMetaData("itemValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingRiskRuleItemValue.class)));
    tmpMap.put(_Fields.ALARM_TRIGGERED, new org.apache.thrift.meta_data.FieldMetaData("alarmTriggered", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.FORBIDDEN_OPEN_POSITION_TRIGGERED, new org.apache.thrift.meta_data.FieldMetaData("forbiddenOpenPositionTriggered", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingRiskItemDataInfo.class, metaDataMap);
  }

  public HostingRiskItemDataInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingRiskItemDataInfo(HostingRiskItemDataInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    this.sledCommodityId = other.sledCommodityId;
    this.sledContractId = other.sledContractId;
    if (other.isSetItemValue()) {
      this.itemValue = new HostingRiskRuleItemValue(other.itemValue);
    }
    this.alarmTriggered = other.alarmTriggered;
    this.forbiddenOpenPositionTriggered = other.forbiddenOpenPositionTriggered;
  }

  public HostingRiskItemDataInfo deepCopy() {
    return new HostingRiskItemDataInfo(this);
  }

  @Override
  public void clear() {
    this.itemId = null;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    this.itemValue = null;
    setAlarmTriggeredIsSet(false);
    this.alarmTriggered = false;
    setForbiddenOpenPositionTriggeredIsSet(false);
    this.forbiddenOpenPositionTriggered = false;
  }

  public String getItemId() {
    return this.itemId;
  }

  public HostingRiskItemDataInfo setItemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public HostingRiskItemDataInfo setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public HostingRiskItemDataInfo setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public HostingRiskRuleItemValue getItemValue() {
    return this.itemValue;
  }

  public HostingRiskItemDataInfo setItemValue(HostingRiskRuleItemValue itemValue) {
    this.itemValue = itemValue;
    return this;
  }

  public void unsetItemValue() {
    this.itemValue = null;
  }

  /** Returns true if field itemValue is set (has been assigned a value) and false otherwise */
  public boolean isSetItemValue() {
    return this.itemValue != null;
  }

  public void setItemValueIsSet(boolean value) {
    if (!value) {
      this.itemValue = null;
    }
  }

  public boolean isAlarmTriggered() {
    return this.alarmTriggered;
  }

  public HostingRiskItemDataInfo setAlarmTriggered(boolean alarmTriggered) {
    this.alarmTriggered = alarmTriggered;
    setAlarmTriggeredIsSet(true);
    return this;
  }

  public void unsetAlarmTriggered() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ALARMTRIGGERED_ISSET_ID);
  }

  /** Returns true if field alarmTriggered is set (has been assigned a value) and false otherwise */
  public boolean isSetAlarmTriggered() {
    return EncodingUtils.testBit(__isset_bitfield, __ALARMTRIGGERED_ISSET_ID);
  }

  public void setAlarmTriggeredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ALARMTRIGGERED_ISSET_ID, value);
  }

  public boolean isForbiddenOpenPositionTriggered() {
    return this.forbiddenOpenPositionTriggered;
  }

  public HostingRiskItemDataInfo setForbiddenOpenPositionTriggered(boolean forbiddenOpenPositionTriggered) {
    this.forbiddenOpenPositionTriggered = forbiddenOpenPositionTriggered;
    setForbiddenOpenPositionTriggeredIsSet(true);
    return this;
  }

  public void unsetForbiddenOpenPositionTriggered() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FORBIDDENOPENPOSITIONTRIGGERED_ISSET_ID);
  }

  /** Returns true if field forbiddenOpenPositionTriggered is set (has been assigned a value) and false otherwise */
  public boolean isSetForbiddenOpenPositionTriggered() {
    return EncodingUtils.testBit(__isset_bitfield, __FORBIDDENOPENPOSITIONTRIGGERED_ISSET_ID);
  }

  public void setForbiddenOpenPositionTriggeredIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FORBIDDENOPENPOSITIONTRIGGERED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ITEM_ID:
      if (value == null) {
        unsetItemId();
      } else {
        setItemId((String)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case ITEM_VALUE:
      if (value == null) {
        unsetItemValue();
      } else {
        setItemValue((HostingRiskRuleItemValue)value);
      }
      break;

    case ALARM_TRIGGERED:
      if (value == null) {
        unsetAlarmTriggered();
      } else {
        setAlarmTriggered((Boolean)value);
      }
      break;

    case FORBIDDEN_OPEN_POSITION_TRIGGERED:
      if (value == null) {
        unsetForbiddenOpenPositionTriggered();
      } else {
        setForbiddenOpenPositionTriggered((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ITEM_ID:
      return getItemId();

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case ITEM_VALUE:
      return getItemValue();

    case ALARM_TRIGGERED:
      return Boolean.valueOf(isAlarmTriggered());

    case FORBIDDEN_OPEN_POSITION_TRIGGERED:
      return Boolean.valueOf(isForbiddenOpenPositionTriggered());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ITEM_ID:
      return isSetItemId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case ITEM_VALUE:
      return isSetItemValue();
    case ALARM_TRIGGERED:
      return isSetAlarmTriggered();
    case FORBIDDEN_OPEN_POSITION_TRIGGERED:
      return isSetForbiddenOpenPositionTriggered();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingRiskItemDataInfo)
      return this.equals((HostingRiskItemDataInfo)that);
    return false;
  }

  public boolean equals(HostingRiskItemDataInfo that) {
    if (that == null)
      return false;

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_itemValue = true && this.isSetItemValue();
    boolean that_present_itemValue = true && that.isSetItemValue();
    if (this_present_itemValue || that_present_itemValue) {
      if (!(this_present_itemValue && that_present_itemValue))
        return false;
      if (!this.itemValue.equals(that.itemValue))
        return false;
    }

    boolean this_present_alarmTriggered = true && this.isSetAlarmTriggered();
    boolean that_present_alarmTriggered = true && that.isSetAlarmTriggered();
    if (this_present_alarmTriggered || that_present_alarmTriggered) {
      if (!(this_present_alarmTriggered && that_present_alarmTriggered))
        return false;
      if (this.alarmTriggered != that.alarmTriggered)
        return false;
    }

    boolean this_present_forbiddenOpenPositionTriggered = true && this.isSetForbiddenOpenPositionTriggered();
    boolean that_present_forbiddenOpenPositionTriggered = true && that.isSetForbiddenOpenPositionTriggered();
    if (this_present_forbiddenOpenPositionTriggered || that_present_forbiddenOpenPositionTriggered) {
      if (!(this_present_forbiddenOpenPositionTriggered && that_present_forbiddenOpenPositionTriggered))
        return false;
      if (this.forbiddenOpenPositionTriggered != that.forbiddenOpenPositionTriggered)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingRiskItemDataInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetItemId()).compareTo(other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemValue()).compareTo(other.isSetItemValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemValue, other.itemValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAlarmTriggered()).compareTo(other.isSetAlarmTriggered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAlarmTriggered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.alarmTriggered, other.alarmTriggered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetForbiddenOpenPositionTriggered()).compareTo(other.isSetForbiddenOpenPositionTriggered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetForbiddenOpenPositionTriggered()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.forbiddenOpenPositionTriggered, other.forbiddenOpenPositionTriggered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingRiskItemDataInfo(");
    boolean first = true;

    if (isSetItemId()) {
      sb.append("itemId:");
      if (this.itemId == null) {
        sb.append("null");
      } else {
        sb.append(this.itemId);
      }
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetItemValue()) {
      if (!first) sb.append(", ");
      sb.append("itemValue:");
      if (this.itemValue == null) {
        sb.append("null");
      } else {
        sb.append(this.itemValue);
      }
      first = false;
    }
    if (isSetAlarmTriggered()) {
      if (!first) sb.append(", ");
      sb.append("alarmTriggered:");
      sb.append(this.alarmTriggered);
      first = false;
    }
    if (isSetForbiddenOpenPositionTriggered()) {
      if (!first) sb.append(", ");
      sb.append("forbiddenOpenPositionTriggered:");
      sb.append(this.forbiddenOpenPositionTriggered);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (itemValue != null) {
      itemValue.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingRiskItemDataInfoStandardSchemeFactory implements SchemeFactory {
    public HostingRiskItemDataInfoStandardScheme getScheme() {
      return new HostingRiskItemDataInfoStandardScheme();
    }
  }

  private static class HostingRiskItemDataInfoStandardScheme extends StandardScheme<HostingRiskItemDataInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingRiskItemDataInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ITEM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemId = iprot.readString();
              struct.setItemIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.itemValue = new HostingRiskRuleItemValue();
              struct.itemValue.read(iprot);
              struct.setItemValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ALARM_TRIGGERED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.alarmTriggered = iprot.readBool();
              struct.setAlarmTriggeredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // FORBIDDEN_OPEN_POSITION_TRIGGERED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.forbiddenOpenPositionTriggered = iprot.readBool();
              struct.setForbiddenOpenPositionTriggeredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingRiskItemDataInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.itemId != null) {
        if (struct.isSetItemId()) {
          oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
          oprot.writeString(struct.itemId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.itemValue != null) {
        if (struct.isSetItemValue()) {
          oprot.writeFieldBegin(ITEM_VALUE_FIELD_DESC);
          struct.itemValue.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAlarmTriggered()) {
        oprot.writeFieldBegin(ALARM_TRIGGERED_FIELD_DESC);
        oprot.writeBool(struct.alarmTriggered);
        oprot.writeFieldEnd();
      }
      if (struct.isSetForbiddenOpenPositionTriggered()) {
        oprot.writeFieldBegin(FORBIDDEN_OPEN_POSITION_TRIGGERED_FIELD_DESC);
        oprot.writeBool(struct.forbiddenOpenPositionTriggered);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingRiskItemDataInfoTupleSchemeFactory implements SchemeFactory {
    public HostingRiskItemDataInfoTupleScheme getScheme() {
      return new HostingRiskItemDataInfoTupleScheme();
    }
  }

  private static class HostingRiskItemDataInfoTupleScheme extends TupleScheme<HostingRiskItemDataInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingRiskItemDataInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetItemId()) {
        optionals.set(0);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(1);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(2);
      }
      if (struct.isSetItemValue()) {
        optionals.set(3);
      }
      if (struct.isSetAlarmTriggered()) {
        optionals.set(4);
      }
      if (struct.isSetForbiddenOpenPositionTriggered()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetItemId()) {
        oprot.writeString(struct.itemId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetItemValue()) {
        struct.itemValue.write(oprot);
      }
      if (struct.isSetAlarmTriggered()) {
        oprot.writeBool(struct.alarmTriggered);
      }
      if (struct.isSetForbiddenOpenPositionTriggered()) {
        oprot.writeBool(struct.forbiddenOpenPositionTriggered);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingRiskItemDataInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.itemId = iprot.readString();
        struct.setItemIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.itemValue = new HostingRiskRuleItemValue();
        struct.itemValue.read(iprot);
        struct.setItemValueIsSet(true);
      }
      if (incoming.get(4)) {
        struct.alarmTriggered = iprot.readBool();
        struct.setAlarmTriggeredIsSet(true);
      }
      if (incoming.get(5)) {
        struct.forbiddenOpenPositionTriggered = iprot.readBool();
        struct.setForbiddenOpenPositionTriggeredIsSet(true);
      }
    }
  }

}

