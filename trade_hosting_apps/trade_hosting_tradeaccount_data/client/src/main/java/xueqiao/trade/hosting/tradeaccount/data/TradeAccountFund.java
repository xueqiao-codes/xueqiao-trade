/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.tradeaccount.data;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeAccountFund implements org.apache.thrift.TBase<TradeAccountFund, TradeAccountFund._Fields>, java.io.Serializable, Cloneable, Comparable<TradeAccountFund> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeAccountFund");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_CHANNEL_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyChannel", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CREDIT_FIELD_DESC = new org.apache.thrift.protocol.TField("credit", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PRE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("preBalance", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField DEPOSIT_FIELD_DESC = new org.apache.thrift.protocol.TField("deposit", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField WITHDRAW_FIELD_DESC = new org.apache.thrift.protocol.TField("withdraw", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField FROZEN_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField FROZEN_CASH_FIELD_DESC = new org.apache.thrift.protocol.TField("frozenCash", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField CURR_MARGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("currMargin", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField COMMISSION_FIELD_DESC = new org.apache.thrift.protocol.TField("commission", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField CLOSE_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("closeProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField POSITION_PROFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("positionProfit", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("available", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField DYNAMIC_BENEFIT_FIELD_DESC = new org.apache.thrift.protocol.TField("dynamicBenefit", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField RISK_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("riskRate", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField UPDATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)17);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeAccountFundStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeAccountFundTupleSchemeFactory());
  }

  public long tradeAccountId; // optional
  public String currencyNo; // optional
  public String currencyChannel; // optional
  public double credit; // optional
  public double preBalance; // optional
  public double deposit; // optional
  public double withdraw; // optional
  public double frozenMargin; // optional
  public double frozenCash; // optional
  public double currMargin; // optional
  public double commission; // optional
  public double closeProfit; // optional
  public double positionProfit; // optional
  public double available; // optional
  public double dynamicBenefit; // optional
  public double riskRate; // optional
  public long updateTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT_ID((short)1, "tradeAccountId"),
    CURRENCY_NO((short)2, "currencyNo"),
    CURRENCY_CHANNEL((short)3, "currencyChannel"),
    CREDIT((short)4, "credit"),
    PRE_BALANCE((short)5, "preBalance"),
    DEPOSIT((short)6, "deposit"),
    WITHDRAW((short)7, "withdraw"),
    FROZEN_MARGIN((short)8, "frozenMargin"),
    FROZEN_CASH((short)9, "frozenCash"),
    CURR_MARGIN((short)10, "currMargin"),
    COMMISSION((short)11, "commission"),
    CLOSE_PROFIT((short)12, "closeProfit"),
    POSITION_PROFIT((short)13, "positionProfit"),
    AVAILABLE((short)14, "available"),
    DYNAMIC_BENEFIT((short)15, "dynamicBenefit"),
    RISK_RATE((short)16, "riskRate"),
    UPDATE_TIMESTAMP_MS((short)17, "updateTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 2: // CURRENCY_NO
          return CURRENCY_NO;
        case 3: // CURRENCY_CHANNEL
          return CURRENCY_CHANNEL;
        case 4: // CREDIT
          return CREDIT;
        case 5: // PRE_BALANCE
          return PRE_BALANCE;
        case 6: // DEPOSIT
          return DEPOSIT;
        case 7: // WITHDRAW
          return WITHDRAW;
        case 8: // FROZEN_MARGIN
          return FROZEN_MARGIN;
        case 9: // FROZEN_CASH
          return FROZEN_CASH;
        case 10: // CURR_MARGIN
          return CURR_MARGIN;
        case 11: // COMMISSION
          return COMMISSION;
        case 12: // CLOSE_PROFIT
          return CLOSE_PROFIT;
        case 13: // POSITION_PROFIT
          return POSITION_PROFIT;
        case 14: // AVAILABLE
          return AVAILABLE;
        case 15: // DYNAMIC_BENEFIT
          return DYNAMIC_BENEFIT;
        case 16: // RISK_RATE
          return RISK_RATE;
        case 17: // UPDATE_TIMESTAMP_MS
          return UPDATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private static final int __CREDIT_ISSET_ID = 1;
  private static final int __PREBALANCE_ISSET_ID = 2;
  private static final int __DEPOSIT_ISSET_ID = 3;
  private static final int __WITHDRAW_ISSET_ID = 4;
  private static final int __FROZENMARGIN_ISSET_ID = 5;
  private static final int __FROZENCASH_ISSET_ID = 6;
  private static final int __CURRMARGIN_ISSET_ID = 7;
  private static final int __COMMISSION_ISSET_ID = 8;
  private static final int __CLOSEPROFIT_ISSET_ID = 9;
  private static final int __POSITIONPROFIT_ISSET_ID = 10;
  private static final int __AVAILABLE_ISSET_ID = 11;
  private static final int __DYNAMICBENEFIT_ISSET_ID = 12;
  private static final int __RISKRATE_ISSET_ID = 13;
  private static final int __UPDATETIMESTAMPMS_ISSET_ID = 14;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT_ID,_Fields.CURRENCY_NO,_Fields.CURRENCY_CHANNEL,_Fields.CREDIT,_Fields.PRE_BALANCE,_Fields.DEPOSIT,_Fields.WITHDRAW,_Fields.FROZEN_MARGIN,_Fields.FROZEN_CASH,_Fields.CURR_MARGIN,_Fields.COMMISSION,_Fields.CLOSE_PROFIT,_Fields.POSITION_PROFIT,_Fields.AVAILABLE,_Fields.DYNAMIC_BENEFIT,_Fields.RISK_RATE,_Fields.UPDATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CURRENCY_CHANNEL, new org.apache.thrift.meta_data.FieldMetaData("currencyChannel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREDIT, new org.apache.thrift.meta_data.FieldMetaData("credit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PRE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("preBalance", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPOSIT, new org.apache.thrift.meta_data.FieldMetaData("deposit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.WITHDRAW, new org.apache.thrift.meta_data.FieldMetaData("withdraw", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("frozenMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.FROZEN_CASH, new org.apache.thrift.meta_data.FieldMetaData("frozenCash", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURR_MARGIN, new org.apache.thrift.meta_data.FieldMetaData("currMargin", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.COMMISSION, new org.apache.thrift.meta_data.FieldMetaData("commission", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CLOSE_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("closeProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.POSITION_PROFIT, new org.apache.thrift.meta_data.FieldMetaData("positionProfit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("available", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DYNAMIC_BENEFIT, new org.apache.thrift.meta_data.FieldMetaData("dynamicBenefit", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RISK_RATE, new org.apache.thrift.meta_data.FieldMetaData("riskRate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.UPDATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("updateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeAccountFund.class, metaDataMap);
  }

  public TradeAccountFund() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeAccountFund(TradeAccountFund other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tradeAccountId = other.tradeAccountId;
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    if (other.isSetCurrencyChannel()) {
      this.currencyChannel = other.currencyChannel;
    }
    this.credit = other.credit;
    this.preBalance = other.preBalance;
    this.deposit = other.deposit;
    this.withdraw = other.withdraw;
    this.frozenMargin = other.frozenMargin;
    this.frozenCash = other.frozenCash;
    this.currMargin = other.currMargin;
    this.commission = other.commission;
    this.closeProfit = other.closeProfit;
    this.positionProfit = other.positionProfit;
    this.available = other.available;
    this.dynamicBenefit = other.dynamicBenefit;
    this.riskRate = other.riskRate;
    this.updateTimestampMs = other.updateTimestampMs;
  }

  public TradeAccountFund deepCopy() {
    return new TradeAccountFund(this);
  }

  @Override
  public void clear() {
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    this.currencyNo = null;
    this.currencyChannel = null;
    setCreditIsSet(false);
    this.credit = 0.0;
    setPreBalanceIsSet(false);
    this.preBalance = 0.0;
    setDepositIsSet(false);
    this.deposit = 0.0;
    setWithdrawIsSet(false);
    this.withdraw = 0.0;
    setFrozenMarginIsSet(false);
    this.frozenMargin = 0.0;
    setFrozenCashIsSet(false);
    this.frozenCash = 0.0;
    setCurrMarginIsSet(false);
    this.currMargin = 0.0;
    setCommissionIsSet(false);
    this.commission = 0.0;
    setCloseProfitIsSet(false);
    this.closeProfit = 0.0;
    setPositionProfitIsSet(false);
    this.positionProfit = 0.0;
    setAvailableIsSet(false);
    this.available = 0.0;
    setDynamicBenefitIsSet(false);
    this.dynamicBenefit = 0.0;
    setRiskRateIsSet(false);
    this.riskRate = 0.0;
    setUpdateTimestampMsIsSet(false);
    this.updateTimestampMs = 0;
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public TradeAccountFund setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public TradeAccountFund setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public String getCurrencyChannel() {
    return this.currencyChannel;
  }

  public TradeAccountFund setCurrencyChannel(String currencyChannel) {
    this.currencyChannel = currencyChannel;
    return this;
  }

  public void unsetCurrencyChannel() {
    this.currencyChannel = null;
  }

  /** Returns true if field currencyChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyChannel() {
    return this.currencyChannel != null;
  }

  public void setCurrencyChannelIsSet(boolean value) {
    if (!value) {
      this.currencyChannel = null;
    }
  }

  public double getCredit() {
    return this.credit;
  }

  public TradeAccountFund setCredit(double credit) {
    this.credit = credit;
    setCreditIsSet(true);
    return this;
  }

  public void unsetCredit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  /** Returns true if field credit is set (has been assigned a value) and false otherwise */
  public boolean isSetCredit() {
    return EncodingUtils.testBit(__isset_bitfield, __CREDIT_ISSET_ID);
  }

  public void setCreditIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREDIT_ISSET_ID, value);
  }

  public double getPreBalance() {
    return this.preBalance;
  }

  public TradeAccountFund setPreBalance(double preBalance) {
    this.preBalance = preBalance;
    setPreBalanceIsSet(true);
    return this;
  }

  public void unsetPreBalance() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  /** Returns true if field preBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetPreBalance() {
    return EncodingUtils.testBit(__isset_bitfield, __PREBALANCE_ISSET_ID);
  }

  public void setPreBalanceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PREBALANCE_ISSET_ID, value);
  }

  public double getDeposit() {
    return this.deposit;
  }

  public TradeAccountFund setDeposit(double deposit) {
    this.deposit = deposit;
    setDepositIsSet(true);
    return this;
  }

  public void unsetDeposit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  /** Returns true if field deposit is set (has been assigned a value) and false otherwise */
  public boolean isSetDeposit() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPOSIT_ISSET_ID);
  }

  public void setDepositIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPOSIT_ISSET_ID, value);
  }

  public double getWithdraw() {
    return this.withdraw;
  }

  public TradeAccountFund setWithdraw(double withdraw) {
    this.withdraw = withdraw;
    setWithdrawIsSet(true);
    return this;
  }

  public void unsetWithdraw() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  /** Returns true if field withdraw is set (has been assigned a value) and false otherwise */
  public boolean isSetWithdraw() {
    return EncodingUtils.testBit(__isset_bitfield, __WITHDRAW_ISSET_ID);
  }

  public void setWithdrawIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WITHDRAW_ISSET_ID, value);
  }

  public double getFrozenMargin() {
    return this.frozenMargin;
  }

  public TradeAccountFund setFrozenMargin(double frozenMargin) {
    this.frozenMargin = frozenMargin;
    setFrozenMarginIsSet(true);
    return this;
  }

  public void unsetFrozenMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  /** Returns true if field frozenMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID);
  }

  public void setFrozenMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENMARGIN_ISSET_ID, value);
  }

  public double getFrozenCash() {
    return this.frozenCash;
  }

  public TradeAccountFund setFrozenCash(double frozenCash) {
    this.frozenCash = frozenCash;
    setFrozenCashIsSet(true);
    return this;
  }

  public void unsetFrozenCash() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  /** Returns true if field frozenCash is set (has been assigned a value) and false otherwise */
  public boolean isSetFrozenCash() {
    return EncodingUtils.testBit(__isset_bitfield, __FROZENCASH_ISSET_ID);
  }

  public void setFrozenCashIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FROZENCASH_ISSET_ID, value);
  }

  public double getCurrMargin() {
    return this.currMargin;
  }

  public TradeAccountFund setCurrMargin(double currMargin) {
    this.currMargin = currMargin;
    setCurrMarginIsSet(true);
    return this;
  }

  public void unsetCurrMargin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  /** Returns true if field currMargin is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrMargin() {
    return EncodingUtils.testBit(__isset_bitfield, __CURRMARGIN_ISSET_ID);
  }

  public void setCurrMarginIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CURRMARGIN_ISSET_ID, value);
  }

  public double getCommission() {
    return this.commission;
  }

  public TradeAccountFund setCommission(double commission) {
    this.commission = commission;
    setCommissionIsSet(true);
    return this;
  }

  public void unsetCommission() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  /** Returns true if field commission is set (has been assigned a value) and false otherwise */
  public boolean isSetCommission() {
    return EncodingUtils.testBit(__isset_bitfield, __COMMISSION_ISSET_ID);
  }

  public void setCommissionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMMISSION_ISSET_ID, value);
  }

  public double getCloseProfit() {
    return this.closeProfit;
  }

  public TradeAccountFund setCloseProfit(double closeProfit) {
    this.closeProfit = closeProfit;
    setCloseProfitIsSet(true);
    return this;
  }

  public void unsetCloseProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  /** Returns true if field closeProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID);
  }

  public void setCloseProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLOSEPROFIT_ISSET_ID, value);
  }

  public double getPositionProfit() {
    return this.positionProfit;
  }

  public TradeAccountFund setPositionProfit(double positionProfit) {
    this.positionProfit = positionProfit;
    setPositionProfitIsSet(true);
    return this;
  }

  public void unsetPositionProfit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  /** Returns true if field positionProfit is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionProfit() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID);
  }

  public void setPositionProfitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONPROFIT_ISSET_ID, value);
  }

  public double getAvailable() {
    return this.available;
  }

  public TradeAccountFund setAvailable(double available) {
    this.available = available;
    setAvailableIsSet(true);
    return this;
  }

  public void unsetAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  /** Returns true if field available is set (has been assigned a value) and false otherwise */
  public boolean isSetAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __AVAILABLE_ISSET_ID);
  }

  public void setAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVAILABLE_ISSET_ID, value);
  }

  public double getDynamicBenefit() {
    return this.dynamicBenefit;
  }

  public TradeAccountFund setDynamicBenefit(double dynamicBenefit) {
    this.dynamicBenefit = dynamicBenefit;
    setDynamicBenefitIsSet(true);
    return this;
  }

  public void unsetDynamicBenefit() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  /** Returns true if field dynamicBenefit is set (has been assigned a value) and false otherwise */
  public boolean isSetDynamicBenefit() {
    return EncodingUtils.testBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID);
  }

  public void setDynamicBenefitIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DYNAMICBENEFIT_ISSET_ID, value);
  }

  public double getRiskRate() {
    return this.riskRate;
  }

  public TradeAccountFund setRiskRate(double riskRate) {
    this.riskRate = riskRate;
    setRiskRateIsSet(true);
    return this;
  }

  public void unsetRiskRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  /** Returns true if field riskRate is set (has been assigned a value) and false otherwise */
  public boolean isSetRiskRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RISKRATE_ISSET_ID);
  }

  public void setRiskRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RISKRATE_ISSET_ID, value);
  }

  public long getUpdateTimestampMs() {
    return this.updateTimestampMs;
  }

  public TradeAccountFund setUpdateTimestampMs(long updateTimestampMs) {
    this.updateTimestampMs = updateTimestampMs;
    setUpdateTimestampMsIsSet(true);
    return this;
  }

  public void unsetUpdateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field updateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID);
  }

  public void setUpdateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPDATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case CURRENCY_CHANNEL:
      if (value == null) {
        unsetCurrencyChannel();
      } else {
        setCurrencyChannel((String)value);
      }
      break;

    case CREDIT:
      if (value == null) {
        unsetCredit();
      } else {
        setCredit((Double)value);
      }
      break;

    case PRE_BALANCE:
      if (value == null) {
        unsetPreBalance();
      } else {
        setPreBalance((Double)value);
      }
      break;

    case DEPOSIT:
      if (value == null) {
        unsetDeposit();
      } else {
        setDeposit((Double)value);
      }
      break;

    case WITHDRAW:
      if (value == null) {
        unsetWithdraw();
      } else {
        setWithdraw((Double)value);
      }
      break;

    case FROZEN_MARGIN:
      if (value == null) {
        unsetFrozenMargin();
      } else {
        setFrozenMargin((Double)value);
      }
      break;

    case FROZEN_CASH:
      if (value == null) {
        unsetFrozenCash();
      } else {
        setFrozenCash((Double)value);
      }
      break;

    case CURR_MARGIN:
      if (value == null) {
        unsetCurrMargin();
      } else {
        setCurrMargin((Double)value);
      }
      break;

    case COMMISSION:
      if (value == null) {
        unsetCommission();
      } else {
        setCommission((Double)value);
      }
      break;

    case CLOSE_PROFIT:
      if (value == null) {
        unsetCloseProfit();
      } else {
        setCloseProfit((Double)value);
      }
      break;

    case POSITION_PROFIT:
      if (value == null) {
        unsetPositionProfit();
      } else {
        setPositionProfit((Double)value);
      }
      break;

    case AVAILABLE:
      if (value == null) {
        unsetAvailable();
      } else {
        setAvailable((Double)value);
      }
      break;

    case DYNAMIC_BENEFIT:
      if (value == null) {
        unsetDynamicBenefit();
      } else {
        setDynamicBenefit((Double)value);
      }
      break;

    case RISK_RATE:
      if (value == null) {
        unsetRiskRate();
      } else {
        setRiskRate((Double)value);
      }
      break;

    case UPDATE_TIMESTAMP_MS:
      if (value == null) {
        unsetUpdateTimestampMs();
      } else {
        setUpdateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case CURRENCY_NO:
      return getCurrencyNo();

    case CURRENCY_CHANNEL:
      return getCurrencyChannel();

    case CREDIT:
      return Double.valueOf(getCredit());

    case PRE_BALANCE:
      return Double.valueOf(getPreBalance());

    case DEPOSIT:
      return Double.valueOf(getDeposit());

    case WITHDRAW:
      return Double.valueOf(getWithdraw());

    case FROZEN_MARGIN:
      return Double.valueOf(getFrozenMargin());

    case FROZEN_CASH:
      return Double.valueOf(getFrozenCash());

    case CURR_MARGIN:
      return Double.valueOf(getCurrMargin());

    case COMMISSION:
      return Double.valueOf(getCommission());

    case CLOSE_PROFIT:
      return Double.valueOf(getCloseProfit());

    case POSITION_PROFIT:
      return Double.valueOf(getPositionProfit());

    case AVAILABLE:
      return Double.valueOf(getAvailable());

    case DYNAMIC_BENEFIT:
      return Double.valueOf(getDynamicBenefit());

    case RISK_RATE:
      return Double.valueOf(getRiskRate());

    case UPDATE_TIMESTAMP_MS:
      return Long.valueOf(getUpdateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case CURRENCY_CHANNEL:
      return isSetCurrencyChannel();
    case CREDIT:
      return isSetCredit();
    case PRE_BALANCE:
      return isSetPreBalance();
    case DEPOSIT:
      return isSetDeposit();
    case WITHDRAW:
      return isSetWithdraw();
    case FROZEN_MARGIN:
      return isSetFrozenMargin();
    case FROZEN_CASH:
      return isSetFrozenCash();
    case CURR_MARGIN:
      return isSetCurrMargin();
    case COMMISSION:
      return isSetCommission();
    case CLOSE_PROFIT:
      return isSetCloseProfit();
    case POSITION_PROFIT:
      return isSetPositionProfit();
    case AVAILABLE:
      return isSetAvailable();
    case DYNAMIC_BENEFIT:
      return isSetDynamicBenefit();
    case RISK_RATE:
      return isSetRiskRate();
    case UPDATE_TIMESTAMP_MS:
      return isSetUpdateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeAccountFund)
      return this.equals((TradeAccountFund)that);
    return false;
  }

  public boolean equals(TradeAccountFund that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_currencyChannel = true && this.isSetCurrencyChannel();
    boolean that_present_currencyChannel = true && that.isSetCurrencyChannel();
    if (this_present_currencyChannel || that_present_currencyChannel) {
      if (!(this_present_currencyChannel && that_present_currencyChannel))
        return false;
      if (!this.currencyChannel.equals(that.currencyChannel))
        return false;
    }

    boolean this_present_credit = true && this.isSetCredit();
    boolean that_present_credit = true && that.isSetCredit();
    if (this_present_credit || that_present_credit) {
      if (!(this_present_credit && that_present_credit))
        return false;
      if (this.credit != that.credit)
        return false;
    }

    boolean this_present_preBalance = true && this.isSetPreBalance();
    boolean that_present_preBalance = true && that.isSetPreBalance();
    if (this_present_preBalance || that_present_preBalance) {
      if (!(this_present_preBalance && that_present_preBalance))
        return false;
      if (this.preBalance != that.preBalance)
        return false;
    }

    boolean this_present_deposit = true && this.isSetDeposit();
    boolean that_present_deposit = true && that.isSetDeposit();
    if (this_present_deposit || that_present_deposit) {
      if (!(this_present_deposit && that_present_deposit))
        return false;
      if (this.deposit != that.deposit)
        return false;
    }

    boolean this_present_withdraw = true && this.isSetWithdraw();
    boolean that_present_withdraw = true && that.isSetWithdraw();
    if (this_present_withdraw || that_present_withdraw) {
      if (!(this_present_withdraw && that_present_withdraw))
        return false;
      if (this.withdraw != that.withdraw)
        return false;
    }

    boolean this_present_frozenMargin = true && this.isSetFrozenMargin();
    boolean that_present_frozenMargin = true && that.isSetFrozenMargin();
    if (this_present_frozenMargin || that_present_frozenMargin) {
      if (!(this_present_frozenMargin && that_present_frozenMargin))
        return false;
      if (this.frozenMargin != that.frozenMargin)
        return false;
    }

    boolean this_present_frozenCash = true && this.isSetFrozenCash();
    boolean that_present_frozenCash = true && that.isSetFrozenCash();
    if (this_present_frozenCash || that_present_frozenCash) {
      if (!(this_present_frozenCash && that_present_frozenCash))
        return false;
      if (this.frozenCash != that.frozenCash)
        return false;
    }

    boolean this_present_currMargin = true && this.isSetCurrMargin();
    boolean that_present_currMargin = true && that.isSetCurrMargin();
    if (this_present_currMargin || that_present_currMargin) {
      if (!(this_present_currMargin && that_present_currMargin))
        return false;
      if (this.currMargin != that.currMargin)
        return false;
    }

    boolean this_present_commission = true && this.isSetCommission();
    boolean that_present_commission = true && that.isSetCommission();
    if (this_present_commission || that_present_commission) {
      if (!(this_present_commission && that_present_commission))
        return false;
      if (this.commission != that.commission)
        return false;
    }

    boolean this_present_closeProfit = true && this.isSetCloseProfit();
    boolean that_present_closeProfit = true && that.isSetCloseProfit();
    if (this_present_closeProfit || that_present_closeProfit) {
      if (!(this_present_closeProfit && that_present_closeProfit))
        return false;
      if (this.closeProfit != that.closeProfit)
        return false;
    }

    boolean this_present_positionProfit = true && this.isSetPositionProfit();
    boolean that_present_positionProfit = true && that.isSetPositionProfit();
    if (this_present_positionProfit || that_present_positionProfit) {
      if (!(this_present_positionProfit && that_present_positionProfit))
        return false;
      if (this.positionProfit != that.positionProfit)
        return false;
    }

    boolean this_present_available = true && this.isSetAvailable();
    boolean that_present_available = true && that.isSetAvailable();
    if (this_present_available || that_present_available) {
      if (!(this_present_available && that_present_available))
        return false;
      if (this.available != that.available)
        return false;
    }

    boolean this_present_dynamicBenefit = true && this.isSetDynamicBenefit();
    boolean that_present_dynamicBenefit = true && that.isSetDynamicBenefit();
    if (this_present_dynamicBenefit || that_present_dynamicBenefit) {
      if (!(this_present_dynamicBenefit && that_present_dynamicBenefit))
        return false;
      if (this.dynamicBenefit != that.dynamicBenefit)
        return false;
    }

    boolean this_present_riskRate = true && this.isSetRiskRate();
    boolean that_present_riskRate = true && that.isSetRiskRate();
    if (this_present_riskRate || that_present_riskRate) {
      if (!(this_present_riskRate && that_present_riskRate))
        return false;
      if (this.riskRate != that.riskRate)
        return false;
    }

    boolean this_present_updateTimestampMs = true && this.isSetUpdateTimestampMs();
    boolean that_present_updateTimestampMs = true && that.isSetUpdateTimestampMs();
    if (this_present_updateTimestampMs || that_present_updateTimestampMs) {
      if (!(this_present_updateTimestampMs && that_present_updateTimestampMs))
        return false;
      if (this.updateTimestampMs != that.updateTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeAccountFund other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrencyChannel()).compareTo(other.isSetCurrencyChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyChannel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyChannel, other.currencyChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCredit()).compareTo(other.isSetCredit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCredit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.credit, other.credit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPreBalance()).compareTo(other.isSetPreBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preBalance, other.preBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDeposit()).compareTo(other.isSetDeposit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeposit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deposit, other.deposit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWithdraw()).compareTo(other.isSetWithdraw());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWithdraw()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.withdraw, other.withdraw);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenMargin()).compareTo(other.isSetFrozenMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenMargin, other.frozenMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFrozenCash()).compareTo(other.isSetFrozenCash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrozenCash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frozenCash, other.frozenCash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrMargin()).compareTo(other.isSetCurrMargin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrMargin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currMargin, other.currMargin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCommission()).compareTo(other.isSetCommission());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCommission()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.commission, other.commission);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseProfit()).compareTo(other.isSetCloseProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeProfit, other.closeProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionProfit()).compareTo(other.isSetPositionProfit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionProfit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionProfit, other.positionProfit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAvailable()).compareTo(other.isSetAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.available, other.available);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDynamicBenefit()).compareTo(other.isSetDynamicBenefit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDynamicBenefit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dynamicBenefit, other.dynamicBenefit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRiskRate()).compareTo(other.isSetRiskRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRiskRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.riskRate, other.riskRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpdateTimestampMs()).compareTo(other.isSetUpdateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTimestampMs, other.updateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeAccountFund(");
    boolean first = true;

    if (isSetTradeAccountId()) {
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetCurrencyNo()) {
      if (!first) sb.append(", ");
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetCurrencyChannel()) {
      if (!first) sb.append(", ");
      sb.append("currencyChannel:");
      if (this.currencyChannel == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyChannel);
      }
      first = false;
    }
    if (isSetCredit()) {
      if (!first) sb.append(", ");
      sb.append("credit:");
      sb.append(this.credit);
      first = false;
    }
    if (isSetPreBalance()) {
      if (!first) sb.append(", ");
      sb.append("preBalance:");
      sb.append(this.preBalance);
      first = false;
    }
    if (isSetDeposit()) {
      if (!first) sb.append(", ");
      sb.append("deposit:");
      sb.append(this.deposit);
      first = false;
    }
    if (isSetWithdraw()) {
      if (!first) sb.append(", ");
      sb.append("withdraw:");
      sb.append(this.withdraw);
      first = false;
    }
    if (isSetFrozenMargin()) {
      if (!first) sb.append(", ");
      sb.append("frozenMargin:");
      sb.append(this.frozenMargin);
      first = false;
    }
    if (isSetFrozenCash()) {
      if (!first) sb.append(", ");
      sb.append("frozenCash:");
      sb.append(this.frozenCash);
      first = false;
    }
    if (isSetCurrMargin()) {
      if (!first) sb.append(", ");
      sb.append("currMargin:");
      sb.append(this.currMargin);
      first = false;
    }
    if (isSetCommission()) {
      if (!first) sb.append(", ");
      sb.append("commission:");
      sb.append(this.commission);
      first = false;
    }
    if (isSetCloseProfit()) {
      if (!first) sb.append(", ");
      sb.append("closeProfit:");
      sb.append(this.closeProfit);
      first = false;
    }
    if (isSetPositionProfit()) {
      if (!first) sb.append(", ");
      sb.append("positionProfit:");
      sb.append(this.positionProfit);
      first = false;
    }
    if (isSetAvailable()) {
      if (!first) sb.append(", ");
      sb.append("available:");
      sb.append(this.available);
      first = false;
    }
    if (isSetDynamicBenefit()) {
      if (!first) sb.append(", ");
      sb.append("dynamicBenefit:");
      sb.append(this.dynamicBenefit);
      first = false;
    }
    if (isSetRiskRate()) {
      if (!first) sb.append(", ");
      sb.append("riskRate:");
      sb.append(this.riskRate);
      first = false;
    }
    if (isSetUpdateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("updateTimestampMs:");
      sb.append(this.updateTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeAccountFundStandardSchemeFactory implements SchemeFactory {
    public TradeAccountFundStandardScheme getScheme() {
      return new TradeAccountFundStandardScheme();
    }
  }

  private static class TradeAccountFundStandardScheme extends StandardScheme<TradeAccountFund> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeAccountFund struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CURRENCY_CHANNEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyChannel = iprot.readString();
              struct.setCurrencyChannelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CREDIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.credit = iprot.readDouble();
              struct.setCreditIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.preBalance = iprot.readDouble();
              struct.setPreBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEPOSIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.deposit = iprot.readDouble();
              struct.setDepositIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WITHDRAW
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.withdraw = iprot.readDouble();
              struct.setWithdrawIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FROZEN_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenMargin = iprot.readDouble();
              struct.setFrozenMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FROZEN_CASH
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.frozenCash = iprot.readDouble();
              struct.setFrozenCashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CURR_MARGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.currMargin = iprot.readDouble();
              struct.setCurrMarginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // COMMISSION
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.commission = iprot.readDouble();
              struct.setCommissionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLOSE_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.closeProfit = iprot.readDouble();
              struct.setCloseProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION_PROFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.positionProfit = iprot.readDouble();
              struct.setPositionProfitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.available = iprot.readDouble();
              struct.setAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DYNAMIC_BENEFIT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.dynamicBenefit = iprot.readDouble();
              struct.setDynamicBenefitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // RISK_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.riskRate = iprot.readDouble();
              struct.setRiskRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // UPDATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTimestampMs = iprot.readI64();
              struct.setUpdateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeAccountFund struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.currencyChannel != null) {
        if (struct.isSetCurrencyChannel()) {
          oprot.writeFieldBegin(CURRENCY_CHANNEL_FIELD_DESC);
          oprot.writeString(struct.currencyChannel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCredit()) {
        oprot.writeFieldBegin(CREDIT_FIELD_DESC);
        oprot.writeDouble(struct.credit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPreBalance()) {
        oprot.writeFieldBegin(PRE_BALANCE_FIELD_DESC);
        oprot.writeDouble(struct.preBalance);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeposit()) {
        oprot.writeFieldBegin(DEPOSIT_FIELD_DESC);
        oprot.writeDouble(struct.deposit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetWithdraw()) {
        oprot.writeFieldBegin(WITHDRAW_FIELD_DESC);
        oprot.writeDouble(struct.withdraw);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeFieldBegin(FROZEN_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.frozenMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeFieldBegin(FROZEN_CASH_FIELD_DESC);
        oprot.writeDouble(struct.frozenCash);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCurrMargin()) {
        oprot.writeFieldBegin(CURR_MARGIN_FIELD_DESC);
        oprot.writeDouble(struct.currMargin);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCommission()) {
        oprot.writeFieldBegin(COMMISSION_FIELD_DESC);
        oprot.writeDouble(struct.commission);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeFieldBegin(CLOSE_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.closeProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeFieldBegin(POSITION_PROFIT_FIELD_DESC);
        oprot.writeDouble(struct.positionProfit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetAvailable()) {
        oprot.writeFieldBegin(AVAILABLE_FIELD_DESC);
        oprot.writeDouble(struct.available);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDynamicBenefit()) {
        oprot.writeFieldBegin(DYNAMIC_BENEFIT_FIELD_DESC);
        oprot.writeDouble(struct.dynamicBenefit);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRiskRate()) {
        oprot.writeFieldBegin(RISK_RATE_FIELD_DESC);
        oprot.writeDouble(struct.riskRate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpdateTimestampMs()) {
        oprot.writeFieldBegin(UPDATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.updateTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeAccountFundTupleSchemeFactory implements SchemeFactory {
    public TradeAccountFundTupleScheme getScheme() {
      return new TradeAccountFundTupleScheme();
    }
  }

  private static class TradeAccountFundTupleScheme extends TupleScheme<TradeAccountFund> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeAccountFund struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetCurrencyNo()) {
        optionals.set(1);
      }
      if (struct.isSetCurrencyChannel()) {
        optionals.set(2);
      }
      if (struct.isSetCredit()) {
        optionals.set(3);
      }
      if (struct.isSetPreBalance()) {
        optionals.set(4);
      }
      if (struct.isSetDeposit()) {
        optionals.set(5);
      }
      if (struct.isSetWithdraw()) {
        optionals.set(6);
      }
      if (struct.isSetFrozenMargin()) {
        optionals.set(7);
      }
      if (struct.isSetFrozenCash()) {
        optionals.set(8);
      }
      if (struct.isSetCurrMargin()) {
        optionals.set(9);
      }
      if (struct.isSetCommission()) {
        optionals.set(10);
      }
      if (struct.isSetCloseProfit()) {
        optionals.set(11);
      }
      if (struct.isSetPositionProfit()) {
        optionals.set(12);
      }
      if (struct.isSetAvailable()) {
        optionals.set(13);
      }
      if (struct.isSetDynamicBenefit()) {
        optionals.set(14);
      }
      if (struct.isSetRiskRate()) {
        optionals.set(15);
      }
      if (struct.isSetUpdateTimestampMs()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetCurrencyChannel()) {
        oprot.writeString(struct.currencyChannel);
      }
      if (struct.isSetCredit()) {
        oprot.writeDouble(struct.credit);
      }
      if (struct.isSetPreBalance()) {
        oprot.writeDouble(struct.preBalance);
      }
      if (struct.isSetDeposit()) {
        oprot.writeDouble(struct.deposit);
      }
      if (struct.isSetWithdraw()) {
        oprot.writeDouble(struct.withdraw);
      }
      if (struct.isSetFrozenMargin()) {
        oprot.writeDouble(struct.frozenMargin);
      }
      if (struct.isSetFrozenCash()) {
        oprot.writeDouble(struct.frozenCash);
      }
      if (struct.isSetCurrMargin()) {
        oprot.writeDouble(struct.currMargin);
      }
      if (struct.isSetCommission()) {
        oprot.writeDouble(struct.commission);
      }
      if (struct.isSetCloseProfit()) {
        oprot.writeDouble(struct.closeProfit);
      }
      if (struct.isSetPositionProfit()) {
        oprot.writeDouble(struct.positionProfit);
      }
      if (struct.isSetAvailable()) {
        oprot.writeDouble(struct.available);
      }
      if (struct.isSetDynamicBenefit()) {
        oprot.writeDouble(struct.dynamicBenefit);
      }
      if (struct.isSetRiskRate()) {
        oprot.writeDouble(struct.riskRate);
      }
      if (struct.isSetUpdateTimestampMs()) {
        oprot.writeI64(struct.updateTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeAccountFund struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.currencyChannel = iprot.readString();
        struct.setCurrencyChannelIsSet(true);
      }
      if (incoming.get(3)) {
        struct.credit = iprot.readDouble();
        struct.setCreditIsSet(true);
      }
      if (incoming.get(4)) {
        struct.preBalance = iprot.readDouble();
        struct.setPreBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.deposit = iprot.readDouble();
        struct.setDepositIsSet(true);
      }
      if (incoming.get(6)) {
        struct.withdraw = iprot.readDouble();
        struct.setWithdrawIsSet(true);
      }
      if (incoming.get(7)) {
        struct.frozenMargin = iprot.readDouble();
        struct.setFrozenMarginIsSet(true);
      }
      if (incoming.get(8)) {
        struct.frozenCash = iprot.readDouble();
        struct.setFrozenCashIsSet(true);
      }
      if (incoming.get(9)) {
        struct.currMargin = iprot.readDouble();
        struct.setCurrMarginIsSet(true);
      }
      if (incoming.get(10)) {
        struct.commission = iprot.readDouble();
        struct.setCommissionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.closeProfit = iprot.readDouble();
        struct.setCloseProfitIsSet(true);
      }
      if (incoming.get(12)) {
        struct.positionProfit = iprot.readDouble();
        struct.setPositionProfitIsSet(true);
      }
      if (incoming.get(13)) {
        struct.available = iprot.readDouble();
        struct.setAvailableIsSet(true);
      }
      if (incoming.get(14)) {
        struct.dynamicBenefit = iprot.readDouble();
        struct.setDynamicBenefitIsSet(true);
      }
      if (incoming.get(15)) {
        struct.riskRate = iprot.readDouble();
        struct.setRiskRateIsSet(true);
      }
      if (incoming.get(16)) {
        struct.updateTimestampMs = iprot.readI64();
        struct.setUpdateTimestampMsIsSet(true);
      }
    }
  }

}

