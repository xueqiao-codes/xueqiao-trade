/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.position;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CTPPositionSummary implements org.apache.thrift.TBase<CTPPositionSummary, CTPPositionSummary._Fields>, java.io.Serializable, Cloneable, Comparable<CTPPositionSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CTPPositionSummary");

  private static final org.apache.thrift.protocol.TField INSTRUMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("instrumentID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_POS_DATE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("contractPosDateType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXCHANGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("exchangeID", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("productClass", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("productID", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POS_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("posDirection", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField YD_POS_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("ydPosInfo", org.apache.thrift.protocol.TType.STRUCT, (short)11);
  private static final org.apache.thrift.protocol.TField CLOSE_TDINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("closeTDInfo", org.apache.thrift.protocol.TType.STRUCT, (short)12);
  private static final org.apache.thrift.protocol.TField CLOSE_YDINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("closeYDInfo", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField OPEN_TDINFO_FIELD_DESC = new org.apache.thrift.protocol.TField("openTDInfo", org.apache.thrift.protocol.TType.STRUCT, (short)14);
  private static final org.apache.thrift.protocol.TField FRONZEN_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("fronzenInfos", org.apache.thrift.protocol.TType.MAP, (short)15);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CTPPositionSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CTPPositionSummaryTupleSchemeFactory());
  }

  public String instrumentID; // optional
  /**
   * 
   * @see CTPContractPosDateType
   */
  public CTPContractPosDateType contractPosDateType; // optional
  public String exchangeID; // optional
  public short productClass; // optional
  public String productID; // optional
  /**
   * 
   * @see CTPPositionDirection
   */
  public CTPPositionDirection posDirection; // optional
  public CTPYDPositionInfo ydPosInfo; // optional
  public CTPCloseTDInfo closeTDInfo; // optional
  public CTPCloseYDInfo closeYDInfo; // optional
  public CTPOpenTDInfo openTDInfo; // optional
  public Map<CTPFronzenPositionDateType,CTPFronzenInfo> fronzenInfos; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INSTRUMENT_ID((short)1, "instrumentID"),
    /**
     * 
     * @see CTPContractPosDateType
     */
    CONTRACT_POS_DATE_TYPE((short)2, "contractPosDateType"),
    EXCHANGE_ID((short)3, "exchangeID"),
    PRODUCT_CLASS((short)4, "productClass"),
    PRODUCT_ID((short)5, "productID"),
    /**
     * 
     * @see CTPPositionDirection
     */
    POS_DIRECTION((short)10, "posDirection"),
    YD_POS_INFO((short)11, "ydPosInfo"),
    CLOSE_TDINFO((short)12, "closeTDInfo"),
    CLOSE_YDINFO((short)13, "closeYDInfo"),
    OPEN_TDINFO((short)14, "openTDInfo"),
    FRONZEN_INFOS((short)15, "fronzenInfos");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INSTRUMENT_ID
          return INSTRUMENT_ID;
        case 2: // CONTRACT_POS_DATE_TYPE
          return CONTRACT_POS_DATE_TYPE;
        case 3: // EXCHANGE_ID
          return EXCHANGE_ID;
        case 4: // PRODUCT_CLASS
          return PRODUCT_CLASS;
        case 5: // PRODUCT_ID
          return PRODUCT_ID;
        case 10: // POS_DIRECTION
          return POS_DIRECTION;
        case 11: // YD_POS_INFO
          return YD_POS_INFO;
        case 12: // CLOSE_TDINFO
          return CLOSE_TDINFO;
        case 13: // CLOSE_YDINFO
          return CLOSE_YDINFO;
        case 14: // OPEN_TDINFO
          return OPEN_TDINFO;
        case 15: // FRONZEN_INFOS
          return FRONZEN_INFOS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRODUCTCLASS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INSTRUMENT_ID,_Fields.CONTRACT_POS_DATE_TYPE,_Fields.EXCHANGE_ID,_Fields.PRODUCT_CLASS,_Fields.PRODUCT_ID,_Fields.POS_DIRECTION,_Fields.YD_POS_INFO,_Fields.CLOSE_TDINFO,_Fields.CLOSE_YDINFO,_Fields.OPEN_TDINFO,_Fields.FRONZEN_INFOS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INSTRUMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("instrumentID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_POS_DATE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("contractPosDateType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPContractPosDateType.class)));
    tmpMap.put(_Fields.EXCHANGE_ID, new org.apache.thrift.meta_data.FieldMetaData("exchangeID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_CLASS, new org.apache.thrift.meta_data.FieldMetaData("productClass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PRODUCT_ID, new org.apache.thrift.meta_data.FieldMetaData("productID", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POS_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("posDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPPositionDirection.class)));
    tmpMap.put(_Fields.YD_POS_INFO, new org.apache.thrift.meta_data.FieldMetaData("ydPosInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPYDPositionInfo.class)));
    tmpMap.put(_Fields.CLOSE_TDINFO, new org.apache.thrift.meta_data.FieldMetaData("closeTDInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPCloseTDInfo.class)));
    tmpMap.put(_Fields.CLOSE_YDINFO, new org.apache.thrift.meta_data.FieldMetaData("closeYDInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPCloseYDInfo.class)));
    tmpMap.put(_Fields.OPEN_TDINFO, new org.apache.thrift.meta_data.FieldMetaData("openTDInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPOpenTDInfo.class)));
    tmpMap.put(_Fields.FRONZEN_INFOS, new org.apache.thrift.meta_data.FieldMetaData("fronzenInfos", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CTPFronzenPositionDateType.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CTPFronzenInfo.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CTPPositionSummary.class, metaDataMap);
  }

  public CTPPositionSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CTPPositionSummary(CTPPositionSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetInstrumentID()) {
      this.instrumentID = other.instrumentID;
    }
    if (other.isSetContractPosDateType()) {
      this.contractPosDateType = other.contractPosDateType;
    }
    if (other.isSetExchangeID()) {
      this.exchangeID = other.exchangeID;
    }
    this.productClass = other.productClass;
    if (other.isSetProductID()) {
      this.productID = other.productID;
    }
    if (other.isSetPosDirection()) {
      this.posDirection = other.posDirection;
    }
    if (other.isSetYdPosInfo()) {
      this.ydPosInfo = new CTPYDPositionInfo(other.ydPosInfo);
    }
    if (other.isSetCloseTDInfo()) {
      this.closeTDInfo = new CTPCloseTDInfo(other.closeTDInfo);
    }
    if (other.isSetCloseYDInfo()) {
      this.closeYDInfo = new CTPCloseYDInfo(other.closeYDInfo);
    }
    if (other.isSetOpenTDInfo()) {
      this.openTDInfo = new CTPOpenTDInfo(other.openTDInfo);
    }
    if (other.isSetFronzenInfos()) {
      Map<CTPFronzenPositionDateType,CTPFronzenInfo> __this__fronzenInfos = new HashMap<CTPFronzenPositionDateType,CTPFronzenInfo>(other.fronzenInfos.size());
      for (Map.Entry<CTPFronzenPositionDateType, CTPFronzenInfo> other_element : other.fronzenInfos.entrySet()) {

        CTPFronzenPositionDateType other_element_key = other_element.getKey();
        CTPFronzenInfo other_element_value = other_element.getValue();

        CTPFronzenPositionDateType __this__fronzenInfos_copy_key = other_element_key;

        CTPFronzenInfo __this__fronzenInfos_copy_value = new CTPFronzenInfo(other_element_value);

        __this__fronzenInfos.put(__this__fronzenInfos_copy_key, __this__fronzenInfos_copy_value);
      }
      this.fronzenInfos = __this__fronzenInfos;
    }
  }

  public CTPPositionSummary deepCopy() {
    return new CTPPositionSummary(this);
  }

  @Override
  public void clear() {
    this.instrumentID = null;
    this.contractPosDateType = null;
    this.exchangeID = null;
    setProductClassIsSet(false);
    this.productClass = 0;
    this.productID = null;
    this.posDirection = null;
    this.ydPosInfo = null;
    this.closeTDInfo = null;
    this.closeYDInfo = null;
    this.openTDInfo = null;
    this.fronzenInfos = null;
  }

  public String getInstrumentID() {
    return this.instrumentID;
  }

  public CTPPositionSummary setInstrumentID(String instrumentID) {
    this.instrumentID = instrumentID;
    return this;
  }

  public void unsetInstrumentID() {
    this.instrumentID = null;
  }

  /** Returns true if field instrumentID is set (has been assigned a value) and false otherwise */
  public boolean isSetInstrumentID() {
    return this.instrumentID != null;
  }

  public void setInstrumentIDIsSet(boolean value) {
    if (!value) {
      this.instrumentID = null;
    }
  }

  /**
   * 
   * @see CTPContractPosDateType
   */
  public CTPContractPosDateType getContractPosDateType() {
    return this.contractPosDateType;
  }

  /**
   * 
   * @see CTPContractPosDateType
   */
  public CTPPositionSummary setContractPosDateType(CTPContractPosDateType contractPosDateType) {
    this.contractPosDateType = contractPosDateType;
    return this;
  }

  public void unsetContractPosDateType() {
    this.contractPosDateType = null;
  }

  /** Returns true if field contractPosDateType is set (has been assigned a value) and false otherwise */
  public boolean isSetContractPosDateType() {
    return this.contractPosDateType != null;
  }

  public void setContractPosDateTypeIsSet(boolean value) {
    if (!value) {
      this.contractPosDateType = null;
    }
  }

  public String getExchangeID() {
    return this.exchangeID;
  }

  public CTPPositionSummary setExchangeID(String exchangeID) {
    this.exchangeID = exchangeID;
    return this;
  }

  public void unsetExchangeID() {
    this.exchangeID = null;
  }

  /** Returns true if field exchangeID is set (has been assigned a value) and false otherwise */
  public boolean isSetExchangeID() {
    return this.exchangeID != null;
  }

  public void setExchangeIDIsSet(boolean value) {
    if (!value) {
      this.exchangeID = null;
    }
  }

  public short getProductClass() {
    return this.productClass;
  }

  public CTPPositionSummary setProductClass(short productClass) {
    this.productClass = productClass;
    setProductClassIsSet(true);
    return this;
  }

  public void unsetProductClass() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID);
  }

  /** Returns true if field productClass is set (has been assigned a value) and false otherwise */
  public boolean isSetProductClass() {
    return EncodingUtils.testBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID);
  }

  public void setProductClassIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRODUCTCLASS_ISSET_ID, value);
  }

  public String getProductID() {
    return this.productID;
  }

  public CTPPositionSummary setProductID(String productID) {
    this.productID = productID;
    return this;
  }

  public void unsetProductID() {
    this.productID = null;
  }

  /** Returns true if field productID is set (has been assigned a value) and false otherwise */
  public boolean isSetProductID() {
    return this.productID != null;
  }

  public void setProductIDIsSet(boolean value) {
    if (!value) {
      this.productID = null;
    }
  }

  /**
   * 
   * @see CTPPositionDirection
   */
  public CTPPositionDirection getPosDirection() {
    return this.posDirection;
  }

  /**
   * 
   * @see CTPPositionDirection
   */
  public CTPPositionSummary setPosDirection(CTPPositionDirection posDirection) {
    this.posDirection = posDirection;
    return this;
  }

  public void unsetPosDirection() {
    this.posDirection = null;
  }

  /** Returns true if field posDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPosDirection() {
    return this.posDirection != null;
  }

  public void setPosDirectionIsSet(boolean value) {
    if (!value) {
      this.posDirection = null;
    }
  }

  public CTPYDPositionInfo getYdPosInfo() {
    return this.ydPosInfo;
  }

  public CTPPositionSummary setYdPosInfo(CTPYDPositionInfo ydPosInfo) {
    this.ydPosInfo = ydPosInfo;
    return this;
  }

  public void unsetYdPosInfo() {
    this.ydPosInfo = null;
  }

  /** Returns true if field ydPosInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetYdPosInfo() {
    return this.ydPosInfo != null;
  }

  public void setYdPosInfoIsSet(boolean value) {
    if (!value) {
      this.ydPosInfo = null;
    }
  }

  public CTPCloseTDInfo getCloseTDInfo() {
    return this.closeTDInfo;
  }

  public CTPPositionSummary setCloseTDInfo(CTPCloseTDInfo closeTDInfo) {
    this.closeTDInfo = closeTDInfo;
    return this;
  }

  public void unsetCloseTDInfo() {
    this.closeTDInfo = null;
  }

  /** Returns true if field closeTDInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseTDInfo() {
    return this.closeTDInfo != null;
  }

  public void setCloseTDInfoIsSet(boolean value) {
    if (!value) {
      this.closeTDInfo = null;
    }
  }

  public CTPCloseYDInfo getCloseYDInfo() {
    return this.closeYDInfo;
  }

  public CTPPositionSummary setCloseYDInfo(CTPCloseYDInfo closeYDInfo) {
    this.closeYDInfo = closeYDInfo;
    return this;
  }

  public void unsetCloseYDInfo() {
    this.closeYDInfo = null;
  }

  /** Returns true if field closeYDInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCloseYDInfo() {
    return this.closeYDInfo != null;
  }

  public void setCloseYDInfoIsSet(boolean value) {
    if (!value) {
      this.closeYDInfo = null;
    }
  }

  public CTPOpenTDInfo getOpenTDInfo() {
    return this.openTDInfo;
  }

  public CTPPositionSummary setOpenTDInfo(CTPOpenTDInfo openTDInfo) {
    this.openTDInfo = openTDInfo;
    return this;
  }

  public void unsetOpenTDInfo() {
    this.openTDInfo = null;
  }

  /** Returns true if field openTDInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTDInfo() {
    return this.openTDInfo != null;
  }

  public void setOpenTDInfoIsSet(boolean value) {
    if (!value) {
      this.openTDInfo = null;
    }
  }

  public int getFronzenInfosSize() {
    return (this.fronzenInfos == null) ? 0 : this.fronzenInfos.size();
  }

  public void putToFronzenInfos(CTPFronzenPositionDateType key, CTPFronzenInfo val) {
    if (this.fronzenInfos == null) {
      this.fronzenInfos = new HashMap<CTPFronzenPositionDateType,CTPFronzenInfo>();
    }
    this.fronzenInfos.put(key, val);
  }

  public Map<CTPFronzenPositionDateType,CTPFronzenInfo> getFronzenInfos() {
    return this.fronzenInfos;
  }

  public CTPPositionSummary setFronzenInfos(Map<CTPFronzenPositionDateType,CTPFronzenInfo> fronzenInfos) {
    this.fronzenInfos = fronzenInfos;
    return this;
  }

  public void unsetFronzenInfos() {
    this.fronzenInfos = null;
  }

  /** Returns true if field fronzenInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetFronzenInfos() {
    return this.fronzenInfos != null;
  }

  public void setFronzenInfosIsSet(boolean value) {
    if (!value) {
      this.fronzenInfos = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INSTRUMENT_ID:
      if (value == null) {
        unsetInstrumentID();
      } else {
        setInstrumentID((String)value);
      }
      break;

    case CONTRACT_POS_DATE_TYPE:
      if (value == null) {
        unsetContractPosDateType();
      } else {
        setContractPosDateType((CTPContractPosDateType)value);
      }
      break;

    case EXCHANGE_ID:
      if (value == null) {
        unsetExchangeID();
      } else {
        setExchangeID((String)value);
      }
      break;

    case PRODUCT_CLASS:
      if (value == null) {
        unsetProductClass();
      } else {
        setProductClass((Short)value);
      }
      break;

    case PRODUCT_ID:
      if (value == null) {
        unsetProductID();
      } else {
        setProductID((String)value);
      }
      break;

    case POS_DIRECTION:
      if (value == null) {
        unsetPosDirection();
      } else {
        setPosDirection((CTPPositionDirection)value);
      }
      break;

    case YD_POS_INFO:
      if (value == null) {
        unsetYdPosInfo();
      } else {
        setYdPosInfo((CTPYDPositionInfo)value);
      }
      break;

    case CLOSE_TDINFO:
      if (value == null) {
        unsetCloseTDInfo();
      } else {
        setCloseTDInfo((CTPCloseTDInfo)value);
      }
      break;

    case CLOSE_YDINFO:
      if (value == null) {
        unsetCloseYDInfo();
      } else {
        setCloseYDInfo((CTPCloseYDInfo)value);
      }
      break;

    case OPEN_TDINFO:
      if (value == null) {
        unsetOpenTDInfo();
      } else {
        setOpenTDInfo((CTPOpenTDInfo)value);
      }
      break;

    case FRONZEN_INFOS:
      if (value == null) {
        unsetFronzenInfos();
      } else {
        setFronzenInfos((Map<CTPFronzenPositionDateType,CTPFronzenInfo>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INSTRUMENT_ID:
      return getInstrumentID();

    case CONTRACT_POS_DATE_TYPE:
      return getContractPosDateType();

    case EXCHANGE_ID:
      return getExchangeID();

    case PRODUCT_CLASS:
      return Short.valueOf(getProductClass());

    case PRODUCT_ID:
      return getProductID();

    case POS_DIRECTION:
      return getPosDirection();

    case YD_POS_INFO:
      return getYdPosInfo();

    case CLOSE_TDINFO:
      return getCloseTDInfo();

    case CLOSE_YDINFO:
      return getCloseYDInfo();

    case OPEN_TDINFO:
      return getOpenTDInfo();

    case FRONZEN_INFOS:
      return getFronzenInfos();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INSTRUMENT_ID:
      return isSetInstrumentID();
    case CONTRACT_POS_DATE_TYPE:
      return isSetContractPosDateType();
    case EXCHANGE_ID:
      return isSetExchangeID();
    case PRODUCT_CLASS:
      return isSetProductClass();
    case PRODUCT_ID:
      return isSetProductID();
    case POS_DIRECTION:
      return isSetPosDirection();
    case YD_POS_INFO:
      return isSetYdPosInfo();
    case CLOSE_TDINFO:
      return isSetCloseTDInfo();
    case CLOSE_YDINFO:
      return isSetCloseYDInfo();
    case OPEN_TDINFO:
      return isSetOpenTDInfo();
    case FRONZEN_INFOS:
      return isSetFronzenInfos();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CTPPositionSummary)
      return this.equals((CTPPositionSummary)that);
    return false;
  }

  public boolean equals(CTPPositionSummary that) {
    if (that == null)
      return false;

    boolean this_present_instrumentID = true && this.isSetInstrumentID();
    boolean that_present_instrumentID = true && that.isSetInstrumentID();
    if (this_present_instrumentID || that_present_instrumentID) {
      if (!(this_present_instrumentID && that_present_instrumentID))
        return false;
      if (!this.instrumentID.equals(that.instrumentID))
        return false;
    }

    boolean this_present_contractPosDateType = true && this.isSetContractPosDateType();
    boolean that_present_contractPosDateType = true && that.isSetContractPosDateType();
    if (this_present_contractPosDateType || that_present_contractPosDateType) {
      if (!(this_present_contractPosDateType && that_present_contractPosDateType))
        return false;
      if (!this.contractPosDateType.equals(that.contractPosDateType))
        return false;
    }

    boolean this_present_exchangeID = true && this.isSetExchangeID();
    boolean that_present_exchangeID = true && that.isSetExchangeID();
    if (this_present_exchangeID || that_present_exchangeID) {
      if (!(this_present_exchangeID && that_present_exchangeID))
        return false;
      if (!this.exchangeID.equals(that.exchangeID))
        return false;
    }

    boolean this_present_productClass = true && this.isSetProductClass();
    boolean that_present_productClass = true && that.isSetProductClass();
    if (this_present_productClass || that_present_productClass) {
      if (!(this_present_productClass && that_present_productClass))
        return false;
      if (this.productClass != that.productClass)
        return false;
    }

    boolean this_present_productID = true && this.isSetProductID();
    boolean that_present_productID = true && that.isSetProductID();
    if (this_present_productID || that_present_productID) {
      if (!(this_present_productID && that_present_productID))
        return false;
      if (!this.productID.equals(that.productID))
        return false;
    }

    boolean this_present_posDirection = true && this.isSetPosDirection();
    boolean that_present_posDirection = true && that.isSetPosDirection();
    if (this_present_posDirection || that_present_posDirection) {
      if (!(this_present_posDirection && that_present_posDirection))
        return false;
      if (!this.posDirection.equals(that.posDirection))
        return false;
    }

    boolean this_present_ydPosInfo = true && this.isSetYdPosInfo();
    boolean that_present_ydPosInfo = true && that.isSetYdPosInfo();
    if (this_present_ydPosInfo || that_present_ydPosInfo) {
      if (!(this_present_ydPosInfo && that_present_ydPosInfo))
        return false;
      if (!this.ydPosInfo.equals(that.ydPosInfo))
        return false;
    }

    boolean this_present_closeTDInfo = true && this.isSetCloseTDInfo();
    boolean that_present_closeTDInfo = true && that.isSetCloseTDInfo();
    if (this_present_closeTDInfo || that_present_closeTDInfo) {
      if (!(this_present_closeTDInfo && that_present_closeTDInfo))
        return false;
      if (!this.closeTDInfo.equals(that.closeTDInfo))
        return false;
    }

    boolean this_present_closeYDInfo = true && this.isSetCloseYDInfo();
    boolean that_present_closeYDInfo = true && that.isSetCloseYDInfo();
    if (this_present_closeYDInfo || that_present_closeYDInfo) {
      if (!(this_present_closeYDInfo && that_present_closeYDInfo))
        return false;
      if (!this.closeYDInfo.equals(that.closeYDInfo))
        return false;
    }

    boolean this_present_openTDInfo = true && this.isSetOpenTDInfo();
    boolean that_present_openTDInfo = true && that.isSetOpenTDInfo();
    if (this_present_openTDInfo || that_present_openTDInfo) {
      if (!(this_present_openTDInfo && that_present_openTDInfo))
        return false;
      if (!this.openTDInfo.equals(that.openTDInfo))
        return false;
    }

    boolean this_present_fronzenInfos = true && this.isSetFronzenInfos();
    boolean that_present_fronzenInfos = true && that.isSetFronzenInfos();
    if (this_present_fronzenInfos || that_present_fronzenInfos) {
      if (!(this_present_fronzenInfos && that_present_fronzenInfos))
        return false;
      if (!this.fronzenInfos.equals(that.fronzenInfos))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CTPPositionSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInstrumentID()).compareTo(other.isSetInstrumentID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInstrumentID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instrumentID, other.instrumentID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractPosDateType()).compareTo(other.isSetContractPosDateType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractPosDateType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractPosDateType, other.contractPosDateType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExchangeID()).compareTo(other.isSetExchangeID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExchangeID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exchangeID, other.exchangeID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductClass()).compareTo(other.isSetProductClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productClass, other.productClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProductID()).compareTo(other.isSetProductID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productID, other.productID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPosDirection()).compareTo(other.isSetPosDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPosDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.posDirection, other.posDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYdPosInfo()).compareTo(other.isSetYdPosInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYdPosInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ydPosInfo, other.ydPosInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseTDInfo()).compareTo(other.isSetCloseTDInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseTDInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeTDInfo, other.closeTDInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCloseYDInfo()).compareTo(other.isSetCloseYDInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCloseYDInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.closeYDInfo, other.closeYDInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTDInfo()).compareTo(other.isSetOpenTDInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTDInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTDInfo, other.openTDInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFronzenInfos()).compareTo(other.isSetFronzenInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFronzenInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fronzenInfos, other.fronzenInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CTPPositionSummary(");
    boolean first = true;

    if (isSetInstrumentID()) {
      sb.append("instrumentID:");
      if (this.instrumentID == null) {
        sb.append("null");
      } else {
        sb.append(this.instrumentID);
      }
      first = false;
    }
    if (isSetContractPosDateType()) {
      if (!first) sb.append(", ");
      sb.append("contractPosDateType:");
      if (this.contractPosDateType == null) {
        sb.append("null");
      } else {
        sb.append(this.contractPosDateType);
      }
      first = false;
    }
    if (isSetExchangeID()) {
      if (!first) sb.append(", ");
      sb.append("exchangeID:");
      if (this.exchangeID == null) {
        sb.append("null");
      } else {
        sb.append(this.exchangeID);
      }
      first = false;
    }
    if (isSetProductClass()) {
      if (!first) sb.append(", ");
      sb.append("productClass:");
      sb.append(this.productClass);
      first = false;
    }
    if (isSetProductID()) {
      if (!first) sb.append(", ");
      sb.append("productID:");
      if (this.productID == null) {
        sb.append("null");
      } else {
        sb.append(this.productID);
      }
      first = false;
    }
    if (isSetPosDirection()) {
      if (!first) sb.append(", ");
      sb.append("posDirection:");
      if (this.posDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.posDirection);
      }
      first = false;
    }
    if (isSetYdPosInfo()) {
      if (!first) sb.append(", ");
      sb.append("ydPosInfo:");
      if (this.ydPosInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.ydPosInfo);
      }
      first = false;
    }
    if (isSetCloseTDInfo()) {
      if (!first) sb.append(", ");
      sb.append("closeTDInfo:");
      if (this.closeTDInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.closeTDInfo);
      }
      first = false;
    }
    if (isSetCloseYDInfo()) {
      if (!first) sb.append(", ");
      sb.append("closeYDInfo:");
      if (this.closeYDInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.closeYDInfo);
      }
      first = false;
    }
    if (isSetOpenTDInfo()) {
      if (!first) sb.append(", ");
      sb.append("openTDInfo:");
      if (this.openTDInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.openTDInfo);
      }
      first = false;
    }
    if (isSetFronzenInfos()) {
      if (!first) sb.append(", ");
      sb.append("fronzenInfos:");
      if (this.fronzenInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.fronzenInfos);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (ydPosInfo != null) {
      ydPosInfo.validate();
    }
    if (closeTDInfo != null) {
      closeTDInfo.validate();
    }
    if (closeYDInfo != null) {
      closeYDInfo.validate();
    }
    if (openTDInfo != null) {
      openTDInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CTPPositionSummaryStandardSchemeFactory implements SchemeFactory {
    public CTPPositionSummaryStandardScheme getScheme() {
      return new CTPPositionSummaryStandardScheme();
    }
  }

  private static class CTPPositionSummaryStandardScheme extends StandardScheme<CTPPositionSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CTPPositionSummary struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INSTRUMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.instrumentID = iprot.readString();
              struct.setInstrumentIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_POS_DATE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.contractPosDateType = CTPContractPosDateType.findByValue(iprot.readI32());
              struct.setContractPosDateTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXCHANGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exchangeID = iprot.readString();
              struct.setExchangeIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.productClass = iprot.readI16();
              struct.setProductClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productID = iprot.readString();
              struct.setProductIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // POS_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.posDirection = CTPPositionDirection.findByValue(iprot.readI32());
              struct.setPosDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // YD_POS_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ydPosInfo = new CTPYDPositionInfo();
              struct.ydPosInfo.read(iprot);
              struct.setYdPosInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CLOSE_TDINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.closeTDInfo = new CTPCloseTDInfo();
              struct.closeTDInfo.read(iprot);
              struct.setCloseTDInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CLOSE_YDINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.closeYDInfo = new CTPCloseYDInfo();
              struct.closeYDInfo.read(iprot);
              struct.setCloseYDInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // OPEN_TDINFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.openTDInfo = new CTPOpenTDInfo();
              struct.openTDInfo.read(iprot);
              struct.setOpenTDInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // FRONZEN_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                struct.fronzenInfos = new HashMap<CTPFronzenPositionDateType,CTPFronzenInfo>(2*_map10.size);
                for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                {
                  CTPFronzenPositionDateType _key12;
                  CTPFronzenInfo _val13;
                  _key12 = CTPFronzenPositionDateType.findByValue(iprot.readI32());
                  _val13 = new CTPFronzenInfo();
                  _val13.read(iprot);
                  struct.fronzenInfos.put(_key12, _val13);
                }
                iprot.readMapEnd();
              }
              struct.setFronzenInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CTPPositionSummary struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.instrumentID != null) {
        if (struct.isSetInstrumentID()) {
          oprot.writeFieldBegin(INSTRUMENT_ID_FIELD_DESC);
          oprot.writeString(struct.instrumentID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractPosDateType != null) {
        if (struct.isSetContractPosDateType()) {
          oprot.writeFieldBegin(CONTRACT_POS_DATE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.contractPosDateType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.exchangeID != null) {
        if (struct.isSetExchangeID()) {
          oprot.writeFieldBegin(EXCHANGE_ID_FIELD_DESC);
          oprot.writeString(struct.exchangeID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetProductClass()) {
        oprot.writeFieldBegin(PRODUCT_CLASS_FIELD_DESC);
        oprot.writeI16(struct.productClass);
        oprot.writeFieldEnd();
      }
      if (struct.productID != null) {
        if (struct.isSetProductID()) {
          oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
          oprot.writeString(struct.productID);
          oprot.writeFieldEnd();
        }
      }
      if (struct.posDirection != null) {
        if (struct.isSetPosDirection()) {
          oprot.writeFieldBegin(POS_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.posDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.ydPosInfo != null) {
        if (struct.isSetYdPosInfo()) {
          oprot.writeFieldBegin(YD_POS_INFO_FIELD_DESC);
          struct.ydPosInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.closeTDInfo != null) {
        if (struct.isSetCloseTDInfo()) {
          oprot.writeFieldBegin(CLOSE_TDINFO_FIELD_DESC);
          struct.closeTDInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.closeYDInfo != null) {
        if (struct.isSetCloseYDInfo()) {
          oprot.writeFieldBegin(CLOSE_YDINFO_FIELD_DESC);
          struct.closeYDInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.openTDInfo != null) {
        if (struct.isSetOpenTDInfo()) {
          oprot.writeFieldBegin(OPEN_TDINFO_FIELD_DESC);
          struct.openTDInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.fronzenInfos != null) {
        if (struct.isSetFronzenInfos()) {
          oprot.writeFieldBegin(FRONZEN_INFOS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.fronzenInfos.size()));
            for (Map.Entry<CTPFronzenPositionDateType, CTPFronzenInfo> _iter14 : struct.fronzenInfos.entrySet())
            {
              oprot.writeI32(_iter14.getKey().getValue());
              _iter14.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CTPPositionSummaryTupleSchemeFactory implements SchemeFactory {
    public CTPPositionSummaryTupleScheme getScheme() {
      return new CTPPositionSummaryTupleScheme();
    }
  }

  private static class CTPPositionSummaryTupleScheme extends TupleScheme<CTPPositionSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CTPPositionSummary struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInstrumentID()) {
        optionals.set(0);
      }
      if (struct.isSetContractPosDateType()) {
        optionals.set(1);
      }
      if (struct.isSetExchangeID()) {
        optionals.set(2);
      }
      if (struct.isSetProductClass()) {
        optionals.set(3);
      }
      if (struct.isSetProductID()) {
        optionals.set(4);
      }
      if (struct.isSetPosDirection()) {
        optionals.set(5);
      }
      if (struct.isSetYdPosInfo()) {
        optionals.set(6);
      }
      if (struct.isSetCloseTDInfo()) {
        optionals.set(7);
      }
      if (struct.isSetCloseYDInfo()) {
        optionals.set(8);
      }
      if (struct.isSetOpenTDInfo()) {
        optionals.set(9);
      }
      if (struct.isSetFronzenInfos()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetInstrumentID()) {
        oprot.writeString(struct.instrumentID);
      }
      if (struct.isSetContractPosDateType()) {
        oprot.writeI32(struct.contractPosDateType.getValue());
      }
      if (struct.isSetExchangeID()) {
        oprot.writeString(struct.exchangeID);
      }
      if (struct.isSetProductClass()) {
        oprot.writeI16(struct.productClass);
      }
      if (struct.isSetProductID()) {
        oprot.writeString(struct.productID);
      }
      if (struct.isSetPosDirection()) {
        oprot.writeI32(struct.posDirection.getValue());
      }
      if (struct.isSetYdPosInfo()) {
        struct.ydPosInfo.write(oprot);
      }
      if (struct.isSetCloseTDInfo()) {
        struct.closeTDInfo.write(oprot);
      }
      if (struct.isSetCloseYDInfo()) {
        struct.closeYDInfo.write(oprot);
      }
      if (struct.isSetOpenTDInfo()) {
        struct.openTDInfo.write(oprot);
      }
      if (struct.isSetFronzenInfos()) {
        {
          oprot.writeI32(struct.fronzenInfos.size());
          for (Map.Entry<CTPFronzenPositionDateType, CTPFronzenInfo> _iter15 : struct.fronzenInfos.entrySet())
          {
            oprot.writeI32(_iter15.getKey().getValue());
            _iter15.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CTPPositionSummary struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.instrumentID = iprot.readString();
        struct.setInstrumentIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractPosDateType = CTPContractPosDateType.findByValue(iprot.readI32());
        struct.setContractPosDateTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.exchangeID = iprot.readString();
        struct.setExchangeIDIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productClass = iprot.readI16();
        struct.setProductClassIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productID = iprot.readString();
        struct.setProductIDIsSet(true);
      }
      if (incoming.get(5)) {
        struct.posDirection = CTPPositionDirection.findByValue(iprot.readI32());
        struct.setPosDirectionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ydPosInfo = new CTPYDPositionInfo();
        struct.ydPosInfo.read(iprot);
        struct.setYdPosInfoIsSet(true);
      }
      if (incoming.get(7)) {
        struct.closeTDInfo = new CTPCloseTDInfo();
        struct.closeTDInfo.read(iprot);
        struct.setCloseTDInfoIsSet(true);
      }
      if (incoming.get(8)) {
        struct.closeYDInfo = new CTPCloseYDInfo();
        struct.closeYDInfo.read(iprot);
        struct.setCloseYDInfoIsSet(true);
      }
      if (incoming.get(9)) {
        struct.openTDInfo = new CTPOpenTDInfo();
        struct.openTDInfo.read(iprot);
        struct.setOpenTDInfoIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fronzenInfos = new HashMap<CTPFronzenPositionDateType,CTPFronzenInfo>(2*_map16.size);
          for (int _i17 = 0; _i17 < _map16.size; ++_i17)
          {
            CTPFronzenPositionDateType _key18;
            CTPFronzenInfo _val19;
            _key18 = CTPFronzenPositionDateType.findByValue(iprot.readI32());
            _val19 = new CTPFronzenInfo();
            _val19.read(iprot);
            struct.fronzenInfos.put(_key18, _val19);
          }
        }
        struct.setFronzenInfosIsSet(true);
      }
    }
  }

}

