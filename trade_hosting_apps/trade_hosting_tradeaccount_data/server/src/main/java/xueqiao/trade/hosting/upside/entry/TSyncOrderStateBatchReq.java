/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.upside.entry;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSyncOrderStateBatchReq implements org.apache.thrift.TBase<TSyncOrderStateBatchReq, TSyncOrderStateBatchReq._Fields>, java.io.Serializable, Cloneable, Comparable<TSyncOrderStateBatchReq> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSyncOrderStateBatchReq");

  private static final org.apache.thrift.protocol.TField ACCOUNT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("accountSummary", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CTP_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("ctpContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ESUNNY3_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny3ContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField ESUNNY9_CONTRACT_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("esunny9ContractSummary", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSyncOrderStateBatchReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSyncOrderStateBatchReqTupleSchemeFactory());
  }

  public xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary accountSummary; // optional
  public xueqiao.trade.hosting.CTPContractSummary ctpContractSummary; // optional
  public xueqiao.trade.hosting.ESunny3ContractSummary esunny3ContractSummary; // optional
  public xueqiao.trade.hosting.ESunny9ContractSummary esunny9ContractSummary; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCOUNT_SUMMARY((short)1, "accountSummary"),
    CTP_CONTRACT_SUMMARY((short)2, "ctpContractSummary"),
    ESUNNY3_CONTRACT_SUMMARY((short)3, "esunny3ContractSummary"),
    ESUNNY9_CONTRACT_SUMMARY((short)4, "esunny9ContractSummary");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCOUNT_SUMMARY
          return ACCOUNT_SUMMARY;
        case 2: // CTP_CONTRACT_SUMMARY
          return CTP_CONTRACT_SUMMARY;
        case 3: // ESUNNY3_CONTRACT_SUMMARY
          return ESUNNY3_CONTRACT_SUMMARY;
        case 4: // ESUNNY9_CONTRACT_SUMMARY
          return ESUNNY9_CONTRACT_SUMMARY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ACCOUNT_SUMMARY,_Fields.CTP_CONTRACT_SUMMARY,_Fields.ESUNNY3_CONTRACT_SUMMARY,_Fields.ESUNNY9_CONTRACT_SUMMARY};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCOUNT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("accountSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary.class)));
    tmpMap.put(_Fields.CTP_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("ctpContractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.CTPContractSummary.class)));
    tmpMap.put(_Fields.ESUNNY3_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("esunny3ContractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.ESunny3ContractSummary.class)));
    tmpMap.put(_Fields.ESUNNY9_CONTRACT_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("esunny9ContractSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.ESunny9ContractSummary.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSyncOrderStateBatchReq.class, metaDataMap);
  }

  public TSyncOrderStateBatchReq() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSyncOrderStateBatchReq(TSyncOrderStateBatchReq other) {
    if (other.isSetAccountSummary()) {
      this.accountSummary = new xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary(other.accountSummary);
    }
    if (other.isSetCtpContractSummary()) {
      this.ctpContractSummary = new xueqiao.trade.hosting.CTPContractSummary(other.ctpContractSummary);
    }
    if (other.isSetEsunny3ContractSummary()) {
      this.esunny3ContractSummary = new xueqiao.trade.hosting.ESunny3ContractSummary(other.esunny3ContractSummary);
    }
    if (other.isSetEsunny9ContractSummary()) {
      this.esunny9ContractSummary = new xueqiao.trade.hosting.ESunny9ContractSummary(other.esunny9ContractSummary);
    }
  }

  public TSyncOrderStateBatchReq deepCopy() {
    return new TSyncOrderStateBatchReq(this);
  }

  @Override
  public void clear() {
    this.accountSummary = null;
    this.ctpContractSummary = null;
    this.esunny3ContractSummary = null;
    this.esunny9ContractSummary = null;
  }

  public xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary getAccountSummary() {
    return this.accountSummary;
  }

  public TSyncOrderStateBatchReq setAccountSummary(xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary accountSummary) {
    this.accountSummary = accountSummary;
    return this;
  }

  public void unsetAccountSummary() {
    this.accountSummary = null;
  }

  /** Returns true if field accountSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetAccountSummary() {
    return this.accountSummary != null;
  }

  public void setAccountSummaryIsSet(boolean value) {
    if (!value) {
      this.accountSummary = null;
    }
  }

  public xueqiao.trade.hosting.CTPContractSummary getCtpContractSummary() {
    return this.ctpContractSummary;
  }

  public TSyncOrderStateBatchReq setCtpContractSummary(xueqiao.trade.hosting.CTPContractSummary ctpContractSummary) {
    this.ctpContractSummary = ctpContractSummary;
    return this;
  }

  public void unsetCtpContractSummary() {
    this.ctpContractSummary = null;
  }

  /** Returns true if field ctpContractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetCtpContractSummary() {
    return this.ctpContractSummary != null;
  }

  public void setCtpContractSummaryIsSet(boolean value) {
    if (!value) {
      this.ctpContractSummary = null;
    }
  }

  public xueqiao.trade.hosting.ESunny3ContractSummary getEsunny3ContractSummary() {
    return this.esunny3ContractSummary;
  }

  public TSyncOrderStateBatchReq setEsunny3ContractSummary(xueqiao.trade.hosting.ESunny3ContractSummary esunny3ContractSummary) {
    this.esunny3ContractSummary = esunny3ContractSummary;
    return this;
  }

  public void unsetEsunny3ContractSummary() {
    this.esunny3ContractSummary = null;
  }

  /** Returns true if field esunny3ContractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny3ContractSummary() {
    return this.esunny3ContractSummary != null;
  }

  public void setEsunny3ContractSummaryIsSet(boolean value) {
    if (!value) {
      this.esunny3ContractSummary = null;
    }
  }

  public xueqiao.trade.hosting.ESunny9ContractSummary getEsunny9ContractSummary() {
    return this.esunny9ContractSummary;
  }

  public TSyncOrderStateBatchReq setEsunny9ContractSummary(xueqiao.trade.hosting.ESunny9ContractSummary esunny9ContractSummary) {
    this.esunny9ContractSummary = esunny9ContractSummary;
    return this;
  }

  public void unsetEsunny9ContractSummary() {
    this.esunny9ContractSummary = null;
  }

  /** Returns true if field esunny9ContractSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetEsunny9ContractSummary() {
    return this.esunny9ContractSummary != null;
  }

  public void setEsunny9ContractSummaryIsSet(boolean value) {
    if (!value) {
      this.esunny9ContractSummary = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ACCOUNT_SUMMARY:
      if (value == null) {
        unsetAccountSummary();
      } else {
        setAccountSummary((xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary)value);
      }
      break;

    case CTP_CONTRACT_SUMMARY:
      if (value == null) {
        unsetCtpContractSummary();
      } else {
        setCtpContractSummary((xueqiao.trade.hosting.CTPContractSummary)value);
      }
      break;

    case ESUNNY3_CONTRACT_SUMMARY:
      if (value == null) {
        unsetEsunny3ContractSummary();
      } else {
        setEsunny3ContractSummary((xueqiao.trade.hosting.ESunny3ContractSummary)value);
      }
      break;

    case ESUNNY9_CONTRACT_SUMMARY:
      if (value == null) {
        unsetEsunny9ContractSummary();
      } else {
        setEsunny9ContractSummary((xueqiao.trade.hosting.ESunny9ContractSummary)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCOUNT_SUMMARY:
      return getAccountSummary();

    case CTP_CONTRACT_SUMMARY:
      return getCtpContractSummary();

    case ESUNNY3_CONTRACT_SUMMARY:
      return getEsunny3ContractSummary();

    case ESUNNY9_CONTRACT_SUMMARY:
      return getEsunny9ContractSummary();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ACCOUNT_SUMMARY:
      return isSetAccountSummary();
    case CTP_CONTRACT_SUMMARY:
      return isSetCtpContractSummary();
    case ESUNNY3_CONTRACT_SUMMARY:
      return isSetEsunny3ContractSummary();
    case ESUNNY9_CONTRACT_SUMMARY:
      return isSetEsunny9ContractSummary();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSyncOrderStateBatchReq)
      return this.equals((TSyncOrderStateBatchReq)that);
    return false;
  }

  public boolean equals(TSyncOrderStateBatchReq that) {
    if (that == null)
      return false;

    boolean this_present_accountSummary = true && this.isSetAccountSummary();
    boolean that_present_accountSummary = true && that.isSetAccountSummary();
    if (this_present_accountSummary || that_present_accountSummary) {
      if (!(this_present_accountSummary && that_present_accountSummary))
        return false;
      if (!this.accountSummary.equals(that.accountSummary))
        return false;
    }

    boolean this_present_ctpContractSummary = true && this.isSetCtpContractSummary();
    boolean that_present_ctpContractSummary = true && that.isSetCtpContractSummary();
    if (this_present_ctpContractSummary || that_present_ctpContractSummary) {
      if (!(this_present_ctpContractSummary && that_present_ctpContractSummary))
        return false;
      if (!this.ctpContractSummary.equals(that.ctpContractSummary))
        return false;
    }

    boolean this_present_esunny3ContractSummary = true && this.isSetEsunny3ContractSummary();
    boolean that_present_esunny3ContractSummary = true && that.isSetEsunny3ContractSummary();
    if (this_present_esunny3ContractSummary || that_present_esunny3ContractSummary) {
      if (!(this_present_esunny3ContractSummary && that_present_esunny3ContractSummary))
        return false;
      if (!this.esunny3ContractSummary.equals(that.esunny3ContractSummary))
        return false;
    }

    boolean this_present_esunny9ContractSummary = true && this.isSetEsunny9ContractSummary();
    boolean that_present_esunny9ContractSummary = true && that.isSetEsunny9ContractSummary();
    if (this_present_esunny9ContractSummary || that_present_esunny9ContractSummary) {
      if (!(this_present_esunny9ContractSummary && that_present_esunny9ContractSummary))
        return false;
      if (!this.esunny9ContractSummary.equals(that.esunny9ContractSummary))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSyncOrderStateBatchReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAccountSummary()).compareTo(other.isSetAccountSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccountSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accountSummary, other.accountSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCtpContractSummary()).compareTo(other.isSetCtpContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCtpContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ctpContractSummary, other.ctpContractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny3ContractSummary()).compareTo(other.isSetEsunny3ContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny3ContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny3ContractSummary, other.esunny3ContractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEsunny9ContractSummary()).compareTo(other.isSetEsunny9ContractSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEsunny9ContractSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esunny9ContractSummary, other.esunny9ContractSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSyncOrderStateBatchReq(");
    boolean first = true;

    if (isSetAccountSummary()) {
      sb.append("accountSummary:");
      if (this.accountSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.accountSummary);
      }
      first = false;
    }
    if (isSetCtpContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("ctpContractSummary:");
      if (this.ctpContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.ctpContractSummary);
      }
      first = false;
    }
    if (isSetEsunny3ContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("esunny3ContractSummary:");
      if (this.esunny3ContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny3ContractSummary);
      }
      first = false;
    }
    if (isSetEsunny9ContractSummary()) {
      if (!first) sb.append(", ");
      sb.append("esunny9ContractSummary:");
      if (this.esunny9ContractSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.esunny9ContractSummary);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (accountSummary != null) {
      accountSummary.validate();
    }
    if (ctpContractSummary != null) {
      ctpContractSummary.validate();
    }
    if (esunny3ContractSummary != null) {
      esunny3ContractSummary.validate();
    }
    if (esunny9ContractSummary != null) {
      esunny9ContractSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSyncOrderStateBatchReqStandardSchemeFactory implements SchemeFactory {
    public TSyncOrderStateBatchReqStandardScheme getScheme() {
      return new TSyncOrderStateBatchReqStandardScheme();
    }
  }

  private static class TSyncOrderStateBatchReqStandardScheme extends StandardScheme<TSyncOrderStateBatchReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSyncOrderStateBatchReq struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCOUNT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.accountSummary = new xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary();
              struct.accountSummary.read(iprot);
              struct.setAccountSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CTP_CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ctpContractSummary = new xueqiao.trade.hosting.CTPContractSummary();
              struct.ctpContractSummary.read(iprot);
              struct.setCtpContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ESUNNY3_CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny3ContractSummary = new xueqiao.trade.hosting.ESunny3ContractSummary();
              struct.esunny3ContractSummary.read(iprot);
              struct.setEsunny3ContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ESUNNY9_CONTRACT_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.esunny9ContractSummary = new xueqiao.trade.hosting.ESunny9ContractSummary();
              struct.esunny9ContractSummary.read(iprot);
              struct.setEsunny9ContractSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSyncOrderStateBatchReq struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accountSummary != null) {
        if (struct.isSetAccountSummary()) {
          oprot.writeFieldBegin(ACCOUNT_SUMMARY_FIELD_DESC);
          struct.accountSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ctpContractSummary != null) {
        if (struct.isSetCtpContractSummary()) {
          oprot.writeFieldBegin(CTP_CONTRACT_SUMMARY_FIELD_DESC);
          struct.ctpContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny3ContractSummary != null) {
        if (struct.isSetEsunny3ContractSummary()) {
          oprot.writeFieldBegin(ESUNNY3_CONTRACT_SUMMARY_FIELD_DESC);
          struct.esunny3ContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.esunny9ContractSummary != null) {
        if (struct.isSetEsunny9ContractSummary()) {
          oprot.writeFieldBegin(ESUNNY9_CONTRACT_SUMMARY_FIELD_DESC);
          struct.esunny9ContractSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSyncOrderStateBatchReqTupleSchemeFactory implements SchemeFactory {
    public TSyncOrderStateBatchReqTupleScheme getScheme() {
      return new TSyncOrderStateBatchReqTupleScheme();
    }
  }

  private static class TSyncOrderStateBatchReqTupleScheme extends TupleScheme<TSyncOrderStateBatchReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSyncOrderStateBatchReq struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAccountSummary()) {
        optionals.set(0);
      }
      if (struct.isSetCtpContractSummary()) {
        optionals.set(1);
      }
      if (struct.isSetEsunny3ContractSummary()) {
        optionals.set(2);
      }
      if (struct.isSetEsunny9ContractSummary()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAccountSummary()) {
        struct.accountSummary.write(oprot);
      }
      if (struct.isSetCtpContractSummary()) {
        struct.ctpContractSummary.write(oprot);
      }
      if (struct.isSetEsunny3ContractSummary()) {
        struct.esunny3ContractSummary.write(oprot);
      }
      if (struct.isSetEsunny9ContractSummary()) {
        struct.esunny9ContractSummary.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSyncOrderStateBatchReq struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.accountSummary = new xueqiao.trade.hosting.HostingExecOrderTradeAccountSummary();
        struct.accountSummary.read(iprot);
        struct.setAccountSummaryIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ctpContractSummary = new xueqiao.trade.hosting.CTPContractSummary();
        struct.ctpContractSummary.read(iprot);
        struct.setCtpContractSummaryIsSet(true);
      }
      if (incoming.get(2)) {
        struct.esunny3ContractSummary = new xueqiao.trade.hosting.ESunny3ContractSummary();
        struct.esunny3ContractSummary.read(iprot);
        struct.setEsunny3ContractSummaryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.esunny9ContractSummary = new xueqiao.trade.hosting.ESunny9ContractSummary();
        struct.esunny9ContractSummary.read(iprot);
        struct.setEsunny9ContractSummaryIsSet(true);
      }
    }
  }

}

