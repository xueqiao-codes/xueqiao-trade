/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQConditionTrigger implements org.apache.thrift.TBase<HostingXQConditionTrigger, HostingXQConditionTrigger._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQConditionTrigger> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQConditionTrigger");

  private static final org.apache.thrift.protocol.TField TRIGGER_PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerPriceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRIGGER_OPERATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("triggerOperator", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CONDITION_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQConditionTriggerStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQConditionTriggerTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQConditionTriggerPriceType
   */
  public HostingXQConditionTriggerPriceType triggerPriceType; // optional
  /**
   * 
   * @see HostingXQConditionTriggerOperator
   */
  public HostingXQConditionTriggerOperator triggerOperator; // optional
  public double conditionPrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQConditionTriggerPriceType
     */
    TRIGGER_PRICE_TYPE((short)1, "triggerPriceType"),
    /**
     * 
     * @see HostingXQConditionTriggerOperator
     */
    TRIGGER_OPERATOR((short)2, "triggerOperator"),
    CONDITION_PRICE((short)3, "conditionPrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRIGGER_PRICE_TYPE
          return TRIGGER_PRICE_TYPE;
        case 2: // TRIGGER_OPERATOR
          return TRIGGER_OPERATOR;
        case 3: // CONDITION_PRICE
          return CONDITION_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CONDITIONPRICE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TRIGGER_PRICE_TYPE,_Fields.TRIGGER_OPERATOR,_Fields.CONDITION_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRIGGER_PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("triggerPriceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQConditionTriggerPriceType.class)));
    tmpMap.put(_Fields.TRIGGER_OPERATOR, new org.apache.thrift.meta_data.FieldMetaData("triggerOperator", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQConditionTriggerOperator.class)));
    tmpMap.put(_Fields.CONDITION_PRICE, new org.apache.thrift.meta_data.FieldMetaData("conditionPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQConditionTrigger.class, metaDataMap);
  }

  public HostingXQConditionTrigger() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQConditionTrigger(HostingXQConditionTrigger other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTriggerPriceType()) {
      this.triggerPriceType = other.triggerPriceType;
    }
    if (other.isSetTriggerOperator()) {
      this.triggerOperator = other.triggerOperator;
    }
    this.conditionPrice = other.conditionPrice;
  }

  public HostingXQConditionTrigger deepCopy() {
    return new HostingXQConditionTrigger(this);
  }

  @Override
  public void clear() {
    this.triggerPriceType = null;
    this.triggerOperator = null;
    setConditionPriceIsSet(false);
    this.conditionPrice = 0.0;
  }

  /**
   * 
   * @see HostingXQConditionTriggerPriceType
   */
  public HostingXQConditionTriggerPriceType getTriggerPriceType() {
    return this.triggerPriceType;
  }

  /**
   * 
   * @see HostingXQConditionTriggerPriceType
   */
  public HostingXQConditionTrigger setTriggerPriceType(HostingXQConditionTriggerPriceType triggerPriceType) {
    this.triggerPriceType = triggerPriceType;
    return this;
  }

  public void unsetTriggerPriceType() {
    this.triggerPriceType = null;
  }

  /** Returns true if field triggerPriceType is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerPriceType() {
    return this.triggerPriceType != null;
  }

  public void setTriggerPriceTypeIsSet(boolean value) {
    if (!value) {
      this.triggerPriceType = null;
    }
  }

  /**
   * 
   * @see HostingXQConditionTriggerOperator
   */
  public HostingXQConditionTriggerOperator getTriggerOperator() {
    return this.triggerOperator;
  }

  /**
   * 
   * @see HostingXQConditionTriggerOperator
   */
  public HostingXQConditionTrigger setTriggerOperator(HostingXQConditionTriggerOperator triggerOperator) {
    this.triggerOperator = triggerOperator;
    return this;
  }

  public void unsetTriggerOperator() {
    this.triggerOperator = null;
  }

  /** Returns true if field triggerOperator is set (has been assigned a value) and false otherwise */
  public boolean isSetTriggerOperator() {
    return this.triggerOperator != null;
  }

  public void setTriggerOperatorIsSet(boolean value) {
    if (!value) {
      this.triggerOperator = null;
    }
  }

  public double getConditionPrice() {
    return this.conditionPrice;
  }

  public HostingXQConditionTrigger setConditionPrice(double conditionPrice) {
    this.conditionPrice = conditionPrice;
    setConditionPriceIsSet(true);
    return this;
  }

  public void unsetConditionPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID);
  }

  /** Returns true if field conditionPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID);
  }

  public void setConditionPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CONDITIONPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRIGGER_PRICE_TYPE:
      if (value == null) {
        unsetTriggerPriceType();
      } else {
        setTriggerPriceType((HostingXQConditionTriggerPriceType)value);
      }
      break;

    case TRIGGER_OPERATOR:
      if (value == null) {
        unsetTriggerOperator();
      } else {
        setTriggerOperator((HostingXQConditionTriggerOperator)value);
      }
      break;

    case CONDITION_PRICE:
      if (value == null) {
        unsetConditionPrice();
      } else {
        setConditionPrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRIGGER_PRICE_TYPE:
      return getTriggerPriceType();

    case TRIGGER_OPERATOR:
      return getTriggerOperator();

    case CONDITION_PRICE:
      return Double.valueOf(getConditionPrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRIGGER_PRICE_TYPE:
      return isSetTriggerPriceType();
    case TRIGGER_OPERATOR:
      return isSetTriggerOperator();
    case CONDITION_PRICE:
      return isSetConditionPrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQConditionTrigger)
      return this.equals((HostingXQConditionTrigger)that);
    return false;
  }

  public boolean equals(HostingXQConditionTrigger that) {
    if (that == null)
      return false;

    boolean this_present_triggerPriceType = true && this.isSetTriggerPriceType();
    boolean that_present_triggerPriceType = true && that.isSetTriggerPriceType();
    if (this_present_triggerPriceType || that_present_triggerPriceType) {
      if (!(this_present_triggerPriceType && that_present_triggerPriceType))
        return false;
      if (!this.triggerPriceType.equals(that.triggerPriceType))
        return false;
    }

    boolean this_present_triggerOperator = true && this.isSetTriggerOperator();
    boolean that_present_triggerOperator = true && that.isSetTriggerOperator();
    if (this_present_triggerOperator || that_present_triggerOperator) {
      if (!(this_present_triggerOperator && that_present_triggerOperator))
        return false;
      if (!this.triggerOperator.equals(that.triggerOperator))
        return false;
    }

    boolean this_present_conditionPrice = true && this.isSetConditionPrice();
    boolean that_present_conditionPrice = true && that.isSetConditionPrice();
    if (this_present_conditionPrice || that_present_conditionPrice) {
      if (!(this_present_conditionPrice && that_present_conditionPrice))
        return false;
      if (this.conditionPrice != that.conditionPrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQConditionTrigger other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTriggerPriceType()).compareTo(other.isSetTriggerPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerPriceType, other.triggerPriceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTriggerOperator()).compareTo(other.isSetTriggerOperator());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTriggerOperator()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.triggerOperator, other.triggerOperator);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionPrice()).compareTo(other.isSetConditionPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionPrice, other.conditionPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQConditionTrigger(");
    boolean first = true;

    if (isSetTriggerPriceType()) {
      sb.append("triggerPriceType:");
      if (this.triggerPriceType == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerPriceType);
      }
      first = false;
    }
    if (isSetTriggerOperator()) {
      if (!first) sb.append(", ");
      sb.append("triggerOperator:");
      if (this.triggerOperator == null) {
        sb.append("null");
      } else {
        sb.append(this.triggerOperator);
      }
      first = false;
    }
    if (isSetConditionPrice()) {
      if (!first) sb.append(", ");
      sb.append("conditionPrice:");
      sb.append(this.conditionPrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQConditionTriggerStandardSchemeFactory implements SchemeFactory {
    public HostingXQConditionTriggerStandardScheme getScheme() {
      return new HostingXQConditionTriggerStandardScheme();
    }
  }

  private static class HostingXQConditionTriggerStandardScheme extends StandardScheme<HostingXQConditionTrigger> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQConditionTrigger struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRIGGER_PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.triggerPriceType = HostingXQConditionTriggerPriceType.findByValue(iprot.readI32());
              struct.setTriggerPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRIGGER_OPERATOR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.triggerOperator = HostingXQConditionTriggerOperator.findByValue(iprot.readI32());
              struct.setTriggerOperatorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONDITION_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.conditionPrice = iprot.readDouble();
              struct.setConditionPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQConditionTrigger struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.triggerPriceType != null) {
        if (struct.isSetTriggerPriceType()) {
          oprot.writeFieldBegin(TRIGGER_PRICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.triggerPriceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.triggerOperator != null) {
        if (struct.isSetTriggerOperator()) {
          oprot.writeFieldBegin(TRIGGER_OPERATOR_FIELD_DESC);
          oprot.writeI32(struct.triggerOperator.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetConditionPrice()) {
        oprot.writeFieldBegin(CONDITION_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.conditionPrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQConditionTriggerTupleSchemeFactory implements SchemeFactory {
    public HostingXQConditionTriggerTupleScheme getScheme() {
      return new HostingXQConditionTriggerTupleScheme();
    }
  }

  private static class HostingXQConditionTriggerTupleScheme extends TupleScheme<HostingXQConditionTrigger> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQConditionTrigger struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTriggerPriceType()) {
        optionals.set(0);
      }
      if (struct.isSetTriggerOperator()) {
        optionals.set(1);
      }
      if (struct.isSetConditionPrice()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTriggerPriceType()) {
        oprot.writeI32(struct.triggerPriceType.getValue());
      }
      if (struct.isSetTriggerOperator()) {
        oprot.writeI32(struct.triggerOperator.getValue());
      }
      if (struct.isSetConditionPrice()) {
        oprot.writeDouble(struct.conditionPrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQConditionTrigger struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.triggerPriceType = HostingXQConditionTriggerPriceType.findByValue(iprot.readI32());
        struct.setTriggerPriceTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.triggerOperator = HostingXQConditionTriggerOperator.findByValue(iprot.readI32());
        struct.setTriggerOperatorIsSet(true);
      }
      if (incoming.get(2)) {
        struct.conditionPrice = iprot.readDouble();
        struct.setConditionPriceIsSet(true);
      }
    }
  }

}

