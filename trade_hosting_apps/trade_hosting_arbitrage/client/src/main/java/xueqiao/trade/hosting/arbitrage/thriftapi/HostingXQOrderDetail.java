/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQOrderDetail implements org.apache.thrift.TBase<HostingXQOrderDetail, HostingXQOrderDetail._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQOrderDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQOrderDetail");

  private static final org.apache.thrift.protocol.TField CONTRACT_LIMIT_ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractLimitOrderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField COMPOSE_LIMIT_ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("composeLimitOrderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField CONDITION_ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("conditionOrderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField CONTRACT_PARKED_ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractParkedOrderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQOrderDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQOrderDetailTupleSchemeFactory());
  }

  public HostingXQContractLimitOrderDetail contractLimitOrderDetail; // optional
  public HostingXQComposeLimitOrderDetail composeLimitOrderDetail; // optional
  public HostingXQConditionOrderDetail conditionOrderDetail; // optional
  public HostingXQContractParkedOrderDetail contractParkedOrderDetail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CONTRACT_LIMIT_ORDER_DETAIL((short)1, "contractLimitOrderDetail"),
    COMPOSE_LIMIT_ORDER_DETAIL((short)2, "composeLimitOrderDetail"),
    CONDITION_ORDER_DETAIL((short)3, "conditionOrderDetail"),
    CONTRACT_PARKED_ORDER_DETAIL((short)4, "contractParkedOrderDetail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CONTRACT_LIMIT_ORDER_DETAIL
          return CONTRACT_LIMIT_ORDER_DETAIL;
        case 2: // COMPOSE_LIMIT_ORDER_DETAIL
          return COMPOSE_LIMIT_ORDER_DETAIL;
        case 3: // CONDITION_ORDER_DETAIL
          return CONDITION_ORDER_DETAIL;
        case 4: // CONTRACT_PARKED_ORDER_DETAIL
          return CONTRACT_PARKED_ORDER_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CONTRACT_LIMIT_ORDER_DETAIL,_Fields.COMPOSE_LIMIT_ORDER_DETAIL,_Fields.CONDITION_ORDER_DETAIL,_Fields.CONTRACT_PARKED_ORDER_DETAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CONTRACT_LIMIT_ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("contractLimitOrderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQContractLimitOrderDetail.class)));
    tmpMap.put(_Fields.COMPOSE_LIMIT_ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("composeLimitOrderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeLimitOrderDetail.class)));
    tmpMap.put(_Fields.CONDITION_ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("conditionOrderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQConditionOrderDetail.class)));
    tmpMap.put(_Fields.CONTRACT_PARKED_ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("contractParkedOrderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQContractParkedOrderDetail.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQOrderDetail.class, metaDataMap);
  }

  public HostingXQOrderDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQOrderDetail(HostingXQOrderDetail other) {
    if (other.isSetContractLimitOrderDetail()) {
      this.contractLimitOrderDetail = new HostingXQContractLimitOrderDetail(other.contractLimitOrderDetail);
    }
    if (other.isSetComposeLimitOrderDetail()) {
      this.composeLimitOrderDetail = new HostingXQComposeLimitOrderDetail(other.composeLimitOrderDetail);
    }
    if (other.isSetConditionOrderDetail()) {
      this.conditionOrderDetail = new HostingXQConditionOrderDetail(other.conditionOrderDetail);
    }
    if (other.isSetContractParkedOrderDetail()) {
      this.contractParkedOrderDetail = new HostingXQContractParkedOrderDetail(other.contractParkedOrderDetail);
    }
  }

  public HostingXQOrderDetail deepCopy() {
    return new HostingXQOrderDetail(this);
  }

  @Override
  public void clear() {
    this.contractLimitOrderDetail = null;
    this.composeLimitOrderDetail = null;
    this.conditionOrderDetail = null;
    this.contractParkedOrderDetail = null;
  }

  public HostingXQContractLimitOrderDetail getContractLimitOrderDetail() {
    return this.contractLimitOrderDetail;
  }

  public HostingXQOrderDetail setContractLimitOrderDetail(HostingXQContractLimitOrderDetail contractLimitOrderDetail) {
    this.contractLimitOrderDetail = contractLimitOrderDetail;
    return this;
  }

  public void unsetContractLimitOrderDetail() {
    this.contractLimitOrderDetail = null;
  }

  /** Returns true if field contractLimitOrderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetContractLimitOrderDetail() {
    return this.contractLimitOrderDetail != null;
  }

  public void setContractLimitOrderDetailIsSet(boolean value) {
    if (!value) {
      this.contractLimitOrderDetail = null;
    }
  }

  public HostingXQComposeLimitOrderDetail getComposeLimitOrderDetail() {
    return this.composeLimitOrderDetail;
  }

  public HostingXQOrderDetail setComposeLimitOrderDetail(HostingXQComposeLimitOrderDetail composeLimitOrderDetail) {
    this.composeLimitOrderDetail = composeLimitOrderDetail;
    return this;
  }

  public void unsetComposeLimitOrderDetail() {
    this.composeLimitOrderDetail = null;
  }

  /** Returns true if field composeLimitOrderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetComposeLimitOrderDetail() {
    return this.composeLimitOrderDetail != null;
  }

  public void setComposeLimitOrderDetailIsSet(boolean value) {
    if (!value) {
      this.composeLimitOrderDetail = null;
    }
  }

  public HostingXQConditionOrderDetail getConditionOrderDetail() {
    return this.conditionOrderDetail;
  }

  public HostingXQOrderDetail setConditionOrderDetail(HostingXQConditionOrderDetail conditionOrderDetail) {
    this.conditionOrderDetail = conditionOrderDetail;
    return this;
  }

  public void unsetConditionOrderDetail() {
    this.conditionOrderDetail = null;
  }

  /** Returns true if field conditionOrderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetConditionOrderDetail() {
    return this.conditionOrderDetail != null;
  }

  public void setConditionOrderDetailIsSet(boolean value) {
    if (!value) {
      this.conditionOrderDetail = null;
    }
  }

  public HostingXQContractParkedOrderDetail getContractParkedOrderDetail() {
    return this.contractParkedOrderDetail;
  }

  public HostingXQOrderDetail setContractParkedOrderDetail(HostingXQContractParkedOrderDetail contractParkedOrderDetail) {
    this.contractParkedOrderDetail = contractParkedOrderDetail;
    return this;
  }

  public void unsetContractParkedOrderDetail() {
    this.contractParkedOrderDetail = null;
  }

  /** Returns true if field contractParkedOrderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetContractParkedOrderDetail() {
    return this.contractParkedOrderDetail != null;
  }

  public void setContractParkedOrderDetailIsSet(boolean value) {
    if (!value) {
      this.contractParkedOrderDetail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CONTRACT_LIMIT_ORDER_DETAIL:
      if (value == null) {
        unsetContractLimitOrderDetail();
      } else {
        setContractLimitOrderDetail((HostingXQContractLimitOrderDetail)value);
      }
      break;

    case COMPOSE_LIMIT_ORDER_DETAIL:
      if (value == null) {
        unsetComposeLimitOrderDetail();
      } else {
        setComposeLimitOrderDetail((HostingXQComposeLimitOrderDetail)value);
      }
      break;

    case CONDITION_ORDER_DETAIL:
      if (value == null) {
        unsetConditionOrderDetail();
      } else {
        setConditionOrderDetail((HostingXQConditionOrderDetail)value);
      }
      break;

    case CONTRACT_PARKED_ORDER_DETAIL:
      if (value == null) {
        unsetContractParkedOrderDetail();
      } else {
        setContractParkedOrderDetail((HostingXQContractParkedOrderDetail)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CONTRACT_LIMIT_ORDER_DETAIL:
      return getContractLimitOrderDetail();

    case COMPOSE_LIMIT_ORDER_DETAIL:
      return getComposeLimitOrderDetail();

    case CONDITION_ORDER_DETAIL:
      return getConditionOrderDetail();

    case CONTRACT_PARKED_ORDER_DETAIL:
      return getContractParkedOrderDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CONTRACT_LIMIT_ORDER_DETAIL:
      return isSetContractLimitOrderDetail();
    case COMPOSE_LIMIT_ORDER_DETAIL:
      return isSetComposeLimitOrderDetail();
    case CONDITION_ORDER_DETAIL:
      return isSetConditionOrderDetail();
    case CONTRACT_PARKED_ORDER_DETAIL:
      return isSetContractParkedOrderDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQOrderDetail)
      return this.equals((HostingXQOrderDetail)that);
    return false;
  }

  public boolean equals(HostingXQOrderDetail that) {
    if (that == null)
      return false;

    boolean this_present_contractLimitOrderDetail = true && this.isSetContractLimitOrderDetail();
    boolean that_present_contractLimitOrderDetail = true && that.isSetContractLimitOrderDetail();
    if (this_present_contractLimitOrderDetail || that_present_contractLimitOrderDetail) {
      if (!(this_present_contractLimitOrderDetail && that_present_contractLimitOrderDetail))
        return false;
      if (!this.contractLimitOrderDetail.equals(that.contractLimitOrderDetail))
        return false;
    }

    boolean this_present_composeLimitOrderDetail = true && this.isSetComposeLimitOrderDetail();
    boolean that_present_composeLimitOrderDetail = true && that.isSetComposeLimitOrderDetail();
    if (this_present_composeLimitOrderDetail || that_present_composeLimitOrderDetail) {
      if (!(this_present_composeLimitOrderDetail && that_present_composeLimitOrderDetail))
        return false;
      if (!this.composeLimitOrderDetail.equals(that.composeLimitOrderDetail))
        return false;
    }

    boolean this_present_conditionOrderDetail = true && this.isSetConditionOrderDetail();
    boolean that_present_conditionOrderDetail = true && that.isSetConditionOrderDetail();
    if (this_present_conditionOrderDetail || that_present_conditionOrderDetail) {
      if (!(this_present_conditionOrderDetail && that_present_conditionOrderDetail))
        return false;
      if (!this.conditionOrderDetail.equals(that.conditionOrderDetail))
        return false;
    }

    boolean this_present_contractParkedOrderDetail = true && this.isSetContractParkedOrderDetail();
    boolean that_present_contractParkedOrderDetail = true && that.isSetContractParkedOrderDetail();
    if (this_present_contractParkedOrderDetail || that_present_contractParkedOrderDetail) {
      if (!(this_present_contractParkedOrderDetail && that_present_contractParkedOrderDetail))
        return false;
      if (!this.contractParkedOrderDetail.equals(that.contractParkedOrderDetail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQOrderDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetContractLimitOrderDetail()).compareTo(other.isSetContractLimitOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractLimitOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractLimitOrderDetail, other.contractLimitOrderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetComposeLimitOrderDetail()).compareTo(other.isSetComposeLimitOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetComposeLimitOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.composeLimitOrderDetail, other.composeLimitOrderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetConditionOrderDetail()).compareTo(other.isSetConditionOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetConditionOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.conditionOrderDetail, other.conditionOrderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractParkedOrderDetail()).compareTo(other.isSetContractParkedOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractParkedOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractParkedOrderDetail, other.contractParkedOrderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQOrderDetail(");
    boolean first = true;

    if (isSetContractLimitOrderDetail()) {
      sb.append("contractLimitOrderDetail:");
      if (this.contractLimitOrderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.contractLimitOrderDetail);
      }
      first = false;
    }
    if (isSetComposeLimitOrderDetail()) {
      if (!first) sb.append(", ");
      sb.append("composeLimitOrderDetail:");
      if (this.composeLimitOrderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.composeLimitOrderDetail);
      }
      first = false;
    }
    if (isSetConditionOrderDetail()) {
      if (!first) sb.append(", ");
      sb.append("conditionOrderDetail:");
      if (this.conditionOrderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.conditionOrderDetail);
      }
      first = false;
    }
    if (isSetContractParkedOrderDetail()) {
      if (!first) sb.append(", ");
      sb.append("contractParkedOrderDetail:");
      if (this.contractParkedOrderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.contractParkedOrderDetail);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (contractLimitOrderDetail != null) {
      contractLimitOrderDetail.validate();
    }
    if (composeLimitOrderDetail != null) {
      composeLimitOrderDetail.validate();
    }
    if (conditionOrderDetail != null) {
      conditionOrderDetail.validate();
    }
    if (contractParkedOrderDetail != null) {
      contractParkedOrderDetail.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQOrderDetailStandardSchemeFactory implements SchemeFactory {
    public HostingXQOrderDetailStandardScheme getScheme() {
      return new HostingXQOrderDetailStandardScheme();
    }
  }

  private static class HostingXQOrderDetailStandardScheme extends StandardScheme<HostingXQOrderDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQOrderDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CONTRACT_LIMIT_ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractLimitOrderDetail = new HostingXQContractLimitOrderDetail();
              struct.contractLimitOrderDetail.read(iprot);
              struct.setContractLimitOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPOSE_LIMIT_ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.composeLimitOrderDetail = new HostingXQComposeLimitOrderDetail();
              struct.composeLimitOrderDetail.read(iprot);
              struct.setComposeLimitOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONDITION_ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.conditionOrderDetail = new HostingXQConditionOrderDetail();
              struct.conditionOrderDetail.read(iprot);
              struct.setConditionOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTRACT_PARKED_ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.contractParkedOrderDetail = new HostingXQContractParkedOrderDetail();
              struct.contractParkedOrderDetail.read(iprot);
              struct.setContractParkedOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQOrderDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.contractLimitOrderDetail != null) {
        if (struct.isSetContractLimitOrderDetail()) {
          oprot.writeFieldBegin(CONTRACT_LIMIT_ORDER_DETAIL_FIELD_DESC);
          struct.contractLimitOrderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.composeLimitOrderDetail != null) {
        if (struct.isSetComposeLimitOrderDetail()) {
          oprot.writeFieldBegin(COMPOSE_LIMIT_ORDER_DETAIL_FIELD_DESC);
          struct.composeLimitOrderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.conditionOrderDetail != null) {
        if (struct.isSetConditionOrderDetail()) {
          oprot.writeFieldBegin(CONDITION_ORDER_DETAIL_FIELD_DESC);
          struct.conditionOrderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractParkedOrderDetail != null) {
        if (struct.isSetContractParkedOrderDetail()) {
          oprot.writeFieldBegin(CONTRACT_PARKED_ORDER_DETAIL_FIELD_DESC);
          struct.contractParkedOrderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQOrderDetailTupleSchemeFactory implements SchemeFactory {
    public HostingXQOrderDetailTupleScheme getScheme() {
      return new HostingXQOrderDetailTupleScheme();
    }
  }

  private static class HostingXQOrderDetailTupleScheme extends TupleScheme<HostingXQOrderDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetContractLimitOrderDetail()) {
        optionals.set(0);
      }
      if (struct.isSetComposeLimitOrderDetail()) {
        optionals.set(1);
      }
      if (struct.isSetConditionOrderDetail()) {
        optionals.set(2);
      }
      if (struct.isSetContractParkedOrderDetail()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetContractLimitOrderDetail()) {
        struct.contractLimitOrderDetail.write(oprot);
      }
      if (struct.isSetComposeLimitOrderDetail()) {
        struct.composeLimitOrderDetail.write(oprot);
      }
      if (struct.isSetConditionOrderDetail()) {
        struct.conditionOrderDetail.write(oprot);
      }
      if (struct.isSetContractParkedOrderDetail()) {
        struct.contractParkedOrderDetail.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.contractLimitOrderDetail = new HostingXQContractLimitOrderDetail();
        struct.contractLimitOrderDetail.read(iprot);
        struct.setContractLimitOrderDetailIsSet(true);
      }
      if (incoming.get(1)) {
        struct.composeLimitOrderDetail = new HostingXQComposeLimitOrderDetail();
        struct.composeLimitOrderDetail.read(iprot);
        struct.setComposeLimitOrderDetailIsSet(true);
      }
      if (incoming.get(2)) {
        struct.conditionOrderDetail = new HostingXQConditionOrderDetail();
        struct.conditionOrderDetail.read(iprot);
        struct.setConditionOrderDetailIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contractParkedOrderDetail = new HostingXQContractParkedOrderDetail();
        struct.contractParkedOrderDetail.read(iprot);
        struct.setContractParkedOrderDetailIsSet(true);
      }
    }
  }

}

