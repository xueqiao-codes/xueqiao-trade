/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQComposeLimitOrderExecParams implements org.apache.thrift.TBase<HostingXQComposeLimitOrderExecParams, HostingXQComposeLimitOrderExecParams._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQComposeLimitOrderExecParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQComposeLimitOrderExecParams");

  private static final org.apache.thrift.protocol.TField EXEC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("execType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField EXEC_EVERY_QTY_FIELD_DESC = new org.apache.thrift.protocol.TField("execEveryQty", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField EXEC_PARALLEL_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("execParallelParams", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField EXEC_LEG_BY_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("execLegByParams", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField EARLY_SUSPENDED_FOR_MARKET_SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("earlySuspendedForMarketSeconds", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQComposeLimitOrderExecParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQComposeLimitOrderExecParamsTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQComposeLimitOrderExecType
   */
  public HostingXQComposeLimitOrderExecType execType; // optional
  public int execEveryQty; // optional
  public HostingXQComposeLimitOrderParallelParams execParallelParams; // optional
  public HostingXQComposeLimitOrderLegByParams execLegByParams; // optional
  public int earlySuspendedForMarketSeconds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQComposeLimitOrderExecType
     */
    EXEC_TYPE((short)1, "execType"),
    EXEC_EVERY_QTY((short)2, "execEveryQty"),
    EXEC_PARALLEL_PARAMS((short)3, "execParallelParams"),
    EXEC_LEG_BY_PARAMS((short)4, "execLegByParams"),
    EARLY_SUSPENDED_FOR_MARKET_SECONDS((short)5, "earlySuspendedForMarketSeconds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXEC_TYPE
          return EXEC_TYPE;
        case 2: // EXEC_EVERY_QTY
          return EXEC_EVERY_QTY;
        case 3: // EXEC_PARALLEL_PARAMS
          return EXEC_PARALLEL_PARAMS;
        case 4: // EXEC_LEG_BY_PARAMS
          return EXEC_LEG_BY_PARAMS;
        case 5: // EARLY_SUSPENDED_FOR_MARKET_SECONDS
          return EARLY_SUSPENDED_FOR_MARKET_SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EXECEVERYQTY_ISSET_ID = 0;
  private static final int __EARLYSUSPENDEDFORMARKETSECONDS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.EXEC_TYPE,_Fields.EXEC_EVERY_QTY,_Fields.EXEC_PARALLEL_PARAMS,_Fields.EXEC_LEG_BY_PARAMS,_Fields.EARLY_SUSPENDED_FOR_MARKET_SECONDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXEC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("execType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQComposeLimitOrderExecType.class)));
    tmpMap.put(_Fields.EXEC_EVERY_QTY, new org.apache.thrift.meta_data.FieldMetaData("execEveryQty", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXEC_PARALLEL_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("execParallelParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeLimitOrderParallelParams.class)));
    tmpMap.put(_Fields.EXEC_LEG_BY_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("execLegByParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeLimitOrderLegByParams.class)));
    tmpMap.put(_Fields.EARLY_SUSPENDED_FOR_MARKET_SECONDS, new org.apache.thrift.meta_data.FieldMetaData("earlySuspendedForMarketSeconds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQComposeLimitOrderExecParams.class, metaDataMap);
  }

  public HostingXQComposeLimitOrderExecParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQComposeLimitOrderExecParams(HostingXQComposeLimitOrderExecParams other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetExecType()) {
      this.execType = other.execType;
    }
    this.execEveryQty = other.execEveryQty;
    if (other.isSetExecParallelParams()) {
      this.execParallelParams = new HostingXQComposeLimitOrderParallelParams(other.execParallelParams);
    }
    if (other.isSetExecLegByParams()) {
      this.execLegByParams = new HostingXQComposeLimitOrderLegByParams(other.execLegByParams);
    }
    this.earlySuspendedForMarketSeconds = other.earlySuspendedForMarketSeconds;
  }

  public HostingXQComposeLimitOrderExecParams deepCopy() {
    return new HostingXQComposeLimitOrderExecParams(this);
  }

  @Override
  public void clear() {
    this.execType = null;
    setExecEveryQtyIsSet(false);
    this.execEveryQty = 0;
    this.execParallelParams = null;
    this.execLegByParams = null;
    setEarlySuspendedForMarketSecondsIsSet(false);
    this.earlySuspendedForMarketSeconds = 0;
  }

  /**
   * 
   * @see HostingXQComposeLimitOrderExecType
   */
  public HostingXQComposeLimitOrderExecType getExecType() {
    return this.execType;
  }

  /**
   * 
   * @see HostingXQComposeLimitOrderExecType
   */
  public HostingXQComposeLimitOrderExecParams setExecType(HostingXQComposeLimitOrderExecType execType) {
    this.execType = execType;
    return this;
  }

  public void unsetExecType() {
    this.execType = null;
  }

  /** Returns true if field execType is set (has been assigned a value) and false otherwise */
  public boolean isSetExecType() {
    return this.execType != null;
  }

  public void setExecTypeIsSet(boolean value) {
    if (!value) {
      this.execType = null;
    }
  }

  public int getExecEveryQty() {
    return this.execEveryQty;
  }

  public HostingXQComposeLimitOrderExecParams setExecEveryQty(int execEveryQty) {
    this.execEveryQty = execEveryQty;
    setExecEveryQtyIsSet(true);
    return this;
  }

  public void unsetExecEveryQty() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECEVERYQTY_ISSET_ID);
  }

  /** Returns true if field execEveryQty is set (has been assigned a value) and false otherwise */
  public boolean isSetExecEveryQty() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECEVERYQTY_ISSET_ID);
  }

  public void setExecEveryQtyIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECEVERYQTY_ISSET_ID, value);
  }

  public HostingXQComposeLimitOrderParallelParams getExecParallelParams() {
    return this.execParallelParams;
  }

  public HostingXQComposeLimitOrderExecParams setExecParallelParams(HostingXQComposeLimitOrderParallelParams execParallelParams) {
    this.execParallelParams = execParallelParams;
    return this;
  }

  public void unsetExecParallelParams() {
    this.execParallelParams = null;
  }

  /** Returns true if field execParallelParams is set (has been assigned a value) and false otherwise */
  public boolean isSetExecParallelParams() {
    return this.execParallelParams != null;
  }

  public void setExecParallelParamsIsSet(boolean value) {
    if (!value) {
      this.execParallelParams = null;
    }
  }

  public HostingXQComposeLimitOrderLegByParams getExecLegByParams() {
    return this.execLegByParams;
  }

  public HostingXQComposeLimitOrderExecParams setExecLegByParams(HostingXQComposeLimitOrderLegByParams execLegByParams) {
    this.execLegByParams = execLegByParams;
    return this;
  }

  public void unsetExecLegByParams() {
    this.execLegByParams = null;
  }

  /** Returns true if field execLegByParams is set (has been assigned a value) and false otherwise */
  public boolean isSetExecLegByParams() {
    return this.execLegByParams != null;
  }

  public void setExecLegByParamsIsSet(boolean value) {
    if (!value) {
      this.execLegByParams = null;
    }
  }

  public int getEarlySuspendedForMarketSeconds() {
    return this.earlySuspendedForMarketSeconds;
  }

  public HostingXQComposeLimitOrderExecParams setEarlySuspendedForMarketSeconds(int earlySuspendedForMarketSeconds) {
    this.earlySuspendedForMarketSeconds = earlySuspendedForMarketSeconds;
    setEarlySuspendedForMarketSecondsIsSet(true);
    return this;
  }

  public void unsetEarlySuspendedForMarketSeconds() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EARLYSUSPENDEDFORMARKETSECONDS_ISSET_ID);
  }

  /** Returns true if field earlySuspendedForMarketSeconds is set (has been assigned a value) and false otherwise */
  public boolean isSetEarlySuspendedForMarketSeconds() {
    return EncodingUtils.testBit(__isset_bitfield, __EARLYSUSPENDEDFORMARKETSECONDS_ISSET_ID);
  }

  public void setEarlySuspendedForMarketSecondsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EARLYSUSPENDEDFORMARKETSECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXEC_TYPE:
      if (value == null) {
        unsetExecType();
      } else {
        setExecType((HostingXQComposeLimitOrderExecType)value);
      }
      break;

    case EXEC_EVERY_QTY:
      if (value == null) {
        unsetExecEveryQty();
      } else {
        setExecEveryQty((Integer)value);
      }
      break;

    case EXEC_PARALLEL_PARAMS:
      if (value == null) {
        unsetExecParallelParams();
      } else {
        setExecParallelParams((HostingXQComposeLimitOrderParallelParams)value);
      }
      break;

    case EXEC_LEG_BY_PARAMS:
      if (value == null) {
        unsetExecLegByParams();
      } else {
        setExecLegByParams((HostingXQComposeLimitOrderLegByParams)value);
      }
      break;

    case EARLY_SUSPENDED_FOR_MARKET_SECONDS:
      if (value == null) {
        unsetEarlySuspendedForMarketSeconds();
      } else {
        setEarlySuspendedForMarketSeconds((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXEC_TYPE:
      return getExecType();

    case EXEC_EVERY_QTY:
      return Integer.valueOf(getExecEveryQty());

    case EXEC_PARALLEL_PARAMS:
      return getExecParallelParams();

    case EXEC_LEG_BY_PARAMS:
      return getExecLegByParams();

    case EARLY_SUSPENDED_FOR_MARKET_SECONDS:
      return Integer.valueOf(getEarlySuspendedForMarketSeconds());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXEC_TYPE:
      return isSetExecType();
    case EXEC_EVERY_QTY:
      return isSetExecEveryQty();
    case EXEC_PARALLEL_PARAMS:
      return isSetExecParallelParams();
    case EXEC_LEG_BY_PARAMS:
      return isSetExecLegByParams();
    case EARLY_SUSPENDED_FOR_MARKET_SECONDS:
      return isSetEarlySuspendedForMarketSeconds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQComposeLimitOrderExecParams)
      return this.equals((HostingXQComposeLimitOrderExecParams)that);
    return false;
  }

  public boolean equals(HostingXQComposeLimitOrderExecParams that) {
    if (that == null)
      return false;

    boolean this_present_execType = true && this.isSetExecType();
    boolean that_present_execType = true && that.isSetExecType();
    if (this_present_execType || that_present_execType) {
      if (!(this_present_execType && that_present_execType))
        return false;
      if (!this.execType.equals(that.execType))
        return false;
    }

    boolean this_present_execEveryQty = true && this.isSetExecEveryQty();
    boolean that_present_execEveryQty = true && that.isSetExecEveryQty();
    if (this_present_execEveryQty || that_present_execEveryQty) {
      if (!(this_present_execEveryQty && that_present_execEveryQty))
        return false;
      if (this.execEveryQty != that.execEveryQty)
        return false;
    }

    boolean this_present_execParallelParams = true && this.isSetExecParallelParams();
    boolean that_present_execParallelParams = true && that.isSetExecParallelParams();
    if (this_present_execParallelParams || that_present_execParallelParams) {
      if (!(this_present_execParallelParams && that_present_execParallelParams))
        return false;
      if (!this.execParallelParams.equals(that.execParallelParams))
        return false;
    }

    boolean this_present_execLegByParams = true && this.isSetExecLegByParams();
    boolean that_present_execLegByParams = true && that.isSetExecLegByParams();
    if (this_present_execLegByParams || that_present_execLegByParams) {
      if (!(this_present_execLegByParams && that_present_execLegByParams))
        return false;
      if (!this.execLegByParams.equals(that.execLegByParams))
        return false;
    }

    boolean this_present_earlySuspendedForMarketSeconds = true && this.isSetEarlySuspendedForMarketSeconds();
    boolean that_present_earlySuspendedForMarketSeconds = true && that.isSetEarlySuspendedForMarketSeconds();
    if (this_present_earlySuspendedForMarketSeconds || that_present_earlySuspendedForMarketSeconds) {
      if (!(this_present_earlySuspendedForMarketSeconds && that_present_earlySuspendedForMarketSeconds))
        return false;
      if (this.earlySuspendedForMarketSeconds != that.earlySuspendedForMarketSeconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQComposeLimitOrderExecParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExecType()).compareTo(other.isSetExecType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execType, other.execType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecEveryQty()).compareTo(other.isSetExecEveryQty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecEveryQty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execEveryQty, other.execEveryQty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecParallelParams()).compareTo(other.isSetExecParallelParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecParallelParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execParallelParams, other.execParallelParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecLegByParams()).compareTo(other.isSetExecLegByParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecLegByParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execLegByParams, other.execLegByParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEarlySuspendedForMarketSeconds()).compareTo(other.isSetEarlySuspendedForMarketSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEarlySuspendedForMarketSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.earlySuspendedForMarketSeconds, other.earlySuspendedForMarketSeconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderExecParams(");
    boolean first = true;

    if (isSetExecType()) {
      sb.append("execType:");
      if (this.execType == null) {
        sb.append("null");
      } else {
        sb.append(this.execType);
      }
      first = false;
    }
    if (isSetExecEveryQty()) {
      if (!first) sb.append(", ");
      sb.append("execEveryQty:");
      sb.append(this.execEveryQty);
      first = false;
    }
    if (isSetExecParallelParams()) {
      if (!first) sb.append(", ");
      sb.append("execParallelParams:");
      if (this.execParallelParams == null) {
        sb.append("null");
      } else {
        sb.append(this.execParallelParams);
      }
      first = false;
    }
    if (isSetExecLegByParams()) {
      if (!first) sb.append(", ");
      sb.append("execLegByParams:");
      if (this.execLegByParams == null) {
        sb.append("null");
      } else {
        sb.append(this.execLegByParams);
      }
      first = false;
    }
    if (isSetEarlySuspendedForMarketSeconds()) {
      if (!first) sb.append(", ");
      sb.append("earlySuspendedForMarketSeconds:");
      sb.append(this.earlySuspendedForMarketSeconds);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (execParallelParams != null) {
      execParallelParams.validate();
    }
    if (execLegByParams != null) {
      execLegByParams.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQComposeLimitOrderExecParamsStandardSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderExecParamsStandardScheme getScheme() {
      return new HostingXQComposeLimitOrderExecParamsStandardScheme();
    }
  }

  private static class HostingXQComposeLimitOrderExecParamsStandardScheme extends StandardScheme<HostingXQComposeLimitOrderExecParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQComposeLimitOrderExecParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXEC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execType = HostingXQComposeLimitOrderExecType.findByValue(iprot.readI32());
              struct.setExecTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXEC_EVERY_QTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execEveryQty = iprot.readI32();
              struct.setExecEveryQtyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXEC_PARALLEL_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.execParallelParams = new HostingXQComposeLimitOrderParallelParams();
              struct.execParallelParams.read(iprot);
              struct.setExecParallelParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXEC_LEG_BY_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.execLegByParams = new HostingXQComposeLimitOrderLegByParams();
              struct.execLegByParams.read(iprot);
              struct.setExecLegByParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EARLY_SUSPENDED_FOR_MARKET_SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.earlySuspendedForMarketSeconds = iprot.readI32();
              struct.setEarlySuspendedForMarketSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQComposeLimitOrderExecParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.execType != null) {
        if (struct.isSetExecType()) {
          oprot.writeFieldBegin(EXEC_TYPE_FIELD_DESC);
          oprot.writeI32(struct.execType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecEveryQty()) {
        oprot.writeFieldBegin(EXEC_EVERY_QTY_FIELD_DESC);
        oprot.writeI32(struct.execEveryQty);
        oprot.writeFieldEnd();
      }
      if (struct.execParallelParams != null) {
        if (struct.isSetExecParallelParams()) {
          oprot.writeFieldBegin(EXEC_PARALLEL_PARAMS_FIELD_DESC);
          struct.execParallelParams.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execLegByParams != null) {
        if (struct.isSetExecLegByParams()) {
          oprot.writeFieldBegin(EXEC_LEG_BY_PARAMS_FIELD_DESC);
          struct.execLegByParams.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEarlySuspendedForMarketSeconds()) {
        oprot.writeFieldBegin(EARLY_SUSPENDED_FOR_MARKET_SECONDS_FIELD_DESC);
        oprot.writeI32(struct.earlySuspendedForMarketSeconds);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQComposeLimitOrderExecParamsTupleSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderExecParamsTupleScheme getScheme() {
      return new HostingXQComposeLimitOrderExecParamsTupleScheme();
    }
  }

  private static class HostingXQComposeLimitOrderExecParamsTupleScheme extends TupleScheme<HostingXQComposeLimitOrderExecParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderExecParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExecType()) {
        optionals.set(0);
      }
      if (struct.isSetExecEveryQty()) {
        optionals.set(1);
      }
      if (struct.isSetExecParallelParams()) {
        optionals.set(2);
      }
      if (struct.isSetExecLegByParams()) {
        optionals.set(3);
      }
      if (struct.isSetEarlySuspendedForMarketSeconds()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExecType()) {
        oprot.writeI32(struct.execType.getValue());
      }
      if (struct.isSetExecEveryQty()) {
        oprot.writeI32(struct.execEveryQty);
      }
      if (struct.isSetExecParallelParams()) {
        struct.execParallelParams.write(oprot);
      }
      if (struct.isSetExecLegByParams()) {
        struct.execLegByParams.write(oprot);
      }
      if (struct.isSetEarlySuspendedForMarketSeconds()) {
        oprot.writeI32(struct.earlySuspendedForMarketSeconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderExecParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.execType = HostingXQComposeLimitOrderExecType.findByValue(iprot.readI32());
        struct.setExecTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.execEveryQty = iprot.readI32();
        struct.setExecEveryQtyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execParallelParams = new HostingXQComposeLimitOrderParallelParams();
        struct.execParallelParams.read(iprot);
        struct.setExecParallelParamsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.execLegByParams = new HostingXQComposeLimitOrderLegByParams();
        struct.execLegByParams.read(iprot);
        struct.setExecLegByParamsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.earlySuspendedForMarketSeconds = iprot.readI32();
        struct.setEarlySuspendedForMarketSecondsIsSet(true);
      }
    }
  }

}

