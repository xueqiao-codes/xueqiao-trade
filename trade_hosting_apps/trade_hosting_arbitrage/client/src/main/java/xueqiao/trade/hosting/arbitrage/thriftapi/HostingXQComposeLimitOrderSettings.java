/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 针对组合限价单的设置
 */
public class HostingXQComposeLimitOrderSettings implements org.apache.thrift.TBase<HostingXQComposeLimitOrderSettings, HostingXQComposeLimitOrderSettings._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQComposeLimitOrderSettings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQComposeLimitOrderSettings");

  private static final org.apache.thrift.protocol.TField DEFAULT_CHASE_TICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultChaseTicks", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MAX_CHASE_TICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("maxChaseTicks", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_INVOL_REVOKE_LIMIT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("maxInvolRevokeLimitNum", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DEFAULT_INVOL_REVOKE_LIMIT_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultInvolRevokeLimitNum", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DEFAULT_QUANTITY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultQuantityRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField MIN_QUANTITY_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("minQuantityRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DEFAULT_PRICE_PROTECT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPriceProtectRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField MAX_PRICE_PROTECT_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("maxPriceProtectRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQComposeLimitOrderSettingsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQComposeLimitOrderSettingsTupleSchemeFactory());
  }

  public int defaultChaseTicks; // optional
  public int maxChaseTicks; // optional
  public int maxInvolRevokeLimitNum; // optional
  public int defaultInvolRevokeLimitNum; // optional
  public double defaultQuantityRatio; // optional
  public double minQuantityRatio; // optional
  public double defaultPriceProtectRatio; // optional
  public double maxPriceProtectRatio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEFAULT_CHASE_TICKS((short)1, "defaultChaseTicks"),
    MAX_CHASE_TICKS((short)2, "maxChaseTicks"),
    MAX_INVOL_REVOKE_LIMIT_NUM((short)3, "maxInvolRevokeLimitNum"),
    DEFAULT_INVOL_REVOKE_LIMIT_NUM((short)4, "defaultInvolRevokeLimitNum"),
    DEFAULT_QUANTITY_RATIO((short)5, "defaultQuantityRatio"),
    MIN_QUANTITY_RATIO((short)6, "minQuantityRatio"),
    DEFAULT_PRICE_PROTECT_RATIO((short)7, "defaultPriceProtectRatio"),
    MAX_PRICE_PROTECT_RATIO((short)8, "maxPriceProtectRatio");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEFAULT_CHASE_TICKS
          return DEFAULT_CHASE_TICKS;
        case 2: // MAX_CHASE_TICKS
          return MAX_CHASE_TICKS;
        case 3: // MAX_INVOL_REVOKE_LIMIT_NUM
          return MAX_INVOL_REVOKE_LIMIT_NUM;
        case 4: // DEFAULT_INVOL_REVOKE_LIMIT_NUM
          return DEFAULT_INVOL_REVOKE_LIMIT_NUM;
        case 5: // DEFAULT_QUANTITY_RATIO
          return DEFAULT_QUANTITY_RATIO;
        case 6: // MIN_QUANTITY_RATIO
          return MIN_QUANTITY_RATIO;
        case 7: // DEFAULT_PRICE_PROTECT_RATIO
          return DEFAULT_PRICE_PROTECT_RATIO;
        case 8: // MAX_PRICE_PROTECT_RATIO
          return MAX_PRICE_PROTECT_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEFAULTCHASETICKS_ISSET_ID = 0;
  private static final int __MAXCHASETICKS_ISSET_ID = 1;
  private static final int __MAXINVOLREVOKELIMITNUM_ISSET_ID = 2;
  private static final int __DEFAULTINVOLREVOKELIMITNUM_ISSET_ID = 3;
  private static final int __DEFAULTQUANTITYRATIO_ISSET_ID = 4;
  private static final int __MINQUANTITYRATIO_ISSET_ID = 5;
  private static final int __DEFAULTPRICEPROTECTRATIO_ISSET_ID = 6;
  private static final int __MAXPRICEPROTECTRATIO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DEFAULT_CHASE_TICKS,_Fields.MAX_CHASE_TICKS,_Fields.MAX_INVOL_REVOKE_LIMIT_NUM,_Fields.DEFAULT_INVOL_REVOKE_LIMIT_NUM,_Fields.DEFAULT_QUANTITY_RATIO,_Fields.MIN_QUANTITY_RATIO,_Fields.DEFAULT_PRICE_PROTECT_RATIO,_Fields.MAX_PRICE_PROTECT_RATIO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEFAULT_CHASE_TICKS, new org.apache.thrift.meta_data.FieldMetaData("defaultChaseTicks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CHASE_TICKS, new org.apache.thrift.meta_data.FieldMetaData("maxChaseTicks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_INVOL_REVOKE_LIMIT_NUM, new org.apache.thrift.meta_data.FieldMetaData("maxInvolRevokeLimitNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_INVOL_REVOKE_LIMIT_NUM, new org.apache.thrift.meta_data.FieldMetaData("defaultInvolRevokeLimitNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEFAULT_QUANTITY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("defaultQuantityRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MIN_QUANTITY_RATIO, new org.apache.thrift.meta_data.FieldMetaData("minQuantityRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEFAULT_PRICE_PROTECT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("defaultPriceProtectRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.MAX_PRICE_PROTECT_RATIO, new org.apache.thrift.meta_data.FieldMetaData("maxPriceProtectRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQComposeLimitOrderSettings.class, metaDataMap);
  }

  public HostingXQComposeLimitOrderSettings() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQComposeLimitOrderSettings(HostingXQComposeLimitOrderSettings other) {
    __isset_bitfield = other.__isset_bitfield;
    this.defaultChaseTicks = other.defaultChaseTicks;
    this.maxChaseTicks = other.maxChaseTicks;
    this.maxInvolRevokeLimitNum = other.maxInvolRevokeLimitNum;
    this.defaultInvolRevokeLimitNum = other.defaultInvolRevokeLimitNum;
    this.defaultQuantityRatio = other.defaultQuantityRatio;
    this.minQuantityRatio = other.minQuantityRatio;
    this.defaultPriceProtectRatio = other.defaultPriceProtectRatio;
    this.maxPriceProtectRatio = other.maxPriceProtectRatio;
  }

  public HostingXQComposeLimitOrderSettings deepCopy() {
    return new HostingXQComposeLimitOrderSettings(this);
  }

  @Override
  public void clear() {
    setDefaultChaseTicksIsSet(false);
    this.defaultChaseTicks = 0;
    setMaxChaseTicksIsSet(false);
    this.maxChaseTicks = 0;
    setMaxInvolRevokeLimitNumIsSet(false);
    this.maxInvolRevokeLimitNum = 0;
    setDefaultInvolRevokeLimitNumIsSet(false);
    this.defaultInvolRevokeLimitNum = 0;
    setDefaultQuantityRatioIsSet(false);
    this.defaultQuantityRatio = 0.0;
    setMinQuantityRatioIsSet(false);
    this.minQuantityRatio = 0.0;
    setDefaultPriceProtectRatioIsSet(false);
    this.defaultPriceProtectRatio = 0.0;
    setMaxPriceProtectRatioIsSet(false);
    this.maxPriceProtectRatio = 0.0;
  }

  public int getDefaultChaseTicks() {
    return this.defaultChaseTicks;
  }

  public HostingXQComposeLimitOrderSettings setDefaultChaseTicks(int defaultChaseTicks) {
    this.defaultChaseTicks = defaultChaseTicks;
    setDefaultChaseTicksIsSet(true);
    return this;
  }

  public void unsetDefaultChaseTicks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTCHASETICKS_ISSET_ID);
  }

  /** Returns true if field defaultChaseTicks is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultChaseTicks() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTCHASETICKS_ISSET_ID);
  }

  public void setDefaultChaseTicksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTCHASETICKS_ISSET_ID, value);
  }

  public int getMaxChaseTicks() {
    return this.maxChaseTicks;
  }

  public HostingXQComposeLimitOrderSettings setMaxChaseTicks(int maxChaseTicks) {
    this.maxChaseTicks = maxChaseTicks;
    setMaxChaseTicksIsSet(true);
    return this;
  }

  public void unsetMaxChaseTicks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXCHASETICKS_ISSET_ID);
  }

  /** Returns true if field maxChaseTicks is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxChaseTicks() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXCHASETICKS_ISSET_ID);
  }

  public void setMaxChaseTicksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXCHASETICKS_ISSET_ID, value);
  }

  public int getMaxInvolRevokeLimitNum() {
    return this.maxInvolRevokeLimitNum;
  }

  public HostingXQComposeLimitOrderSettings setMaxInvolRevokeLimitNum(int maxInvolRevokeLimitNum) {
    this.maxInvolRevokeLimitNum = maxInvolRevokeLimitNum;
    setMaxInvolRevokeLimitNumIsSet(true);
    return this;
  }

  public void unsetMaxInvolRevokeLimitNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXINVOLREVOKELIMITNUM_ISSET_ID);
  }

  /** Returns true if field maxInvolRevokeLimitNum is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxInvolRevokeLimitNum() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXINVOLREVOKELIMITNUM_ISSET_ID);
  }

  public void setMaxInvolRevokeLimitNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXINVOLREVOKELIMITNUM_ISSET_ID, value);
  }

  public int getDefaultInvolRevokeLimitNum() {
    return this.defaultInvolRevokeLimitNum;
  }

  public HostingXQComposeLimitOrderSettings setDefaultInvolRevokeLimitNum(int defaultInvolRevokeLimitNum) {
    this.defaultInvolRevokeLimitNum = defaultInvolRevokeLimitNum;
    setDefaultInvolRevokeLimitNumIsSet(true);
    return this;
  }

  public void unsetDefaultInvolRevokeLimitNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTINVOLREVOKELIMITNUM_ISSET_ID);
  }

  /** Returns true if field defaultInvolRevokeLimitNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultInvolRevokeLimitNum() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTINVOLREVOKELIMITNUM_ISSET_ID);
  }

  public void setDefaultInvolRevokeLimitNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTINVOLREVOKELIMITNUM_ISSET_ID, value);
  }

  public double getDefaultQuantityRatio() {
    return this.defaultQuantityRatio;
  }

  public HostingXQComposeLimitOrderSettings setDefaultQuantityRatio(double defaultQuantityRatio) {
    this.defaultQuantityRatio = defaultQuantityRatio;
    setDefaultQuantityRatioIsSet(true);
    return this;
  }

  public void unsetDefaultQuantityRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTQUANTITYRATIO_ISSET_ID);
  }

  /** Returns true if field defaultQuantityRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultQuantityRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTQUANTITYRATIO_ISSET_ID);
  }

  public void setDefaultQuantityRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTQUANTITYRATIO_ISSET_ID, value);
  }

  public double getMinQuantityRatio() {
    return this.minQuantityRatio;
  }

  public HostingXQComposeLimitOrderSettings setMinQuantityRatio(double minQuantityRatio) {
    this.minQuantityRatio = minQuantityRatio;
    setMinQuantityRatioIsSet(true);
    return this;
  }

  public void unsetMinQuantityRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MINQUANTITYRATIO_ISSET_ID);
  }

  /** Returns true if field minQuantityRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetMinQuantityRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __MINQUANTITYRATIO_ISSET_ID);
  }

  public void setMinQuantityRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MINQUANTITYRATIO_ISSET_ID, value);
  }

  public double getDefaultPriceProtectRatio() {
    return this.defaultPriceProtectRatio;
  }

  public HostingXQComposeLimitOrderSettings setDefaultPriceProtectRatio(double defaultPriceProtectRatio) {
    this.defaultPriceProtectRatio = defaultPriceProtectRatio;
    setDefaultPriceProtectRatioIsSet(true);
    return this;
  }

  public void unsetDefaultPriceProtectRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEFAULTPRICEPROTECTRATIO_ISSET_ID);
  }

  /** Returns true if field defaultPriceProtectRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPriceProtectRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __DEFAULTPRICEPROTECTRATIO_ISSET_ID);
  }

  public void setDefaultPriceProtectRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEFAULTPRICEPROTECTRATIO_ISSET_ID, value);
  }

  public double getMaxPriceProtectRatio() {
    return this.maxPriceProtectRatio;
  }

  public HostingXQComposeLimitOrderSettings setMaxPriceProtectRatio(double maxPriceProtectRatio) {
    this.maxPriceProtectRatio = maxPriceProtectRatio;
    setMaxPriceProtectRatioIsSet(true);
    return this;
  }

  public void unsetMaxPriceProtectRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXPRICEPROTECTRATIO_ISSET_ID);
  }

  /** Returns true if field maxPriceProtectRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxPriceProtectRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXPRICEPROTECTRATIO_ISSET_ID);
  }

  public void setMaxPriceProtectRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXPRICEPROTECTRATIO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEFAULT_CHASE_TICKS:
      if (value == null) {
        unsetDefaultChaseTicks();
      } else {
        setDefaultChaseTicks((Integer)value);
      }
      break;

    case MAX_CHASE_TICKS:
      if (value == null) {
        unsetMaxChaseTicks();
      } else {
        setMaxChaseTicks((Integer)value);
      }
      break;

    case MAX_INVOL_REVOKE_LIMIT_NUM:
      if (value == null) {
        unsetMaxInvolRevokeLimitNum();
      } else {
        setMaxInvolRevokeLimitNum((Integer)value);
      }
      break;

    case DEFAULT_INVOL_REVOKE_LIMIT_NUM:
      if (value == null) {
        unsetDefaultInvolRevokeLimitNum();
      } else {
        setDefaultInvolRevokeLimitNum((Integer)value);
      }
      break;

    case DEFAULT_QUANTITY_RATIO:
      if (value == null) {
        unsetDefaultQuantityRatio();
      } else {
        setDefaultQuantityRatio((Double)value);
      }
      break;

    case MIN_QUANTITY_RATIO:
      if (value == null) {
        unsetMinQuantityRatio();
      } else {
        setMinQuantityRatio((Double)value);
      }
      break;

    case DEFAULT_PRICE_PROTECT_RATIO:
      if (value == null) {
        unsetDefaultPriceProtectRatio();
      } else {
        setDefaultPriceProtectRatio((Double)value);
      }
      break;

    case MAX_PRICE_PROTECT_RATIO:
      if (value == null) {
        unsetMaxPriceProtectRatio();
      } else {
        setMaxPriceProtectRatio((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEFAULT_CHASE_TICKS:
      return Integer.valueOf(getDefaultChaseTicks());

    case MAX_CHASE_TICKS:
      return Integer.valueOf(getMaxChaseTicks());

    case MAX_INVOL_REVOKE_LIMIT_NUM:
      return Integer.valueOf(getMaxInvolRevokeLimitNum());

    case DEFAULT_INVOL_REVOKE_LIMIT_NUM:
      return Integer.valueOf(getDefaultInvolRevokeLimitNum());

    case DEFAULT_QUANTITY_RATIO:
      return Double.valueOf(getDefaultQuantityRatio());

    case MIN_QUANTITY_RATIO:
      return Double.valueOf(getMinQuantityRatio());

    case DEFAULT_PRICE_PROTECT_RATIO:
      return Double.valueOf(getDefaultPriceProtectRatio());

    case MAX_PRICE_PROTECT_RATIO:
      return Double.valueOf(getMaxPriceProtectRatio());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEFAULT_CHASE_TICKS:
      return isSetDefaultChaseTicks();
    case MAX_CHASE_TICKS:
      return isSetMaxChaseTicks();
    case MAX_INVOL_REVOKE_LIMIT_NUM:
      return isSetMaxInvolRevokeLimitNum();
    case DEFAULT_INVOL_REVOKE_LIMIT_NUM:
      return isSetDefaultInvolRevokeLimitNum();
    case DEFAULT_QUANTITY_RATIO:
      return isSetDefaultQuantityRatio();
    case MIN_QUANTITY_RATIO:
      return isSetMinQuantityRatio();
    case DEFAULT_PRICE_PROTECT_RATIO:
      return isSetDefaultPriceProtectRatio();
    case MAX_PRICE_PROTECT_RATIO:
      return isSetMaxPriceProtectRatio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQComposeLimitOrderSettings)
      return this.equals((HostingXQComposeLimitOrderSettings)that);
    return false;
  }

  public boolean equals(HostingXQComposeLimitOrderSettings that) {
    if (that == null)
      return false;

    boolean this_present_defaultChaseTicks = true && this.isSetDefaultChaseTicks();
    boolean that_present_defaultChaseTicks = true && that.isSetDefaultChaseTicks();
    if (this_present_defaultChaseTicks || that_present_defaultChaseTicks) {
      if (!(this_present_defaultChaseTicks && that_present_defaultChaseTicks))
        return false;
      if (this.defaultChaseTicks != that.defaultChaseTicks)
        return false;
    }

    boolean this_present_maxChaseTicks = true && this.isSetMaxChaseTicks();
    boolean that_present_maxChaseTicks = true && that.isSetMaxChaseTicks();
    if (this_present_maxChaseTicks || that_present_maxChaseTicks) {
      if (!(this_present_maxChaseTicks && that_present_maxChaseTicks))
        return false;
      if (this.maxChaseTicks != that.maxChaseTicks)
        return false;
    }

    boolean this_present_maxInvolRevokeLimitNum = true && this.isSetMaxInvolRevokeLimitNum();
    boolean that_present_maxInvolRevokeLimitNum = true && that.isSetMaxInvolRevokeLimitNum();
    if (this_present_maxInvolRevokeLimitNum || that_present_maxInvolRevokeLimitNum) {
      if (!(this_present_maxInvolRevokeLimitNum && that_present_maxInvolRevokeLimitNum))
        return false;
      if (this.maxInvolRevokeLimitNum != that.maxInvolRevokeLimitNum)
        return false;
    }

    boolean this_present_defaultInvolRevokeLimitNum = true && this.isSetDefaultInvolRevokeLimitNum();
    boolean that_present_defaultInvolRevokeLimitNum = true && that.isSetDefaultInvolRevokeLimitNum();
    if (this_present_defaultInvolRevokeLimitNum || that_present_defaultInvolRevokeLimitNum) {
      if (!(this_present_defaultInvolRevokeLimitNum && that_present_defaultInvolRevokeLimitNum))
        return false;
      if (this.defaultInvolRevokeLimitNum != that.defaultInvolRevokeLimitNum)
        return false;
    }

    boolean this_present_defaultQuantityRatio = true && this.isSetDefaultQuantityRatio();
    boolean that_present_defaultQuantityRatio = true && that.isSetDefaultQuantityRatio();
    if (this_present_defaultQuantityRatio || that_present_defaultQuantityRatio) {
      if (!(this_present_defaultQuantityRatio && that_present_defaultQuantityRatio))
        return false;
      if (this.defaultQuantityRatio != that.defaultQuantityRatio)
        return false;
    }

    boolean this_present_minQuantityRatio = true && this.isSetMinQuantityRatio();
    boolean that_present_minQuantityRatio = true && that.isSetMinQuantityRatio();
    if (this_present_minQuantityRatio || that_present_minQuantityRatio) {
      if (!(this_present_minQuantityRatio && that_present_minQuantityRatio))
        return false;
      if (this.minQuantityRatio != that.minQuantityRatio)
        return false;
    }

    boolean this_present_defaultPriceProtectRatio = true && this.isSetDefaultPriceProtectRatio();
    boolean that_present_defaultPriceProtectRatio = true && that.isSetDefaultPriceProtectRatio();
    if (this_present_defaultPriceProtectRatio || that_present_defaultPriceProtectRatio) {
      if (!(this_present_defaultPriceProtectRatio && that_present_defaultPriceProtectRatio))
        return false;
      if (this.defaultPriceProtectRatio != that.defaultPriceProtectRatio)
        return false;
    }

    boolean this_present_maxPriceProtectRatio = true && this.isSetMaxPriceProtectRatio();
    boolean that_present_maxPriceProtectRatio = true && that.isSetMaxPriceProtectRatio();
    if (this_present_maxPriceProtectRatio || that_present_maxPriceProtectRatio) {
      if (!(this_present_maxPriceProtectRatio && that_present_maxPriceProtectRatio))
        return false;
      if (this.maxPriceProtectRatio != that.maxPriceProtectRatio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQComposeLimitOrderSettings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDefaultChaseTicks()).compareTo(other.isSetDefaultChaseTicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultChaseTicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultChaseTicks, other.defaultChaseTicks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxChaseTicks()).compareTo(other.isSetMaxChaseTicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxChaseTicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxChaseTicks, other.maxChaseTicks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxInvolRevokeLimitNum()).compareTo(other.isSetMaxInvolRevokeLimitNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxInvolRevokeLimitNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxInvolRevokeLimitNum, other.maxInvolRevokeLimitNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultInvolRevokeLimitNum()).compareTo(other.isSetDefaultInvolRevokeLimitNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultInvolRevokeLimitNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultInvolRevokeLimitNum, other.defaultInvolRevokeLimitNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultQuantityRatio()).compareTo(other.isSetDefaultQuantityRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultQuantityRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultQuantityRatio, other.defaultQuantityRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMinQuantityRatio()).compareTo(other.isSetMinQuantityRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinQuantityRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minQuantityRatio, other.minQuantityRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultPriceProtectRatio()).compareTo(other.isSetDefaultPriceProtectRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPriceProtectRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPriceProtectRatio, other.defaultPriceProtectRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxPriceProtectRatio()).compareTo(other.isSetMaxPriceProtectRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxPriceProtectRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxPriceProtectRatio, other.maxPriceProtectRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderSettings(");
    boolean first = true;

    if (isSetDefaultChaseTicks()) {
      sb.append("defaultChaseTicks:");
      sb.append(this.defaultChaseTicks);
      first = false;
    }
    if (isSetMaxChaseTicks()) {
      if (!first) sb.append(", ");
      sb.append("maxChaseTicks:");
      sb.append(this.maxChaseTicks);
      first = false;
    }
    if (isSetMaxInvolRevokeLimitNum()) {
      if (!first) sb.append(", ");
      sb.append("maxInvolRevokeLimitNum:");
      sb.append(this.maxInvolRevokeLimitNum);
      first = false;
    }
    if (isSetDefaultInvolRevokeLimitNum()) {
      if (!first) sb.append(", ");
      sb.append("defaultInvolRevokeLimitNum:");
      sb.append(this.defaultInvolRevokeLimitNum);
      first = false;
    }
    if (isSetDefaultQuantityRatio()) {
      if (!first) sb.append(", ");
      sb.append("defaultQuantityRatio:");
      sb.append(this.defaultQuantityRatio);
      first = false;
    }
    if (isSetMinQuantityRatio()) {
      if (!first) sb.append(", ");
      sb.append("minQuantityRatio:");
      sb.append(this.minQuantityRatio);
      first = false;
    }
    if (isSetDefaultPriceProtectRatio()) {
      if (!first) sb.append(", ");
      sb.append("defaultPriceProtectRatio:");
      sb.append(this.defaultPriceProtectRatio);
      first = false;
    }
    if (isSetMaxPriceProtectRatio()) {
      if (!first) sb.append(", ");
      sb.append("maxPriceProtectRatio:");
      sb.append(this.maxPriceProtectRatio);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQComposeLimitOrderSettingsStandardSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderSettingsStandardScheme getScheme() {
      return new HostingXQComposeLimitOrderSettingsStandardScheme();
    }
  }

  private static class HostingXQComposeLimitOrderSettingsStandardScheme extends StandardScheme<HostingXQComposeLimitOrderSettings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQComposeLimitOrderSettings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEFAULT_CHASE_TICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defaultChaseTicks = iprot.readI32();
              struct.setDefaultChaseTicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MAX_CHASE_TICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxChaseTicks = iprot.readI32();
              struct.setMaxChaseTicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_INVOL_REVOKE_LIMIT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxInvolRevokeLimitNum = iprot.readI32();
              struct.setMaxInvolRevokeLimitNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEFAULT_INVOL_REVOKE_LIMIT_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.defaultInvolRevokeLimitNum = iprot.readI32();
              struct.setDefaultInvolRevokeLimitNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEFAULT_QUANTITY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultQuantityRatio = iprot.readDouble();
              struct.setDefaultQuantityRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MIN_QUANTITY_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minQuantityRatio = iprot.readDouble();
              struct.setMinQuantityRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEFAULT_PRICE_PROTECT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.defaultPriceProtectRatio = iprot.readDouble();
              struct.setDefaultPriceProtectRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MAX_PRICE_PROTECT_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.maxPriceProtectRatio = iprot.readDouble();
              struct.setMaxPriceProtectRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQComposeLimitOrderSettings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDefaultChaseTicks()) {
        oprot.writeFieldBegin(DEFAULT_CHASE_TICKS_FIELD_DESC);
        oprot.writeI32(struct.defaultChaseTicks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxChaseTicks()) {
        oprot.writeFieldBegin(MAX_CHASE_TICKS_FIELD_DESC);
        oprot.writeI32(struct.maxChaseTicks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxInvolRevokeLimitNum()) {
        oprot.writeFieldBegin(MAX_INVOL_REVOKE_LIMIT_NUM_FIELD_DESC);
        oprot.writeI32(struct.maxInvolRevokeLimitNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultInvolRevokeLimitNum()) {
        oprot.writeFieldBegin(DEFAULT_INVOL_REVOKE_LIMIT_NUM_FIELD_DESC);
        oprot.writeI32(struct.defaultInvolRevokeLimitNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultQuantityRatio()) {
        oprot.writeFieldBegin(DEFAULT_QUANTITY_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.defaultQuantityRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMinQuantityRatio()) {
        oprot.writeFieldBegin(MIN_QUANTITY_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.minQuantityRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDefaultPriceProtectRatio()) {
        oprot.writeFieldBegin(DEFAULT_PRICE_PROTECT_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.defaultPriceProtectRatio);
        oprot.writeFieldEnd();
      }
      if (struct.isSetMaxPriceProtectRatio()) {
        oprot.writeFieldBegin(MAX_PRICE_PROTECT_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.maxPriceProtectRatio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQComposeLimitOrderSettingsTupleSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderSettingsTupleScheme getScheme() {
      return new HostingXQComposeLimitOrderSettingsTupleScheme();
    }
  }

  private static class HostingXQComposeLimitOrderSettingsTupleScheme extends TupleScheme<HostingXQComposeLimitOrderSettings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDefaultChaseTicks()) {
        optionals.set(0);
      }
      if (struct.isSetMaxChaseTicks()) {
        optionals.set(1);
      }
      if (struct.isSetMaxInvolRevokeLimitNum()) {
        optionals.set(2);
      }
      if (struct.isSetDefaultInvolRevokeLimitNum()) {
        optionals.set(3);
      }
      if (struct.isSetDefaultQuantityRatio()) {
        optionals.set(4);
      }
      if (struct.isSetMinQuantityRatio()) {
        optionals.set(5);
      }
      if (struct.isSetDefaultPriceProtectRatio()) {
        optionals.set(6);
      }
      if (struct.isSetMaxPriceProtectRatio()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDefaultChaseTicks()) {
        oprot.writeI32(struct.defaultChaseTicks);
      }
      if (struct.isSetMaxChaseTicks()) {
        oprot.writeI32(struct.maxChaseTicks);
      }
      if (struct.isSetMaxInvolRevokeLimitNum()) {
        oprot.writeI32(struct.maxInvolRevokeLimitNum);
      }
      if (struct.isSetDefaultInvolRevokeLimitNum()) {
        oprot.writeI32(struct.defaultInvolRevokeLimitNum);
      }
      if (struct.isSetDefaultQuantityRatio()) {
        oprot.writeDouble(struct.defaultQuantityRatio);
      }
      if (struct.isSetMinQuantityRatio()) {
        oprot.writeDouble(struct.minQuantityRatio);
      }
      if (struct.isSetDefaultPriceProtectRatio()) {
        oprot.writeDouble(struct.defaultPriceProtectRatio);
      }
      if (struct.isSetMaxPriceProtectRatio()) {
        oprot.writeDouble(struct.maxPriceProtectRatio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderSettings struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.defaultChaseTicks = iprot.readI32();
        struct.setDefaultChaseTicksIsSet(true);
      }
      if (incoming.get(1)) {
        struct.maxChaseTicks = iprot.readI32();
        struct.setMaxChaseTicksIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxInvolRevokeLimitNum = iprot.readI32();
        struct.setMaxInvolRevokeLimitNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.defaultInvolRevokeLimitNum = iprot.readI32();
        struct.setDefaultInvolRevokeLimitNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.defaultQuantityRatio = iprot.readDouble();
        struct.setDefaultQuantityRatioIsSet(true);
      }
      if (incoming.get(5)) {
        struct.minQuantityRatio = iprot.readDouble();
        struct.setMinQuantityRatioIsSet(true);
      }
      if (incoming.get(6)) {
        struct.defaultPriceProtectRatio = iprot.readDouble();
        struct.setDefaultPriceProtectRatioIsSet(true);
      }
      if (incoming.get(7)) {
        struct.maxPriceProtectRatio = iprot.readDouble();
        struct.setMaxPriceProtectRatioIsSet(true);
      }
    }
  }

}

