/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQOrderState implements org.apache.thrift.TBase<HostingXQOrderState, HostingXQOrderState._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQOrderState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQOrderState");

  private static final org.apache.thrift.protocol.TField STATE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("stateValue", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("stateTimestampMs", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SUSPEND_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("suspendReason", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SUSPENDED_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("suspendedErrorCode", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CANCELLED_ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("cancelledErrorCode", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STATE_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("stateMsg", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField EXEC_USEFUL_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("execUsefulMsg", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField EFFECT_INDEX_CLEANED_FIELD_DESC = new org.apache.thrift.protocol.TField("effectIndexCleaned", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField RESUME_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("resumeMode", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQOrderStateStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQOrderStateTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQOrderStateValue
   */
  public HostingXQOrderStateValue stateValue; // optional
  public long stateTimestampMs; // optional
  /**
   * 
   * @see HostingXQSuspendReason
   */
  public HostingXQSuspendReason suspendReason; // optional
  public int suspendedErrorCode; // optional
  public int cancelledErrorCode; // optional
  public String stateMsg; // optional
  public String execUsefulMsg; // optional
  public boolean effectIndexCleaned; // optional
  /**
   * 
   * @see HostingXQOrderResumeMode
   */
  public HostingXQOrderResumeMode resumeMode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQOrderStateValue
     */
    STATE_VALUE((short)1, "stateValue"),
    STATE_TIMESTAMP_MS((short)2, "stateTimestampMs"),
    /**
     * 
     * @see HostingXQSuspendReason
     */
    SUSPEND_REASON((short)3, "suspendReason"),
    SUSPENDED_ERROR_CODE((short)5, "suspendedErrorCode"),
    CANCELLED_ERROR_CODE((short)6, "cancelledErrorCode"),
    STATE_MSG((short)7, "stateMsg"),
    EXEC_USEFUL_MSG((short)8, "execUsefulMsg"),
    EFFECT_INDEX_CLEANED((short)9, "effectIndexCleaned"),
    /**
     * 
     * @see HostingXQOrderResumeMode
     */
    RESUME_MODE((short)10, "resumeMode");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE_VALUE
          return STATE_VALUE;
        case 2: // STATE_TIMESTAMP_MS
          return STATE_TIMESTAMP_MS;
        case 3: // SUSPEND_REASON
          return SUSPEND_REASON;
        case 5: // SUSPENDED_ERROR_CODE
          return SUSPENDED_ERROR_CODE;
        case 6: // CANCELLED_ERROR_CODE
          return CANCELLED_ERROR_CODE;
        case 7: // STATE_MSG
          return STATE_MSG;
        case 8: // EXEC_USEFUL_MSG
          return EXEC_USEFUL_MSG;
        case 9: // EFFECT_INDEX_CLEANED
          return EFFECT_INDEX_CLEANED;
        case 10: // RESUME_MODE
          return RESUME_MODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATETIMESTAMPMS_ISSET_ID = 0;
  private static final int __SUSPENDEDERRORCODE_ISSET_ID = 1;
  private static final int __CANCELLEDERRORCODE_ISSET_ID = 2;
  private static final int __EFFECTINDEXCLEANED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.STATE_VALUE,_Fields.STATE_TIMESTAMP_MS,_Fields.SUSPEND_REASON,_Fields.SUSPENDED_ERROR_CODE,_Fields.CANCELLED_ERROR_CODE,_Fields.STATE_MSG,_Fields.EXEC_USEFUL_MSG,_Fields.EFFECT_INDEX_CLEANED,_Fields.RESUME_MODE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("stateValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQOrderStateValue.class)));
    tmpMap.put(_Fields.STATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("stateTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUSPEND_REASON, new org.apache.thrift.meta_data.FieldMetaData("suspendReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQSuspendReason.class)));
    tmpMap.put(_Fields.SUSPENDED_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("suspendedErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CANCELLED_ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("cancelledErrorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE_MSG, new org.apache.thrift.meta_data.FieldMetaData("stateMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXEC_USEFUL_MSG, new org.apache.thrift.meta_data.FieldMetaData("execUsefulMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EFFECT_INDEX_CLEANED, new org.apache.thrift.meta_data.FieldMetaData("effectIndexCleaned", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.RESUME_MODE, new org.apache.thrift.meta_data.FieldMetaData("resumeMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQOrderResumeMode.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQOrderState.class, metaDataMap);
  }

  public HostingXQOrderState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQOrderState(HostingXQOrderState other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStateValue()) {
      this.stateValue = other.stateValue;
    }
    this.stateTimestampMs = other.stateTimestampMs;
    if (other.isSetSuspendReason()) {
      this.suspendReason = other.suspendReason;
    }
    this.suspendedErrorCode = other.suspendedErrorCode;
    this.cancelledErrorCode = other.cancelledErrorCode;
    if (other.isSetStateMsg()) {
      this.stateMsg = other.stateMsg;
    }
    if (other.isSetExecUsefulMsg()) {
      this.execUsefulMsg = other.execUsefulMsg;
    }
    this.effectIndexCleaned = other.effectIndexCleaned;
    if (other.isSetResumeMode()) {
      this.resumeMode = other.resumeMode;
    }
  }

  public HostingXQOrderState deepCopy() {
    return new HostingXQOrderState(this);
  }

  @Override
  public void clear() {
    this.stateValue = null;
    setStateTimestampMsIsSet(false);
    this.stateTimestampMs = 0;
    this.suspendReason = null;
    setSuspendedErrorCodeIsSet(false);
    this.suspendedErrorCode = 0;
    setCancelledErrorCodeIsSet(false);
    this.cancelledErrorCode = 0;
    this.stateMsg = null;
    this.execUsefulMsg = null;
    setEffectIndexCleanedIsSet(false);
    this.effectIndexCleaned = false;
    this.resumeMode = null;
  }

  /**
   * 
   * @see HostingXQOrderStateValue
   */
  public HostingXQOrderStateValue getStateValue() {
    return this.stateValue;
  }

  /**
   * 
   * @see HostingXQOrderStateValue
   */
  public HostingXQOrderState setStateValue(HostingXQOrderStateValue stateValue) {
    this.stateValue = stateValue;
    return this;
  }

  public void unsetStateValue() {
    this.stateValue = null;
  }

  /** Returns true if field stateValue is set (has been assigned a value) and false otherwise */
  public boolean isSetStateValue() {
    return this.stateValue != null;
  }

  public void setStateValueIsSet(boolean value) {
    if (!value) {
      this.stateValue = null;
    }
  }

  public long getStateTimestampMs() {
    return this.stateTimestampMs;
  }

  public HostingXQOrderState setStateTimestampMs(long stateTimestampMs) {
    this.stateTimestampMs = stateTimestampMs;
    setStateTimestampMsIsSet(true);
    return this;
  }

  public void unsetStateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field stateTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetStateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __STATETIMESTAMPMS_ISSET_ID);
  }

  public void setStateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATETIMESTAMPMS_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingXQSuspendReason
   */
  public HostingXQSuspendReason getSuspendReason() {
    return this.suspendReason;
  }

  /**
   * 
   * @see HostingXQSuspendReason
   */
  public HostingXQOrderState setSuspendReason(HostingXQSuspendReason suspendReason) {
    this.suspendReason = suspendReason;
    return this;
  }

  public void unsetSuspendReason() {
    this.suspendReason = null;
  }

  /** Returns true if field suspendReason is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspendReason() {
    return this.suspendReason != null;
  }

  public void setSuspendReasonIsSet(boolean value) {
    if (!value) {
      this.suspendReason = null;
    }
  }

  public int getSuspendedErrorCode() {
    return this.suspendedErrorCode;
  }

  public HostingXQOrderState setSuspendedErrorCode(int suspendedErrorCode) {
    this.suspendedErrorCode = suspendedErrorCode;
    setSuspendedErrorCodeIsSet(true);
    return this;
  }

  public void unsetSuspendedErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUSPENDEDERRORCODE_ISSET_ID);
  }

  /** Returns true if field suspendedErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetSuspendedErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __SUSPENDEDERRORCODE_ISSET_ID);
  }

  public void setSuspendedErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUSPENDEDERRORCODE_ISSET_ID, value);
  }

  public int getCancelledErrorCode() {
    return this.cancelledErrorCode;
  }

  public HostingXQOrderState setCancelledErrorCode(int cancelledErrorCode) {
    this.cancelledErrorCode = cancelledErrorCode;
    setCancelledErrorCodeIsSet(true);
    return this;
  }

  public void unsetCancelledErrorCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CANCELLEDERRORCODE_ISSET_ID);
  }

  /** Returns true if field cancelledErrorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelledErrorCode() {
    return EncodingUtils.testBit(__isset_bitfield, __CANCELLEDERRORCODE_ISSET_ID);
  }

  public void setCancelledErrorCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CANCELLEDERRORCODE_ISSET_ID, value);
  }

  public String getStateMsg() {
    return this.stateMsg;
  }

  public HostingXQOrderState setStateMsg(String stateMsg) {
    this.stateMsg = stateMsg;
    return this;
  }

  public void unsetStateMsg() {
    this.stateMsg = null;
  }

  /** Returns true if field stateMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetStateMsg() {
    return this.stateMsg != null;
  }

  public void setStateMsgIsSet(boolean value) {
    if (!value) {
      this.stateMsg = null;
    }
  }

  public String getExecUsefulMsg() {
    return this.execUsefulMsg;
  }

  public HostingXQOrderState setExecUsefulMsg(String execUsefulMsg) {
    this.execUsefulMsg = execUsefulMsg;
    return this;
  }

  public void unsetExecUsefulMsg() {
    this.execUsefulMsg = null;
  }

  /** Returns true if field execUsefulMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetExecUsefulMsg() {
    return this.execUsefulMsg != null;
  }

  public void setExecUsefulMsgIsSet(boolean value) {
    if (!value) {
      this.execUsefulMsg = null;
    }
  }

  public boolean isEffectIndexCleaned() {
    return this.effectIndexCleaned;
  }

  public HostingXQOrderState setEffectIndexCleaned(boolean effectIndexCleaned) {
    this.effectIndexCleaned = effectIndexCleaned;
    setEffectIndexCleanedIsSet(true);
    return this;
  }

  public void unsetEffectIndexCleaned() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EFFECTINDEXCLEANED_ISSET_ID);
  }

  /** Returns true if field effectIndexCleaned is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectIndexCleaned() {
    return EncodingUtils.testBit(__isset_bitfield, __EFFECTINDEXCLEANED_ISSET_ID);
  }

  public void setEffectIndexCleanedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EFFECTINDEXCLEANED_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingXQOrderResumeMode
   */
  public HostingXQOrderResumeMode getResumeMode() {
    return this.resumeMode;
  }

  /**
   * 
   * @see HostingXQOrderResumeMode
   */
  public HostingXQOrderState setResumeMode(HostingXQOrderResumeMode resumeMode) {
    this.resumeMode = resumeMode;
    return this;
  }

  public void unsetResumeMode() {
    this.resumeMode = null;
  }

  /** Returns true if field resumeMode is set (has been assigned a value) and false otherwise */
  public boolean isSetResumeMode() {
    return this.resumeMode != null;
  }

  public void setResumeModeIsSet(boolean value) {
    if (!value) {
      this.resumeMode = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STATE_VALUE:
      if (value == null) {
        unsetStateValue();
      } else {
        setStateValue((HostingXQOrderStateValue)value);
      }
      break;

    case STATE_TIMESTAMP_MS:
      if (value == null) {
        unsetStateTimestampMs();
      } else {
        setStateTimestampMs((Long)value);
      }
      break;

    case SUSPEND_REASON:
      if (value == null) {
        unsetSuspendReason();
      } else {
        setSuspendReason((HostingXQSuspendReason)value);
      }
      break;

    case SUSPENDED_ERROR_CODE:
      if (value == null) {
        unsetSuspendedErrorCode();
      } else {
        setSuspendedErrorCode((Integer)value);
      }
      break;

    case CANCELLED_ERROR_CODE:
      if (value == null) {
        unsetCancelledErrorCode();
      } else {
        setCancelledErrorCode((Integer)value);
      }
      break;

    case STATE_MSG:
      if (value == null) {
        unsetStateMsg();
      } else {
        setStateMsg((String)value);
      }
      break;

    case EXEC_USEFUL_MSG:
      if (value == null) {
        unsetExecUsefulMsg();
      } else {
        setExecUsefulMsg((String)value);
      }
      break;

    case EFFECT_INDEX_CLEANED:
      if (value == null) {
        unsetEffectIndexCleaned();
      } else {
        setEffectIndexCleaned((Boolean)value);
      }
      break;

    case RESUME_MODE:
      if (value == null) {
        unsetResumeMode();
      } else {
        setResumeMode((HostingXQOrderResumeMode)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE_VALUE:
      return getStateValue();

    case STATE_TIMESTAMP_MS:
      return Long.valueOf(getStateTimestampMs());

    case SUSPEND_REASON:
      return getSuspendReason();

    case SUSPENDED_ERROR_CODE:
      return Integer.valueOf(getSuspendedErrorCode());

    case CANCELLED_ERROR_CODE:
      return Integer.valueOf(getCancelledErrorCode());

    case STATE_MSG:
      return getStateMsg();

    case EXEC_USEFUL_MSG:
      return getExecUsefulMsg();

    case EFFECT_INDEX_CLEANED:
      return Boolean.valueOf(isEffectIndexCleaned());

    case RESUME_MODE:
      return getResumeMode();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STATE_VALUE:
      return isSetStateValue();
    case STATE_TIMESTAMP_MS:
      return isSetStateTimestampMs();
    case SUSPEND_REASON:
      return isSetSuspendReason();
    case SUSPENDED_ERROR_CODE:
      return isSetSuspendedErrorCode();
    case CANCELLED_ERROR_CODE:
      return isSetCancelledErrorCode();
    case STATE_MSG:
      return isSetStateMsg();
    case EXEC_USEFUL_MSG:
      return isSetExecUsefulMsg();
    case EFFECT_INDEX_CLEANED:
      return isSetEffectIndexCleaned();
    case RESUME_MODE:
      return isSetResumeMode();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQOrderState)
      return this.equals((HostingXQOrderState)that);
    return false;
  }

  public boolean equals(HostingXQOrderState that) {
    if (that == null)
      return false;

    boolean this_present_stateValue = true && this.isSetStateValue();
    boolean that_present_stateValue = true && that.isSetStateValue();
    if (this_present_stateValue || that_present_stateValue) {
      if (!(this_present_stateValue && that_present_stateValue))
        return false;
      if (!this.stateValue.equals(that.stateValue))
        return false;
    }

    boolean this_present_stateTimestampMs = true && this.isSetStateTimestampMs();
    boolean that_present_stateTimestampMs = true && that.isSetStateTimestampMs();
    if (this_present_stateTimestampMs || that_present_stateTimestampMs) {
      if (!(this_present_stateTimestampMs && that_present_stateTimestampMs))
        return false;
      if (this.stateTimestampMs != that.stateTimestampMs)
        return false;
    }

    boolean this_present_suspendReason = true && this.isSetSuspendReason();
    boolean that_present_suspendReason = true && that.isSetSuspendReason();
    if (this_present_suspendReason || that_present_suspendReason) {
      if (!(this_present_suspendReason && that_present_suspendReason))
        return false;
      if (!this.suspendReason.equals(that.suspendReason))
        return false;
    }

    boolean this_present_suspendedErrorCode = true && this.isSetSuspendedErrorCode();
    boolean that_present_suspendedErrorCode = true && that.isSetSuspendedErrorCode();
    if (this_present_suspendedErrorCode || that_present_suspendedErrorCode) {
      if (!(this_present_suspendedErrorCode && that_present_suspendedErrorCode))
        return false;
      if (this.suspendedErrorCode != that.suspendedErrorCode)
        return false;
    }

    boolean this_present_cancelledErrorCode = true && this.isSetCancelledErrorCode();
    boolean that_present_cancelledErrorCode = true && that.isSetCancelledErrorCode();
    if (this_present_cancelledErrorCode || that_present_cancelledErrorCode) {
      if (!(this_present_cancelledErrorCode && that_present_cancelledErrorCode))
        return false;
      if (this.cancelledErrorCode != that.cancelledErrorCode)
        return false;
    }

    boolean this_present_stateMsg = true && this.isSetStateMsg();
    boolean that_present_stateMsg = true && that.isSetStateMsg();
    if (this_present_stateMsg || that_present_stateMsg) {
      if (!(this_present_stateMsg && that_present_stateMsg))
        return false;
      if (!this.stateMsg.equals(that.stateMsg))
        return false;
    }

    boolean this_present_execUsefulMsg = true && this.isSetExecUsefulMsg();
    boolean that_present_execUsefulMsg = true && that.isSetExecUsefulMsg();
    if (this_present_execUsefulMsg || that_present_execUsefulMsg) {
      if (!(this_present_execUsefulMsg && that_present_execUsefulMsg))
        return false;
      if (!this.execUsefulMsg.equals(that.execUsefulMsg))
        return false;
    }

    boolean this_present_effectIndexCleaned = true && this.isSetEffectIndexCleaned();
    boolean that_present_effectIndexCleaned = true && that.isSetEffectIndexCleaned();
    if (this_present_effectIndexCleaned || that_present_effectIndexCleaned) {
      if (!(this_present_effectIndexCleaned && that_present_effectIndexCleaned))
        return false;
      if (this.effectIndexCleaned != that.effectIndexCleaned)
        return false;
    }

    boolean this_present_resumeMode = true && this.isSetResumeMode();
    boolean that_present_resumeMode = true && that.isSetResumeMode();
    if (this_present_resumeMode || that_present_resumeMode) {
      if (!(this_present_resumeMode && that_present_resumeMode))
        return false;
      if (!this.resumeMode.equals(that.resumeMode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQOrderState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStateValue()).compareTo(other.isSetStateValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateValue, other.stateValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateTimestampMs()).compareTo(other.isSetStateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateTimestampMs, other.stateTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspendReason()).compareTo(other.isSetSuspendReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspendReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspendReason, other.suspendReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuspendedErrorCode()).compareTo(other.isSetSuspendedErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuspendedErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suspendedErrorCode, other.suspendedErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCancelledErrorCode()).compareTo(other.isSetCancelledErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelledErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cancelledErrorCode, other.cancelledErrorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStateMsg()).compareTo(other.isSetStateMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateMsg, other.stateMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecUsefulMsg()).compareTo(other.isSetExecUsefulMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecUsefulMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execUsefulMsg, other.execUsefulMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectIndexCleaned()).compareTo(other.isSetEffectIndexCleaned());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectIndexCleaned()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectIndexCleaned, other.effectIndexCleaned);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResumeMode()).compareTo(other.isSetResumeMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResumeMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resumeMode, other.resumeMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQOrderState(");
    boolean first = true;

    if (isSetStateValue()) {
      sb.append("stateValue:");
      if (this.stateValue == null) {
        sb.append("null");
      } else {
        sb.append(this.stateValue);
      }
      first = false;
    }
    if (isSetStateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("stateTimestampMs:");
      sb.append(this.stateTimestampMs);
      first = false;
    }
    if (isSetSuspendReason()) {
      if (!first) sb.append(", ");
      sb.append("suspendReason:");
      if (this.suspendReason == null) {
        sb.append("null");
      } else {
        sb.append(this.suspendReason);
      }
      first = false;
    }
    if (isSetSuspendedErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("suspendedErrorCode:");
      sb.append(this.suspendedErrorCode);
      first = false;
    }
    if (isSetCancelledErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("cancelledErrorCode:");
      sb.append(this.cancelledErrorCode);
      first = false;
    }
    if (isSetStateMsg()) {
      if (!first) sb.append(", ");
      sb.append("stateMsg:");
      if (this.stateMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.stateMsg);
      }
      first = false;
    }
    if (isSetExecUsefulMsg()) {
      if (!first) sb.append(", ");
      sb.append("execUsefulMsg:");
      if (this.execUsefulMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.execUsefulMsg);
      }
      first = false;
    }
    if (isSetEffectIndexCleaned()) {
      if (!first) sb.append(", ");
      sb.append("effectIndexCleaned:");
      sb.append(this.effectIndexCleaned);
      first = false;
    }
    if (isSetResumeMode()) {
      if (!first) sb.append(", ");
      sb.append("resumeMode:");
      if (this.resumeMode == null) {
        sb.append("null");
      } else {
        sb.append(this.resumeMode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQOrderStateStandardSchemeFactory implements SchemeFactory {
    public HostingXQOrderStateStandardScheme getScheme() {
      return new HostingXQOrderStateStandardScheme();
    }
  }

  private static class HostingXQOrderStateStandardScheme extends StandardScheme<HostingXQOrderState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQOrderState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stateValue = HostingXQOrderStateValue.findByValue(iprot.readI32());
              struct.setStateValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.stateTimestampMs = iprot.readI64();
              struct.setStateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUSPEND_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suspendReason = HostingXQSuspendReason.findByValue(iprot.readI32());
              struct.setSuspendReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SUSPENDED_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.suspendedErrorCode = iprot.readI32();
              struct.setSuspendedErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CANCELLED_ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cancelledErrorCode = iprot.readI32();
              struct.setCancelledErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STATE_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stateMsg = iprot.readString();
              struct.setStateMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXEC_USEFUL_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.execUsefulMsg = iprot.readString();
              struct.setExecUsefulMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EFFECT_INDEX_CLEANED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.effectIndexCleaned = iprot.readBool();
              struct.setEffectIndexCleanedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // RESUME_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resumeMode = HostingXQOrderResumeMode.findByValue(iprot.readI32());
              struct.setResumeModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQOrderState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.stateValue != null) {
        if (struct.isSetStateValue()) {
          oprot.writeFieldBegin(STATE_VALUE_FIELD_DESC);
          oprot.writeI32(struct.stateValue.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStateTimestampMs()) {
        oprot.writeFieldBegin(STATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.stateTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.suspendReason != null) {
        if (struct.isSetSuspendReason()) {
          oprot.writeFieldBegin(SUSPEND_REASON_FIELD_DESC);
          oprot.writeI32(struct.suspendReason.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSuspendedErrorCode()) {
        oprot.writeFieldBegin(SUSPENDED_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.suspendedErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCancelledErrorCode()) {
        oprot.writeFieldBegin(CANCELLED_ERROR_CODE_FIELD_DESC);
        oprot.writeI32(struct.cancelledErrorCode);
        oprot.writeFieldEnd();
      }
      if (struct.stateMsg != null) {
        if (struct.isSetStateMsg()) {
          oprot.writeFieldBegin(STATE_MSG_FIELD_DESC);
          oprot.writeString(struct.stateMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execUsefulMsg != null) {
        if (struct.isSetExecUsefulMsg()) {
          oprot.writeFieldBegin(EXEC_USEFUL_MSG_FIELD_DESC);
          oprot.writeString(struct.execUsefulMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEffectIndexCleaned()) {
        oprot.writeFieldBegin(EFFECT_INDEX_CLEANED_FIELD_DESC);
        oprot.writeBool(struct.effectIndexCleaned);
        oprot.writeFieldEnd();
      }
      if (struct.resumeMode != null) {
        if (struct.isSetResumeMode()) {
          oprot.writeFieldBegin(RESUME_MODE_FIELD_DESC);
          oprot.writeI32(struct.resumeMode.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQOrderStateTupleSchemeFactory implements SchemeFactory {
    public HostingXQOrderStateTupleScheme getScheme() {
      return new HostingXQOrderStateTupleScheme();
    }
  }

  private static class HostingXQOrderStateTupleScheme extends TupleScheme<HostingXQOrderState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderState struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStateValue()) {
        optionals.set(0);
      }
      if (struct.isSetStateTimestampMs()) {
        optionals.set(1);
      }
      if (struct.isSetSuspendReason()) {
        optionals.set(2);
      }
      if (struct.isSetSuspendedErrorCode()) {
        optionals.set(3);
      }
      if (struct.isSetCancelledErrorCode()) {
        optionals.set(4);
      }
      if (struct.isSetStateMsg()) {
        optionals.set(5);
      }
      if (struct.isSetExecUsefulMsg()) {
        optionals.set(6);
      }
      if (struct.isSetEffectIndexCleaned()) {
        optionals.set(7);
      }
      if (struct.isSetResumeMode()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetStateValue()) {
        oprot.writeI32(struct.stateValue.getValue());
      }
      if (struct.isSetStateTimestampMs()) {
        oprot.writeI64(struct.stateTimestampMs);
      }
      if (struct.isSetSuspendReason()) {
        oprot.writeI32(struct.suspendReason.getValue());
      }
      if (struct.isSetSuspendedErrorCode()) {
        oprot.writeI32(struct.suspendedErrorCode);
      }
      if (struct.isSetCancelledErrorCode()) {
        oprot.writeI32(struct.cancelledErrorCode);
      }
      if (struct.isSetStateMsg()) {
        oprot.writeString(struct.stateMsg);
      }
      if (struct.isSetExecUsefulMsg()) {
        oprot.writeString(struct.execUsefulMsg);
      }
      if (struct.isSetEffectIndexCleaned()) {
        oprot.writeBool(struct.effectIndexCleaned);
      }
      if (struct.isSetResumeMode()) {
        oprot.writeI32(struct.resumeMode.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderState struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.stateValue = HostingXQOrderStateValue.findByValue(iprot.readI32());
        struct.setStateValueIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stateTimestampMs = iprot.readI64();
        struct.setStateTimestampMsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.suspendReason = HostingXQSuspendReason.findByValue(iprot.readI32());
        struct.setSuspendReasonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.suspendedErrorCode = iprot.readI32();
        struct.setSuspendedErrorCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.cancelledErrorCode = iprot.readI32();
        struct.setCancelledErrorCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stateMsg = iprot.readString();
        struct.setStateMsgIsSet(true);
      }
      if (incoming.get(6)) {
        struct.execUsefulMsg = iprot.readString();
        struct.setExecUsefulMsgIsSet(true);
      }
      if (incoming.get(7)) {
        struct.effectIndexCleaned = iprot.readBool();
        struct.setEffectIndexCleanedIsSet(true);
      }
      if (incoming.get(8)) {
        struct.resumeMode = HostingXQOrderResumeMode.findByValue(iprot.readI32());
        struct.setResumeModeIsSet(true);
      }
    }
  }

}

