/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQTradeRelatedItem implements org.apache.thrift.TBase<HostingXQTradeRelatedItem, HostingXQTradeRelatedItem._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQTradeRelatedItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQTradeRelatedItem");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField EXEC_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrderId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_LEG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeLegId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_LEG_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeLegDirection", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_LEG_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeLegVolume", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField EXEC_TRADE_LEG_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("execTradeLegPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField RELATED_TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("relatedTradeVolume", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQTradeRelatedItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQTradeRelatedItemTupleSchemeFactory());
  }

  public String orderId; // optional
  public long tradeId; // optional
  public long execOrderId; // optional
  public long execTradeId; // optional
  public long execTradeLegId; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public xueqiao.trade.hosting.HostingExecTradeDirection execTradeLegDirection; // optional
  public int execTradeLegVolume; // optional
  public double execTradeLegPrice; // optional
  public int relatedTradeVolume; // optional
  public long sledContractId; // optional
  public long createTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    TRADE_ID((short)2, "tradeId"),
    EXEC_ORDER_ID((short)3, "execOrderId"),
    EXEC_TRADE_ID((short)4, "execTradeId"),
    EXEC_TRADE_LEG_ID((short)5, "execTradeLegId"),
    /**
     * 
     * @see xueqiao.trade.hosting.HostingExecTradeDirection
     */
    EXEC_TRADE_LEG_DIRECTION((short)6, "execTradeLegDirection"),
    EXEC_TRADE_LEG_VOLUME((short)7, "execTradeLegVolume"),
    EXEC_TRADE_LEG_PRICE((short)8, "execTradeLegPrice"),
    RELATED_TRADE_VOLUME((short)9, "relatedTradeVolume"),
    SLED_CONTRACT_ID((short)10, "sledContractId"),
    CREATE_TIMESTAMP_MS((short)11, "createTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // TRADE_ID
          return TRADE_ID;
        case 3: // EXEC_ORDER_ID
          return EXEC_ORDER_ID;
        case 4: // EXEC_TRADE_ID
          return EXEC_TRADE_ID;
        case 5: // EXEC_TRADE_LEG_ID
          return EXEC_TRADE_LEG_ID;
        case 6: // EXEC_TRADE_LEG_DIRECTION
          return EXEC_TRADE_LEG_DIRECTION;
        case 7: // EXEC_TRADE_LEG_VOLUME
          return EXEC_TRADE_LEG_VOLUME;
        case 8: // EXEC_TRADE_LEG_PRICE
          return EXEC_TRADE_LEG_PRICE;
        case 9: // RELATED_TRADE_VOLUME
          return RELATED_TRADE_VOLUME;
        case 10: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 11: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEID_ISSET_ID = 0;
  private static final int __EXECORDERID_ISSET_ID = 1;
  private static final int __EXECTRADEID_ISSET_ID = 2;
  private static final int __EXECTRADELEGID_ISSET_ID = 3;
  private static final int __EXECTRADELEGVOLUME_ISSET_ID = 4;
  private static final int __EXECTRADELEGPRICE_ISSET_ID = 5;
  private static final int __RELATEDTRADEVOLUME_ISSET_ID = 6;
  private static final int __SLEDCONTRACTID_ISSET_ID = 7;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.TRADE_ID,_Fields.EXEC_ORDER_ID,_Fields.EXEC_TRADE_ID,_Fields.EXEC_TRADE_LEG_ID,_Fields.EXEC_TRADE_LEG_DIRECTION,_Fields.EXEC_TRADE_LEG_VOLUME,_Fields.EXEC_TRADE_LEG_PRICE,_Fields.RELATED_TRADE_VOLUME,_Fields.SLED_CONTRACT_ID,_Fields.CREATE_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("execOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("execTradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_TRADE_LEG_ID, new org.apache.thrift.meta_data.FieldMetaData("execTradeLegId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXEC_TRADE_LEG_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("execTradeLegDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.HostingExecTradeDirection.class)));
    tmpMap.put(_Fields.EXEC_TRADE_LEG_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("execTradeLegVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXEC_TRADE_LEG_PRICE, new org.apache.thrift.meta_data.FieldMetaData("execTradeLegPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.RELATED_TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("relatedTradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQTradeRelatedItem.class, metaDataMap);
  }

  public HostingXQTradeRelatedItem() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQTradeRelatedItem(HostingXQTradeRelatedItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.tradeId = other.tradeId;
    this.execOrderId = other.execOrderId;
    this.execTradeId = other.execTradeId;
    this.execTradeLegId = other.execTradeLegId;
    if (other.isSetExecTradeLegDirection()) {
      this.execTradeLegDirection = other.execTradeLegDirection;
    }
    this.execTradeLegVolume = other.execTradeLegVolume;
    this.execTradeLegPrice = other.execTradeLegPrice;
    this.relatedTradeVolume = other.relatedTradeVolume;
    this.sledContractId = other.sledContractId;
    this.createTimestampMs = other.createTimestampMs;
  }

  public HostingXQTradeRelatedItem deepCopy() {
    return new HostingXQTradeRelatedItem(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setTradeIdIsSet(false);
    this.tradeId = 0;
    setExecOrderIdIsSet(false);
    this.execOrderId = 0;
    setExecTradeIdIsSet(false);
    this.execTradeId = 0;
    setExecTradeLegIdIsSet(false);
    this.execTradeLegId = 0;
    this.execTradeLegDirection = null;
    setExecTradeLegVolumeIsSet(false);
    this.execTradeLegVolume = 0;
    setExecTradeLegPriceIsSet(false);
    this.execTradeLegPrice = 0.0;
    setRelatedTradeVolumeIsSet(false);
    this.relatedTradeVolume = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public HostingXQTradeRelatedItem setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public long getTradeId() {
    return this.tradeId;
  }

  public HostingXQTradeRelatedItem setTradeId(long tradeId) {
    this.tradeId = tradeId;
    setTradeIdIsSet(true);
    return this;
  }

  public void unsetTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEID_ISSET_ID);
  }

  /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEID_ISSET_ID);
  }

  public void setTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEID_ISSET_ID, value);
  }

  public long getExecOrderId() {
    return this.execOrderId;
  }

  public HostingXQTradeRelatedItem setExecOrderId(long execOrderId) {
    this.execOrderId = execOrderId;
    setExecOrderIdIsSet(true);
    return this;
  }

  public void unsetExecOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  /** Returns true if field execOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECORDERID_ISSET_ID);
  }

  public void setExecOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECORDERID_ISSET_ID, value);
  }

  public long getExecTradeId() {
    return this.execTradeId;
  }

  public HostingXQTradeRelatedItem setExecTradeId(long execTradeId) {
    this.execTradeId = execTradeId;
    setExecTradeIdIsSet(true);
    return this;
  }

  public void unsetExecTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  /** Returns true if field execTradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADEID_ISSET_ID);
  }

  public void setExecTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADEID_ISSET_ID, value);
  }

  public long getExecTradeLegId() {
    return this.execTradeLegId;
  }

  public HostingXQTradeRelatedItem setExecTradeLegId(long execTradeLegId) {
    this.execTradeLegId = execTradeLegId;
    setExecTradeLegIdIsSet(true);
    return this;
  }

  public void unsetExecTradeLegId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID);
  }

  /** Returns true if field execTradeLegId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeLegId() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID);
  }

  public void setExecTradeLegIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADELEGID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public xueqiao.trade.hosting.HostingExecTradeDirection getExecTradeLegDirection() {
    return this.execTradeLegDirection;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.HostingExecTradeDirection
   */
  public HostingXQTradeRelatedItem setExecTradeLegDirection(xueqiao.trade.hosting.HostingExecTradeDirection execTradeLegDirection) {
    this.execTradeLegDirection = execTradeLegDirection;
    return this;
  }

  public void unsetExecTradeLegDirection() {
    this.execTradeLegDirection = null;
  }

  /** Returns true if field execTradeLegDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeLegDirection() {
    return this.execTradeLegDirection != null;
  }

  public void setExecTradeLegDirectionIsSet(boolean value) {
    if (!value) {
      this.execTradeLegDirection = null;
    }
  }

  public int getExecTradeLegVolume() {
    return this.execTradeLegVolume;
  }

  public HostingXQTradeRelatedItem setExecTradeLegVolume(int execTradeLegVolume) {
    this.execTradeLegVolume = execTradeLegVolume;
    setExecTradeLegVolumeIsSet(true);
    return this;
  }

  public void unsetExecTradeLegVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADELEGVOLUME_ISSET_ID);
  }

  /** Returns true if field execTradeLegVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeLegVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADELEGVOLUME_ISSET_ID);
  }

  public void setExecTradeLegVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADELEGVOLUME_ISSET_ID, value);
  }

  public double getExecTradeLegPrice() {
    return this.execTradeLegPrice;
  }

  public HostingXQTradeRelatedItem setExecTradeLegPrice(double execTradeLegPrice) {
    this.execTradeLegPrice = execTradeLegPrice;
    setExecTradeLegPriceIsSet(true);
    return this;
  }

  public void unsetExecTradeLegPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXECTRADELEGPRICE_ISSET_ID);
  }

  /** Returns true if field execTradeLegPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTradeLegPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __EXECTRADELEGPRICE_ISSET_ID);
  }

  public void setExecTradeLegPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXECTRADELEGPRICE_ISSET_ID, value);
  }

  public int getRelatedTradeVolume() {
    return this.relatedTradeVolume;
  }

  public HostingXQTradeRelatedItem setRelatedTradeVolume(int relatedTradeVolume) {
    this.relatedTradeVolume = relatedTradeVolume;
    setRelatedTradeVolumeIsSet(true);
    return this;
  }

  public void unsetRelatedTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RELATEDTRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field relatedTradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetRelatedTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __RELATEDTRADEVOLUME_ISSET_ID);
  }

  public void setRelatedTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RELATEDTRADEVOLUME_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public HostingXQTradeRelatedItem setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingXQTradeRelatedItem setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((Long)value);
      }
      break;

    case EXEC_ORDER_ID:
      if (value == null) {
        unsetExecOrderId();
      } else {
        setExecOrderId((Long)value);
      }
      break;

    case EXEC_TRADE_ID:
      if (value == null) {
        unsetExecTradeId();
      } else {
        setExecTradeId((Long)value);
      }
      break;

    case EXEC_TRADE_LEG_ID:
      if (value == null) {
        unsetExecTradeLegId();
      } else {
        setExecTradeLegId((Long)value);
      }
      break;

    case EXEC_TRADE_LEG_DIRECTION:
      if (value == null) {
        unsetExecTradeLegDirection();
      } else {
        setExecTradeLegDirection((xueqiao.trade.hosting.HostingExecTradeDirection)value);
      }
      break;

    case EXEC_TRADE_LEG_VOLUME:
      if (value == null) {
        unsetExecTradeLegVolume();
      } else {
        setExecTradeLegVolume((Integer)value);
      }
      break;

    case EXEC_TRADE_LEG_PRICE:
      if (value == null) {
        unsetExecTradeLegPrice();
      } else {
        setExecTradeLegPrice((Double)value);
      }
      break;

    case RELATED_TRADE_VOLUME:
      if (value == null) {
        unsetRelatedTradeVolume();
      } else {
        setRelatedTradeVolume((Integer)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case TRADE_ID:
      return Long.valueOf(getTradeId());

    case EXEC_ORDER_ID:
      return Long.valueOf(getExecOrderId());

    case EXEC_TRADE_ID:
      return Long.valueOf(getExecTradeId());

    case EXEC_TRADE_LEG_ID:
      return Long.valueOf(getExecTradeLegId());

    case EXEC_TRADE_LEG_DIRECTION:
      return getExecTradeLegDirection();

    case EXEC_TRADE_LEG_VOLUME:
      return Integer.valueOf(getExecTradeLegVolume());

    case EXEC_TRADE_LEG_PRICE:
      return Double.valueOf(getExecTradeLegPrice());

    case RELATED_TRADE_VOLUME:
      return Integer.valueOf(getRelatedTradeVolume());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case TRADE_ID:
      return isSetTradeId();
    case EXEC_ORDER_ID:
      return isSetExecOrderId();
    case EXEC_TRADE_ID:
      return isSetExecTradeId();
    case EXEC_TRADE_LEG_ID:
      return isSetExecTradeLegId();
    case EXEC_TRADE_LEG_DIRECTION:
      return isSetExecTradeLegDirection();
    case EXEC_TRADE_LEG_VOLUME:
      return isSetExecTradeLegVolume();
    case EXEC_TRADE_LEG_PRICE:
      return isSetExecTradeLegPrice();
    case RELATED_TRADE_VOLUME:
      return isSetRelatedTradeVolume();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQTradeRelatedItem)
      return this.equals((HostingXQTradeRelatedItem)that);
    return false;
  }

  public boolean equals(HostingXQTradeRelatedItem that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (this.tradeId != that.tradeId)
        return false;
    }

    boolean this_present_execOrderId = true && this.isSetExecOrderId();
    boolean that_present_execOrderId = true && that.isSetExecOrderId();
    if (this_present_execOrderId || that_present_execOrderId) {
      if (!(this_present_execOrderId && that_present_execOrderId))
        return false;
      if (this.execOrderId != that.execOrderId)
        return false;
    }

    boolean this_present_execTradeId = true && this.isSetExecTradeId();
    boolean that_present_execTradeId = true && that.isSetExecTradeId();
    if (this_present_execTradeId || that_present_execTradeId) {
      if (!(this_present_execTradeId && that_present_execTradeId))
        return false;
      if (this.execTradeId != that.execTradeId)
        return false;
    }

    boolean this_present_execTradeLegId = true && this.isSetExecTradeLegId();
    boolean that_present_execTradeLegId = true && that.isSetExecTradeLegId();
    if (this_present_execTradeLegId || that_present_execTradeLegId) {
      if (!(this_present_execTradeLegId && that_present_execTradeLegId))
        return false;
      if (this.execTradeLegId != that.execTradeLegId)
        return false;
    }

    boolean this_present_execTradeLegDirection = true && this.isSetExecTradeLegDirection();
    boolean that_present_execTradeLegDirection = true && that.isSetExecTradeLegDirection();
    if (this_present_execTradeLegDirection || that_present_execTradeLegDirection) {
      if (!(this_present_execTradeLegDirection && that_present_execTradeLegDirection))
        return false;
      if (!this.execTradeLegDirection.equals(that.execTradeLegDirection))
        return false;
    }

    boolean this_present_execTradeLegVolume = true && this.isSetExecTradeLegVolume();
    boolean that_present_execTradeLegVolume = true && that.isSetExecTradeLegVolume();
    if (this_present_execTradeLegVolume || that_present_execTradeLegVolume) {
      if (!(this_present_execTradeLegVolume && that_present_execTradeLegVolume))
        return false;
      if (this.execTradeLegVolume != that.execTradeLegVolume)
        return false;
    }

    boolean this_present_execTradeLegPrice = true && this.isSetExecTradeLegPrice();
    boolean that_present_execTradeLegPrice = true && that.isSetExecTradeLegPrice();
    if (this_present_execTradeLegPrice || that_present_execTradeLegPrice) {
      if (!(this_present_execTradeLegPrice && that_present_execTradeLegPrice))
        return false;
      if (this.execTradeLegPrice != that.execTradeLegPrice)
        return false;
    }

    boolean this_present_relatedTradeVolume = true && this.isSetRelatedTradeVolume();
    boolean that_present_relatedTradeVolume = true && that.isSetRelatedTradeVolume();
    if (this_present_relatedTradeVolume || that_present_relatedTradeVolume) {
      if (!(this_present_relatedTradeVolume && that_present_relatedTradeVolume))
        return false;
      if (this.relatedTradeVolume != that.relatedTradeVolume)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQTradeRelatedItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrderId()).compareTo(other.isSetExecOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrderId, other.execOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeId()).compareTo(other.isSetExecTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeId, other.execTradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeLegId()).compareTo(other.isSetExecTradeLegId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeLegId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeLegId, other.execTradeLegId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeLegDirection()).compareTo(other.isSetExecTradeLegDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeLegDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeLegDirection, other.execTradeLegDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeLegVolume()).compareTo(other.isSetExecTradeLegVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeLegVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeLegVolume, other.execTradeLegVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTradeLegPrice()).compareTo(other.isSetExecTradeLegPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTradeLegPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTradeLegPrice, other.execTradeLegPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRelatedTradeVolume()).compareTo(other.isSetRelatedTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelatedTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relatedTradeVolume, other.relatedTradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQTradeRelatedItem(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetTradeId()) {
      if (!first) sb.append(", ");
      sb.append("tradeId:");
      sb.append(this.tradeId);
      first = false;
    }
    if (isSetExecOrderId()) {
      if (!first) sb.append(", ");
      sb.append("execOrderId:");
      sb.append(this.execOrderId);
      first = false;
    }
    if (isSetExecTradeId()) {
      if (!first) sb.append(", ");
      sb.append("execTradeId:");
      sb.append(this.execTradeId);
      first = false;
    }
    if (isSetExecTradeLegId()) {
      if (!first) sb.append(", ");
      sb.append("execTradeLegId:");
      sb.append(this.execTradeLegId);
      first = false;
    }
    if (isSetExecTradeLegDirection()) {
      if (!first) sb.append(", ");
      sb.append("execTradeLegDirection:");
      if (this.execTradeLegDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.execTradeLegDirection);
      }
      first = false;
    }
    if (isSetExecTradeLegVolume()) {
      if (!first) sb.append(", ");
      sb.append("execTradeLegVolume:");
      sb.append(this.execTradeLegVolume);
      first = false;
    }
    if (isSetExecTradeLegPrice()) {
      if (!first) sb.append(", ");
      sb.append("execTradeLegPrice:");
      sb.append(this.execTradeLegPrice);
      first = false;
    }
    if (isSetRelatedTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("relatedTradeVolume:");
      sb.append(this.relatedTradeVolume);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQTradeRelatedItemStandardSchemeFactory implements SchemeFactory {
    public HostingXQTradeRelatedItemStandardScheme getScheme() {
      return new HostingXQTradeRelatedItemStandardScheme();
    }
  }

  private static class HostingXQTradeRelatedItemStandardScheme extends StandardScheme<HostingXQTradeRelatedItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQTradeRelatedItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeId = iprot.readI64();
              struct.setTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXEC_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execOrderId = iprot.readI64();
              struct.setExecOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXEC_TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTradeId = iprot.readI64();
              struct.setExecTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXEC_TRADE_LEG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.execTradeLegId = iprot.readI64();
              struct.setExecTradeLegIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXEC_TRADE_LEG_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execTradeLegDirection = xueqiao.trade.hosting.HostingExecTradeDirection.findByValue(iprot.readI32());
              struct.setExecTradeLegDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // EXEC_TRADE_LEG_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.execTradeLegVolume = iprot.readI32();
              struct.setExecTradeLegVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // EXEC_TRADE_LEG_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.execTradeLegPrice = iprot.readDouble();
              struct.setExecTradeLegPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RELATED_TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.relatedTradeVolume = iprot.readI32();
              struct.setRelatedTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQTradeRelatedItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeId()) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeFieldBegin(EXEC_ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.execOrderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecTradeId()) {
        oprot.writeFieldBegin(EXEC_TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.execTradeId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecTradeLegId()) {
        oprot.writeFieldBegin(EXEC_TRADE_LEG_ID_FIELD_DESC);
        oprot.writeI64(struct.execTradeLegId);
        oprot.writeFieldEnd();
      }
      if (struct.execTradeLegDirection != null) {
        if (struct.isSetExecTradeLegDirection()) {
          oprot.writeFieldBegin(EXEC_TRADE_LEG_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.execTradeLegDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExecTradeLegVolume()) {
        oprot.writeFieldBegin(EXEC_TRADE_LEG_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.execTradeLegVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExecTradeLegPrice()) {
        oprot.writeFieldBegin(EXEC_TRADE_LEG_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.execTradeLegPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetRelatedTradeVolume()) {
        oprot.writeFieldBegin(RELATED_TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.relatedTradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQTradeRelatedItemTupleSchemeFactory implements SchemeFactory {
    public HostingXQTradeRelatedItemTupleScheme getScheme() {
      return new HostingXQTradeRelatedItemTupleScheme();
    }
  }

  private static class HostingXQTradeRelatedItemTupleScheme extends TupleScheme<HostingXQTradeRelatedItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQTradeRelatedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetTradeId()) {
        optionals.set(1);
      }
      if (struct.isSetExecOrderId()) {
        optionals.set(2);
      }
      if (struct.isSetExecTradeId()) {
        optionals.set(3);
      }
      if (struct.isSetExecTradeLegId()) {
        optionals.set(4);
      }
      if (struct.isSetExecTradeLegDirection()) {
        optionals.set(5);
      }
      if (struct.isSetExecTradeLegVolume()) {
        optionals.set(6);
      }
      if (struct.isSetExecTradeLegPrice()) {
        optionals.set(7);
      }
      if (struct.isSetRelatedTradeVolume()) {
        optionals.set(8);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetTradeId()) {
        oprot.writeI64(struct.tradeId);
      }
      if (struct.isSetExecOrderId()) {
        oprot.writeI64(struct.execOrderId);
      }
      if (struct.isSetExecTradeId()) {
        oprot.writeI64(struct.execTradeId);
      }
      if (struct.isSetExecTradeLegId()) {
        oprot.writeI64(struct.execTradeLegId);
      }
      if (struct.isSetExecTradeLegDirection()) {
        oprot.writeI32(struct.execTradeLegDirection.getValue());
      }
      if (struct.isSetExecTradeLegVolume()) {
        oprot.writeI32(struct.execTradeLegVolume);
      }
      if (struct.isSetExecTradeLegPrice()) {
        oprot.writeDouble(struct.execTradeLegPrice);
      }
      if (struct.isSetRelatedTradeVolume()) {
        oprot.writeI32(struct.relatedTradeVolume);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQTradeRelatedItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeId = iprot.readI64();
        struct.setTradeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.execOrderId = iprot.readI64();
        struct.setExecOrderIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.execTradeId = iprot.readI64();
        struct.setExecTradeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.execTradeLegId = iprot.readI64();
        struct.setExecTradeLegIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.execTradeLegDirection = xueqiao.trade.hosting.HostingExecTradeDirection.findByValue(iprot.readI32());
        struct.setExecTradeLegDirectionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.execTradeLegVolume = iprot.readI32();
        struct.setExecTradeLegVolumeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.execTradeLegPrice = iprot.readDouble();
        struct.setExecTradeLegPriceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.relatedTradeVolume = iprot.readI32();
        struct.setRelatedTradeVolumeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
    }
  }

}

