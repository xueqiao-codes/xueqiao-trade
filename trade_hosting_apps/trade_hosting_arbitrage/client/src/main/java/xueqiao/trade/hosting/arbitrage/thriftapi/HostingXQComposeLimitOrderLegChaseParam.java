/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQComposeLimitOrderLegChaseParam implements org.apache.thrift.TBase<HostingXQComposeLimitOrderLegChaseParam, HostingXQComposeLimitOrderLegChaseParam._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQComposeLimitOrderLegChaseParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQComposeLimitOrderLegChaseParam");

  private static final org.apache.thrift.protocol.TField TICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticks", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("times", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PROTECT_PRICE_RATIO_FIELD_DESC = new org.apache.thrift.protocol.TField("protectPriceRatio", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQComposeLimitOrderLegChaseParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQComposeLimitOrderLegChaseParamTupleSchemeFactory());
  }

  public int ticks; // optional
  public int times; // optional
  public double protectPriceRatio; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TICKS((short)1, "ticks"),
    TIMES((short)2, "times"),
    PROTECT_PRICE_RATIO((short)3, "protectPriceRatio");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKS
          return TICKS;
        case 2: // TIMES
          return TIMES;
        case 3: // PROTECT_PRICE_RATIO
          return PROTECT_PRICE_RATIO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKS_ISSET_ID = 0;
  private static final int __TIMES_ISSET_ID = 1;
  private static final int __PROTECTPRICERATIO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TICKS,_Fields.TIMES,_Fields.PROTECT_PRICE_RATIO};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKS, new org.apache.thrift.meta_data.FieldMetaData("ticks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TIMES, new org.apache.thrift.meta_data.FieldMetaData("times", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.PROTECT_PRICE_RATIO, new org.apache.thrift.meta_data.FieldMetaData("protectPriceRatio", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQComposeLimitOrderLegChaseParam.class, metaDataMap);
  }

  public HostingXQComposeLimitOrderLegChaseParam() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQComposeLimitOrderLegChaseParam(HostingXQComposeLimitOrderLegChaseParam other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ticks = other.ticks;
    this.times = other.times;
    this.protectPriceRatio = other.protectPriceRatio;
  }

  public HostingXQComposeLimitOrderLegChaseParam deepCopy() {
    return new HostingXQComposeLimitOrderLegChaseParam(this);
  }

  @Override
  public void clear() {
    setTicksIsSet(false);
    this.ticks = 0;
    setTimesIsSet(false);
    this.times = 0;
    setProtectPriceRatioIsSet(false);
    this.protectPriceRatio = 0.0;
  }

  public int getTicks() {
    return this.ticks;
  }

  public HostingXQComposeLimitOrderLegChaseParam setTicks(int ticks) {
    this.ticks = ticks;
    setTicksIsSet(true);
    return this;
  }

  public void unsetTicks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TICKS_ISSET_ID);
  }

  /** Returns true if field ticks is set (has been assigned a value) and false otherwise */
  public boolean isSetTicks() {
    return EncodingUtils.testBit(__isset_bitfield, __TICKS_ISSET_ID);
  }

  public void setTicksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TICKS_ISSET_ID, value);
  }

  public int getTimes() {
    return this.times;
  }

  public HostingXQComposeLimitOrderLegChaseParam setTimes(int times) {
    this.times = times;
    setTimesIsSet(true);
    return this;
  }

  public void unsetTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMES_ISSET_ID);
  }

  /** Returns true if field times is set (has been assigned a value) and false otherwise */
  public boolean isSetTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMES_ISSET_ID);
  }

  public void setTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMES_ISSET_ID, value);
  }

  public double getProtectPriceRatio() {
    return this.protectPriceRatio;
  }

  public HostingXQComposeLimitOrderLegChaseParam setProtectPriceRatio(double protectPriceRatio) {
    this.protectPriceRatio = protectPriceRatio;
    setProtectPriceRatioIsSet(true);
    return this;
  }

  public void unsetProtectPriceRatio() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PROTECTPRICERATIO_ISSET_ID);
  }

  /** Returns true if field protectPriceRatio is set (has been assigned a value) and false otherwise */
  public boolean isSetProtectPriceRatio() {
    return EncodingUtils.testBit(__isset_bitfield, __PROTECTPRICERATIO_ISSET_ID);
  }

  public void setProtectPriceRatioIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PROTECTPRICERATIO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TICKS:
      if (value == null) {
        unsetTicks();
      } else {
        setTicks((Integer)value);
      }
      break;

    case TIMES:
      if (value == null) {
        unsetTimes();
      } else {
        setTimes((Integer)value);
      }
      break;

    case PROTECT_PRICE_RATIO:
      if (value == null) {
        unsetProtectPriceRatio();
      } else {
        setProtectPriceRatio((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKS:
      return Integer.valueOf(getTicks());

    case TIMES:
      return Integer.valueOf(getTimes());

    case PROTECT_PRICE_RATIO:
      return Double.valueOf(getProtectPriceRatio());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TICKS:
      return isSetTicks();
    case TIMES:
      return isSetTimes();
    case PROTECT_PRICE_RATIO:
      return isSetProtectPriceRatio();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQComposeLimitOrderLegChaseParam)
      return this.equals((HostingXQComposeLimitOrderLegChaseParam)that);
    return false;
  }

  public boolean equals(HostingXQComposeLimitOrderLegChaseParam that) {
    if (that == null)
      return false;

    boolean this_present_ticks = true && this.isSetTicks();
    boolean that_present_ticks = true && that.isSetTicks();
    if (this_present_ticks || that_present_ticks) {
      if (!(this_present_ticks && that_present_ticks))
        return false;
      if (this.ticks != that.ticks)
        return false;
    }

    boolean this_present_times = true && this.isSetTimes();
    boolean that_present_times = true && that.isSetTimes();
    if (this_present_times || that_present_times) {
      if (!(this_present_times && that_present_times))
        return false;
      if (this.times != that.times)
        return false;
    }

    boolean this_present_protectPriceRatio = true && this.isSetProtectPriceRatio();
    boolean that_present_protectPriceRatio = true && that.isSetProtectPriceRatio();
    if (this_present_protectPriceRatio || that_present_protectPriceRatio) {
      if (!(this_present_protectPriceRatio && that_present_protectPriceRatio))
        return false;
      if (this.protectPriceRatio != that.protectPriceRatio)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQComposeLimitOrderLegChaseParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTicks()).compareTo(other.isSetTicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticks, other.ticks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimes()).compareTo(other.isSetTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.times, other.times);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetProtectPriceRatio()).compareTo(other.isSetProtectPriceRatio());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProtectPriceRatio()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protectPriceRatio, other.protectPriceRatio);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderLegChaseParam(");
    boolean first = true;

    if (isSetTicks()) {
      sb.append("ticks:");
      sb.append(this.ticks);
      first = false;
    }
    if (isSetTimes()) {
      if (!first) sb.append(", ");
      sb.append("times:");
      sb.append(this.times);
      first = false;
    }
    if (isSetProtectPriceRatio()) {
      if (!first) sb.append(", ");
      sb.append("protectPriceRatio:");
      sb.append(this.protectPriceRatio);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQComposeLimitOrderLegChaseParamStandardSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderLegChaseParamStandardScheme getScheme() {
      return new HostingXQComposeLimitOrderLegChaseParamStandardScheme();
    }
  }

  private static class HostingXQComposeLimitOrderLegChaseParamStandardScheme extends StandardScheme<HostingXQComposeLimitOrderLegChaseParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQComposeLimitOrderLegChaseParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ticks = iprot.readI32();
              struct.setTicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.times = iprot.readI32();
              struct.setTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROTECT_PRICE_RATIO
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.protectPriceRatio = iprot.readDouble();
              struct.setProtectPriceRatioIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQComposeLimitOrderLegChaseParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTicks()) {
        oprot.writeFieldBegin(TICKS_FIELD_DESC);
        oprot.writeI32(struct.ticks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTimes()) {
        oprot.writeFieldBegin(TIMES_FIELD_DESC);
        oprot.writeI32(struct.times);
        oprot.writeFieldEnd();
      }
      if (struct.isSetProtectPriceRatio()) {
        oprot.writeFieldBegin(PROTECT_PRICE_RATIO_FIELD_DESC);
        oprot.writeDouble(struct.protectPriceRatio);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQComposeLimitOrderLegChaseParamTupleSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderLegChaseParamTupleScheme getScheme() {
      return new HostingXQComposeLimitOrderLegChaseParamTupleScheme();
    }
  }

  private static class HostingXQComposeLimitOrderLegChaseParamTupleScheme extends TupleScheme<HostingXQComposeLimitOrderLegChaseParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderLegChaseParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTicks()) {
        optionals.set(0);
      }
      if (struct.isSetTimes()) {
        optionals.set(1);
      }
      if (struct.isSetProtectPriceRatio()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTicks()) {
        oprot.writeI32(struct.ticks);
      }
      if (struct.isSetTimes()) {
        oprot.writeI32(struct.times);
      }
      if (struct.isSetProtectPriceRatio()) {
        oprot.writeDouble(struct.protectPriceRatio);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderLegChaseParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ticks = iprot.readI32();
        struct.setTicksIsSet(true);
      }
      if (incoming.get(1)) {
        struct.times = iprot.readI32();
        struct.setTimesIsSet(true);
      }
      if (incoming.get(2)) {
        struct.protectPriceRatio = iprot.readDouble();
        struct.setProtectPriceRatioIsSet(true);
      }
    }
  }

}

