/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQComposeLimitOrderParallelParams implements org.apache.thrift.TBase<HostingXQComposeLimitOrderParallelParams, HostingXQComposeLimitOrderParallelParams._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQComposeLimitOrderParallelParams> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQComposeLimitOrderParallelParams");

  private static final org.apache.thrift.protocol.TField LEG_CHASE_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("legChaseParams", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField LEG_SEND_ORDER_EXTRA_PARAM_FIELD_DESC = new org.apache.thrift.protocol.TField("legSendOrderExtraParam", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQComposeLimitOrderParallelParamsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQComposeLimitOrderParallelParamsTupleSchemeFactory());
  }

  public Map<Long,HostingXQComposeLimitOrderLegChaseParam> legChaseParams; // optional
  public Map<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam> legSendOrderExtraParam; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LEG_CHASE_PARAMS((short)1, "legChaseParams"),
    LEG_SEND_ORDER_EXTRA_PARAM((short)2, "legSendOrderExtraParam");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LEG_CHASE_PARAMS
          return LEG_CHASE_PARAMS;
        case 2: // LEG_SEND_ORDER_EXTRA_PARAM
          return LEG_SEND_ORDER_EXTRA_PARAM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.LEG_CHASE_PARAMS,_Fields.LEG_SEND_ORDER_EXTRA_PARAM};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LEG_CHASE_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("legChaseParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeLimitOrderLegChaseParam.class))));
    tmpMap.put(_Fields.LEG_SEND_ORDER_EXTRA_PARAM, new org.apache.thrift.meta_data.FieldMetaData("legSendOrderExtraParam", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeOrderLimitLegSendOrderExtraParam.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQComposeLimitOrderParallelParams.class, metaDataMap);
  }

  public HostingXQComposeLimitOrderParallelParams() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQComposeLimitOrderParallelParams(HostingXQComposeLimitOrderParallelParams other) {
    if (other.isSetLegChaseParams()) {
      Map<Long,HostingXQComposeLimitOrderLegChaseParam> __this__legChaseParams = new HashMap<Long,HostingXQComposeLimitOrderLegChaseParam>(other.legChaseParams.size());
      for (Map.Entry<Long, HostingXQComposeLimitOrderLegChaseParam> other_element : other.legChaseParams.entrySet()) {

        Long other_element_key = other_element.getKey();
        HostingXQComposeLimitOrderLegChaseParam other_element_value = other_element.getValue();

        Long __this__legChaseParams_copy_key = other_element_key;

        HostingXQComposeLimitOrderLegChaseParam __this__legChaseParams_copy_value = new HostingXQComposeLimitOrderLegChaseParam(other_element_value);

        __this__legChaseParams.put(__this__legChaseParams_copy_key, __this__legChaseParams_copy_value);
      }
      this.legChaseParams = __this__legChaseParams;
    }
    if (other.isSetLegSendOrderExtraParam()) {
      Map<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam> __this__legSendOrderExtraParam = new HashMap<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam>(other.legSendOrderExtraParam.size());
      for (Map.Entry<Long, HostingXQComposeOrderLimitLegSendOrderExtraParam> other_element : other.legSendOrderExtraParam.entrySet()) {

        Long other_element_key = other_element.getKey();
        HostingXQComposeOrderLimitLegSendOrderExtraParam other_element_value = other_element.getValue();

        Long __this__legSendOrderExtraParam_copy_key = other_element_key;

        HostingXQComposeOrderLimitLegSendOrderExtraParam __this__legSendOrderExtraParam_copy_value = new HostingXQComposeOrderLimitLegSendOrderExtraParam(other_element_value);

        __this__legSendOrderExtraParam.put(__this__legSendOrderExtraParam_copy_key, __this__legSendOrderExtraParam_copy_value);
      }
      this.legSendOrderExtraParam = __this__legSendOrderExtraParam;
    }
  }

  public HostingXQComposeLimitOrderParallelParams deepCopy() {
    return new HostingXQComposeLimitOrderParallelParams(this);
  }

  @Override
  public void clear() {
    this.legChaseParams = null;
    this.legSendOrderExtraParam = null;
  }

  public int getLegChaseParamsSize() {
    return (this.legChaseParams == null) ? 0 : this.legChaseParams.size();
  }

  public void putToLegChaseParams(long key, HostingXQComposeLimitOrderLegChaseParam val) {
    if (this.legChaseParams == null) {
      this.legChaseParams = new HashMap<Long,HostingXQComposeLimitOrderLegChaseParam>();
    }
    this.legChaseParams.put(key, val);
  }

  public Map<Long,HostingXQComposeLimitOrderLegChaseParam> getLegChaseParams() {
    return this.legChaseParams;
  }

  public HostingXQComposeLimitOrderParallelParams setLegChaseParams(Map<Long,HostingXQComposeLimitOrderLegChaseParam> legChaseParams) {
    this.legChaseParams = legChaseParams;
    return this;
  }

  public void unsetLegChaseParams() {
    this.legChaseParams = null;
  }

  /** Returns true if field legChaseParams is set (has been assigned a value) and false otherwise */
  public boolean isSetLegChaseParams() {
    return this.legChaseParams != null;
  }

  public void setLegChaseParamsIsSet(boolean value) {
    if (!value) {
      this.legChaseParams = null;
    }
  }

  public int getLegSendOrderExtraParamSize() {
    return (this.legSendOrderExtraParam == null) ? 0 : this.legSendOrderExtraParam.size();
  }

  public void putToLegSendOrderExtraParam(long key, HostingXQComposeOrderLimitLegSendOrderExtraParam val) {
    if (this.legSendOrderExtraParam == null) {
      this.legSendOrderExtraParam = new HashMap<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam>();
    }
    this.legSendOrderExtraParam.put(key, val);
  }

  public Map<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam> getLegSendOrderExtraParam() {
    return this.legSendOrderExtraParam;
  }

  public HostingXQComposeLimitOrderParallelParams setLegSendOrderExtraParam(Map<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam> legSendOrderExtraParam) {
    this.legSendOrderExtraParam = legSendOrderExtraParam;
    return this;
  }

  public void unsetLegSendOrderExtraParam() {
    this.legSendOrderExtraParam = null;
  }

  /** Returns true if field legSendOrderExtraParam is set (has been assigned a value) and false otherwise */
  public boolean isSetLegSendOrderExtraParam() {
    return this.legSendOrderExtraParam != null;
  }

  public void setLegSendOrderExtraParamIsSet(boolean value) {
    if (!value) {
      this.legSendOrderExtraParam = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LEG_CHASE_PARAMS:
      if (value == null) {
        unsetLegChaseParams();
      } else {
        setLegChaseParams((Map<Long,HostingXQComposeLimitOrderLegChaseParam>)value);
      }
      break;

    case LEG_SEND_ORDER_EXTRA_PARAM:
      if (value == null) {
        unsetLegSendOrderExtraParam();
      } else {
        setLegSendOrderExtraParam((Map<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LEG_CHASE_PARAMS:
      return getLegChaseParams();

    case LEG_SEND_ORDER_EXTRA_PARAM:
      return getLegSendOrderExtraParam();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LEG_CHASE_PARAMS:
      return isSetLegChaseParams();
    case LEG_SEND_ORDER_EXTRA_PARAM:
      return isSetLegSendOrderExtraParam();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQComposeLimitOrderParallelParams)
      return this.equals((HostingXQComposeLimitOrderParallelParams)that);
    return false;
  }

  public boolean equals(HostingXQComposeLimitOrderParallelParams that) {
    if (that == null)
      return false;

    boolean this_present_legChaseParams = true && this.isSetLegChaseParams();
    boolean that_present_legChaseParams = true && that.isSetLegChaseParams();
    if (this_present_legChaseParams || that_present_legChaseParams) {
      if (!(this_present_legChaseParams && that_present_legChaseParams))
        return false;
      if (!this.legChaseParams.equals(that.legChaseParams))
        return false;
    }

    boolean this_present_legSendOrderExtraParam = true && this.isSetLegSendOrderExtraParam();
    boolean that_present_legSendOrderExtraParam = true && that.isSetLegSendOrderExtraParam();
    if (this_present_legSendOrderExtraParam || that_present_legSendOrderExtraParam) {
      if (!(this_present_legSendOrderExtraParam && that_present_legSendOrderExtraParam))
        return false;
      if (!this.legSendOrderExtraParam.equals(that.legSendOrderExtraParam))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQComposeLimitOrderParallelParams other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLegChaseParams()).compareTo(other.isSetLegChaseParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegChaseParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legChaseParams, other.legChaseParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLegSendOrderExtraParam()).compareTo(other.isSetLegSendOrderExtraParam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLegSendOrderExtraParam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.legSendOrderExtraParam, other.legSendOrderExtraParam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderParallelParams(");
    boolean first = true;

    if (isSetLegChaseParams()) {
      sb.append("legChaseParams:");
      if (this.legChaseParams == null) {
        sb.append("null");
      } else {
        sb.append(this.legChaseParams);
      }
      first = false;
    }
    if (isSetLegSendOrderExtraParam()) {
      if (!first) sb.append(", ");
      sb.append("legSendOrderExtraParam:");
      if (this.legSendOrderExtraParam == null) {
        sb.append("null");
      } else {
        sb.append(this.legSendOrderExtraParam);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQComposeLimitOrderParallelParamsStandardSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderParallelParamsStandardScheme getScheme() {
      return new HostingXQComposeLimitOrderParallelParamsStandardScheme();
    }
  }

  private static class HostingXQComposeLimitOrderParallelParamsStandardScheme extends StandardScheme<HostingXQComposeLimitOrderParallelParams> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQComposeLimitOrderParallelParams struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LEG_CHASE_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                struct.legChaseParams = new HashMap<Long,HostingXQComposeLimitOrderLegChaseParam>(2*_map20.size);
                for (int _i21 = 0; _i21 < _map20.size; ++_i21)
                {
                  long _key22;
                  HostingXQComposeLimitOrderLegChaseParam _val23;
                  _key22 = iprot.readI64();
                  _val23 = new HostingXQComposeLimitOrderLegChaseParam();
                  _val23.read(iprot);
                  struct.legChaseParams.put(_key22, _val23);
                }
                iprot.readMapEnd();
              }
              struct.setLegChaseParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEG_SEND_ORDER_EXTRA_PARAM
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.legSendOrderExtraParam = new HashMap<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam>(2*_map24.size);
                for (int _i25 = 0; _i25 < _map24.size; ++_i25)
                {
                  long _key26;
                  HostingXQComposeOrderLimitLegSendOrderExtraParam _val27;
                  _key26 = iprot.readI64();
                  _val27 = new HostingXQComposeOrderLimitLegSendOrderExtraParam();
                  _val27.read(iprot);
                  struct.legSendOrderExtraParam.put(_key26, _val27);
                }
                iprot.readMapEnd();
              }
              struct.setLegSendOrderExtraParamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQComposeLimitOrderParallelParams struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.legChaseParams != null) {
        if (struct.isSetLegChaseParams()) {
          oprot.writeFieldBegin(LEG_CHASE_PARAMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.legChaseParams.size()));
            for (Map.Entry<Long, HostingXQComposeLimitOrderLegChaseParam> _iter28 : struct.legChaseParams.entrySet())
            {
              oprot.writeI64(_iter28.getKey());
              _iter28.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.legSendOrderExtraParam != null) {
        if (struct.isSetLegSendOrderExtraParam()) {
          oprot.writeFieldBegin(LEG_SEND_ORDER_EXTRA_PARAM_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, struct.legSendOrderExtraParam.size()));
            for (Map.Entry<Long, HostingXQComposeOrderLimitLegSendOrderExtraParam> _iter29 : struct.legSendOrderExtraParam.entrySet())
            {
              oprot.writeI64(_iter29.getKey());
              _iter29.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQComposeLimitOrderParallelParamsTupleSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderParallelParamsTupleScheme getScheme() {
      return new HostingXQComposeLimitOrderParallelParamsTupleScheme();
    }
  }

  private static class HostingXQComposeLimitOrderParallelParamsTupleScheme extends TupleScheme<HostingXQComposeLimitOrderParallelParams> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderParallelParams struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLegChaseParams()) {
        optionals.set(0);
      }
      if (struct.isSetLegSendOrderExtraParam()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLegChaseParams()) {
        {
          oprot.writeI32(struct.legChaseParams.size());
          for (Map.Entry<Long, HostingXQComposeLimitOrderLegChaseParam> _iter30 : struct.legChaseParams.entrySet())
          {
            oprot.writeI64(_iter30.getKey());
            _iter30.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetLegSendOrderExtraParam()) {
        {
          oprot.writeI32(struct.legSendOrderExtraParam.size());
          for (Map.Entry<Long, HostingXQComposeOrderLimitLegSendOrderExtraParam> _iter31 : struct.legSendOrderExtraParam.entrySet())
          {
            oprot.writeI64(_iter31.getKey());
            _iter31.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderParallelParams struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.legChaseParams = new HashMap<Long,HostingXQComposeLimitOrderLegChaseParam>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            long _key34;
            HostingXQComposeLimitOrderLegChaseParam _val35;
            _key34 = iprot.readI64();
            _val35 = new HostingXQComposeLimitOrderLegChaseParam();
            _val35.read(iprot);
            struct.legChaseParams.put(_key34, _val35);
          }
        }
        struct.setLegChaseParamsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.legSendOrderExtraParam = new HashMap<Long,HostingXQComposeOrderLimitLegSendOrderExtraParam>(2*_map36.size);
          for (int _i37 = 0; _i37 < _map36.size; ++_i37)
          {
            long _key38;
            HostingXQComposeOrderLimitLegSendOrderExtraParam _val39;
            _key38 = iprot.readI64();
            _val39 = new HostingXQComposeOrderLimitLegSendOrderExtraParam();
            _val39.read(iprot);
            struct.legSendOrderExtraParam.put(_key38, _val39);
          }
        }
        struct.setLegSendOrderExtraParamIsSet(true);
      }
    }
  }

}

