/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQOrderExecDetail implements org.apache.thrift.TBase<HostingXQOrderExecDetail, HostingXQOrderExecDetail._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQOrderExecDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQOrderExecDetail");

  private static final org.apache.thrift.protocol.TField XQ_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("xqOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField XQ_TRADES_FIELD_DESC = new org.apache.thrift.protocol.TField("xqTrades", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField EXEC_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("execOrders", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField EXEC_TRADES_FIELD_DESC = new org.apache.thrift.protocol.TField("execTrades", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField XQ_TRADE_RELATED_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("xqTradeRelatedItems", org.apache.thrift.protocol.TType.MAP, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQOrderExecDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQOrderExecDetailTupleSchemeFactory());
  }

  public HostingXQOrder xqOrder; // optional
  public List<HostingXQTrade> xqTrades; // optional
  public List<xueqiao.trade.hosting.HostingExecOrder> execOrders; // optional
  public List<xueqiao.trade.hosting.HostingExecTrade> execTrades; // optional
  public Map<Long,List<HostingXQTradeRelatedItem>> xqTradeRelatedItems; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    XQ_ORDER((short)1, "xqOrder"),
    XQ_TRADES((short)2, "xqTrades"),
    EXEC_ORDERS((short)3, "execOrders"),
    EXEC_TRADES((short)4, "execTrades"),
    XQ_TRADE_RELATED_ITEMS((short)5, "xqTradeRelatedItems");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // XQ_ORDER
          return XQ_ORDER;
        case 2: // XQ_TRADES
          return XQ_TRADES;
        case 3: // EXEC_ORDERS
          return EXEC_ORDERS;
        case 4: // EXEC_TRADES
          return EXEC_TRADES;
        case 5: // XQ_TRADE_RELATED_ITEMS
          return XQ_TRADE_RELATED_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.XQ_ORDER,_Fields.XQ_TRADES,_Fields.EXEC_ORDERS,_Fields.EXEC_TRADES,_Fields.XQ_TRADE_RELATED_ITEMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.XQ_ORDER, new org.apache.thrift.meta_data.FieldMetaData("xqOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQOrder.class)));
    tmpMap.put(_Fields.XQ_TRADES, new org.apache.thrift.meta_data.FieldMetaData("xqTrades", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTrade.class))));
    tmpMap.put(_Fields.EXEC_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("execOrders", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecOrder.class))));
    tmpMap.put(_Fields.EXEC_TRADES, new org.apache.thrift.meta_data.FieldMetaData("execTrades", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingExecTrade.class))));
    tmpMap.put(_Fields.XQ_TRADE_RELATED_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("xqTradeRelatedItems", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTradeRelatedItem.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQOrderExecDetail.class, metaDataMap);
  }

  public HostingXQOrderExecDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQOrderExecDetail(HostingXQOrderExecDetail other) {
    if (other.isSetXqOrder()) {
      this.xqOrder = new HostingXQOrder(other.xqOrder);
    }
    if (other.isSetXqTrades()) {
      List<HostingXQTrade> __this__xqTrades = new ArrayList<HostingXQTrade>(other.xqTrades.size());
      for (HostingXQTrade other_element : other.xqTrades) {
        __this__xqTrades.add(new HostingXQTrade(other_element));
      }
      this.xqTrades = __this__xqTrades;
    }
    if (other.isSetExecOrders()) {
      List<xueqiao.trade.hosting.HostingExecOrder> __this__execOrders = new ArrayList<xueqiao.trade.hosting.HostingExecOrder>(other.execOrders.size());
      for (xueqiao.trade.hosting.HostingExecOrder other_element : other.execOrders) {
        __this__execOrders.add(new xueqiao.trade.hosting.HostingExecOrder(other_element));
      }
      this.execOrders = __this__execOrders;
    }
    if (other.isSetExecTrades()) {
      List<xueqiao.trade.hosting.HostingExecTrade> __this__execTrades = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(other.execTrades.size());
      for (xueqiao.trade.hosting.HostingExecTrade other_element : other.execTrades) {
        __this__execTrades.add(new xueqiao.trade.hosting.HostingExecTrade(other_element));
      }
      this.execTrades = __this__execTrades;
    }
    if (other.isSetXqTradeRelatedItems()) {
      Map<Long,List<HostingXQTradeRelatedItem>> __this__xqTradeRelatedItems = new HashMap<Long,List<HostingXQTradeRelatedItem>>(other.xqTradeRelatedItems.size());
      for (Map.Entry<Long, List<HostingXQTradeRelatedItem>> other_element : other.xqTradeRelatedItems.entrySet()) {

        Long other_element_key = other_element.getKey();
        List<HostingXQTradeRelatedItem> other_element_value = other_element.getValue();

        Long __this__xqTradeRelatedItems_copy_key = other_element_key;

        List<HostingXQTradeRelatedItem> __this__xqTradeRelatedItems_copy_value = new ArrayList<HostingXQTradeRelatedItem>(other_element_value.size());
        for (HostingXQTradeRelatedItem other_element_value_element : other_element_value) {
          __this__xqTradeRelatedItems_copy_value.add(new HostingXQTradeRelatedItem(other_element_value_element));
        }

        __this__xqTradeRelatedItems.put(__this__xqTradeRelatedItems_copy_key, __this__xqTradeRelatedItems_copy_value);
      }
      this.xqTradeRelatedItems = __this__xqTradeRelatedItems;
    }
  }

  public HostingXQOrderExecDetail deepCopy() {
    return new HostingXQOrderExecDetail(this);
  }

  @Override
  public void clear() {
    this.xqOrder = null;
    this.xqTrades = null;
    this.execOrders = null;
    this.execTrades = null;
    this.xqTradeRelatedItems = null;
  }

  public HostingXQOrder getXqOrder() {
    return this.xqOrder;
  }

  public HostingXQOrderExecDetail setXqOrder(HostingXQOrder xqOrder) {
    this.xqOrder = xqOrder;
    return this;
  }

  public void unsetXqOrder() {
    this.xqOrder = null;
  }

  /** Returns true if field xqOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetXqOrder() {
    return this.xqOrder != null;
  }

  public void setXqOrderIsSet(boolean value) {
    if (!value) {
      this.xqOrder = null;
    }
  }

  public int getXqTradesSize() {
    return (this.xqTrades == null) ? 0 : this.xqTrades.size();
  }

  public java.util.Iterator<HostingXQTrade> getXqTradesIterator() {
    return (this.xqTrades == null) ? null : this.xqTrades.iterator();
  }

  public void addToXqTrades(HostingXQTrade elem) {
    if (this.xqTrades == null) {
      this.xqTrades = new ArrayList<HostingXQTrade>();
    }
    this.xqTrades.add(elem);
  }

  public List<HostingXQTrade> getXqTrades() {
    return this.xqTrades;
  }

  public HostingXQOrderExecDetail setXqTrades(List<HostingXQTrade> xqTrades) {
    this.xqTrades = xqTrades;
    return this;
  }

  public void unsetXqTrades() {
    this.xqTrades = null;
  }

  /** Returns true if field xqTrades is set (has been assigned a value) and false otherwise */
  public boolean isSetXqTrades() {
    return this.xqTrades != null;
  }

  public void setXqTradesIsSet(boolean value) {
    if (!value) {
      this.xqTrades = null;
    }
  }

  public int getExecOrdersSize() {
    return (this.execOrders == null) ? 0 : this.execOrders.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.HostingExecOrder> getExecOrdersIterator() {
    return (this.execOrders == null) ? null : this.execOrders.iterator();
  }

  public void addToExecOrders(xueqiao.trade.hosting.HostingExecOrder elem) {
    if (this.execOrders == null) {
      this.execOrders = new ArrayList<xueqiao.trade.hosting.HostingExecOrder>();
    }
    this.execOrders.add(elem);
  }

  public List<xueqiao.trade.hosting.HostingExecOrder> getExecOrders() {
    return this.execOrders;
  }

  public HostingXQOrderExecDetail setExecOrders(List<xueqiao.trade.hosting.HostingExecOrder> execOrders) {
    this.execOrders = execOrders;
    return this;
  }

  public void unsetExecOrders() {
    this.execOrders = null;
  }

  /** Returns true if field execOrders is set (has been assigned a value) and false otherwise */
  public boolean isSetExecOrders() {
    return this.execOrders != null;
  }

  public void setExecOrdersIsSet(boolean value) {
    if (!value) {
      this.execOrders = null;
    }
  }

  public int getExecTradesSize() {
    return (this.execTrades == null) ? 0 : this.execTrades.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.HostingExecTrade> getExecTradesIterator() {
    return (this.execTrades == null) ? null : this.execTrades.iterator();
  }

  public void addToExecTrades(xueqiao.trade.hosting.HostingExecTrade elem) {
    if (this.execTrades == null) {
      this.execTrades = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>();
    }
    this.execTrades.add(elem);
  }

  public List<xueqiao.trade.hosting.HostingExecTrade> getExecTrades() {
    return this.execTrades;
  }

  public HostingXQOrderExecDetail setExecTrades(List<xueqiao.trade.hosting.HostingExecTrade> execTrades) {
    this.execTrades = execTrades;
    return this;
  }

  public void unsetExecTrades() {
    this.execTrades = null;
  }

  /** Returns true if field execTrades is set (has been assigned a value) and false otherwise */
  public boolean isSetExecTrades() {
    return this.execTrades != null;
  }

  public void setExecTradesIsSet(boolean value) {
    if (!value) {
      this.execTrades = null;
    }
  }

  public int getXqTradeRelatedItemsSize() {
    return (this.xqTradeRelatedItems == null) ? 0 : this.xqTradeRelatedItems.size();
  }

  public void putToXqTradeRelatedItems(long key, List<HostingXQTradeRelatedItem> val) {
    if (this.xqTradeRelatedItems == null) {
      this.xqTradeRelatedItems = new HashMap<Long,List<HostingXQTradeRelatedItem>>();
    }
    this.xqTradeRelatedItems.put(key, val);
  }

  public Map<Long,List<HostingXQTradeRelatedItem>> getXqTradeRelatedItems() {
    return this.xqTradeRelatedItems;
  }

  public HostingXQOrderExecDetail setXqTradeRelatedItems(Map<Long,List<HostingXQTradeRelatedItem>> xqTradeRelatedItems) {
    this.xqTradeRelatedItems = xqTradeRelatedItems;
    return this;
  }

  public void unsetXqTradeRelatedItems() {
    this.xqTradeRelatedItems = null;
  }

  /** Returns true if field xqTradeRelatedItems is set (has been assigned a value) and false otherwise */
  public boolean isSetXqTradeRelatedItems() {
    return this.xqTradeRelatedItems != null;
  }

  public void setXqTradeRelatedItemsIsSet(boolean value) {
    if (!value) {
      this.xqTradeRelatedItems = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case XQ_ORDER:
      if (value == null) {
        unsetXqOrder();
      } else {
        setXqOrder((HostingXQOrder)value);
      }
      break;

    case XQ_TRADES:
      if (value == null) {
        unsetXqTrades();
      } else {
        setXqTrades((List<HostingXQTrade>)value);
      }
      break;

    case EXEC_ORDERS:
      if (value == null) {
        unsetExecOrders();
      } else {
        setExecOrders((List<xueqiao.trade.hosting.HostingExecOrder>)value);
      }
      break;

    case EXEC_TRADES:
      if (value == null) {
        unsetExecTrades();
      } else {
        setExecTrades((List<xueqiao.trade.hosting.HostingExecTrade>)value);
      }
      break;

    case XQ_TRADE_RELATED_ITEMS:
      if (value == null) {
        unsetXqTradeRelatedItems();
      } else {
        setXqTradeRelatedItems((Map<Long,List<HostingXQTradeRelatedItem>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case XQ_ORDER:
      return getXqOrder();

    case XQ_TRADES:
      return getXqTrades();

    case EXEC_ORDERS:
      return getExecOrders();

    case EXEC_TRADES:
      return getExecTrades();

    case XQ_TRADE_RELATED_ITEMS:
      return getXqTradeRelatedItems();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case XQ_ORDER:
      return isSetXqOrder();
    case XQ_TRADES:
      return isSetXqTrades();
    case EXEC_ORDERS:
      return isSetExecOrders();
    case EXEC_TRADES:
      return isSetExecTrades();
    case XQ_TRADE_RELATED_ITEMS:
      return isSetXqTradeRelatedItems();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQOrderExecDetail)
      return this.equals((HostingXQOrderExecDetail)that);
    return false;
  }

  public boolean equals(HostingXQOrderExecDetail that) {
    if (that == null)
      return false;

    boolean this_present_xqOrder = true && this.isSetXqOrder();
    boolean that_present_xqOrder = true && that.isSetXqOrder();
    if (this_present_xqOrder || that_present_xqOrder) {
      if (!(this_present_xqOrder && that_present_xqOrder))
        return false;
      if (!this.xqOrder.equals(that.xqOrder))
        return false;
    }

    boolean this_present_xqTrades = true && this.isSetXqTrades();
    boolean that_present_xqTrades = true && that.isSetXqTrades();
    if (this_present_xqTrades || that_present_xqTrades) {
      if (!(this_present_xqTrades && that_present_xqTrades))
        return false;
      if (!this.xqTrades.equals(that.xqTrades))
        return false;
    }

    boolean this_present_execOrders = true && this.isSetExecOrders();
    boolean that_present_execOrders = true && that.isSetExecOrders();
    if (this_present_execOrders || that_present_execOrders) {
      if (!(this_present_execOrders && that_present_execOrders))
        return false;
      if (!this.execOrders.equals(that.execOrders))
        return false;
    }

    boolean this_present_execTrades = true && this.isSetExecTrades();
    boolean that_present_execTrades = true && that.isSetExecTrades();
    if (this_present_execTrades || that_present_execTrades) {
      if (!(this_present_execTrades && that_present_execTrades))
        return false;
      if (!this.execTrades.equals(that.execTrades))
        return false;
    }

    boolean this_present_xqTradeRelatedItems = true && this.isSetXqTradeRelatedItems();
    boolean that_present_xqTradeRelatedItems = true && that.isSetXqTradeRelatedItems();
    if (this_present_xqTradeRelatedItems || that_present_xqTradeRelatedItems) {
      if (!(this_present_xqTradeRelatedItems && that_present_xqTradeRelatedItems))
        return false;
      if (!this.xqTradeRelatedItems.equals(that.xqTradeRelatedItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQOrderExecDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetXqOrder()).compareTo(other.isSetXqOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXqOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xqOrder, other.xqOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXqTrades()).compareTo(other.isSetXqTrades());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXqTrades()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xqTrades, other.xqTrades);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecOrders()).compareTo(other.isSetExecOrders());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecOrders()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execOrders, other.execOrders);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecTrades()).compareTo(other.isSetExecTrades());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecTrades()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execTrades, other.execTrades);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetXqTradeRelatedItems()).compareTo(other.isSetXqTradeRelatedItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetXqTradeRelatedItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xqTradeRelatedItems, other.xqTradeRelatedItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQOrderExecDetail(");
    boolean first = true;

    if (isSetXqOrder()) {
      sb.append("xqOrder:");
      if (this.xqOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.xqOrder);
      }
      first = false;
    }
    if (isSetXqTrades()) {
      if (!first) sb.append(", ");
      sb.append("xqTrades:");
      if (this.xqTrades == null) {
        sb.append("null");
      } else {
        sb.append(this.xqTrades);
      }
      first = false;
    }
    if (isSetExecOrders()) {
      if (!first) sb.append(", ");
      sb.append("execOrders:");
      if (this.execOrders == null) {
        sb.append("null");
      } else {
        sb.append(this.execOrders);
      }
      first = false;
    }
    if (isSetExecTrades()) {
      if (!first) sb.append(", ");
      sb.append("execTrades:");
      if (this.execTrades == null) {
        sb.append("null");
      } else {
        sb.append(this.execTrades);
      }
      first = false;
    }
    if (isSetXqTradeRelatedItems()) {
      if (!first) sb.append(", ");
      sb.append("xqTradeRelatedItems:");
      if (this.xqTradeRelatedItems == null) {
        sb.append("null");
      } else {
        sb.append(this.xqTradeRelatedItems);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (xqOrder != null) {
      xqOrder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQOrderExecDetailStandardSchemeFactory implements SchemeFactory {
    public HostingXQOrderExecDetailStandardScheme getScheme() {
      return new HostingXQOrderExecDetailStandardScheme();
    }
  }

  private static class HostingXQOrderExecDetailStandardScheme extends StandardScheme<HostingXQOrderExecDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQOrderExecDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // XQ_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.xqOrder = new HostingXQOrder();
              struct.xqOrder.read(iprot);
              struct.setXqOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // XQ_TRADES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list262 = iprot.readListBegin();
                struct.xqTrades = new ArrayList<HostingXQTrade>(_list262.size);
                for (int _i263 = 0; _i263 < _list262.size; ++_i263)
                {
                  HostingXQTrade _elem264;
                  _elem264 = new HostingXQTrade();
                  _elem264.read(iprot);
                  struct.xqTrades.add(_elem264);
                }
                iprot.readListEnd();
              }
              struct.setXqTradesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // EXEC_ORDERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list265 = iprot.readListBegin();
                struct.execOrders = new ArrayList<xueqiao.trade.hosting.HostingExecOrder>(_list265.size);
                for (int _i266 = 0; _i266 < _list265.size; ++_i266)
                {
                  xueqiao.trade.hosting.HostingExecOrder _elem267;
                  _elem267 = new xueqiao.trade.hosting.HostingExecOrder();
                  _elem267.read(iprot);
                  struct.execOrders.add(_elem267);
                }
                iprot.readListEnd();
              }
              struct.setExecOrdersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXEC_TRADES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list268 = iprot.readListBegin();
                struct.execTrades = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(_list268.size);
                for (int _i269 = 0; _i269 < _list268.size; ++_i269)
                {
                  xueqiao.trade.hosting.HostingExecTrade _elem270;
                  _elem270 = new xueqiao.trade.hosting.HostingExecTrade();
                  _elem270.read(iprot);
                  struct.execTrades.add(_elem270);
                }
                iprot.readListEnd();
              }
              struct.setExecTradesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // XQ_TRADE_RELATED_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map271 = iprot.readMapBegin();
                struct.xqTradeRelatedItems = new HashMap<Long,List<HostingXQTradeRelatedItem>>(2*_map271.size);
                for (int _i272 = 0; _i272 < _map271.size; ++_i272)
                {
                  long _key273;
                  List<HostingXQTradeRelatedItem> _val274;
                  _key273 = iprot.readI64();
                  {
                    org.apache.thrift.protocol.TList _list275 = iprot.readListBegin();
                    _val274 = new ArrayList<HostingXQTradeRelatedItem>(_list275.size);
                    for (int _i276 = 0; _i276 < _list275.size; ++_i276)
                    {
                      HostingXQTradeRelatedItem _elem277;
                      _elem277 = new HostingXQTradeRelatedItem();
                      _elem277.read(iprot);
                      _val274.add(_elem277);
                    }
                    iprot.readListEnd();
                  }
                  struct.xqTradeRelatedItems.put(_key273, _val274);
                }
                iprot.readMapEnd();
              }
              struct.setXqTradeRelatedItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQOrderExecDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.xqOrder != null) {
        if (struct.isSetXqOrder()) {
          oprot.writeFieldBegin(XQ_ORDER_FIELD_DESC);
          struct.xqOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.xqTrades != null) {
        if (struct.isSetXqTrades()) {
          oprot.writeFieldBegin(XQ_TRADES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.xqTrades.size()));
            for (HostingXQTrade _iter278 : struct.xqTrades)
            {
              _iter278.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.execOrders != null) {
        if (struct.isSetExecOrders()) {
          oprot.writeFieldBegin(EXEC_ORDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.execOrders.size()));
            for (xueqiao.trade.hosting.HostingExecOrder _iter279 : struct.execOrders)
            {
              _iter279.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.execTrades != null) {
        if (struct.isSetExecTrades()) {
          oprot.writeFieldBegin(EXEC_TRADES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.execTrades.size()));
            for (xueqiao.trade.hosting.HostingExecTrade _iter280 : struct.execTrades)
            {
              _iter280.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.xqTradeRelatedItems != null) {
        if (struct.isSetXqTradeRelatedItems()) {
          oprot.writeFieldBegin(XQ_TRADE_RELATED_ITEMS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, struct.xqTradeRelatedItems.size()));
            for (Map.Entry<Long, List<HostingXQTradeRelatedItem>> _iter281 : struct.xqTradeRelatedItems.entrySet())
            {
              oprot.writeI64(_iter281.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter281.getValue().size()));
                for (HostingXQTradeRelatedItem _iter282 : _iter281.getValue())
                {
                  _iter282.write(oprot);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQOrderExecDetailTupleSchemeFactory implements SchemeFactory {
    public HostingXQOrderExecDetailTupleScheme getScheme() {
      return new HostingXQOrderExecDetailTupleScheme();
    }
  }

  private static class HostingXQOrderExecDetailTupleScheme extends TupleScheme<HostingXQOrderExecDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderExecDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetXqOrder()) {
        optionals.set(0);
      }
      if (struct.isSetXqTrades()) {
        optionals.set(1);
      }
      if (struct.isSetExecOrders()) {
        optionals.set(2);
      }
      if (struct.isSetExecTrades()) {
        optionals.set(3);
      }
      if (struct.isSetXqTradeRelatedItems()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetXqOrder()) {
        struct.xqOrder.write(oprot);
      }
      if (struct.isSetXqTrades()) {
        {
          oprot.writeI32(struct.xqTrades.size());
          for (HostingXQTrade _iter283 : struct.xqTrades)
          {
            _iter283.write(oprot);
          }
        }
      }
      if (struct.isSetExecOrders()) {
        {
          oprot.writeI32(struct.execOrders.size());
          for (xueqiao.trade.hosting.HostingExecOrder _iter284 : struct.execOrders)
          {
            _iter284.write(oprot);
          }
        }
      }
      if (struct.isSetExecTrades()) {
        {
          oprot.writeI32(struct.execTrades.size());
          for (xueqiao.trade.hosting.HostingExecTrade _iter285 : struct.execTrades)
          {
            _iter285.write(oprot);
          }
        }
      }
      if (struct.isSetXqTradeRelatedItems()) {
        {
          oprot.writeI32(struct.xqTradeRelatedItems.size());
          for (Map.Entry<Long, List<HostingXQTradeRelatedItem>> _iter286 : struct.xqTradeRelatedItems.entrySet())
          {
            oprot.writeI64(_iter286.getKey());
            {
              oprot.writeI32(_iter286.getValue().size());
              for (HostingXQTradeRelatedItem _iter287 : _iter286.getValue())
              {
                _iter287.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderExecDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.xqOrder = new HostingXQOrder();
        struct.xqOrder.read(iprot);
        struct.setXqOrderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list288 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.xqTrades = new ArrayList<HostingXQTrade>(_list288.size);
          for (int _i289 = 0; _i289 < _list288.size; ++_i289)
          {
            HostingXQTrade _elem290;
            _elem290 = new HostingXQTrade();
            _elem290.read(iprot);
            struct.xqTrades.add(_elem290);
          }
        }
        struct.setXqTradesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list291 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.execOrders = new ArrayList<xueqiao.trade.hosting.HostingExecOrder>(_list291.size);
          for (int _i292 = 0; _i292 < _list291.size; ++_i292)
          {
            xueqiao.trade.hosting.HostingExecOrder _elem293;
            _elem293 = new xueqiao.trade.hosting.HostingExecOrder();
            _elem293.read(iprot);
            struct.execOrders.add(_elem293);
          }
        }
        struct.setExecOrdersIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list294 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.execTrades = new ArrayList<xueqiao.trade.hosting.HostingExecTrade>(_list294.size);
          for (int _i295 = 0; _i295 < _list294.size; ++_i295)
          {
            xueqiao.trade.hosting.HostingExecTrade _elem296;
            _elem296 = new xueqiao.trade.hosting.HostingExecTrade();
            _elem296.read(iprot);
            struct.execTrades.add(_elem296);
          }
        }
        struct.setExecTradesIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TMap _map297 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I64, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.xqTradeRelatedItems = new HashMap<Long,List<HostingXQTradeRelatedItem>>(2*_map297.size);
          for (int _i298 = 0; _i298 < _map297.size; ++_i298)
          {
            long _key299;
            List<HostingXQTradeRelatedItem> _val300;
            _key299 = iprot.readI64();
            {
              org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val300 = new ArrayList<HostingXQTradeRelatedItem>(_list301.size);
              for (int _i302 = 0; _i302 < _list301.size; ++_i302)
              {
                HostingXQTradeRelatedItem _elem303;
                _elem303 = new HostingXQTradeRelatedItem();
                _elem303.read(iprot);
                _val300.add(_elem303);
              }
            }
            struct.xqTradeRelatedItems.put(_key299, _val300);
          }
        }
        struct.setXqTradeRelatedItemsIsSet(true);
      }
    }
  }

}

