/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQOrder implements org.apache.thrift.TBase<HostingXQOrder, HostingXQOrder._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQOrder> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQOrder");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTarget", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetail", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField ORDER_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderState", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_TRADE_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderTradeSummary", org.apache.thrift.protocol.TType.STRUCT, (short)8);
  private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SOURCE_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceOrderId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ACTION_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("actionOrderId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField GFD_ORDER_END_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("gfdOrderEndTimestampMs", org.apache.thrift.protocol.TType.I64, (short)14);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQOrderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQOrderTupleSchemeFactory());
  }

  public String orderId; // optional
  public int subUserId; // optional
  public long subAccountId; // optional
  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQOrderType orderType; // optional
  public HostingXQTarget orderTarget; // optional
  public HostingXQOrderDetail orderDetail; // optional
  public HostingXQOrderState orderState; // optional
  public HostingXQTradeSummary orderTradeSummary; // optional
  public int version; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public String sourceOrderId; // optional
  public String actionOrderId; // optional
  public long gfdOrderEndTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    SUB_USER_ID((short)2, "subUserId"),
    SUB_ACCOUNT_ID((short)3, "subAccountId"),
    /**
     * 
     * @see HostingXQOrderType
     */
    ORDER_TYPE((short)4, "orderType"),
    ORDER_TARGET((short)5, "orderTarget"),
    ORDER_DETAIL((short)6, "orderDetail"),
    ORDER_STATE((short)7, "orderState"),
    ORDER_TRADE_SUMMARY((short)8, "orderTradeSummary"),
    VERSION((short)9, "version"),
    CREATE_TIMESTAMP_MS((short)10, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)11, "lastmodifyTimestampMs"),
    SOURCE_ORDER_ID((short)12, "sourceOrderId"),
    ACTION_ORDER_ID((short)13, "actionOrderId"),
    GFD_ORDER_END_TIMESTAMP_MS((short)14, "gfdOrderEndTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // SUB_USER_ID
          return SUB_USER_ID;
        case 3: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 4: // ORDER_TYPE
          return ORDER_TYPE;
        case 5: // ORDER_TARGET
          return ORDER_TARGET;
        case 6: // ORDER_DETAIL
          return ORDER_DETAIL;
        case 7: // ORDER_STATE
          return ORDER_STATE;
        case 8: // ORDER_TRADE_SUMMARY
          return ORDER_TRADE_SUMMARY;
        case 9: // VERSION
          return VERSION;
        case 10: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 11: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 12: // SOURCE_ORDER_ID
          return SOURCE_ORDER_ID;
        case 13: // ACTION_ORDER_ID
          return ACTION_ORDER_ID;
        case 14: // GFD_ORDER_END_TIMESTAMP_MS
          return GFD_ORDER_END_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBUSERID_ISSET_ID = 0;
  private static final int __SUBACCOUNTID_ISSET_ID = 1;
  private static final int __VERSION_ISSET_ID = 2;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 3;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 4;
  private static final int __GFDORDERENDTIMESTAMPMS_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.SUB_USER_ID,_Fields.SUB_ACCOUNT_ID,_Fields.ORDER_TYPE,_Fields.ORDER_TARGET,_Fields.ORDER_DETAIL,_Fields.ORDER_STATE,_Fields.ORDER_TRADE_SUMMARY,_Fields.VERSION,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.SOURCE_ORDER_ID,_Fields.ACTION_ORDER_ID,_Fields.GFD_ORDER_END_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQOrderType.class)));
    tmpMap.put(_Fields.ORDER_TARGET, new org.apache.thrift.meta_data.FieldMetaData("orderTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTarget.class)));
    tmpMap.put(_Fields.ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("orderDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQOrderDetail.class)));
    tmpMap.put(_Fields.ORDER_STATE, new org.apache.thrift.meta_data.FieldMetaData("orderState", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQOrderState.class)));
    tmpMap.put(_Fields.ORDER_TRADE_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("orderTradeSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTradeSummary.class)));
    tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SOURCE_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("sourceOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACTION_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("actionOrderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GFD_ORDER_END_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("gfdOrderEndTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQOrder.class, metaDataMap);
  }

  public HostingXQOrder() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQOrder(HostingXQOrder other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.subUserId = other.subUserId;
    this.subAccountId = other.subAccountId;
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetOrderTarget()) {
      this.orderTarget = new HostingXQTarget(other.orderTarget);
    }
    if (other.isSetOrderDetail()) {
      this.orderDetail = new HostingXQOrderDetail(other.orderDetail);
    }
    if (other.isSetOrderState()) {
      this.orderState = new HostingXQOrderState(other.orderState);
    }
    if (other.isSetOrderTradeSummary()) {
      this.orderTradeSummary = new HostingXQTradeSummary(other.orderTradeSummary);
    }
    this.version = other.version;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    if (other.isSetSourceOrderId()) {
      this.sourceOrderId = other.sourceOrderId;
    }
    if (other.isSetActionOrderId()) {
      this.actionOrderId = other.actionOrderId;
    }
    this.gfdOrderEndTimestampMs = other.gfdOrderEndTimestampMs;
  }

  public HostingXQOrder deepCopy() {
    return new HostingXQOrder(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.orderType = null;
    this.orderTarget = null;
    this.orderDetail = null;
    this.orderState = null;
    this.orderTradeSummary = null;
    setVersionIsSet(false);
    this.version = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    this.sourceOrderId = null;
    this.actionOrderId = null;
    setGfdOrderEndTimestampMsIsSet(false);
    this.gfdOrderEndTimestampMs = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public HostingXQOrder setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingXQOrder setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingXQOrder setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQOrder setOrderType(HostingXQOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  public HostingXQTarget getOrderTarget() {
    return this.orderTarget;
  }

  public HostingXQOrder setOrderTarget(HostingXQTarget orderTarget) {
    this.orderTarget = orderTarget;
    return this;
  }

  public void unsetOrderTarget() {
    this.orderTarget = null;
  }

  /** Returns true if field orderTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTarget() {
    return this.orderTarget != null;
  }

  public void setOrderTargetIsSet(boolean value) {
    if (!value) {
      this.orderTarget = null;
    }
  }

  public HostingXQOrderDetail getOrderDetail() {
    return this.orderDetail;
  }

  public HostingXQOrder setOrderDetail(HostingXQOrderDetail orderDetail) {
    this.orderDetail = orderDetail;
    return this;
  }

  public void unsetOrderDetail() {
    this.orderDetail = null;
  }

  /** Returns true if field orderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDetail() {
    return this.orderDetail != null;
  }

  public void setOrderDetailIsSet(boolean value) {
    if (!value) {
      this.orderDetail = null;
    }
  }

  public HostingXQOrderState getOrderState() {
    return this.orderState;
  }

  public HostingXQOrder setOrderState(HostingXQOrderState orderState) {
    this.orderState = orderState;
    return this;
  }

  public void unsetOrderState() {
    this.orderState = null;
  }

  /** Returns true if field orderState is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderState() {
    return this.orderState != null;
  }

  public void setOrderStateIsSet(boolean value) {
    if (!value) {
      this.orderState = null;
    }
  }

  public HostingXQTradeSummary getOrderTradeSummary() {
    return this.orderTradeSummary;
  }

  public HostingXQOrder setOrderTradeSummary(HostingXQTradeSummary orderTradeSummary) {
    this.orderTradeSummary = orderTradeSummary;
    return this;
  }

  public void unsetOrderTradeSummary() {
    this.orderTradeSummary = null;
  }

  /** Returns true if field orderTradeSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderTradeSummary() {
    return this.orderTradeSummary != null;
  }

  public void setOrderTradeSummaryIsSet(boolean value) {
    if (!value) {
      this.orderTradeSummary = null;
    }
  }

  public int getVersion() {
    return this.version;
  }

  public HostingXQOrder setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
    return this;
  }

  public void unsetVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
  }

  public void setVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingXQOrder setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingXQOrder setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public String getSourceOrderId() {
    return this.sourceOrderId;
  }

  public HostingXQOrder setSourceOrderId(String sourceOrderId) {
    this.sourceOrderId = sourceOrderId;
    return this;
  }

  public void unsetSourceOrderId() {
    this.sourceOrderId = null;
  }

  /** Returns true if field sourceOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceOrderId() {
    return this.sourceOrderId != null;
  }

  public void setSourceOrderIdIsSet(boolean value) {
    if (!value) {
      this.sourceOrderId = null;
    }
  }

  public String getActionOrderId() {
    return this.actionOrderId;
  }

  public HostingXQOrder setActionOrderId(String actionOrderId) {
    this.actionOrderId = actionOrderId;
    return this;
  }

  public void unsetActionOrderId() {
    this.actionOrderId = null;
  }

  /** Returns true if field actionOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetActionOrderId() {
    return this.actionOrderId != null;
  }

  public void setActionOrderIdIsSet(boolean value) {
    if (!value) {
      this.actionOrderId = null;
    }
  }

  public long getGfdOrderEndTimestampMs() {
    return this.gfdOrderEndTimestampMs;
  }

  public HostingXQOrder setGfdOrderEndTimestampMs(long gfdOrderEndTimestampMs) {
    this.gfdOrderEndTimestampMs = gfdOrderEndTimestampMs;
    setGfdOrderEndTimestampMsIsSet(true);
    return this;
  }

  public void unsetGfdOrderEndTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GFDORDERENDTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field gfdOrderEndTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetGfdOrderEndTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __GFDORDERENDTIMESTAMPMS_ISSET_ID);
  }

  public void setGfdOrderEndTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GFDORDERENDTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((HostingXQOrderType)value);
      }
      break;

    case ORDER_TARGET:
      if (value == null) {
        unsetOrderTarget();
      } else {
        setOrderTarget((HostingXQTarget)value);
      }
      break;

    case ORDER_DETAIL:
      if (value == null) {
        unsetOrderDetail();
      } else {
        setOrderDetail((HostingXQOrderDetail)value);
      }
      break;

    case ORDER_STATE:
      if (value == null) {
        unsetOrderState();
      } else {
        setOrderState((HostingXQOrderState)value);
      }
      break;

    case ORDER_TRADE_SUMMARY:
      if (value == null) {
        unsetOrderTradeSummary();
      } else {
        setOrderTradeSummary((HostingXQTradeSummary)value);
      }
      break;

    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case SOURCE_ORDER_ID:
      if (value == null) {
        unsetSourceOrderId();
      } else {
        setSourceOrderId((String)value);
      }
      break;

    case ACTION_ORDER_ID:
      if (value == null) {
        unsetActionOrderId();
      } else {
        setActionOrderId((String)value);
      }
      break;

    case GFD_ORDER_END_TIMESTAMP_MS:
      if (value == null) {
        unsetGfdOrderEndTimestampMs();
      } else {
        setGfdOrderEndTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case ORDER_TYPE:
      return getOrderType();

    case ORDER_TARGET:
      return getOrderTarget();

    case ORDER_DETAIL:
      return getOrderDetail();

    case ORDER_STATE:
      return getOrderState();

    case ORDER_TRADE_SUMMARY:
      return getOrderTradeSummary();

    case VERSION:
      return Integer.valueOf(getVersion());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case SOURCE_ORDER_ID:
      return getSourceOrderId();

    case ACTION_ORDER_ID:
      return getActionOrderId();

    case GFD_ORDER_END_TIMESTAMP_MS:
      return Long.valueOf(getGfdOrderEndTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case SUB_USER_ID:
      return isSetSubUserId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case ORDER_TYPE:
      return isSetOrderType();
    case ORDER_TARGET:
      return isSetOrderTarget();
    case ORDER_DETAIL:
      return isSetOrderDetail();
    case ORDER_STATE:
      return isSetOrderState();
    case ORDER_TRADE_SUMMARY:
      return isSetOrderTradeSummary();
    case VERSION:
      return isSetVersion();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case SOURCE_ORDER_ID:
      return isSetSourceOrderId();
    case ACTION_ORDER_ID:
      return isSetActionOrderId();
    case GFD_ORDER_END_TIMESTAMP_MS:
      return isSetGfdOrderEndTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQOrder)
      return this.equals((HostingXQOrder)that);
    return false;
  }

  public boolean equals(HostingXQOrder that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_orderTarget = true && this.isSetOrderTarget();
    boolean that_present_orderTarget = true && that.isSetOrderTarget();
    if (this_present_orderTarget || that_present_orderTarget) {
      if (!(this_present_orderTarget && that_present_orderTarget))
        return false;
      if (!this.orderTarget.equals(that.orderTarget))
        return false;
    }

    boolean this_present_orderDetail = true && this.isSetOrderDetail();
    boolean that_present_orderDetail = true && that.isSetOrderDetail();
    if (this_present_orderDetail || that_present_orderDetail) {
      if (!(this_present_orderDetail && that_present_orderDetail))
        return false;
      if (!this.orderDetail.equals(that.orderDetail))
        return false;
    }

    boolean this_present_orderState = true && this.isSetOrderState();
    boolean that_present_orderState = true && that.isSetOrderState();
    if (this_present_orderState || that_present_orderState) {
      if (!(this_present_orderState && that_present_orderState))
        return false;
      if (!this.orderState.equals(that.orderState))
        return false;
    }

    boolean this_present_orderTradeSummary = true && this.isSetOrderTradeSummary();
    boolean that_present_orderTradeSummary = true && that.isSetOrderTradeSummary();
    if (this_present_orderTradeSummary || that_present_orderTradeSummary) {
      if (!(this_present_orderTradeSummary && that_present_orderTradeSummary))
        return false;
      if (!this.orderTradeSummary.equals(that.orderTradeSummary))
        return false;
    }

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_sourceOrderId = true && this.isSetSourceOrderId();
    boolean that_present_sourceOrderId = true && that.isSetSourceOrderId();
    if (this_present_sourceOrderId || that_present_sourceOrderId) {
      if (!(this_present_sourceOrderId && that_present_sourceOrderId))
        return false;
      if (!this.sourceOrderId.equals(that.sourceOrderId))
        return false;
    }

    boolean this_present_actionOrderId = true && this.isSetActionOrderId();
    boolean that_present_actionOrderId = true && that.isSetActionOrderId();
    if (this_present_actionOrderId || that_present_actionOrderId) {
      if (!(this_present_actionOrderId && that_present_actionOrderId))
        return false;
      if (!this.actionOrderId.equals(that.actionOrderId))
        return false;
    }

    boolean this_present_gfdOrderEndTimestampMs = true && this.isSetGfdOrderEndTimestampMs();
    boolean that_present_gfdOrderEndTimestampMs = true && that.isSetGfdOrderEndTimestampMs();
    if (this_present_gfdOrderEndTimestampMs || that_present_gfdOrderEndTimestampMs) {
      if (!(this_present_gfdOrderEndTimestampMs && that_present_gfdOrderEndTimestampMs))
        return false;
      if (this.gfdOrderEndTimestampMs != that.gfdOrderEndTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQOrder other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTarget()).compareTo(other.isSetOrderTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTarget, other.orderTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderDetail()).compareTo(other.isSetOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetail, other.orderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderState()).compareTo(other.isSetOrderState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderState, other.orderState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderTradeSummary()).compareTo(other.isSetOrderTradeSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderTradeSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderTradeSummary, other.orderTradeSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceOrderId()).compareTo(other.isSetSourceOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceOrderId, other.sourceOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetActionOrderId()).compareTo(other.isSetActionOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActionOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actionOrderId, other.actionOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGfdOrderEndTimestampMs()).compareTo(other.isSetGfdOrderEndTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGfdOrderEndTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gfdOrderEndTimestampMs, other.gfdOrderEndTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQOrder(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetOrderType()) {
      if (!first) sb.append(", ");
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetOrderTarget()) {
      if (!first) sb.append(", ");
      sb.append("orderTarget:");
      if (this.orderTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.orderTarget);
      }
      first = false;
    }
    if (isSetOrderDetail()) {
      if (!first) sb.append(", ");
      sb.append("orderDetail:");
      if (this.orderDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDetail);
      }
      first = false;
    }
    if (isSetOrderState()) {
      if (!first) sb.append(", ");
      sb.append("orderState:");
      if (this.orderState == null) {
        sb.append("null");
      } else {
        sb.append(this.orderState);
      }
      first = false;
    }
    if (isSetOrderTradeSummary()) {
      if (!first) sb.append(", ");
      sb.append("orderTradeSummary:");
      if (this.orderTradeSummary == null) {
        sb.append("null");
      } else {
        sb.append(this.orderTradeSummary);
      }
      first = false;
    }
    if (isSetVersion()) {
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetSourceOrderId()) {
      if (!first) sb.append(", ");
      sb.append("sourceOrderId:");
      if (this.sourceOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceOrderId);
      }
      first = false;
    }
    if (isSetActionOrderId()) {
      if (!first) sb.append(", ");
      sb.append("actionOrderId:");
      if (this.actionOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.actionOrderId);
      }
      first = false;
    }
    if (isSetGfdOrderEndTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("gfdOrderEndTimestampMs:");
      sb.append(this.gfdOrderEndTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (orderTarget != null) {
      orderTarget.validate();
    }
    if (orderDetail != null) {
      orderDetail.validate();
    }
    if (orderState != null) {
      orderState.validate();
    }
    if (orderTradeSummary != null) {
      orderTradeSummary.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQOrderStandardSchemeFactory implements SchemeFactory {
    public HostingXQOrderStandardScheme getScheme() {
      return new HostingXQOrderStandardScheme();
    }
  }

  private static class HostingXQOrderStandardScheme extends StandardScheme<HostingXQOrder> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQOrder struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = HostingXQOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderTarget = new HostingXQTarget();
              struct.orderTarget.read(iprot);
              struct.setOrderTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderDetail = new HostingXQOrderDetail();
              struct.orderDetail.read(iprot);
              struct.setOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // ORDER_STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderState = new HostingXQOrderState();
              struct.orderState.read(iprot);
              struct.setOrderStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_TRADE_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.orderTradeSummary = new HostingXQTradeSummary();
              struct.orderTradeSummary.read(iprot);
              struct.setOrderTradeSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.version = iprot.readI32();
              struct.setVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SOURCE_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sourceOrderId = iprot.readString();
              struct.setSourceOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ACTION_ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actionOrderId = iprot.readString();
              struct.setActionOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // GFD_ORDER_END_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.gfdOrderEndTimestampMs = iprot.readI64();
              struct.setGfdOrderEndTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQOrder struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderTarget != null) {
        if (struct.isSetOrderTarget()) {
          oprot.writeFieldBegin(ORDER_TARGET_FIELD_DESC);
          struct.orderTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderDetail != null) {
        if (struct.isSetOrderDetail()) {
          oprot.writeFieldBegin(ORDER_DETAIL_FIELD_DESC);
          struct.orderDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderState != null) {
        if (struct.isSetOrderState()) {
          oprot.writeFieldBegin(ORDER_STATE_FIELD_DESC);
          struct.orderState.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderTradeSummary != null) {
        if (struct.isSetOrderTradeSummary()) {
          oprot.writeFieldBegin(ORDER_TRADE_SUMMARY_FIELD_DESC);
          struct.orderTradeSummary.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersion()) {
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI32(struct.version);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.sourceOrderId != null) {
        if (struct.isSetSourceOrderId()) {
          oprot.writeFieldBegin(SOURCE_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.sourceOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.actionOrderId != null) {
        if (struct.isSetActionOrderId()) {
          oprot.writeFieldBegin(ACTION_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.actionOrderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetGfdOrderEndTimestampMs()) {
        oprot.writeFieldBegin(GFD_ORDER_END_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.gfdOrderEndTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQOrderTupleSchemeFactory implements SchemeFactory {
    public HostingXQOrderTupleScheme getScheme() {
      return new HostingXQOrderTupleScheme();
    }
  }

  private static class HostingXQOrderTupleScheme extends TupleScheme<HostingXQOrder> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(1);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(2);
      }
      if (struct.isSetOrderType()) {
        optionals.set(3);
      }
      if (struct.isSetOrderTarget()) {
        optionals.set(4);
      }
      if (struct.isSetOrderDetail()) {
        optionals.set(5);
      }
      if (struct.isSetOrderState()) {
        optionals.set(6);
      }
      if (struct.isSetOrderTradeSummary()) {
        optionals.set(7);
      }
      if (struct.isSetVersion()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(9);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(10);
      }
      if (struct.isSetSourceOrderId()) {
        optionals.set(11);
      }
      if (struct.isSetActionOrderId()) {
        optionals.set(12);
      }
      if (struct.isSetGfdOrderEndTimestampMs()) {
        optionals.set(13);
      }
      oprot.writeBitSet(optionals, 14);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetOrderTarget()) {
        struct.orderTarget.write(oprot);
      }
      if (struct.isSetOrderDetail()) {
        struct.orderDetail.write(oprot);
      }
      if (struct.isSetOrderState()) {
        struct.orderState.write(oprot);
      }
      if (struct.isSetOrderTradeSummary()) {
        struct.orderTradeSummary.write(oprot);
      }
      if (struct.isSetVersion()) {
        oprot.writeI32(struct.version);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetSourceOrderId()) {
        oprot.writeString(struct.sourceOrderId);
      }
      if (struct.isSetActionOrderId()) {
        oprot.writeString(struct.actionOrderId);
      }
      if (struct.isSetGfdOrderEndTimestampMs()) {
        oprot.writeI64(struct.gfdOrderEndTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQOrder struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(14);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.orderType = HostingXQOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.orderTarget = new HostingXQTarget();
        struct.orderTarget.read(iprot);
        struct.setOrderTargetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.orderDetail = new HostingXQOrderDetail();
        struct.orderDetail.read(iprot);
        struct.setOrderDetailIsSet(true);
      }
      if (incoming.get(6)) {
        struct.orderState = new HostingXQOrderState();
        struct.orderState.read(iprot);
        struct.setOrderStateIsSet(true);
      }
      if (incoming.get(7)) {
        struct.orderTradeSummary = new HostingXQTradeSummary();
        struct.orderTradeSummary.read(iprot);
        struct.setOrderTradeSummaryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.version = iprot.readI32();
        struct.setVersionIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(11)) {
        struct.sourceOrderId = iprot.readString();
        struct.setSourceOrderIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.actionOrderId = iprot.readString();
        struct.setActionOrderIdIsSet(true);
      }
      if (incoming.get(13)) {
        struct.gfdOrderEndTimestampMs = iprot.readI64();
        struct.setGfdOrderEndTimestampMsIsSet(true);
      }
    }
  }

}

