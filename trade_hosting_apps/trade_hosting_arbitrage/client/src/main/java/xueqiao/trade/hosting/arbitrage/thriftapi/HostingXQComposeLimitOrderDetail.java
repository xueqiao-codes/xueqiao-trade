/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQComposeLimitOrderDetail implements org.apache.thrift.TBase<HostingXQComposeLimitOrderDetail, HostingXQComposeLimitOrderDetail._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQComposeLimitOrderDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQComposeLimitOrderDetail");

  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField EFFECT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("effectDate", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField EXEC_PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("execParams", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQComposeLimitOrderDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQComposeLimitOrderDetailTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection direction; // optional
  public double limitPrice; // optional
  public int quantity; // optional
  public HostingXQEffectDate effectDate; // optional
  public HostingXQComposeLimitOrderExecParams execParams; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQTradeDirection
     */
    DIRECTION((short)1, "direction"),
    LIMIT_PRICE((short)2, "limitPrice"),
    QUANTITY((short)3, "quantity"),
    EFFECT_DATE((short)4, "effectDate"),
    EXEC_PARAMS((short)5, "execParams");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DIRECTION
          return DIRECTION;
        case 2: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 3: // QUANTITY
          return QUANTITY;
        case 4: // EFFECT_DATE
          return EFFECT_DATE;
        case 5: // EXEC_PARAMS
          return EXEC_PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITPRICE_ISSET_ID = 0;
  private static final int __QUANTITY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DIRECTION,_Fields.LIMIT_PRICE,_Fields.QUANTITY,_Fields.EFFECT_DATE,_Fields.EXEC_PARAMS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQTradeDirection.class)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EFFECT_DATE, new org.apache.thrift.meta_data.FieldMetaData("effectDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQEffectDate.class)));
    tmpMap.put(_Fields.EXEC_PARAMS, new org.apache.thrift.meta_data.FieldMetaData("execParams", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQComposeLimitOrderExecParams.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQComposeLimitOrderDetail.class, metaDataMap);
  }

  public HostingXQComposeLimitOrderDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQComposeLimitOrderDetail(HostingXQComposeLimitOrderDetail other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
    this.limitPrice = other.limitPrice;
    this.quantity = other.quantity;
    if (other.isSetEffectDate()) {
      this.effectDate = new HostingXQEffectDate(other.effectDate);
    }
    if (other.isSetExecParams()) {
      this.execParams = new HostingXQComposeLimitOrderExecParams(other.execParams);
    }
  }

  public HostingXQComposeLimitOrderDetail deepCopy() {
    return new HostingXQComposeLimitOrderDetail(this);
  }

  @Override
  public void clear() {
    this.direction = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.effectDate = null;
    this.execParams = null;
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQComposeLimitOrderDetail setDirection(HostingXQTradeDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public HostingXQComposeLimitOrderDetail setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getQuantity() {
    return this.quantity;
  }

  public HostingXQComposeLimitOrderDetail setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public HostingXQEffectDate getEffectDate() {
    return this.effectDate;
  }

  public HostingXQComposeLimitOrderDetail setEffectDate(HostingXQEffectDate effectDate) {
    this.effectDate = effectDate;
    return this;
  }

  public void unsetEffectDate() {
    this.effectDate = null;
  }

  /** Returns true if field effectDate is set (has been assigned a value) and false otherwise */
  public boolean isSetEffectDate() {
    return this.effectDate != null;
  }

  public void setEffectDateIsSet(boolean value) {
    if (!value) {
      this.effectDate = null;
    }
  }

  public HostingXQComposeLimitOrderExecParams getExecParams() {
    return this.execParams;
  }

  public HostingXQComposeLimitOrderDetail setExecParams(HostingXQComposeLimitOrderExecParams execParams) {
    this.execParams = execParams;
    return this;
  }

  public void unsetExecParams() {
    this.execParams = null;
  }

  /** Returns true if field execParams is set (has been assigned a value) and false otherwise */
  public boolean isSetExecParams() {
    return this.execParams != null;
  }

  public void setExecParamsIsSet(boolean value) {
    if (!value) {
      this.execParams = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((HostingXQTradeDirection)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case EFFECT_DATE:
      if (value == null) {
        unsetEffectDate();
      } else {
        setEffectDate((HostingXQEffectDate)value);
      }
      break;

    case EXEC_PARAMS:
      if (value == null) {
        unsetExecParams();
      } else {
        setExecParams((HostingXQComposeLimitOrderExecParams)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DIRECTION:
      return getDirection();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case EFFECT_DATE:
      return getEffectDate();

    case EXEC_PARAMS:
      return getExecParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DIRECTION:
      return isSetDirection();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case QUANTITY:
      return isSetQuantity();
    case EFFECT_DATE:
      return isSetEffectDate();
    case EXEC_PARAMS:
      return isSetExecParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQComposeLimitOrderDetail)
      return this.equals((HostingXQComposeLimitOrderDetail)that);
    return false;
  }

  public boolean equals(HostingXQComposeLimitOrderDetail that) {
    if (that == null)
      return false;

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_effectDate = true && this.isSetEffectDate();
    boolean that_present_effectDate = true && that.isSetEffectDate();
    if (this_present_effectDate || that_present_effectDate) {
      if (!(this_present_effectDate && that_present_effectDate))
        return false;
      if (!this.effectDate.equals(that.effectDate))
        return false;
    }

    boolean this_present_execParams = true && this.isSetExecParams();
    boolean that_present_execParams = true && that.isSetExecParams();
    if (this_present_execParams || that_present_execParams) {
      if (!(this_present_execParams && that_present_execParams))
        return false;
      if (!this.execParams.equals(that.execParams))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQComposeLimitOrderDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDirection()).compareTo(other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEffectDate()).compareTo(other.isSetEffectDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEffectDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.effectDate, other.effectDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExecParams()).compareTo(other.isSetExecParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.execParams, other.execParams);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQComposeLimitOrderDetail(");
    boolean first = true;

    if (isSetDirection()) {
      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetEffectDate()) {
      if (!first) sb.append(", ");
      sb.append("effectDate:");
      if (this.effectDate == null) {
        sb.append("null");
      } else {
        sb.append(this.effectDate);
      }
      first = false;
    }
    if (isSetExecParams()) {
      if (!first) sb.append(", ");
      sb.append("execParams:");
      if (this.execParams == null) {
        sb.append("null");
      } else {
        sb.append(this.execParams);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (effectDate != null) {
      effectDate.validate();
    }
    if (execParams != null) {
      execParams.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQComposeLimitOrderDetailStandardSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderDetailStandardScheme getScheme() {
      return new HostingXQComposeLimitOrderDetailStandardScheme();
    }
  }

  private static class HostingXQComposeLimitOrderDetailStandardScheme extends StandardScheme<HostingXQComposeLimitOrderDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQComposeLimitOrderDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = HostingXQTradeDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EFFECT_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.effectDate = new HostingXQEffectDate();
              struct.effectDate.read(iprot);
              struct.setEffectDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXEC_PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.execParams = new HostingXQComposeLimitOrderExecParams();
              struct.execParams.read(iprot);
              struct.setExecParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQComposeLimitOrderDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.direction != null) {
        if (struct.isSetDirection()) {
          oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.direction.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.effectDate != null) {
        if (struct.isSetEffectDate()) {
          oprot.writeFieldBegin(EFFECT_DATE_FIELD_DESC);
          struct.effectDate.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.execParams != null) {
        if (struct.isSetExecParams()) {
          oprot.writeFieldBegin(EXEC_PARAMS_FIELD_DESC);
          struct.execParams.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQComposeLimitOrderDetailTupleSchemeFactory implements SchemeFactory {
    public HostingXQComposeLimitOrderDetailTupleScheme getScheme() {
      return new HostingXQComposeLimitOrderDetailTupleScheme();
    }
  }

  private static class HostingXQComposeLimitOrderDetailTupleScheme extends TupleScheme<HostingXQComposeLimitOrderDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDirection()) {
        optionals.set(0);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(1);
      }
      if (struct.isSetQuantity()) {
        optionals.set(2);
      }
      if (struct.isSetEffectDate()) {
        optionals.set(3);
      }
      if (struct.isSetExecParams()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetEffectDate()) {
        struct.effectDate.write(oprot);
      }
      if (struct.isSetExecParams()) {
        struct.execParams.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQComposeLimitOrderDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.direction = HostingXQTradeDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(3)) {
        struct.effectDate = new HostingXQEffectDate();
        struct.effectDate.read(iprot);
        struct.setEffectDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.execParams = new HostingXQComposeLimitOrderExecParams();
        struct.execParams.read(iprot);
        struct.setExecParamsIsSet(true);
      }
    }
  }

}

