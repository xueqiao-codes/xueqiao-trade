/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQSubTradeSummary implements org.apache.thrift.TBase<HostingXQSubTradeSummary, HostingXQSubTradeSummary._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQSubTradeSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQSubTradeSummary");

  private static final org.apache.thrift.protocol.TField SUB_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("subTarget", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("subTradeVolume", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_TRADE_AVERAGE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("subTradeAveragePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQSubTradeSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQSubTradeSummaryTupleSchemeFactory());
  }

  public HostingXQTarget subTarget; // optional
  public int subTradeVolume; // optional
  public double subTradeAveragePrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_TARGET((short)1, "subTarget"),
    SUB_TRADE_VOLUME((short)2, "subTradeVolume"),
    SUB_TRADE_AVERAGE_PRICE((short)3, "subTradeAveragePrice");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_TARGET
          return SUB_TARGET;
        case 2: // SUB_TRADE_VOLUME
          return SUB_TRADE_VOLUME;
        case 3: // SUB_TRADE_AVERAGE_PRICE
          return SUB_TRADE_AVERAGE_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBTRADEVOLUME_ISSET_ID = 0;
  private static final int __SUBTRADEAVERAGEPRICE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_TARGET,_Fields.SUB_TRADE_VOLUME,_Fields.SUB_TRADE_AVERAGE_PRICE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_TARGET, new org.apache.thrift.meta_data.FieldMetaData("subTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTarget.class)));
    tmpMap.put(_Fields.SUB_TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("subTradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_TRADE_AVERAGE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("subTradeAveragePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQSubTradeSummary.class, metaDataMap);
  }

  public HostingXQSubTradeSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQSubTradeSummary(HostingXQSubTradeSummary other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSubTarget()) {
      this.subTarget = new HostingXQTarget(other.subTarget);
    }
    this.subTradeVolume = other.subTradeVolume;
    this.subTradeAveragePrice = other.subTradeAveragePrice;
  }

  public HostingXQSubTradeSummary deepCopy() {
    return new HostingXQSubTradeSummary(this);
  }

  @Override
  public void clear() {
    this.subTarget = null;
    setSubTradeVolumeIsSet(false);
    this.subTradeVolume = 0;
    setSubTradeAveragePriceIsSet(false);
    this.subTradeAveragePrice = 0.0;
  }

  public HostingXQTarget getSubTarget() {
    return this.subTarget;
  }

  public HostingXQSubTradeSummary setSubTarget(HostingXQTarget subTarget) {
    this.subTarget = subTarget;
    return this;
  }

  public void unsetSubTarget() {
    this.subTarget = null;
  }

  /** Returns true if field subTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTarget() {
    return this.subTarget != null;
  }

  public void setSubTargetIsSet(boolean value) {
    if (!value) {
      this.subTarget = null;
    }
  }

  public int getSubTradeVolume() {
    return this.subTradeVolume;
  }

  public HostingXQSubTradeSummary setSubTradeVolume(int subTradeVolume) {
    this.subTradeVolume = subTradeVolume;
    setSubTradeVolumeIsSet(true);
    return this;
  }

  public void unsetSubTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field subTradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTRADEVOLUME_ISSET_ID);
  }

  public void setSubTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTRADEVOLUME_ISSET_ID, value);
  }

  public double getSubTradeAveragePrice() {
    return this.subTradeAveragePrice;
  }

  public HostingXQSubTradeSummary setSubTradeAveragePrice(double subTradeAveragePrice) {
    this.subTradeAveragePrice = subTradeAveragePrice;
    setSubTradeAveragePriceIsSet(true);
    return this;
  }

  public void unsetSubTradeAveragePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBTRADEAVERAGEPRICE_ISSET_ID);
  }

  /** Returns true if field subTradeAveragePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSubTradeAveragePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBTRADEAVERAGEPRICE_ISSET_ID);
  }

  public void setSubTradeAveragePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBTRADEAVERAGEPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_TARGET:
      if (value == null) {
        unsetSubTarget();
      } else {
        setSubTarget((HostingXQTarget)value);
      }
      break;

    case SUB_TRADE_VOLUME:
      if (value == null) {
        unsetSubTradeVolume();
      } else {
        setSubTradeVolume((Integer)value);
      }
      break;

    case SUB_TRADE_AVERAGE_PRICE:
      if (value == null) {
        unsetSubTradeAveragePrice();
      } else {
        setSubTradeAveragePrice((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_TARGET:
      return getSubTarget();

    case SUB_TRADE_VOLUME:
      return Integer.valueOf(getSubTradeVolume());

    case SUB_TRADE_AVERAGE_PRICE:
      return Double.valueOf(getSubTradeAveragePrice());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_TARGET:
      return isSetSubTarget();
    case SUB_TRADE_VOLUME:
      return isSetSubTradeVolume();
    case SUB_TRADE_AVERAGE_PRICE:
      return isSetSubTradeAveragePrice();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQSubTradeSummary)
      return this.equals((HostingXQSubTradeSummary)that);
    return false;
  }

  public boolean equals(HostingXQSubTradeSummary that) {
    if (that == null)
      return false;

    boolean this_present_subTarget = true && this.isSetSubTarget();
    boolean that_present_subTarget = true && that.isSetSubTarget();
    if (this_present_subTarget || that_present_subTarget) {
      if (!(this_present_subTarget && that_present_subTarget))
        return false;
      if (!this.subTarget.equals(that.subTarget))
        return false;
    }

    boolean this_present_subTradeVolume = true && this.isSetSubTradeVolume();
    boolean that_present_subTradeVolume = true && that.isSetSubTradeVolume();
    if (this_present_subTradeVolume || that_present_subTradeVolume) {
      if (!(this_present_subTradeVolume && that_present_subTradeVolume))
        return false;
      if (this.subTradeVolume != that.subTradeVolume)
        return false;
    }

    boolean this_present_subTradeAveragePrice = true && this.isSetSubTradeAveragePrice();
    boolean that_present_subTradeAveragePrice = true && that.isSetSubTradeAveragePrice();
    if (this_present_subTradeAveragePrice || that_present_subTradeAveragePrice) {
      if (!(this_present_subTradeAveragePrice && that_present_subTradeAveragePrice))
        return false;
      if (this.subTradeAveragePrice != that.subTradeAveragePrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQSubTradeSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubTarget()).compareTo(other.isSetSubTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTarget, other.subTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTradeVolume()).compareTo(other.isSetSubTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTradeVolume, other.subTradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubTradeAveragePrice()).compareTo(other.isSetSubTradeAveragePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubTradeAveragePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subTradeAveragePrice, other.subTradeAveragePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQSubTradeSummary(");
    boolean first = true;

    if (isSetSubTarget()) {
      sb.append("subTarget:");
      if (this.subTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.subTarget);
      }
      first = false;
    }
    if (isSetSubTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("subTradeVolume:");
      sb.append(this.subTradeVolume);
      first = false;
    }
    if (isSetSubTradeAveragePrice()) {
      if (!first) sb.append(", ");
      sb.append("subTradeAveragePrice:");
      sb.append(this.subTradeAveragePrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (subTarget != null) {
      subTarget.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQSubTradeSummaryStandardSchemeFactory implements SchemeFactory {
    public HostingXQSubTradeSummaryStandardScheme getScheme() {
      return new HostingXQSubTradeSummaryStandardScheme();
    }
  }

  private static class HostingXQSubTradeSummaryStandardScheme extends StandardScheme<HostingXQSubTradeSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQSubTradeSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.subTarget = new HostingXQTarget();
              struct.subTarget.read(iprot);
              struct.setSubTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subTradeVolume = iprot.readI32();
              struct.setSubTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_TRADE_AVERAGE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.subTradeAveragePrice = iprot.readDouble();
              struct.setSubTradeAveragePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQSubTradeSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.subTarget != null) {
        if (struct.isSetSubTarget()) {
          oprot.writeFieldBegin(SUB_TARGET_FIELD_DESC);
          struct.subTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSubTradeVolume()) {
        oprot.writeFieldBegin(SUB_TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.subTradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubTradeAveragePrice()) {
        oprot.writeFieldBegin(SUB_TRADE_AVERAGE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.subTradeAveragePrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQSubTradeSummaryTupleSchemeFactory implements SchemeFactory {
    public HostingXQSubTradeSummaryTupleScheme getScheme() {
      return new HostingXQSubTradeSummaryTupleScheme();
    }
  }

  private static class HostingXQSubTradeSummaryTupleScheme extends TupleScheme<HostingXQSubTradeSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQSubTradeSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubTarget()) {
        optionals.set(0);
      }
      if (struct.isSetSubTradeVolume()) {
        optionals.set(1);
      }
      if (struct.isSetSubTradeAveragePrice()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubTarget()) {
        struct.subTarget.write(oprot);
      }
      if (struct.isSetSubTradeVolume()) {
        oprot.writeI32(struct.subTradeVolume);
      }
      if (struct.isSetSubTradeAveragePrice()) {
        oprot.writeDouble(struct.subTradeAveragePrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQSubTradeSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.subTarget = new HostingXQTarget();
        struct.subTarget.read(iprot);
        struct.setSubTargetIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subTradeVolume = iprot.readI32();
        struct.setSubTradeVolumeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subTradeAveragePrice = iprot.readDouble();
        struct.setSubTradeAveragePriceIsSet(true);
      }
    }
  }

}

