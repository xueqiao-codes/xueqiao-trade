/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQOrderPrice implements org.apache.thrift.TBase<HostingXQOrderPrice, HostingXQOrderPrice._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQOrderPrice> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQOrderPrice");

  private static final org.apache.thrift.protocol.TField PRICE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("priceType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LIMIT_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitPrice", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField CHASE_PRICE_TICKS_FIELD_DESC = new org.apache.thrift.protocol.TField("chasePriceTicks", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField CHASE_PRICE_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("chasePriceValue", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQOrderPriceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQOrderPriceTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQOrderPriceType
   */
  public HostingXQOrderPriceType priceType; // optional
  public double limitPrice; // optional
  public int chasePriceTicks; // optional
  public double chasePriceValue; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQOrderPriceType
     */
    PRICE_TYPE((short)1, "priceType"),
    LIMIT_PRICE((short)2, "limitPrice"),
    CHASE_PRICE_TICKS((short)3, "chasePriceTicks"),
    CHASE_PRICE_VALUE((short)4, "chasePriceValue");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRICE_TYPE
          return PRICE_TYPE;
        case 2: // LIMIT_PRICE
          return LIMIT_PRICE;
        case 3: // CHASE_PRICE_TICKS
          return CHASE_PRICE_TICKS;
        case 4: // CHASE_PRICE_VALUE
          return CHASE_PRICE_VALUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITPRICE_ISSET_ID = 0;
  private static final int __CHASEPRICETICKS_ISSET_ID = 1;
  private static final int __CHASEPRICEVALUE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.PRICE_TYPE,_Fields.LIMIT_PRICE,_Fields.CHASE_PRICE_TICKS,_Fields.CHASE_PRICE_VALUE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRICE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("priceType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQOrderPriceType.class)));
    tmpMap.put(_Fields.LIMIT_PRICE, new org.apache.thrift.meta_data.FieldMetaData("limitPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CHASE_PRICE_TICKS, new org.apache.thrift.meta_data.FieldMetaData("chasePriceTicks", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CHASE_PRICE_VALUE, new org.apache.thrift.meta_data.FieldMetaData("chasePriceValue", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQOrderPrice.class, metaDataMap);
  }

  public HostingXQOrderPrice() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQOrderPrice(HostingXQOrderPrice other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPriceType()) {
      this.priceType = other.priceType;
    }
    this.limitPrice = other.limitPrice;
    this.chasePriceTicks = other.chasePriceTicks;
    this.chasePriceValue = other.chasePriceValue;
  }

  public HostingXQOrderPrice deepCopy() {
    return new HostingXQOrderPrice(this);
  }

  @Override
  public void clear() {
    this.priceType = null;
    setLimitPriceIsSet(false);
    this.limitPrice = 0.0;
    setChasePriceTicksIsSet(false);
    this.chasePriceTicks = 0;
    setChasePriceValueIsSet(false);
    this.chasePriceValue = 0.0;
  }

  /**
   * 
   * @see HostingXQOrderPriceType
   */
  public HostingXQOrderPriceType getPriceType() {
    return this.priceType;
  }

  /**
   * 
   * @see HostingXQOrderPriceType
   */
  public HostingXQOrderPrice setPriceType(HostingXQOrderPriceType priceType) {
    this.priceType = priceType;
    return this;
  }

  public void unsetPriceType() {
    this.priceType = null;
  }

  /** Returns true if field priceType is set (has been assigned a value) and false otherwise */
  public boolean isSetPriceType() {
    return this.priceType != null;
  }

  public void setPriceTypeIsSet(boolean value) {
    if (!value) {
      this.priceType = null;
    }
  }

  public double getLimitPrice() {
    return this.limitPrice;
  }

  public HostingXQOrderPrice setLimitPrice(double limitPrice) {
    this.limitPrice = limitPrice;
    setLimitPriceIsSet(true);
    return this;
  }

  public void unsetLimitPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  /** Returns true if field limitPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITPRICE_ISSET_ID);
  }

  public void setLimitPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITPRICE_ISSET_ID, value);
  }

  public int getChasePriceTicks() {
    return this.chasePriceTicks;
  }

  public HostingXQOrderPrice setChasePriceTicks(int chasePriceTicks) {
    this.chasePriceTicks = chasePriceTicks;
    setChasePriceTicksIsSet(true);
    return this;
  }

  public void unsetChasePriceTicks() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHASEPRICETICKS_ISSET_ID);
  }

  /** Returns true if field chasePriceTicks is set (has been assigned a value) and false otherwise */
  public boolean isSetChasePriceTicks() {
    return EncodingUtils.testBit(__isset_bitfield, __CHASEPRICETICKS_ISSET_ID);
  }

  public void setChasePriceTicksIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHASEPRICETICKS_ISSET_ID, value);
  }

  public double getChasePriceValue() {
    return this.chasePriceValue;
  }

  public HostingXQOrderPrice setChasePriceValue(double chasePriceValue) {
    this.chasePriceValue = chasePriceValue;
    setChasePriceValueIsSet(true);
    return this;
  }

  public void unsetChasePriceValue() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHASEPRICEVALUE_ISSET_ID);
  }

  /** Returns true if field chasePriceValue is set (has been assigned a value) and false otherwise */
  public boolean isSetChasePriceValue() {
    return EncodingUtils.testBit(__isset_bitfield, __CHASEPRICEVALUE_ISSET_ID);
  }

  public void setChasePriceValueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHASEPRICEVALUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PRICE_TYPE:
      if (value == null) {
        unsetPriceType();
      } else {
        setPriceType((HostingXQOrderPriceType)value);
      }
      break;

    case LIMIT_PRICE:
      if (value == null) {
        unsetLimitPrice();
      } else {
        setLimitPrice((Double)value);
      }
      break;

    case CHASE_PRICE_TICKS:
      if (value == null) {
        unsetChasePriceTicks();
      } else {
        setChasePriceTicks((Integer)value);
      }
      break;

    case CHASE_PRICE_VALUE:
      if (value == null) {
        unsetChasePriceValue();
      } else {
        setChasePriceValue((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PRICE_TYPE:
      return getPriceType();

    case LIMIT_PRICE:
      return Double.valueOf(getLimitPrice());

    case CHASE_PRICE_TICKS:
      return Integer.valueOf(getChasePriceTicks());

    case CHASE_PRICE_VALUE:
      return Double.valueOf(getChasePriceValue());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PRICE_TYPE:
      return isSetPriceType();
    case LIMIT_PRICE:
      return isSetLimitPrice();
    case CHASE_PRICE_TICKS:
      return isSetChasePriceTicks();
    case CHASE_PRICE_VALUE:
      return isSetChasePriceValue();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQOrderPrice)
      return this.equals((HostingXQOrderPrice)that);
    return false;
  }

  public boolean equals(HostingXQOrderPrice that) {
    if (that == null)
      return false;

    boolean this_present_priceType = true && this.isSetPriceType();
    boolean that_present_priceType = true && that.isSetPriceType();
    if (this_present_priceType || that_present_priceType) {
      if (!(this_present_priceType && that_present_priceType))
        return false;
      if (!this.priceType.equals(that.priceType))
        return false;
    }

    boolean this_present_limitPrice = true && this.isSetLimitPrice();
    boolean that_present_limitPrice = true && that.isSetLimitPrice();
    if (this_present_limitPrice || that_present_limitPrice) {
      if (!(this_present_limitPrice && that_present_limitPrice))
        return false;
      if (this.limitPrice != that.limitPrice)
        return false;
    }

    boolean this_present_chasePriceTicks = true && this.isSetChasePriceTicks();
    boolean that_present_chasePriceTicks = true && that.isSetChasePriceTicks();
    if (this_present_chasePriceTicks || that_present_chasePriceTicks) {
      if (!(this_present_chasePriceTicks && that_present_chasePriceTicks))
        return false;
      if (this.chasePriceTicks != that.chasePriceTicks)
        return false;
    }

    boolean this_present_chasePriceValue = true && this.isSetChasePriceValue();
    boolean that_present_chasePriceValue = true && that.isSetChasePriceValue();
    if (this_present_chasePriceValue || that_present_chasePriceValue) {
      if (!(this_present_chasePriceValue && that_present_chasePriceValue))
        return false;
      if (this.chasePriceValue != that.chasePriceValue)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQOrderPrice other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPriceType()).compareTo(other.isSetPriceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priceType, other.priceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitPrice()).compareTo(other.isSetLimitPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitPrice, other.limitPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChasePriceTicks()).compareTo(other.isSetChasePriceTicks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChasePriceTicks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chasePriceTicks, other.chasePriceTicks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChasePriceValue()).compareTo(other.isSetChasePriceValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChasePriceValue()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chasePriceValue, other.chasePriceValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQOrderPrice(");
    boolean first = true;

    if (isSetPriceType()) {
      sb.append("priceType:");
      if (this.priceType == null) {
        sb.append("null");
      } else {
        sb.append(this.priceType);
      }
      first = false;
    }
    if (isSetLimitPrice()) {
      if (!first) sb.append(", ");
      sb.append("limitPrice:");
      sb.append(this.limitPrice);
      first = false;
    }
    if (isSetChasePriceTicks()) {
      if (!first) sb.append(", ");
      sb.append("chasePriceTicks:");
      sb.append(this.chasePriceTicks);
      first = false;
    }
    if (isSetChasePriceValue()) {
      if (!first) sb.append(", ");
      sb.append("chasePriceValue:");
      sb.append(this.chasePriceValue);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQOrderPriceStandardSchemeFactory implements SchemeFactory {
    public HostingXQOrderPriceStandardScheme getScheme() {
      return new HostingXQOrderPriceStandardScheme();
    }
  }

  private static class HostingXQOrderPriceStandardScheme extends StandardScheme<HostingXQOrderPrice> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQOrderPrice struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRICE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priceType = HostingXQOrderPriceType.findByValue(iprot.readI32());
              struct.setPriceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIMIT_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.limitPrice = iprot.readDouble();
              struct.setLimitPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHASE_PRICE_TICKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.chasePriceTicks = iprot.readI32();
              struct.setChasePriceTicksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHASE_PRICE_VALUE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.chasePriceValue = iprot.readDouble();
              struct.setChasePriceValueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQOrderPrice struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.priceType != null) {
        if (struct.isSetPriceType()) {
          oprot.writeFieldBegin(PRICE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.priceType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeFieldBegin(LIMIT_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.limitPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChasePriceTicks()) {
        oprot.writeFieldBegin(CHASE_PRICE_TICKS_FIELD_DESC);
        oprot.writeI32(struct.chasePriceTicks);
        oprot.writeFieldEnd();
      }
      if (struct.isSetChasePriceValue()) {
        oprot.writeFieldBegin(CHASE_PRICE_VALUE_FIELD_DESC);
        oprot.writeDouble(struct.chasePriceValue);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQOrderPriceTupleSchemeFactory implements SchemeFactory {
    public HostingXQOrderPriceTupleScheme getScheme() {
      return new HostingXQOrderPriceTupleScheme();
    }
  }

  private static class HostingXQOrderPriceTupleScheme extends TupleScheme<HostingXQOrderPrice> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderPrice struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPriceType()) {
        optionals.set(0);
      }
      if (struct.isSetLimitPrice()) {
        optionals.set(1);
      }
      if (struct.isSetChasePriceTicks()) {
        optionals.set(2);
      }
      if (struct.isSetChasePriceValue()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetPriceType()) {
        oprot.writeI32(struct.priceType.getValue());
      }
      if (struct.isSetLimitPrice()) {
        oprot.writeDouble(struct.limitPrice);
      }
      if (struct.isSetChasePriceTicks()) {
        oprot.writeI32(struct.chasePriceTicks);
      }
      if (struct.isSetChasePriceValue()) {
        oprot.writeDouble(struct.chasePriceValue);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQOrderPrice struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.priceType = HostingXQOrderPriceType.findByValue(iprot.readI32());
        struct.setPriceTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.limitPrice = iprot.readDouble();
        struct.setLimitPriceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chasePriceTicks = iprot.readI32();
        struct.setChasePriceTicksIsSet(true);
      }
      if (incoming.get(3)) {
        struct.chasePriceValue = iprot.readDouble();
        struct.setChasePriceValueIsSet(true);
      }
    }
  }

}

