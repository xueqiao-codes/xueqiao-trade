/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQTrade implements org.apache.thrift.TBase<HostingXQTrade, HostingXQTrade._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQTrade> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQTrade");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeTarget", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField TRADE_VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeVolume", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TRADE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("tradePrice", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subUserId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TRADE_DIRETION_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDiretion", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField SOURCE_ORDER_TARGET_FIELD_DESC = new org.apache.thrift.protocol.TField("sourceOrderTarget", org.apache.thrift.protocol.TType.STRUCT, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQTradeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQTradeTupleSchemeFactory());
  }

  public String orderId; // optional
  public long tradeId; // optional
  public HostingXQTarget tradeTarget; // optional
  public int tradeVolume; // optional
  public double tradePrice; // optional
  public int subUserId; // optional
  public long subAccountId; // optional
  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection tradeDiretion; // optional
  public HostingXQTarget sourceOrderTarget; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    TRADE_ID((short)2, "tradeId"),
    TRADE_TARGET((short)3, "tradeTarget"),
    TRADE_VOLUME((short)4, "tradeVolume"),
    TRADE_PRICE((short)5, "tradePrice"),
    SUB_USER_ID((short)6, "subUserId"),
    SUB_ACCOUNT_ID((short)7, "subAccountId"),
    /**
     * 
     * @see HostingXQTradeDirection
     */
    TRADE_DIRETION((short)9, "tradeDiretion"),
    SOURCE_ORDER_TARGET((short)10, "sourceOrderTarget"),
    CREATE_TIMESTAMP_MS((short)12, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)13, "lastmodifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // TRADE_ID
          return TRADE_ID;
        case 3: // TRADE_TARGET
          return TRADE_TARGET;
        case 4: // TRADE_VOLUME
          return TRADE_VOLUME;
        case 5: // TRADE_PRICE
          return TRADE_PRICE;
        case 6: // SUB_USER_ID
          return SUB_USER_ID;
        case 7: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 9: // TRADE_DIRETION
          return TRADE_DIRETION;
        case 10: // SOURCE_ORDER_TARGET
          return SOURCE_ORDER_TARGET;
        case 12: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 13: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEID_ISSET_ID = 0;
  private static final int __TRADEVOLUME_ISSET_ID = 1;
  private static final int __TRADEPRICE_ISSET_ID = 2;
  private static final int __SUBUSERID_ISSET_ID = 3;
  private static final int __SUBACCOUNTID_ISSET_ID = 4;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 5;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.TRADE_ID,_Fields.TRADE_TARGET,_Fields.TRADE_VOLUME,_Fields.TRADE_PRICE,_Fields.SUB_USER_ID,_Fields.SUB_ACCOUNT_ID,_Fields.TRADE_DIRETION,_Fields.SOURCE_ORDER_TARGET,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRADE_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_TARGET, new org.apache.thrift.meta_data.FieldMetaData("tradeTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTarget.class)));
    tmpMap.put(_Fields.TRADE_VOLUME, new org.apache.thrift.meta_data.FieldMetaData("tradeVolume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TRADE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("tradePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("subUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_DIRETION, new org.apache.thrift.meta_data.FieldMetaData("tradeDiretion", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQTradeDirection.class)));
    tmpMap.put(_Fields.SOURCE_ORDER_TARGET, new org.apache.thrift.meta_data.FieldMetaData("sourceOrderTarget", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQTarget.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQTrade.class, metaDataMap);
  }

  public HostingXQTrade() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQTrade(HostingXQTrade other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    this.tradeId = other.tradeId;
    if (other.isSetTradeTarget()) {
      this.tradeTarget = new HostingXQTarget(other.tradeTarget);
    }
    this.tradeVolume = other.tradeVolume;
    this.tradePrice = other.tradePrice;
    this.subUserId = other.subUserId;
    this.subAccountId = other.subAccountId;
    if (other.isSetTradeDiretion()) {
      this.tradeDiretion = other.tradeDiretion;
    }
    if (other.isSetSourceOrderTarget()) {
      this.sourceOrderTarget = new HostingXQTarget(other.sourceOrderTarget);
    }
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
  }

  public HostingXQTrade deepCopy() {
    return new HostingXQTrade(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    setTradeIdIsSet(false);
    this.tradeId = 0;
    this.tradeTarget = null;
    setTradeVolumeIsSet(false);
    this.tradeVolume = 0;
    setTradePriceIsSet(false);
    this.tradePrice = 0.0;
    setSubUserIdIsSet(false);
    this.subUserId = 0;
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.tradeDiretion = null;
    this.sourceOrderTarget = null;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
  }

  public String getOrderId() {
    return this.orderId;
  }

  public HostingXQTrade setOrderId(String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  public long getTradeId() {
    return this.tradeId;
  }

  public HostingXQTrade setTradeId(long tradeId) {
    this.tradeId = tradeId;
    setTradeIdIsSet(true);
    return this;
  }

  public void unsetTradeId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEID_ISSET_ID);
  }

  /** Returns true if field tradeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEID_ISSET_ID);
  }

  public void setTradeIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEID_ISSET_ID, value);
  }

  public HostingXQTarget getTradeTarget() {
    return this.tradeTarget;
  }

  public HostingXQTrade setTradeTarget(HostingXQTarget tradeTarget) {
    this.tradeTarget = tradeTarget;
    return this;
  }

  public void unsetTradeTarget() {
    this.tradeTarget = null;
  }

  /** Returns true if field tradeTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeTarget() {
    return this.tradeTarget != null;
  }

  public void setTradeTargetIsSet(boolean value) {
    if (!value) {
      this.tradeTarget = null;
    }
  }

  public int getTradeVolume() {
    return this.tradeVolume;
  }

  public HostingXQTrade setTradeVolume(int tradeVolume) {
    this.tradeVolume = tradeVolume;
    setTradeVolumeIsSet(true);
    return this;
  }

  public void unsetTradeVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  /** Returns true if field tradeVolume is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID);
  }

  public void setTradeVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEVOLUME_ISSET_ID, value);
  }

  public double getTradePrice() {
    return this.tradePrice;
  }

  public HostingXQTrade setTradePrice(double tradePrice) {
    this.tradePrice = tradePrice;
    setTradePriceIsSet(true);
    return this;
  }

  public void unsetTradePrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  /** Returns true if field tradePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetTradePrice() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEPRICE_ISSET_ID);
  }

  public void setTradePriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEPRICE_ISSET_ID, value);
  }

  public int getSubUserId() {
    return this.subUserId;
  }

  public HostingXQTrade setSubUserId(int subUserId) {
    this.subUserId = subUserId;
    setSubUserIdIsSet(true);
    return this;
  }

  public void unsetSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  /** Returns true if field subUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBUSERID_ISSET_ID);
  }

  public void setSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBUSERID_ISSET_ID, value);
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public HostingXQTrade setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection getTradeDiretion() {
    return this.tradeDiretion;
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTrade setTradeDiretion(HostingXQTradeDirection tradeDiretion) {
    this.tradeDiretion = tradeDiretion;
    return this;
  }

  public void unsetTradeDiretion() {
    this.tradeDiretion = null;
  }

  /** Returns true if field tradeDiretion is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDiretion() {
    return this.tradeDiretion != null;
  }

  public void setTradeDiretionIsSet(boolean value) {
    if (!value) {
      this.tradeDiretion = null;
    }
  }

  public HostingXQTarget getSourceOrderTarget() {
    return this.sourceOrderTarget;
  }

  public HostingXQTrade setSourceOrderTarget(HostingXQTarget sourceOrderTarget) {
    this.sourceOrderTarget = sourceOrderTarget;
    return this;
  }

  public void unsetSourceOrderTarget() {
    this.sourceOrderTarget = null;
  }

  /** Returns true if field sourceOrderTarget is set (has been assigned a value) and false otherwise */
  public boolean isSetSourceOrderTarget() {
    return this.sourceOrderTarget != null;
  }

  public void setSourceOrderTargetIsSet(boolean value) {
    if (!value) {
      this.sourceOrderTarget = null;
    }
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public HostingXQTrade setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public HostingXQTrade setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((String)value);
      }
      break;

    case TRADE_ID:
      if (value == null) {
        unsetTradeId();
      } else {
        setTradeId((Long)value);
      }
      break;

    case TRADE_TARGET:
      if (value == null) {
        unsetTradeTarget();
      } else {
        setTradeTarget((HostingXQTarget)value);
      }
      break;

    case TRADE_VOLUME:
      if (value == null) {
        unsetTradeVolume();
      } else {
        setTradeVolume((Integer)value);
      }
      break;

    case TRADE_PRICE:
      if (value == null) {
        unsetTradePrice();
      } else {
        setTradePrice((Double)value);
      }
      break;

    case SUB_USER_ID:
      if (value == null) {
        unsetSubUserId();
      } else {
        setSubUserId((Integer)value);
      }
      break;

    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case TRADE_DIRETION:
      if (value == null) {
        unsetTradeDiretion();
      } else {
        setTradeDiretion((HostingXQTradeDirection)value);
      }
      break;

    case SOURCE_ORDER_TARGET:
      if (value == null) {
        unsetSourceOrderTarget();
      } else {
        setSourceOrderTarget((HostingXQTarget)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case TRADE_ID:
      return Long.valueOf(getTradeId());

    case TRADE_TARGET:
      return getTradeTarget();

    case TRADE_VOLUME:
      return Integer.valueOf(getTradeVolume());

    case TRADE_PRICE:
      return Double.valueOf(getTradePrice());

    case SUB_USER_ID:
      return Integer.valueOf(getSubUserId());

    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case TRADE_DIRETION:
      return getTradeDiretion();

    case SOURCE_ORDER_TARGET:
      return getSourceOrderTarget();

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case TRADE_ID:
      return isSetTradeId();
    case TRADE_TARGET:
      return isSetTradeTarget();
    case TRADE_VOLUME:
      return isSetTradeVolume();
    case TRADE_PRICE:
      return isSetTradePrice();
    case SUB_USER_ID:
      return isSetSubUserId();
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case TRADE_DIRETION:
      return isSetTradeDiretion();
    case SOURCE_ORDER_TARGET:
      return isSetSourceOrderTarget();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQTrade)
      return this.equals((HostingXQTrade)that);
    return false;
  }

  public boolean equals(HostingXQTrade that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_tradeId = true && this.isSetTradeId();
    boolean that_present_tradeId = true && that.isSetTradeId();
    if (this_present_tradeId || that_present_tradeId) {
      if (!(this_present_tradeId && that_present_tradeId))
        return false;
      if (this.tradeId != that.tradeId)
        return false;
    }

    boolean this_present_tradeTarget = true && this.isSetTradeTarget();
    boolean that_present_tradeTarget = true && that.isSetTradeTarget();
    if (this_present_tradeTarget || that_present_tradeTarget) {
      if (!(this_present_tradeTarget && that_present_tradeTarget))
        return false;
      if (!this.tradeTarget.equals(that.tradeTarget))
        return false;
    }

    boolean this_present_tradeVolume = true && this.isSetTradeVolume();
    boolean that_present_tradeVolume = true && that.isSetTradeVolume();
    if (this_present_tradeVolume || that_present_tradeVolume) {
      if (!(this_present_tradeVolume && that_present_tradeVolume))
        return false;
      if (this.tradeVolume != that.tradeVolume)
        return false;
    }

    boolean this_present_tradePrice = true && this.isSetTradePrice();
    boolean that_present_tradePrice = true && that.isSetTradePrice();
    if (this_present_tradePrice || that_present_tradePrice) {
      if (!(this_present_tradePrice && that_present_tradePrice))
        return false;
      if (this.tradePrice != that.tradePrice)
        return false;
    }

    boolean this_present_subUserId = true && this.isSetSubUserId();
    boolean that_present_subUserId = true && that.isSetSubUserId();
    if (this_present_subUserId || that_present_subUserId) {
      if (!(this_present_subUserId && that_present_subUserId))
        return false;
      if (this.subUserId != that.subUserId)
        return false;
    }

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_tradeDiretion = true && this.isSetTradeDiretion();
    boolean that_present_tradeDiretion = true && that.isSetTradeDiretion();
    if (this_present_tradeDiretion || that_present_tradeDiretion) {
      if (!(this_present_tradeDiretion && that_present_tradeDiretion))
        return false;
      if (!this.tradeDiretion.equals(that.tradeDiretion))
        return false;
    }

    boolean this_present_sourceOrderTarget = true && this.isSetSourceOrderTarget();
    boolean that_present_sourceOrderTarget = true && that.isSetSourceOrderTarget();
    if (this_present_sourceOrderTarget || that_present_sourceOrderTarget) {
      if (!(this_present_sourceOrderTarget && that_present_sourceOrderTarget))
        return false;
      if (!this.sourceOrderTarget.equals(that.sourceOrderTarget))
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQTrade other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeId()).compareTo(other.isSetTradeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeId, other.tradeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeTarget()).compareTo(other.isSetTradeTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeTarget, other.tradeTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeVolume()).compareTo(other.isSetTradeVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeVolume, other.tradeVolume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradePrice()).compareTo(other.isSetTradePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradePrice, other.tradePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubUserId()).compareTo(other.isSetSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subUserId, other.subUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDiretion()).compareTo(other.isSetTradeDiretion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDiretion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDiretion, other.tradeDiretion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSourceOrderTarget()).compareTo(other.isSetSourceOrderTarget());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSourceOrderTarget()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sourceOrderTarget, other.sourceOrderTarget);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQTrade(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      if (this.orderId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderId);
      }
      first = false;
    }
    if (isSetTradeId()) {
      if (!first) sb.append(", ");
      sb.append("tradeId:");
      sb.append(this.tradeId);
      first = false;
    }
    if (isSetTradeTarget()) {
      if (!first) sb.append(", ");
      sb.append("tradeTarget:");
      if (this.tradeTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeTarget);
      }
      first = false;
    }
    if (isSetTradeVolume()) {
      if (!first) sb.append(", ");
      sb.append("tradeVolume:");
      sb.append(this.tradeVolume);
      first = false;
    }
    if (isSetTradePrice()) {
      if (!first) sb.append(", ");
      sb.append("tradePrice:");
      sb.append(this.tradePrice);
      first = false;
    }
    if (isSetSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("subUserId:");
      sb.append(this.subUserId);
      first = false;
    }
    if (isSetSubAccountId()) {
      if (!first) sb.append(", ");
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetTradeDiretion()) {
      if (!first) sb.append(", ");
      sb.append("tradeDiretion:");
      if (this.tradeDiretion == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDiretion);
      }
      first = false;
    }
    if (isSetSourceOrderTarget()) {
      if (!first) sb.append(", ");
      sb.append("sourceOrderTarget:");
      if (this.sourceOrderTarget == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceOrderTarget);
      }
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tradeTarget != null) {
      tradeTarget.validate();
    }
    if (sourceOrderTarget != null) {
      sourceOrderTarget.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQTradeStandardSchemeFactory implements SchemeFactory {
    public HostingXQTradeStandardScheme getScheme() {
      return new HostingXQTradeStandardScheme();
    }
  }

  private static class HostingXQTradeStandardScheme extends StandardScheme<HostingXQTrade> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQTrade struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeId = iprot.readI64();
              struct.setTradeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tradeTarget = new HostingXQTarget();
              struct.tradeTarget.read(iprot);
              struct.setTradeTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRADE_VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeVolume = iprot.readI32();
              struct.setTradeVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TRADE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.tradePrice = iprot.readDouble();
              struct.setTradePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subUserId = iprot.readI32();
              struct.setSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TRADE_DIRETION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeDiretion = HostingXQTradeDirection.findByValue(iprot.readI32());
              struct.setTradeDiretionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SOURCE_ORDER_TARGET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.sourceOrderTarget = new HostingXQTarget();
              struct.sourceOrderTarget.read(iprot);
              struct.setSourceOrderTargetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQTrade struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        if (struct.isSetOrderId()) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.orderId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeId()) {
        oprot.writeFieldBegin(TRADE_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeId);
        oprot.writeFieldEnd();
      }
      if (struct.tradeTarget != null) {
        if (struct.isSetTradeTarget()) {
          oprot.writeFieldBegin(TRADE_TARGET_FIELD_DESC);
          struct.tradeTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeFieldBegin(TRADE_VOLUME_FIELD_DESC);
        oprot.writeI32(struct.tradeVolume);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradePrice()) {
        oprot.writeFieldBegin(TRADE_PRICE_FIELD_DESC);
        oprot.writeDouble(struct.tradePrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubUserId()) {
        oprot.writeFieldBegin(SUB_USER_ID_FIELD_DESC);
        oprot.writeI32(struct.subUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.tradeDiretion != null) {
        if (struct.isSetTradeDiretion()) {
          oprot.writeFieldBegin(TRADE_DIRETION_FIELD_DESC);
          oprot.writeI32(struct.tradeDiretion.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.sourceOrderTarget != null) {
        if (struct.isSetSourceOrderTarget()) {
          oprot.writeFieldBegin(SOURCE_ORDER_TARGET_FIELD_DESC);
          struct.sourceOrderTarget.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQTradeTupleSchemeFactory implements SchemeFactory {
    public HostingXQTradeTupleScheme getScheme() {
      return new HostingXQTradeTupleScheme();
    }
  }

  private static class HostingXQTradeTupleScheme extends TupleScheme<HostingXQTrade> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetTradeId()) {
        optionals.set(1);
      }
      if (struct.isSetTradeTarget()) {
        optionals.set(2);
      }
      if (struct.isSetTradeVolume()) {
        optionals.set(3);
      }
      if (struct.isSetTradePrice()) {
        optionals.set(4);
      }
      if (struct.isSetSubUserId()) {
        optionals.set(5);
      }
      if (struct.isSetSubAccountId()) {
        optionals.set(6);
      }
      if (struct.isSetTradeDiretion()) {
        optionals.set(7);
      }
      if (struct.isSetSourceOrderTarget()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(9);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetTradeId()) {
        oprot.writeI64(struct.tradeId);
      }
      if (struct.isSetTradeTarget()) {
        struct.tradeTarget.write(oprot);
      }
      if (struct.isSetTradeVolume()) {
        oprot.writeI32(struct.tradeVolume);
      }
      if (struct.isSetTradePrice()) {
        oprot.writeDouble(struct.tradePrice);
      }
      if (struct.isSetSubUserId()) {
        oprot.writeI32(struct.subUserId);
      }
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetTradeDiretion()) {
        oprot.writeI32(struct.tradeDiretion.getValue());
      }
      if (struct.isSetSourceOrderTarget()) {
        struct.sourceOrderTarget.write(oprot);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQTrade struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeId = iprot.readI64();
        struct.setTradeIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeTarget = new HostingXQTarget();
        struct.tradeTarget.read(iprot);
        struct.setTradeTargetIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tradeVolume = iprot.readI32();
        struct.setTradeVolumeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradePrice = iprot.readDouble();
        struct.setTradePriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.subUserId = iprot.readI32();
        struct.setSubUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.tradeDiretion = HostingXQTradeDirection.findByValue(iprot.readI32());
        struct.setTradeDiretionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.sourceOrderTarget = new HostingXQTarget();
        struct.sourceOrderTarget.read(iprot);
        struct.setSourceOrderTargetIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
    }
  }

}

