/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.arbitrage.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingXQConditionAction implements org.apache.thrift.TBase<HostingXQConditionAction, HostingXQConditionAction._Fields>, java.io.Serializable, Cloneable, Comparable<HostingXQConditionAction> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingXQConditionAction");

  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeDirection", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField QUANTITY_FIELD_DESC = new org.apache.thrift.protocol.TField("quantity", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingXQConditionActionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingXQConditionActionTupleSchemeFactory());
  }

  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQOrderType orderType; // optional
  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection tradeDirection; // optional
  public HostingXQOrderPrice price; // optional
  public int quantity; // optional
  public HostingXQConditionActionExtra extra; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see HostingXQOrderType
     */
    ORDER_TYPE((short)1, "orderType"),
    /**
     * 
     * @see HostingXQTradeDirection
     */
    TRADE_DIRECTION((short)2, "tradeDirection"),
    PRICE((short)3, "price"),
    QUANTITY((short)4, "quantity"),
    EXTRA((short)5, "extra");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_TYPE
          return ORDER_TYPE;
        case 2: // TRADE_DIRECTION
          return TRADE_DIRECTION;
        case 3: // PRICE
          return PRICE;
        case 4: // QUANTITY
          return QUANTITY;
        case 5: // EXTRA
          return EXTRA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __QUANTITY_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_TYPE,_Fields.TRADE_DIRECTION,_Fields.PRICE,_Fields.QUANTITY,_Fields.EXTRA};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQOrderType.class)));
    tmpMap.put(_Fields.TRADE_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("tradeDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, HostingXQTradeDirection.class)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQOrderPrice.class)));
    tmpMap.put(_Fields.QUANTITY, new org.apache.thrift.meta_data.FieldMetaData("quantity", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, HostingXQConditionActionExtra.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingXQConditionAction.class, metaDataMap);
  }

  public HostingXQConditionAction() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingXQConditionAction(HostingXQConditionAction other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    if (other.isSetTradeDirection()) {
      this.tradeDirection = other.tradeDirection;
    }
    if (other.isSetPrice()) {
      this.price = new HostingXQOrderPrice(other.price);
    }
    this.quantity = other.quantity;
    if (other.isSetExtra()) {
      this.extra = new HostingXQConditionActionExtra(other.extra);
    }
  }

  public HostingXQConditionAction deepCopy() {
    return new HostingXQConditionAction(this);
  }

  @Override
  public void clear() {
    this.orderType = null;
    this.tradeDirection = null;
    this.price = null;
    setQuantityIsSet(false);
    this.quantity = 0;
    this.extra = null;
  }

  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQOrderType getOrderType() {
    return this.orderType;
  }

  /**
   * 
   * @see HostingXQOrderType
   */
  public HostingXQConditionAction setOrderType(HostingXQOrderType orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQTradeDirection getTradeDirection() {
    return this.tradeDirection;
  }

  /**
   * 
   * @see HostingXQTradeDirection
   */
  public HostingXQConditionAction setTradeDirection(HostingXQTradeDirection tradeDirection) {
    this.tradeDirection = tradeDirection;
    return this;
  }

  public void unsetTradeDirection() {
    this.tradeDirection = null;
  }

  /** Returns true if field tradeDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeDirection() {
    return this.tradeDirection != null;
  }

  public void setTradeDirectionIsSet(boolean value) {
    if (!value) {
      this.tradeDirection = null;
    }
  }

  public HostingXQOrderPrice getPrice() {
    return this.price;
  }

  public HostingXQConditionAction setPrice(HostingXQOrderPrice price) {
    this.price = price;
    return this;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public int getQuantity() {
    return this.quantity;
  }

  public HostingXQConditionAction setQuantity(int quantity) {
    this.quantity = quantity;
    setQuantityIsSet(true);
    return this;
  }

  public void unsetQuantity() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  /** Returns true if field quantity is set (has been assigned a value) and false otherwise */
  public boolean isSetQuantity() {
    return EncodingUtils.testBit(__isset_bitfield, __QUANTITY_ISSET_ID);
  }

  public void setQuantityIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __QUANTITY_ISSET_ID, value);
  }

  public HostingXQConditionActionExtra getExtra() {
    return this.extra;
  }

  public HostingXQConditionAction setExtra(HostingXQConditionActionExtra extra) {
    this.extra = extra;
    return this;
  }

  public void unsetExtra() {
    this.extra = null;
  }

  /** Returns true if field extra is set (has been assigned a value) and false otherwise */
  public boolean isSetExtra() {
    return this.extra != null;
  }

  public void setExtraIsSet(boolean value) {
    if (!value) {
      this.extra = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((HostingXQOrderType)value);
      }
      break;

    case TRADE_DIRECTION:
      if (value == null) {
        unsetTradeDirection();
      } else {
        setTradeDirection((HostingXQTradeDirection)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((HostingXQOrderPrice)value);
      }
      break;

    case QUANTITY:
      if (value == null) {
        unsetQuantity();
      } else {
        setQuantity((Integer)value);
      }
      break;

    case EXTRA:
      if (value == null) {
        unsetExtra();
      } else {
        setExtra((HostingXQConditionActionExtra)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_TYPE:
      return getOrderType();

    case TRADE_DIRECTION:
      return getTradeDirection();

    case PRICE:
      return getPrice();

    case QUANTITY:
      return Integer.valueOf(getQuantity());

    case EXTRA:
      return getExtra();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_TYPE:
      return isSetOrderType();
    case TRADE_DIRECTION:
      return isSetTradeDirection();
    case PRICE:
      return isSetPrice();
    case QUANTITY:
      return isSetQuantity();
    case EXTRA:
      return isSetExtra();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingXQConditionAction)
      return this.equals((HostingXQConditionAction)that);
    return false;
  }

  public boolean equals(HostingXQConditionAction that) {
    if (that == null)
      return false;

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_tradeDirection = true && this.isSetTradeDirection();
    boolean that_present_tradeDirection = true && that.isSetTradeDirection();
    if (this_present_tradeDirection || that_present_tradeDirection) {
      if (!(this_present_tradeDirection && that_present_tradeDirection))
        return false;
      if (!this.tradeDirection.equals(that.tradeDirection))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_quantity = true && this.isSetQuantity();
    boolean that_present_quantity = true && that.isSetQuantity();
    if (this_present_quantity || that_present_quantity) {
      if (!(this_present_quantity && that_present_quantity))
        return false;
      if (this.quantity != that.quantity)
        return false;
    }

    boolean this_present_extra = true && this.isSetExtra();
    boolean that_present_extra = true && that.isSetExtra();
    if (this_present_extra || that_present_extra) {
      if (!(this_present_extra && that_present_extra))
        return false;
      if (!this.extra.equals(that.extra))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingXQConditionAction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeDirection()).compareTo(other.isSetTradeDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeDirection, other.tradeDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuantity()).compareTo(other.isSetQuantity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuantity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quantity, other.quantity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtra()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingXQConditionAction(");
    boolean first = true;

    if (isSetOrderType()) {
      sb.append("orderType:");
      if (this.orderType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderType);
      }
      first = false;
    }
    if (isSetTradeDirection()) {
      if (!first) sb.append(", ");
      sb.append("tradeDirection:");
      if (this.tradeDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeDirection);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      if (this.price == null) {
        sb.append("null");
      } else {
        sb.append(this.price);
      }
      first = false;
    }
    if (isSetQuantity()) {
      if (!first) sb.append(", ");
      sb.append("quantity:");
      sb.append(this.quantity);
      first = false;
    }
    if (isSetExtra()) {
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (price != null) {
      price.validate();
    }
    if (extra != null) {
      extra.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingXQConditionActionStandardSchemeFactory implements SchemeFactory {
    public HostingXQConditionActionStandardScheme getScheme() {
      return new HostingXQConditionActionStandardScheme();
    }
  }

  private static class HostingXQConditionActionStandardScheme extends StandardScheme<HostingXQConditionAction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingXQConditionAction struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.orderType = HostingXQOrderType.findByValue(iprot.readI32());
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tradeDirection = HostingXQTradeDirection.findByValue(iprot.readI32());
              struct.setTradeDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.price = new HostingXQOrderPrice();
              struct.price.read(iprot);
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // QUANTITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.quantity = iprot.readI32();
              struct.setQuantityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXTRA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extra = new HostingXQConditionActionExtra();
              struct.extra.read(iprot);
              struct.setExtraIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingXQConditionAction struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderType != null) {
        if (struct.isSetOrderType()) {
          oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
          oprot.writeI32(struct.orderType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.tradeDirection != null) {
        if (struct.isSetTradeDirection()) {
          oprot.writeFieldBegin(TRADE_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.tradeDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.price != null) {
        if (struct.isSetPrice()) {
          oprot.writeFieldBegin(PRICE_FIELD_DESC);
          struct.price.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetQuantity()) {
        oprot.writeFieldBegin(QUANTITY_FIELD_DESC);
        oprot.writeI32(struct.quantity);
        oprot.writeFieldEnd();
      }
      if (struct.extra != null) {
        if (struct.isSetExtra()) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          struct.extra.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingXQConditionActionTupleSchemeFactory implements SchemeFactory {
    public HostingXQConditionActionTupleScheme getScheme() {
      return new HostingXQConditionActionTupleScheme();
    }
  }

  private static class HostingXQConditionActionTupleScheme extends TupleScheme<HostingXQConditionAction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingXQConditionAction struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderType()) {
        optionals.set(0);
      }
      if (struct.isSetTradeDirection()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      if (struct.isSetQuantity()) {
        optionals.set(3);
      }
      if (struct.isSetExtra()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetOrderType()) {
        oprot.writeI32(struct.orderType.getValue());
      }
      if (struct.isSetTradeDirection()) {
        oprot.writeI32(struct.tradeDirection.getValue());
      }
      if (struct.isSetPrice()) {
        struct.price.write(oprot);
      }
      if (struct.isSetQuantity()) {
        oprot.writeI32(struct.quantity);
      }
      if (struct.isSetExtra()) {
        struct.extra.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingXQConditionAction struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.orderType = HostingXQOrderType.findByValue(iprot.readI32());
        struct.setOrderTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeDirection = HostingXQTradeDirection.findByValue(iprot.readI32());
        struct.setTradeDirectionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.price = new HostingXQOrderPrice();
        struct.price.read(iprot);
        struct.setPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.quantity = iprot.readI32();
        struct.setQuantityIsSet(true);
      }
      if (incoming.get(4)) {
        struct.extra = new HostingXQConditionActionExtra();
        struct.extra.read(iprot);
        struct.setExtraIsSet(true);
      }
    }
  }

}

