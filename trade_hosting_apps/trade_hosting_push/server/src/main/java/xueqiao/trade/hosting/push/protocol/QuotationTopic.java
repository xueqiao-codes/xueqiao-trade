/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.push.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 行情主题
 */
public class QuotationTopic implements org.apache.thrift.TBase<QuotationTopic, QuotationTopic._Fields>, java.io.Serializable, Cloneable, Comparable<QuotationTopic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuotationTopic");

  private static final org.apache.thrift.protocol.TField PLATFORM_FIELD_DESC = new org.apache.thrift.protocol.TField("platform", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField CONTRACT_SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("contractSymbol", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuotationTopicStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuotationTopicTupleSchemeFactory());
  }

  public String platform; // optional
  public String contractSymbol; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PLATFORM((short)1, "platform"),
    CONTRACT_SYMBOL((short)2, "contractSymbol");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PLATFORM
          return PLATFORM;
        case 2: // CONTRACT_SYMBOL
          return CONTRACT_SYMBOL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PLATFORM,_Fields.CONTRACT_SYMBOL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PLATFORM, new org.apache.thrift.meta_data.FieldMetaData("platform", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTRACT_SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("contractSymbol", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuotationTopic.class, metaDataMap);
  }

  public QuotationTopic() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuotationTopic(QuotationTopic other) {
    if (other.isSetPlatform()) {
      this.platform = other.platform;
    }
    if (other.isSetContractSymbol()) {
      this.contractSymbol = other.contractSymbol;
    }
  }

  public QuotationTopic deepCopy() {
    return new QuotationTopic(this);
  }

  @Override
  public void clear() {
    this.platform = null;
    this.contractSymbol = null;
  }

  public String getPlatform() {
    return this.platform;
  }

  public QuotationTopic setPlatform(String platform) {
    this.platform = platform;
    return this;
  }

  public void unsetPlatform() {
    this.platform = null;
  }

  /** Returns true if field platform is set (has been assigned a value) and false otherwise */
  public boolean isSetPlatform() {
    return this.platform != null;
  }

  public void setPlatformIsSet(boolean value) {
    if (!value) {
      this.platform = null;
    }
  }

  public String getContractSymbol() {
    return this.contractSymbol;
  }

  public QuotationTopic setContractSymbol(String contractSymbol) {
    this.contractSymbol = contractSymbol;
    return this;
  }

  public void unsetContractSymbol() {
    this.contractSymbol = null;
  }

  /** Returns true if field contractSymbol is set (has been assigned a value) and false otherwise */
  public boolean isSetContractSymbol() {
    return this.contractSymbol != null;
  }

  public void setContractSymbolIsSet(boolean value) {
    if (!value) {
      this.contractSymbol = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PLATFORM:
      if (value == null) {
        unsetPlatform();
      } else {
        setPlatform((String)value);
      }
      break;

    case CONTRACT_SYMBOL:
      if (value == null) {
        unsetContractSymbol();
      } else {
        setContractSymbol((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PLATFORM:
      return getPlatform();

    case CONTRACT_SYMBOL:
      return getContractSymbol();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PLATFORM:
      return isSetPlatform();
    case CONTRACT_SYMBOL:
      return isSetContractSymbol();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuotationTopic)
      return this.equals((QuotationTopic)that);
    return false;
  }

  public boolean equals(QuotationTopic that) {
    if (that == null)
      return false;

    boolean this_present_platform = true && this.isSetPlatform();
    boolean that_present_platform = true && that.isSetPlatform();
    if (this_present_platform || that_present_platform) {
      if (!(this_present_platform && that_present_platform))
        return false;
      if (!this.platform.equals(that.platform))
        return false;
    }

    boolean this_present_contractSymbol = true && this.isSetContractSymbol();
    boolean that_present_contractSymbol = true && that.isSetContractSymbol();
    if (this_present_contractSymbol || that_present_contractSymbol) {
      if (!(this_present_contractSymbol && that_present_contractSymbol))
        return false;
      if (!this.contractSymbol.equals(that.contractSymbol))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuotationTopic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetPlatform()).compareTo(other.isSetPlatform());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlatform()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platform, other.platform);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContractSymbol()).compareTo(other.isSetContractSymbol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContractSymbol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contractSymbol, other.contractSymbol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuotationTopic(");
    boolean first = true;

    if (isSetPlatform()) {
      sb.append("platform:");
      if (this.platform == null) {
        sb.append("null");
      } else {
        sb.append(this.platform);
      }
      first = false;
    }
    if (isSetContractSymbol()) {
      if (!first) sb.append(", ");
      sb.append("contractSymbol:");
      if (this.contractSymbol == null) {
        sb.append("null");
      } else {
        sb.append(this.contractSymbol);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuotationTopicStandardSchemeFactory implements SchemeFactory {
    public QuotationTopicStandardScheme getScheme() {
      return new QuotationTopicStandardScheme();
    }
  }

  private static class QuotationTopicStandardScheme extends StandardScheme<QuotationTopic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuotationTopic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PLATFORM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.platform = iprot.readString();
              struct.setPlatformIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CONTRACT_SYMBOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contractSymbol = iprot.readString();
              struct.setContractSymbolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuotationTopic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.platform != null) {
        if (struct.isSetPlatform()) {
          oprot.writeFieldBegin(PLATFORM_FIELD_DESC);
          oprot.writeString(struct.platform);
          oprot.writeFieldEnd();
        }
      }
      if (struct.contractSymbol != null) {
        if (struct.isSetContractSymbol()) {
          oprot.writeFieldBegin(CONTRACT_SYMBOL_FIELD_DESC);
          oprot.writeString(struct.contractSymbol);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuotationTopicTupleSchemeFactory implements SchemeFactory {
    public QuotationTopicTupleScheme getScheme() {
      return new QuotationTopicTupleScheme();
    }
  }

  private static class QuotationTopicTupleScheme extends TupleScheme<QuotationTopic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuotationTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetPlatform()) {
        optionals.set(0);
      }
      if (struct.isSetContractSymbol()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPlatform()) {
        oprot.writeString(struct.platform);
      }
      if (struct.isSetContractSymbol()) {
        oprot.writeString(struct.contractSymbol);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuotationTopic struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.platform = iprot.readString();
        struct.setPlatformIsSet(true);
      }
      if (incoming.get(1)) {
        struct.contractSymbol = iprot.readString();
        struct.setContractSymbolIsSet(true);
      }
    }
  }

}

