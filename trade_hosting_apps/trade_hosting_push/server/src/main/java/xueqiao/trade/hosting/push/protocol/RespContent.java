/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.push.protocol;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 服务端回复内容
 */
public class RespContent implements org.apache.thrift.TBase<RespContent, RespContent._Fields>, java.io.Serializable, Cloneable, Comparable<RespContent> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RespContent");

  private static final org.apache.thrift.protocol.TField RESPONSE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("responseId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField ERR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errCode", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ERR_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("errMsg", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField RESPONSE_STRUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("responseStructType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField RESPONSE_STRUCT_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("responseStructBytes", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RespContentStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RespContentTupleSchemeFactory());
  }

  public long responseId; // required
  public long requestId; // required
  public int errCode; // required
  public String errMsg; // optional
  public String responseStructType; // optional
  public ByteBuffer responseStructBytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESPONSE_ID((short)1, "responseId"),
    REQUEST_ID((short)2, "requestId"),
    ERR_CODE((short)3, "errCode"),
    ERR_MSG((short)4, "errMsg"),
    RESPONSE_STRUCT_TYPE((short)5, "responseStructType"),
    RESPONSE_STRUCT_BYTES((short)6, "responseStructBytes");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESPONSE_ID
          return RESPONSE_ID;
        case 2: // REQUEST_ID
          return REQUEST_ID;
        case 3: // ERR_CODE
          return ERR_CODE;
        case 4: // ERR_MSG
          return ERR_MSG;
        case 5: // RESPONSE_STRUCT_TYPE
          return RESPONSE_STRUCT_TYPE;
        case 6: // RESPONSE_STRUCT_BYTES
          return RESPONSE_STRUCT_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RESPONSEID_ISSET_ID = 0;
  private static final int __REQUESTID_ISSET_ID = 1;
  private static final int __ERRCODE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ERR_MSG,_Fields.RESPONSE_STRUCT_TYPE,_Fields.RESPONSE_STRUCT_BYTES};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESPONSE_ID, new org.apache.thrift.meta_data.FieldMetaData("responseId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ERR_MSG, new org.apache.thrift.meta_data.FieldMetaData("errMsg", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_STRUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("responseStructType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_STRUCT_BYTES, new org.apache.thrift.meta_data.FieldMetaData("responseStructBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RespContent.class, metaDataMap);
  }

  public RespContent() {
  }

  public RespContent(
    long responseId,
    long requestId,
    int errCode)
  {
    this();
    this.responseId = responseId;
    setResponseIdIsSet(true);
    this.requestId = requestId;
    setRequestIdIsSet(true);
    this.errCode = errCode;
    setErrCodeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RespContent(RespContent other) {
    __isset_bitfield = other.__isset_bitfield;
    this.responseId = other.responseId;
    this.requestId = other.requestId;
    this.errCode = other.errCode;
    if (other.isSetErrMsg()) {
      this.errMsg = other.errMsg;
    }
    if (other.isSetResponseStructType()) {
      this.responseStructType = other.responseStructType;
    }
    if (other.isSetResponseStructBytes()) {
      this.responseStructBytes = org.apache.thrift.TBaseHelper.copyBinary(other.responseStructBytes);
;
    }
  }

  public RespContent deepCopy() {
    return new RespContent(this);
  }

  @Override
  public void clear() {
    setResponseIdIsSet(false);
    this.responseId = 0;
    setRequestIdIsSet(false);
    this.requestId = 0;
    setErrCodeIsSet(false);
    this.errCode = 0;
    this.errMsg = null;
    this.responseStructType = null;
    this.responseStructBytes = null;
  }

  public long getResponseId() {
    return this.responseId;
  }

  public RespContent setResponseId(long responseId) {
    this.responseId = responseId;
    setResponseIdIsSet(true);
    return this;
  }

  public void unsetResponseId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSEID_ISSET_ID);
  }

  /** Returns true if field responseId is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseId() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSEID_ISSET_ID);
  }

  public void setResponseIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSEID_ISSET_ID, value);
  }

  public long getRequestId() {
    return this.requestId;
  }

  public RespContent setRequestId(long requestId) {
    this.requestId = requestId;
    setRequestIdIsSet(true);
    return this;
  }

  public void unsetRequestId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return EncodingUtils.testBit(__isset_bitfield, __REQUESTID_ISSET_ID);
  }

  public void setRequestIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTID_ISSET_ID, value);
  }

  public int getErrCode() {
    return this.errCode;
  }

  public RespContent setErrCode(int errCode) {
    this.errCode = errCode;
    setErrCodeIsSet(true);
    return this;
  }

  public void unsetErrCode() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  /** Returns true if field errCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrCode() {
    return EncodingUtils.testBit(__isset_bitfield, __ERRCODE_ISSET_ID);
  }

  public void setErrCodeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ERRCODE_ISSET_ID, value);
  }

  public String getErrMsg() {
    return this.errMsg;
  }

  public RespContent setErrMsg(String errMsg) {
    this.errMsg = errMsg;
    return this;
  }

  public void unsetErrMsg() {
    this.errMsg = null;
  }

  /** Returns true if field errMsg is set (has been assigned a value) and false otherwise */
  public boolean isSetErrMsg() {
    return this.errMsg != null;
  }

  public void setErrMsgIsSet(boolean value) {
    if (!value) {
      this.errMsg = null;
    }
  }

  public String getResponseStructType() {
    return this.responseStructType;
  }

  public RespContent setResponseStructType(String responseStructType) {
    this.responseStructType = responseStructType;
    return this;
  }

  public void unsetResponseStructType() {
    this.responseStructType = null;
  }

  /** Returns true if field responseStructType is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseStructType() {
    return this.responseStructType != null;
  }

  public void setResponseStructTypeIsSet(boolean value) {
    if (!value) {
      this.responseStructType = null;
    }
  }

  public byte[] getResponseStructBytes() {
    setResponseStructBytes(org.apache.thrift.TBaseHelper.rightSize(responseStructBytes));
    return responseStructBytes == null ? null : responseStructBytes.array();
  }

  public ByteBuffer bufferForResponseStructBytes() {
    return responseStructBytes;
  }

  public RespContent setResponseStructBytes(byte[] responseStructBytes) {
    setResponseStructBytes(responseStructBytes == null ? (ByteBuffer)null : ByteBuffer.wrap(responseStructBytes));
    return this;
  }

  public RespContent setResponseStructBytes(ByteBuffer responseStructBytes) {
    this.responseStructBytes = responseStructBytes;
    return this;
  }

  public void unsetResponseStructBytes() {
    this.responseStructBytes = null;
  }

  /** Returns true if field responseStructBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseStructBytes() {
    return this.responseStructBytes != null;
  }

  public void setResponseStructBytesIsSet(boolean value) {
    if (!value) {
      this.responseStructBytes = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RESPONSE_ID:
      if (value == null) {
        unsetResponseId();
      } else {
        setResponseId((Long)value);
      }
      break;

    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((Long)value);
      }
      break;

    case ERR_CODE:
      if (value == null) {
        unsetErrCode();
      } else {
        setErrCode((Integer)value);
      }
      break;

    case ERR_MSG:
      if (value == null) {
        unsetErrMsg();
      } else {
        setErrMsg((String)value);
      }
      break;

    case RESPONSE_STRUCT_TYPE:
      if (value == null) {
        unsetResponseStructType();
      } else {
        setResponseStructType((String)value);
      }
      break;

    case RESPONSE_STRUCT_BYTES:
      if (value == null) {
        unsetResponseStructBytes();
      } else {
        setResponseStructBytes((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RESPONSE_ID:
      return Long.valueOf(getResponseId());

    case REQUEST_ID:
      return Long.valueOf(getRequestId());

    case ERR_CODE:
      return Integer.valueOf(getErrCode());

    case ERR_MSG:
      return getErrMsg();

    case RESPONSE_STRUCT_TYPE:
      return getResponseStructType();

    case RESPONSE_STRUCT_BYTES:
      return getResponseStructBytes();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RESPONSE_ID:
      return isSetResponseId();
    case REQUEST_ID:
      return isSetRequestId();
    case ERR_CODE:
      return isSetErrCode();
    case ERR_MSG:
      return isSetErrMsg();
    case RESPONSE_STRUCT_TYPE:
      return isSetResponseStructType();
    case RESPONSE_STRUCT_BYTES:
      return isSetResponseStructBytes();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RespContent)
      return this.equals((RespContent)that);
    return false;
  }

  public boolean equals(RespContent that) {
    if (that == null)
      return false;

    boolean this_present_responseId = true;
    boolean that_present_responseId = true;
    if (this_present_responseId || that_present_responseId) {
      if (!(this_present_responseId && that_present_responseId))
        return false;
      if (this.responseId != that.responseId)
        return false;
    }

    boolean this_present_requestId = true;
    boolean that_present_requestId = true;
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (this.requestId != that.requestId)
        return false;
    }

    boolean this_present_errCode = true;
    boolean that_present_errCode = true;
    if (this_present_errCode || that_present_errCode) {
      if (!(this_present_errCode && that_present_errCode))
        return false;
      if (this.errCode != that.errCode)
        return false;
    }

    boolean this_present_errMsg = true && this.isSetErrMsg();
    boolean that_present_errMsg = true && that.isSetErrMsg();
    if (this_present_errMsg || that_present_errMsg) {
      if (!(this_present_errMsg && that_present_errMsg))
        return false;
      if (!this.errMsg.equals(that.errMsg))
        return false;
    }

    boolean this_present_responseStructType = true && this.isSetResponseStructType();
    boolean that_present_responseStructType = true && that.isSetResponseStructType();
    if (this_present_responseStructType || that_present_responseStructType) {
      if (!(this_present_responseStructType && that_present_responseStructType))
        return false;
      if (!this.responseStructType.equals(that.responseStructType))
        return false;
    }

    boolean this_present_responseStructBytes = true && this.isSetResponseStructBytes();
    boolean that_present_responseStructBytes = true && that.isSetResponseStructBytes();
    if (this_present_responseStructBytes || that_present_responseStructBytes) {
      if (!(this_present_responseStructBytes && that_present_responseStructBytes))
        return false;
      if (!this.responseStructBytes.equals(that.responseStructBytes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RespContent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetResponseId()).compareTo(other.isSetResponseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseId, other.responseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrCode()).compareTo(other.isSetErrCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errCode, other.errCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetErrMsg()).compareTo(other.isSetErrMsg());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrMsg()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errMsg, other.errMsg);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseStructType()).compareTo(other.isSetResponseStructType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseStructType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseStructType, other.responseStructType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseStructBytes()).compareTo(other.isSetResponseStructBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseStructBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseStructBytes, other.responseStructBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RespContent(");
    boolean first = true;

    sb.append("responseId:");
    sb.append(this.responseId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestId:");
    sb.append(this.requestId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errCode:");
    sb.append(this.errCode);
    first = false;
    if (isSetErrMsg()) {
      if (!first) sb.append(", ");
      sb.append("errMsg:");
      if (this.errMsg == null) {
        sb.append("null");
      } else {
        sb.append(this.errMsg);
      }
      first = false;
    }
    if (isSetResponseStructType()) {
      if (!first) sb.append(", ");
      sb.append("responseStructType:");
      if (this.responseStructType == null) {
        sb.append("null");
      } else {
        sb.append(this.responseStructType);
      }
      first = false;
    }
    if (isSetResponseStructBytes()) {
      if (!first) sb.append(", ");
      sb.append("responseStructBytes:");
      if (this.responseStructBytes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.responseStructBytes, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'responseId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'requestId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'errCode' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RespContentStandardSchemeFactory implements SchemeFactory {
    public RespContentStandardScheme getScheme() {
      return new RespContentStandardScheme();
    }
  }

  private static class RespContentStandardScheme extends StandardScheme<RespContent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RespContent struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESPONSE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.responseId = iprot.readI64();
              struct.setResponseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.requestId = iprot.readI64();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ERR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.errCode = iprot.readI32();
              struct.setErrCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ERR_MSG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errMsg = iprot.readString();
              struct.setErrMsgIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // RESPONSE_STRUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responseStructType = iprot.readString();
              struct.setResponseStructTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // RESPONSE_STRUCT_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.responseStructBytes = iprot.readBinary();
              struct.setResponseStructBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetResponseId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'responseId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRequestId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetErrCode()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'errCode' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RespContent struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(RESPONSE_ID_FIELD_DESC);
      oprot.writeI64(struct.responseId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeI64(struct.requestId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ERR_CODE_FIELD_DESC);
      oprot.writeI32(struct.errCode);
      oprot.writeFieldEnd();
      if (struct.errMsg != null) {
        if (struct.isSetErrMsg()) {
          oprot.writeFieldBegin(ERR_MSG_FIELD_DESC);
          oprot.writeString(struct.errMsg);
          oprot.writeFieldEnd();
        }
      }
      if (struct.responseStructType != null) {
        if (struct.isSetResponseStructType()) {
          oprot.writeFieldBegin(RESPONSE_STRUCT_TYPE_FIELD_DESC);
          oprot.writeString(struct.responseStructType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.responseStructBytes != null) {
        if (struct.isSetResponseStructBytes()) {
          oprot.writeFieldBegin(RESPONSE_STRUCT_BYTES_FIELD_DESC);
          oprot.writeBinary(struct.responseStructBytes);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RespContentTupleSchemeFactory implements SchemeFactory {
    public RespContentTupleScheme getScheme() {
      return new RespContentTupleScheme();
    }
  }

  private static class RespContentTupleScheme extends TupleScheme<RespContent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RespContent struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.responseId);
      oprot.writeI64(struct.requestId);
      oprot.writeI32(struct.errCode);
      BitSet optionals = new BitSet();
      if (struct.isSetErrMsg()) {
        optionals.set(0);
      }
      if (struct.isSetResponseStructType()) {
        optionals.set(1);
      }
      if (struct.isSetResponseStructBytes()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetErrMsg()) {
        oprot.writeString(struct.errMsg);
      }
      if (struct.isSetResponseStructType()) {
        oprot.writeString(struct.responseStructType);
      }
      if (struct.isSetResponseStructBytes()) {
        oprot.writeBinary(struct.responseStructBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RespContent struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.responseId = iprot.readI64();
      struct.setResponseIdIsSet(true);
      struct.requestId = iprot.readI64();
      struct.setRequestIdIsSet(true);
      struct.errCode = iprot.readI32();
      struct.setErrCodeIsSet(true);
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.errMsg = iprot.readString();
        struct.setErrMsgIsSet(true);
      }
      if (incoming.get(1)) {
        struct.responseStructType = iprot.readString();
        struct.setResponseStructTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.responseStructBytes = iprot.readBinary();
        struct.setResponseStructBytesIsSet(true);
      }
    }
  }

}

