/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.adjust.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeHostingPositionAdjust {

  public interface Iface {

    /**
     * 录入持仓明细信息
     * 
     * 
     * @param platformArgs
     * @param positionManualInputs
     */
    public ManualInputPositionResp manualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询录入的持仓明细信息
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public PositionManualInputPage reqManualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询未分配的持仓明细信息
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public PositionUnassignedPage reqPositionUnassigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询已分配的持仓明细信息
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public PositionAssignedPage reqPositionAssigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 分配持仓明细信息
     * 
     * 
     * @param platformArgs
     * @param assignOption
     */
    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询持仓编辑锁信息
     * 
     * 
     * @param platformArgs
     * @param lockKey
     */
    public PositionEditLock reqPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 申请持仓编辑加锁
     * 
     * 
     * @param platformArgs
     * @param positionEditLock
     */
    public void addPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 释放持仓编辑锁
     * 
     * 
     * @param platformArgs
     * @param positionEditLock
     */
    public void removePositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询持仓核对历史
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public PositionVerifyPage reqPositionVerify(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询持仓核对明细
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public PositionDifferencePage reqPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 结算日期，格式为XXXX-XX-XX
     * 
     * @param platformArgs
     * @param tradeAccountId
     * @param settlementDate
     */
    public SettlementTimeRelateSledReqTime reqSettlementTimeRelateSledReqTime(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 查询日常持仓核对明细
     * 
     * @param platformArgs
     * @param option
     * @param pageOption
     */
    public DailyPositionDifferencePage reqDailyPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 更新日常持仓核对的备注和核对状态信息
     * 
     * @param platformArgs
     * @param difference
     */
    public void updateDailyPositionDifferenceNote(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

    /**
     * 移除托管机上持仓资金的所有数据记录
     * 
     * @param platformArgs
     */
    public void clearAll(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void manualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqManualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqPositionUnassigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqPositionAssigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void assignPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void removePositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqPositionVerify(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqSettlementTimeRelateSledReqTime(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void reqDailyPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateDailyPositionDifferenceNote(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void clearAll(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ManualInputPositionResp manualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_manualInputPosition(platformArgs, positionManualInputs);
      return recv_manualInputPosition();
    }

    public void send_manualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs) throws org.apache.thrift.TException
    {
      manualInputPosition_args args = new manualInputPosition_args();
      args.setPlatformArgs(platformArgs);
      args.setPositionManualInputs(positionManualInputs);
      sendBase("manualInputPosition", args);
    }

    public ManualInputPositionResp recv_manualInputPosition() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      manualInputPosition_result result = new manualInputPosition_result();
      receiveBase(result, "manualInputPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "manualInputPosition failed: unknown result");
    }

    public PositionManualInputPage reqManualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqManualInputPosition(platformArgs, option, pageOption);
      return recv_reqManualInputPosition();
    }

    public void send_reqManualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqManualInputPosition_args args = new reqManualInputPosition_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqManualInputPosition", args);
    }

    public PositionManualInputPage recv_reqManualInputPosition() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqManualInputPosition_result result = new reqManualInputPosition_result();
      receiveBase(result, "reqManualInputPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqManualInputPosition failed: unknown result");
    }

    public PositionUnassignedPage reqPositionUnassigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqPositionUnassigned(platformArgs, option, pageOption);
      return recv_reqPositionUnassigned();
    }

    public void send_reqPositionUnassigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqPositionUnassigned_args args = new reqPositionUnassigned_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqPositionUnassigned", args);
    }

    public PositionUnassignedPage recv_reqPositionUnassigned() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqPositionUnassigned_result result = new reqPositionUnassigned_result();
      receiveBase(result, "reqPositionUnassigned");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqPositionUnassigned failed: unknown result");
    }

    public PositionAssignedPage reqPositionAssigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqPositionAssigned(platformArgs, option, pageOption);
      return recv_reqPositionAssigned();
    }

    public void send_reqPositionAssigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqPositionAssigned_args args = new reqPositionAssigned_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqPositionAssigned", args);
    }

    public PositionAssignedPage recv_reqPositionAssigned() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqPositionAssigned_result result = new reqPositionAssigned_result();
      receiveBase(result, "reqPositionAssigned");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqPositionAssigned failed: unknown result");
    }

    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp assignPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_assignPosition(platformArgs, assignOption);
      return recv_assignPosition();
    }

    public void send_assignPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption) throws org.apache.thrift.TException
    {
      assignPosition_args args = new assignPosition_args();
      args.setPlatformArgs(platformArgs);
      args.setAssignOption(assignOption);
      sendBase("assignPosition", args);
    }

    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp recv_assignPosition() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      assignPosition_result result = new assignPosition_result();
      receiveBase(result, "assignPosition");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "assignPosition failed: unknown result");
    }

    public PositionEditLock reqPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqPositionEditLock(platformArgs, lockKey);
      return recv_reqPositionEditLock();
    }

    public void send_reqPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey) throws org.apache.thrift.TException
    {
      reqPositionEditLock_args args = new reqPositionEditLock_args();
      args.setPlatformArgs(platformArgs);
      args.setLockKey(lockKey);
      sendBase("reqPositionEditLock", args);
    }

    public PositionEditLock recv_reqPositionEditLock() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqPositionEditLock_result result = new reqPositionEditLock_result();
      receiveBase(result, "reqPositionEditLock");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqPositionEditLock failed: unknown result");
    }

    public void addPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_addPositionEditLock(platformArgs, positionEditLock);
      recv_addPositionEditLock();
    }

    public void send_addPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.apache.thrift.TException
    {
      addPositionEditLock_args args = new addPositionEditLock_args();
      args.setPlatformArgs(platformArgs);
      args.setPositionEditLock(positionEditLock);
      sendBase("addPositionEditLock", args);
    }

    public void recv_addPositionEditLock() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      addPositionEditLock_result result = new addPositionEditLock_result();
      receiveBase(result, "addPositionEditLock");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void removePositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_removePositionEditLock(platformArgs, positionEditLock);
      recv_removePositionEditLock();
    }

    public void send_removePositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock) throws org.apache.thrift.TException
    {
      removePositionEditLock_args args = new removePositionEditLock_args();
      args.setPlatformArgs(platformArgs);
      args.setPositionEditLock(positionEditLock);
      sendBase("removePositionEditLock", args);
    }

    public void recv_removePositionEditLock() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      removePositionEditLock_result result = new removePositionEditLock_result();
      receiveBase(result, "removePositionEditLock");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public PositionVerifyPage reqPositionVerify(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqPositionVerify(platformArgs, option, pageOption);
      return recv_reqPositionVerify();
    }

    public void send_reqPositionVerify(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqPositionVerify_args args = new reqPositionVerify_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqPositionVerify", args);
    }

    public PositionVerifyPage recv_reqPositionVerify() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqPositionVerify_result result = new reqPositionVerify_result();
      receiveBase(result, "reqPositionVerify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqPositionVerify failed: unknown result");
    }

    public PositionDifferencePage reqPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqPositionDifference(platformArgs, option, pageOption);
      return recv_reqPositionDifference();
    }

    public void send_reqPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqPositionDifference_args args = new reqPositionDifference_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqPositionDifference", args);
    }

    public PositionDifferencePage recv_reqPositionDifference() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqPositionDifference_result result = new reqPositionDifference_result();
      receiveBase(result, "reqPositionDifference");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqPositionDifference failed: unknown result");
    }

    public SettlementTimeRelateSledReqTime reqSettlementTimeRelateSledReqTime(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqSettlementTimeRelateSledReqTime(platformArgs, tradeAccountId, settlementDate);
      return recv_reqSettlementTimeRelateSledReqTime();
    }

    public void send_reqSettlementTimeRelateSledReqTime(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate) throws org.apache.thrift.TException
    {
      reqSettlementTimeRelateSledReqTime_args args = new reqSettlementTimeRelateSledReqTime_args();
      args.setPlatformArgs(platformArgs);
      args.setTradeAccountId(tradeAccountId);
      args.setSettlementDate(settlementDate);
      sendBase("reqSettlementTimeRelateSledReqTime", args);
    }

    public SettlementTimeRelateSledReqTime recv_reqSettlementTimeRelateSledReqTime() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
      receiveBase(result, "reqSettlementTimeRelateSledReqTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqSettlementTimeRelateSledReqTime failed: unknown result");
    }

    public DailyPositionDifferencePage reqDailyPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_reqDailyPositionDifference(platformArgs, option, pageOption);
      return recv_reqDailyPositionDifference();
    }

    public void send_reqDailyPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption) throws org.apache.thrift.TException
    {
      reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
      args.setPlatformArgs(platformArgs);
      args.setOption(option);
      args.setPageOption(pageOption);
      sendBase("reqDailyPositionDifference", args);
    }

    public DailyPositionDifferencePage recv_reqDailyPositionDifference() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
      receiveBase(result, "reqDailyPositionDifference");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reqDailyPositionDifference failed: unknown result");
    }

    public void updateDailyPositionDifferenceNote(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_updateDailyPositionDifferenceNote(platformArgs, difference);
      recv_updateDailyPositionDifferenceNote();
    }

    public void send_updateDailyPositionDifferenceNote(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference) throws org.apache.thrift.TException
    {
      updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
      args.setPlatformArgs(platformArgs);
      args.setDifference(difference);
      sendBase("updateDailyPositionDifferenceNote", args);
    }

    public void recv_updateDailyPositionDifferenceNote() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
      receiveBase(result, "updateDailyPositionDifferenceNote");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

    public void clearAll(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      send_clearAll(platformArgs);
      recv_clearAll();
    }

    public void send_clearAll(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) throws org.apache.thrift.TException
    {
      clearAll_args args = new clearAll_args();
      args.setPlatformArgs(platformArgs);
      sendBase("clearAll", args);
    }

    public void recv_clearAll() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException
    {
      clearAll_result result = new clearAll_result();
      receiveBase(result, "clearAll");
      if (result.err != null) {
        throw result.err;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void manualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      manualInputPosition_call method_call = new manualInputPosition_call(platformArgs, positionManualInputs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class manualInputPosition_call extends org.apache.thrift.async.TAsyncMethodCall <manualInputPosition_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private List<PositionManualInput> positionManualInputs;
      public manualInputPosition_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionManualInput> positionManualInputs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.positionManualInputs = positionManualInputs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("manualInputPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        manualInputPosition_args args = new manualInputPosition_args();
        args.setPlatformArgs(platformArgs);
        args.setPositionManualInputs(positionManualInputs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ManualInputPositionResp getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_manualInputPosition();
      }
    }

    public void reqManualInputPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqManualInputPosition_call method_call = new reqManualInputPosition_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqManualInputPosition_call extends org.apache.thrift.async.TAsyncMethodCall <reqManualInputPosition_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqPositionManualInputOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqManualInputPosition_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionManualInputOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqManualInputPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqManualInputPosition_args args = new reqManualInputPosition_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionManualInputPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqManualInputPosition();
      }
    }

    public void reqPositionUnassigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqPositionUnassigned_call method_call = new reqPositionUnassigned_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqPositionUnassigned_call extends org.apache.thrift.async.TAsyncMethodCall <reqPositionUnassigned_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqPositionUnassignedOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqPositionUnassigned_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionUnassignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqPositionUnassigned", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqPositionUnassigned_args args = new reqPositionUnassigned_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionUnassignedPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqPositionUnassigned();
      }
    }

    public void reqPositionAssigned(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqPositionAssigned_call method_call = new reqPositionAssigned_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqPositionAssigned_call extends org.apache.thrift.async.TAsyncMethodCall <reqPositionAssigned_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqPositionAssignedOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqPositionAssigned_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionAssignedOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqPositionAssigned", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqPositionAssigned_args args = new reqPositionAssigned_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionAssignedPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqPositionAssigned();
      }
    }

    public void assignPosition(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      assignPosition_call method_call = new assignPosition_call(platformArgs, assignOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class assignPosition_call extends org.apache.thrift.async.TAsyncMethodCall <assignPosition_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private List<PositionAssignOption> assignOption;
      public assignPosition_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, List<PositionAssignOption> assignOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.assignOption = assignOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("assignPosition", org.apache.thrift.protocol.TMessageType.CALL, 0));
        assignPosition_args args = new assignPosition_args();
        args.setPlatformArgs(platformArgs);
        args.setAssignOption(assignOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_assignPosition();
      }
    }

    public void reqPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqPositionEditLock_call method_call = new reqPositionEditLock_call(platformArgs, lockKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqPositionEditLock_call extends org.apache.thrift.async.TAsyncMethodCall <reqPositionEditLock_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private String lockKey;
      public reqPositionEditLock_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, String lockKey, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.lockKey = lockKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqPositionEditLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqPositionEditLock_args args = new reqPositionEditLock_args();
        args.setPlatformArgs(platformArgs);
        args.setLockKey(lockKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionEditLock getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqPositionEditLock();
      }
    }

    public void addPositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addPositionEditLock_call method_call = new addPositionEditLock_call(platformArgs, positionEditLock, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addPositionEditLock_call extends org.apache.thrift.async.TAsyncMethodCall <addPositionEditLock_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private PositionEditLock positionEditLock;
      public addPositionEditLock_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.positionEditLock = positionEditLock;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addPositionEditLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addPositionEditLock_args args = new addPositionEditLock_args();
        args.setPlatformArgs(platformArgs);
        args.setPositionEditLock(positionEditLock);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addPositionEditLock();
      }
    }

    public void removePositionEditLock(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removePositionEditLock_call method_call = new removePositionEditLock_call(platformArgs, positionEditLock, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removePositionEditLock_call extends org.apache.thrift.async.TAsyncMethodCall <removePositionEditLock_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private PositionEditLock positionEditLock;
      public removePositionEditLock_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, PositionEditLock positionEditLock, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.positionEditLock = positionEditLock;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removePositionEditLock", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removePositionEditLock_args args = new removePositionEditLock_args();
        args.setPlatformArgs(platformArgs);
        args.setPositionEditLock(positionEditLock);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_removePositionEditLock();
      }
    }

    public void reqPositionVerify(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqPositionVerify_call method_call = new reqPositionVerify_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqPositionVerify_call extends org.apache.thrift.async.TAsyncMethodCall <reqPositionVerify_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqPositionVerifyOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqPositionVerify_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionVerifyOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqPositionVerify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqPositionVerify_args args = new reqPositionVerify_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionVerifyPage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqPositionVerify();
      }
    }

    public void reqPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqPositionDifference_call method_call = new reqPositionDifference_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqPositionDifference_call extends org.apache.thrift.async.TAsyncMethodCall <reqPositionDifference_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqPositionDifferenceOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqPositionDifference_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqPositionDifference", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqPositionDifference_args args = new reqPositionDifference_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public PositionDifferencePage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqPositionDifference();
      }
    }

    public void reqSettlementTimeRelateSledReqTime(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqSettlementTimeRelateSledReqTime_call method_call = new reqSettlementTimeRelateSledReqTime_call(platformArgs, tradeAccountId, settlementDate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqSettlementTimeRelateSledReqTime_call extends org.apache.thrift.async.TAsyncMethodCall <reqSettlementTimeRelateSledReqTime_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private long tradeAccountId;
      private String settlementDate;
      public reqSettlementTimeRelateSledReqTime_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, long tradeAccountId, String settlementDate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.tradeAccountId = tradeAccountId;
        this.settlementDate = settlementDate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqSettlementTimeRelateSledReqTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqSettlementTimeRelateSledReqTime_args args = new reqSettlementTimeRelateSledReqTime_args();
        args.setPlatformArgs(platformArgs);
        args.setTradeAccountId(tradeAccountId);
        args.setSettlementDate(settlementDate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SettlementTimeRelateSledReqTime getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqSettlementTimeRelateSledReqTime();
      }
    }

    public void reqDailyPositionDifference(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reqDailyPositionDifference_call method_call = new reqDailyPositionDifference_call(platformArgs, option, pageOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reqDailyPositionDifference_call extends org.apache.thrift.async.TAsyncMethodCall <reqDailyPositionDifference_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private ReqDailyPositionDifferenceOption option;
      private org.soldier.platform.page.IndexedPageOption pageOption;
      public reqDailyPositionDifference_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, ReqDailyPositionDifferenceOption option, org.soldier.platform.page.IndexedPageOption pageOption, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.option = option;
        this.pageOption = pageOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reqDailyPositionDifference", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reqDailyPositionDifference_args args = new reqDailyPositionDifference_args();
        args.setPlatformArgs(platformArgs);
        args.setOption(option);
        args.setPageOption(pageOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DailyPositionDifferencePage getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reqDailyPositionDifference();
      }
    }

    public void updateDailyPositionDifferenceNote(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateDailyPositionDifferenceNote_call method_call = new updateDailyPositionDifferenceNote_call(platformArgs, difference, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateDailyPositionDifferenceNote_call extends org.apache.thrift.async.TAsyncMethodCall <updateDailyPositionDifferenceNote_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      private DailyPositionDifference difference;
      public updateDailyPositionDifferenceNote_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, DailyPositionDifference difference, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
        this.difference = difference;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateDailyPositionDifferenceNote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateDailyPositionDifferenceNote_args args = new updateDailyPositionDifferenceNote_args();
        args.setPlatformArgs(platformArgs);
        args.setDifference(difference);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_updateDailyPositionDifferenceNote();
      }
    }

    public void clearAll(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clearAll_call method_call = new clearAll_call(platformArgs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clearAll_call extends org.apache.thrift.async.TAsyncMethodCall <clearAll_call>{
      private org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs;
      public clearAll_call(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.platformArgs = platformArgs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clearAll", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clearAll_args args = new clearAll_args();
        args.setPlatformArgs(platformArgs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.soldier.platform.svr_platform.comm.ErrorInfo, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_clearAll();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("manualInputPosition", new manualInputPosition());
      processMap.put("reqManualInputPosition", new reqManualInputPosition());
      processMap.put("reqPositionUnassigned", new reqPositionUnassigned());
      processMap.put("reqPositionAssigned", new reqPositionAssigned());
      processMap.put("assignPosition", new assignPosition());
      processMap.put("reqPositionEditLock", new reqPositionEditLock());
      processMap.put("addPositionEditLock", new addPositionEditLock());
      processMap.put("removePositionEditLock", new removePositionEditLock());
      processMap.put("reqPositionVerify", new reqPositionVerify());
      processMap.put("reqPositionDifference", new reqPositionDifference());
      processMap.put("reqSettlementTimeRelateSledReqTime", new reqSettlementTimeRelateSledReqTime());
      processMap.put("reqDailyPositionDifference", new reqDailyPositionDifference());
      processMap.put("updateDailyPositionDifferenceNote", new updateDailyPositionDifferenceNote());
      processMap.put("clearAll", new clearAll());
      return processMap;
    }

    public static class manualInputPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, manualInputPosition_args> {
      public manualInputPosition() {
        super("manualInputPosition");
      }

      public manualInputPosition_args getEmptyArgsInstance() {
        return new manualInputPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public manualInputPosition_result getResult(I iface, manualInputPosition_args args) throws org.apache.thrift.TException {
        manualInputPosition_result result = new manualInputPosition_result();
        try {
          result.success = iface.manualInputPosition(args.platformArgs, args.positionManualInputs);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqManualInputPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqManualInputPosition_args> {
      public reqManualInputPosition() {
        super("reqManualInputPosition");
      }

      public reqManualInputPosition_args getEmptyArgsInstance() {
        return new reqManualInputPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqManualInputPosition_result getResult(I iface, reqManualInputPosition_args args) throws org.apache.thrift.TException {
        reqManualInputPosition_result result = new reqManualInputPosition_result();
        try {
          result.success = iface.reqManualInputPosition(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqPositionUnassigned<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqPositionUnassigned_args> {
      public reqPositionUnassigned() {
        super("reqPositionUnassigned");
      }

      public reqPositionUnassigned_args getEmptyArgsInstance() {
        return new reqPositionUnassigned_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqPositionUnassigned_result getResult(I iface, reqPositionUnassigned_args args) throws org.apache.thrift.TException {
        reqPositionUnassigned_result result = new reqPositionUnassigned_result();
        try {
          result.success = iface.reqPositionUnassigned(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqPositionAssigned<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqPositionAssigned_args> {
      public reqPositionAssigned() {
        super("reqPositionAssigned");
      }

      public reqPositionAssigned_args getEmptyArgsInstance() {
        return new reqPositionAssigned_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqPositionAssigned_result getResult(I iface, reqPositionAssigned_args args) throws org.apache.thrift.TException {
        reqPositionAssigned_result result = new reqPositionAssigned_result();
        try {
          result.success = iface.reqPositionAssigned(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class assignPosition<I extends Iface> extends org.apache.thrift.ProcessFunction<I, assignPosition_args> {
      public assignPosition() {
        super("assignPosition");
      }

      public assignPosition_args getEmptyArgsInstance() {
        return new assignPosition_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public assignPosition_result getResult(I iface, assignPosition_args args) throws org.apache.thrift.TException {
        assignPosition_result result = new assignPosition_result();
        try {
          result.success = iface.assignPosition(args.platformArgs, args.assignOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqPositionEditLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqPositionEditLock_args> {
      public reqPositionEditLock() {
        super("reqPositionEditLock");
      }

      public reqPositionEditLock_args getEmptyArgsInstance() {
        return new reqPositionEditLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqPositionEditLock_result getResult(I iface, reqPositionEditLock_args args) throws org.apache.thrift.TException {
        reqPositionEditLock_result result = new reqPositionEditLock_result();
        try {
          result.success = iface.reqPositionEditLock(args.platformArgs, args.lockKey);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class addPositionEditLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addPositionEditLock_args> {
      public addPositionEditLock() {
        super("addPositionEditLock");
      }

      public addPositionEditLock_args getEmptyArgsInstance() {
        return new addPositionEditLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addPositionEditLock_result getResult(I iface, addPositionEditLock_args args) throws org.apache.thrift.TException {
        addPositionEditLock_result result = new addPositionEditLock_result();
        try {
          iface.addPositionEditLock(args.platformArgs, args.positionEditLock);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class removePositionEditLock<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removePositionEditLock_args> {
      public removePositionEditLock() {
        super("removePositionEditLock");
      }

      public removePositionEditLock_args getEmptyArgsInstance() {
        return new removePositionEditLock_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public removePositionEditLock_result getResult(I iface, removePositionEditLock_args args) throws org.apache.thrift.TException {
        removePositionEditLock_result result = new removePositionEditLock_result();
        try {
          iface.removePositionEditLock(args.platformArgs, args.positionEditLock);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqPositionVerify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqPositionVerify_args> {
      public reqPositionVerify() {
        super("reqPositionVerify");
      }

      public reqPositionVerify_args getEmptyArgsInstance() {
        return new reqPositionVerify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqPositionVerify_result getResult(I iface, reqPositionVerify_args args) throws org.apache.thrift.TException {
        reqPositionVerify_result result = new reqPositionVerify_result();
        try {
          result.success = iface.reqPositionVerify(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqPositionDifference<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqPositionDifference_args> {
      public reqPositionDifference() {
        super("reqPositionDifference");
      }

      public reqPositionDifference_args getEmptyArgsInstance() {
        return new reqPositionDifference_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqPositionDifference_result getResult(I iface, reqPositionDifference_args args) throws org.apache.thrift.TException {
        reqPositionDifference_result result = new reqPositionDifference_result();
        try {
          result.success = iface.reqPositionDifference(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqSettlementTimeRelateSledReqTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqSettlementTimeRelateSledReqTime_args> {
      public reqSettlementTimeRelateSledReqTime() {
        super("reqSettlementTimeRelateSledReqTime");
      }

      public reqSettlementTimeRelateSledReqTime_args getEmptyArgsInstance() {
        return new reqSettlementTimeRelateSledReqTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqSettlementTimeRelateSledReqTime_result getResult(I iface, reqSettlementTimeRelateSledReqTime_args args) throws org.apache.thrift.TException {
        reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
        try {
          result.success = iface.reqSettlementTimeRelateSledReqTime(args.platformArgs, args.tradeAccountId, args.settlementDate);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class reqDailyPositionDifference<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reqDailyPositionDifference_args> {
      public reqDailyPositionDifference() {
        super("reqDailyPositionDifference");
      }

      public reqDailyPositionDifference_args getEmptyArgsInstance() {
        return new reqDailyPositionDifference_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public reqDailyPositionDifference_result getResult(I iface, reqDailyPositionDifference_args args) throws org.apache.thrift.TException {
        reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
        try {
          result.success = iface.reqDailyPositionDifference(args.platformArgs, args.option, args.pageOption);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class updateDailyPositionDifferenceNote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateDailyPositionDifferenceNote_args> {
      public updateDailyPositionDifferenceNote() {
        super("updateDailyPositionDifferenceNote");
      }

      public updateDailyPositionDifferenceNote_args getEmptyArgsInstance() {
        return new updateDailyPositionDifferenceNote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateDailyPositionDifferenceNote_result getResult(I iface, updateDailyPositionDifferenceNote_args args) throws org.apache.thrift.TException {
        updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
        try {
          iface.updateDailyPositionDifferenceNote(args.platformArgs, args.difference);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

    public static class clearAll<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clearAll_args> {
      public clearAll() {
        super("clearAll");
      }

      public clearAll_args getEmptyArgsInstance() {
        return new clearAll_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public clearAll_result getResult(I iface, clearAll_args args) throws org.apache.thrift.TException {
        clearAll_result result = new clearAll_result();
        try {
          iface.clearAll(args.platformArgs);
        } catch (org.soldier.platform.svr_platform.comm.ErrorInfo err) {
          result.err = err;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("manualInputPosition", new manualInputPosition());
      processMap.put("reqManualInputPosition", new reqManualInputPosition());
      processMap.put("reqPositionUnassigned", new reqPositionUnassigned());
      processMap.put("reqPositionAssigned", new reqPositionAssigned());
      processMap.put("assignPosition", new assignPosition());
      processMap.put("reqPositionEditLock", new reqPositionEditLock());
      processMap.put("addPositionEditLock", new addPositionEditLock());
      processMap.put("removePositionEditLock", new removePositionEditLock());
      processMap.put("reqPositionVerify", new reqPositionVerify());
      processMap.put("reqPositionDifference", new reqPositionDifference());
      processMap.put("reqSettlementTimeRelateSledReqTime", new reqSettlementTimeRelateSledReqTime());
      processMap.put("reqDailyPositionDifference", new reqDailyPositionDifference());
      processMap.put("updateDailyPositionDifferenceNote", new updateDailyPositionDifferenceNote());
      processMap.put("clearAll", new clearAll());
      return processMap;
    }

    public static class manualInputPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, manualInputPosition_args, ManualInputPositionResp> {
      public manualInputPosition() {
        super("manualInputPosition");
      }

      public manualInputPosition_args getEmptyArgsInstance() {
        return new manualInputPosition_args();
      }

      public AsyncMethodCallback<ManualInputPositionResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ManualInputPositionResp>() { 
          public void onComplete(ManualInputPositionResp o) {
            manualInputPosition_result result = new manualInputPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            manualInputPosition_result result = new manualInputPosition_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, manualInputPosition_args args, org.apache.thrift.async.AsyncMethodCallback<ManualInputPositionResp> resultHandler) throws TException {
        iface.manualInputPosition(args.platformArgs, args.positionManualInputs,resultHandler);
      }
    }

    public static class reqManualInputPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqManualInputPosition_args, PositionManualInputPage> {
      public reqManualInputPosition() {
        super("reqManualInputPosition");
      }

      public reqManualInputPosition_args getEmptyArgsInstance() {
        return new reqManualInputPosition_args();
      }

      public AsyncMethodCallback<PositionManualInputPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionManualInputPage>() { 
          public void onComplete(PositionManualInputPage o) {
            reqManualInputPosition_result result = new reqManualInputPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqManualInputPosition_result result = new reqManualInputPosition_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqManualInputPosition_args args, org.apache.thrift.async.AsyncMethodCallback<PositionManualInputPage> resultHandler) throws TException {
        iface.reqManualInputPosition(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqPositionUnassigned<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqPositionUnassigned_args, PositionUnassignedPage> {
      public reqPositionUnassigned() {
        super("reqPositionUnassigned");
      }

      public reqPositionUnassigned_args getEmptyArgsInstance() {
        return new reqPositionUnassigned_args();
      }

      public AsyncMethodCallback<PositionUnassignedPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionUnassignedPage>() { 
          public void onComplete(PositionUnassignedPage o) {
            reqPositionUnassigned_result result = new reqPositionUnassigned_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqPositionUnassigned_result result = new reqPositionUnassigned_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqPositionUnassigned_args args, org.apache.thrift.async.AsyncMethodCallback<PositionUnassignedPage> resultHandler) throws TException {
        iface.reqPositionUnassigned(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqPositionAssigned<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqPositionAssigned_args, PositionAssignedPage> {
      public reqPositionAssigned() {
        super("reqPositionAssigned");
      }

      public reqPositionAssigned_args getEmptyArgsInstance() {
        return new reqPositionAssigned_args();
      }

      public AsyncMethodCallback<PositionAssignedPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionAssignedPage>() { 
          public void onComplete(PositionAssignedPage o) {
            reqPositionAssigned_result result = new reqPositionAssigned_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqPositionAssigned_result result = new reqPositionAssigned_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqPositionAssigned_args args, org.apache.thrift.async.AsyncMethodCallback<PositionAssignedPage> resultHandler) throws TException {
        iface.reqPositionAssigned(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class assignPosition<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, assignPosition_args, xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp> {
      public assignPosition() {
        super("assignPosition");
      }

      public assignPosition_args getEmptyArgsInstance() {
        return new assignPosition_args();
      }

      public AsyncMethodCallback<xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp>() { 
          public void onComplete(xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp o) {
            assignPosition_result result = new assignPosition_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            assignPosition_result result = new assignPosition_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, assignPosition_args args, org.apache.thrift.async.AsyncMethodCallback<xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp> resultHandler) throws TException {
        iface.assignPosition(args.platformArgs, args.assignOption,resultHandler);
      }
    }

    public static class reqPositionEditLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqPositionEditLock_args, PositionEditLock> {
      public reqPositionEditLock() {
        super("reqPositionEditLock");
      }

      public reqPositionEditLock_args getEmptyArgsInstance() {
        return new reqPositionEditLock_args();
      }

      public AsyncMethodCallback<PositionEditLock> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionEditLock>() { 
          public void onComplete(PositionEditLock o) {
            reqPositionEditLock_result result = new reqPositionEditLock_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqPositionEditLock_result result = new reqPositionEditLock_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqPositionEditLock_args args, org.apache.thrift.async.AsyncMethodCallback<PositionEditLock> resultHandler) throws TException {
        iface.reqPositionEditLock(args.platformArgs, args.lockKey,resultHandler);
      }
    }

    public static class addPositionEditLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addPositionEditLock_args, Void> {
      public addPositionEditLock() {
        super("addPositionEditLock");
      }

      public addPositionEditLock_args getEmptyArgsInstance() {
        return new addPositionEditLock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addPositionEditLock_result result = new addPositionEditLock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addPositionEditLock_result result = new addPositionEditLock_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addPositionEditLock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addPositionEditLock(args.platformArgs, args.positionEditLock,resultHandler);
      }
    }

    public static class removePositionEditLock<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removePositionEditLock_args, Void> {
      public removePositionEditLock() {
        super("removePositionEditLock");
      }

      public removePositionEditLock_args getEmptyArgsInstance() {
        return new removePositionEditLock_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            removePositionEditLock_result result = new removePositionEditLock_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            removePositionEditLock_result result = new removePositionEditLock_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removePositionEditLock_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.removePositionEditLock(args.platformArgs, args.positionEditLock,resultHandler);
      }
    }

    public static class reqPositionVerify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqPositionVerify_args, PositionVerifyPage> {
      public reqPositionVerify() {
        super("reqPositionVerify");
      }

      public reqPositionVerify_args getEmptyArgsInstance() {
        return new reqPositionVerify_args();
      }

      public AsyncMethodCallback<PositionVerifyPage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionVerifyPage>() { 
          public void onComplete(PositionVerifyPage o) {
            reqPositionVerify_result result = new reqPositionVerify_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqPositionVerify_result result = new reqPositionVerify_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqPositionVerify_args args, org.apache.thrift.async.AsyncMethodCallback<PositionVerifyPage> resultHandler) throws TException {
        iface.reqPositionVerify(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqPositionDifference<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqPositionDifference_args, PositionDifferencePage> {
      public reqPositionDifference() {
        super("reqPositionDifference");
      }

      public reqPositionDifference_args getEmptyArgsInstance() {
        return new reqPositionDifference_args();
      }

      public AsyncMethodCallback<PositionDifferencePage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<PositionDifferencePage>() { 
          public void onComplete(PositionDifferencePage o) {
            reqPositionDifference_result result = new reqPositionDifference_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqPositionDifference_result result = new reqPositionDifference_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqPositionDifference_args args, org.apache.thrift.async.AsyncMethodCallback<PositionDifferencePage> resultHandler) throws TException {
        iface.reqPositionDifference(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class reqSettlementTimeRelateSledReqTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqSettlementTimeRelateSledReqTime_args, SettlementTimeRelateSledReqTime> {
      public reqSettlementTimeRelateSledReqTime() {
        super("reqSettlementTimeRelateSledReqTime");
      }

      public reqSettlementTimeRelateSledReqTime_args getEmptyArgsInstance() {
        return new reqSettlementTimeRelateSledReqTime_args();
      }

      public AsyncMethodCallback<SettlementTimeRelateSledReqTime> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<SettlementTimeRelateSledReqTime>() { 
          public void onComplete(SettlementTimeRelateSledReqTime o) {
            reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqSettlementTimeRelateSledReqTime_result result = new reqSettlementTimeRelateSledReqTime_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqSettlementTimeRelateSledReqTime_args args, org.apache.thrift.async.AsyncMethodCallback<SettlementTimeRelateSledReqTime> resultHandler) throws TException {
        iface.reqSettlementTimeRelateSledReqTime(args.platformArgs, args.tradeAccountId, args.settlementDate,resultHandler);
      }
    }

    public static class reqDailyPositionDifference<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reqDailyPositionDifference_args, DailyPositionDifferencePage> {
      public reqDailyPositionDifference() {
        super("reqDailyPositionDifference");
      }

      public reqDailyPositionDifference_args getEmptyArgsInstance() {
        return new reqDailyPositionDifference_args();
      }

      public AsyncMethodCallback<DailyPositionDifferencePage> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<DailyPositionDifferencePage>() { 
          public void onComplete(DailyPositionDifferencePage o) {
            reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            reqDailyPositionDifference_result result = new reqDailyPositionDifference_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reqDailyPositionDifference_args args, org.apache.thrift.async.AsyncMethodCallback<DailyPositionDifferencePage> resultHandler) throws TException {
        iface.reqDailyPositionDifference(args.platformArgs, args.option, args.pageOption,resultHandler);
      }
    }

    public static class updateDailyPositionDifferenceNote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateDailyPositionDifferenceNote_args, Void> {
      public updateDailyPositionDifferenceNote() {
        super("updateDailyPositionDifferenceNote");
      }

      public updateDailyPositionDifferenceNote_args getEmptyArgsInstance() {
        return new updateDailyPositionDifferenceNote_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateDailyPositionDifferenceNote_result result = new updateDailyPositionDifferenceNote_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateDailyPositionDifferenceNote_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.updateDailyPositionDifferenceNote(args.platformArgs, args.difference,resultHandler);
      }
    }

    public static class clearAll<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clearAll_args, Void> {
      public clearAll() {
        super("clearAll");
      }

      public clearAll_args getEmptyArgsInstance() {
        return new clearAll_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            clearAll_result result = new clearAll_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            clearAll_result result = new clearAll_result();
            if (e instanceof org.soldier.platform.svr_platform.comm.ErrorInfo) {
                        result.err = (org.soldier.platform.svr_platform.comm.ErrorInfo) e;
                        result.setErrIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clearAll_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.clearAll(args.platformArgs,resultHandler);
      }
    }

  }

  public static class manualInputPosition_args implements org.apache.thrift.TBase<manualInputPosition_args, manualInputPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<manualInputPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("manualInputPosition_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_MANUAL_INPUTS_FIELD_DESC = new org.apache.thrift.protocol.TField("positionManualInputs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new manualInputPosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new manualInputPosition_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public List<PositionManualInput> positionManualInputs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      POSITION_MANUAL_INPUTS((short)2, "positionManualInputs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // POSITION_MANUAL_INPUTS
            return POSITION_MANUAL_INPUTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.POSITION_MANUAL_INPUTS, new org.apache.thrift.meta_data.FieldMetaData("positionManualInputs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionManualInput.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(manualInputPosition_args.class, metaDataMap);
    }

    public manualInputPosition_args() {
    }

    public manualInputPosition_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      List<PositionManualInput> positionManualInputs)
    {
      this();
      this.platformArgs = platformArgs;
      this.positionManualInputs = positionManualInputs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public manualInputPosition_args(manualInputPosition_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetPositionManualInputs()) {
        List<PositionManualInput> __this__positionManualInputs = new ArrayList<PositionManualInput>(other.positionManualInputs.size());
        for (PositionManualInput other_element : other.positionManualInputs) {
          __this__positionManualInputs.add(new PositionManualInput(other_element));
        }
        this.positionManualInputs = __this__positionManualInputs;
      }
    }

    public manualInputPosition_args deepCopy() {
      return new manualInputPosition_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.positionManualInputs = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public manualInputPosition_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getPositionManualInputsSize() {
      return (this.positionManualInputs == null) ? 0 : this.positionManualInputs.size();
    }

    public java.util.Iterator<PositionManualInput> getPositionManualInputsIterator() {
      return (this.positionManualInputs == null) ? null : this.positionManualInputs.iterator();
    }

    public void addToPositionManualInputs(PositionManualInput elem) {
      if (this.positionManualInputs == null) {
        this.positionManualInputs = new ArrayList<PositionManualInput>();
      }
      this.positionManualInputs.add(elem);
    }

    public List<PositionManualInput> getPositionManualInputs() {
      return this.positionManualInputs;
    }

    public manualInputPosition_args setPositionManualInputs(List<PositionManualInput> positionManualInputs) {
      this.positionManualInputs = positionManualInputs;
      return this;
    }

    public void unsetPositionManualInputs() {
      this.positionManualInputs = null;
    }

    /** Returns true if field positionManualInputs is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionManualInputs() {
      return this.positionManualInputs != null;
    }

    public void setPositionManualInputsIsSet(boolean value) {
      if (!value) {
        this.positionManualInputs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case POSITION_MANUAL_INPUTS:
        if (value == null) {
          unsetPositionManualInputs();
        } else {
          setPositionManualInputs((List<PositionManualInput>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case POSITION_MANUAL_INPUTS:
        return getPositionManualInputs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case POSITION_MANUAL_INPUTS:
        return isSetPositionManualInputs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof manualInputPosition_args)
        return this.equals((manualInputPosition_args)that);
      return false;
    }

    public boolean equals(manualInputPosition_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_positionManualInputs = true && this.isSetPositionManualInputs();
      boolean that_present_positionManualInputs = true && that.isSetPositionManualInputs();
      if (this_present_positionManualInputs || that_present_positionManualInputs) {
        if (!(this_present_positionManualInputs && that_present_positionManualInputs))
          return false;
        if (!this.positionManualInputs.equals(that.positionManualInputs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(manualInputPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionManualInputs()).compareTo(other.isSetPositionManualInputs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionManualInputs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionManualInputs, other.positionManualInputs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("manualInputPosition_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionManualInputs:");
      if (this.positionManualInputs == null) {
        sb.append("null");
      } else {
        sb.append(this.positionManualInputs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class manualInputPosition_argsStandardSchemeFactory implements SchemeFactory {
      public manualInputPosition_argsStandardScheme getScheme() {
        return new manualInputPosition_argsStandardScheme();
      }
    }

    private static class manualInputPosition_argsStandardScheme extends StandardScheme<manualInputPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, manualInputPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_MANUAL_INPUTS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.positionManualInputs = new ArrayList<PositionManualInput>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    PositionManualInput _elem114;
                    _elem114 = new PositionManualInput();
                    _elem114.read(iprot);
                    struct.positionManualInputs.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setPositionManualInputsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, manualInputPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.positionManualInputs != null) {
          oprot.writeFieldBegin(POSITION_MANUAL_INPUTS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.positionManualInputs.size()));
            for (PositionManualInput _iter115 : struct.positionManualInputs)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class manualInputPosition_argsTupleSchemeFactory implements SchemeFactory {
      public manualInputPosition_argsTupleScheme getScheme() {
        return new manualInputPosition_argsTupleScheme();
      }
    }

    private static class manualInputPosition_argsTupleScheme extends TupleScheme<manualInputPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, manualInputPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetPositionManualInputs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetPositionManualInputs()) {
          {
            oprot.writeI32(struct.positionManualInputs.size());
            for (PositionManualInput _iter116 : struct.positionManualInputs)
            {
              _iter116.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, manualInputPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.positionManualInputs = new ArrayList<PositionManualInput>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              PositionManualInput _elem119;
              _elem119 = new PositionManualInput();
              _elem119.read(iprot);
              struct.positionManualInputs.add(_elem119);
            }
          }
          struct.setPositionManualInputsIsSet(true);
        }
      }
    }

  }

  public static class manualInputPosition_result implements org.apache.thrift.TBase<manualInputPosition_result, manualInputPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<manualInputPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("manualInputPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new manualInputPosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new manualInputPosition_resultTupleSchemeFactory());
    }

    public ManualInputPositionResp success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ManualInputPositionResp.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(manualInputPosition_result.class, metaDataMap);
    }

    public manualInputPosition_result() {
    }

    public manualInputPosition_result(
      ManualInputPositionResp success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public manualInputPosition_result(manualInputPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new ManualInputPositionResp(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public manualInputPosition_result deepCopy() {
      return new manualInputPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public ManualInputPositionResp getSuccess() {
      return this.success;
    }

    public manualInputPosition_result setSuccess(ManualInputPositionResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public manualInputPosition_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ManualInputPositionResp)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof manualInputPosition_result)
        return this.equals((manualInputPosition_result)that);
      return false;
    }

    public boolean equals(manualInputPosition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(manualInputPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("manualInputPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class manualInputPosition_resultStandardSchemeFactory implements SchemeFactory {
      public manualInputPosition_resultStandardScheme getScheme() {
        return new manualInputPosition_resultStandardScheme();
      }
    }

    private static class manualInputPosition_resultStandardScheme extends StandardScheme<manualInputPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, manualInputPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ManualInputPositionResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, manualInputPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class manualInputPosition_resultTupleSchemeFactory implements SchemeFactory {
      public manualInputPosition_resultTupleScheme getScheme() {
        return new manualInputPosition_resultTupleScheme();
      }
    }

    private static class manualInputPosition_resultTupleScheme extends TupleScheme<manualInputPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, manualInputPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, manualInputPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ManualInputPositionResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqManualInputPosition_args implements org.apache.thrift.TBase<reqManualInputPosition_args, reqManualInputPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqManualInputPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqManualInputPosition_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqManualInputPosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqManualInputPosition_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqPositionManualInputOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPositionManualInputOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqManualInputPosition_args.class, metaDataMap);
    }

    public reqManualInputPosition_args() {
    }

    public reqManualInputPosition_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqPositionManualInputOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqManualInputPosition_args(reqManualInputPosition_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqPositionManualInputOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqManualInputPosition_args deepCopy() {
      return new reqManualInputPosition_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqManualInputPosition_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqPositionManualInputOption getOption() {
      return this.option;
    }

    public reqManualInputPosition_args setOption(ReqPositionManualInputOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqManualInputPosition_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqPositionManualInputOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqManualInputPosition_args)
        return this.equals((reqManualInputPosition_args)that);
      return false;
    }

    public boolean equals(reqManualInputPosition_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqManualInputPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqManualInputPosition_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqManualInputPosition_argsStandardSchemeFactory implements SchemeFactory {
      public reqManualInputPosition_argsStandardScheme getScheme() {
        return new reqManualInputPosition_argsStandardScheme();
      }
    }

    private static class reqManualInputPosition_argsStandardScheme extends StandardScheme<reqManualInputPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqManualInputPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqPositionManualInputOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqManualInputPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqManualInputPosition_argsTupleSchemeFactory implements SchemeFactory {
      public reqManualInputPosition_argsTupleScheme getScheme() {
        return new reqManualInputPosition_argsTupleScheme();
      }
    }

    private static class reqManualInputPosition_argsTupleScheme extends TupleScheme<reqManualInputPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqManualInputPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqManualInputPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqPositionManualInputOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqManualInputPosition_result implements org.apache.thrift.TBase<reqManualInputPosition_result, reqManualInputPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqManualInputPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqManualInputPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqManualInputPosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqManualInputPosition_resultTupleSchemeFactory());
    }

    public PositionManualInputPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionManualInputPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqManualInputPosition_result.class, metaDataMap);
    }

    public reqManualInputPosition_result() {
    }

    public reqManualInputPosition_result(
      PositionManualInputPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqManualInputPosition_result(reqManualInputPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionManualInputPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqManualInputPosition_result deepCopy() {
      return new reqManualInputPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionManualInputPage getSuccess() {
      return this.success;
    }

    public reqManualInputPosition_result setSuccess(PositionManualInputPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqManualInputPosition_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionManualInputPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqManualInputPosition_result)
        return this.equals((reqManualInputPosition_result)that);
      return false;
    }

    public boolean equals(reqManualInputPosition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqManualInputPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqManualInputPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqManualInputPosition_resultStandardSchemeFactory implements SchemeFactory {
      public reqManualInputPosition_resultStandardScheme getScheme() {
        return new reqManualInputPosition_resultStandardScheme();
      }
    }

    private static class reqManualInputPosition_resultStandardScheme extends StandardScheme<reqManualInputPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqManualInputPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionManualInputPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqManualInputPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqManualInputPosition_resultTupleSchemeFactory implements SchemeFactory {
      public reqManualInputPosition_resultTupleScheme getScheme() {
        return new reqManualInputPosition_resultTupleScheme();
      }
    }

    private static class reqManualInputPosition_resultTupleScheme extends TupleScheme<reqManualInputPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqManualInputPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqManualInputPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionManualInputPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqPositionUnassigned_args implements org.apache.thrift.TBase<reqPositionUnassigned_args, reqPositionUnassigned_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionUnassigned_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionUnassigned_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionUnassigned_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionUnassigned_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqPositionUnassignedOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPositionUnassignedOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionUnassigned_args.class, metaDataMap);
    }

    public reqPositionUnassigned_args() {
    }

    public reqPositionUnassigned_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqPositionUnassignedOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionUnassigned_args(reqPositionUnassigned_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqPositionUnassignedOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqPositionUnassigned_args deepCopy() {
      return new reqPositionUnassigned_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqPositionUnassigned_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqPositionUnassignedOption getOption() {
      return this.option;
    }

    public reqPositionUnassigned_args setOption(ReqPositionUnassignedOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqPositionUnassigned_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqPositionUnassignedOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionUnassigned_args)
        return this.equals((reqPositionUnassigned_args)that);
      return false;
    }

    public boolean equals(reqPositionUnassigned_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionUnassigned_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionUnassigned_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionUnassigned_argsStandardSchemeFactory implements SchemeFactory {
      public reqPositionUnassigned_argsStandardScheme getScheme() {
        return new reqPositionUnassigned_argsStandardScheme();
      }
    }

    private static class reqPositionUnassigned_argsStandardScheme extends StandardScheme<reqPositionUnassigned_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionUnassigned_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqPositionUnassignedOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionUnassigned_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionUnassigned_argsTupleSchemeFactory implements SchemeFactory {
      public reqPositionUnassigned_argsTupleScheme getScheme() {
        return new reqPositionUnassigned_argsTupleScheme();
      }
    }

    private static class reqPositionUnassigned_argsTupleScheme extends TupleScheme<reqPositionUnassigned_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionUnassigned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionUnassigned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqPositionUnassignedOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqPositionUnassigned_result implements org.apache.thrift.TBase<reqPositionUnassigned_result, reqPositionUnassigned_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionUnassigned_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionUnassigned_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionUnassigned_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionUnassigned_resultTupleSchemeFactory());
    }

    public PositionUnassignedPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionUnassignedPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionUnassigned_result.class, metaDataMap);
    }

    public reqPositionUnassigned_result() {
    }

    public reqPositionUnassigned_result(
      PositionUnassignedPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionUnassigned_result(reqPositionUnassigned_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionUnassignedPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqPositionUnassigned_result deepCopy() {
      return new reqPositionUnassigned_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionUnassignedPage getSuccess() {
      return this.success;
    }

    public reqPositionUnassigned_result setSuccess(PositionUnassignedPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqPositionUnassigned_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionUnassignedPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionUnassigned_result)
        return this.equals((reqPositionUnassigned_result)that);
      return false;
    }

    public boolean equals(reqPositionUnassigned_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionUnassigned_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionUnassigned_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionUnassigned_resultStandardSchemeFactory implements SchemeFactory {
      public reqPositionUnassigned_resultStandardScheme getScheme() {
        return new reqPositionUnassigned_resultStandardScheme();
      }
    }

    private static class reqPositionUnassigned_resultStandardScheme extends StandardScheme<reqPositionUnassigned_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionUnassigned_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionUnassignedPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionUnassigned_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionUnassigned_resultTupleSchemeFactory implements SchemeFactory {
      public reqPositionUnassigned_resultTupleScheme getScheme() {
        return new reqPositionUnassigned_resultTupleScheme();
      }
    }

    private static class reqPositionUnassigned_resultTupleScheme extends TupleScheme<reqPositionUnassigned_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionUnassigned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionUnassigned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionUnassignedPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqPositionAssigned_args implements org.apache.thrift.TBase<reqPositionAssigned_args, reqPositionAssigned_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionAssigned_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionAssigned_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionAssigned_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionAssigned_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqPositionAssignedOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPositionAssignedOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionAssigned_args.class, metaDataMap);
    }

    public reqPositionAssigned_args() {
    }

    public reqPositionAssigned_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqPositionAssignedOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionAssigned_args(reqPositionAssigned_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqPositionAssignedOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqPositionAssigned_args deepCopy() {
      return new reqPositionAssigned_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqPositionAssigned_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqPositionAssignedOption getOption() {
      return this.option;
    }

    public reqPositionAssigned_args setOption(ReqPositionAssignedOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqPositionAssigned_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqPositionAssignedOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionAssigned_args)
        return this.equals((reqPositionAssigned_args)that);
      return false;
    }

    public boolean equals(reqPositionAssigned_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionAssigned_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionAssigned_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionAssigned_argsStandardSchemeFactory implements SchemeFactory {
      public reqPositionAssigned_argsStandardScheme getScheme() {
        return new reqPositionAssigned_argsStandardScheme();
      }
    }

    private static class reqPositionAssigned_argsStandardScheme extends StandardScheme<reqPositionAssigned_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionAssigned_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqPositionAssignedOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionAssigned_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionAssigned_argsTupleSchemeFactory implements SchemeFactory {
      public reqPositionAssigned_argsTupleScheme getScheme() {
        return new reqPositionAssigned_argsTupleScheme();
      }
    }

    private static class reqPositionAssigned_argsTupleScheme extends TupleScheme<reqPositionAssigned_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionAssigned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionAssigned_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqPositionAssignedOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqPositionAssigned_result implements org.apache.thrift.TBase<reqPositionAssigned_result, reqPositionAssigned_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionAssigned_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionAssigned_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionAssigned_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionAssigned_resultTupleSchemeFactory());
    }

    public PositionAssignedPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionAssignedPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionAssigned_result.class, metaDataMap);
    }

    public reqPositionAssigned_result() {
    }

    public reqPositionAssigned_result(
      PositionAssignedPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionAssigned_result(reqPositionAssigned_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionAssignedPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqPositionAssigned_result deepCopy() {
      return new reqPositionAssigned_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionAssignedPage getSuccess() {
      return this.success;
    }

    public reqPositionAssigned_result setSuccess(PositionAssignedPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqPositionAssigned_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionAssignedPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionAssigned_result)
        return this.equals((reqPositionAssigned_result)that);
      return false;
    }

    public boolean equals(reqPositionAssigned_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionAssigned_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionAssigned_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionAssigned_resultStandardSchemeFactory implements SchemeFactory {
      public reqPositionAssigned_resultStandardScheme getScheme() {
        return new reqPositionAssigned_resultStandardScheme();
      }
    }

    private static class reqPositionAssigned_resultStandardScheme extends StandardScheme<reqPositionAssigned_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionAssigned_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionAssignedPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionAssigned_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionAssigned_resultTupleSchemeFactory implements SchemeFactory {
      public reqPositionAssigned_resultTupleScheme getScheme() {
        return new reqPositionAssigned_resultTupleScheme();
      }
    }

    private static class reqPositionAssigned_resultTupleScheme extends TupleScheme<reqPositionAssigned_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionAssigned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionAssigned_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionAssignedPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class assignPosition_args implements org.apache.thrift.TBase<assignPosition_args, assignPosition_args._Fields>, java.io.Serializable, Cloneable, Comparable<assignPosition_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignPosition_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ASSIGN_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("assignOption", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignPosition_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignPosition_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public List<PositionAssignOption> assignOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      ASSIGN_OPTION((short)2, "assignOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // ASSIGN_OPTION
            return ASSIGN_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.ASSIGN_OPTION, new org.apache.thrift.meta_data.FieldMetaData("assignOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionAssignOption.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignPosition_args.class, metaDataMap);
    }

    public assignPosition_args() {
    }

    public assignPosition_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      List<PositionAssignOption> assignOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.assignOption = assignOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignPosition_args(assignPosition_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetAssignOption()) {
        List<PositionAssignOption> __this__assignOption = new ArrayList<PositionAssignOption>(other.assignOption.size());
        for (PositionAssignOption other_element : other.assignOption) {
          __this__assignOption.add(new PositionAssignOption(other_element));
        }
        this.assignOption = __this__assignOption;
      }
    }

    public assignPosition_args deepCopy() {
      return new assignPosition_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.assignOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public assignPosition_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public int getAssignOptionSize() {
      return (this.assignOption == null) ? 0 : this.assignOption.size();
    }

    public java.util.Iterator<PositionAssignOption> getAssignOptionIterator() {
      return (this.assignOption == null) ? null : this.assignOption.iterator();
    }

    public void addToAssignOption(PositionAssignOption elem) {
      if (this.assignOption == null) {
        this.assignOption = new ArrayList<PositionAssignOption>();
      }
      this.assignOption.add(elem);
    }

    public List<PositionAssignOption> getAssignOption() {
      return this.assignOption;
    }

    public assignPosition_args setAssignOption(List<PositionAssignOption> assignOption) {
      this.assignOption = assignOption;
      return this;
    }

    public void unsetAssignOption() {
      this.assignOption = null;
    }

    /** Returns true if field assignOption is set (has been assigned a value) and false otherwise */
    public boolean isSetAssignOption() {
      return this.assignOption != null;
    }

    public void setAssignOptionIsSet(boolean value) {
      if (!value) {
        this.assignOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case ASSIGN_OPTION:
        if (value == null) {
          unsetAssignOption();
        } else {
          setAssignOption((List<PositionAssignOption>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case ASSIGN_OPTION:
        return getAssignOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case ASSIGN_OPTION:
        return isSetAssignOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignPosition_args)
        return this.equals((assignPosition_args)that);
      return false;
    }

    public boolean equals(assignPosition_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_assignOption = true && this.isSetAssignOption();
      boolean that_present_assignOption = true && that.isSetAssignOption();
      if (this_present_assignOption || that_present_assignOption) {
        if (!(this_present_assignOption && that_present_assignOption))
          return false;
        if (!this.assignOption.equals(that.assignOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(assignPosition_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAssignOption()).compareTo(other.isSetAssignOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAssignOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignOption, other.assignOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignPosition_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("assignOption:");
      if (this.assignOption == null) {
        sb.append("null");
      } else {
        sb.append(this.assignOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignPosition_argsStandardSchemeFactory implements SchemeFactory {
      public assignPosition_argsStandardScheme getScheme() {
        return new assignPosition_argsStandardScheme();
      }
    }

    private static class assignPosition_argsStandardScheme extends StandardScheme<assignPosition_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignPosition_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ASSIGN_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.assignOption = new ArrayList<PositionAssignOption>(_list120.size);
                  for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                  {
                    PositionAssignOption _elem122;
                    _elem122 = new PositionAssignOption();
                    _elem122.read(iprot);
                    struct.assignOption.add(_elem122);
                  }
                  iprot.readListEnd();
                }
                struct.setAssignOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignPosition_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.assignOption != null) {
          oprot.writeFieldBegin(ASSIGN_OPTION_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.assignOption.size()));
            for (PositionAssignOption _iter123 : struct.assignOption)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignPosition_argsTupleSchemeFactory implements SchemeFactory {
      public assignPosition_argsTupleScheme getScheme() {
        return new assignPosition_argsTupleScheme();
      }
    }

    private static class assignPosition_argsTupleScheme extends TupleScheme<assignPosition_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetAssignOption()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetAssignOption()) {
          {
            oprot.writeI32(struct.assignOption.size());
            for (PositionAssignOption _iter124 : struct.assignOption)
            {
              _iter124.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignPosition_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.assignOption = new ArrayList<PositionAssignOption>(_list125.size);
            for (int _i126 = 0; _i126 < _list125.size; ++_i126)
            {
              PositionAssignOption _elem127;
              _elem127 = new PositionAssignOption();
              _elem127.read(iprot);
              struct.assignOption.add(_elem127);
            }
          }
          struct.setAssignOptionIsSet(true);
        }
      }
    }

  }

  public static class assignPosition_result implements org.apache.thrift.TBase<assignPosition_result, assignPosition_result._Fields>, java.io.Serializable, Cloneable, Comparable<assignPosition_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("assignPosition_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new assignPosition_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new assignPosition_resultTupleSchemeFactory());
    }

    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(assignPosition_result.class, metaDataMap);
    }

    public assignPosition_result() {
    }

    public assignPosition_result(
      xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public assignPosition_result(assignPosition_result other) {
      if (other.isSetSuccess()) {
        this.success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public assignPosition_result deepCopy() {
      return new assignPosition_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp getSuccess() {
      return this.success;
    }

    public assignPosition_result setSuccess(xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public assignPosition_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof assignPosition_result)
        return this.equals((assignPosition_result)that);
      return false;
    }

    public boolean equals(assignPosition_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(assignPosition_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("assignPosition_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class assignPosition_resultStandardSchemeFactory implements SchemeFactory {
      public assignPosition_resultStandardScheme getScheme() {
        return new assignPosition_resultStandardScheme();
      }
    }

    private static class assignPosition_resultStandardScheme extends StandardScheme<assignPosition_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, assignPosition_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, assignPosition_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class assignPosition_resultTupleSchemeFactory implements SchemeFactory {
      public assignPosition_resultTupleScheme getScheme() {
        return new assignPosition_resultTupleScheme();
      }
    }

    private static class assignPosition_resultTupleScheme extends TupleScheme<assignPosition_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, assignPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, assignPosition_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new xueqiao.trade.hosting.position.adjust.assign.thriftapi.AssignPositionResp();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqPositionEditLock_args implements org.apache.thrift.TBase<reqPositionEditLock_args, reqPositionEditLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionEditLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionEditLock_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField LOCK_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("lockKey", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionEditLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionEditLock_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public String lockKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      LOCK_KEY((short)2, "lockKey");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // LOCK_KEY
            return LOCK_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.LOCK_KEY, new org.apache.thrift.meta_data.FieldMetaData("lockKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionEditLock_args.class, metaDataMap);
    }

    public reqPositionEditLock_args() {
    }

    public reqPositionEditLock_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      String lockKey)
    {
      this();
      this.platformArgs = platformArgs;
      this.lockKey = lockKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionEditLock_args(reqPositionEditLock_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetLockKey()) {
        this.lockKey = other.lockKey;
      }
    }

    public reqPositionEditLock_args deepCopy() {
      return new reqPositionEditLock_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.lockKey = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqPositionEditLock_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public String getLockKey() {
      return this.lockKey;
    }

    public reqPositionEditLock_args setLockKey(String lockKey) {
      this.lockKey = lockKey;
      return this;
    }

    public void unsetLockKey() {
      this.lockKey = null;
    }

    /** Returns true if field lockKey is set (has been assigned a value) and false otherwise */
    public boolean isSetLockKey() {
      return this.lockKey != null;
    }

    public void setLockKeyIsSet(boolean value) {
      if (!value) {
        this.lockKey = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case LOCK_KEY:
        if (value == null) {
          unsetLockKey();
        } else {
          setLockKey((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case LOCK_KEY:
        return getLockKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case LOCK_KEY:
        return isSetLockKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionEditLock_args)
        return this.equals((reqPositionEditLock_args)that);
      return false;
    }

    public boolean equals(reqPositionEditLock_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_lockKey = true && this.isSetLockKey();
      boolean that_present_lockKey = true && that.isSetLockKey();
      if (this_present_lockKey || that_present_lockKey) {
        if (!(this_present_lockKey && that_present_lockKey))
          return false;
        if (!this.lockKey.equals(that.lockKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionEditLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetLockKey()).compareTo(other.isSetLockKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLockKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lockKey, other.lockKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionEditLock_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lockKey:");
      if (this.lockKey == null) {
        sb.append("null");
      } else {
        sb.append(this.lockKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionEditLock_argsStandardSchemeFactory implements SchemeFactory {
      public reqPositionEditLock_argsStandardScheme getScheme() {
        return new reqPositionEditLock_argsStandardScheme();
      }
    }

    private static class reqPositionEditLock_argsStandardScheme extends StandardScheme<reqPositionEditLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionEditLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LOCK_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lockKey = iprot.readString();
                struct.setLockKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionEditLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.lockKey != null) {
          oprot.writeFieldBegin(LOCK_KEY_FIELD_DESC);
          oprot.writeString(struct.lockKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionEditLock_argsTupleSchemeFactory implements SchemeFactory {
      public reqPositionEditLock_argsTupleScheme getScheme() {
        return new reqPositionEditLock_argsTupleScheme();
      }
    }

    private static class reqPositionEditLock_argsTupleScheme extends TupleScheme<reqPositionEditLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetLockKey()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetLockKey()) {
          oprot.writeString(struct.lockKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.lockKey = iprot.readString();
          struct.setLockKeyIsSet(true);
        }
      }
    }

  }

  public static class reqPositionEditLock_result implements org.apache.thrift.TBase<reqPositionEditLock_result, reqPositionEditLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionEditLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionEditLock_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionEditLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionEditLock_resultTupleSchemeFactory());
    }

    public PositionEditLock success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionEditLock.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionEditLock_result.class, metaDataMap);
    }

    public reqPositionEditLock_result() {
    }

    public reqPositionEditLock_result(
      PositionEditLock success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionEditLock_result(reqPositionEditLock_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionEditLock(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqPositionEditLock_result deepCopy() {
      return new reqPositionEditLock_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionEditLock getSuccess() {
      return this.success;
    }

    public reqPositionEditLock_result setSuccess(PositionEditLock success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqPositionEditLock_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionEditLock)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionEditLock_result)
        return this.equals((reqPositionEditLock_result)that);
      return false;
    }

    public boolean equals(reqPositionEditLock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionEditLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionEditLock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionEditLock_resultStandardSchemeFactory implements SchemeFactory {
      public reqPositionEditLock_resultStandardScheme getScheme() {
        return new reqPositionEditLock_resultStandardScheme();
      }
    }

    private static class reqPositionEditLock_resultStandardScheme extends StandardScheme<reqPositionEditLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionEditLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionEditLock();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionEditLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionEditLock_resultTupleSchemeFactory implements SchemeFactory {
      public reqPositionEditLock_resultTupleScheme getScheme() {
        return new reqPositionEditLock_resultTupleScheme();
      }
    }

    private static class reqPositionEditLock_resultTupleScheme extends TupleScheme<reqPositionEditLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionEditLock();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class addPositionEditLock_args implements org.apache.thrift.TBase<addPositionEditLock_args, addPositionEditLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionEditLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionEditLock_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_EDIT_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("positionEditLock", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPositionEditLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPositionEditLock_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public PositionEditLock positionEditLock; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      POSITION_EDIT_LOCK((short)2, "positionEditLock");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // POSITION_EDIT_LOCK
            return POSITION_EDIT_LOCK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.POSITION_EDIT_LOCK, new org.apache.thrift.meta_data.FieldMetaData("positionEditLock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionEditLock.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionEditLock_args.class, metaDataMap);
    }

    public addPositionEditLock_args() {
    }

    public addPositionEditLock_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      PositionEditLock positionEditLock)
    {
      this();
      this.platformArgs = platformArgs;
      this.positionEditLock = positionEditLock;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPositionEditLock_args(addPositionEditLock_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetPositionEditLock()) {
        this.positionEditLock = new PositionEditLock(other.positionEditLock);
      }
    }

    public addPositionEditLock_args deepCopy() {
      return new addPositionEditLock_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.positionEditLock = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public addPositionEditLock_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public PositionEditLock getPositionEditLock() {
      return this.positionEditLock;
    }

    public addPositionEditLock_args setPositionEditLock(PositionEditLock positionEditLock) {
      this.positionEditLock = positionEditLock;
      return this;
    }

    public void unsetPositionEditLock() {
      this.positionEditLock = null;
    }

    /** Returns true if field positionEditLock is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionEditLock() {
      return this.positionEditLock != null;
    }

    public void setPositionEditLockIsSet(boolean value) {
      if (!value) {
        this.positionEditLock = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case POSITION_EDIT_LOCK:
        if (value == null) {
          unsetPositionEditLock();
        } else {
          setPositionEditLock((PositionEditLock)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case POSITION_EDIT_LOCK:
        return getPositionEditLock();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case POSITION_EDIT_LOCK:
        return isSetPositionEditLock();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPositionEditLock_args)
        return this.equals((addPositionEditLock_args)that);
      return false;
    }

    public boolean equals(addPositionEditLock_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_positionEditLock = true && this.isSetPositionEditLock();
      boolean that_present_positionEditLock = true && that.isSetPositionEditLock();
      if (this_present_positionEditLock || that_present_positionEditLock) {
        if (!(this_present_positionEditLock && that_present_positionEditLock))
          return false;
        if (!this.positionEditLock.equals(that.positionEditLock))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPositionEditLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionEditLock()).compareTo(other.isSetPositionEditLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionEditLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionEditLock, other.positionEditLock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPositionEditLock_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionEditLock:");
      if (this.positionEditLock == null) {
        sb.append("null");
      } else {
        sb.append(this.positionEditLock);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (positionEditLock != null) {
        positionEditLock.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPositionEditLock_argsStandardSchemeFactory implements SchemeFactory {
      public addPositionEditLock_argsStandardScheme getScheme() {
        return new addPositionEditLock_argsStandardScheme();
      }
    }

    private static class addPositionEditLock_argsStandardScheme extends StandardScheme<addPositionEditLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionEditLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_EDIT_LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.positionEditLock = new PositionEditLock();
                struct.positionEditLock.read(iprot);
                struct.setPositionEditLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionEditLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.positionEditLock != null) {
          oprot.writeFieldBegin(POSITION_EDIT_LOCK_FIELD_DESC);
          struct.positionEditLock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPositionEditLock_argsTupleSchemeFactory implements SchemeFactory {
      public addPositionEditLock_argsTupleScheme getScheme() {
        return new addPositionEditLock_argsTupleScheme();
      }
    }

    private static class addPositionEditLock_argsTupleScheme extends TupleScheme<addPositionEditLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetPositionEditLock()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetPositionEditLock()) {
          struct.positionEditLock.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionEditLock = new PositionEditLock();
          struct.positionEditLock.read(iprot);
          struct.setPositionEditLockIsSet(true);
        }
      }
    }

  }

  public static class addPositionEditLock_result implements org.apache.thrift.TBase<addPositionEditLock_result, addPositionEditLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<addPositionEditLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addPositionEditLock_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addPositionEditLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addPositionEditLock_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addPositionEditLock_result.class, metaDataMap);
    }

    public addPositionEditLock_result() {
    }

    public addPositionEditLock_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addPositionEditLock_result(addPositionEditLock_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public addPositionEditLock_result deepCopy() {
      return new addPositionEditLock_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public addPositionEditLock_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addPositionEditLock_result)
        return this.equals((addPositionEditLock_result)that);
      return false;
    }

    public boolean equals(addPositionEditLock_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addPositionEditLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addPositionEditLock_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addPositionEditLock_resultStandardSchemeFactory implements SchemeFactory {
      public addPositionEditLock_resultStandardScheme getScheme() {
        return new addPositionEditLock_resultStandardScheme();
      }
    }

    private static class addPositionEditLock_resultStandardScheme extends StandardScheme<addPositionEditLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addPositionEditLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addPositionEditLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addPositionEditLock_resultTupleSchemeFactory implements SchemeFactory {
      public addPositionEditLock_resultTupleScheme getScheme() {
        return new addPositionEditLock_resultTupleScheme();
      }
    }

    private static class addPositionEditLock_resultTupleScheme extends TupleScheme<addPositionEditLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addPositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addPositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class removePositionEditLock_args implements org.apache.thrift.TBase<removePositionEditLock_args, removePositionEditLock_args._Fields>, java.io.Serializable, Cloneable, Comparable<removePositionEditLock_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removePositionEditLock_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField POSITION_EDIT_LOCK_FIELD_DESC = new org.apache.thrift.protocol.TField("positionEditLock", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removePositionEditLock_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removePositionEditLock_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public PositionEditLock positionEditLock; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      POSITION_EDIT_LOCK((short)2, "positionEditLock");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // POSITION_EDIT_LOCK
            return POSITION_EDIT_LOCK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.POSITION_EDIT_LOCK, new org.apache.thrift.meta_data.FieldMetaData("positionEditLock", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionEditLock.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removePositionEditLock_args.class, metaDataMap);
    }

    public removePositionEditLock_args() {
    }

    public removePositionEditLock_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      PositionEditLock positionEditLock)
    {
      this();
      this.platformArgs = platformArgs;
      this.positionEditLock = positionEditLock;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removePositionEditLock_args(removePositionEditLock_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetPositionEditLock()) {
        this.positionEditLock = new PositionEditLock(other.positionEditLock);
      }
    }

    public removePositionEditLock_args deepCopy() {
      return new removePositionEditLock_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.positionEditLock = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public removePositionEditLock_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public PositionEditLock getPositionEditLock() {
      return this.positionEditLock;
    }

    public removePositionEditLock_args setPositionEditLock(PositionEditLock positionEditLock) {
      this.positionEditLock = positionEditLock;
      return this;
    }

    public void unsetPositionEditLock() {
      this.positionEditLock = null;
    }

    /** Returns true if field positionEditLock is set (has been assigned a value) and false otherwise */
    public boolean isSetPositionEditLock() {
      return this.positionEditLock != null;
    }

    public void setPositionEditLockIsSet(boolean value) {
      if (!value) {
        this.positionEditLock = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case POSITION_EDIT_LOCK:
        if (value == null) {
          unsetPositionEditLock();
        } else {
          setPositionEditLock((PositionEditLock)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case POSITION_EDIT_LOCK:
        return getPositionEditLock();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case POSITION_EDIT_LOCK:
        return isSetPositionEditLock();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removePositionEditLock_args)
        return this.equals((removePositionEditLock_args)that);
      return false;
    }

    public boolean equals(removePositionEditLock_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_positionEditLock = true && this.isSetPositionEditLock();
      boolean that_present_positionEditLock = true && that.isSetPositionEditLock();
      if (this_present_positionEditLock || that_present_positionEditLock) {
        if (!(this_present_positionEditLock && that_present_positionEditLock))
          return false;
        if (!this.positionEditLock.equals(that.positionEditLock))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removePositionEditLock_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPositionEditLock()).compareTo(other.isSetPositionEditLock());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPositionEditLock()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionEditLock, other.positionEditLock);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removePositionEditLock_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("positionEditLock:");
      if (this.positionEditLock == null) {
        sb.append("null");
      } else {
        sb.append(this.positionEditLock);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (positionEditLock != null) {
        positionEditLock.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removePositionEditLock_argsStandardSchemeFactory implements SchemeFactory {
      public removePositionEditLock_argsStandardScheme getScheme() {
        return new removePositionEditLock_argsStandardScheme();
      }
    }

    private static class removePositionEditLock_argsStandardScheme extends StandardScheme<removePositionEditLock_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removePositionEditLock_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POSITION_EDIT_LOCK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.positionEditLock = new PositionEditLock();
                struct.positionEditLock.read(iprot);
                struct.setPositionEditLockIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removePositionEditLock_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.positionEditLock != null) {
          oprot.writeFieldBegin(POSITION_EDIT_LOCK_FIELD_DESC);
          struct.positionEditLock.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removePositionEditLock_argsTupleSchemeFactory implements SchemeFactory {
      public removePositionEditLock_argsTupleScheme getScheme() {
        return new removePositionEditLock_argsTupleScheme();
      }
    }

    private static class removePositionEditLock_argsTupleScheme extends TupleScheme<removePositionEditLock_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removePositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetPositionEditLock()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetPositionEditLock()) {
          struct.positionEditLock.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removePositionEditLock_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.positionEditLock = new PositionEditLock();
          struct.positionEditLock.read(iprot);
          struct.setPositionEditLockIsSet(true);
        }
      }
    }

  }

  public static class removePositionEditLock_result implements org.apache.thrift.TBase<removePositionEditLock_result, removePositionEditLock_result._Fields>, java.io.Serializable, Cloneable, Comparable<removePositionEditLock_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removePositionEditLock_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new removePositionEditLock_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new removePositionEditLock_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removePositionEditLock_result.class, metaDataMap);
    }

    public removePositionEditLock_result() {
    }

    public removePositionEditLock_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removePositionEditLock_result(removePositionEditLock_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public removePositionEditLock_result deepCopy() {
      return new removePositionEditLock_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public removePositionEditLock_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removePositionEditLock_result)
        return this.equals((removePositionEditLock_result)that);
      return false;
    }

    public boolean equals(removePositionEditLock_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(removePositionEditLock_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("removePositionEditLock_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removePositionEditLock_resultStandardSchemeFactory implements SchemeFactory {
      public removePositionEditLock_resultStandardScheme getScheme() {
        return new removePositionEditLock_resultStandardScheme();
      }
    }

    private static class removePositionEditLock_resultStandardScheme extends StandardScheme<removePositionEditLock_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removePositionEditLock_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removePositionEditLock_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removePositionEditLock_resultTupleSchemeFactory implements SchemeFactory {
      public removePositionEditLock_resultTupleScheme getScheme() {
        return new removePositionEditLock_resultTupleScheme();
      }
    }

    private static class removePositionEditLock_resultTupleScheme extends TupleScheme<removePositionEditLock_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removePositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removePositionEditLock_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqPositionVerify_args implements org.apache.thrift.TBase<reqPositionVerify_args, reqPositionVerify_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionVerify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionVerify_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionVerify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionVerify_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqPositionVerifyOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPositionVerifyOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionVerify_args.class, metaDataMap);
    }

    public reqPositionVerify_args() {
    }

    public reqPositionVerify_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqPositionVerifyOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionVerify_args(reqPositionVerify_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqPositionVerifyOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqPositionVerify_args deepCopy() {
      return new reqPositionVerify_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqPositionVerify_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqPositionVerifyOption getOption() {
      return this.option;
    }

    public reqPositionVerify_args setOption(ReqPositionVerifyOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqPositionVerify_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqPositionVerifyOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionVerify_args)
        return this.equals((reqPositionVerify_args)that);
      return false;
    }

    public boolean equals(reqPositionVerify_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionVerify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionVerify_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionVerify_argsStandardSchemeFactory implements SchemeFactory {
      public reqPositionVerify_argsStandardScheme getScheme() {
        return new reqPositionVerify_argsStandardScheme();
      }
    }

    private static class reqPositionVerify_argsStandardScheme extends StandardScheme<reqPositionVerify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionVerify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqPositionVerifyOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionVerify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionVerify_argsTupleSchemeFactory implements SchemeFactory {
      public reqPositionVerify_argsTupleScheme getScheme() {
        return new reqPositionVerify_argsTupleScheme();
      }
    }

    private static class reqPositionVerify_argsTupleScheme extends TupleScheme<reqPositionVerify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionVerify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqPositionVerifyOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqPositionVerify_result implements org.apache.thrift.TBase<reqPositionVerify_result, reqPositionVerify_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionVerify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionVerify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionVerify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionVerify_resultTupleSchemeFactory());
    }

    public PositionVerifyPage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionVerifyPage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionVerify_result.class, metaDataMap);
    }

    public reqPositionVerify_result() {
    }

    public reqPositionVerify_result(
      PositionVerifyPage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionVerify_result(reqPositionVerify_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionVerifyPage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqPositionVerify_result deepCopy() {
      return new reqPositionVerify_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionVerifyPage getSuccess() {
      return this.success;
    }

    public reqPositionVerify_result setSuccess(PositionVerifyPage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqPositionVerify_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionVerifyPage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionVerify_result)
        return this.equals((reqPositionVerify_result)that);
      return false;
    }

    public boolean equals(reqPositionVerify_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionVerify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionVerify_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionVerify_resultStandardSchemeFactory implements SchemeFactory {
      public reqPositionVerify_resultStandardScheme getScheme() {
        return new reqPositionVerify_resultStandardScheme();
      }
    }

    private static class reqPositionVerify_resultStandardScheme extends StandardScheme<reqPositionVerify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionVerify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionVerifyPage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionVerify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionVerify_resultTupleSchemeFactory implements SchemeFactory {
      public reqPositionVerify_resultTupleScheme getScheme() {
        return new reqPositionVerify_resultTupleScheme();
      }
    }

    private static class reqPositionVerify_resultTupleScheme extends TupleScheme<reqPositionVerify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionVerify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionVerifyPage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqPositionDifference_args implements org.apache.thrift.TBase<reqPositionDifference_args, reqPositionDifference_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionDifference_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionDifference_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionDifference_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionDifference_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqPositionDifferenceOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqPositionDifferenceOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionDifference_args.class, metaDataMap);
    }

    public reqPositionDifference_args() {
    }

    public reqPositionDifference_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqPositionDifferenceOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionDifference_args(reqPositionDifference_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqPositionDifferenceOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqPositionDifference_args deepCopy() {
      return new reqPositionDifference_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqPositionDifference_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqPositionDifferenceOption getOption() {
      return this.option;
    }

    public reqPositionDifference_args setOption(ReqPositionDifferenceOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqPositionDifference_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqPositionDifferenceOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionDifference_args)
        return this.equals((reqPositionDifference_args)that);
      return false;
    }

    public boolean equals(reqPositionDifference_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionDifference_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionDifference_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionDifference_argsStandardSchemeFactory implements SchemeFactory {
      public reqPositionDifference_argsStandardScheme getScheme() {
        return new reqPositionDifference_argsStandardScheme();
      }
    }

    private static class reqPositionDifference_argsStandardScheme extends StandardScheme<reqPositionDifference_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionDifference_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqPositionDifferenceOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionDifference_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionDifference_argsTupleSchemeFactory implements SchemeFactory {
      public reqPositionDifference_argsTupleScheme getScheme() {
        return new reqPositionDifference_argsTupleScheme();
      }
    }

    private static class reqPositionDifference_argsTupleScheme extends TupleScheme<reqPositionDifference_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqPositionDifferenceOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqPositionDifference_result implements org.apache.thrift.TBase<reqPositionDifference_result, reqPositionDifference_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqPositionDifference_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqPositionDifference_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqPositionDifference_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqPositionDifference_resultTupleSchemeFactory());
    }

    public PositionDifferencePage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PositionDifferencePage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqPositionDifference_result.class, metaDataMap);
    }

    public reqPositionDifference_result() {
    }

    public reqPositionDifference_result(
      PositionDifferencePage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqPositionDifference_result(reqPositionDifference_result other) {
      if (other.isSetSuccess()) {
        this.success = new PositionDifferencePage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqPositionDifference_result deepCopy() {
      return new reqPositionDifference_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public PositionDifferencePage getSuccess() {
      return this.success;
    }

    public reqPositionDifference_result setSuccess(PositionDifferencePage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqPositionDifference_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((PositionDifferencePage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqPositionDifference_result)
        return this.equals((reqPositionDifference_result)that);
      return false;
    }

    public boolean equals(reqPositionDifference_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqPositionDifference_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqPositionDifference_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqPositionDifference_resultStandardSchemeFactory implements SchemeFactory {
      public reqPositionDifference_resultStandardScheme getScheme() {
        return new reqPositionDifference_resultStandardScheme();
      }
    }

    private static class reqPositionDifference_resultStandardScheme extends StandardScheme<reqPositionDifference_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqPositionDifference_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new PositionDifferencePage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqPositionDifference_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqPositionDifference_resultTupleSchemeFactory implements SchemeFactory {
      public reqPositionDifference_resultTupleScheme getScheme() {
        return new reqPositionDifference_resultTupleScheme();
      }
    }

    private static class reqPositionDifference_resultTupleScheme extends TupleScheme<reqPositionDifference_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqPositionDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqPositionDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new PositionDifferencePage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqSettlementTimeRelateSledReqTime_args implements org.apache.thrift.TBase<reqSettlementTimeRelateSledReqTime_args, reqSettlementTimeRelateSledReqTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqSettlementTimeRelateSledReqTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSettlementTimeRelateSledReqTime_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SETTLEMENT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("settlementDate", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSettlementTimeRelateSledReqTime_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSettlementTimeRelateSledReqTime_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public long tradeAccountId; // required
    public String settlementDate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      TRADE_ACCOUNT_ID((short)2, "tradeAccountId"),
      SETTLEMENT_DATE((short)3, "settlementDate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // TRADE_ACCOUNT_ID
            return TRADE_ACCOUNT_ID;
          case 3: // SETTLEMENT_DATE
            return SETTLEMENT_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TRADEACCOUNTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SETTLEMENT_DATE, new org.apache.thrift.meta_data.FieldMetaData("settlementDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSettlementTimeRelateSledReqTime_args.class, metaDataMap);
    }

    public reqSettlementTimeRelateSledReqTime_args() {
    }

    public reqSettlementTimeRelateSledReqTime_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      long tradeAccountId,
      String settlementDate)
    {
      this();
      this.platformArgs = platformArgs;
      this.tradeAccountId = tradeAccountId;
      setTradeAccountIdIsSet(true);
      this.settlementDate = settlementDate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSettlementTimeRelateSledReqTime_args(reqSettlementTimeRelateSledReqTime_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      this.tradeAccountId = other.tradeAccountId;
      if (other.isSetSettlementDate()) {
        this.settlementDate = other.settlementDate;
      }
    }

    public reqSettlementTimeRelateSledReqTime_args deepCopy() {
      return new reqSettlementTimeRelateSledReqTime_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      setTradeAccountIdIsSet(false);
      this.tradeAccountId = 0;
      this.settlementDate = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqSettlementTimeRelateSledReqTime_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public long getTradeAccountId() {
      return this.tradeAccountId;
    }

    public reqSettlementTimeRelateSledReqTime_args setTradeAccountId(long tradeAccountId) {
      this.tradeAccountId = tradeAccountId;
      setTradeAccountIdIsSet(true);
      return this;
    }

    public void unsetTradeAccountId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
    }

    /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
    public boolean isSetTradeAccountId() {
      return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
    }

    public void setTradeAccountIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
    }

    public String getSettlementDate() {
      return this.settlementDate;
    }

    public reqSettlementTimeRelateSledReqTime_args setSettlementDate(String settlementDate) {
      this.settlementDate = settlementDate;
      return this;
    }

    public void unsetSettlementDate() {
      this.settlementDate = null;
    }

    /** Returns true if field settlementDate is set (has been assigned a value) and false otherwise */
    public boolean isSetSettlementDate() {
      return this.settlementDate != null;
    }

    public void setSettlementDateIsSet(boolean value) {
      if (!value) {
        this.settlementDate = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case TRADE_ACCOUNT_ID:
        if (value == null) {
          unsetTradeAccountId();
        } else {
          setTradeAccountId((Long)value);
        }
        break;

      case SETTLEMENT_DATE:
        if (value == null) {
          unsetSettlementDate();
        } else {
          setSettlementDate((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case TRADE_ACCOUNT_ID:
        return Long.valueOf(getTradeAccountId());

      case SETTLEMENT_DATE:
        return getSettlementDate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case TRADE_ACCOUNT_ID:
        return isSetTradeAccountId();
      case SETTLEMENT_DATE:
        return isSetSettlementDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSettlementTimeRelateSledReqTime_args)
        return this.equals((reqSettlementTimeRelateSledReqTime_args)that);
      return false;
    }

    public boolean equals(reqSettlementTimeRelateSledReqTime_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_tradeAccountId = true;
      boolean that_present_tradeAccountId = true;
      if (this_present_tradeAccountId || that_present_tradeAccountId) {
        if (!(this_present_tradeAccountId && that_present_tradeAccountId))
          return false;
        if (this.tradeAccountId != that.tradeAccountId)
          return false;
      }

      boolean this_present_settlementDate = true && this.isSetSettlementDate();
      boolean that_present_settlementDate = true && that.isSetSettlementDate();
      if (this_present_settlementDate || that_present_settlementDate) {
        if (!(this_present_settlementDate && that_present_settlementDate))
          return false;
        if (!this.settlementDate.equals(that.settlementDate))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqSettlementTimeRelateSledReqTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTradeAccountId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSettlementDate()).compareTo(other.isSetSettlementDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettlementDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settlementDate, other.settlementDate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSettlementTimeRelateSledReqTime_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("settlementDate:");
      if (this.settlementDate == null) {
        sb.append("null");
      } else {
        sb.append(this.settlementDate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_argsStandardSchemeFactory implements SchemeFactory {
      public reqSettlementTimeRelateSledReqTime_argsStandardScheme getScheme() {
        return new reqSettlementTimeRelateSledReqTime_argsStandardScheme();
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_argsStandardScheme extends StandardScheme<reqSettlementTimeRelateSledReqTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSettlementTimeRelateSledReqTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRADE_ACCOUNT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.tradeAccountId = iprot.readI64();
                struct.setTradeAccountIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SETTLEMENT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.settlementDate = iprot.readString();
                struct.setSettlementDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSettlementTimeRelateSledReqTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
        if (struct.settlementDate != null) {
          oprot.writeFieldBegin(SETTLEMENT_DATE_FIELD_DESC);
          oprot.writeString(struct.settlementDate);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSettlementTimeRelateSledReqTime_argsTupleSchemeFactory implements SchemeFactory {
      public reqSettlementTimeRelateSledReqTime_argsTupleScheme getScheme() {
        return new reqSettlementTimeRelateSledReqTime_argsTupleScheme();
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_argsTupleScheme extends TupleScheme<reqSettlementTimeRelateSledReqTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSettlementTimeRelateSledReqTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetTradeAccountId()) {
          optionals.set(1);
        }
        if (struct.isSetSettlementDate()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetTradeAccountId()) {
          oprot.writeI64(struct.tradeAccountId);
        }
        if (struct.isSetSettlementDate()) {
          oprot.writeString(struct.settlementDate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSettlementTimeRelateSledReqTime_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.tradeAccountId = iprot.readI64();
          struct.setTradeAccountIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.settlementDate = iprot.readString();
          struct.setSettlementDateIsSet(true);
        }
      }
    }

  }

  public static class reqSettlementTimeRelateSledReqTime_result implements org.apache.thrift.TBase<reqSettlementTimeRelateSledReqTime_result, reqSettlementTimeRelateSledReqTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqSettlementTimeRelateSledReqTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqSettlementTimeRelateSledReqTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqSettlementTimeRelateSledReqTime_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqSettlementTimeRelateSledReqTime_resultTupleSchemeFactory());
    }

    public SettlementTimeRelateSledReqTime success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SettlementTimeRelateSledReqTime.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqSettlementTimeRelateSledReqTime_result.class, metaDataMap);
    }

    public reqSettlementTimeRelateSledReqTime_result() {
    }

    public reqSettlementTimeRelateSledReqTime_result(
      SettlementTimeRelateSledReqTime success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqSettlementTimeRelateSledReqTime_result(reqSettlementTimeRelateSledReqTime_result other) {
      if (other.isSetSuccess()) {
        this.success = new SettlementTimeRelateSledReqTime(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqSettlementTimeRelateSledReqTime_result deepCopy() {
      return new reqSettlementTimeRelateSledReqTime_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public SettlementTimeRelateSledReqTime getSuccess() {
      return this.success;
    }

    public reqSettlementTimeRelateSledReqTime_result setSuccess(SettlementTimeRelateSledReqTime success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqSettlementTimeRelateSledReqTime_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SettlementTimeRelateSledReqTime)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqSettlementTimeRelateSledReqTime_result)
        return this.equals((reqSettlementTimeRelateSledReqTime_result)that);
      return false;
    }

    public boolean equals(reqSettlementTimeRelateSledReqTime_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqSettlementTimeRelateSledReqTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqSettlementTimeRelateSledReqTime_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_resultStandardSchemeFactory implements SchemeFactory {
      public reqSettlementTimeRelateSledReqTime_resultStandardScheme getScheme() {
        return new reqSettlementTimeRelateSledReqTime_resultStandardScheme();
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_resultStandardScheme extends StandardScheme<reqSettlementTimeRelateSledReqTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqSettlementTimeRelateSledReqTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SettlementTimeRelateSledReqTime();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqSettlementTimeRelateSledReqTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqSettlementTimeRelateSledReqTime_resultTupleSchemeFactory implements SchemeFactory {
      public reqSettlementTimeRelateSledReqTime_resultTupleScheme getScheme() {
        return new reqSettlementTimeRelateSledReqTime_resultTupleScheme();
      }
    }

    private static class reqSettlementTimeRelateSledReqTime_resultTupleScheme extends TupleScheme<reqSettlementTimeRelateSledReqTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqSettlementTimeRelateSledReqTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqSettlementTimeRelateSledReqTime_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SettlementTimeRelateSledReqTime();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class reqDailyPositionDifference_args implements org.apache.thrift.TBase<reqDailyPositionDifference_args, reqDailyPositionDifference_args._Fields>, java.io.Serializable, Cloneable, Comparable<reqDailyPositionDifference_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqDailyPositionDifference_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("option", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField PAGE_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("pageOption", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqDailyPositionDifference_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqDailyPositionDifference_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public ReqDailyPositionDifferenceOption option; // required
    public org.soldier.platform.page.IndexedPageOption pageOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      OPTION((short)2, "option"),
      PAGE_OPTION((short)3, "pageOption");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // OPTION
            return OPTION;
          case 3: // PAGE_OPTION
            return PAGE_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.OPTION, new org.apache.thrift.meta_data.FieldMetaData("option", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ReqDailyPositionDifferenceOption.class)));
      tmpMap.put(_Fields.PAGE_OPTION, new org.apache.thrift.meta_data.FieldMetaData("pageOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.page.IndexedPageOption.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqDailyPositionDifference_args.class, metaDataMap);
    }

    public reqDailyPositionDifference_args() {
    }

    public reqDailyPositionDifference_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      ReqDailyPositionDifferenceOption option,
      org.soldier.platform.page.IndexedPageOption pageOption)
    {
      this();
      this.platformArgs = platformArgs;
      this.option = option;
      this.pageOption = pageOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqDailyPositionDifference_args(reqDailyPositionDifference_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetOption()) {
        this.option = new ReqDailyPositionDifferenceOption(other.option);
      }
      if (other.isSetPageOption()) {
        this.pageOption = new org.soldier.platform.page.IndexedPageOption(other.pageOption);
      }
    }

    public reqDailyPositionDifference_args deepCopy() {
      return new reqDailyPositionDifference_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.option = null;
      this.pageOption = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public reqDailyPositionDifference_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public ReqDailyPositionDifferenceOption getOption() {
      return this.option;
    }

    public reqDailyPositionDifference_args setOption(ReqDailyPositionDifferenceOption option) {
      this.option = option;
      return this;
    }

    public void unsetOption() {
      this.option = null;
    }

    /** Returns true if field option is set (has been assigned a value) and false otherwise */
    public boolean isSetOption() {
      return this.option != null;
    }

    public void setOptionIsSet(boolean value) {
      if (!value) {
        this.option = null;
      }
    }

    public org.soldier.platform.page.IndexedPageOption getPageOption() {
      return this.pageOption;
    }

    public reqDailyPositionDifference_args setPageOption(org.soldier.platform.page.IndexedPageOption pageOption) {
      this.pageOption = pageOption;
      return this;
    }

    public void unsetPageOption() {
      this.pageOption = null;
    }

    /** Returns true if field pageOption is set (has been assigned a value) and false otherwise */
    public boolean isSetPageOption() {
      return this.pageOption != null;
    }

    public void setPageOptionIsSet(boolean value) {
      if (!value) {
        this.pageOption = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case OPTION:
        if (value == null) {
          unsetOption();
        } else {
          setOption((ReqDailyPositionDifferenceOption)value);
        }
        break;

      case PAGE_OPTION:
        if (value == null) {
          unsetPageOption();
        } else {
          setPageOption((org.soldier.platform.page.IndexedPageOption)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case OPTION:
        return getOption();

      case PAGE_OPTION:
        return getPageOption();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case OPTION:
        return isSetOption();
      case PAGE_OPTION:
        return isSetPageOption();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqDailyPositionDifference_args)
        return this.equals((reqDailyPositionDifference_args)that);
      return false;
    }

    public boolean equals(reqDailyPositionDifference_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_option = true && this.isSetOption();
      boolean that_present_option = true && that.isSetOption();
      if (this_present_option || that_present_option) {
        if (!(this_present_option && that_present_option))
          return false;
        if (!this.option.equals(that.option))
          return false;
      }

      boolean this_present_pageOption = true && this.isSetPageOption();
      boolean that_present_pageOption = true && that.isSetPageOption();
      if (this_present_pageOption || that_present_pageOption) {
        if (!(this_present_pageOption && that_present_pageOption))
          return false;
        if (!this.pageOption.equals(that.pageOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqDailyPositionDifference_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOption()).compareTo(other.isSetOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.option, other.option);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPageOption()).compareTo(other.isSetPageOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPageOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pageOption, other.pageOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqDailyPositionDifference_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("option:");
      if (this.option == null) {
        sb.append("null");
      } else {
        sb.append(this.option);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pageOption:");
      if (this.pageOption == null) {
        sb.append("null");
      } else {
        sb.append(this.pageOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (option != null) {
        option.validate();
      }
      if (pageOption != null) {
        pageOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqDailyPositionDifference_argsStandardSchemeFactory implements SchemeFactory {
      public reqDailyPositionDifference_argsStandardScheme getScheme() {
        return new reqDailyPositionDifference_argsStandardScheme();
      }
    }

    private static class reqDailyPositionDifference_argsStandardScheme extends StandardScheme<reqDailyPositionDifference_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqDailyPositionDifference_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.option = new ReqDailyPositionDifferenceOption();
                struct.option.read(iprot);
                struct.setOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PAGE_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
                struct.pageOption.read(iprot);
                struct.setPageOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqDailyPositionDifference_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.option != null) {
          oprot.writeFieldBegin(OPTION_FIELD_DESC);
          struct.option.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pageOption != null) {
          oprot.writeFieldBegin(PAGE_OPTION_FIELD_DESC);
          struct.pageOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqDailyPositionDifference_argsTupleSchemeFactory implements SchemeFactory {
      public reqDailyPositionDifference_argsTupleScheme getScheme() {
        return new reqDailyPositionDifference_argsTupleScheme();
      }
    }

    private static class reqDailyPositionDifference_argsTupleScheme extends TupleScheme<reqDailyPositionDifference_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqDailyPositionDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetOption()) {
          optionals.set(1);
        }
        if (struct.isSetPageOption()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetOption()) {
          struct.option.write(oprot);
        }
        if (struct.isSetPageOption()) {
          struct.pageOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqDailyPositionDifference_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.option = new ReqDailyPositionDifferenceOption();
          struct.option.read(iprot);
          struct.setOptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pageOption = new org.soldier.platform.page.IndexedPageOption();
          struct.pageOption.read(iprot);
          struct.setPageOptionIsSet(true);
        }
      }
    }

  }

  public static class reqDailyPositionDifference_result implements org.apache.thrift.TBase<reqDailyPositionDifference_result, reqDailyPositionDifference_result._Fields>, java.io.Serializable, Cloneable, Comparable<reqDailyPositionDifference_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reqDailyPositionDifference_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new reqDailyPositionDifference_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new reqDailyPositionDifference_resultTupleSchemeFactory());
    }

    public DailyPositionDifferencePage success; // required
    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailyPositionDifferencePage.class)));
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reqDailyPositionDifference_result.class, metaDataMap);
    }

    public reqDailyPositionDifference_result() {
    }

    public reqDailyPositionDifference_result(
      DailyPositionDifferencePage success,
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reqDailyPositionDifference_result(reqDailyPositionDifference_result other) {
      if (other.isSetSuccess()) {
        this.success = new DailyPositionDifferencePage(other.success);
      }
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public reqDailyPositionDifference_result deepCopy() {
      return new reqDailyPositionDifference_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.err = null;
    }

    public DailyPositionDifferencePage getSuccess() {
      return this.success;
    }

    public reqDailyPositionDifference_result setSuccess(DailyPositionDifferencePage success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public reqDailyPositionDifference_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DailyPositionDifferencePage)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reqDailyPositionDifference_result)
        return this.equals((reqDailyPositionDifference_result)that);
      return false;
    }

    public boolean equals(reqDailyPositionDifference_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(reqDailyPositionDifference_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("reqDailyPositionDifference_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reqDailyPositionDifference_resultStandardSchemeFactory implements SchemeFactory {
      public reqDailyPositionDifference_resultStandardScheme getScheme() {
        return new reqDailyPositionDifference_resultStandardScheme();
      }
    }

    private static class reqDailyPositionDifference_resultStandardScheme extends StandardScheme<reqDailyPositionDifference_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reqDailyPositionDifference_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DailyPositionDifferencePage();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reqDailyPositionDifference_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reqDailyPositionDifference_resultTupleSchemeFactory implements SchemeFactory {
      public reqDailyPositionDifference_resultTupleScheme getScheme() {
        return new reqDailyPositionDifference_resultTupleScheme();
      }
    }

    private static class reqDailyPositionDifference_resultTupleScheme extends TupleScheme<reqDailyPositionDifference_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reqDailyPositionDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetErr()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reqDailyPositionDifference_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DailyPositionDifferencePage();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class updateDailyPositionDifferenceNote_args implements org.apache.thrift.TBase<updateDailyPositionDifferenceNote_args, updateDailyPositionDifferenceNote_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateDailyPositionDifferenceNote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDailyPositionDifferenceNote_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DIFFERENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("difference", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDailyPositionDifferenceNote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDailyPositionDifferenceNote_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required
    public DailyPositionDifference difference; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs"),
      DIFFERENCE((short)2, "difference");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          case 2: // DIFFERENCE
            return DIFFERENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      tmpMap.put(_Fields.DIFFERENCE, new org.apache.thrift.meta_data.FieldMetaData("difference", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DailyPositionDifference.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDailyPositionDifferenceNote_args.class, metaDataMap);
    }

    public updateDailyPositionDifferenceNote_args() {
    }

    public updateDailyPositionDifferenceNote_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs,
      DailyPositionDifference difference)
    {
      this();
      this.platformArgs = platformArgs;
      this.difference = difference;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDailyPositionDifferenceNote_args(updateDailyPositionDifferenceNote_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
      if (other.isSetDifference()) {
        this.difference = new DailyPositionDifference(other.difference);
      }
    }

    public updateDailyPositionDifferenceNote_args deepCopy() {
      return new updateDailyPositionDifferenceNote_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
      this.difference = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public updateDailyPositionDifferenceNote_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public DailyPositionDifference getDifference() {
      return this.difference;
    }

    public updateDailyPositionDifferenceNote_args setDifference(DailyPositionDifference difference) {
      this.difference = difference;
      return this;
    }

    public void unsetDifference() {
      this.difference = null;
    }

    /** Returns true if field difference is set (has been assigned a value) and false otherwise */
    public boolean isSetDifference() {
      return this.difference != null;
    }

    public void setDifferenceIsSet(boolean value) {
      if (!value) {
        this.difference = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      case DIFFERENCE:
        if (value == null) {
          unsetDifference();
        } else {
          setDifference((DailyPositionDifference)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      case DIFFERENCE:
        return getDifference();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      case DIFFERENCE:
        return isSetDifference();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDailyPositionDifferenceNote_args)
        return this.equals((updateDailyPositionDifferenceNote_args)that);
      return false;
    }

    public boolean equals(updateDailyPositionDifferenceNote_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      boolean this_present_difference = true && this.isSetDifference();
      boolean that_present_difference = true && that.isSetDifference();
      if (this_present_difference || that_present_difference) {
        if (!(this_present_difference && that_present_difference))
          return false;
        if (!this.difference.equals(that.difference))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDailyPositionDifferenceNote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDifference()).compareTo(other.isSetDifference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDifference()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.difference, other.difference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("difference:");
      if (this.difference == null) {
        sb.append("null");
      } else {
        sb.append(this.difference);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
      if (difference != null) {
        difference.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDailyPositionDifferenceNote_argsStandardSchemeFactory implements SchemeFactory {
      public updateDailyPositionDifferenceNote_argsStandardScheme getScheme() {
        return new updateDailyPositionDifferenceNote_argsStandardScheme();
      }
    }

    private static class updateDailyPositionDifferenceNote_argsStandardScheme extends StandardScheme<updateDailyPositionDifferenceNote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDailyPositionDifferenceNote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIFFERENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.difference = new DailyPositionDifference();
                struct.difference.read(iprot);
                struct.setDifferenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDailyPositionDifferenceNote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.difference != null) {
          oprot.writeFieldBegin(DIFFERENCE_FIELD_DESC);
          struct.difference.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDailyPositionDifferenceNote_argsTupleSchemeFactory implements SchemeFactory {
      public updateDailyPositionDifferenceNote_argsTupleScheme getScheme() {
        return new updateDailyPositionDifferenceNote_argsTupleScheme();
      }
    }

    private static class updateDailyPositionDifferenceNote_argsTupleScheme extends TupleScheme<updateDailyPositionDifferenceNote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDailyPositionDifferenceNote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        if (struct.isSetDifference()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
        if (struct.isSetDifference()) {
          struct.difference.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDailyPositionDifferenceNote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.difference = new DailyPositionDifference();
          struct.difference.read(iprot);
          struct.setDifferenceIsSet(true);
        }
      }
    }

  }

  public static class updateDailyPositionDifferenceNote_result implements org.apache.thrift.TBase<updateDailyPositionDifferenceNote_result, updateDailyPositionDifferenceNote_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateDailyPositionDifferenceNote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateDailyPositionDifferenceNote_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateDailyPositionDifferenceNote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateDailyPositionDifferenceNote_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateDailyPositionDifferenceNote_result.class, metaDataMap);
    }

    public updateDailyPositionDifferenceNote_result() {
    }

    public updateDailyPositionDifferenceNote_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDailyPositionDifferenceNote_result(updateDailyPositionDifferenceNote_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public updateDailyPositionDifferenceNote_result deepCopy() {
      return new updateDailyPositionDifferenceNote_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public updateDailyPositionDifferenceNote_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDailyPositionDifferenceNote_result)
        return this.equals((updateDailyPositionDifferenceNote_result)that);
      return false;
    }

    public boolean equals(updateDailyPositionDifferenceNote_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateDailyPositionDifferenceNote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateDailyPositionDifferenceNote_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateDailyPositionDifferenceNote_resultStandardSchemeFactory implements SchemeFactory {
      public updateDailyPositionDifferenceNote_resultStandardScheme getScheme() {
        return new updateDailyPositionDifferenceNote_resultStandardScheme();
      }
    }

    private static class updateDailyPositionDifferenceNote_resultStandardScheme extends StandardScheme<updateDailyPositionDifferenceNote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateDailyPositionDifferenceNote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateDailyPositionDifferenceNote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateDailyPositionDifferenceNote_resultTupleSchemeFactory implements SchemeFactory {
      public updateDailyPositionDifferenceNote_resultTupleScheme getScheme() {
        return new updateDailyPositionDifferenceNote_resultTupleScheme();
      }
    }

    private static class updateDailyPositionDifferenceNote_resultTupleScheme extends TupleScheme<updateDailyPositionDifferenceNote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateDailyPositionDifferenceNote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateDailyPositionDifferenceNote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

  public static class clearAll_args implements org.apache.thrift.TBase<clearAll_args, clearAll_args._Fields>, java.io.Serializable, Cloneable, Comparable<clearAll_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAll_args");

    private static final org.apache.thrift.protocol.TField PLATFORM_ARGS_FIELD_DESC = new org.apache.thrift.protocol.TField("platformArgs", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAll_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAll_argsTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PLATFORM_ARGS((short)1, "platformArgs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PLATFORM_ARGS
            return PLATFORM_ARGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PLATFORM_ARGS, new org.apache.thrift.meta_data.FieldMetaData("platformArgs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, org.soldier.platform.svr_platform.comm.PlatformArgs.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAll_args.class, metaDataMap);
    }

    public clearAll_args() {
    }

    public clearAll_args(
      org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs)
    {
      this();
      this.platformArgs = platformArgs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAll_args(clearAll_args other) {
      if (other.isSetPlatformArgs()) {
        this.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs(other.platformArgs);
      }
    }

    public clearAll_args deepCopy() {
      return new clearAll_args(this);
    }

    @Override
    public void clear() {
      this.platformArgs = null;
    }

    public org.soldier.platform.svr_platform.comm.PlatformArgs getPlatformArgs() {
      return this.platformArgs;
    }

    public clearAll_args setPlatformArgs(org.soldier.platform.svr_platform.comm.PlatformArgs platformArgs) {
      this.platformArgs = platformArgs;
      return this;
    }

    public void unsetPlatformArgs() {
      this.platformArgs = null;
    }

    /** Returns true if field platformArgs is set (has been assigned a value) and false otherwise */
    public boolean isSetPlatformArgs() {
      return this.platformArgs != null;
    }

    public void setPlatformArgsIsSet(boolean value) {
      if (!value) {
        this.platformArgs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PLATFORM_ARGS:
        if (value == null) {
          unsetPlatformArgs();
        } else {
          setPlatformArgs((org.soldier.platform.svr_platform.comm.PlatformArgs)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PLATFORM_ARGS:
        return getPlatformArgs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PLATFORM_ARGS:
        return isSetPlatformArgs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAll_args)
        return this.equals((clearAll_args)that);
      return false;
    }

    public boolean equals(clearAll_args that) {
      if (that == null)
        return false;

      boolean this_present_platformArgs = true && this.isSetPlatformArgs();
      boolean that_present_platformArgs = true && that.isSetPlatformArgs();
      if (this_present_platformArgs || that_present_platformArgs) {
        if (!(this_present_platformArgs && that_present_platformArgs))
          return false;
        if (!this.platformArgs.equals(that.platformArgs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(clearAll_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPlatformArgs()).compareTo(other.isSetPlatformArgs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPlatformArgs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.platformArgs, other.platformArgs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAll_args(");
      boolean first = true;

      sb.append("platformArgs:");
      if (this.platformArgs == null) {
        sb.append("null");
      } else {
        sb.append(this.platformArgs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (platformArgs != null) {
        platformArgs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAll_argsStandardSchemeFactory implements SchemeFactory {
      public clearAll_argsStandardScheme getScheme() {
        return new clearAll_argsStandardScheme();
      }
    }

    private static class clearAll_argsStandardScheme extends StandardScheme<clearAll_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAll_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PLATFORM_ARGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
                struct.platformArgs.read(iprot);
                struct.setPlatformArgsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAll_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.platformArgs != null) {
          oprot.writeFieldBegin(PLATFORM_ARGS_FIELD_DESC);
          struct.platformArgs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAll_argsTupleSchemeFactory implements SchemeFactory {
      public clearAll_argsTupleScheme getScheme() {
        return new clearAll_argsTupleScheme();
      }
    }

    private static class clearAll_argsTupleScheme extends TupleScheme<clearAll_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPlatformArgs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPlatformArgs()) {
          struct.platformArgs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAll_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.platformArgs = new org.soldier.platform.svr_platform.comm.PlatformArgs();
          struct.platformArgs.read(iprot);
          struct.setPlatformArgsIsSet(true);
        }
      }
    }

  }

  public static class clearAll_result implements org.apache.thrift.TBase<clearAll_result, clearAll_result._Fields>, java.io.Serializable, Cloneable, Comparable<clearAll_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clearAll_result");

    private static final org.apache.thrift.protocol.TField ERR_FIELD_DESC = new org.apache.thrift.protocol.TField("err", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new clearAll_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new clearAll_resultTupleSchemeFactory());
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo err; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ERR((short)1, "err");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ERR
            return ERR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ERR, new org.apache.thrift.meta_data.FieldMetaData("err", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clearAll_result.class, metaDataMap);
    }

    public clearAll_result() {
    }

    public clearAll_result(
      org.soldier.platform.svr_platform.comm.ErrorInfo err)
    {
      this();
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearAll_result(clearAll_result other) {
      if (other.isSetErr()) {
        this.err = new org.soldier.platform.svr_platform.comm.ErrorInfo(other.err);
      }
    }

    public clearAll_result deepCopy() {
      return new clearAll_result(this);
    }

    @Override
    public void clear() {
      this.err = null;
    }

    public org.soldier.platform.svr_platform.comm.ErrorInfo getErr() {
      return this.err;
    }

    public clearAll_result setErr(org.soldier.platform.svr_platform.comm.ErrorInfo err) {
      this.err = err;
      return this;
    }

    public void unsetErr() {
      this.err = null;
    }

    /** Returns true if field err is set (has been assigned a value) and false otherwise */
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((org.soldier.platform.svr_platform.comm.ErrorInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ERR:
        return getErr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ERR:
        return isSetErr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearAll_result)
        return this.equals((clearAll_result)that);
      return false;
    }

    public boolean equals(clearAll_result that) {
      if (that == null)
        return false;

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(clearAll_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetErr()).compareTo(other.isSetErr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.err, other.err);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("clearAll_result(");
      boolean first = true;

      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clearAll_resultStandardSchemeFactory implements SchemeFactory {
      public clearAll_resultStandardScheme getScheme() {
        return new clearAll_resultStandardScheme();
      }
    }

    private static class clearAll_resultStandardScheme extends StandardScheme<clearAll_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clearAll_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ERR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
                struct.err.read(iprot);
                struct.setErrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clearAll_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.err != null) {
          oprot.writeFieldBegin(ERR_FIELD_DESC);
          struct.err.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clearAll_resultTupleSchemeFactory implements SchemeFactory {
      public clearAll_resultTupleScheme getScheme() {
        return new clearAll_resultTupleScheme();
      }
    }

    private static class clearAll_resultTupleScheme extends TupleScheme<clearAll_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clearAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetErr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetErr()) {
          struct.err.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clearAll_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.err = new org.soldier.platform.svr_platform.comm.ErrorInfo();
          struct.err.read(iprot);
          struct.setErrIsSet(true);
        }
      }
    }

  }

}
