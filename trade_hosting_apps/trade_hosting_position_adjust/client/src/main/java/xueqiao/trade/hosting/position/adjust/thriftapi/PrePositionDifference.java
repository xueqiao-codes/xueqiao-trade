/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.adjust.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 资金账户上次打点的合约总净持仓差异
 */
public class PrePositionDifference implements org.apache.thrift.TBase<PrePositionDifference, PrePositionDifference._Fields>, java.io.Serializable, Cloneable, Comparable<PrePositionDifference> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PrePositionDifference");

  private static final org.apache.thrift.protocol.TField DATE_SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("dateSec", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_NET_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("sledNetPosition", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField UPSIDE_NET_POSITION_FIELD_DESC = new org.apache.thrift.protocol.TField("upsideNetPosition", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOT_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("dotTimestampMs", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestampMs", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PrePositionDifferenceStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PrePositionDifferenceTupleSchemeFactory());
  }

  public long dateSec; // optional
  public long tradeAccountId; // optional
  public long sledContractId; // optional
  public int sledNetPosition; // optional
  public int upsideNetPosition; // optional
  public long dotTimestampMs; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional
  public long startTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATE_SEC((short)1, "dateSec"),
    TRADE_ACCOUNT_ID((short)2, "tradeAccountId"),
    SLED_CONTRACT_ID((short)3, "sledContractId"),
    SLED_NET_POSITION((short)4, "sledNetPosition"),
    UPSIDE_NET_POSITION((short)5, "upsideNetPosition"),
    DOT_TIMESTAMP_MS((short)6, "dotTimestampMs"),
    CREATE_TIMESTAMP_MS((short)7, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)8, "lastmodifyTimestampMs"),
    START_TIMESTAMP_MS((short)9, "startTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATE_SEC
          return DATE_SEC;
        case 2: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 3: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 4: // SLED_NET_POSITION
          return SLED_NET_POSITION;
        case 5: // UPSIDE_NET_POSITION
          return UPSIDE_NET_POSITION;
        case 6: // DOT_TIMESTAMP_MS
          return DOT_TIMESTAMP_MS;
        case 7: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 8: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        case 9: // START_TIMESTAMP_MS
          return START_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DATESEC_ISSET_ID = 0;
  private static final int __TRADEACCOUNTID_ISSET_ID = 1;
  private static final int __SLEDCONTRACTID_ISSET_ID = 2;
  private static final int __SLEDNETPOSITION_ISSET_ID = 3;
  private static final int __UPSIDENETPOSITION_ISSET_ID = 4;
  private static final int __DOTTIMESTAMPMS_ISSET_ID = 5;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 6;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 7;
  private static final int __STARTTIMESTAMPMS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.DATE_SEC,_Fields.TRADE_ACCOUNT_ID,_Fields.SLED_CONTRACT_ID,_Fields.SLED_NET_POSITION,_Fields.UPSIDE_NET_POSITION,_Fields.DOT_TIMESTAMP_MS,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS,_Fields.START_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATE_SEC, new org.apache.thrift.meta_data.FieldMetaData("dateSec", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_NET_POSITION, new org.apache.thrift.meta_data.FieldMetaData("sledNetPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UPSIDE_NET_POSITION, new org.apache.thrift.meta_data.FieldMetaData("upsideNetPosition", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOT_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("dotTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("startTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PrePositionDifference.class, metaDataMap);
  }

  public PrePositionDifference() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PrePositionDifference(PrePositionDifference other) {
    __isset_bitfield = other.__isset_bitfield;
    this.dateSec = other.dateSec;
    this.tradeAccountId = other.tradeAccountId;
    this.sledContractId = other.sledContractId;
    this.sledNetPosition = other.sledNetPosition;
    this.upsideNetPosition = other.upsideNetPosition;
    this.dotTimestampMs = other.dotTimestampMs;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
    this.startTimestampMs = other.startTimestampMs;
  }

  public PrePositionDifference deepCopy() {
    return new PrePositionDifference(this);
  }

  @Override
  public void clear() {
    setDateSecIsSet(false);
    this.dateSec = 0;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSledNetPositionIsSet(false);
    this.sledNetPosition = 0;
    setUpsideNetPositionIsSet(false);
    this.upsideNetPosition = 0;
    setDotTimestampMsIsSet(false);
    this.dotTimestampMs = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
    setStartTimestampMsIsSet(false);
    this.startTimestampMs = 0;
  }

  public long getDateSec() {
    return this.dateSec;
  }

  public PrePositionDifference setDateSec(long dateSec) {
    this.dateSec = dateSec;
    setDateSecIsSet(true);
    return this;
  }

  public void unsetDateSec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATESEC_ISSET_ID);
  }

  /** Returns true if field dateSec is set (has been assigned a value) and false otherwise */
  public boolean isSetDateSec() {
    return EncodingUtils.testBit(__isset_bitfield, __DATESEC_ISSET_ID);
  }

  public void setDateSecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATESEC_ISSET_ID, value);
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public PrePositionDifference setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public PrePositionDifference setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public int getSledNetPosition() {
    return this.sledNetPosition;
  }

  public PrePositionDifference setSledNetPosition(int sledNetPosition) {
    this.sledNetPosition = sledNetPosition;
    setSledNetPositionIsSet(true);
    return this;
  }

  public void unsetSledNetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDNETPOSITION_ISSET_ID);
  }

  /** Returns true if field sledNetPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetSledNetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDNETPOSITION_ISSET_ID);
  }

  public void setSledNetPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDNETPOSITION_ISSET_ID, value);
  }

  public int getUpsideNetPosition() {
    return this.upsideNetPosition;
  }

  public PrePositionDifference setUpsideNetPosition(int upsideNetPosition) {
    this.upsideNetPosition = upsideNetPosition;
    setUpsideNetPositionIsSet(true);
    return this;
  }

  public void unsetUpsideNetPosition() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UPSIDENETPOSITION_ISSET_ID);
  }

  /** Returns true if field upsideNetPosition is set (has been assigned a value) and false otherwise */
  public boolean isSetUpsideNetPosition() {
    return EncodingUtils.testBit(__isset_bitfield, __UPSIDENETPOSITION_ISSET_ID);
  }

  public void setUpsideNetPositionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UPSIDENETPOSITION_ISSET_ID, value);
  }

  public long getDotTimestampMs() {
    return this.dotTimestampMs;
  }

  public PrePositionDifference setDotTimestampMs(long dotTimestampMs) {
    this.dotTimestampMs = dotTimestampMs;
    setDotTimestampMsIsSet(true);
    return this;
  }

  public void unsetDotTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOTTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field dotTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetDotTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __DOTTIMESTAMPMS_ISSET_ID);
  }

  public void setDotTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOTTIMESTAMPMS_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public PrePositionDifference setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public PrePositionDifference setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public long getStartTimestampMs() {
    return this.startTimestampMs;
  }

  public PrePositionDifference setStartTimestampMs(long startTimestampMs) {
    this.startTimestampMs = startTimestampMs;
    setStartTimestampMsIsSet(true);
    return this;
  }

  public void unsetStartTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field startTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMPMS_ISSET_ID);
  }

  public void setStartTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATE_SEC:
      if (value == null) {
        unsetDateSec();
      } else {
        setDateSec((Long)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case SLED_NET_POSITION:
      if (value == null) {
        unsetSledNetPosition();
      } else {
        setSledNetPosition((Integer)value);
      }
      break;

    case UPSIDE_NET_POSITION:
      if (value == null) {
        unsetUpsideNetPosition();
      } else {
        setUpsideNetPosition((Integer)value);
      }
      break;

    case DOT_TIMESTAMP_MS:
      if (value == null) {
        unsetDotTimestampMs();
      } else {
        setDotTimestampMs((Long)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    case START_TIMESTAMP_MS:
      if (value == null) {
        unsetStartTimestampMs();
      } else {
        setStartTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATE_SEC:
      return Long.valueOf(getDateSec());

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case SLED_NET_POSITION:
      return Integer.valueOf(getSledNetPosition());

    case UPSIDE_NET_POSITION:
      return Integer.valueOf(getUpsideNetPosition());

    case DOT_TIMESTAMP_MS:
      return Long.valueOf(getDotTimestampMs());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    case START_TIMESTAMP_MS:
      return Long.valueOf(getStartTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATE_SEC:
      return isSetDateSec();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SLED_NET_POSITION:
      return isSetSledNetPosition();
    case UPSIDE_NET_POSITION:
      return isSetUpsideNetPosition();
    case DOT_TIMESTAMP_MS:
      return isSetDotTimestampMs();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    case START_TIMESTAMP_MS:
      return isSetStartTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PrePositionDifference)
      return this.equals((PrePositionDifference)that);
    return false;
  }

  public boolean equals(PrePositionDifference that) {
    if (that == null)
      return false;

    boolean this_present_dateSec = true && this.isSetDateSec();
    boolean that_present_dateSec = true && that.isSetDateSec();
    if (this_present_dateSec || that_present_dateSec) {
      if (!(this_present_dateSec && that_present_dateSec))
        return false;
      if (this.dateSec != that.dateSec)
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_sledNetPosition = true && this.isSetSledNetPosition();
    boolean that_present_sledNetPosition = true && that.isSetSledNetPosition();
    if (this_present_sledNetPosition || that_present_sledNetPosition) {
      if (!(this_present_sledNetPosition && that_present_sledNetPosition))
        return false;
      if (this.sledNetPosition != that.sledNetPosition)
        return false;
    }

    boolean this_present_upsideNetPosition = true && this.isSetUpsideNetPosition();
    boolean that_present_upsideNetPosition = true && that.isSetUpsideNetPosition();
    if (this_present_upsideNetPosition || that_present_upsideNetPosition) {
      if (!(this_present_upsideNetPosition && that_present_upsideNetPosition))
        return false;
      if (this.upsideNetPosition != that.upsideNetPosition)
        return false;
    }

    boolean this_present_dotTimestampMs = true && this.isSetDotTimestampMs();
    boolean that_present_dotTimestampMs = true && that.isSetDotTimestampMs();
    if (this_present_dotTimestampMs || that_present_dotTimestampMs) {
      if (!(this_present_dotTimestampMs && that_present_dotTimestampMs))
        return false;
      if (this.dotTimestampMs != that.dotTimestampMs)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    boolean this_present_startTimestampMs = true && this.isSetStartTimestampMs();
    boolean that_present_startTimestampMs = true && that.isSetStartTimestampMs();
    if (this_present_startTimestampMs || that_present_startTimestampMs) {
      if (!(this_present_startTimestampMs && that_present_startTimestampMs))
        return false;
      if (this.startTimestampMs != that.startTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PrePositionDifference other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDateSec()).compareTo(other.isSetDateSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateSec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateSec, other.dateSec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledNetPosition()).compareTo(other.isSetSledNetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledNetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledNetPosition, other.sledNetPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUpsideNetPosition()).compareTo(other.isSetUpsideNetPosition());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpsideNetPosition()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.upsideNetPosition, other.upsideNetPosition);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDotTimestampMs()).compareTo(other.isSetDotTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDotTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dotTimestampMs, other.dotTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestampMs()).compareTo(other.isSetStartTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestampMs, other.startTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PrePositionDifference(");
    boolean first = true;

    if (isSetDateSec()) {
      sb.append("dateSec:");
      sb.append(this.dateSec);
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSledNetPosition()) {
      if (!first) sb.append(", ");
      sb.append("sledNetPosition:");
      sb.append(this.sledNetPosition);
      first = false;
    }
    if (isSetUpsideNetPosition()) {
      if (!first) sb.append(", ");
      sb.append("upsideNetPosition:");
      sb.append(this.upsideNetPosition);
      first = false;
    }
    if (isSetDotTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("dotTimestampMs:");
      sb.append(this.dotTimestampMs);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    if (isSetStartTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("startTimestampMs:");
      sb.append(this.startTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PrePositionDifferenceStandardSchemeFactory implements SchemeFactory {
    public PrePositionDifferenceStandardScheme getScheme() {
      return new PrePositionDifferenceStandardScheme();
    }
  }

  private static class PrePositionDifferenceStandardScheme extends StandardScheme<PrePositionDifference> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PrePositionDifference struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATE_SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dateSec = iprot.readI64();
              struct.setDateSecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_NET_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sledNetPosition = iprot.readI32();
              struct.setSledNetPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // UPSIDE_NET_POSITION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.upsideNetPosition = iprot.readI32();
              struct.setUpsideNetPositionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOT_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dotTimestampMs = iprot.readI64();
              struct.setDotTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // START_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestampMs = iprot.readI64();
              struct.setStartTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PrePositionDifference struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDateSec()) {
        oprot.writeFieldBegin(DATE_SEC_FIELD_DESC);
        oprot.writeI64(struct.dateSec);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledNetPosition()) {
        oprot.writeFieldBegin(SLED_NET_POSITION_FIELD_DESC);
        oprot.writeI32(struct.sledNetPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUpsideNetPosition()) {
        oprot.writeFieldBegin(UPSIDE_NET_POSITION_FIELD_DESC);
        oprot.writeI32(struct.upsideNetPosition);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDotTimestampMs()) {
        oprot.writeFieldBegin(DOT_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.dotTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartTimestampMs()) {
        oprot.writeFieldBegin(START_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.startTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PrePositionDifferenceTupleSchemeFactory implements SchemeFactory {
    public PrePositionDifferenceTupleScheme getScheme() {
      return new PrePositionDifferenceTupleScheme();
    }
  }

  private static class PrePositionDifferenceTupleScheme extends TupleScheme<PrePositionDifference> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PrePositionDifference struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDateSec()) {
        optionals.set(0);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(1);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(2);
      }
      if (struct.isSetSledNetPosition()) {
        optionals.set(3);
      }
      if (struct.isSetUpsideNetPosition()) {
        optionals.set(4);
      }
      if (struct.isSetDotTimestampMs()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(6);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(7);
      }
      if (struct.isSetStartTimestampMs()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetDateSec()) {
        oprot.writeI64(struct.dateSec);
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetSledNetPosition()) {
        oprot.writeI32(struct.sledNetPosition);
      }
      if (struct.isSetUpsideNetPosition()) {
        oprot.writeI32(struct.upsideNetPosition);
      }
      if (struct.isSetDotTimestampMs()) {
        oprot.writeI64(struct.dotTimestampMs);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
      if (struct.isSetStartTimestampMs()) {
        oprot.writeI64(struct.startTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PrePositionDifference struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.dateSec = iprot.readI64();
        struct.setDateSecIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledNetPosition = iprot.readI32();
        struct.setSledNetPositionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.upsideNetPosition = iprot.readI32();
        struct.setUpsideNetPositionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.dotTimestampMs = iprot.readI64();
        struct.setDotTimestampMsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.startTimestampMs = iprot.readI64();
        struct.setStartTimestampMsIsSet(true);
      }
    }
  }

}

