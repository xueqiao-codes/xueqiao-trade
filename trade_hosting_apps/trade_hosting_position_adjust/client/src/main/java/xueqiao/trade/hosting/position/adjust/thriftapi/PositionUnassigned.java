/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.adjust.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 未分配持仓
 */
public class PositionUnassigned implements org.apache.thrift.TBase<PositionUnassigned, PositionUnassigned._Fields>, java.io.Serializable, Cloneable, Comparable<PositionUnassigned> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PositionUnassigned");

  private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_SUB_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputSubUserId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SLED_COMMODITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledCommodityId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.DOUBLE, (short)10);
  private static final org.apache.thrift.protocol.TField VOLUME_FIELD_DESC = new org.apache.thrift.protocol.TField("volume", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField POSITION_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDirection", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField POSITION_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("positionTimestampMs", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestampMs", org.apache.thrift.protocol.TType.I64, (short)30);
  private static final org.apache.thrift.protocol.TField LASTMODIFY_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("lastmodifyTimestampMs", org.apache.thrift.protocol.TType.I64, (short)31);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PositionUnassignedStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PositionUnassignedTupleSchemeFactory());
  }

  public long inputId; // optional
  public long inputSubUserId; // optional
  public long tradeAccountId; // optional
  public long sledContractId; // optional
  public long sledCommodityId; // optional
  public double price; // optional
  public int volume; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection positionDirection; // optional
  public long positionTimestampMs; // optional
  public long createTimestampMs; // optional
  public long lastmodifyTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INPUT_ID((short)1, "inputId"),
    INPUT_SUB_USER_ID((short)2, "inputSubUserId"),
    TRADE_ACCOUNT_ID((short)3, "tradeAccountId"),
    SLED_CONTRACT_ID((short)4, "sledContractId"),
    SLED_COMMODITY_ID((short)5, "sledCommodityId"),
    PRICE((short)10, "price"),
    VOLUME((short)11, "volume"),
    /**
     * 
     * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
     */
    POSITION_DIRECTION((short)12, "positionDirection"),
    POSITION_TIMESTAMP_MS((short)13, "positionTimestampMs"),
    CREATE_TIMESTAMP_MS((short)30, "createTimestampMs"),
    LASTMODIFY_TIMESTAMP_MS((short)31, "lastmodifyTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INPUT_ID
          return INPUT_ID;
        case 2: // INPUT_SUB_USER_ID
          return INPUT_SUB_USER_ID;
        case 3: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 4: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 5: // SLED_COMMODITY_ID
          return SLED_COMMODITY_ID;
        case 10: // PRICE
          return PRICE;
        case 11: // VOLUME
          return VOLUME;
        case 12: // POSITION_DIRECTION
          return POSITION_DIRECTION;
        case 13: // POSITION_TIMESTAMP_MS
          return POSITION_TIMESTAMP_MS;
        case 30: // CREATE_TIMESTAMP_MS
          return CREATE_TIMESTAMP_MS;
        case 31: // LASTMODIFY_TIMESTAMP_MS
          return LASTMODIFY_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __INPUTID_ISSET_ID = 0;
  private static final int __INPUTSUBUSERID_ISSET_ID = 1;
  private static final int __TRADEACCOUNTID_ISSET_ID = 2;
  private static final int __SLEDCONTRACTID_ISSET_ID = 3;
  private static final int __SLEDCOMMODITYID_ISSET_ID = 4;
  private static final int __PRICE_ISSET_ID = 5;
  private static final int __VOLUME_ISSET_ID = 6;
  private static final int __POSITIONTIMESTAMPMS_ISSET_ID = 7;
  private static final int __CREATETIMESTAMPMS_ISSET_ID = 8;
  private static final int __LASTMODIFYTIMESTAMPMS_ISSET_ID = 9;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.INPUT_ID,_Fields.INPUT_SUB_USER_ID,_Fields.TRADE_ACCOUNT_ID,_Fields.SLED_CONTRACT_ID,_Fields.SLED_COMMODITY_ID,_Fields.PRICE,_Fields.VOLUME,_Fields.POSITION_DIRECTION,_Fields.POSITION_TIMESTAMP_MS,_Fields.CREATE_TIMESTAMP_MS,_Fields.LASTMODIFY_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INPUT_SUB_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("inputSubUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_COMMODITY_ID, new org.apache.thrift.meta_data.FieldMetaData("sledCommodityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.VOLUME, new org.apache.thrift.meta_data.FieldMetaData("volume", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.POSITION_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("positionDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.class)));
    tmpMap.put(_Fields.POSITION_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("positionTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("createTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LASTMODIFY_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("lastmodifyTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PositionUnassigned.class, metaDataMap);
  }

  public PositionUnassigned() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PositionUnassigned(PositionUnassigned other) {
    __isset_bitfield = other.__isset_bitfield;
    this.inputId = other.inputId;
    this.inputSubUserId = other.inputSubUserId;
    this.tradeAccountId = other.tradeAccountId;
    this.sledContractId = other.sledContractId;
    this.sledCommodityId = other.sledCommodityId;
    this.price = other.price;
    this.volume = other.volume;
    if (other.isSetPositionDirection()) {
      this.positionDirection = other.positionDirection;
    }
    this.positionTimestampMs = other.positionTimestampMs;
    this.createTimestampMs = other.createTimestampMs;
    this.lastmodifyTimestampMs = other.lastmodifyTimestampMs;
  }

  public PositionUnassigned deepCopy() {
    return new PositionUnassigned(this);
  }

  @Override
  public void clear() {
    setInputIdIsSet(false);
    this.inputId = 0;
    setInputSubUserIdIsSet(false);
    this.inputSubUserId = 0;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    setSledCommodityIdIsSet(false);
    this.sledCommodityId = 0;
    setPriceIsSet(false);
    this.price = 0.0;
    setVolumeIsSet(false);
    this.volume = 0;
    this.positionDirection = null;
    setPositionTimestampMsIsSet(false);
    this.positionTimestampMs = 0;
    setCreateTimestampMsIsSet(false);
    this.createTimestampMs = 0;
    setLastmodifyTimestampMsIsSet(false);
    this.lastmodifyTimestampMs = 0;
  }

  public long getInputId() {
    return this.inputId;
  }

  public PositionUnassigned setInputId(long inputId) {
    this.inputId = inputId;
    setInputIdIsSet(true);
    return this;
  }

  public void unsetInputId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputId() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  public void setInputIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTID_ISSET_ID, value);
  }

  public long getInputSubUserId() {
    return this.inputSubUserId;
  }

  public PositionUnassigned setInputSubUserId(long inputSubUserId) {
    this.inputSubUserId = inputSubUserId;
    setInputSubUserIdIsSet(true);
    return this;
  }

  public void unsetInputSubUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTSUBUSERID_ISSET_ID);
  }

  /** Returns true if field inputSubUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputSubUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTSUBUSERID_ISSET_ID);
  }

  public void setInputSubUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTSUBUSERID_ISSET_ID, value);
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public PositionUnassigned setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public PositionUnassigned setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  public long getSledCommodityId() {
    return this.sledCommodityId;
  }

  public PositionUnassigned setSledCommodityId(long sledCommodityId) {
    this.sledCommodityId = sledCommodityId;
    setSledCommodityIdIsSet(true);
    return this;
  }

  public void unsetSledCommodityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  /** Returns true if field sledCommodityId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledCommodityId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID);
  }

  public void setSledCommodityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCOMMODITYID_ISSET_ID, value);
  }

  public double getPrice() {
    return this.price;
  }

  public PositionUnassigned setPrice(double price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  public int getVolume() {
    return this.volume;
  }

  public PositionUnassigned setVolume(int volume) {
    this.volume = volume;
    setVolumeIsSet(true);
    return this;
  }

  public void unsetVolume() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  /** Returns true if field volume is set (has been assigned a value) and false otherwise */
  public boolean isSetVolume() {
    return EncodingUtils.testBit(__isset_bitfield, __VOLUME_ISSET_ID);
  }

  public void setVolumeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUME_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection getPositionDirection() {
    return this.positionDirection;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public PositionUnassigned setPositionDirection(xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection positionDirection) {
    this.positionDirection = positionDirection;
    return this;
  }

  public void unsetPositionDirection() {
    this.positionDirection = null;
  }

  /** Returns true if field positionDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDirection() {
    return this.positionDirection != null;
  }

  public void setPositionDirectionIsSet(boolean value) {
    if (!value) {
      this.positionDirection = null;
    }
  }

  public long getPositionTimestampMs() {
    return this.positionTimestampMs;
  }

  public PositionUnassigned setPositionTimestampMs(long positionTimestampMs) {
    this.positionTimestampMs = positionTimestampMs;
    setPositionTimestampMsIsSet(true);
    return this;
  }

  public void unsetPositionTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __POSITIONTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field positionTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __POSITIONTIMESTAMPMS_ISSET_ID);
  }

  public void setPositionTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __POSITIONTIMESTAMPMS_ISSET_ID, value);
  }

  public long getCreateTimestampMs() {
    return this.createTimestampMs;
  }

  public PositionUnassigned setCreateTimestampMs(long createTimestampMs) {
    this.createTimestampMs = createTimestampMs;
    setCreateTimestampMsIsSet(true);
    return this;
  }

  public void unsetCreateTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field createTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID);
  }

  public void setCreateTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMPMS_ISSET_ID, value);
  }

  public long getLastmodifyTimestampMs() {
    return this.lastmodifyTimestampMs;
  }

  public PositionUnassigned setLastmodifyTimestampMs(long lastmodifyTimestampMs) {
    this.lastmodifyTimestampMs = lastmodifyTimestampMs;
    setLastmodifyTimestampMsIsSet(true);
    return this;
  }

  public void unsetLastmodifyTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field lastmodifyTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetLastmodifyTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID);
  }

  public void setLastmodifyTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INPUT_ID:
      if (value == null) {
        unsetInputId();
      } else {
        setInputId((Long)value);
      }
      break;

    case INPUT_SUB_USER_ID:
      if (value == null) {
        unsetInputSubUserId();
      } else {
        setInputSubUserId((Long)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case SLED_COMMODITY_ID:
      if (value == null) {
        unsetSledCommodityId();
      } else {
        setSledCommodityId((Long)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((Double)value);
      }
      break;

    case VOLUME:
      if (value == null) {
        unsetVolume();
      } else {
        setVolume((Integer)value);
      }
      break;

    case POSITION_DIRECTION:
      if (value == null) {
        unsetPositionDirection();
      } else {
        setPositionDirection((xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection)value);
      }
      break;

    case POSITION_TIMESTAMP_MS:
      if (value == null) {
        unsetPositionTimestampMs();
      } else {
        setPositionTimestampMs((Long)value);
      }
      break;

    case CREATE_TIMESTAMP_MS:
      if (value == null) {
        unsetCreateTimestampMs();
      } else {
        setCreateTimestampMs((Long)value);
      }
      break;

    case LASTMODIFY_TIMESTAMP_MS:
      if (value == null) {
        unsetLastmodifyTimestampMs();
      } else {
        setLastmodifyTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INPUT_ID:
      return Long.valueOf(getInputId());

    case INPUT_SUB_USER_ID:
      return Long.valueOf(getInputSubUserId());

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case SLED_COMMODITY_ID:
      return Long.valueOf(getSledCommodityId());

    case PRICE:
      return Double.valueOf(getPrice());

    case VOLUME:
      return Integer.valueOf(getVolume());

    case POSITION_DIRECTION:
      return getPositionDirection();

    case POSITION_TIMESTAMP_MS:
      return Long.valueOf(getPositionTimestampMs());

    case CREATE_TIMESTAMP_MS:
      return Long.valueOf(getCreateTimestampMs());

    case LASTMODIFY_TIMESTAMP_MS:
      return Long.valueOf(getLastmodifyTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INPUT_ID:
      return isSetInputId();
    case INPUT_SUB_USER_ID:
      return isSetInputSubUserId();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case SLED_COMMODITY_ID:
      return isSetSledCommodityId();
    case PRICE:
      return isSetPrice();
    case VOLUME:
      return isSetVolume();
    case POSITION_DIRECTION:
      return isSetPositionDirection();
    case POSITION_TIMESTAMP_MS:
      return isSetPositionTimestampMs();
    case CREATE_TIMESTAMP_MS:
      return isSetCreateTimestampMs();
    case LASTMODIFY_TIMESTAMP_MS:
      return isSetLastmodifyTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PositionUnassigned)
      return this.equals((PositionUnassigned)that);
    return false;
  }

  public boolean equals(PositionUnassigned that) {
    if (that == null)
      return false;

    boolean this_present_inputId = true && this.isSetInputId();
    boolean that_present_inputId = true && that.isSetInputId();
    if (this_present_inputId || that_present_inputId) {
      if (!(this_present_inputId && that_present_inputId))
        return false;
      if (this.inputId != that.inputId)
        return false;
    }

    boolean this_present_inputSubUserId = true && this.isSetInputSubUserId();
    boolean that_present_inputSubUserId = true && that.isSetInputSubUserId();
    if (this_present_inputSubUserId || that_present_inputSubUserId) {
      if (!(this_present_inputSubUserId && that_present_inputSubUserId))
        return false;
      if (this.inputSubUserId != that.inputSubUserId)
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_sledCommodityId = true && this.isSetSledCommodityId();
    boolean that_present_sledCommodityId = true && that.isSetSledCommodityId();
    if (this_present_sledCommodityId || that_present_sledCommodityId) {
      if (!(this_present_sledCommodityId && that_present_sledCommodityId))
        return false;
      if (this.sledCommodityId != that.sledCommodityId)
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_volume = true && this.isSetVolume();
    boolean that_present_volume = true && that.isSetVolume();
    if (this_present_volume || that_present_volume) {
      if (!(this_present_volume && that_present_volume))
        return false;
      if (this.volume != that.volume)
        return false;
    }

    boolean this_present_positionDirection = true && this.isSetPositionDirection();
    boolean that_present_positionDirection = true && that.isSetPositionDirection();
    if (this_present_positionDirection || that_present_positionDirection) {
      if (!(this_present_positionDirection && that_present_positionDirection))
        return false;
      if (!this.positionDirection.equals(that.positionDirection))
        return false;
    }

    boolean this_present_positionTimestampMs = true && this.isSetPositionTimestampMs();
    boolean that_present_positionTimestampMs = true && that.isSetPositionTimestampMs();
    if (this_present_positionTimestampMs || that_present_positionTimestampMs) {
      if (!(this_present_positionTimestampMs && that_present_positionTimestampMs))
        return false;
      if (this.positionTimestampMs != that.positionTimestampMs)
        return false;
    }

    boolean this_present_createTimestampMs = true && this.isSetCreateTimestampMs();
    boolean that_present_createTimestampMs = true && that.isSetCreateTimestampMs();
    if (this_present_createTimestampMs || that_present_createTimestampMs) {
      if (!(this_present_createTimestampMs && that_present_createTimestampMs))
        return false;
      if (this.createTimestampMs != that.createTimestampMs)
        return false;
    }

    boolean this_present_lastmodifyTimestampMs = true && this.isSetLastmodifyTimestampMs();
    boolean that_present_lastmodifyTimestampMs = true && that.isSetLastmodifyTimestampMs();
    if (this_present_lastmodifyTimestampMs || that_present_lastmodifyTimestampMs) {
      if (!(this_present_lastmodifyTimestampMs && that_present_lastmodifyTimestampMs))
        return false;
      if (this.lastmodifyTimestampMs != that.lastmodifyTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(PositionUnassigned other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputSubUserId()).compareTo(other.isSetInputSubUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputSubUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputSubUserId, other.inputSubUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledCommodityId()).compareTo(other.isSetSledCommodityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledCommodityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledCommodityId, other.sledCommodityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVolume()).compareTo(other.isSetVolume());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVolume()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volume, other.volume);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDirection()).compareTo(other.isSetPositionDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDirection, other.positionDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionTimestampMs()).compareTo(other.isSetPositionTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionTimestampMs, other.positionTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestampMs()).compareTo(other.isSetCreateTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestampMs, other.createTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastmodifyTimestampMs()).compareTo(other.isSetLastmodifyTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastmodifyTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastmodifyTimestampMs, other.lastmodifyTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PositionUnassigned(");
    boolean first = true;

    if (isSetInputId()) {
      sb.append("inputId:");
      sb.append(this.inputId);
      first = false;
    }
    if (isSetInputSubUserId()) {
      if (!first) sb.append(", ");
      sb.append("inputSubUserId:");
      sb.append(this.inputSubUserId);
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetSledCommodityId()) {
      if (!first) sb.append(", ");
      sb.append("sledCommodityId:");
      sb.append(this.sledCommodityId);
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetVolume()) {
      if (!first) sb.append(", ");
      sb.append("volume:");
      sb.append(this.volume);
      first = false;
    }
    if (isSetPositionDirection()) {
      if (!first) sb.append(", ");
      sb.append("positionDirection:");
      if (this.positionDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.positionDirection);
      }
      first = false;
    }
    if (isSetPositionTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("positionTimestampMs:");
      sb.append(this.positionTimestampMs);
      first = false;
    }
    if (isSetCreateTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("createTimestampMs:");
      sb.append(this.createTimestampMs);
      first = false;
    }
    if (isSetLastmodifyTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("lastmodifyTimestampMs:");
      sb.append(this.lastmodifyTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PositionUnassignedStandardSchemeFactory implements SchemeFactory {
    public PositionUnassignedStandardScheme getScheme() {
      return new PositionUnassignedStandardScheme();
    }
  }

  private static class PositionUnassignedStandardScheme extends StandardScheme<PositionUnassigned> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PositionUnassigned struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputId = iprot.readI64();
              struct.setInputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT_SUB_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputSubUserId = iprot.readI64();
              struct.setInputSubUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SLED_COMMODITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledCommodityId = iprot.readI64();
              struct.setSledCommodityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.price = iprot.readDouble();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VOLUME
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.volume = iprot.readI32();
              struct.setVolumeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // POSITION_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionDirection = xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.findByValue(iprot.readI32());
              struct.setPositionDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // POSITION_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.positionTimestampMs = iprot.readI64();
              struct.setPositionTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CREATE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTimestampMs = iprot.readI64();
              struct.setCreateTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 31: // LASTMODIFY_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastmodifyTimestampMs = iprot.readI64();
              struct.setLastmodifyTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PositionUnassigned struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetInputId()) {
        oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
        oprot.writeI64(struct.inputId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInputSubUserId()) {
        oprot.writeFieldBegin(INPUT_SUB_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.inputSubUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeFieldBegin(SLED_COMMODITY_ID_FIELD_DESC);
        oprot.writeI64(struct.sledCommodityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeDouble(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVolume()) {
        oprot.writeFieldBegin(VOLUME_FIELD_DESC);
        oprot.writeI32(struct.volume);
        oprot.writeFieldEnd();
      }
      if (struct.positionDirection != null) {
        if (struct.isSetPositionDirection()) {
          oprot.writeFieldBegin(POSITION_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.positionDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPositionTimestampMs()) {
        oprot.writeFieldBegin(POSITION_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.positionTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.createTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeFieldBegin(LASTMODIFY_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.lastmodifyTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PositionUnassignedTupleSchemeFactory implements SchemeFactory {
    public PositionUnassignedTupleScheme getScheme() {
      return new PositionUnassignedTupleScheme();
    }
  }

  private static class PositionUnassignedTupleScheme extends TupleScheme<PositionUnassigned> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PositionUnassigned struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetInputId()) {
        optionals.set(0);
      }
      if (struct.isSetInputSubUserId()) {
        optionals.set(1);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(2);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(3);
      }
      if (struct.isSetSledCommodityId()) {
        optionals.set(4);
      }
      if (struct.isSetPrice()) {
        optionals.set(5);
      }
      if (struct.isSetVolume()) {
        optionals.set(6);
      }
      if (struct.isSetPositionDirection()) {
        optionals.set(7);
      }
      if (struct.isSetPositionTimestampMs()) {
        optionals.set(8);
      }
      if (struct.isSetCreateTimestampMs()) {
        optionals.set(9);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetInputId()) {
        oprot.writeI64(struct.inputId);
      }
      if (struct.isSetInputSubUserId()) {
        oprot.writeI64(struct.inputSubUserId);
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetSledCommodityId()) {
        oprot.writeI64(struct.sledCommodityId);
      }
      if (struct.isSetPrice()) {
        oprot.writeDouble(struct.price);
      }
      if (struct.isSetVolume()) {
        oprot.writeI32(struct.volume);
      }
      if (struct.isSetPositionDirection()) {
        oprot.writeI32(struct.positionDirection.getValue());
      }
      if (struct.isSetPositionTimestampMs()) {
        oprot.writeI64(struct.positionTimestampMs);
      }
      if (struct.isSetCreateTimestampMs()) {
        oprot.writeI64(struct.createTimestampMs);
      }
      if (struct.isSetLastmodifyTimestampMs()) {
        oprot.writeI64(struct.lastmodifyTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PositionUnassigned struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.inputId = iprot.readI64();
        struct.setInputIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inputSubUserId = iprot.readI64();
        struct.setInputSubUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sledCommodityId = iprot.readI64();
        struct.setSledCommodityIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.price = iprot.readDouble();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.volume = iprot.readI32();
        struct.setVolumeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.positionDirection = xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.findByValue(iprot.readI32());
        struct.setPositionDirectionIsSet(true);
      }
      if (incoming.get(8)) {
        struct.positionTimestampMs = iprot.readI64();
        struct.setPositionTimestampMsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.createTimestampMs = iprot.readI64();
        struct.setCreateTimestampMsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.lastmodifyTimestampMs = iprot.readI64();
        struct.setLastmodifyTimestampMsIsSet(true);
      }
    }
  }

}

