/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.position.adjust.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 查询未分配持仓明细
 * 时间条件：大于 startTradeTimestamp, 小于 endTradeTimestamp
 * 所有option使用逻辑与(AND)操作
 */
public class ReqPositionUnassignedOption implements org.apache.thrift.TBase<ReqPositionUnassignedOption, ReqPositionUnassignedOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqPositionUnassignedOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqPositionUnassignedOption");

  private static final org.apache.thrift.protocol.TField MANUAL_INPUT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("manualInputUserId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField INPUT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("inputId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SLED_CONTRACT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sledContractId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField POSITION_DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("positionDirection", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField START_TRADE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("startTradeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField END_TRADE_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("endTradeTimestampMs", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField START_INPUT_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("startInputTimestampMs", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_INPUT_TIMESTAMP_MS_FIELD_DESC = new org.apache.thrift.protocol.TField("endInputTimestampMs", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqPositionUnassignedOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqPositionUnassignedOptionTupleSchemeFactory());
  }

  public long manualInputUserId; // optional
  public long inputId; // optional
  public long tradeAccountId; // optional
  public long sledContractId; // optional
  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection positionDirection; // optional
  public long startTradeTimestampMs; // optional
  public long endTradeTimestampMs; // optional
  public long startInputTimestampMs; // optional
  public long endInputTimestampMs; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MANUAL_INPUT_USER_ID((short)1, "manualInputUserId"),
    INPUT_ID((short)2, "inputId"),
    TRADE_ACCOUNT_ID((short)3, "tradeAccountId"),
    SLED_CONTRACT_ID((short)4, "sledContractId"),
    /**
     * 
     * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
     */
    POSITION_DIRECTION((short)5, "positionDirection"),
    START_TRADE_TIMESTAMP_MS((short)6, "startTradeTimestampMs"),
    END_TRADE_TIMESTAMP_MS((short)7, "endTradeTimestampMs"),
    START_INPUT_TIMESTAMP_MS((short)8, "startInputTimestampMs"),
    END_INPUT_TIMESTAMP_MS((short)9, "endInputTimestampMs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MANUAL_INPUT_USER_ID
          return MANUAL_INPUT_USER_ID;
        case 2: // INPUT_ID
          return INPUT_ID;
        case 3: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 4: // SLED_CONTRACT_ID
          return SLED_CONTRACT_ID;
        case 5: // POSITION_DIRECTION
          return POSITION_DIRECTION;
        case 6: // START_TRADE_TIMESTAMP_MS
          return START_TRADE_TIMESTAMP_MS;
        case 7: // END_TRADE_TIMESTAMP_MS
          return END_TRADE_TIMESTAMP_MS;
        case 8: // START_INPUT_TIMESTAMP_MS
          return START_INPUT_TIMESTAMP_MS;
        case 9: // END_INPUT_TIMESTAMP_MS
          return END_INPUT_TIMESTAMP_MS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MANUALINPUTUSERID_ISSET_ID = 0;
  private static final int __INPUTID_ISSET_ID = 1;
  private static final int __TRADEACCOUNTID_ISSET_ID = 2;
  private static final int __SLEDCONTRACTID_ISSET_ID = 3;
  private static final int __STARTTRADETIMESTAMPMS_ISSET_ID = 4;
  private static final int __ENDTRADETIMESTAMPMS_ISSET_ID = 5;
  private static final int __STARTINPUTTIMESTAMPMS_ISSET_ID = 6;
  private static final int __ENDINPUTTIMESTAMPMS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.MANUAL_INPUT_USER_ID,_Fields.INPUT_ID,_Fields.TRADE_ACCOUNT_ID,_Fields.SLED_CONTRACT_ID,_Fields.POSITION_DIRECTION,_Fields.START_TRADE_TIMESTAMP_MS,_Fields.END_TRADE_TIMESTAMP_MS,_Fields.START_INPUT_TIMESTAMP_MS,_Fields.END_INPUT_TIMESTAMP_MS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MANUAL_INPUT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("manualInputUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.INPUT_ID, new org.apache.thrift.meta_data.FieldMetaData("inputId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SLED_CONTRACT_ID, new org.apache.thrift.meta_data.FieldMetaData("sledContractId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.POSITION_DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("positionDirection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.class)));
    tmpMap.put(_Fields.START_TRADE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("startTradeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TRADE_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("endTradeTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.START_INPUT_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("startInputTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_INPUT_TIMESTAMP_MS, new org.apache.thrift.meta_data.FieldMetaData("endInputTimestampMs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqPositionUnassignedOption.class, metaDataMap);
  }

  public ReqPositionUnassignedOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqPositionUnassignedOption(ReqPositionUnassignedOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.manualInputUserId = other.manualInputUserId;
    this.inputId = other.inputId;
    this.tradeAccountId = other.tradeAccountId;
    this.sledContractId = other.sledContractId;
    if (other.isSetPositionDirection()) {
      this.positionDirection = other.positionDirection;
    }
    this.startTradeTimestampMs = other.startTradeTimestampMs;
    this.endTradeTimestampMs = other.endTradeTimestampMs;
    this.startInputTimestampMs = other.startInputTimestampMs;
    this.endInputTimestampMs = other.endInputTimestampMs;
  }

  public ReqPositionUnassignedOption deepCopy() {
    return new ReqPositionUnassignedOption(this);
  }

  @Override
  public void clear() {
    setManualInputUserIdIsSet(false);
    this.manualInputUserId = 0;
    setInputIdIsSet(false);
    this.inputId = 0;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setSledContractIdIsSet(false);
    this.sledContractId = 0;
    this.positionDirection = null;
    setStartTradeTimestampMsIsSet(false);
    this.startTradeTimestampMs = 0;
    setEndTradeTimestampMsIsSet(false);
    this.endTradeTimestampMs = 0;
    setStartInputTimestampMsIsSet(false);
    this.startInputTimestampMs = 0;
    setEndInputTimestampMsIsSet(false);
    this.endInputTimestampMs = 0;
  }

  public long getManualInputUserId() {
    return this.manualInputUserId;
  }

  public ReqPositionUnassignedOption setManualInputUserId(long manualInputUserId) {
    this.manualInputUserId = manualInputUserId;
    setManualInputUserIdIsSet(true);
    return this;
  }

  public void unsetManualInputUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MANUALINPUTUSERID_ISSET_ID);
  }

  /** Returns true if field manualInputUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetManualInputUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __MANUALINPUTUSERID_ISSET_ID);
  }

  public void setManualInputUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MANUALINPUTUSERID_ISSET_ID, value);
  }

  public long getInputId() {
    return this.inputId;
  }

  public ReqPositionUnassignedOption setInputId(long inputId) {
    this.inputId = inputId;
    setInputIdIsSet(true);
    return this;
  }

  public void unsetInputId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  /** Returns true if field inputId is set (has been assigned a value) and false otherwise */
  public boolean isSetInputId() {
    return EncodingUtils.testBit(__isset_bitfield, __INPUTID_ISSET_ID);
  }

  public void setInputIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INPUTID_ISSET_ID, value);
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public ReqPositionUnassignedOption setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public long getSledContractId() {
    return this.sledContractId;
  }

  public ReqPositionUnassignedOption setSledContractId(long sledContractId) {
    this.sledContractId = sledContractId;
    setSledContractIdIsSet(true);
    return this;
  }

  public void unsetSledContractId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  /** Returns true if field sledContractId is set (has been assigned a value) and false otherwise */
  public boolean isSetSledContractId() {
    return EncodingUtils.testBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID);
  }

  public void setSledContractIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SLEDCONTRACTID_ISSET_ID, value);
  }

  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection getPositionDirection() {
    return this.positionDirection;
  }

  /**
   * 
   * @see xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection
   */
  public ReqPositionUnassignedOption setPositionDirection(xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection positionDirection) {
    this.positionDirection = positionDirection;
    return this;
  }

  public void unsetPositionDirection() {
    this.positionDirection = null;
  }

  /** Returns true if field positionDirection is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionDirection() {
    return this.positionDirection != null;
  }

  public void setPositionDirectionIsSet(boolean value) {
    if (!value) {
      this.positionDirection = null;
    }
  }

  public long getStartTradeTimestampMs() {
    return this.startTradeTimestampMs;
  }

  public ReqPositionUnassignedOption setStartTradeTimestampMs(long startTradeTimestampMs) {
    this.startTradeTimestampMs = startTradeTimestampMs;
    setStartTradeTimestampMsIsSet(true);
    return this;
  }

  public void unsetStartTradeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field startTradeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTradeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID);
  }

  public void setStartTradeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTRADETIMESTAMPMS_ISSET_ID, value);
  }

  public long getEndTradeTimestampMs() {
    return this.endTradeTimestampMs;
  }

  public ReqPositionUnassignedOption setEndTradeTimestampMs(long endTradeTimestampMs) {
    this.endTradeTimestampMs = endTradeTimestampMs;
    setEndTradeTimestampMsIsSet(true);
    return this;
  }

  public void unsetEndTradeTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field endTradeTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTradeTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID);
  }

  public void setEndTradeTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTRADETIMESTAMPMS_ISSET_ID, value);
  }

  public long getStartInputTimestampMs() {
    return this.startInputTimestampMs;
  }

  public ReqPositionUnassignedOption setStartInputTimestampMs(long startInputTimestampMs) {
    this.startInputTimestampMs = startInputTimestampMs;
    setStartInputTimestampMsIsSet(true);
    return this;
  }

  public void unsetStartInputTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTINPUTTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field startInputTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetStartInputTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTINPUTTIMESTAMPMS_ISSET_ID);
  }

  public void setStartInputTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTINPUTTIMESTAMPMS_ISSET_ID, value);
  }

  public long getEndInputTimestampMs() {
    return this.endInputTimestampMs;
  }

  public ReqPositionUnassignedOption setEndInputTimestampMs(long endInputTimestampMs) {
    this.endInputTimestampMs = endInputTimestampMs;
    setEndInputTimestampMsIsSet(true);
    return this;
  }

  public void unsetEndInputTimestampMs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDINPUTTIMESTAMPMS_ISSET_ID);
  }

  /** Returns true if field endInputTimestampMs is set (has been assigned a value) and false otherwise */
  public boolean isSetEndInputTimestampMs() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDINPUTTIMESTAMPMS_ISSET_ID);
  }

  public void setEndInputTimestampMsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDINPUTTIMESTAMPMS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MANUAL_INPUT_USER_ID:
      if (value == null) {
        unsetManualInputUserId();
      } else {
        setManualInputUserId((Long)value);
      }
      break;

    case INPUT_ID:
      if (value == null) {
        unsetInputId();
      } else {
        setInputId((Long)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case SLED_CONTRACT_ID:
      if (value == null) {
        unsetSledContractId();
      } else {
        setSledContractId((Long)value);
      }
      break;

    case POSITION_DIRECTION:
      if (value == null) {
        unsetPositionDirection();
      } else {
        setPositionDirection((xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection)value);
      }
      break;

    case START_TRADE_TIMESTAMP_MS:
      if (value == null) {
        unsetStartTradeTimestampMs();
      } else {
        setStartTradeTimestampMs((Long)value);
      }
      break;

    case END_TRADE_TIMESTAMP_MS:
      if (value == null) {
        unsetEndTradeTimestampMs();
      } else {
        setEndTradeTimestampMs((Long)value);
      }
      break;

    case START_INPUT_TIMESTAMP_MS:
      if (value == null) {
        unsetStartInputTimestampMs();
      } else {
        setStartInputTimestampMs((Long)value);
      }
      break;

    case END_INPUT_TIMESTAMP_MS:
      if (value == null) {
        unsetEndInputTimestampMs();
      } else {
        setEndInputTimestampMs((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MANUAL_INPUT_USER_ID:
      return Long.valueOf(getManualInputUserId());

    case INPUT_ID:
      return Long.valueOf(getInputId());

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case SLED_CONTRACT_ID:
      return Long.valueOf(getSledContractId());

    case POSITION_DIRECTION:
      return getPositionDirection();

    case START_TRADE_TIMESTAMP_MS:
      return Long.valueOf(getStartTradeTimestampMs());

    case END_TRADE_TIMESTAMP_MS:
      return Long.valueOf(getEndTradeTimestampMs());

    case START_INPUT_TIMESTAMP_MS:
      return Long.valueOf(getStartInputTimestampMs());

    case END_INPUT_TIMESTAMP_MS:
      return Long.valueOf(getEndInputTimestampMs());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MANUAL_INPUT_USER_ID:
      return isSetManualInputUserId();
    case INPUT_ID:
      return isSetInputId();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case SLED_CONTRACT_ID:
      return isSetSledContractId();
    case POSITION_DIRECTION:
      return isSetPositionDirection();
    case START_TRADE_TIMESTAMP_MS:
      return isSetStartTradeTimestampMs();
    case END_TRADE_TIMESTAMP_MS:
      return isSetEndTradeTimestampMs();
    case START_INPUT_TIMESTAMP_MS:
      return isSetStartInputTimestampMs();
    case END_INPUT_TIMESTAMP_MS:
      return isSetEndInputTimestampMs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqPositionUnassignedOption)
      return this.equals((ReqPositionUnassignedOption)that);
    return false;
  }

  public boolean equals(ReqPositionUnassignedOption that) {
    if (that == null)
      return false;

    boolean this_present_manualInputUserId = true && this.isSetManualInputUserId();
    boolean that_present_manualInputUserId = true && that.isSetManualInputUserId();
    if (this_present_manualInputUserId || that_present_manualInputUserId) {
      if (!(this_present_manualInputUserId && that_present_manualInputUserId))
        return false;
      if (this.manualInputUserId != that.manualInputUserId)
        return false;
    }

    boolean this_present_inputId = true && this.isSetInputId();
    boolean that_present_inputId = true && that.isSetInputId();
    if (this_present_inputId || that_present_inputId) {
      if (!(this_present_inputId && that_present_inputId))
        return false;
      if (this.inputId != that.inputId)
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_sledContractId = true && this.isSetSledContractId();
    boolean that_present_sledContractId = true && that.isSetSledContractId();
    if (this_present_sledContractId || that_present_sledContractId) {
      if (!(this_present_sledContractId && that_present_sledContractId))
        return false;
      if (this.sledContractId != that.sledContractId)
        return false;
    }

    boolean this_present_positionDirection = true && this.isSetPositionDirection();
    boolean that_present_positionDirection = true && that.isSetPositionDirection();
    if (this_present_positionDirection || that_present_positionDirection) {
      if (!(this_present_positionDirection && that_present_positionDirection))
        return false;
      if (!this.positionDirection.equals(that.positionDirection))
        return false;
    }

    boolean this_present_startTradeTimestampMs = true && this.isSetStartTradeTimestampMs();
    boolean that_present_startTradeTimestampMs = true && that.isSetStartTradeTimestampMs();
    if (this_present_startTradeTimestampMs || that_present_startTradeTimestampMs) {
      if (!(this_present_startTradeTimestampMs && that_present_startTradeTimestampMs))
        return false;
      if (this.startTradeTimestampMs != that.startTradeTimestampMs)
        return false;
    }

    boolean this_present_endTradeTimestampMs = true && this.isSetEndTradeTimestampMs();
    boolean that_present_endTradeTimestampMs = true && that.isSetEndTradeTimestampMs();
    if (this_present_endTradeTimestampMs || that_present_endTradeTimestampMs) {
      if (!(this_present_endTradeTimestampMs && that_present_endTradeTimestampMs))
        return false;
      if (this.endTradeTimestampMs != that.endTradeTimestampMs)
        return false;
    }

    boolean this_present_startInputTimestampMs = true && this.isSetStartInputTimestampMs();
    boolean that_present_startInputTimestampMs = true && that.isSetStartInputTimestampMs();
    if (this_present_startInputTimestampMs || that_present_startInputTimestampMs) {
      if (!(this_present_startInputTimestampMs && that_present_startInputTimestampMs))
        return false;
      if (this.startInputTimestampMs != that.startInputTimestampMs)
        return false;
    }

    boolean this_present_endInputTimestampMs = true && this.isSetEndInputTimestampMs();
    boolean that_present_endInputTimestampMs = true && that.isSetEndInputTimestampMs();
    if (this_present_endInputTimestampMs || that_present_endInputTimestampMs) {
      if (!(this_present_endInputTimestampMs && that_present_endInputTimestampMs))
        return false;
      if (this.endInputTimestampMs != that.endInputTimestampMs)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqPositionUnassignedOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetManualInputUserId()).compareTo(other.isSetManualInputUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetManualInputUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.manualInputUserId, other.manualInputUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInputId()).compareTo(other.isSetInputId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInputId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputId, other.inputId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSledContractId()).compareTo(other.isSetSledContractId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSledContractId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sledContractId, other.sledContractId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPositionDirection()).compareTo(other.isSetPositionDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionDirection, other.positionDirection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTradeTimestampMs()).compareTo(other.isSetStartTradeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTradeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTradeTimestampMs, other.startTradeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTradeTimestampMs()).compareTo(other.isSetEndTradeTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTradeTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTradeTimestampMs, other.endTradeTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartInputTimestampMs()).compareTo(other.isSetStartInputTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartInputTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startInputTimestampMs, other.startInputTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndInputTimestampMs()).compareTo(other.isSetEndInputTimestampMs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndInputTimestampMs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endInputTimestampMs, other.endInputTimestampMs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqPositionUnassignedOption(");
    boolean first = true;

    if (isSetManualInputUserId()) {
      sb.append("manualInputUserId:");
      sb.append(this.manualInputUserId);
      first = false;
    }
    if (isSetInputId()) {
      if (!first) sb.append(", ");
      sb.append("inputId:");
      sb.append(this.inputId);
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetSledContractId()) {
      if (!first) sb.append(", ");
      sb.append("sledContractId:");
      sb.append(this.sledContractId);
      first = false;
    }
    if (isSetPositionDirection()) {
      if (!first) sb.append(", ");
      sb.append("positionDirection:");
      if (this.positionDirection == null) {
        sb.append("null");
      } else {
        sb.append(this.positionDirection);
      }
      first = false;
    }
    if (isSetStartTradeTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("startTradeTimestampMs:");
      sb.append(this.startTradeTimestampMs);
      first = false;
    }
    if (isSetEndTradeTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("endTradeTimestampMs:");
      sb.append(this.endTradeTimestampMs);
      first = false;
    }
    if (isSetStartInputTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("startInputTimestampMs:");
      sb.append(this.startInputTimestampMs);
      first = false;
    }
    if (isSetEndInputTimestampMs()) {
      if (!first) sb.append(", ");
      sb.append("endInputTimestampMs:");
      sb.append(this.endInputTimestampMs);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqPositionUnassignedOptionStandardSchemeFactory implements SchemeFactory {
    public ReqPositionUnassignedOptionStandardScheme getScheme() {
      return new ReqPositionUnassignedOptionStandardScheme();
    }
  }

  private static class ReqPositionUnassignedOptionStandardScheme extends StandardScheme<ReqPositionUnassignedOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqPositionUnassignedOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MANUAL_INPUT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.manualInputUserId = iprot.readI64();
              struct.setManualInputUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INPUT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inputId = iprot.readI64();
              struct.setInputIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SLED_CONTRACT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sledContractId = iprot.readI64();
              struct.setSledContractIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // POSITION_DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.positionDirection = xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.findByValue(iprot.readI32());
              struct.setPositionDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TRADE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTradeTimestampMs = iprot.readI64();
              struct.setStartTradeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TRADE_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTradeTimestampMs = iprot.readI64();
              struct.setEndTradeTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_INPUT_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startInputTimestampMs = iprot.readI64();
              struct.setStartInputTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_INPUT_TIMESTAMP_MS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endInputTimestampMs = iprot.readI64();
              struct.setEndInputTimestampMsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqPositionUnassignedOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetManualInputUserId()) {
        oprot.writeFieldBegin(MANUAL_INPUT_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.manualInputUserId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetInputId()) {
        oprot.writeFieldBegin(INPUT_ID_FIELD_DESC);
        oprot.writeI64(struct.inputId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSledContractId()) {
        oprot.writeFieldBegin(SLED_CONTRACT_ID_FIELD_DESC);
        oprot.writeI64(struct.sledContractId);
        oprot.writeFieldEnd();
      }
      if (struct.positionDirection != null) {
        if (struct.isSetPositionDirection()) {
          oprot.writeFieldBegin(POSITION_DIRECTION_FIELD_DESC);
          oprot.writeI32(struct.positionDirection.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStartTradeTimestampMs()) {
        oprot.writeFieldBegin(START_TRADE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.startTradeTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTradeTimestampMs()) {
        oprot.writeFieldBegin(END_TRADE_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.endTradeTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStartInputTimestampMs()) {
        oprot.writeFieldBegin(START_INPUT_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.startInputTimestampMs);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndInputTimestampMs()) {
        oprot.writeFieldBegin(END_INPUT_TIMESTAMP_MS_FIELD_DESC);
        oprot.writeI64(struct.endInputTimestampMs);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqPositionUnassignedOptionTupleSchemeFactory implements SchemeFactory {
    public ReqPositionUnassignedOptionTupleScheme getScheme() {
      return new ReqPositionUnassignedOptionTupleScheme();
    }
  }

  private static class ReqPositionUnassignedOptionTupleScheme extends TupleScheme<ReqPositionUnassignedOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqPositionUnassignedOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetManualInputUserId()) {
        optionals.set(0);
      }
      if (struct.isSetInputId()) {
        optionals.set(1);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(2);
      }
      if (struct.isSetSledContractId()) {
        optionals.set(3);
      }
      if (struct.isSetPositionDirection()) {
        optionals.set(4);
      }
      if (struct.isSetStartTradeTimestampMs()) {
        optionals.set(5);
      }
      if (struct.isSetEndTradeTimestampMs()) {
        optionals.set(6);
      }
      if (struct.isSetStartInputTimestampMs()) {
        optionals.set(7);
      }
      if (struct.isSetEndInputTimestampMs()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetManualInputUserId()) {
        oprot.writeI64(struct.manualInputUserId);
      }
      if (struct.isSetInputId()) {
        oprot.writeI64(struct.inputId);
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetSledContractId()) {
        oprot.writeI64(struct.sledContractId);
      }
      if (struct.isSetPositionDirection()) {
        oprot.writeI32(struct.positionDirection.getValue());
      }
      if (struct.isSetStartTradeTimestampMs()) {
        oprot.writeI64(struct.startTradeTimestampMs);
      }
      if (struct.isSetEndTradeTimestampMs()) {
        oprot.writeI64(struct.endTradeTimestampMs);
      }
      if (struct.isSetStartInputTimestampMs()) {
        oprot.writeI64(struct.startInputTimestampMs);
      }
      if (struct.isSetEndInputTimestampMs()) {
        oprot.writeI64(struct.endInputTimestampMs);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqPositionUnassignedOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.manualInputUserId = iprot.readI64();
        struct.setManualInputUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inputId = iprot.readI64();
        struct.setInputIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sledContractId = iprot.readI64();
        struct.setSledContractIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.positionDirection = xueqiao.trade.hosting.position.adjust.assign.thriftapi.PositionDirection.findByValue(iprot.readI32());
        struct.setPositionDirectionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTradeTimestampMs = iprot.readI64();
        struct.setStartTradeTimestampMsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTradeTimestampMs = iprot.readI64();
        struct.setEndTradeTimestampMsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startInputTimestampMs = iprot.readI64();
        struct.setStartInputTimestampMsIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endInputTimestampMs = iprot.readI64();
        struct.setEndInputTimestampMsIsSet(true);
      }
    }
  }

}

