#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class MailBoxUserMessageError:
  HOSTING_MESSAGE_EXIST = 1001
  HOSTING_MESSAGE_NOT_FOUND = 1002
  HOSTING_MESSAGE_MARK_READ_OPTION_NOT_SET = 1003

  _VALUES_TO_NAMES = {
    1001: "HOSTING_MESSAGE_EXIST",
    1002: "HOSTING_MESSAGE_NOT_FOUND",
    1003: "HOSTING_MESSAGE_MARK_READ_OPTION_NOT_SET",
  }

  _NAMES_TO_VALUES = {
    "HOSTING_MESSAGE_EXIST": 1001,
    "HOSTING_MESSAGE_NOT_FOUND": 1002,
    "HOSTING_MESSAGE_MARK_READ_OPTION_NOT_SET": 1003,
  }

class MType:
  """
  信息类型
  """
  TYPE_XUEQIAO_NOTICE = 0
  TYPE_SYSTEM_NOTICE = 1
  TYPE_EXCHANGE_NOTICE = 2
  TYPE_MARKETING_PROMOTION = 3

  _VALUES_TO_NAMES = {
    0: "TYPE_XUEQIAO_NOTICE",
    1: "TYPE_SYSTEM_NOTICE",
    2: "TYPE_EXCHANGE_NOTICE",
    3: "TYPE_MARKETING_PROMOTION",
  }

  _NAMES_TO_VALUES = {
    "TYPE_XUEQIAO_NOTICE": 0,
    "TYPE_SYSTEM_NOTICE": 1,
    "TYPE_EXCHANGE_NOTICE": 2,
    "TYPE_MARKETING_PROMOTION": 3,
  }

class MLevel:
  """
  信息级别
  """
  LEVEL_LOW = 0
  LEVEL_MEDIUM = 1
  LEVEL_HIGH = 2

  _VALUES_TO_NAMES = {
    0: "LEVEL_LOW",
    1: "LEVEL_MEDIUM",
    2: "LEVEL_HIGH",
  }

  _NAMES_TO_VALUES = {
    "LEVEL_LOW": 0,
    "LEVEL_MEDIUM": 1,
    "LEVEL_HIGH": 2,
  }

class MessageState:
  """
  信息状态
  """
  CREATE = 0
  READ = 1

  _VALUES_TO_NAMES = {
    0: "CREATE",
    1: "READ",
  }

  _NAMES_TO_VALUES = {
    "CREATE": 0,
    "READ": 1,
  }


class UserMessage:
  """
  Attributes:
   - messageId
   - companyId
   - userId
   - messageJobId
   - type
   - level
   - title
   - summary
   - contentFileName
   - state
   - createTimestamp
   - lastModifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'messageId', None, None, ), # 1
    (2, TType.I64, 'companyId', None, None, ), # 2
    (3, TType.I64, 'userId', None, None, ), # 3
    (4, TType.I64, 'messageJobId', None, None, ), # 4
    (5, TType.I32, 'type', None, None, ), # 5
    (6, TType.I32, 'level', None, None, ), # 6
    (7, TType.STRING, 'title', None, None, ), # 7
    (8, TType.STRING, 'summary', None, None, ), # 8
    (9, TType.STRING, 'contentFileName', None, None, ), # 9
    (10, TType.I32, 'state', None, None, ), # 10
    (11, TType.I64, 'createTimestamp', None, None, ), # 11
    (12, TType.I64, 'lastModifyTimestamp', None, None, ), # 12
  )

  def __init__(self, messageId=None, companyId=None, userId=None, messageJobId=None, type=None, level=None, title=None, summary=None, contentFileName=None, state=None, createTimestamp=None, lastModifyTimestamp=None,):
    self.messageId = messageId
    self.companyId = companyId
    self.userId = userId
    self.messageJobId = messageJobId
    self.type = type
    self.level = level
    self.title = title
    self.summary = summary
    self.contentFileName = contentFileName
    self.state = state
    self.createTimestamp = createTimestamp
    self.lastModifyTimestamp = lastModifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.messageId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.companyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.messageJobId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.summary = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.contentFileName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.lastModifyTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMessage')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.I64, 1)
      oprot.writeI64(self.messageId)
      oprot.writeFieldEnd()
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I64, 2)
      oprot.writeI64(self.companyId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 3)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.messageJobId is not None:
      oprot.writeFieldBegin('messageJobId', TType.I64, 4)
      oprot.writeI64(self.messageJobId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.level is not None:
      oprot.writeFieldBegin('level', TType.I32, 6)
      oprot.writeI32(self.level)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 7)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.summary is not None:
      oprot.writeFieldBegin('summary', TType.STRING, 8)
      oprot.writeString(self.summary)
      oprot.writeFieldEnd()
    if self.contentFileName is not None:
      oprot.writeFieldBegin('contentFileName', TType.STRING, 9)
      oprot.writeString(self.contentFileName)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 10)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I64, 11)
      oprot.writeI64(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastModifyTimestamp is not None:
      oprot.writeFieldBegin('lastModifyTimestamp', TType.I64, 12)
      oprot.writeI64(self.lastModifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqUserMessageOption:
  """
  Attributes:
   - userId
   - companyId
   - messageJobId
   - messageId
   - state
   - startTimestamp
   - endTimstamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'userId', None, None, ), # 1
    (2, TType.I64, 'companyId', None, None, ), # 2
    (3, TType.I64, 'messageJobId', None, None, ), # 3
    (4, TType.I64, 'messageId', None, None, ), # 4
    (5, TType.I32, 'state', None, None, ), # 5
    (6, TType.I64, 'startTimestamp', None, None, ), # 6
    (7, TType.I64, 'endTimstamp', None, None, ), # 7
  )

  def __init__(self, userId=None, companyId=None, messageJobId=None, messageId=None, state=None, startTimestamp=None, endTimstamp=None,):
    self.userId = userId
    self.companyId = companyId
    self.messageJobId = messageJobId
    self.messageId = messageId
    self.state = state
    self.startTimestamp = startTimestamp
    self.endTimstamp = endTimstamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.companyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.messageJobId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.messageId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.startTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.endTimstamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqUserMessageOption')
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 1)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I64, 2)
      oprot.writeI64(self.companyId)
      oprot.writeFieldEnd()
    if self.messageJobId is not None:
      oprot.writeFieldBegin('messageJobId', TType.I64, 3)
      oprot.writeI64(self.messageJobId)
      oprot.writeFieldEnd()
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.I64, 4)
      oprot.writeI64(self.messageId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 5)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.startTimestamp is not None:
      oprot.writeFieldBegin('startTimestamp', TType.I64, 6)
      oprot.writeI64(self.startTimestamp)
      oprot.writeFieldEnd()
    if self.endTimstamp is not None:
      oprot.writeFieldBegin('endTimstamp', TType.I64, 7)
      oprot.writeI64(self.endTimstamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MarkReadOption:
  """
  Attributes:
   - messageIds
   - messageJobId
   - userId
   - companyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'messageIds', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'messageJobId', None, None, ), # 2
    (3, TType.I64, 'userId', None, None, ), # 3
    (4, TType.I64, 'companyId', None, None, ), # 4
  )

  def __init__(self, messageIds=None, messageJobId=None, userId=None, companyId=None,):
    self.messageIds = messageIds
    self.messageJobId = messageJobId
    self.userId = userId
    self.companyId = companyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.messageIds = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.messageIds.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.messageJobId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.companyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarkReadOption')
    if self.messageIds is not None:
      oprot.writeFieldBegin('messageIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.messageIds))
      for iter6 in self.messageIds:
        oprot.writeI64(iter6)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.messageJobId is not None:
      oprot.writeFieldBegin('messageJobId', TType.I64, 2)
      oprot.writeI64(self.messageJobId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 3)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.companyId is not None:
      oprot.writeFieldBegin('companyId', TType.I64, 4)
      oprot.writeI64(self.companyId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserMessagePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(UserMessage, UserMessage.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = UserMessage()
            _elem12.read(iprot)
            self.page.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMessagePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter13 in self.page:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
