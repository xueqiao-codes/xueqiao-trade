#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from page.ttypes import *
from xueqiao.trade.hosting.ttypes import *
from xueqiao.trade.hosting.arbitrage.thriftapi.ttypes import *
from xueqiao.trade.hosting.arbitrage.thriftapi import TradeHostingArbitrage

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class TradeHostingArbitrageStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, methodName, routeKey)

  def createXQOrder(self, routeKey, timeout, order,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('createXQOrder', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.createXQOrder(platformArgs,order,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'createXQOrder', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'createXQOrder', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def cancelXQOrder(self, routeKey, timeout, orderId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('cancelXQOrder', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.cancelXQOrder(platformArgs,orderId,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'cancelXQOrder', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'cancelXQOrder', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def suspendXQOrder(self, routeKey, timeout, orderId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('suspendXQOrder', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.suspendXQOrder(platformArgs,orderId,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'suspendXQOrder', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'suspendXQOrder', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def resumeXQOrder(self, routeKey, timeout, orderId,resumeMode,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('resumeXQOrder', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.resumeXQOrder(platformArgs,orderId,resumeMode,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'resumeXQOrder', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'resumeXQOrder', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getEffectXQOrderIndexPage(self, routeKey, timeout, qryOption,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getEffectXQOrderIndexPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getEffectXQOrderIndexPage(platformArgs,qryOption,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getEffectXQOrderIndexPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getEffectXQOrderIndexPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getXQOrders(self, routeKey, timeout, orderIds,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getXQOrders', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getXQOrders(platformArgs,orderIds,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrders', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrders', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getXQTrades(self, routeKey, timeout, orderIds,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getXQTrades', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getXQTrades(platformArgs,orderIds,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQTrades', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQTrades', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getXQOrderWithTradeLists(self, routeKey, timeout, orderIds,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getXQOrderWithTradeLists', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getXQOrderWithTradeLists(platformArgs,orderIds,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrderWithTradeLists', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrderWithTradeLists', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getXQOrderExecDetail(self, routeKey, timeout, orderId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getXQOrderExecDetail', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getXQOrderExecDetail(platformArgs,orderId,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrderExecDetail', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQOrderExecDetail', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def clearAll(self, routeKey, timeout, ):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('clearAll', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.clearAll(platformArgs,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def filterXQTrades(self, routeKey, timeout, orderIds,tradeIds,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('filterXQTrades', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.filterXQTrades(platformArgs,orderIds,tradeIds,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'filterXQTrades', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'filterXQTrades', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getXQTradeRelatedItems(self, routeKey, timeout, orderId,tradeId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getXQTradeRelatedItems', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getXQTradeRelatedItems(platformArgs,orderId,tradeId,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQTradeRelatedItems', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getXQTradeRelatedItems', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getSystemXQComposeLimitOrderSettings(self, routeKey, timeout, ):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getSystemXQComposeLimitOrderSettings', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.getSystemXQComposeLimitOrderSettings(platformArgs,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getSystemXQComposeLimitOrderSettings', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'getSystemXQComposeLimitOrderSettings', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def setSystemXQComposeLimitOrderSettings(self, routeKey, timeout, settings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('setSystemXQComposeLimitOrderSettings', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingArbitrage.Client(protocol)
    try:
      transport.open()
      result = client.setSystemXQComposeLimitOrderSettings(platformArgs,settings,)
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'setSystemXQComposeLimitOrderSettings', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingArbitrage.TradeHostingArbitrage_SERVICE_KEY, 'setSystemXQComposeLimitOrderSettings', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

