#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes
import xueqiao.trade.hosting.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HostingXQTargetType:
  CONTRACT_TARGET = 1
  COMPOSE_TARGET = 2

  _VALUES_TO_NAMES = {
    1: "CONTRACT_TARGET",
    2: "COMPOSE_TARGET",
  }

  _NAMES_TO_VALUES = {
    "CONTRACT_TARGET": 1,
    "COMPOSE_TARGET": 2,
  }

class HostingXQTradeDirection:
  XQ_BUY = 0
  XQ_SELL = 1

  _VALUES_TO_NAMES = {
    0: "XQ_BUY",
    1: "XQ_SELL",
  }

  _NAMES_TO_VALUES = {
    "XQ_BUY": 0,
    "XQ_SELL": 1,
  }

class HostingXQOrderType:
  XQ_ORDER_CONTRACT_LIMIT = 1
  XQ_ORDER_CONTRACT_PARKED = 2
  XQ_ORDER_CONDITION = 20
  XQ_ORDER_COMPOSE_LIMIT = 30

  _VALUES_TO_NAMES = {
    1: "XQ_ORDER_CONTRACT_LIMIT",
    2: "XQ_ORDER_CONTRACT_PARKED",
    20: "XQ_ORDER_CONDITION",
    30: "XQ_ORDER_COMPOSE_LIMIT",
  }

  _NAMES_TO_VALUES = {
    "XQ_ORDER_CONTRACT_LIMIT": 1,
    "XQ_ORDER_CONTRACT_PARKED": 2,
    "XQ_ORDER_CONDITION": 20,
    "XQ_ORDER_COMPOSE_LIMIT": 30,
  }

class HostingXQEffectDateType:
  XQ_EFFECT_TODAY = 1
  XQ_EFFECT_PERIOD = 2
  XQ_EFFECT_FOREVER = 3

  _VALUES_TO_NAMES = {
    1: "XQ_EFFECT_TODAY",
    2: "XQ_EFFECT_PERIOD",
    3: "XQ_EFFECT_FOREVER",
  }

  _NAMES_TO_VALUES = {
    "XQ_EFFECT_TODAY": 1,
    "XQ_EFFECT_PERIOD": 2,
    "XQ_EFFECT_FOREVER": 3,
  }

class HostingXQOrderPriceType:
  ACTION_PRICE_LIMIT = 1
  ACTION_PRICE_LATEST = 2
  ACTION_PRICE_IN_LINE = 3
  ACTION_PRICE_OPPONENT = 4

  _VALUES_TO_NAMES = {
    1: "ACTION_PRICE_LIMIT",
    2: "ACTION_PRICE_LATEST",
    3: "ACTION_PRICE_IN_LINE",
    4: "ACTION_PRICE_OPPONENT",
  }

  _NAMES_TO_VALUES = {
    "ACTION_PRICE_LIMIT": 1,
    "ACTION_PRICE_LATEST": 2,
    "ACTION_PRICE_IN_LINE": 3,
    "ACTION_PRICE_OPPONENT": 4,
  }

class HostingXQConditionTriggerPriceType:
  XQ_ASK_PRICE = 1
  XQ_BID_PRICE = 2
  XQ_LASTEST_PRICE = 3

  _VALUES_TO_NAMES = {
    1: "XQ_ASK_PRICE",
    2: "XQ_BID_PRICE",
    3: "XQ_LASTEST_PRICE",
  }

  _NAMES_TO_VALUES = {
    "XQ_ASK_PRICE": 1,
    "XQ_BID_PRICE": 2,
    "XQ_LASTEST_PRICE": 3,
  }

class HostingXQConditionTriggerOperator:
  XQ_OP_LT = 1
  XQ_OP_LE = 2
  XQ_OP_EQ = 3
  XQ_OP_NE = 4
  XQ_OP_GT = 5
  XQ_OP_GE = 6

  _VALUES_TO_NAMES = {
    1: "XQ_OP_LT",
    2: "XQ_OP_LE",
    3: "XQ_OP_EQ",
    4: "XQ_OP_NE",
    5: "XQ_OP_GT",
    6: "XQ_OP_GE",
  }

  _NAMES_TO_VALUES = {
    "XQ_OP_LT": 1,
    "XQ_OP_LE": 2,
    "XQ_OP_EQ": 3,
    "XQ_OP_NE": 4,
    "XQ_OP_GT": 5,
    "XQ_OP_GE": 6,
  }

class HostingXQComposeLimitOrderExecType:
  LEG_BY_LEG = 1
  PARALLEL_LEG = 2

  _VALUES_TO_NAMES = {
    1: "LEG_BY_LEG",
    2: "PARALLEL_LEG",
  }

  _NAMES_TO_VALUES = {
    "LEG_BY_LEG": 1,
    "PARALLEL_LEG": 2,
  }

class HostingXQComposeLimitOrderLegByTriggerType:
  PRICE_BEST = 1
  PRICE_TRYING = 2

  _VALUES_TO_NAMES = {
    1: "PRICE_BEST",
    2: "PRICE_TRYING",
  }

  _NAMES_TO_VALUES = {
    "PRICE_BEST": 1,
    "PRICE_TRYING": 2,
  }

class HostingXQComposeLimitOrderFirstLegChooseMode:
  FIRST_LEG_CHOOSE_MODE_DEFAULT = 0
  FIRST_LEG_CHOOSE_MODE_APPOINT = 1
  FIRST_LEG_CHOOSE_MODE_OUTER_DISC = 2

  _VALUES_TO_NAMES = {
    0: "FIRST_LEG_CHOOSE_MODE_DEFAULT",
    1: "FIRST_LEG_CHOOSE_MODE_APPOINT",
    2: "FIRST_LEG_CHOOSE_MODE_OUTER_DISC",
  }

  _NAMES_TO_VALUES = {
    "FIRST_LEG_CHOOSE_MODE_DEFAULT": 0,
    "FIRST_LEG_CHOOSE_MODE_APPOINT": 1,
    "FIRST_LEG_CHOOSE_MODE_OUTER_DISC": 2,
  }

class HostingXQConditionOrderLabel:
  LABEL_NONE = 0
  LABEL_STOP_LOST_BUY = 1
  LABEL_STOP_LOST_SELL = 2
  LABEL_STOP_PROFIT_BUY = 3
  LABEL_STOP_PROFIT_SELL = 4
  LABEL_STOP_BUY = 5
  LABEL_STOP_SELL = 6

  _VALUES_TO_NAMES = {
    0: "LABEL_NONE",
    1: "LABEL_STOP_LOST_BUY",
    2: "LABEL_STOP_LOST_SELL",
    3: "LABEL_STOP_PROFIT_BUY",
    4: "LABEL_STOP_PROFIT_SELL",
    5: "LABEL_STOP_BUY",
    6: "LABEL_STOP_SELL",
  }

  _NAMES_TO_VALUES = {
    "LABEL_NONE": 0,
    "LABEL_STOP_LOST_BUY": 1,
    "LABEL_STOP_LOST_SELL": 2,
    "LABEL_STOP_PROFIT_BUY": 3,
    "LABEL_STOP_PROFIT_SELL": 4,
    "LABEL_STOP_BUY": 5,
    "LABEL_STOP_SELL": 6,
  }

class HostingXQSuspendReason:
  SUSPENDED_REASON_NONE = 0
  SUSPENDED_BY_PERSON = 1
  SUSPENDED_FUNCTIONAL = 2
  SUSPENDED_ERROR_OCCURS = 3

  _VALUES_TO_NAMES = {
    0: "SUSPENDED_REASON_NONE",
    1: "SUSPENDED_BY_PERSON",
    2: "SUSPENDED_FUNCTIONAL",
    3: "SUSPENDED_ERROR_OCCURS",
  }

  _NAMES_TO_VALUES = {
    "SUSPENDED_REASON_NONE": 0,
    "SUSPENDED_BY_PERSON": 1,
    "SUSPENDED_FUNCTIONAL": 2,
    "SUSPENDED_ERROR_OCCURS": 3,
  }

class HostingXQOrderStateValue:
  XQ_ORDER_CREATED = 1
  XQ_ORDER_CANCELLED = 2
  XQ_ORDER_CANCELLING = 3
  XQ_ORDER_SUSPENDED = 4
  XQ_ORDER_SUSPENDING = 5
  XQ_ORDER_RUNNING = 6
  XQ_ORDER_STARTING = 7
  XQ_ORDER_FINISHED = 8
  XQ_ORDER_FINISHING = 9

  _VALUES_TO_NAMES = {
    1: "XQ_ORDER_CREATED",
    2: "XQ_ORDER_CANCELLED",
    3: "XQ_ORDER_CANCELLING",
    4: "XQ_ORDER_SUSPENDED",
    5: "XQ_ORDER_SUSPENDING",
    6: "XQ_ORDER_RUNNING",
    7: "XQ_ORDER_STARTING",
    8: "XQ_ORDER_FINISHED",
    9: "XQ_ORDER_FINISHING",
  }

  _NAMES_TO_VALUES = {
    "XQ_ORDER_CREATED": 1,
    "XQ_ORDER_CANCELLED": 2,
    "XQ_ORDER_CANCELLING": 3,
    "XQ_ORDER_SUSPENDED": 4,
    "XQ_ORDER_SUSPENDING": 5,
    "XQ_ORDER_RUNNING": 6,
    "XQ_ORDER_STARTING": 7,
    "XQ_ORDER_FINISHED": 8,
    "XQ_ORDER_FINISHING": 9,
  }

class HostingXQOrderResumeMode:
  """
  订单恢复运行的模式
  """
  RESUME_MODE_NONE = 0
  RESUME_MODE_COMPOSE_CHASING_BY_PRICE = 1
  RESUME_MODE_COMPOSE_CHASING_WITHOUT_COST = 2

  _VALUES_TO_NAMES = {
    0: "RESUME_MODE_NONE",
    1: "RESUME_MODE_COMPOSE_CHASING_BY_PRICE",
    2: "RESUME_MODE_COMPOSE_CHASING_WITHOUT_COST",
  }

  _NAMES_TO_VALUES = {
    "RESUME_MODE_NONE": 0,
    "RESUME_MODE_COMPOSE_CHASING_BY_PRICE": 1,
    "RESUME_MODE_COMPOSE_CHASING_WITHOUT_COST": 2,
  }


class HostingXQTarget:
  """
  Attributes:
   - targetType
   - targetKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'targetType', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
  )

  def __init__(self, targetType=None, targetKey=None,):
    self.targetType = targetType
    self.targetKey = targetKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQTarget')
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 1)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQEffectDate:
  """
  Attributes:
   - type
   - startEffectTimestampS
   - endEffectTimestampS
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'startEffectTimestampS', None, None, ), # 2
    (3, TType.I64, 'endEffectTimestampS', None, None, ), # 3
  )

  def __init__(self, type=None, startEffectTimestampS=None, endEffectTimestampS=None,):
    self.type = type
    self.startEffectTimestampS = startEffectTimestampS
    self.endEffectTimestampS = endEffectTimestampS

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.startEffectTimestampS = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.endEffectTimestampS = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQEffectDate')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.startEffectTimestampS is not None:
      oprot.writeFieldBegin('startEffectTimestampS', TType.I64, 2)
      oprot.writeI64(self.startEffectTimestampS)
      oprot.writeFieldEnd()
    if self.endEffectTimestampS is not None:
      oprot.writeFieldBegin('endEffectTimestampS', TType.I64, 3)
      oprot.writeI64(self.endEffectTimestampS)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderPrice:
  """
  Attributes:
   - priceType
   - limitPrice
   - chasePriceTicks
   - chasePriceValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'priceType', None, None, ), # 1
    (2, TType.DOUBLE, 'limitPrice', None, None, ), # 2
    (3, TType.I32, 'chasePriceTicks', None, None, ), # 3
    (4, TType.DOUBLE, 'chasePriceValue', None, None, ), # 4
  )

  def __init__(self, priceType=None, limitPrice=None, chasePriceTicks=None, chasePriceValue=None,):
    self.priceType = priceType
    self.limitPrice = limitPrice
    self.chasePriceTicks = chasePriceTicks
    self.chasePriceValue = chasePriceValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.priceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.limitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.chasePriceTicks = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.chasePriceValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderPrice')
    if self.priceType is not None:
      oprot.writeFieldBegin('priceType', TType.I32, 1)
      oprot.writeI32(self.priceType)
      oprot.writeFieldEnd()
    if self.limitPrice is not None:
      oprot.writeFieldBegin('limitPrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.limitPrice)
      oprot.writeFieldEnd()
    if self.chasePriceTicks is not None:
      oprot.writeFieldBegin('chasePriceTicks', TType.I32, 3)
      oprot.writeI32(self.chasePriceTicks)
      oprot.writeFieldEnd()
    if self.chasePriceValue is not None:
      oprot.writeFieldBegin('chasePriceValue', TType.DOUBLE, 4)
      oprot.writeDouble(self.chasePriceValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQConditionTrigger:
  """
  Attributes:
   - triggerPriceType
   - triggerOperator
   - conditionPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'triggerPriceType', None, None, ), # 1
    (2, TType.I32, 'triggerOperator', None, None, ), # 2
    (3, TType.DOUBLE, 'conditionPrice', None, None, ), # 3
  )

  def __init__(self, triggerPriceType=None, triggerOperator=None, conditionPrice=None,):
    self.triggerPriceType = triggerPriceType
    self.triggerOperator = triggerOperator
    self.conditionPrice = conditionPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.triggerPriceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.triggerOperator = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.conditionPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQConditionTrigger')
    if self.triggerPriceType is not None:
      oprot.writeFieldBegin('triggerPriceType', TType.I32, 1)
      oprot.writeI32(self.triggerPriceType)
      oprot.writeFieldEnd()
    if self.triggerOperator is not None:
      oprot.writeFieldBegin('triggerOperator', TType.I32, 2)
      oprot.writeI32(self.triggerOperator)
      oprot.writeFieldEnd()
    if self.conditionPrice is not None:
      oprot.writeFieldBegin('conditionPrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.conditionPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQContractLimitOrderDetail:
  """
  Attributes:
   - direction
   - limitPrice
   - quantity
   - effectDate
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'direction', None, None, ), # 1
    (2, TType.DOUBLE, 'limitPrice', None, None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
    (4, TType.STRUCT, 'effectDate', (HostingXQEffectDate, HostingXQEffectDate.thrift_spec), None, ), # 4
  )

  def __init__(self, direction=None, limitPrice=None, quantity=None, effectDate=None,):
    self.direction = direction
    self.limitPrice = limitPrice
    self.quantity = quantity
    self.effectDate = effectDate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.limitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.effectDate = HostingXQEffectDate()
          self.effectDate.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQContractLimitOrderDetail')
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 1)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.limitPrice is not None:
      oprot.writeFieldBegin('limitPrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.limitPrice)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.effectDate is not None:
      oprot.writeFieldBegin('effectDate', TType.STRUCT, 4)
      self.effectDate.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeOrderLimitLegSendOrderExtraParam:
  """
  Attributes:
   - quantityRatio
   - impactCost
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'quantityRatio', None, None, ), # 1
    (2, TType.DOUBLE, 'impactCost', None, None, ), # 2
  )

  def __init__(self, quantityRatio=None, impactCost=None,):
    self.quantityRatio = quantityRatio
    self.impactCost = impactCost

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.quantityRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.impactCost = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeOrderLimitLegSendOrderExtraParam')
    if self.quantityRatio is not None:
      oprot.writeFieldBegin('quantityRatio', TType.DOUBLE, 1)
      oprot.writeDouble(self.quantityRatio)
      oprot.writeFieldEnd()
    if self.impactCost is not None:
      oprot.writeFieldBegin('impactCost', TType.DOUBLE, 2)
      oprot.writeDouble(self.impactCost)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderLegChaseParam:
  """
  Attributes:
   - ticks
   - times
   - protectPriceRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ticks', None, None, ), # 1
    (2, TType.I32, 'times', None, None, ), # 2
    (3, TType.DOUBLE, 'protectPriceRatio', None, None, ), # 3
  )

  def __init__(self, ticks=None, times=None, protectPriceRatio=None,):
    self.ticks = ticks
    self.times = times
    self.protectPriceRatio = protectPriceRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ticks = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.times = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.protectPriceRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderLegChaseParam')
    if self.ticks is not None:
      oprot.writeFieldBegin('ticks', TType.I32, 1)
      oprot.writeI32(self.ticks)
      oprot.writeFieldEnd()
    if self.times is not None:
      oprot.writeFieldBegin('times', TType.I32, 2)
      oprot.writeI32(self.times)
      oprot.writeFieldEnd()
    if self.protectPriceRatio is not None:
      oprot.writeFieldBegin('protectPriceRatio', TType.DOUBLE, 3)
      oprot.writeDouble(self.protectPriceRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderParallelParams:
  """
  Attributes:
   - legChaseParams
   - legSendOrderExtraParam
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'legChaseParams', (TType.I64,None,TType.STRUCT,(HostingXQComposeLimitOrderLegChaseParam, HostingXQComposeLimitOrderLegChaseParam.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'legSendOrderExtraParam', (TType.I64,None,TType.STRUCT,(HostingXQComposeOrderLimitLegSendOrderExtraParam, HostingXQComposeOrderLimitLegSendOrderExtraParam.thrift_spec)), None, ), # 2
  )

  def __init__(self, legChaseParams=None, legSendOrderExtraParam=None,):
    self.legChaseParams = legChaseParams
    self.legSendOrderExtraParam = legSendOrderExtraParam

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.legChaseParams = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI64();
            _val6 = HostingXQComposeLimitOrderLegChaseParam()
            _val6.read(iprot)
            self.legChaseParams[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.legSendOrderExtraParam = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI64();
            _val13 = HostingXQComposeOrderLimitLegSendOrderExtraParam()
            _val13.read(iprot)
            self.legSendOrderExtraParam[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderParallelParams')
    if self.legChaseParams is not None:
      oprot.writeFieldBegin('legChaseParams', TType.MAP, 1)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.legChaseParams))
      for kiter14,viter15 in self.legChaseParams.items():
        oprot.writeI64(kiter14)
        viter15.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.legSendOrderExtraParam is not None:
      oprot.writeFieldBegin('legSendOrderExtraParam', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.legSendOrderExtraParam))
      for kiter16,viter17 in self.legSendOrderExtraParam.items():
        oprot.writeI64(kiter16)
        viter17.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderLegByPriceTryingParam:
  """
  Attributes:
   - beyondInPriceTicks
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'beyondInPriceTicks', None, None, ), # 1
  )

  def __init__(self, beyondInPriceTicks=None,):
    self.beyondInPriceTicks = beyondInPriceTicks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.beyondInPriceTicks = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderLegByPriceTryingParam')
    if self.beyondInPriceTicks is not None:
      oprot.writeFieldBegin('beyondInPriceTicks', TType.I32, 1)
      oprot.writeI32(self.beyondInPriceTicks)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderLegByFirstLegExtraParam:
  """
  Attributes:
   - revokeDeviatePriceTicks
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'revokeDeviatePriceTicks', None, None, ), # 1
  )

  def __init__(self, revokeDeviatePriceTicks=None,):
    self.revokeDeviatePriceTicks = revokeDeviatePriceTicks

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.revokeDeviatePriceTicks = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderLegByFirstLegExtraParam')
    if self.revokeDeviatePriceTicks is not None:
      oprot.writeFieldBegin('revokeDeviatePriceTicks', TType.I32, 1)
      oprot.writeI32(self.revokeDeviatePriceTicks)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderFirstLegChooseParam:
  """
  Attributes:
   - mode
   - appointSledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'mode', None, None, ), # 1
    (2, TType.I64, 'appointSledContractId', None, None, ), # 2
  )

  def __init__(self, mode=None, appointSledContractId=None,):
    self.mode = mode
    self.appointSledContractId = appointSledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.mode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.appointSledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderFirstLegChooseParam')
    if self.mode is not None:
      oprot.writeFieldBegin('mode', TType.I32, 1)
      oprot.writeI32(self.mode)
      oprot.writeFieldEnd()
    if self.appointSledContractId is not None:
      oprot.writeFieldBegin('appointSledContractId', TType.I64, 2)
      oprot.writeI64(self.appointSledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderLegByParams:
  """
  Attributes:
   - legByTriggerType
   - firstLegTryingParams
   - legSendOrderExtraParam
   - legChaseParams
   - firstLegChooseParam
   - firstLegExtraParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'legByTriggerType', None, None, ), # 1
    (2, TType.MAP, 'firstLegTryingParams', (TType.I64,None,TType.STRUCT,(HostingXQComposeLimitOrderLegByPriceTryingParam, HostingXQComposeLimitOrderLegByPriceTryingParam.thrift_spec)), None, ), # 2
    (3, TType.MAP, 'legSendOrderExtraParam', (TType.I64,None,TType.STRUCT,(HostingXQComposeOrderLimitLegSendOrderExtraParam, HostingXQComposeOrderLimitLegSendOrderExtraParam.thrift_spec)), None, ), # 3
    (4, TType.MAP, 'legChaseParams', (TType.I64,None,TType.STRUCT,(HostingXQComposeLimitOrderLegChaseParam, HostingXQComposeLimitOrderLegChaseParam.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'firstLegChooseParam', (HostingXQComposeLimitOrderFirstLegChooseParam, HostingXQComposeLimitOrderFirstLegChooseParam.thrift_spec), None, ), # 5
    (6, TType.MAP, 'firstLegExtraParams', (TType.I64,None,TType.STRUCT,(HostingXQComposeLimitOrderLegByFirstLegExtraParam, HostingXQComposeLimitOrderLegByFirstLegExtraParam.thrift_spec)), None, ), # 6
  )

  def __init__(self, legByTriggerType=None, firstLegTryingParams=None, legSendOrderExtraParam=None, legChaseParams=None, firstLegChooseParam=None, firstLegExtraParams=None,):
    self.legByTriggerType = legByTriggerType
    self.firstLegTryingParams = firstLegTryingParams
    self.legSendOrderExtraParam = legSendOrderExtraParam
    self.legChaseParams = legChaseParams
    self.firstLegChooseParam = firstLegChooseParam
    self.firstLegExtraParams = firstLegExtraParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.legByTriggerType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.firstLegTryingParams = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin()
          for _i22 in xrange(_size18):
            _key23 = iprot.readI64();
            _val24 = HostingXQComposeLimitOrderLegByPriceTryingParam()
            _val24.read(iprot)
            self.firstLegTryingParams[_key23] = _val24
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.legSendOrderExtraParam = {}
          (_ktype26, _vtype27, _size25 ) = iprot.readMapBegin()
          for _i29 in xrange(_size25):
            _key30 = iprot.readI64();
            _val31 = HostingXQComposeOrderLimitLegSendOrderExtraParam()
            _val31.read(iprot)
            self.legSendOrderExtraParam[_key30] = _val31
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.legChaseParams = {}
          (_ktype33, _vtype34, _size32 ) = iprot.readMapBegin()
          for _i36 in xrange(_size32):
            _key37 = iprot.readI64();
            _val38 = HostingXQComposeLimitOrderLegChaseParam()
            _val38.read(iprot)
            self.legChaseParams[_key37] = _val38
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.firstLegChooseParam = HostingXQComposeLimitOrderFirstLegChooseParam()
          self.firstLegChooseParam.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.firstLegExtraParams = {}
          (_ktype40, _vtype41, _size39 ) = iprot.readMapBegin()
          for _i43 in xrange(_size39):
            _key44 = iprot.readI64();
            _val45 = HostingXQComposeLimitOrderLegByFirstLegExtraParam()
            _val45.read(iprot)
            self.firstLegExtraParams[_key44] = _val45
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderLegByParams')
    if self.legByTriggerType is not None:
      oprot.writeFieldBegin('legByTriggerType', TType.I32, 1)
      oprot.writeI32(self.legByTriggerType)
      oprot.writeFieldEnd()
    if self.firstLegTryingParams is not None:
      oprot.writeFieldBegin('firstLegTryingParams', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.firstLegTryingParams))
      for kiter46,viter47 in self.firstLegTryingParams.items():
        oprot.writeI64(kiter46)
        viter47.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.legSendOrderExtraParam is not None:
      oprot.writeFieldBegin('legSendOrderExtraParam', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.legSendOrderExtraParam))
      for kiter48,viter49 in self.legSendOrderExtraParam.items():
        oprot.writeI64(kiter48)
        viter49.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.legChaseParams is not None:
      oprot.writeFieldBegin('legChaseParams', TType.MAP, 4)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.legChaseParams))
      for kiter50,viter51 in self.legChaseParams.items():
        oprot.writeI64(kiter50)
        viter51.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.firstLegChooseParam is not None:
      oprot.writeFieldBegin('firstLegChooseParam', TType.STRUCT, 5)
      self.firstLegChooseParam.write(oprot)
      oprot.writeFieldEnd()
    if self.firstLegExtraParams is not None:
      oprot.writeFieldBegin('firstLegExtraParams', TType.MAP, 6)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.firstLegExtraParams))
      for kiter52,viter53 in self.firstLegExtraParams.items():
        oprot.writeI64(kiter52)
        viter53.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderExecParams:
  """
  Attributes:
   - execType
   - execEveryQty
   - execParallelParams
   - execLegByParams
   - earlySuspendedForMarketSeconds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'execType', None, None, ), # 1
    (2, TType.I32, 'execEveryQty', None, None, ), # 2
    (3, TType.STRUCT, 'execParallelParams', (HostingXQComposeLimitOrderParallelParams, HostingXQComposeLimitOrderParallelParams.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'execLegByParams', (HostingXQComposeLimitOrderLegByParams, HostingXQComposeLimitOrderLegByParams.thrift_spec), None, ), # 4
    (5, TType.I32, 'earlySuspendedForMarketSeconds', None, None, ), # 5
  )

  def __init__(self, execType=None, execEveryQty=None, execParallelParams=None, execLegByParams=None, earlySuspendedForMarketSeconds=None,):
    self.execType = execType
    self.execEveryQty = execEveryQty
    self.execParallelParams = execParallelParams
    self.execLegByParams = execLegByParams
    self.earlySuspendedForMarketSeconds = earlySuspendedForMarketSeconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.execType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.execEveryQty = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.execParallelParams = HostingXQComposeLimitOrderParallelParams()
          self.execParallelParams.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.execLegByParams = HostingXQComposeLimitOrderLegByParams()
          self.execLegByParams.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.earlySuspendedForMarketSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderExecParams')
    if self.execType is not None:
      oprot.writeFieldBegin('execType', TType.I32, 1)
      oprot.writeI32(self.execType)
      oprot.writeFieldEnd()
    if self.execEveryQty is not None:
      oprot.writeFieldBegin('execEveryQty', TType.I32, 2)
      oprot.writeI32(self.execEveryQty)
      oprot.writeFieldEnd()
    if self.execParallelParams is not None:
      oprot.writeFieldBegin('execParallelParams', TType.STRUCT, 3)
      self.execParallelParams.write(oprot)
      oprot.writeFieldEnd()
    if self.execLegByParams is not None:
      oprot.writeFieldBegin('execLegByParams', TType.STRUCT, 4)
      self.execLegByParams.write(oprot)
      oprot.writeFieldEnd()
    if self.earlySuspendedForMarketSeconds is not None:
      oprot.writeFieldBegin('earlySuspendedForMarketSeconds', TType.I32, 5)
      oprot.writeI32(self.earlySuspendedForMarketSeconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderDetail:
  """
  Attributes:
   - direction
   - limitPrice
   - quantity
   - effectDate
   - execParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'direction', None, None, ), # 1
    (2, TType.DOUBLE, 'limitPrice', None, None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
    (4, TType.STRUCT, 'effectDate', (HostingXQEffectDate, HostingXQEffectDate.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'execParams', (HostingXQComposeLimitOrderExecParams, HostingXQComposeLimitOrderExecParams.thrift_spec), None, ), # 5
  )

  def __init__(self, direction=None, limitPrice=None, quantity=None, effectDate=None, execParams=None,):
    self.direction = direction
    self.limitPrice = limitPrice
    self.quantity = quantity
    self.effectDate = effectDate
    self.execParams = execParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.limitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.effectDate = HostingXQEffectDate()
          self.effectDate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.execParams = HostingXQComposeLimitOrderExecParams()
          self.execParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderDetail')
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 1)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.limitPrice is not None:
      oprot.writeFieldBegin('limitPrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.limitPrice)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.effectDate is not None:
      oprot.writeFieldBegin('effectDate', TType.STRUCT, 4)
      self.effectDate.write(oprot)
      oprot.writeFieldEnd()
    if self.execParams is not None:
      oprot.writeFieldBegin('execParams', TType.STRUCT, 5)
      self.execParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQConditionActionExtra:
  """
  Attributes:
   - composeLimitExecParams
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'composeLimitExecParams', (HostingXQComposeLimitOrderExecParams, HostingXQComposeLimitOrderExecParams.thrift_spec), None, ), # 1
  )

  def __init__(self, composeLimitExecParams=None,):
    self.composeLimitExecParams = composeLimitExecParams

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.composeLimitExecParams = HostingXQComposeLimitOrderExecParams()
          self.composeLimitExecParams.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQConditionActionExtra')
    if self.composeLimitExecParams is not None:
      oprot.writeFieldBegin('composeLimitExecParams', TType.STRUCT, 1)
      self.composeLimitExecParams.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQConditionAction:
  """
  Attributes:
   - orderType
   - tradeDirection
   - price
   - quantity
   - extra
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orderType', None, None, ), # 1
    (2, TType.I32, 'tradeDirection', None, None, ), # 2
    (3, TType.STRUCT, 'price', (HostingXQOrderPrice, HostingXQOrderPrice.thrift_spec), None, ), # 3
    (4, TType.I32, 'quantity', None, None, ), # 4
    (5, TType.STRUCT, 'extra', (HostingXQConditionActionExtra, HostingXQConditionActionExtra.thrift_spec), None, ), # 5
  )

  def __init__(self, orderType=None, tradeDirection=None, price=None, quantity=None, extra=None,):
    self.orderType = orderType
    self.tradeDirection = tradeDirection
    self.price = price
    self.quantity = quantity
    self.extra = extra

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.price = HostingXQOrderPrice()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.extra = HostingXQConditionActionExtra()
          self.extra.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQConditionAction')
    if self.orderType is not None:
      oprot.writeFieldBegin('orderType', TType.I32, 1)
      oprot.writeI32(self.orderType)
      oprot.writeFieldEnd()
    if self.tradeDirection is not None:
      oprot.writeFieldBegin('tradeDirection', TType.I32, 2)
      oprot.writeI32(self.tradeDirection)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 3)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 4)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.extra is not None:
      oprot.writeFieldBegin('extra', TType.STRUCT, 5)
      self.extra.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQCondition:
  """
  Attributes:
   - conditionTrigger
   - conditionAction
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'conditionTrigger', (HostingXQConditionTrigger, HostingXQConditionTrigger.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'conditionAction', (HostingXQConditionAction, HostingXQConditionAction.thrift_spec), None, ), # 2
  )

  def __init__(self, conditionTrigger=None, conditionAction=None,):
    self.conditionTrigger = conditionTrigger
    self.conditionAction = conditionAction

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.conditionTrigger = HostingXQConditionTrigger()
          self.conditionTrigger.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.conditionAction = HostingXQConditionAction()
          self.conditionAction.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQCondition')
    if self.conditionTrigger is not None:
      oprot.writeFieldBegin('conditionTrigger', TType.STRUCT, 1)
      self.conditionTrigger.write(oprot)
      oprot.writeFieldEnd()
    if self.conditionAction is not None:
      oprot.writeFieldBegin('conditionAction', TType.STRUCT, 2)
      self.conditionAction.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQConditionOrderDetail:
  """
  Attributes:
   - effectDate
   - conditions
   - label
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'effectDate', (HostingXQEffectDate, HostingXQEffectDate.thrift_spec), None, ), # 1
    (2, TType.LIST, 'conditions', (TType.STRUCT,(HostingXQCondition, HostingXQCondition.thrift_spec)), None, ), # 2
    (3, TType.I32, 'label', None, None, ), # 3
  )

  def __init__(self, effectDate=None, conditions=None, label=None,):
    self.effectDate = effectDate
    self.conditions = conditions
    self.label = label

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.effectDate = HostingXQEffectDate()
          self.effectDate.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.conditions = []
          (_etype57, _size54) = iprot.readListBegin()
          for _i58 in xrange(_size54):
            _elem59 = HostingXQCondition()
            _elem59.read(iprot)
            self.conditions.append(_elem59)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.label = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQConditionOrderDetail')
    if self.effectDate is not None:
      oprot.writeFieldBegin('effectDate', TType.STRUCT, 1)
      self.effectDate.write(oprot)
      oprot.writeFieldEnd()
    if self.conditions is not None:
      oprot.writeFieldBegin('conditions', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.conditions))
      for iter60 in self.conditions:
        iter60.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.I32, 3)
      oprot.writeI32(self.label)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQContractParkedOrderDetail:
  """
  Attributes:
   - direction
   - price
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'direction', None, None, ), # 1
    (2, TType.STRUCT, 'price', (HostingXQOrderPrice, HostingXQOrderPrice.thrift_spec), None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
  )

  def __init__(self, direction=None, price=None, quantity=None,):
    self.direction = direction
    self.price = price
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.price = HostingXQOrderPrice()
          self.price.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQContractParkedOrderDetail')
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 1)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.STRUCT, 2)
      self.price.write(oprot)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderDetail:
  """
  Attributes:
   - contractLimitOrderDetail
   - composeLimitOrderDetail
   - conditionOrderDetail
   - contractParkedOrderDetail
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'contractLimitOrderDetail', (HostingXQContractLimitOrderDetail, HostingXQContractLimitOrderDetail.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'composeLimitOrderDetail', (HostingXQComposeLimitOrderDetail, HostingXQComposeLimitOrderDetail.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'conditionOrderDetail', (HostingXQConditionOrderDetail, HostingXQConditionOrderDetail.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'contractParkedOrderDetail', (HostingXQContractParkedOrderDetail, HostingXQContractParkedOrderDetail.thrift_spec), None, ), # 4
  )

  def __init__(self, contractLimitOrderDetail=None, composeLimitOrderDetail=None, conditionOrderDetail=None, contractParkedOrderDetail=None,):
    self.contractLimitOrderDetail = contractLimitOrderDetail
    self.composeLimitOrderDetail = composeLimitOrderDetail
    self.conditionOrderDetail = conditionOrderDetail
    self.contractParkedOrderDetail = contractParkedOrderDetail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.contractLimitOrderDetail = HostingXQContractLimitOrderDetail()
          self.contractLimitOrderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.composeLimitOrderDetail = HostingXQComposeLimitOrderDetail()
          self.composeLimitOrderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.conditionOrderDetail = HostingXQConditionOrderDetail()
          self.conditionOrderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.contractParkedOrderDetail = HostingXQContractParkedOrderDetail()
          self.contractParkedOrderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderDetail')
    if self.contractLimitOrderDetail is not None:
      oprot.writeFieldBegin('contractLimitOrderDetail', TType.STRUCT, 1)
      self.contractLimitOrderDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.composeLimitOrderDetail is not None:
      oprot.writeFieldBegin('composeLimitOrderDetail', TType.STRUCT, 2)
      self.composeLimitOrderDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.conditionOrderDetail is not None:
      oprot.writeFieldBegin('conditionOrderDetail', TType.STRUCT, 3)
      self.conditionOrderDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.contractParkedOrderDetail is not None:
      oprot.writeFieldBegin('contractParkedOrderDetail', TType.STRUCT, 4)
      self.contractParkedOrderDetail.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderState:
  """
  Attributes:
   - stateValue
   - stateTimestampMs
   - suspendReason
   - suspendedErrorCode
   - cancelledErrorCode
   - stateMsg
   - execUsefulMsg
   - effectIndexCleaned
   - resumeMode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'stateValue', None, None, ), # 1
    (2, TType.I64, 'stateTimestampMs', None, None, ), # 2
    (3, TType.I32, 'suspendReason', None, None, ), # 3
    None, # 4
    (5, TType.I32, 'suspendedErrorCode', None, None, ), # 5
    (6, TType.I32, 'cancelledErrorCode', None, None, ), # 6
    (7, TType.STRING, 'stateMsg', None, None, ), # 7
    (8, TType.STRING, 'execUsefulMsg', None, None, ), # 8
    (9, TType.BOOL, 'effectIndexCleaned', None, None, ), # 9
    (10, TType.I32, 'resumeMode', None, None, ), # 10
  )

  def __init__(self, stateValue=None, stateTimestampMs=None, suspendReason=None, suspendedErrorCode=None, cancelledErrorCode=None, stateMsg=None, execUsefulMsg=None, effectIndexCleaned=None, resumeMode=None,):
    self.stateValue = stateValue
    self.stateTimestampMs = stateTimestampMs
    self.suspendReason = suspendReason
    self.suspendedErrorCode = suspendedErrorCode
    self.cancelledErrorCode = cancelledErrorCode
    self.stateMsg = stateMsg
    self.execUsefulMsg = execUsefulMsg
    self.effectIndexCleaned = effectIndexCleaned
    self.resumeMode = resumeMode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.stateValue = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.stateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.suspendReason = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.suspendedErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.cancelledErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.stateMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.execUsefulMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.effectIndexCleaned = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.resumeMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderState')
    if self.stateValue is not None:
      oprot.writeFieldBegin('stateValue', TType.I32, 1)
      oprot.writeI32(self.stateValue)
      oprot.writeFieldEnd()
    if self.stateTimestampMs is not None:
      oprot.writeFieldBegin('stateTimestampMs', TType.I64, 2)
      oprot.writeI64(self.stateTimestampMs)
      oprot.writeFieldEnd()
    if self.suspendReason is not None:
      oprot.writeFieldBegin('suspendReason', TType.I32, 3)
      oprot.writeI32(self.suspendReason)
      oprot.writeFieldEnd()
    if self.suspendedErrorCode is not None:
      oprot.writeFieldBegin('suspendedErrorCode', TType.I32, 5)
      oprot.writeI32(self.suspendedErrorCode)
      oprot.writeFieldEnd()
    if self.cancelledErrorCode is not None:
      oprot.writeFieldBegin('cancelledErrorCode', TType.I32, 6)
      oprot.writeI32(self.cancelledErrorCode)
      oprot.writeFieldEnd()
    if self.stateMsg is not None:
      oprot.writeFieldBegin('stateMsg', TType.STRING, 7)
      oprot.writeString(self.stateMsg)
      oprot.writeFieldEnd()
    if self.execUsefulMsg is not None:
      oprot.writeFieldBegin('execUsefulMsg', TType.STRING, 8)
      oprot.writeString(self.execUsefulMsg)
      oprot.writeFieldEnd()
    if self.effectIndexCleaned is not None:
      oprot.writeFieldBegin('effectIndexCleaned', TType.BOOL, 9)
      oprot.writeBool(self.effectIndexCleaned)
      oprot.writeFieldEnd()
    if self.resumeMode is not None:
      oprot.writeFieldBegin('resumeMode', TType.I32, 10)
      oprot.writeI32(self.resumeMode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQSubTradeSummary:
  """
  Attributes:
   - subTarget
   - subTradeVolume
   - subTradeAveragePrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'subTarget', (HostingXQTarget, HostingXQTarget.thrift_spec), None, ), # 1
    (2, TType.I32, 'subTradeVolume', None, None, ), # 2
    (3, TType.DOUBLE, 'subTradeAveragePrice', None, None, ), # 3
  )

  def __init__(self, subTarget=None, subTradeVolume=None, subTradeAveragePrice=None,):
    self.subTarget = subTarget
    self.subTradeVolume = subTradeVolume
    self.subTradeAveragePrice = subTradeAveragePrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.subTarget = HostingXQTarget()
          self.subTarget.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subTradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.subTradeAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQSubTradeSummary')
    if self.subTarget is not None:
      oprot.writeFieldBegin('subTarget', TType.STRUCT, 1)
      self.subTarget.write(oprot)
      oprot.writeFieldEnd()
    if self.subTradeVolume is not None:
      oprot.writeFieldBegin('subTradeVolume', TType.I32, 2)
      oprot.writeI32(self.subTradeVolume)
      oprot.writeFieldEnd()
    if self.subTradeAveragePrice is not None:
      oprot.writeFieldBegin('subTradeAveragePrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.subTradeAveragePrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQTradeSummary:
  """
  Attributes:
   - totalVolume
   - averagePrice
   - subTradeSummaries
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalVolume', None, None, ), # 1
    (2, TType.DOUBLE, 'averagePrice', None, None, ), # 2
    (3, TType.MAP, 'subTradeSummaries', (TType.STRING,None,TType.STRUCT,(HostingXQSubTradeSummary, HostingXQSubTradeSummary.thrift_spec)), None, ), # 3
  )

  def __init__(self, totalVolume=None, averagePrice=None, subTradeSummaries=None,):
    self.totalVolume = totalVolume
    self.averagePrice = averagePrice
    self.subTradeSummaries = subTradeSummaries

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.averagePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.subTradeSummaries = {}
          (_ktype62, _vtype63, _size61 ) = iprot.readMapBegin()
          for _i65 in xrange(_size61):
            _key66 = iprot.readString();
            _val67 = HostingXQSubTradeSummary()
            _val67.read(iprot)
            self.subTradeSummaries[_key66] = _val67
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQTradeSummary')
    if self.totalVolume is not None:
      oprot.writeFieldBegin('totalVolume', TType.I32, 1)
      oprot.writeI32(self.totalVolume)
      oprot.writeFieldEnd()
    if self.averagePrice is not None:
      oprot.writeFieldBegin('averagePrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.averagePrice)
      oprot.writeFieldEnd()
    if self.subTradeSummaries is not None:
      oprot.writeFieldBegin('subTradeSummaries', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.subTradeSummaries))
      for kiter68,viter69 in self.subTradeSummaries.items():
        oprot.writeString(kiter68)
        viter69.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrder:
  """
  Attributes:
   - orderId
   - subUserId
   - subAccountId
   - orderType
   - orderTarget
   - orderDetail
   - orderState
   - orderTradeSummary
   - version
   - createTimestampMs
   - lastmodifyTimestampMs
   - sourceOrderId
   - actionOrderId
   - gfdOrderEndTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'orderType', None, None, ), # 4
    (5, TType.STRUCT, 'orderTarget', (HostingXQTarget, HostingXQTarget.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'orderDetail', (HostingXQOrderDetail, HostingXQOrderDetail.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'orderState', (HostingXQOrderState, HostingXQOrderState.thrift_spec), None, ), # 7
    (8, TType.STRUCT, 'orderTradeSummary', (HostingXQTradeSummary, HostingXQTradeSummary.thrift_spec), None, ), # 8
    (9, TType.I32, 'version', None, None, ), # 9
    (10, TType.I64, 'createTimestampMs', None, None, ), # 10
    (11, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 11
    (12, TType.STRING, 'sourceOrderId', None, None, ), # 12
    (13, TType.STRING, 'actionOrderId', None, None, ), # 13
    (14, TType.I64, 'gfdOrderEndTimestampMs', None, None, ), # 14
  )

  def __init__(self, orderId=None, subUserId=None, subAccountId=None, orderType=None, orderTarget=None, orderDetail=None, orderState=None, orderTradeSummary=None, version=None, createTimestampMs=None, lastmodifyTimestampMs=None, sourceOrderId=None, actionOrderId=None, gfdOrderEndTimestampMs=None,):
    self.orderId = orderId
    self.subUserId = subUserId
    self.subAccountId = subAccountId
    self.orderType = orderType
    self.orderTarget = orderTarget
    self.orderDetail = orderDetail
    self.orderState = orderState
    self.orderTradeSummary = orderTradeSummary
    self.version = version
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.sourceOrderId = sourceOrderId
    self.actionOrderId = actionOrderId
    self.gfdOrderEndTimestampMs = gfdOrderEndTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.orderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.orderTarget = HostingXQTarget()
          self.orderTarget.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.orderDetail = HostingXQOrderDetail()
          self.orderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.orderState = HostingXQOrderState()
          self.orderState.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.orderTradeSummary = HostingXQTradeSummary()
          self.orderTradeSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.sourceOrderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.actionOrderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.gfdOrderEndTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrder')
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 1)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.orderType is not None:
      oprot.writeFieldBegin('orderType', TType.I32, 4)
      oprot.writeI32(self.orderType)
      oprot.writeFieldEnd()
    if self.orderTarget is not None:
      oprot.writeFieldBegin('orderTarget', TType.STRUCT, 5)
      self.orderTarget.write(oprot)
      oprot.writeFieldEnd()
    if self.orderDetail is not None:
      oprot.writeFieldBegin('orderDetail', TType.STRUCT, 6)
      self.orderDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.orderState is not None:
      oprot.writeFieldBegin('orderState', TType.STRUCT, 7)
      self.orderState.write(oprot)
      oprot.writeFieldEnd()
    if self.orderTradeSummary is not None:
      oprot.writeFieldBegin('orderTradeSummary', TType.STRUCT, 8)
      self.orderTradeSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 9)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 10)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 11)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.sourceOrderId is not None:
      oprot.writeFieldBegin('sourceOrderId', TType.STRING, 12)
      oprot.writeString(self.sourceOrderId)
      oprot.writeFieldEnd()
    if self.actionOrderId is not None:
      oprot.writeFieldBegin('actionOrderId', TType.STRING, 13)
      oprot.writeString(self.actionOrderId)
      oprot.writeFieldEnd()
    if self.gfdOrderEndTimestampMs is not None:
      oprot.writeFieldBegin('gfdOrderEndTimestampMs', TType.I64, 14)
      oprot.writeI64(self.gfdOrderEndTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQTrade:
  """
  Attributes:
   - orderId
   - tradeId
   - tradeTarget
   - tradeVolume
   - tradePrice
   - subUserId
   - subAccountId
   - tradeDiretion
   - sourceOrderTarget
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderId', None, None, ), # 1
    (2, TType.I64, 'tradeId', None, None, ), # 2
    (3, TType.STRUCT, 'tradeTarget', (HostingXQTarget, HostingXQTarget.thrift_spec), None, ), # 3
    (4, TType.I32, 'tradeVolume', None, None, ), # 4
    (5, TType.DOUBLE, 'tradePrice', None, None, ), # 5
    (6, TType.I32, 'subUserId', None, None, ), # 6
    (7, TType.I64, 'subAccountId', None, None, ), # 7
    None, # 8
    (9, TType.I32, 'tradeDiretion', None, None, ), # 9
    (10, TType.STRUCT, 'sourceOrderTarget', (HostingXQTarget, HostingXQTarget.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.I64, 'createTimestampMs', None, None, ), # 12
    (13, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 13
  )

  def __init__(self, orderId=None, tradeId=None, tradeTarget=None, tradeVolume=None, tradePrice=None, subUserId=None, subAccountId=None, tradeDiretion=None, sourceOrderTarget=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.orderId = orderId
    self.tradeId = tradeId
    self.tradeTarget = tradeTarget
    self.tradeVolume = tradeVolume
    self.tradePrice = tradePrice
    self.subUserId = subUserId
    self.subAccountId = subAccountId
    self.tradeDiretion = tradeDiretion
    self.sourceOrderTarget = sourceOrderTarget
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.tradeTarget = HostingXQTarget()
          self.tradeTarget.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.tradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.tradeDiretion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.sourceOrderTarget = HostingXQTarget()
          self.sourceOrderTarget.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQTrade')
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 1)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.tradeId is not None:
      oprot.writeFieldBegin('tradeId', TType.I64, 2)
      oprot.writeI64(self.tradeId)
      oprot.writeFieldEnd()
    if self.tradeTarget is not None:
      oprot.writeFieldBegin('tradeTarget', TType.STRUCT, 3)
      self.tradeTarget.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeVolume is not None:
      oprot.writeFieldBegin('tradeVolume', TType.I32, 4)
      oprot.writeI32(self.tradeVolume)
      oprot.writeFieldEnd()
    if self.tradePrice is not None:
      oprot.writeFieldBegin('tradePrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.tradePrice)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 6)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 7)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.tradeDiretion is not None:
      oprot.writeFieldBegin('tradeDiretion', TType.I32, 9)
      oprot.writeI32(self.tradeDiretion)
      oprot.writeFieldEnd()
    if self.sourceOrderTarget is not None:
      oprot.writeFieldBegin('sourceOrderTarget', TType.STRUCT, 10)
      self.sourceOrderTarget.write(oprot)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 12)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 13)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingEffectXQOrderIndexItem:
  """
  Attributes:
   - orderId
   - subUserId
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, orderId=None, subUserId=None, subAccountId=None,):
    self.orderId = orderId
    self.subUserId = subUserId
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingEffectXQOrderIndexItem')
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 1)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryEffectXQOrderIndexOption:
  """
  Attributes:
   - subUserIds
   - subAccountIds
   - orderIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'subUserIds', (TType.I32,None), None, ), # 1
    (2, TType.SET, 'subAccountIds', (TType.I64,None), None, ), # 2
    (3, TType.SET, 'orderIds', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, subUserIds=None, subAccountIds=None, orderIds=None,):
    self.subUserIds = subUserIds
    self.subAccountIds = subAccountIds
    self.orderIds = orderIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.subUserIds = set()
          (_etype73, _size70) = iprot.readSetBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readI32();
            self.subUserIds.add(_elem75)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.subAccountIds = set()
          (_etype79, _size76) = iprot.readSetBegin()
          for _i80 in xrange(_size76):
            _elem81 = iprot.readI64();
            self.subAccountIds.add(_elem81)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.orderIds = set()
          (_etype85, _size82) = iprot.readSetBegin()
          for _i86 in xrange(_size82):
            _elem87 = iprot.readString();
            self.orderIds.add(_elem87)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryEffectXQOrderIndexOption')
    if self.subUserIds is not None:
      oprot.writeFieldBegin('subUserIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I32, len(self.subUserIds))
      for iter88 in self.subUserIds:
        oprot.writeI32(iter88)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.subAccountIds is not None:
      oprot.writeFieldBegin('subAccountIds', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.subAccountIds))
      for iter89 in self.subAccountIds:
        oprot.writeI64(iter89)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.SET, 3)
      oprot.writeSetBegin(TType.STRING, len(self.orderIds))
      for iter90 in self.orderIds:
        oprot.writeString(iter90)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryEffectXQOrderIndexPage:
  """
  Attributes:
   - totalNum
   - resultIndexItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'resultIndexItems', (TType.STRUCT,(HostingEffectXQOrderIndexItem, HostingEffectXQOrderIndexItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, resultIndexItems=None,):
    self.totalNum = totalNum
    self.resultIndexItems = resultIndexItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultIndexItems = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = HostingEffectXQOrderIndexItem()
            _elem96.read(iprot)
            self.resultIndexItems.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryEffectXQOrderIndexPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.resultIndexItems is not None:
      oprot.writeFieldBegin('resultIndexItems', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultIndexItems))
      for iter97 in self.resultIndexItems:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQTradeRelatedItem:
  """
  Attributes:
   - orderId
   - tradeId
   - execOrderId
   - execTradeId
   - execTradeLegId
   - execTradeLegDirection
   - execTradeLegVolume
   - execTradeLegPrice
   - relatedTradeVolume
   - sledContractId
   - createTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderId', None, None, ), # 1
    (2, TType.I64, 'tradeId', None, None, ), # 2
    (3, TType.I64, 'execOrderId', None, None, ), # 3
    (4, TType.I64, 'execTradeId', None, None, ), # 4
    (5, TType.I64, 'execTradeLegId', None, None, ), # 5
    (6, TType.I32, 'execTradeLegDirection', None, None, ), # 6
    (7, TType.I32, 'execTradeLegVolume', None, None, ), # 7
    (8, TType.DOUBLE, 'execTradeLegPrice', None, None, ), # 8
    (9, TType.I32, 'relatedTradeVolume', None, None, ), # 9
    (10, TType.I64, 'sledContractId', None, None, ), # 10
    (11, TType.I64, 'createTimestampMs', None, None, ), # 11
  )

  def __init__(self, orderId=None, tradeId=None, execOrderId=None, execTradeId=None, execTradeLegId=None, execTradeLegDirection=None, execTradeLegVolume=None, execTradeLegPrice=None, relatedTradeVolume=None, sledContractId=None, createTimestampMs=None,):
    self.orderId = orderId
    self.tradeId = tradeId
    self.execOrderId = execOrderId
    self.execTradeId = execTradeId
    self.execTradeLegId = execTradeLegId
    self.execTradeLegDirection = execTradeLegDirection
    self.execTradeLegVolume = execTradeLegVolume
    self.execTradeLegPrice = execTradeLegPrice
    self.relatedTradeVolume = relatedTradeVolume
    self.sledContractId = sledContractId
    self.createTimestampMs = createTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.execOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.execTradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.execTradeLegId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.execTradeLegDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.execTradeLegVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.execTradeLegPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.relatedTradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQTradeRelatedItem')
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 1)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.tradeId is not None:
      oprot.writeFieldBegin('tradeId', TType.I64, 2)
      oprot.writeI64(self.tradeId)
      oprot.writeFieldEnd()
    if self.execOrderId is not None:
      oprot.writeFieldBegin('execOrderId', TType.I64, 3)
      oprot.writeI64(self.execOrderId)
      oprot.writeFieldEnd()
    if self.execTradeId is not None:
      oprot.writeFieldBegin('execTradeId', TType.I64, 4)
      oprot.writeI64(self.execTradeId)
      oprot.writeFieldEnd()
    if self.execTradeLegId is not None:
      oprot.writeFieldBegin('execTradeLegId', TType.I64, 5)
      oprot.writeI64(self.execTradeLegId)
      oprot.writeFieldEnd()
    if self.execTradeLegDirection is not None:
      oprot.writeFieldBegin('execTradeLegDirection', TType.I32, 6)
      oprot.writeI32(self.execTradeLegDirection)
      oprot.writeFieldEnd()
    if self.execTradeLegVolume is not None:
      oprot.writeFieldBegin('execTradeLegVolume', TType.I32, 7)
      oprot.writeI32(self.execTradeLegVolume)
      oprot.writeFieldEnd()
    if self.execTradeLegPrice is not None:
      oprot.writeFieldBegin('execTradeLegPrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.execTradeLegPrice)
      oprot.writeFieldEnd()
    if self.relatedTradeVolume is not None:
      oprot.writeFieldBegin('relatedTradeVolume', TType.I32, 9)
      oprot.writeI32(self.relatedTradeVolume)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 10)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 11)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderExecDetail:
  """
  Attributes:
   - xqOrder
   - xqTrades
   - execOrders
   - execTrades
   - xqTradeRelatedItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'xqOrder', (HostingXQOrder, HostingXQOrder.thrift_spec), None, ), # 1
    (2, TType.LIST, 'xqTrades', (TType.STRUCT,(HostingXQTrade, HostingXQTrade.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'execOrders', (TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingExecOrder, xueqiao.trade.hosting.ttypes.HostingExecOrder.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'execTrades', (TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingExecTrade, xueqiao.trade.hosting.ttypes.HostingExecTrade.thrift_spec)), None, ), # 4
    (5, TType.MAP, 'xqTradeRelatedItems', (TType.I64,None,TType.LIST,(TType.STRUCT,(HostingXQTradeRelatedItem, HostingXQTradeRelatedItem.thrift_spec))), None, ), # 5
  )

  def __init__(self, xqOrder=None, xqTrades=None, execOrders=None, execTrades=None, xqTradeRelatedItems=None,):
    self.xqOrder = xqOrder
    self.xqTrades = xqTrades
    self.execOrders = execOrders
    self.execTrades = execTrades
    self.xqTradeRelatedItems = xqTradeRelatedItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.xqOrder = HostingXQOrder()
          self.xqOrder.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.xqTrades = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = HostingXQTrade()
            _elem103.read(iprot)
            self.xqTrades.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.execOrders = []
          (_etype107, _size104) = iprot.readListBegin()
          for _i108 in xrange(_size104):
            _elem109 = xueqiao.trade.hosting.ttypes.HostingExecOrder()
            _elem109.read(iprot)
            self.execOrders.append(_elem109)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.execTrades = []
          (_etype113, _size110) = iprot.readListBegin()
          for _i114 in xrange(_size110):
            _elem115 = xueqiao.trade.hosting.ttypes.HostingExecTrade()
            _elem115.read(iprot)
            self.execTrades.append(_elem115)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.xqTradeRelatedItems = {}
          (_ktype117, _vtype118, _size116 ) = iprot.readMapBegin()
          for _i120 in xrange(_size116):
            _key121 = iprot.readI64();
            _val122 = []
            (_etype126, _size123) = iprot.readListBegin()
            for _i127 in xrange(_size123):
              _elem128 = HostingXQTradeRelatedItem()
              _elem128.read(iprot)
              _val122.append(_elem128)
            iprot.readListEnd()
            self.xqTradeRelatedItems[_key121] = _val122
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderExecDetail')
    if self.xqOrder is not None:
      oprot.writeFieldBegin('xqOrder', TType.STRUCT, 1)
      self.xqOrder.write(oprot)
      oprot.writeFieldEnd()
    if self.xqTrades is not None:
      oprot.writeFieldBegin('xqTrades', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.xqTrades))
      for iter129 in self.xqTrades:
        iter129.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.execOrders is not None:
      oprot.writeFieldBegin('execOrders', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.execOrders))
      for iter130 in self.execOrders:
        iter130.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.execTrades is not None:
      oprot.writeFieldBegin('execTrades', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.execTrades))
      for iter131 in self.execTrades:
        iter131.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.xqTradeRelatedItems is not None:
      oprot.writeFieldBegin('xqTradeRelatedItems', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.xqTradeRelatedItems))
      for kiter132,viter133 in self.xqTradeRelatedItems.items():
        oprot.writeI64(kiter132)
        oprot.writeListBegin(TType.STRUCT, len(viter133))
        for iter134 in viter133:
          iter134.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderWithTradeList:
  """
  Attributes:
   - order
   - tradeList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'order', (HostingXQOrder, HostingXQOrder.thrift_spec), None, ), # 1
    (2, TType.LIST, 'tradeList', (TType.STRUCT,(HostingXQTrade, HostingXQTrade.thrift_spec)), None, ), # 2
  )

  def __init__(self, order=None, tradeList=None,):
    self.order = order
    self.tradeList = tradeList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.order = HostingXQOrder()
          self.order.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tradeList = []
          (_etype138, _size135) = iprot.readListBegin()
          for _i139 in xrange(_size135):
            _elem140 = HostingXQTrade()
            _elem140.read(iprot)
            self.tradeList.append(_elem140)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderWithTradeList')
    if self.order is not None:
      oprot.writeFieldBegin('order', TType.STRUCT, 1)
      self.order.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeList is not None:
      oprot.writeFieldBegin('tradeList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.tradeList))
      for iter141 in self.tradeList:
        iter141.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQComposeLimitOrderSettings:
  """
  针对组合限价单的设置

  Attributes:
   - defaultChaseTicks
   - maxChaseTicks
   - maxInvolRevokeLimitNum
   - defaultInvolRevokeLimitNum
   - defaultQuantityRatio
   - minQuantityRatio
   - defaultPriceProtectRatio
   - maxPriceProtectRatio
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'defaultChaseTicks', None, None, ), # 1
    (2, TType.I32, 'maxChaseTicks', None, None, ), # 2
    (3, TType.I32, 'maxInvolRevokeLimitNum', None, None, ), # 3
    (4, TType.I32, 'defaultInvolRevokeLimitNum', None, None, ), # 4
    (5, TType.DOUBLE, 'defaultQuantityRatio', None, None, ), # 5
    (6, TType.DOUBLE, 'minQuantityRatio', None, None, ), # 6
    (7, TType.DOUBLE, 'defaultPriceProtectRatio', None, None, ), # 7
    (8, TType.DOUBLE, 'maxPriceProtectRatio', None, None, ), # 8
  )

  def __init__(self, defaultChaseTicks=None, maxChaseTicks=None, maxInvolRevokeLimitNum=None, defaultInvolRevokeLimitNum=None, defaultQuantityRatio=None, minQuantityRatio=None, defaultPriceProtectRatio=None, maxPriceProtectRatio=None,):
    self.defaultChaseTicks = defaultChaseTicks
    self.maxChaseTicks = maxChaseTicks
    self.maxInvolRevokeLimitNum = maxInvolRevokeLimitNum
    self.defaultInvolRevokeLimitNum = defaultInvolRevokeLimitNum
    self.defaultQuantityRatio = defaultQuantityRatio
    self.minQuantityRatio = minQuantityRatio
    self.defaultPriceProtectRatio = defaultPriceProtectRatio
    self.maxPriceProtectRatio = maxPriceProtectRatio

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.defaultChaseTicks = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.maxChaseTicks = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.maxInvolRevokeLimitNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.defaultInvolRevokeLimitNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.defaultQuantityRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.minQuantityRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.defaultPriceProtectRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.maxPriceProtectRatio = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQComposeLimitOrderSettings')
    if self.defaultChaseTicks is not None:
      oprot.writeFieldBegin('defaultChaseTicks', TType.I32, 1)
      oprot.writeI32(self.defaultChaseTicks)
      oprot.writeFieldEnd()
    if self.maxChaseTicks is not None:
      oprot.writeFieldBegin('maxChaseTicks', TType.I32, 2)
      oprot.writeI32(self.maxChaseTicks)
      oprot.writeFieldEnd()
    if self.maxInvolRevokeLimitNum is not None:
      oprot.writeFieldBegin('maxInvolRevokeLimitNum', TType.I32, 3)
      oprot.writeI32(self.maxInvolRevokeLimitNum)
      oprot.writeFieldEnd()
    if self.defaultInvolRevokeLimitNum is not None:
      oprot.writeFieldBegin('defaultInvolRevokeLimitNum', TType.I32, 4)
      oprot.writeI32(self.defaultInvolRevokeLimitNum)
      oprot.writeFieldEnd()
    if self.defaultQuantityRatio is not None:
      oprot.writeFieldBegin('defaultQuantityRatio', TType.DOUBLE, 5)
      oprot.writeDouble(self.defaultQuantityRatio)
      oprot.writeFieldEnd()
    if self.minQuantityRatio is not None:
      oprot.writeFieldBegin('minQuantityRatio', TType.DOUBLE, 6)
      oprot.writeDouble(self.minQuantityRatio)
      oprot.writeFieldEnd()
    if self.defaultPriceProtectRatio is not None:
      oprot.writeFieldBegin('defaultPriceProtectRatio', TType.DOUBLE, 7)
      oprot.writeDouble(self.defaultPriceProtectRatio)
      oprot.writeFieldEnd()
    if self.maxPriceProtectRatio is not None:
      oprot.writeFieldBegin('maxPriceProtectRatio', TType.DOUBLE, 8)
      oprot.writeDouble(self.maxPriceProtectRatio)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
