#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


TradeHostingTerminalAo_SERVICE_KEY=701
class Iface:
  def getHostingUserPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    子用户列表页查询

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def heartBeat(self, platformArgs, landingInfo):
    """
    用户维持session心跳

    Parameters:
     - platformArgs
     - landingInfo
    """
    pass

  def logout(self, platformArgs, landingInfo):
    """
    Parameters:
     - platformArgs
     - landingInfo
    """
    pass

  def getComposeViewDetails(self, platformArgs, landingInfo, composeGraphIds):
    """
    根据子用户ID获取其视图详情(包括已经标记删除的), 最大同时获取50个

    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphIds
    """
    pass

  def changeComposeViewPrecisionNumber(self, platformArgs, landingInfo, composeGraphId, precisionNumber):
    """
    更改组合视图小数点精确位数

    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - precisionNumber
    """
    pass

  def createComposeGraph(self, platformArgs, landingInfo, newGraph, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - newGraph
     - aliasName
     - precisionNumber
    """
    pass

  def delComposeView(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    pass

  def getComposeViewDetailPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def getSameComposeGraphsPage(self, platformArgs, landingInfo, graph, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - graph
     - pageOption
    """
    pass

  def addComposeViewBySearch(self, platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - composeGraphKey
     - aliasName
     - precisionNumber
    """
    pass

  def subscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    pass

  def unSubscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    pass

  def changeComposeViewAliasName(self, platformArgs, landingInfo, composeGraphId, aliasName):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - aliasName
    """
    pass

  def getComposeGraphs(self, platformArgs, landingInfo, composeGraphIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphIds
    """
    pass

  def addComposeViewByShare(self, platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - aliasName
     - precisionNumber
    """
    pass

  def addTradeAccount(self, platformArgs, landingInfo, newAccount):
    """
    添加交易账号

    Parameters:
     - platformArgs
     - landingInfo
     - newAccount
    """
    pass

  def disableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    用户禁用账号，实际上是标记账号无效, 并不会一次性物理删除
     如果有关联的账号的订单，则账号会保留数据信息
     如果账号无关联订单信息，则账号会被移除

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    pass

  def getTradeAccountPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询交易账户页

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def enableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    重新启用账户

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    pass

  def updateTradeAccountInfo(self, platformArgs, landingInfo, updateAccount):
    """
    更新账号信息

    Parameters:
     - platformArgs
     - landingInfo
     - updateAccount
    """
    pass

  def rmTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    删除账号

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    pass

  def getHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId):
    """
    获取子账户订单路由配置树

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def updateHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId, routeTree):
    """
    更新用户订单路由配置树

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - routeTree
    """
    pass

  def getHostingOrderRouteTreeVersion(self, platformArgs, landingInfo, subAccountId):
    """
    获取用户订单路由配置树在服务端的版本

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def createXQOrder(self, platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail):
    """
    雪橇订单格式为${MACHINEID}_${SUBACCOUNTID}_${SUBUSERID}_${LOGINTIMESTAMP}_{客户端自增}

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - orderId
     - orderType
     - orderTarget
     - orderDetail
    """
    pass

  def batchSuspendXQOrders(self, platformArgs, landingInfo, orderIds):
    """
    批量暂停雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    pass

  def batchResumeXQOrders(self, platformArgs, landingInfo, orderIds, resumeModes):
    """
    批量恢复雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
     - resumeModes
    """
    pass

  def batchCancelXQOrders(self, platformArgs, landingInfo, orderIds):
    """
    批量撤销雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    pass

  def getEffectXQOrderWithTradeListPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    获取未清理订单和成交信息

    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    pass

  def getXQOrderWithTradeLists(self, platformArgs, landingInfo, orderIds):
    """
    批量查询订单的信息和其成交信息

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    pass

  def getXQOrderExecDetail(self, platformArgs, landingInfo, orderId):
    """
    查询订单的执行详情

    Parameters:
     - platformArgs
     - landingInfo
     - orderId
    """
    pass

  def getXQOrderHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    pass

  def getXQTradeHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    pass

  def getUserSetting(self, platformArgs, landingInfo, key):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
    """
    pass

  def updateUserSetting(self, platformArgs, landingInfo, key, setting):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
     - setting
    """
    pass

  def getUserSettingVersion(self, platformArgs, landingInfo, key):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
    """
    pass

  def getSAWRUTListPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    获取子账户以及关联信息列表

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def getSARUTBySubAccountId(self, platformArgs, landingInfo, subAccountIds):
    """
    获取子账户关联的列表

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountIds
    """
    pass

  def getSARUTBySubUserId(self, platformArgs, landingInfo, subUserIds):
    """
    获取用户的关联子账户列表

    Parameters:
     - platformArgs
     - landingInfo
     - subUserIds
    """
    pass

  def assignSubAccountRelatedUsers(self, platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds):
    """
    分配子账户列表

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - relatedSubUserIds
     - unRelatedSubUserIds
    """
    pass

  def renameSubAccount(self, platformArgs, landingInfo, subAccountId, subAccountName):
    """
    子账户重命名

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - subAccountName
    """
    pass

  def createSubAccount(self, platformArgs, landingInfo, newSubAccount):
    """
    创建子账户

    Parameters:
     - platformArgs
     - landingInfo
     - newSubAccount
    """
    pass

  def getHostingSledContractPosition(self, platformArgs, landingInfo, option):
    """
    查询实时雪橇合约持仓, 查询实时数据不具备分页

    Parameters:
     - platformArgs
     - landingInfo
     - option
    """
    pass

  def getHostingSubAccountFund(self, platformArgs, landingInfo, option):
    """
    查询子账号实时资金, 查询实时数据不具备分页

    Parameters:
     - platformArgs
     - landingInfo
     - option
    """
    pass

  def changeSubAccountFund(self, platformArgs, landingInfo, fundChange):
    """
    子账号出入金

    Parameters:
     - platformArgs
     - landingInfo
     - fundChange
    """
    pass

  def setSubAccountCreditAmount(self, platformArgs, landingInfo, amountChange):
    """
    子账号设置信用额度

    Parameters:
     - platformArgs
     - landingInfo
     - amountChange
    """
    pass

  def getAssetPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询实时雪橇合约持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def getHostingSubAccountMoneyRecord(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号出入金记录

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def getSubAccountFundHistory(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史资金信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def getSubAccountPositionHistory(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史持仓信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def getSubAccountPositionHistoryTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史持仓的持仓明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def deleteExpiredContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    """
    删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - sledContractId
    """
    pass

  def getTradeAccountFundNow(self, platformArgs, landingInfo, tradeAccountId):
    """
    获取交易账户目前保留的最新的资金信息，如果查询不到，则list为空，否则list中会存在一个对应的资金信息

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    pass

  def getTradeAccountFundHis(self, platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd):
    """
    查询资金历史条目, 最大可查一年内的资金变动每日变动

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - fundDateBegin
     - fundDateEnd
    """
    pass

  def getTradeAccountSettlementInfos(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    """
    查询历史结算信息， 最大可查询一个月内的所有结算单

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - settlementDateBegin
     - settlementDateEnd
    """
    pass

  def getTradeAccountSettlementInfosWithRelatedTime(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    """
    查询历史结算信息,包含雪橇成交建议查询时间， 最大可查询一个月内的所有结算单

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - settlementDateBegin
     - settlementDateEnd
    """
    pass

  def getTradeAccountPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def reqPositionVerify(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓核对历史

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def reqPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓核对明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def manualInputPosition(self, platformArgs, landingInfo, positionManualInputs):
    """
    录入持仓明细信息


    Parameters:
     - platformArgs
     - landingInfo
     - positionManualInputs
    """
    pass

  def reqPositionUnassigned(self, platformArgs, landingInfo, option, pageOption):
    """
    查询未分配的持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def assignPosition(self, platformArgs, landingInfo, assignOption):
    """
    分配持仓明细信息


    Parameters:
     - platformArgs
     - landingInfo
     - assignOption
    """
    pass

  def reqPositionEditLock(self, platformArgs, landingInfo, lockKey):
    """
    查询持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - lockKey
    """
    pass

  def addPositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    """
    添加持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - positionEditLock
    """
    pass

  def removePositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    """
    删除持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - positionEditLock
    """
    pass

  def reqDailyPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    """
    查询日常持仓核对明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def updateDailyPositionDifferenceNote(self, platformArgs, landingInfo, difference):
    """
    更新日常持仓核对的备注和核对状态信息

    Parameters:
     - platformArgs
     - landingInfo
     - difference
    """
    pass

  def reqPositionAssigned(self, platformArgs, landingInfo, option, pageOption):
    """
    查询已分配的持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def contructCompose(self, platformArgs, landingInfo, contructComposeReq):
    """
    录入统计组合
    (过期废弃)

    Parameters:
     - platformArgs
     - landingInfo
     - contructComposeReq
    """
    pass

  def disassembleCompose(self, platformArgs, landingInfo, disassembleComposePositionReq):
    """
    拆分统计组合

    Parameters:
     - platformArgs
     - landingInfo
     - disassembleComposePositionReq
    """
    pass

  def batchClosePosition(self, platformArgs, landingInfo, batchClosedPositionReq):
    """
    批量平仓

    Parameters:
     - platformArgs
     - landingInfo
     - batchClosedPositionReq
    """
    pass

  def recoverClosedPosition(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    """
    恢复当天平仓

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - targetKey
     - targetType
    """
    pass

  def mergeToCompose(self, platformArgs, landingInfo, mergeToComposeReq):
    """
    合并合约为组合

    Parameters:
     - platformArgs
     - landingInfo
     - mergeToComposeReq
    """
    pass

  def deleteExpiredStatContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    """
    删除过期合约持仓

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - sledContractId
    """
    pass

  def queryStatPositionSummaryPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询统计持仓

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionItemPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询持仓详情

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryCurrentDayStatClosedPositionPage(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    """
    查询当天平仓记录

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - targetKey
     - targetType
    """
    pass

  def queryStatClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询平仓明细

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryArchivedClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询归档记录

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryArchivedClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询归档（平仓）明细

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionSummaryExPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionUnitPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryHistoryClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def queryHistoryClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    pass

  def getXQTradeLameTaskNotePage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    查询相关子账户的所有瘸腿成交的TaskNote

    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    pass

  def batchDeleteXQTradeLameTaskNotes(self, platformArgs, landingInfo, subAccountId, xqTradeIds):
    """
    批量删除一个子账户下的TaskNote

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - xqTradeIds
    """
    pass

  def queryMailBoxMessage(self, platformArgs, landingInfo, option, pageOption):
    """
    查询用户托管机消息的接口

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    pass

  def markMessageAsRead(self, platformArgs, landingInfo, hostingMessageIds):
    """
    标记用户托管机消息为已读
    hostingMessageIds empty 表示所有未读状态设置为已读

    Parameters:
     - platformArgs
     - landingInfo
     - hostingMessageIds
    """
    pass

  def getAllSupportedItems(self, platformArgs, landingInfo):
    """
    Parameters:
     - platformArgs
     - landingInfo
    """
    pass

  def getRiskRuleJointVersion(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def getRiskRuleJoint(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def batchSetSupportedItems(self, platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - openedItemIds
     - closedItemIds
    """
    pass

  def batchSetTradedCommodityItems(self, platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - enabledCommodityIds
     - disabledCommodityIds
    """
    pass

  def batchSetGlobalRules(self, platformArgs, landingInfo, subAccountId, version, ruleItems):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - ruleItems
    """
    pass

  def batchSetCommodityRules(self, platformArgs, landingInfo, subAccountId, version, rules):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - rules
    """
    pass

  def setRiskEnabled(self, platformArgs, landingInfo, subAccountId, version, riskEnabled):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - riskEnabled
    """
    pass

  def getRiskFrameDataInfo(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def setGeneralMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    pass

  def setGeneralCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    pass

  def addSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    pass

  def addSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    pass

  def updateSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    pass

  def updateSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    pass

  def deleteSpecMarginSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - commodityId
    """
    pass

  def deleteSpecCommissionSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - commodityId
    """
    pass

  def queryXQGeneralMarginSettings(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def queryXQGeneralCommissionSettings(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    pass

  def queryXQSpecMarginSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass

  def queryXQSpecCommissionSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass

  def queryUpsideContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass

  def queryUpsideContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass

  def queryXQContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass

  def queryXQContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getHostingUserPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    子用户列表页查询

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_getHostingUserPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_getHostingUserPage()

  def send_getHostingUserPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('getHostingUserPage', TMessageType.CALL, self._seqid)
    args = getHostingUserPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingUserPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingUserPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingUserPage failed: unknown result");

  def heartBeat(self, platformArgs, landingInfo):
    """
    用户维持session心跳

    Parameters:
     - platformArgs
     - landingInfo
    """
    self.send_heartBeat(platformArgs, landingInfo)
    self.recv_heartBeat()

  def send_heartBeat(self, platformArgs, landingInfo):
    self._oprot.writeMessageBegin('heartBeat', TMessageType.CALL, self._seqid)
    args = heartBeat_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_heartBeat(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = heartBeat_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def logout(self, platformArgs, landingInfo):
    """
    Parameters:
     - platformArgs
     - landingInfo
    """
    self.send_logout(platformArgs, landingInfo)
    self.recv_logout()

  def send_logout(self, platformArgs, landingInfo):
    self._oprot.writeMessageBegin('logout', TMessageType.CALL, self._seqid)
    args = logout_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_logout(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = logout_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getComposeViewDetails(self, platformArgs, landingInfo, composeGraphIds):
    """
    根据子用户ID获取其视图详情(包括已经标记删除的), 最大同时获取50个

    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphIds
    """
    self.send_getComposeViewDetails(platformArgs, landingInfo, composeGraphIds)
    return self.recv_getComposeViewDetails()

  def send_getComposeViewDetails(self, platformArgs, landingInfo, composeGraphIds):
    self._oprot.writeMessageBegin('getComposeViewDetails', TMessageType.CALL, self._seqid)
    args = getComposeViewDetails_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphIds = composeGraphIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getComposeViewDetails(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getComposeViewDetails_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getComposeViewDetails failed: unknown result");

  def changeComposeViewPrecisionNumber(self, platformArgs, landingInfo, composeGraphId, precisionNumber):
    """
    更改组合视图小数点精确位数

    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - precisionNumber
    """
    self.send_changeComposeViewPrecisionNumber(platformArgs, landingInfo, composeGraphId, precisionNumber)
    self.recv_changeComposeViewPrecisionNumber()

  def send_changeComposeViewPrecisionNumber(self, platformArgs, landingInfo, composeGraphId, precisionNumber):
    self._oprot.writeMessageBegin('changeComposeViewPrecisionNumber', TMessageType.CALL, self._seqid)
    args = changeComposeViewPrecisionNumber_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.precisionNumber = precisionNumber
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeComposeViewPrecisionNumber(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeComposeViewPrecisionNumber_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def createComposeGraph(self, platformArgs, landingInfo, newGraph, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - newGraph
     - aliasName
     - precisionNumber
    """
    self.send_createComposeGraph(platformArgs, landingInfo, newGraph, aliasName, precisionNumber)
    return self.recv_createComposeGraph()

  def send_createComposeGraph(self, platformArgs, landingInfo, newGraph, aliasName, precisionNumber):
    self._oprot.writeMessageBegin('createComposeGraph', TMessageType.CALL, self._seqid)
    args = createComposeGraph_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.newGraph = newGraph
    args.aliasName = aliasName
    args.precisionNumber = precisionNumber
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createComposeGraph(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createComposeGraph_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createComposeGraph failed: unknown result");

  def delComposeView(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    self.send_delComposeView(platformArgs, landingInfo, composeGraphId)
    self.recv_delComposeView()

  def send_delComposeView(self, platformArgs, landingInfo, composeGraphId):
    self._oprot.writeMessageBegin('delComposeView', TMessageType.CALL, self._seqid)
    args = delComposeView_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_delComposeView(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = delComposeView_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getComposeViewDetailPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_getComposeViewDetailPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_getComposeViewDetailPage()

  def send_getComposeViewDetailPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('getComposeViewDetailPage', TMessageType.CALL, self._seqid)
    args = getComposeViewDetailPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getComposeViewDetailPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getComposeViewDetailPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getComposeViewDetailPage failed: unknown result");

  def getSameComposeGraphsPage(self, platformArgs, landingInfo, graph, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - graph
     - pageOption
    """
    self.send_getSameComposeGraphsPage(platformArgs, landingInfo, graph, pageOption)
    return self.recv_getSameComposeGraphsPage()

  def send_getSameComposeGraphsPage(self, platformArgs, landingInfo, graph, pageOption):
    self._oprot.writeMessageBegin('getSameComposeGraphsPage', TMessageType.CALL, self._seqid)
    args = getSameComposeGraphsPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.graph = graph
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSameComposeGraphsPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSameComposeGraphsPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSameComposeGraphsPage failed: unknown result");

  def addComposeViewBySearch(self, platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - composeGraphKey
     - aliasName
     - precisionNumber
    """
    self.send_addComposeViewBySearch(platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber)
    self.recv_addComposeViewBySearch()

  def send_addComposeViewBySearch(self, platformArgs, landingInfo, composeGraphId, composeGraphKey, aliasName, precisionNumber):
    self._oprot.writeMessageBegin('addComposeViewBySearch', TMessageType.CALL, self._seqid)
    args = addComposeViewBySearch_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.composeGraphKey = composeGraphKey
    args.aliasName = aliasName
    args.precisionNumber = precisionNumber
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addComposeViewBySearch(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addComposeViewBySearch_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def subscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    self.send_subscribeComposeViewQuotation(platformArgs, landingInfo, composeGraphId)
    self.recv_subscribeComposeViewQuotation()

  def send_subscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    self._oprot.writeMessageBegin('subscribeComposeViewQuotation', TMessageType.CALL, self._seqid)
    args = subscribeComposeViewQuotation_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_subscribeComposeViewQuotation(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = subscribeComposeViewQuotation_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def unSubscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
    """
    self.send_unSubscribeComposeViewQuotation(platformArgs, landingInfo, composeGraphId)
    self.recv_unSubscribeComposeViewQuotation()

  def send_unSubscribeComposeViewQuotation(self, platformArgs, landingInfo, composeGraphId):
    self._oprot.writeMessageBegin('unSubscribeComposeViewQuotation', TMessageType.CALL, self._seqid)
    args = unSubscribeComposeViewQuotation_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unSubscribeComposeViewQuotation(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = unSubscribeComposeViewQuotation_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def changeComposeViewAliasName(self, platformArgs, landingInfo, composeGraphId, aliasName):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - aliasName
    """
    self.send_changeComposeViewAliasName(platformArgs, landingInfo, composeGraphId, aliasName)
    self.recv_changeComposeViewAliasName()

  def send_changeComposeViewAliasName(self, platformArgs, landingInfo, composeGraphId, aliasName):
    self._oprot.writeMessageBegin('changeComposeViewAliasName', TMessageType.CALL, self._seqid)
    args = changeComposeViewAliasName_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.aliasName = aliasName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeComposeViewAliasName(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeComposeViewAliasName_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getComposeGraphs(self, platformArgs, landingInfo, composeGraphIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphIds
    """
    self.send_getComposeGraphs(platformArgs, landingInfo, composeGraphIds)
    return self.recv_getComposeGraphs()

  def send_getComposeGraphs(self, platformArgs, landingInfo, composeGraphIds):
    self._oprot.writeMessageBegin('getComposeGraphs', TMessageType.CALL, self._seqid)
    args = getComposeGraphs_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphIds = composeGraphIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getComposeGraphs(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getComposeGraphs_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getComposeGraphs failed: unknown result");

  def addComposeViewByShare(self, platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - composeGraphId
     - aliasName
     - precisionNumber
    """
    self.send_addComposeViewByShare(platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber)
    self.recv_addComposeViewByShare()

  def send_addComposeViewByShare(self, platformArgs, landingInfo, composeGraphId, aliasName, precisionNumber):
    self._oprot.writeMessageBegin('addComposeViewByShare', TMessageType.CALL, self._seqid)
    args = addComposeViewByShare_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.composeGraphId = composeGraphId
    args.aliasName = aliasName
    args.precisionNumber = precisionNumber
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addComposeViewByShare(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addComposeViewByShare_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def addTradeAccount(self, platformArgs, landingInfo, newAccount):
    """
    添加交易账号

    Parameters:
     - platformArgs
     - landingInfo
     - newAccount
    """
    self.send_addTradeAccount(platformArgs, landingInfo, newAccount)
    return self.recv_addTradeAccount()

  def send_addTradeAccount(self, platformArgs, landingInfo, newAccount):
    self._oprot.writeMessageBegin('addTradeAccount', TMessageType.CALL, self._seqid)
    args = addTradeAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.newAccount = newAccount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addTradeAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addTradeAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addTradeAccount failed: unknown result");

  def disableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    用户禁用账号，实际上是标记账号无效, 并不会一次性物理删除
     如果有关联的账号的订单，则账号会保留数据信息
     如果账号无关联订单信息，则账号会被移除

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    self.send_disableTradeAccount(platformArgs, landingInfo, tradeAccountId)
    self.recv_disableTradeAccount()

  def send_disableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    self._oprot.writeMessageBegin('disableTradeAccount', TMessageType.CALL, self._seqid)
    args = disableTradeAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disableTradeAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disableTradeAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getTradeAccountPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询交易账户页

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_getTradeAccountPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_getTradeAccountPage()

  def send_getTradeAccountPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('getTradeAccountPage', TMessageType.CALL, self._seqid)
    args = getTradeAccountPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountPage failed: unknown result");

  def enableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    重新启用账户

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    self.send_enableTradeAccount(platformArgs, landingInfo, tradeAccountId)
    self.recv_enableTradeAccount()

  def send_enableTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    self._oprot.writeMessageBegin('enableTradeAccount', TMessageType.CALL, self._seqid)
    args = enableTradeAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enableTradeAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enableTradeAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def updateTradeAccountInfo(self, platformArgs, landingInfo, updateAccount):
    """
    更新账号信息

    Parameters:
     - platformArgs
     - landingInfo
     - updateAccount
    """
    self.send_updateTradeAccountInfo(platformArgs, landingInfo, updateAccount)
    self.recv_updateTradeAccountInfo()

  def send_updateTradeAccountInfo(self, platformArgs, landingInfo, updateAccount):
    self._oprot.writeMessageBegin('updateTradeAccountInfo', TMessageType.CALL, self._seqid)
    args = updateTradeAccountInfo_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.updateAccount = updateAccount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateTradeAccountInfo(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateTradeAccountInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def rmTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    """
    删除账号

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    self.send_rmTradeAccount(platformArgs, landingInfo, tradeAccountId)
    self.recv_rmTradeAccount()

  def send_rmTradeAccount(self, platformArgs, landingInfo, tradeAccountId):
    self._oprot.writeMessageBegin('rmTradeAccount', TMessageType.CALL, self._seqid)
    args = rmTradeAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_rmTradeAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = rmTradeAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId):
    """
    获取子账户订单路由配置树

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_getHostingOrderRouteTree(platformArgs, landingInfo, subAccountId)
    return self.recv_getHostingOrderRouteTree()

  def send_getHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('getHostingOrderRouteTree', TMessageType.CALL, self._seqid)
    args = getHostingOrderRouteTree_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingOrderRouteTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingOrderRouteTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingOrderRouteTree failed: unknown result");

  def updateHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId, routeTree):
    """
    更新用户订单路由配置树

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - routeTree
    """
    self.send_updateHostingOrderRouteTree(platformArgs, landingInfo, subAccountId, routeTree)
    self.recv_updateHostingOrderRouteTree()

  def send_updateHostingOrderRouteTree(self, platformArgs, landingInfo, subAccountId, routeTree):
    self._oprot.writeMessageBegin('updateHostingOrderRouteTree', TMessageType.CALL, self._seqid)
    args = updateHostingOrderRouteTree_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.routeTree = routeTree
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateHostingOrderRouteTree(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateHostingOrderRouteTree_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getHostingOrderRouteTreeVersion(self, platformArgs, landingInfo, subAccountId):
    """
    获取用户订单路由配置树在服务端的版本

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_getHostingOrderRouteTreeVersion(platformArgs, landingInfo, subAccountId)
    return self.recv_getHostingOrderRouteTreeVersion()

  def send_getHostingOrderRouteTreeVersion(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('getHostingOrderRouteTreeVersion', TMessageType.CALL, self._seqid)
    args = getHostingOrderRouteTreeVersion_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingOrderRouteTreeVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingOrderRouteTreeVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingOrderRouteTreeVersion failed: unknown result");

  def createXQOrder(self, platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail):
    """
    雪橇订单格式为${MACHINEID}_${SUBACCOUNTID}_${SUBUSERID}_${LOGINTIMESTAMP}_{客户端自增}

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - orderId
     - orderType
     - orderTarget
     - orderDetail
    """
    self.send_createXQOrder(platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail)
    self.recv_createXQOrder()

  def send_createXQOrder(self, platformArgs, landingInfo, subAccountId, orderId, orderType, orderTarget, orderDetail):
    self._oprot.writeMessageBegin('createXQOrder', TMessageType.CALL, self._seqid)
    args = createXQOrder_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.orderId = orderId
    args.orderType = orderType
    args.orderTarget = orderTarget
    args.orderDetail = orderDetail
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createXQOrder(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createXQOrder_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def batchSuspendXQOrders(self, platformArgs, landingInfo, orderIds):
    """
    批量暂停雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    self.send_batchSuspendXQOrders(platformArgs, landingInfo, orderIds)
    return self.recv_batchSuspendXQOrders()

  def send_batchSuspendXQOrders(self, platformArgs, landingInfo, orderIds):
    self._oprot.writeMessageBegin('batchSuspendXQOrders', TMessageType.CALL, self._seqid)
    args = batchSuspendXQOrders_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.orderIds = orderIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchSuspendXQOrders(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchSuspendXQOrders_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchSuspendXQOrders failed: unknown result");

  def batchResumeXQOrders(self, platformArgs, landingInfo, orderIds, resumeModes):
    """
    批量恢复雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
     - resumeModes
    """
    self.send_batchResumeXQOrders(platformArgs, landingInfo, orderIds, resumeModes)
    return self.recv_batchResumeXQOrders()

  def send_batchResumeXQOrders(self, platformArgs, landingInfo, orderIds, resumeModes):
    self._oprot.writeMessageBegin('batchResumeXQOrders', TMessageType.CALL, self._seqid)
    args = batchResumeXQOrders_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.orderIds = orderIds
    args.resumeModes = resumeModes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchResumeXQOrders(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchResumeXQOrders_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchResumeXQOrders failed: unknown result");

  def batchCancelXQOrders(self, platformArgs, landingInfo, orderIds):
    """
    批量撤销雪橇订单

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    self.send_batchCancelXQOrders(platformArgs, landingInfo, orderIds)
    return self.recv_batchCancelXQOrders()

  def send_batchCancelXQOrders(self, platformArgs, landingInfo, orderIds):
    self._oprot.writeMessageBegin('batchCancelXQOrders', TMessageType.CALL, self._seqid)
    args = batchCancelXQOrders_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.orderIds = orderIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchCancelXQOrders(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchCancelXQOrders_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchCancelXQOrders failed: unknown result");

  def getEffectXQOrderWithTradeListPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    获取未清理订单和成交信息

    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    self.send_getEffectXQOrderWithTradeListPage(platformArgs, landingInfo, qryOption, pageOption)
    return self.recv_getEffectXQOrderWithTradeListPage()

  def send_getEffectXQOrderWithTradeListPage(self, platformArgs, landingInfo, qryOption, pageOption):
    self._oprot.writeMessageBegin('getEffectXQOrderWithTradeListPage', TMessageType.CALL, self._seqid)
    args = getEffectXQOrderWithTradeListPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.qryOption = qryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getEffectXQOrderWithTradeListPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getEffectXQOrderWithTradeListPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getEffectXQOrderWithTradeListPage failed: unknown result");

  def getXQOrderWithTradeLists(self, platformArgs, landingInfo, orderIds):
    """
    批量查询订单的信息和其成交信息

    Parameters:
     - platformArgs
     - landingInfo
     - orderIds
    """
    self.send_getXQOrderWithTradeLists(platformArgs, landingInfo, orderIds)
    return self.recv_getXQOrderWithTradeLists()

  def send_getXQOrderWithTradeLists(self, platformArgs, landingInfo, orderIds):
    self._oprot.writeMessageBegin('getXQOrderWithTradeLists', TMessageType.CALL, self._seqid)
    args = getXQOrderWithTradeLists_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.orderIds = orderIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXQOrderWithTradeLists(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXQOrderWithTradeLists_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXQOrderWithTradeLists failed: unknown result");

  def getXQOrderExecDetail(self, platformArgs, landingInfo, orderId):
    """
    查询订单的执行详情

    Parameters:
     - platformArgs
     - landingInfo
     - orderId
    """
    self.send_getXQOrderExecDetail(platformArgs, landingInfo, orderId)
    return self.recv_getXQOrderExecDetail()

  def send_getXQOrderExecDetail(self, platformArgs, landingInfo, orderId):
    self._oprot.writeMessageBegin('getXQOrderExecDetail', TMessageType.CALL, self._seqid)
    args = getXQOrderExecDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.orderId = orderId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXQOrderExecDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXQOrderExecDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXQOrderExecDetail failed: unknown result");

  def getXQOrderHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    self.send_getXQOrderHisPage(platformArgs, landingInfo, qryOption, pageOption)
    return self.recv_getXQOrderHisPage()

  def send_getXQOrderHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    self._oprot.writeMessageBegin('getXQOrderHisPage', TMessageType.CALL, self._seqid)
    args = getXQOrderHisPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.qryOption = qryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXQOrderHisPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXQOrderHisPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXQOrderHisPage failed: unknown result");

  def getXQTradeHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    self.send_getXQTradeHisPage(platformArgs, landingInfo, qryOption, pageOption)
    return self.recv_getXQTradeHisPage()

  def send_getXQTradeHisPage(self, platformArgs, landingInfo, qryOption, pageOption):
    self._oprot.writeMessageBegin('getXQTradeHisPage', TMessageType.CALL, self._seqid)
    args = getXQTradeHisPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.qryOption = qryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXQTradeHisPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXQTradeHisPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXQTradeHisPage failed: unknown result");

  def getUserSetting(self, platformArgs, landingInfo, key):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
    """
    self.send_getUserSetting(platformArgs, landingInfo, key)
    return self.recv_getUserSetting()

  def send_getUserSetting(self, platformArgs, landingInfo, key):
    self._oprot.writeMessageBegin('getUserSetting', TMessageType.CALL, self._seqid)
    args = getUserSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserSetting failed: unknown result");

  def updateUserSetting(self, platformArgs, landingInfo, key, setting):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
     - setting
    """
    self.send_updateUserSetting(platformArgs, landingInfo, key, setting)
    self.recv_updateUserSetting()

  def send_updateUserSetting(self, platformArgs, landingInfo, key, setting):
    self._oprot.writeMessageBegin('updateUserSetting', TMessageType.CALL, self._seqid)
    args = updateUserSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.key = key
    args.setting = setting
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getUserSettingVersion(self, platformArgs, landingInfo, key):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - key
    """
    self.send_getUserSettingVersion(platformArgs, landingInfo, key)
    return self.recv_getUserSettingVersion()

  def send_getUserSettingVersion(self, platformArgs, landingInfo, key):
    self._oprot.writeMessageBegin('getUserSettingVersion', TMessageType.CALL, self._seqid)
    args = getUserSettingVersion_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.key = key
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserSettingVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserSettingVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserSettingVersion failed: unknown result");

  def getSAWRUTListPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    获取子账户以及关联信息列表

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_getSAWRUTListPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_getSAWRUTListPage()

  def send_getSAWRUTListPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('getSAWRUTListPage', TMessageType.CALL, self._seqid)
    args = getSAWRUTListPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSAWRUTListPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSAWRUTListPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSAWRUTListPage failed: unknown result");

  def getSARUTBySubAccountId(self, platformArgs, landingInfo, subAccountIds):
    """
    获取子账户关联的列表

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountIds
    """
    self.send_getSARUTBySubAccountId(platformArgs, landingInfo, subAccountIds)
    return self.recv_getSARUTBySubAccountId()

  def send_getSARUTBySubAccountId(self, platformArgs, landingInfo, subAccountIds):
    self._oprot.writeMessageBegin('getSARUTBySubAccountId', TMessageType.CALL, self._seqid)
    args = getSARUTBySubAccountId_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountIds = subAccountIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSARUTBySubAccountId(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSARUTBySubAccountId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSARUTBySubAccountId failed: unknown result");

  def getSARUTBySubUserId(self, platformArgs, landingInfo, subUserIds):
    """
    获取用户的关联子账户列表

    Parameters:
     - platformArgs
     - landingInfo
     - subUserIds
    """
    self.send_getSARUTBySubUserId(platformArgs, landingInfo, subUserIds)
    return self.recv_getSARUTBySubUserId()

  def send_getSARUTBySubUserId(self, platformArgs, landingInfo, subUserIds):
    self._oprot.writeMessageBegin('getSARUTBySubUserId', TMessageType.CALL, self._seqid)
    args = getSARUTBySubUserId_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subUserIds = subUserIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSARUTBySubUserId(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSARUTBySubUserId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSARUTBySubUserId failed: unknown result");

  def assignSubAccountRelatedUsers(self, platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds):
    """
    分配子账户列表

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - relatedSubUserIds
     - unRelatedSubUserIds
    """
    self.send_assignSubAccountRelatedUsers(platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds)
    self.recv_assignSubAccountRelatedUsers()

  def send_assignSubAccountRelatedUsers(self, platformArgs, landingInfo, subAccountId, relatedSubUserIds, unRelatedSubUserIds):
    self._oprot.writeMessageBegin('assignSubAccountRelatedUsers', TMessageType.CALL, self._seqid)
    args = assignSubAccountRelatedUsers_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.relatedSubUserIds = relatedSubUserIds
    args.unRelatedSubUserIds = unRelatedSubUserIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_assignSubAccountRelatedUsers(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = assignSubAccountRelatedUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def renameSubAccount(self, platformArgs, landingInfo, subAccountId, subAccountName):
    """
    子账户重命名

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - subAccountName
    """
    self.send_renameSubAccount(platformArgs, landingInfo, subAccountId, subAccountName)
    self.recv_renameSubAccount()

  def send_renameSubAccount(self, platformArgs, landingInfo, subAccountId, subAccountName):
    self._oprot.writeMessageBegin('renameSubAccount', TMessageType.CALL, self._seqid)
    args = renameSubAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.subAccountName = subAccountName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_renameSubAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = renameSubAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def createSubAccount(self, platformArgs, landingInfo, newSubAccount):
    """
    创建子账户

    Parameters:
     - platformArgs
     - landingInfo
     - newSubAccount
    """
    self.send_createSubAccount(platformArgs, landingInfo, newSubAccount)
    return self.recv_createSubAccount()

  def send_createSubAccount(self, platformArgs, landingInfo, newSubAccount):
    self._oprot.writeMessageBegin('createSubAccount', TMessageType.CALL, self._seqid)
    args = createSubAccount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.newSubAccount = newSubAccount
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createSubAccount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createSubAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createSubAccount failed: unknown result");

  def getHostingSledContractPosition(self, platformArgs, landingInfo, option):
    """
    查询实时雪橇合约持仓, 查询实时数据不具备分页

    Parameters:
     - platformArgs
     - landingInfo
     - option
    """
    self.send_getHostingSledContractPosition(platformArgs, landingInfo, option)
    return self.recv_getHostingSledContractPosition()

  def send_getHostingSledContractPosition(self, platformArgs, landingInfo, option):
    self._oprot.writeMessageBegin('getHostingSledContractPosition', TMessageType.CALL, self._seqid)
    args = getHostingSledContractPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingSledContractPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingSledContractPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingSledContractPosition failed: unknown result");

  def getHostingSubAccountFund(self, platformArgs, landingInfo, option):
    """
    查询子账号实时资金, 查询实时数据不具备分页

    Parameters:
     - platformArgs
     - landingInfo
     - option
    """
    self.send_getHostingSubAccountFund(platformArgs, landingInfo, option)
    return self.recv_getHostingSubAccountFund()

  def send_getHostingSubAccountFund(self, platformArgs, landingInfo, option):
    self._oprot.writeMessageBegin('getHostingSubAccountFund', TMessageType.CALL, self._seqid)
    args = getHostingSubAccountFund_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingSubAccountFund(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingSubAccountFund_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingSubAccountFund failed: unknown result");

  def changeSubAccountFund(self, platformArgs, landingInfo, fundChange):
    """
    子账号出入金

    Parameters:
     - platformArgs
     - landingInfo
     - fundChange
    """
    self.send_changeSubAccountFund(platformArgs, landingInfo, fundChange)
    return self.recv_changeSubAccountFund()

  def send_changeSubAccountFund(self, platformArgs, landingInfo, fundChange):
    self._oprot.writeMessageBegin('changeSubAccountFund', TMessageType.CALL, self._seqid)
    args = changeSubAccountFund_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.fundChange = fundChange
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeSubAccountFund(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeSubAccountFund_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeSubAccountFund failed: unknown result");

  def setSubAccountCreditAmount(self, platformArgs, landingInfo, amountChange):
    """
    子账号设置信用额度

    Parameters:
     - platformArgs
     - landingInfo
     - amountChange
    """
    self.send_setSubAccountCreditAmount(platformArgs, landingInfo, amountChange)
    return self.recv_setSubAccountCreditAmount()

  def send_setSubAccountCreditAmount(self, platformArgs, landingInfo, amountChange):
    self._oprot.writeMessageBegin('setSubAccountCreditAmount', TMessageType.CALL, self._seqid)
    args = setSubAccountCreditAmount_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.amountChange = amountChange
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setSubAccountCreditAmount(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setSubAccountCreditAmount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setSubAccountCreditAmount failed: unknown result");

  def getAssetPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询实时雪橇合约持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getAssetPositionTradeDetail(platformArgs, landingInfo, option, pageOption)
    return self.recv_getAssetPositionTradeDetail()

  def send_getAssetPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getAssetPositionTradeDetail', TMessageType.CALL, self._seqid)
    args = getAssetPositionTradeDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAssetPositionTradeDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAssetPositionTradeDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAssetPositionTradeDetail failed: unknown result");

  def getHostingSubAccountMoneyRecord(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号出入金记录

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getHostingSubAccountMoneyRecord(platformArgs, landingInfo, option, pageOption)
    return self.recv_getHostingSubAccountMoneyRecord()

  def send_getHostingSubAccountMoneyRecord(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getHostingSubAccountMoneyRecord', TMessageType.CALL, self._seqid)
    args = getHostingSubAccountMoneyRecord_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getHostingSubAccountMoneyRecord(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getHostingSubAccountMoneyRecord_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getHostingSubAccountMoneyRecord failed: unknown result");

  def getSubAccountFundHistory(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史资金信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getSubAccountFundHistory(platformArgs, landingInfo, option, pageOption)
    return self.recv_getSubAccountFundHistory()

  def send_getSubAccountFundHistory(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getSubAccountFundHistory', TMessageType.CALL, self._seqid)
    args = getSubAccountFundHistory_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSubAccountFundHistory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSubAccountFundHistory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSubAccountFundHistory failed: unknown result");

  def getSubAccountPositionHistory(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史持仓信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getSubAccountPositionHistory(platformArgs, landingInfo, option, pageOption)
    return self.recv_getSubAccountPositionHistory()

  def send_getSubAccountPositionHistory(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getSubAccountPositionHistory', TMessageType.CALL, self._seqid)
    args = getSubAccountPositionHistory_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSubAccountPositionHistory(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSubAccountPositionHistory_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSubAccountPositionHistory failed: unknown result");

  def getSubAccountPositionHistoryTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询子账号的历史持仓的持仓明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getSubAccountPositionHistoryTradeDetail(platformArgs, landingInfo, option, pageOption)
    return self.recv_getSubAccountPositionHistoryTradeDetail()

  def send_getSubAccountPositionHistoryTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getSubAccountPositionHistoryTradeDetail', TMessageType.CALL, self._seqid)
    args = getSubAccountPositionHistoryTradeDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSubAccountPositionHistoryTradeDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSubAccountPositionHistoryTradeDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSubAccountPositionHistoryTradeDetail failed: unknown result");

  def deleteExpiredContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    """
    删除操作账号中过期合约的持仓(合约已经过期，而持仓在其他地方平掉，但是在雪橇的操作账号中依然显示存在)

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - sledContractId
    """
    self.send_deleteExpiredContractPosition(platformArgs, landingInfo, subAccountId, sledContractId)
    self.recv_deleteExpiredContractPosition()

  def send_deleteExpiredContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    self._oprot.writeMessageBegin('deleteExpiredContractPosition', TMessageType.CALL, self._seqid)
    args = deleteExpiredContractPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.sledContractId = sledContractId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteExpiredContractPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteExpiredContractPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def getTradeAccountFundNow(self, platformArgs, landingInfo, tradeAccountId):
    """
    获取交易账户目前保留的最新的资金信息，如果查询不到，则list为空，否则list中会存在一个对应的资金信息

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
    """
    self.send_getTradeAccountFundNow(platformArgs, landingInfo, tradeAccountId)
    return self.recv_getTradeAccountFundNow()

  def send_getTradeAccountFundNow(self, platformArgs, landingInfo, tradeAccountId):
    self._oprot.writeMessageBegin('getTradeAccountFundNow', TMessageType.CALL, self._seqid)
    args = getTradeAccountFundNow_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountFundNow(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountFundNow_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountFundNow failed: unknown result");

  def getTradeAccountFundHis(self, platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd):
    """
    查询资金历史条目, 最大可查一年内的资金变动每日变动

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - fundDateBegin
     - fundDateEnd
    """
    self.send_getTradeAccountFundHis(platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd)
    return self.recv_getTradeAccountFundHis()

  def send_getTradeAccountFundHis(self, platformArgs, landingInfo, tradeAccountId, fundDateBegin, fundDateEnd):
    self._oprot.writeMessageBegin('getTradeAccountFundHis', TMessageType.CALL, self._seqid)
    args = getTradeAccountFundHis_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.fundDateBegin = fundDateBegin
    args.fundDateEnd = fundDateEnd
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountFundHis(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountFundHis_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountFundHis failed: unknown result");

  def getTradeAccountSettlementInfos(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    """
    查询历史结算信息， 最大可查询一个月内的所有结算单

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - settlementDateBegin
     - settlementDateEnd
    """
    self.send_getTradeAccountSettlementInfos(platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd)
    return self.recv_getTradeAccountSettlementInfos()

  def send_getTradeAccountSettlementInfos(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    self._oprot.writeMessageBegin('getTradeAccountSettlementInfos', TMessageType.CALL, self._seqid)
    args = getTradeAccountSettlementInfos_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.settlementDateBegin = settlementDateBegin
    args.settlementDateEnd = settlementDateEnd
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountSettlementInfos(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountSettlementInfos_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountSettlementInfos failed: unknown result");

  def getTradeAccountSettlementInfosWithRelatedTime(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    """
    查询历史结算信息,包含雪橇成交建议查询时间， 最大可查询一个月内的所有结算单

    Parameters:
     - platformArgs
     - landingInfo
     - tradeAccountId
     - settlementDateBegin
     - settlementDateEnd
    """
    self.send_getTradeAccountSettlementInfosWithRelatedTime(platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd)
    return self.recv_getTradeAccountSettlementInfosWithRelatedTime()

  def send_getTradeAccountSettlementInfosWithRelatedTime(self, platformArgs, landingInfo, tradeAccountId, settlementDateBegin, settlementDateEnd):
    self._oprot.writeMessageBegin('getTradeAccountSettlementInfosWithRelatedTime', TMessageType.CALL, self._seqid)
    args = getTradeAccountSettlementInfosWithRelatedTime_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.tradeAccountId = tradeAccountId
    args.settlementDateBegin = settlementDateBegin
    args.settlementDateEnd = settlementDateEnd
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountSettlementInfosWithRelatedTime(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountSettlementInfosWithRelatedTime_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountSettlementInfosWithRelatedTime failed: unknown result");

  def getTradeAccountPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_getTradeAccountPositionTradeDetail(platformArgs, landingInfo, option, pageOption)
    return self.recv_getTradeAccountPositionTradeDetail()

  def send_getTradeAccountPositionTradeDetail(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('getTradeAccountPositionTradeDetail', TMessageType.CALL, self._seqid)
    args = getTradeAccountPositionTradeDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getTradeAccountPositionTradeDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getTradeAccountPositionTradeDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getTradeAccountPositionTradeDetail failed: unknown result");

  def reqPositionVerify(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓核对历史

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_reqPositionVerify(platformArgs, landingInfo, option, pageOption)
    return self.recv_reqPositionVerify()

  def send_reqPositionVerify(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('reqPositionVerify', TMessageType.CALL, self._seqid)
    args = reqPositionVerify_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqPositionVerify(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqPositionVerify_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqPositionVerify failed: unknown result");

  def reqPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    """
    查询资金账户持仓核对明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_reqPositionDifference(platformArgs, landingInfo, option, pageOption)
    return self.recv_reqPositionDifference()

  def send_reqPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('reqPositionDifference', TMessageType.CALL, self._seqid)
    args = reqPositionDifference_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqPositionDifference(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqPositionDifference_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqPositionDifference failed: unknown result");

  def manualInputPosition(self, platformArgs, landingInfo, positionManualInputs):
    """
    录入持仓明细信息


    Parameters:
     - platformArgs
     - landingInfo
     - positionManualInputs
    """
    self.send_manualInputPosition(platformArgs, landingInfo, positionManualInputs)
    return self.recv_manualInputPosition()

  def send_manualInputPosition(self, platformArgs, landingInfo, positionManualInputs):
    self._oprot.writeMessageBegin('manualInputPosition', TMessageType.CALL, self._seqid)
    args = manualInputPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.positionManualInputs = positionManualInputs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_manualInputPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = manualInputPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "manualInputPosition failed: unknown result");

  def reqPositionUnassigned(self, platformArgs, landingInfo, option, pageOption):
    """
    查询未分配的持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_reqPositionUnassigned(platformArgs, landingInfo, option, pageOption)
    return self.recv_reqPositionUnassigned()

  def send_reqPositionUnassigned(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('reqPositionUnassigned', TMessageType.CALL, self._seqid)
    args = reqPositionUnassigned_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqPositionUnassigned(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqPositionUnassigned_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqPositionUnassigned failed: unknown result");

  def assignPosition(self, platformArgs, landingInfo, assignOption):
    """
    分配持仓明细信息


    Parameters:
     - platformArgs
     - landingInfo
     - assignOption
    """
    self.send_assignPosition(platformArgs, landingInfo, assignOption)
    return self.recv_assignPosition()

  def send_assignPosition(self, platformArgs, landingInfo, assignOption):
    self._oprot.writeMessageBegin('assignPosition', TMessageType.CALL, self._seqid)
    args = assignPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.assignOption = assignOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_assignPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = assignPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "assignPosition failed: unknown result");

  def reqPositionEditLock(self, platformArgs, landingInfo, lockKey):
    """
    查询持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - lockKey
    """
    self.send_reqPositionEditLock(platformArgs, landingInfo, lockKey)
    return self.recv_reqPositionEditLock()

  def send_reqPositionEditLock(self, platformArgs, landingInfo, lockKey):
    self._oprot.writeMessageBegin('reqPositionEditLock', TMessageType.CALL, self._seqid)
    args = reqPositionEditLock_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.lockKey = lockKey
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqPositionEditLock(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqPositionEditLock_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqPositionEditLock failed: unknown result");

  def addPositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    """
    添加持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - positionEditLock
    """
    self.send_addPositionEditLock(platformArgs, landingInfo, positionEditLock)
    self.recv_addPositionEditLock()

  def send_addPositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    self._oprot.writeMessageBegin('addPositionEditLock', TMessageType.CALL, self._seqid)
    args = addPositionEditLock_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.positionEditLock = positionEditLock
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addPositionEditLock(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addPositionEditLock_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def removePositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    """
    删除持仓编辑锁信息

    Parameters:
     - platformArgs
     - landingInfo
     - positionEditLock
    """
    self.send_removePositionEditLock(platformArgs, landingInfo, positionEditLock)
    self.recv_removePositionEditLock()

  def send_removePositionEditLock(self, platformArgs, landingInfo, positionEditLock):
    self._oprot.writeMessageBegin('removePositionEditLock', TMessageType.CALL, self._seqid)
    args = removePositionEditLock_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.positionEditLock = positionEditLock
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removePositionEditLock(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removePositionEditLock_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def reqDailyPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    """
    查询日常持仓核对明细

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_reqDailyPositionDifference(platformArgs, landingInfo, option, pageOption)
    return self.recv_reqDailyPositionDifference()

  def send_reqDailyPositionDifference(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('reqDailyPositionDifference', TMessageType.CALL, self._seqid)
    args = reqDailyPositionDifference_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqDailyPositionDifference(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqDailyPositionDifference_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqDailyPositionDifference failed: unknown result");

  def updateDailyPositionDifferenceNote(self, platformArgs, landingInfo, difference):
    """
    更新日常持仓核对的备注和核对状态信息

    Parameters:
     - platformArgs
     - landingInfo
     - difference
    """
    self.send_updateDailyPositionDifferenceNote(platformArgs, landingInfo, difference)
    self.recv_updateDailyPositionDifferenceNote()

  def send_updateDailyPositionDifferenceNote(self, platformArgs, landingInfo, difference):
    self._oprot.writeMessageBegin('updateDailyPositionDifferenceNote', TMessageType.CALL, self._seqid)
    args = updateDailyPositionDifferenceNote_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.difference = difference
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateDailyPositionDifferenceNote(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateDailyPositionDifferenceNote_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def reqPositionAssigned(self, platformArgs, landingInfo, option, pageOption):
    """
    查询已分配的持仓明细信息

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_reqPositionAssigned(platformArgs, landingInfo, option, pageOption)
    return self.recv_reqPositionAssigned()

  def send_reqPositionAssigned(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('reqPositionAssigned', TMessageType.CALL, self._seqid)
    args = reqPositionAssigned_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_reqPositionAssigned(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = reqPositionAssigned_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "reqPositionAssigned failed: unknown result");

  def contructCompose(self, platformArgs, landingInfo, contructComposeReq):
    """
    录入统计组合
    (过期废弃)

    Parameters:
     - platformArgs
     - landingInfo
     - contructComposeReq
    """
    self.send_contructCompose(platformArgs, landingInfo, contructComposeReq)
    self.recv_contructCompose()

  def send_contructCompose(self, platformArgs, landingInfo, contructComposeReq):
    self._oprot.writeMessageBegin('contructCompose', TMessageType.CALL, self._seqid)
    args = contructCompose_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.contructComposeReq = contructComposeReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_contructCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = contructCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def disassembleCompose(self, platformArgs, landingInfo, disassembleComposePositionReq):
    """
    拆分统计组合

    Parameters:
     - platformArgs
     - landingInfo
     - disassembleComposePositionReq
    """
    self.send_disassembleCompose(platformArgs, landingInfo, disassembleComposePositionReq)
    self.recv_disassembleCompose()

  def send_disassembleCompose(self, platformArgs, landingInfo, disassembleComposePositionReq):
    self._oprot.writeMessageBegin('disassembleCompose', TMessageType.CALL, self._seqid)
    args = disassembleCompose_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.disassembleComposePositionReq = disassembleComposePositionReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disassembleCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disassembleCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def batchClosePosition(self, platformArgs, landingInfo, batchClosedPositionReq):
    """
    批量平仓

    Parameters:
     - platformArgs
     - landingInfo
     - batchClosedPositionReq
    """
    self.send_batchClosePosition(platformArgs, landingInfo, batchClosedPositionReq)
    self.recv_batchClosePosition()

  def send_batchClosePosition(self, platformArgs, landingInfo, batchClosedPositionReq):
    self._oprot.writeMessageBegin('batchClosePosition', TMessageType.CALL, self._seqid)
    args = batchClosePosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.batchClosedPositionReq = batchClosedPositionReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchClosePosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchClosePosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def recoverClosedPosition(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    """
    恢复当天平仓

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - targetKey
     - targetType
    """
    self.send_recoverClosedPosition(platformArgs, landingInfo, subAccountId, targetKey, targetType)
    self.recv_recoverClosedPosition()

  def send_recoverClosedPosition(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    self._oprot.writeMessageBegin('recoverClosedPosition', TMessageType.CALL, self._seqid)
    args = recoverClosedPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.targetKey = targetKey
    args.targetType = targetType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recoverClosedPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = recoverClosedPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def mergeToCompose(self, platformArgs, landingInfo, mergeToComposeReq):
    """
    合并合约为组合

    Parameters:
     - platformArgs
     - landingInfo
     - mergeToComposeReq
    """
    self.send_mergeToCompose(platformArgs, landingInfo, mergeToComposeReq)
    self.recv_mergeToCompose()

  def send_mergeToCompose(self, platformArgs, landingInfo, mergeToComposeReq):
    self._oprot.writeMessageBegin('mergeToCompose', TMessageType.CALL, self._seqid)
    args = mergeToCompose_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.mergeToComposeReq = mergeToComposeReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mergeToCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mergeToCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteExpiredStatContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    """
    删除过期合约持仓

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - sledContractId
    """
    self.send_deleteExpiredStatContractPosition(platformArgs, landingInfo, subAccountId, sledContractId)
    self.recv_deleteExpiredStatContractPosition()

  def send_deleteExpiredStatContractPosition(self, platformArgs, landingInfo, subAccountId, sledContractId):
    self._oprot.writeMessageBegin('deleteExpiredStatContractPosition', TMessageType.CALL, self._seqid)
    args = deleteExpiredStatContractPosition_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.sledContractId = sledContractId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteExpiredStatContractPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteExpiredStatContractPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def queryStatPositionSummaryPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询统计持仓

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionSummaryPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryStatPositionSummaryPage()

  def send_queryStatPositionSummaryPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionSummaryPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionSummaryPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionSummaryPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionSummaryPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionSummaryPage failed: unknown result");

  def queryStatPositionItemPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询持仓详情

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionItemPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryStatPositionItemPage()

  def send_queryStatPositionItemPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionItemPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionItemPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionItemPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionItemPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionItemPage failed: unknown result");

  def queryCurrentDayStatClosedPositionPage(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    """
    查询当天平仓记录

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - targetKey
     - targetType
    """
    self.send_queryCurrentDayStatClosedPositionPage(platformArgs, landingInfo, subAccountId, targetKey, targetType)
    return self.recv_queryCurrentDayStatClosedPositionPage()

  def send_queryCurrentDayStatClosedPositionPage(self, platformArgs, landingInfo, subAccountId, targetKey, targetType):
    self._oprot.writeMessageBegin('queryCurrentDayStatClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryCurrentDayStatClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.targetKey = targetKey
    args.targetType = targetType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryCurrentDayStatClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryCurrentDayStatClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryCurrentDayStatClosedPositionPage failed: unknown result");

  def queryStatClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询平仓明细

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryStatClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryStatClosedPositionDetail()

  def send_queryStatClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryStatClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatClosedPositionDetail failed: unknown result");

  def queryArchivedClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询归档记录

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryArchivedClosedPositionPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryArchivedClosedPositionPage()

  def send_queryArchivedClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryArchivedClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryArchivedClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryArchivedClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryArchivedClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryArchivedClosedPositionPage failed: unknown result");

  def queryArchivedClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    查询归档（平仓）明细

    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryArchivedClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryArchivedClosedPositionDetail()

  def send_queryArchivedClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryArchivedClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryArchivedClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryArchivedClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryArchivedClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryArchivedClosedPositionDetail failed: unknown result");

  def queryStatPositionSummaryExPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionSummaryExPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryStatPositionSummaryExPage()

  def send_queryStatPositionSummaryExPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionSummaryExPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionSummaryExPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionSummaryExPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionSummaryExPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionSummaryExPage failed: unknown result");

  def queryStatPositionUnitPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionUnitPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryStatPositionUnitPage()

  def send_queryStatPositionUnitPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionUnitPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionUnitPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionUnitPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionUnitPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionUnitPage failed: unknown result");

  def queryHistoryClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryHistoryClosedPositionPage(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryHistoryClosedPositionPage()

  def send_queryHistoryClosedPositionPage(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryHistoryClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryHistoryClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryHistoryClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryHistoryClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryHistoryClosedPositionPage failed: unknown result");

  def queryHistoryClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOption
     - pageOption
    """
    self.send_queryHistoryClosedPositionDetail(platformArgs, landingInfo, queryOption, pageOption)
    return self.recv_queryHistoryClosedPositionDetail()

  def send_queryHistoryClosedPositionDetail(self, platformArgs, landingInfo, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryHistoryClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryHistoryClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryHistoryClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryHistoryClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryHistoryClosedPositionDetail failed: unknown result");

  def getXQTradeLameTaskNotePage(self, platformArgs, landingInfo, qryOption, pageOption):
    """
    查询相关子账户的所有瘸腿成交的TaskNote

    Parameters:
     - platformArgs
     - landingInfo
     - qryOption
     - pageOption
    """
    self.send_getXQTradeLameTaskNotePage(platformArgs, landingInfo, qryOption, pageOption)
    return self.recv_getXQTradeLameTaskNotePage()

  def send_getXQTradeLameTaskNotePage(self, platformArgs, landingInfo, qryOption, pageOption):
    self._oprot.writeMessageBegin('getXQTradeLameTaskNotePage', TMessageType.CALL, self._seqid)
    args = getXQTradeLameTaskNotePage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.qryOption = qryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getXQTradeLameTaskNotePage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getXQTradeLameTaskNotePage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getXQTradeLameTaskNotePage failed: unknown result");

  def batchDeleteXQTradeLameTaskNotes(self, platformArgs, landingInfo, subAccountId, xqTradeIds):
    """
    批量删除一个子账户下的TaskNote

    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - xqTradeIds
    """
    self.send_batchDeleteXQTradeLameTaskNotes(platformArgs, landingInfo, subAccountId, xqTradeIds)
    return self.recv_batchDeleteXQTradeLameTaskNotes()

  def send_batchDeleteXQTradeLameTaskNotes(self, platformArgs, landingInfo, subAccountId, xqTradeIds):
    self._oprot.writeMessageBegin('batchDeleteXQTradeLameTaskNotes', TMessageType.CALL, self._seqid)
    args = batchDeleteXQTradeLameTaskNotes_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.xqTradeIds = xqTradeIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchDeleteXQTradeLameTaskNotes(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchDeleteXQTradeLameTaskNotes_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchDeleteXQTradeLameTaskNotes failed: unknown result");

  def queryMailBoxMessage(self, platformArgs, landingInfo, option, pageOption):
    """
    查询用户托管机消息的接口

    Parameters:
     - platformArgs
     - landingInfo
     - option
     - pageOption
    """
    self.send_queryMailBoxMessage(platformArgs, landingInfo, option, pageOption)
    return self.recv_queryMailBoxMessage()

  def send_queryMailBoxMessage(self, platformArgs, landingInfo, option, pageOption):
    self._oprot.writeMessageBegin('queryMailBoxMessage', TMessageType.CALL, self._seqid)
    args = queryMailBoxMessage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.option = option
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryMailBoxMessage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryMailBoxMessage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryMailBoxMessage failed: unknown result");

  def markMessageAsRead(self, platformArgs, landingInfo, hostingMessageIds):
    """
    标记用户托管机消息为已读
    hostingMessageIds empty 表示所有未读状态设置为已读

    Parameters:
     - platformArgs
     - landingInfo
     - hostingMessageIds
    """
    self.send_markMessageAsRead(platformArgs, landingInfo, hostingMessageIds)
    return self.recv_markMessageAsRead()

  def send_markMessageAsRead(self, platformArgs, landingInfo, hostingMessageIds):
    self._oprot.writeMessageBegin('markMessageAsRead', TMessageType.CALL, self._seqid)
    args = markMessageAsRead_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.hostingMessageIds = hostingMessageIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_markMessageAsRead(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = markMessageAsRead_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "markMessageAsRead failed: unknown result");

  def getAllSupportedItems(self, platformArgs, landingInfo):
    """
    Parameters:
     - platformArgs
     - landingInfo
    """
    self.send_getAllSupportedItems(platformArgs, landingInfo)
    return self.recv_getAllSupportedItems()

  def send_getAllSupportedItems(self, platformArgs, landingInfo):
    self._oprot.writeMessageBegin('getAllSupportedItems', TMessageType.CALL, self._seqid)
    args = getAllSupportedItems_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllSupportedItems(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllSupportedItems_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllSupportedItems failed: unknown result");

  def getRiskRuleJointVersion(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_getRiskRuleJointVersion(platformArgs, landingInfo, subAccountId)
    return self.recv_getRiskRuleJointVersion()

  def send_getRiskRuleJointVersion(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('getRiskRuleJointVersion', TMessageType.CALL, self._seqid)
    args = getRiskRuleJointVersion_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRiskRuleJointVersion(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getRiskRuleJointVersion_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRiskRuleJointVersion failed: unknown result");

  def getRiskRuleJoint(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_getRiskRuleJoint(platformArgs, landingInfo, subAccountId)
    return self.recv_getRiskRuleJoint()

  def send_getRiskRuleJoint(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('getRiskRuleJoint', TMessageType.CALL, self._seqid)
    args = getRiskRuleJoint_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRiskRuleJoint(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getRiskRuleJoint_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRiskRuleJoint failed: unknown result");

  def batchSetSupportedItems(self, platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - openedItemIds
     - closedItemIds
    """
    self.send_batchSetSupportedItems(platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds)
    return self.recv_batchSetSupportedItems()

  def send_batchSetSupportedItems(self, platformArgs, landingInfo, subAccountId, version, openedItemIds, closedItemIds):
    self._oprot.writeMessageBegin('batchSetSupportedItems', TMessageType.CALL, self._seqid)
    args = batchSetSupportedItems_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.version = version
    args.openedItemIds = openedItemIds
    args.closedItemIds = closedItemIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchSetSupportedItems(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchSetSupportedItems_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchSetSupportedItems failed: unknown result");

  def batchSetTradedCommodityItems(self, platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - enabledCommodityIds
     - disabledCommodityIds
    """
    self.send_batchSetTradedCommodityItems(platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds)
    return self.recv_batchSetTradedCommodityItems()

  def send_batchSetTradedCommodityItems(self, platformArgs, landingInfo, subAccountId, version, enabledCommodityIds, disabledCommodityIds):
    self._oprot.writeMessageBegin('batchSetTradedCommodityItems', TMessageType.CALL, self._seqid)
    args = batchSetTradedCommodityItems_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.version = version
    args.enabledCommodityIds = enabledCommodityIds
    args.disabledCommodityIds = disabledCommodityIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchSetTradedCommodityItems(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchSetTradedCommodityItems_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchSetTradedCommodityItems failed: unknown result");

  def batchSetGlobalRules(self, platformArgs, landingInfo, subAccountId, version, ruleItems):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - ruleItems
    """
    self.send_batchSetGlobalRules(platformArgs, landingInfo, subAccountId, version, ruleItems)
    return self.recv_batchSetGlobalRules()

  def send_batchSetGlobalRules(self, platformArgs, landingInfo, subAccountId, version, ruleItems):
    self._oprot.writeMessageBegin('batchSetGlobalRules', TMessageType.CALL, self._seqid)
    args = batchSetGlobalRules_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.version = version
    args.ruleItems = ruleItems
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchSetGlobalRules(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchSetGlobalRules_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchSetGlobalRules failed: unknown result");

  def batchSetCommodityRules(self, platformArgs, landingInfo, subAccountId, version, rules):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - rules
    """
    self.send_batchSetCommodityRules(platformArgs, landingInfo, subAccountId, version, rules)
    return self.recv_batchSetCommodityRules()

  def send_batchSetCommodityRules(self, platformArgs, landingInfo, subAccountId, version, rules):
    self._oprot.writeMessageBegin('batchSetCommodityRules', TMessageType.CALL, self._seqid)
    args = batchSetCommodityRules_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.version = version
    args.rules = rules
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchSetCommodityRules(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchSetCommodityRules_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "batchSetCommodityRules failed: unknown result");

  def setRiskEnabled(self, platformArgs, landingInfo, subAccountId, version, riskEnabled):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - version
     - riskEnabled
    """
    self.send_setRiskEnabled(platformArgs, landingInfo, subAccountId, version, riskEnabled)
    return self.recv_setRiskEnabled()

  def send_setRiskEnabled(self, platformArgs, landingInfo, subAccountId, version, riskEnabled):
    self._oprot.writeMessageBegin('setRiskEnabled', TMessageType.CALL, self._seqid)
    args = setRiskEnabled_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.version = version
    args.riskEnabled = riskEnabled
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setRiskEnabled(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setRiskEnabled_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "setRiskEnabled failed: unknown result");

  def getRiskFrameDataInfo(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_getRiskFrameDataInfo(platformArgs, landingInfo, subAccountId)
    return self.recv_getRiskFrameDataInfo()

  def send_getRiskFrameDataInfo(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('getRiskFrameDataInfo', TMessageType.CALL, self._seqid)
    args = getRiskFrameDataInfo_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRiskFrameDataInfo(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getRiskFrameDataInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRiskFrameDataInfo failed: unknown result");

  def setGeneralMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    self.send_setGeneralMarginSetting(platformArgs, landingInfo, marginSettings)
    self.recv_setGeneralMarginSetting()

  def send_setGeneralMarginSetting(self, platformArgs, landingInfo, marginSettings):
    self._oprot.writeMessageBegin('setGeneralMarginSetting', TMessageType.CALL, self._seqid)
    args = setGeneralMarginSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setGeneralMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setGeneralMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def setGeneralCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    self.send_setGeneralCommissionSetting(platformArgs, landingInfo, commissionSettings)
    self.recv_setGeneralCommissionSetting()

  def send_setGeneralCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    self._oprot.writeMessageBegin('setGeneralCommissionSetting', TMessageType.CALL, self._seqid)
    args = setGeneralCommissionSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setGeneralCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setGeneralCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def addSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    self.send_addSpecMarginSetting(platformArgs, landingInfo, marginSettings)
    self.recv_addSpecMarginSetting()

  def send_addSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    self._oprot.writeMessageBegin('addSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = addSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def addSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    self.send_addSpecCommissionSetting(platformArgs, landingInfo, commissionSettings)
    self.recv_addSpecCommissionSetting()

  def send_addSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    self._oprot.writeMessageBegin('addSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = addSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def updateSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - marginSettings
    """
    self.send_updateSpecMarginSetting(platformArgs, landingInfo, marginSettings)
    self.recv_updateSpecMarginSetting()

  def send_updateSpecMarginSetting(self, platformArgs, landingInfo, marginSettings):
    self._oprot.writeMessageBegin('updateSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = updateSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def updateSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - commissionSettings
    """
    self.send_updateSpecCommissionSetting(platformArgs, landingInfo, commissionSettings)
    self.recv_updateSpecCommissionSetting()

  def send_updateSpecCommissionSetting(self, platformArgs, landingInfo, commissionSettings):
    self._oprot.writeMessageBegin('updateSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = updateSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteSpecMarginSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - commodityId
    """
    self.send_deleteSpecMarginSetting(platformArgs, landingInfo, subAccountId, commodityId)
    self.recv_deleteSpecMarginSetting()

  def send_deleteSpecMarginSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    self._oprot.writeMessageBegin('deleteSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = deleteSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.commodityId = commodityId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteSpecCommissionSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
     - commodityId
    """
    self.send_deleteSpecCommissionSetting(platformArgs, landingInfo, subAccountId, commodityId)
    self.recv_deleteSpecCommissionSetting()

  def send_deleteSpecCommissionSetting(self, platformArgs, landingInfo, subAccountId, commodityId):
    self._oprot.writeMessageBegin('deleteSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = deleteSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.commodityId = commodityId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def queryXQGeneralMarginSettings(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_queryXQGeneralMarginSettings(platformArgs, landingInfo, subAccountId)
    return self.recv_queryXQGeneralMarginSettings()

  def send_queryXQGeneralMarginSettings(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('queryXQGeneralMarginSettings', TMessageType.CALL, self._seqid)
    args = queryXQGeneralMarginSettings_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQGeneralMarginSettings(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQGeneralMarginSettings_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQGeneralMarginSettings failed: unknown result");

  def queryXQGeneralCommissionSettings(self, platformArgs, landingInfo, subAccountId):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - subAccountId
    """
    self.send_queryXQGeneralCommissionSettings(platformArgs, landingInfo, subAccountId)
    return self.recv_queryXQGeneralCommissionSettings()

  def send_queryXQGeneralCommissionSettings(self, platformArgs, landingInfo, subAccountId):
    self._oprot.writeMessageBegin('queryXQGeneralCommissionSettings', TMessageType.CALL, self._seqid)
    args = queryXQGeneralCommissionSettings_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQGeneralCommissionSettings(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQGeneralCommissionSettings_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQGeneralCommissionSettings failed: unknown result");

  def queryXQSpecMarginSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryXQSpecMarginSettingPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryXQSpecMarginSettingPage()

  def send_queryXQSpecMarginSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQSpecMarginSettingPage', TMessageType.CALL, self._seqid)
    args = queryXQSpecMarginSettingPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQSpecMarginSettingPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQSpecMarginSettingPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQSpecMarginSettingPage failed: unknown result");

  def queryXQSpecCommissionSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryXQSpecCommissionSettingPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryXQSpecCommissionSettingPage()

  def send_queryXQSpecCommissionSettingPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQSpecCommissionSettingPage', TMessageType.CALL, self._seqid)
    args = queryXQSpecCommissionSettingPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQSpecCommissionSettingPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQSpecCommissionSettingPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQSpecCommissionSettingPage failed: unknown result");

  def queryUpsideContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryUpsideContractMarginPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryUpsideContractMarginPage()

  def send_queryUpsideContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryUpsideContractMarginPage', TMessageType.CALL, self._seqid)
    args = queryUpsideContractMarginPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryUpsideContractMarginPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryUpsideContractMarginPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryUpsideContractMarginPage failed: unknown result");

  def queryUpsideContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryUpsideContractCommissionPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryUpsideContractCommissionPage()

  def send_queryUpsideContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryUpsideContractCommissionPage', TMessageType.CALL, self._seqid)
    args = queryUpsideContractCommissionPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryUpsideContractCommissionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryUpsideContractCommissionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryUpsideContractCommissionPage failed: unknown result");

  def queryXQContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryXQContractMarginPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryXQContractMarginPage()

  def send_queryXQContractMarginPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQContractMarginPage', TMessageType.CALL, self._seqid)
    args = queryXQContractMarginPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQContractMarginPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQContractMarginPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQContractMarginPage failed: unknown result");

  def queryXQContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - landingInfo
     - queryOptions
     - pageOption
    """
    self.send_queryXQContractCommissionPage(platformArgs, landingInfo, queryOptions, pageOption)
    return self.recv_queryXQContractCommissionPage()

  def send_queryXQContractCommissionPage(self, platformArgs, landingInfo, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQContractCommissionPage', TMessageType.CALL, self._seqid)
    args = queryXQContractCommissionPage_args()
    args.platformArgs = platformArgs
    args.landingInfo = landingInfo
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQContractCommissionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQContractCommissionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQContractCommissionPage failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getHostingUserPage"] = Processor.process_getHostingUserPage
    self._processMap["heartBeat"] = Processor.process_heartBeat
    self._processMap["logout"] = Processor.process_logout
    self._processMap["getComposeViewDetails"] = Processor.process_getComposeViewDetails
    self._processMap["changeComposeViewPrecisionNumber"] = Processor.process_changeComposeViewPrecisionNumber
    self._processMap["createComposeGraph"] = Processor.process_createComposeGraph
    self._processMap["delComposeView"] = Processor.process_delComposeView
    self._processMap["getComposeViewDetailPage"] = Processor.process_getComposeViewDetailPage
    self._processMap["getSameComposeGraphsPage"] = Processor.process_getSameComposeGraphsPage
    self._processMap["addComposeViewBySearch"] = Processor.process_addComposeViewBySearch
    self._processMap["subscribeComposeViewQuotation"] = Processor.process_subscribeComposeViewQuotation
    self._processMap["unSubscribeComposeViewQuotation"] = Processor.process_unSubscribeComposeViewQuotation
    self._processMap["changeComposeViewAliasName"] = Processor.process_changeComposeViewAliasName
    self._processMap["getComposeGraphs"] = Processor.process_getComposeGraphs
    self._processMap["addComposeViewByShare"] = Processor.process_addComposeViewByShare
    self._processMap["addTradeAccount"] = Processor.process_addTradeAccount
    self._processMap["disableTradeAccount"] = Processor.process_disableTradeAccount
    self._processMap["getTradeAccountPage"] = Processor.process_getTradeAccountPage
    self._processMap["enableTradeAccount"] = Processor.process_enableTradeAccount
    self._processMap["updateTradeAccountInfo"] = Processor.process_updateTradeAccountInfo
    self._processMap["rmTradeAccount"] = Processor.process_rmTradeAccount
    self._processMap["getHostingOrderRouteTree"] = Processor.process_getHostingOrderRouteTree
    self._processMap["updateHostingOrderRouteTree"] = Processor.process_updateHostingOrderRouteTree
    self._processMap["getHostingOrderRouteTreeVersion"] = Processor.process_getHostingOrderRouteTreeVersion
    self._processMap["createXQOrder"] = Processor.process_createXQOrder
    self._processMap["batchSuspendXQOrders"] = Processor.process_batchSuspendXQOrders
    self._processMap["batchResumeXQOrders"] = Processor.process_batchResumeXQOrders
    self._processMap["batchCancelXQOrders"] = Processor.process_batchCancelXQOrders
    self._processMap["getEffectXQOrderWithTradeListPage"] = Processor.process_getEffectXQOrderWithTradeListPage
    self._processMap["getXQOrderWithTradeLists"] = Processor.process_getXQOrderWithTradeLists
    self._processMap["getXQOrderExecDetail"] = Processor.process_getXQOrderExecDetail
    self._processMap["getXQOrderHisPage"] = Processor.process_getXQOrderHisPage
    self._processMap["getXQTradeHisPage"] = Processor.process_getXQTradeHisPage
    self._processMap["getUserSetting"] = Processor.process_getUserSetting
    self._processMap["updateUserSetting"] = Processor.process_updateUserSetting
    self._processMap["getUserSettingVersion"] = Processor.process_getUserSettingVersion
    self._processMap["getSAWRUTListPage"] = Processor.process_getSAWRUTListPage
    self._processMap["getSARUTBySubAccountId"] = Processor.process_getSARUTBySubAccountId
    self._processMap["getSARUTBySubUserId"] = Processor.process_getSARUTBySubUserId
    self._processMap["assignSubAccountRelatedUsers"] = Processor.process_assignSubAccountRelatedUsers
    self._processMap["renameSubAccount"] = Processor.process_renameSubAccount
    self._processMap["createSubAccount"] = Processor.process_createSubAccount
    self._processMap["getHostingSledContractPosition"] = Processor.process_getHostingSledContractPosition
    self._processMap["getHostingSubAccountFund"] = Processor.process_getHostingSubAccountFund
    self._processMap["changeSubAccountFund"] = Processor.process_changeSubAccountFund
    self._processMap["setSubAccountCreditAmount"] = Processor.process_setSubAccountCreditAmount
    self._processMap["getAssetPositionTradeDetail"] = Processor.process_getAssetPositionTradeDetail
    self._processMap["getHostingSubAccountMoneyRecord"] = Processor.process_getHostingSubAccountMoneyRecord
    self._processMap["getSubAccountFundHistory"] = Processor.process_getSubAccountFundHistory
    self._processMap["getSubAccountPositionHistory"] = Processor.process_getSubAccountPositionHistory
    self._processMap["getSubAccountPositionHistoryTradeDetail"] = Processor.process_getSubAccountPositionHistoryTradeDetail
    self._processMap["deleteExpiredContractPosition"] = Processor.process_deleteExpiredContractPosition
    self._processMap["getTradeAccountFundNow"] = Processor.process_getTradeAccountFundNow
    self._processMap["getTradeAccountFundHis"] = Processor.process_getTradeAccountFundHis
    self._processMap["getTradeAccountSettlementInfos"] = Processor.process_getTradeAccountSettlementInfos
    self._processMap["getTradeAccountSettlementInfosWithRelatedTime"] = Processor.process_getTradeAccountSettlementInfosWithRelatedTime
    self._processMap["getTradeAccountPositionTradeDetail"] = Processor.process_getTradeAccountPositionTradeDetail
    self._processMap["reqPositionVerify"] = Processor.process_reqPositionVerify
    self._processMap["reqPositionDifference"] = Processor.process_reqPositionDifference
    self._processMap["manualInputPosition"] = Processor.process_manualInputPosition
    self._processMap["reqPositionUnassigned"] = Processor.process_reqPositionUnassigned
    self._processMap["assignPosition"] = Processor.process_assignPosition
    self._processMap["reqPositionEditLock"] = Processor.process_reqPositionEditLock
    self._processMap["addPositionEditLock"] = Processor.process_addPositionEditLock
    self._processMap["removePositionEditLock"] = Processor.process_removePositionEditLock
    self._processMap["reqDailyPositionDifference"] = Processor.process_reqDailyPositionDifference
    self._processMap["updateDailyPositionDifferenceNote"] = Processor.process_updateDailyPositionDifferenceNote
    self._processMap["reqPositionAssigned"] = Processor.process_reqPositionAssigned
    self._processMap["contructCompose"] = Processor.process_contructCompose
    self._processMap["disassembleCompose"] = Processor.process_disassembleCompose
    self._processMap["batchClosePosition"] = Processor.process_batchClosePosition
    self._processMap["recoverClosedPosition"] = Processor.process_recoverClosedPosition
    self._processMap["mergeToCompose"] = Processor.process_mergeToCompose
    self._processMap["deleteExpiredStatContractPosition"] = Processor.process_deleteExpiredStatContractPosition
    self._processMap["queryStatPositionSummaryPage"] = Processor.process_queryStatPositionSummaryPage
    self._processMap["queryStatPositionItemPage"] = Processor.process_queryStatPositionItemPage
    self._processMap["queryCurrentDayStatClosedPositionPage"] = Processor.process_queryCurrentDayStatClosedPositionPage
    self._processMap["queryStatClosedPositionDetail"] = Processor.process_queryStatClosedPositionDetail
    self._processMap["queryArchivedClosedPositionPage"] = Processor.process_queryArchivedClosedPositionPage
    self._processMap["queryArchivedClosedPositionDetail"] = Processor.process_queryArchivedClosedPositionDetail
    self._processMap["queryStatPositionSummaryExPage"] = Processor.process_queryStatPositionSummaryExPage
    self._processMap["queryStatPositionUnitPage"] = Processor.process_queryStatPositionUnitPage
    self._processMap["queryHistoryClosedPositionPage"] = Processor.process_queryHistoryClosedPositionPage
    self._processMap["queryHistoryClosedPositionDetail"] = Processor.process_queryHistoryClosedPositionDetail
    self._processMap["getXQTradeLameTaskNotePage"] = Processor.process_getXQTradeLameTaskNotePage
    self._processMap["batchDeleteXQTradeLameTaskNotes"] = Processor.process_batchDeleteXQTradeLameTaskNotes
    self._processMap["queryMailBoxMessage"] = Processor.process_queryMailBoxMessage
    self._processMap["markMessageAsRead"] = Processor.process_markMessageAsRead
    self._processMap["getAllSupportedItems"] = Processor.process_getAllSupportedItems
    self._processMap["getRiskRuleJointVersion"] = Processor.process_getRiskRuleJointVersion
    self._processMap["getRiskRuleJoint"] = Processor.process_getRiskRuleJoint
    self._processMap["batchSetSupportedItems"] = Processor.process_batchSetSupportedItems
    self._processMap["batchSetTradedCommodityItems"] = Processor.process_batchSetTradedCommodityItems
    self._processMap["batchSetGlobalRules"] = Processor.process_batchSetGlobalRules
    self._processMap["batchSetCommodityRules"] = Processor.process_batchSetCommodityRules
    self._processMap["setRiskEnabled"] = Processor.process_setRiskEnabled
    self._processMap["getRiskFrameDataInfo"] = Processor.process_getRiskFrameDataInfo
    self._processMap["setGeneralMarginSetting"] = Processor.process_setGeneralMarginSetting
    self._processMap["setGeneralCommissionSetting"] = Processor.process_setGeneralCommissionSetting
    self._processMap["addSpecMarginSetting"] = Processor.process_addSpecMarginSetting
    self._processMap["addSpecCommissionSetting"] = Processor.process_addSpecCommissionSetting
    self._processMap["updateSpecMarginSetting"] = Processor.process_updateSpecMarginSetting
    self._processMap["updateSpecCommissionSetting"] = Processor.process_updateSpecCommissionSetting
    self._processMap["deleteSpecMarginSetting"] = Processor.process_deleteSpecMarginSetting
    self._processMap["deleteSpecCommissionSetting"] = Processor.process_deleteSpecCommissionSetting
    self._processMap["queryXQGeneralMarginSettings"] = Processor.process_queryXQGeneralMarginSettings
    self._processMap["queryXQGeneralCommissionSettings"] = Processor.process_queryXQGeneralCommissionSettings
    self._processMap["queryXQSpecMarginSettingPage"] = Processor.process_queryXQSpecMarginSettingPage
    self._processMap["queryXQSpecCommissionSettingPage"] = Processor.process_queryXQSpecCommissionSettingPage
    self._processMap["queryUpsideContractMarginPage"] = Processor.process_queryUpsideContractMarginPage
    self._processMap["queryUpsideContractCommissionPage"] = Processor.process_queryUpsideContractCommissionPage
    self._processMap["queryXQContractMarginPage"] = Processor.process_queryXQContractMarginPage
    self._processMap["queryXQContractCommissionPage"] = Processor.process_queryXQContractCommissionPage

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getHostingUserPage(self, seqid, iprot, oprot):
    args = getHostingUserPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingUserPage_result()
    try:
      result.success = self._handler.getHostingUserPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingUserPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_heartBeat(self, seqid, iprot, oprot):
    args = heartBeat_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = heartBeat_result()
    try:
      self._handler.heartBeat(args.platformArgs, args.landingInfo)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("heartBeat", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logout(self, seqid, iprot, oprot):
    args = logout_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logout_result()
    try:
      self._handler.logout(args.platformArgs, args.landingInfo)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("logout", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getComposeViewDetails(self, seqid, iprot, oprot):
    args = getComposeViewDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getComposeViewDetails_result()
    try:
      result.success = self._handler.getComposeViewDetails(args.platformArgs, args.landingInfo, args.composeGraphIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getComposeViewDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeComposeViewPrecisionNumber(self, seqid, iprot, oprot):
    args = changeComposeViewPrecisionNumber_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeComposeViewPrecisionNumber_result()
    try:
      self._handler.changeComposeViewPrecisionNumber(args.platformArgs, args.landingInfo, args.composeGraphId, args.precisionNumber)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("changeComposeViewPrecisionNumber", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createComposeGraph(self, seqid, iprot, oprot):
    args = createComposeGraph_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createComposeGraph_result()
    try:
      result.success = self._handler.createComposeGraph(args.platformArgs, args.landingInfo, args.newGraph, args.aliasName, args.precisionNumber)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("createComposeGraph", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_delComposeView(self, seqid, iprot, oprot):
    args = delComposeView_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = delComposeView_result()
    try:
      self._handler.delComposeView(args.platformArgs, args.landingInfo, args.composeGraphId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("delComposeView", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getComposeViewDetailPage(self, seqid, iprot, oprot):
    args = getComposeViewDetailPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getComposeViewDetailPage_result()
    try:
      result.success = self._handler.getComposeViewDetailPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getComposeViewDetailPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSameComposeGraphsPage(self, seqid, iprot, oprot):
    args = getSameComposeGraphsPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSameComposeGraphsPage_result()
    try:
      result.success = self._handler.getSameComposeGraphsPage(args.platformArgs, args.landingInfo, args.graph, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSameComposeGraphsPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addComposeViewBySearch(self, seqid, iprot, oprot):
    args = addComposeViewBySearch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addComposeViewBySearch_result()
    try:
      self._handler.addComposeViewBySearch(args.platformArgs, args.landingInfo, args.composeGraphId, args.composeGraphKey, args.aliasName, args.precisionNumber)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addComposeViewBySearch", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_subscribeComposeViewQuotation(self, seqid, iprot, oprot):
    args = subscribeComposeViewQuotation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = subscribeComposeViewQuotation_result()
    try:
      self._handler.subscribeComposeViewQuotation(args.platformArgs, args.landingInfo, args.composeGraphId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("subscribeComposeViewQuotation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unSubscribeComposeViewQuotation(self, seqid, iprot, oprot):
    args = unSubscribeComposeViewQuotation_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unSubscribeComposeViewQuotation_result()
    try:
      self._handler.unSubscribeComposeViewQuotation(args.platformArgs, args.landingInfo, args.composeGraphId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("unSubscribeComposeViewQuotation", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeComposeViewAliasName(self, seqid, iprot, oprot):
    args = changeComposeViewAliasName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeComposeViewAliasName_result()
    try:
      self._handler.changeComposeViewAliasName(args.platformArgs, args.landingInfo, args.composeGraphId, args.aliasName)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("changeComposeViewAliasName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getComposeGraphs(self, seqid, iprot, oprot):
    args = getComposeGraphs_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getComposeGraphs_result()
    try:
      result.success = self._handler.getComposeGraphs(args.platformArgs, args.landingInfo, args.composeGraphIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getComposeGraphs", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addComposeViewByShare(self, seqid, iprot, oprot):
    args = addComposeViewByShare_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addComposeViewByShare_result()
    try:
      self._handler.addComposeViewByShare(args.platformArgs, args.landingInfo, args.composeGraphId, args.aliasName, args.precisionNumber)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addComposeViewByShare", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addTradeAccount(self, seqid, iprot, oprot):
    args = addTradeAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addTradeAccount_result()
    try:
      result.success = self._handler.addTradeAccount(args.platformArgs, args.landingInfo, args.newAccount)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addTradeAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disableTradeAccount(self, seqid, iprot, oprot):
    args = disableTradeAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disableTradeAccount_result()
    try:
      self._handler.disableTradeAccount(args.platformArgs, args.landingInfo, args.tradeAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("disableTradeAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountPage(self, seqid, iprot, oprot):
    args = getTradeAccountPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountPage_result()
    try:
      result.success = self._handler.getTradeAccountPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enableTradeAccount(self, seqid, iprot, oprot):
    args = enableTradeAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enableTradeAccount_result()
    try:
      self._handler.enableTradeAccount(args.platformArgs, args.landingInfo, args.tradeAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("enableTradeAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateTradeAccountInfo(self, seqid, iprot, oprot):
    args = updateTradeAccountInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateTradeAccountInfo_result()
    try:
      self._handler.updateTradeAccountInfo(args.platformArgs, args.landingInfo, args.updateAccount)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateTradeAccountInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_rmTradeAccount(self, seqid, iprot, oprot):
    args = rmTradeAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = rmTradeAccount_result()
    try:
      self._handler.rmTradeAccount(args.platformArgs, args.landingInfo, args.tradeAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("rmTradeAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getHostingOrderRouteTree(self, seqid, iprot, oprot):
    args = getHostingOrderRouteTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingOrderRouteTree_result()
    try:
      result.success = self._handler.getHostingOrderRouteTree(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingOrderRouteTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateHostingOrderRouteTree(self, seqid, iprot, oprot):
    args = updateHostingOrderRouteTree_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateHostingOrderRouteTree_result()
    try:
      self._handler.updateHostingOrderRouteTree(args.platformArgs, args.landingInfo, args.subAccountId, args.routeTree)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateHostingOrderRouteTree", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getHostingOrderRouteTreeVersion(self, seqid, iprot, oprot):
    args = getHostingOrderRouteTreeVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingOrderRouteTreeVersion_result()
    try:
      result.success = self._handler.getHostingOrderRouteTreeVersion(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingOrderRouteTreeVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createXQOrder(self, seqid, iprot, oprot):
    args = createXQOrder_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createXQOrder_result()
    try:
      self._handler.createXQOrder(args.platformArgs, args.landingInfo, args.subAccountId, args.orderId, args.orderType, args.orderTarget, args.orderDetail)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("createXQOrder", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchSuspendXQOrders(self, seqid, iprot, oprot):
    args = batchSuspendXQOrders_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchSuspendXQOrders_result()
    try:
      result.success = self._handler.batchSuspendXQOrders(args.platformArgs, args.landingInfo, args.orderIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchSuspendXQOrders", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchResumeXQOrders(self, seqid, iprot, oprot):
    args = batchResumeXQOrders_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchResumeXQOrders_result()
    try:
      result.success = self._handler.batchResumeXQOrders(args.platformArgs, args.landingInfo, args.orderIds, args.resumeModes)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchResumeXQOrders", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchCancelXQOrders(self, seqid, iprot, oprot):
    args = batchCancelXQOrders_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchCancelXQOrders_result()
    try:
      result.success = self._handler.batchCancelXQOrders(args.platformArgs, args.landingInfo, args.orderIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchCancelXQOrders", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getEffectXQOrderWithTradeListPage(self, seqid, iprot, oprot):
    args = getEffectXQOrderWithTradeListPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getEffectXQOrderWithTradeListPage_result()
    try:
      result.success = self._handler.getEffectXQOrderWithTradeListPage(args.platformArgs, args.landingInfo, args.qryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getEffectXQOrderWithTradeListPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXQOrderWithTradeLists(self, seqid, iprot, oprot):
    args = getXQOrderWithTradeLists_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXQOrderWithTradeLists_result()
    try:
      result.success = self._handler.getXQOrderWithTradeLists(args.platformArgs, args.landingInfo, args.orderIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getXQOrderWithTradeLists", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXQOrderExecDetail(self, seqid, iprot, oprot):
    args = getXQOrderExecDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXQOrderExecDetail_result()
    try:
      result.success = self._handler.getXQOrderExecDetail(args.platformArgs, args.landingInfo, args.orderId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getXQOrderExecDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXQOrderHisPage(self, seqid, iprot, oprot):
    args = getXQOrderHisPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXQOrderHisPage_result()
    try:
      result.success = self._handler.getXQOrderHisPage(args.platformArgs, args.landingInfo, args.qryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getXQOrderHisPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXQTradeHisPage(self, seqid, iprot, oprot):
    args = getXQTradeHisPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXQTradeHisPage_result()
    try:
      result.success = self._handler.getXQTradeHisPage(args.platformArgs, args.landingInfo, args.qryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getXQTradeHisPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserSetting(self, seqid, iprot, oprot):
    args = getUserSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserSetting_result()
    try:
      result.success = self._handler.getUserSetting(args.platformArgs, args.landingInfo, args.key)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getUserSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUserSetting(self, seqid, iprot, oprot):
    args = updateUserSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserSetting_result()
    try:
      self._handler.updateUserSetting(args.platformArgs, args.landingInfo, args.key, args.setting)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateUserSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserSettingVersion(self, seqid, iprot, oprot):
    args = getUserSettingVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserSettingVersion_result()
    try:
      result.success = self._handler.getUserSettingVersion(args.platformArgs, args.landingInfo, args.key)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getUserSettingVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSAWRUTListPage(self, seqid, iprot, oprot):
    args = getSAWRUTListPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSAWRUTListPage_result()
    try:
      result.success = self._handler.getSAWRUTListPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSAWRUTListPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSARUTBySubAccountId(self, seqid, iprot, oprot):
    args = getSARUTBySubAccountId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSARUTBySubAccountId_result()
    try:
      result.success = self._handler.getSARUTBySubAccountId(args.platformArgs, args.landingInfo, args.subAccountIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSARUTBySubAccountId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSARUTBySubUserId(self, seqid, iprot, oprot):
    args = getSARUTBySubUserId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSARUTBySubUserId_result()
    try:
      result.success = self._handler.getSARUTBySubUserId(args.platformArgs, args.landingInfo, args.subUserIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSARUTBySubUserId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_assignSubAccountRelatedUsers(self, seqid, iprot, oprot):
    args = assignSubAccountRelatedUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = assignSubAccountRelatedUsers_result()
    try:
      self._handler.assignSubAccountRelatedUsers(args.platformArgs, args.landingInfo, args.subAccountId, args.relatedSubUserIds, args.unRelatedSubUserIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("assignSubAccountRelatedUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_renameSubAccount(self, seqid, iprot, oprot):
    args = renameSubAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = renameSubAccount_result()
    try:
      self._handler.renameSubAccount(args.platformArgs, args.landingInfo, args.subAccountId, args.subAccountName)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("renameSubAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createSubAccount(self, seqid, iprot, oprot):
    args = createSubAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createSubAccount_result()
    try:
      result.success = self._handler.createSubAccount(args.platformArgs, args.landingInfo, args.newSubAccount)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("createSubAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getHostingSledContractPosition(self, seqid, iprot, oprot):
    args = getHostingSledContractPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingSledContractPosition_result()
    try:
      result.success = self._handler.getHostingSledContractPosition(args.platformArgs, args.landingInfo, args.option)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingSledContractPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getHostingSubAccountFund(self, seqid, iprot, oprot):
    args = getHostingSubAccountFund_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingSubAccountFund_result()
    try:
      result.success = self._handler.getHostingSubAccountFund(args.platformArgs, args.landingInfo, args.option)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingSubAccountFund", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeSubAccountFund(self, seqid, iprot, oprot):
    args = changeSubAccountFund_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeSubAccountFund_result()
    try:
      result.success = self._handler.changeSubAccountFund(args.platformArgs, args.landingInfo, args.fundChange)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("changeSubAccountFund", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setSubAccountCreditAmount(self, seqid, iprot, oprot):
    args = setSubAccountCreditAmount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setSubAccountCreditAmount_result()
    try:
      result.success = self._handler.setSubAccountCreditAmount(args.platformArgs, args.landingInfo, args.amountChange)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setSubAccountCreditAmount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAssetPositionTradeDetail(self, seqid, iprot, oprot):
    args = getAssetPositionTradeDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAssetPositionTradeDetail_result()
    try:
      result.success = self._handler.getAssetPositionTradeDetail(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getAssetPositionTradeDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getHostingSubAccountMoneyRecord(self, seqid, iprot, oprot):
    args = getHostingSubAccountMoneyRecord_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getHostingSubAccountMoneyRecord_result()
    try:
      result.success = self._handler.getHostingSubAccountMoneyRecord(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getHostingSubAccountMoneyRecord", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSubAccountFundHistory(self, seqid, iprot, oprot):
    args = getSubAccountFundHistory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSubAccountFundHistory_result()
    try:
      result.success = self._handler.getSubAccountFundHistory(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSubAccountFundHistory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSubAccountPositionHistory(self, seqid, iprot, oprot):
    args = getSubAccountPositionHistory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSubAccountPositionHistory_result()
    try:
      result.success = self._handler.getSubAccountPositionHistory(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSubAccountPositionHistory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSubAccountPositionHistoryTradeDetail(self, seqid, iprot, oprot):
    args = getSubAccountPositionHistoryTradeDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSubAccountPositionHistoryTradeDetail_result()
    try:
      result.success = self._handler.getSubAccountPositionHistoryTradeDetail(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getSubAccountPositionHistoryTradeDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteExpiredContractPosition(self, seqid, iprot, oprot):
    args = deleteExpiredContractPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteExpiredContractPosition_result()
    try:
      self._handler.deleteExpiredContractPosition(args.platformArgs, args.landingInfo, args.subAccountId, args.sledContractId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteExpiredContractPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountFundNow(self, seqid, iprot, oprot):
    args = getTradeAccountFundNow_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountFundNow_result()
    try:
      result.success = self._handler.getTradeAccountFundNow(args.platformArgs, args.landingInfo, args.tradeAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountFundNow", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountFundHis(self, seqid, iprot, oprot):
    args = getTradeAccountFundHis_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountFundHis_result()
    try:
      result.success = self._handler.getTradeAccountFundHis(args.platformArgs, args.landingInfo, args.tradeAccountId, args.fundDateBegin, args.fundDateEnd)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountFundHis", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountSettlementInfos(self, seqid, iprot, oprot):
    args = getTradeAccountSettlementInfos_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountSettlementInfos_result()
    try:
      result.success = self._handler.getTradeAccountSettlementInfos(args.platformArgs, args.landingInfo, args.tradeAccountId, args.settlementDateBegin, args.settlementDateEnd)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountSettlementInfos", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountSettlementInfosWithRelatedTime(self, seqid, iprot, oprot):
    args = getTradeAccountSettlementInfosWithRelatedTime_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountSettlementInfosWithRelatedTime_result()
    try:
      result.success = self._handler.getTradeAccountSettlementInfosWithRelatedTime(args.platformArgs, args.landingInfo, args.tradeAccountId, args.settlementDateBegin, args.settlementDateEnd)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountSettlementInfosWithRelatedTime", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getTradeAccountPositionTradeDetail(self, seqid, iprot, oprot):
    args = getTradeAccountPositionTradeDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getTradeAccountPositionTradeDetail_result()
    try:
      result.success = self._handler.getTradeAccountPositionTradeDetail(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getTradeAccountPositionTradeDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqPositionVerify(self, seqid, iprot, oprot):
    args = reqPositionVerify_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqPositionVerify_result()
    try:
      result.success = self._handler.reqPositionVerify(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqPositionVerify", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqPositionDifference(self, seqid, iprot, oprot):
    args = reqPositionDifference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqPositionDifference_result()
    try:
      result.success = self._handler.reqPositionDifference(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqPositionDifference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_manualInputPosition(self, seqid, iprot, oprot):
    args = manualInputPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = manualInputPosition_result()
    try:
      result.success = self._handler.manualInputPosition(args.platformArgs, args.landingInfo, args.positionManualInputs)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("manualInputPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqPositionUnassigned(self, seqid, iprot, oprot):
    args = reqPositionUnassigned_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqPositionUnassigned_result()
    try:
      result.success = self._handler.reqPositionUnassigned(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqPositionUnassigned", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_assignPosition(self, seqid, iprot, oprot):
    args = assignPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = assignPosition_result()
    try:
      result.success = self._handler.assignPosition(args.platformArgs, args.landingInfo, args.assignOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("assignPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqPositionEditLock(self, seqid, iprot, oprot):
    args = reqPositionEditLock_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqPositionEditLock_result()
    try:
      result.success = self._handler.reqPositionEditLock(args.platformArgs, args.landingInfo, args.lockKey)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqPositionEditLock", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addPositionEditLock(self, seqid, iprot, oprot):
    args = addPositionEditLock_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addPositionEditLock_result()
    try:
      self._handler.addPositionEditLock(args.platformArgs, args.landingInfo, args.positionEditLock)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addPositionEditLock", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removePositionEditLock(self, seqid, iprot, oprot):
    args = removePositionEditLock_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removePositionEditLock_result()
    try:
      self._handler.removePositionEditLock(args.platformArgs, args.landingInfo, args.positionEditLock)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("removePositionEditLock", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqDailyPositionDifference(self, seqid, iprot, oprot):
    args = reqDailyPositionDifference_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqDailyPositionDifference_result()
    try:
      result.success = self._handler.reqDailyPositionDifference(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqDailyPositionDifference", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateDailyPositionDifferenceNote(self, seqid, iprot, oprot):
    args = updateDailyPositionDifferenceNote_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateDailyPositionDifferenceNote_result()
    try:
      self._handler.updateDailyPositionDifferenceNote(args.platformArgs, args.landingInfo, args.difference)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateDailyPositionDifferenceNote", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_reqPositionAssigned(self, seqid, iprot, oprot):
    args = reqPositionAssigned_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = reqPositionAssigned_result()
    try:
      result.success = self._handler.reqPositionAssigned(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("reqPositionAssigned", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_contructCompose(self, seqid, iprot, oprot):
    args = contructCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = contructCompose_result()
    try:
      self._handler.contructCompose(args.platformArgs, args.landingInfo, args.contructComposeReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("contructCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disassembleCompose(self, seqid, iprot, oprot):
    args = disassembleCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disassembleCompose_result()
    try:
      self._handler.disassembleCompose(args.platformArgs, args.landingInfo, args.disassembleComposePositionReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("disassembleCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchClosePosition(self, seqid, iprot, oprot):
    args = batchClosePosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchClosePosition_result()
    try:
      self._handler.batchClosePosition(args.platformArgs, args.landingInfo, args.batchClosedPositionReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchClosePosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recoverClosedPosition(self, seqid, iprot, oprot):
    args = recoverClosedPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recoverClosedPosition_result()
    try:
      self._handler.recoverClosedPosition(args.platformArgs, args.landingInfo, args.subAccountId, args.targetKey, args.targetType)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("recoverClosedPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mergeToCompose(self, seqid, iprot, oprot):
    args = mergeToCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mergeToCompose_result()
    try:
      self._handler.mergeToCompose(args.platformArgs, args.landingInfo, args.mergeToComposeReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("mergeToCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteExpiredStatContractPosition(self, seqid, iprot, oprot):
    args = deleteExpiredStatContractPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteExpiredStatContractPosition_result()
    try:
      self._handler.deleteExpiredStatContractPosition(args.platformArgs, args.landingInfo, args.subAccountId, args.sledContractId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteExpiredStatContractPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionSummaryPage(self, seqid, iprot, oprot):
    args = queryStatPositionSummaryPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionSummaryPage_result()
    try:
      result.success = self._handler.queryStatPositionSummaryPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionSummaryPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionItemPage(self, seqid, iprot, oprot):
    args = queryStatPositionItemPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionItemPage_result()
    try:
      result.success = self._handler.queryStatPositionItemPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionItemPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryCurrentDayStatClosedPositionPage(self, seqid, iprot, oprot):
    args = queryCurrentDayStatClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryCurrentDayStatClosedPositionPage_result()
    try:
      result.success = self._handler.queryCurrentDayStatClosedPositionPage(args.platformArgs, args.landingInfo, args.subAccountId, args.targetKey, args.targetType)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryCurrentDayStatClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryStatClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatClosedPositionDetail_result()
    try:
      result.success = self._handler.queryStatClosedPositionDetail(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryArchivedClosedPositionPage(self, seqid, iprot, oprot):
    args = queryArchivedClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryArchivedClosedPositionPage_result()
    try:
      result.success = self._handler.queryArchivedClosedPositionPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryArchivedClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryArchivedClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryArchivedClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryArchivedClosedPositionDetail_result()
    try:
      result.success = self._handler.queryArchivedClosedPositionDetail(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryArchivedClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionSummaryExPage(self, seqid, iprot, oprot):
    args = queryStatPositionSummaryExPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionSummaryExPage_result()
    try:
      result.success = self._handler.queryStatPositionSummaryExPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionSummaryExPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionUnitPage(self, seqid, iprot, oprot):
    args = queryStatPositionUnitPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionUnitPage_result()
    try:
      result.success = self._handler.queryStatPositionUnitPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionUnitPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryHistoryClosedPositionPage(self, seqid, iprot, oprot):
    args = queryHistoryClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryHistoryClosedPositionPage_result()
    try:
      result.success = self._handler.queryHistoryClosedPositionPage(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryHistoryClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryHistoryClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryHistoryClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryHistoryClosedPositionDetail_result()
    try:
      result.success = self._handler.queryHistoryClosedPositionDetail(args.platformArgs, args.landingInfo, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryHistoryClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getXQTradeLameTaskNotePage(self, seqid, iprot, oprot):
    args = getXQTradeLameTaskNotePage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getXQTradeLameTaskNotePage_result()
    try:
      result.success = self._handler.getXQTradeLameTaskNotePage(args.platformArgs, args.landingInfo, args.qryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getXQTradeLameTaskNotePage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchDeleteXQTradeLameTaskNotes(self, seqid, iprot, oprot):
    args = batchDeleteXQTradeLameTaskNotes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchDeleteXQTradeLameTaskNotes_result()
    try:
      result.success = self._handler.batchDeleteXQTradeLameTaskNotes(args.platformArgs, args.landingInfo, args.subAccountId, args.xqTradeIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchDeleteXQTradeLameTaskNotes", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryMailBoxMessage(self, seqid, iprot, oprot):
    args = queryMailBoxMessage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryMailBoxMessage_result()
    try:
      result.success = self._handler.queryMailBoxMessage(args.platformArgs, args.landingInfo, args.option, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryMailBoxMessage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_markMessageAsRead(self, seqid, iprot, oprot):
    args = markMessageAsRead_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = markMessageAsRead_result()
    try:
      result.success = self._handler.markMessageAsRead(args.platformArgs, args.landingInfo, args.hostingMessageIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("markMessageAsRead", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllSupportedItems(self, seqid, iprot, oprot):
    args = getAllSupportedItems_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllSupportedItems_result()
    try:
      result.success = self._handler.getAllSupportedItems(args.platformArgs, args.landingInfo)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getAllSupportedItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRiskRuleJointVersion(self, seqid, iprot, oprot):
    args = getRiskRuleJointVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRiskRuleJointVersion_result()
    try:
      result.success = self._handler.getRiskRuleJointVersion(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getRiskRuleJointVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRiskRuleJoint(self, seqid, iprot, oprot):
    args = getRiskRuleJoint_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRiskRuleJoint_result()
    try:
      result.success = self._handler.getRiskRuleJoint(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getRiskRuleJoint", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchSetSupportedItems(self, seqid, iprot, oprot):
    args = batchSetSupportedItems_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchSetSupportedItems_result()
    try:
      result.success = self._handler.batchSetSupportedItems(args.platformArgs, args.landingInfo, args.subAccountId, args.version, args.openedItemIds, args.closedItemIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchSetSupportedItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchSetTradedCommodityItems(self, seqid, iprot, oprot):
    args = batchSetTradedCommodityItems_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchSetTradedCommodityItems_result()
    try:
      result.success = self._handler.batchSetTradedCommodityItems(args.platformArgs, args.landingInfo, args.subAccountId, args.version, args.enabledCommodityIds, args.disabledCommodityIds)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchSetTradedCommodityItems", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchSetGlobalRules(self, seqid, iprot, oprot):
    args = batchSetGlobalRules_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchSetGlobalRules_result()
    try:
      result.success = self._handler.batchSetGlobalRules(args.platformArgs, args.landingInfo, args.subAccountId, args.version, args.ruleItems)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchSetGlobalRules", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchSetCommodityRules(self, seqid, iprot, oprot):
    args = batchSetCommodityRules_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchSetCommodityRules_result()
    try:
      result.success = self._handler.batchSetCommodityRules(args.platformArgs, args.landingInfo, args.subAccountId, args.version, args.rules)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchSetCommodityRules", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setRiskEnabled(self, seqid, iprot, oprot):
    args = setRiskEnabled_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setRiskEnabled_result()
    try:
      result.success = self._handler.setRiskEnabled(args.platformArgs, args.landingInfo, args.subAccountId, args.version, args.riskEnabled)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setRiskEnabled", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRiskFrameDataInfo(self, seqid, iprot, oprot):
    args = getRiskFrameDataInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRiskFrameDataInfo_result()
    try:
      result.success = self._handler.getRiskFrameDataInfo(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("getRiskFrameDataInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setGeneralMarginSetting(self, seqid, iprot, oprot):
    args = setGeneralMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setGeneralMarginSetting_result()
    try:
      self._handler.setGeneralMarginSetting(args.platformArgs, args.landingInfo, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setGeneralMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setGeneralCommissionSetting(self, seqid, iprot, oprot):
    args = setGeneralCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setGeneralCommissionSetting_result()
    try:
      self._handler.setGeneralCommissionSetting(args.platformArgs, args.landingInfo, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setGeneralCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSpecMarginSetting(self, seqid, iprot, oprot):
    args = addSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSpecMarginSetting_result()
    try:
      self._handler.addSpecMarginSetting(args.platformArgs, args.landingInfo, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSpecCommissionSetting(self, seqid, iprot, oprot):
    args = addSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSpecCommissionSetting_result()
    try:
      self._handler.addSpecCommissionSetting(args.platformArgs, args.landingInfo, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSpecMarginSetting(self, seqid, iprot, oprot):
    args = updateSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSpecMarginSetting_result()
    try:
      self._handler.updateSpecMarginSetting(args.platformArgs, args.landingInfo, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSpecCommissionSetting(self, seqid, iprot, oprot):
    args = updateSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSpecCommissionSetting_result()
    try:
      self._handler.updateSpecCommissionSetting(args.platformArgs, args.landingInfo, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteSpecMarginSetting(self, seqid, iprot, oprot):
    args = deleteSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteSpecMarginSetting_result()
    try:
      self._handler.deleteSpecMarginSetting(args.platformArgs, args.landingInfo, args.subAccountId, args.commodityId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteSpecCommissionSetting(self, seqid, iprot, oprot):
    args = deleteSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteSpecCommissionSetting_result()
    try:
      self._handler.deleteSpecCommissionSetting(args.platformArgs, args.landingInfo, args.subAccountId, args.commodityId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQGeneralMarginSettings(self, seqid, iprot, oprot):
    args = queryXQGeneralMarginSettings_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQGeneralMarginSettings_result()
    try:
      result.success = self._handler.queryXQGeneralMarginSettings(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQGeneralMarginSettings", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQGeneralCommissionSettings(self, seqid, iprot, oprot):
    args = queryXQGeneralCommissionSettings_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQGeneralCommissionSettings_result()
    try:
      result.success = self._handler.queryXQGeneralCommissionSettings(args.platformArgs, args.landingInfo, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQGeneralCommissionSettings", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQSpecMarginSettingPage(self, seqid, iprot, oprot):
    args = queryXQSpecMarginSettingPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQSpecMarginSettingPage_result()
    try:
      result.success = self._handler.queryXQSpecMarginSettingPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQSpecMarginSettingPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQSpecCommissionSettingPage(self, seqid, iprot, oprot):
    args = queryXQSpecCommissionSettingPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQSpecCommissionSettingPage_result()
    try:
      result.success = self._handler.queryXQSpecCommissionSettingPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQSpecCommissionSettingPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryUpsideContractMarginPage(self, seqid, iprot, oprot):
    args = queryUpsideContractMarginPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryUpsideContractMarginPage_result()
    try:
      result.success = self._handler.queryUpsideContractMarginPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryUpsideContractMarginPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryUpsideContractCommissionPage(self, seqid, iprot, oprot):
    args = queryUpsideContractCommissionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryUpsideContractCommissionPage_result()
    try:
      result.success = self._handler.queryUpsideContractCommissionPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryUpsideContractCommissionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQContractMarginPage(self, seqid, iprot, oprot):
    args = queryXQContractMarginPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQContractMarginPage_result()
    try:
      result.success = self._handler.queryXQContractMarginPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQContractMarginPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQContractCommissionPage(self, seqid, iprot, oprot):
    args = queryXQContractCommissionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQContractCommissionPage_result()
    try:
      result.success = self._handler.queryXQContractCommissionPage(args.platformArgs, args.landingInfo, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQContractCommissionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getHostingUserPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.ttypes.QueryHostingUserOption, xueqiao.trade.hosting.ttypes.QueryHostingUserOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.ttypes.QueryHostingUserOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingUserPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingUserPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.ttypes.QueryHostingUserPage, xueqiao.trade.hosting.ttypes.QueryHostingUserPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.ttypes.QueryHostingUserPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingUserPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class heartBeat_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, landingInfo=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('heartBeat_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class heartBeat_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('heartBeat_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, landingInfo=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeViewDetails_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    None, # 3
    (4, TType.SET, 'composeGraphIds', (TType.I64,None), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphIds = composeGraphIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.composeGraphIds = set()
          (_etype103, _size100) = iprot.readSetBegin()
          for _i104 in xrange(_size100):
            _elem105 = iprot.readI64();
            self.composeGraphIds.add(_elem105)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeViewDetails_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphIds is not None:
      oprot.writeFieldBegin('composeGraphIds', TType.SET, 4)
      oprot.writeSetBegin(TType.I64, len(self.composeGraphIds))
      for iter106 in self.composeGraphIds:
        oprot.writeI64(iter106)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeViewDetails_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(HostingComposeViewDetail, HostingComposeViewDetail.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype108, _vtype109, _size107 ) = iprot.readMapBegin()
          for _i111 in xrange(_size107):
            _key112 = iprot.readI64();
            _val113 = HostingComposeViewDetail()
            _val113.read(iprot)
            self.success[_key112] = _val113
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeViewDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter114,viter115 in self.success.items():
        oprot.writeI64(kiter114)
        viter115.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeComposeViewPrecisionNumber_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
   - precisionNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    None, # 3
    (4, TType.I64, 'composeGraphId', None, None, ), # 4
    (5, TType.I16, 'precisionNumber', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None, precisionNumber=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId
    self.precisionNumber = precisionNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.precisionNumber = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeComposeViewPrecisionNumber_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 4)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.precisionNumber is not None:
      oprot.writeFieldBegin('precisionNumber', TType.I16, 5)
      oprot.writeI16(self.precisionNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeComposeViewPrecisionNumber_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeComposeViewPrecisionNumber_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createComposeGraph_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - newGraph
   - aliasName
   - precisionNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'newGraph', (xueqiao.trade.hosting.ttypes.HostingComposeGraph, xueqiao.trade.hosting.ttypes.HostingComposeGraph.thrift_spec), None, ), # 3
    (4, TType.STRING, 'aliasName', None, None, ), # 4
    (5, TType.I16, 'precisionNumber', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, newGraph=None, aliasName=None, precisionNumber=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.newGraph = newGraph
    self.aliasName = aliasName
    self.precisionNumber = precisionNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.newGraph = xueqiao.trade.hosting.ttypes.HostingComposeGraph()
          self.newGraph.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.aliasName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.precisionNumber = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createComposeGraph_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.newGraph is not None:
      oprot.writeFieldBegin('newGraph', TType.STRUCT, 3)
      self.newGraph.write(oprot)
      oprot.writeFieldEnd()
    if self.aliasName is not None:
      oprot.writeFieldBegin('aliasName', TType.STRING, 4)
      oprot.writeString(self.aliasName)
      oprot.writeFieldEnd()
    if self.precisionNumber is not None:
      oprot.writeFieldBegin('precisionNumber', TType.I16, 5)
      oprot.writeI16(self.precisionNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createComposeGraph_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createComposeGraph_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delComposeView_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delComposeView_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delComposeView_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delComposeView_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeViewDetailPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (QueryHostingComposeViewDetailOption, QueryHostingComposeViewDetailOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = QueryHostingComposeViewDetailOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeViewDetailPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeViewDetailPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (QueryHostingComposeViewDetailPage, QueryHostingComposeViewDetailPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = QueryHostingComposeViewDetailPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeViewDetailPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSameComposeGraphsPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - graph
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'graph', (xueqiao.trade.hosting.ttypes.HostingComposeGraph, xueqiao.trade.hosting.ttypes.HostingComposeGraph.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, graph=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.graph = graph
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.graph = xueqiao.trade.hosting.ttypes.HostingComposeGraph()
          self.graph.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSameComposeGraphsPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.graph is not None:
      oprot.writeFieldBegin('graph', TType.STRUCT, 3)
      self.graph.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSameComposeGraphsPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (QuerySameComposeGraphsPage, QuerySameComposeGraphsPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = QuerySameComposeGraphsPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSameComposeGraphsPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComposeViewBySearch_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
   - composeGraphKey
   - aliasName
   - precisionNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
    (4, TType.STRING, 'composeGraphKey', None, None, ), # 4
    (5, TType.STRING, 'aliasName', None, None, ), # 5
    (6, TType.I16, 'precisionNumber', None, None, ), # 6
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None, composeGraphKey=None, aliasName=None, precisionNumber=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId
    self.composeGraphKey = composeGraphKey
    self.aliasName = aliasName
    self.precisionNumber = precisionNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.composeGraphKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.aliasName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.precisionNumber = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComposeViewBySearch_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.composeGraphKey is not None:
      oprot.writeFieldBegin('composeGraphKey', TType.STRING, 4)
      oprot.writeString(self.composeGraphKey)
      oprot.writeFieldEnd()
    if self.aliasName is not None:
      oprot.writeFieldBegin('aliasName', TType.STRING, 5)
      oprot.writeString(self.aliasName)
      oprot.writeFieldEnd()
    if self.precisionNumber is not None:
      oprot.writeFieldBegin('precisionNumber', TType.I16, 6)
      oprot.writeI16(self.precisionNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComposeViewBySearch_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComposeViewBySearch_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class subscribeComposeViewQuotation_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('subscribeComposeViewQuotation_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class subscribeComposeViewQuotation_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('subscribeComposeViewQuotation_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unSubscribeComposeViewQuotation_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unSubscribeComposeViewQuotation_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unSubscribeComposeViewQuotation_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unSubscribeComposeViewQuotation_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeComposeViewAliasName_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
   - aliasName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
    (4, TType.STRING, 'aliasName', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None, aliasName=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId
    self.aliasName = aliasName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.aliasName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeComposeViewAliasName_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.aliasName is not None:
      oprot.writeFieldBegin('aliasName', TType.STRING, 4)
      oprot.writeString(self.aliasName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeComposeViewAliasName_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeComposeViewAliasName_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeGraphs_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'composeGraphIds', (TType.I64,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphIds = composeGraphIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.composeGraphIds = set()
          (_etype119, _size116) = iprot.readSetBegin()
          for _i120 in xrange(_size116):
            _elem121 = iprot.readI64();
            self.composeGraphIds.add(_elem121)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeGraphs_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphIds is not None:
      oprot.writeFieldBegin('composeGraphIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.composeGraphIds))
      for iter122 in self.composeGraphIds:
        oprot.writeI64(iter122)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComposeGraphs_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingComposeGraph, xueqiao.trade.hosting.ttypes.HostingComposeGraph.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype124, _vtype125, _size123 ) = iprot.readMapBegin()
          for _i127 in xrange(_size123):
            _key128 = iprot.readI64();
            _val129 = xueqiao.trade.hosting.ttypes.HostingComposeGraph()
            _val129.read(iprot)
            self.success[_key128] = _val129
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComposeGraphs_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter130,viter131 in self.success.items():
        oprot.writeI64(kiter130)
        viter131.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComposeViewByShare_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - composeGraphId
   - aliasName
   - precisionNumber
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'composeGraphId', None, None, ), # 3
    (4, TType.STRING, 'aliasName', None, None, ), # 4
    (5, TType.I16, 'precisionNumber', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, composeGraphId=None, aliasName=None, precisionNumber=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.composeGraphId = composeGraphId
    self.aliasName = aliasName
    self.precisionNumber = precisionNumber

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.aliasName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I16:
          self.precisionNumber = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComposeViewByShare_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 3)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.aliasName is not None:
      oprot.writeFieldBegin('aliasName', TType.STRING, 4)
      oprot.writeString(self.aliasName)
      oprot.writeFieldEnd()
    if self.precisionNumber is not None:
      oprot.writeFieldBegin('precisionNumber', TType.I16, 5)
      oprot.writeI16(self.precisionNumber)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComposeViewByShare_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComposeViewByShare_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addTradeAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - newAccount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'newAccount', (xueqiao.trade.hosting.ttypes.HostingTradeAccount, xueqiao.trade.hosting.ttypes.HostingTradeAccount.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, newAccount=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.newAccount = newAccount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.newAccount = xueqiao.trade.hosting.ttypes.HostingTradeAccount()
          self.newAccount.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addTradeAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.newAccount is not None:
      oprot.writeFieldBegin('newAccount', TType.STRUCT, 3)
      self.newAccount.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addTradeAccount_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addTradeAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disableTradeAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disableTradeAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disableTradeAccount_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disableTradeAccount_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (QueryHostingTradeAccountOption, QueryHostingTradeAccountOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = QueryHostingTradeAccountOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (QueryHostingTradeAccountPage, QueryHostingTradeAccountPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = QueryHostingTradeAccountPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enableTradeAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enableTradeAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enableTradeAccount_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enableTradeAccount_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateTradeAccountInfo_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - updateAccount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'updateAccount', (xueqiao.trade.hosting.ttypes.HostingTradeAccount, xueqiao.trade.hosting.ttypes.HostingTradeAccount.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, updateAccount=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.updateAccount = updateAccount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.updateAccount = xueqiao.trade.hosting.ttypes.HostingTradeAccount()
          self.updateAccount.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateTradeAccountInfo_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.updateAccount is not None:
      oprot.writeFieldBegin('updateAccount', TType.STRUCT, 3)
      self.updateAccount.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateTradeAccountInfo_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateTradeAccountInfo_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmTradeAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmTradeAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class rmTradeAccount_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('rmTradeAccount_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingOrderRouteTree_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingOrderRouteTree_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingOrderRouteTree_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.ttypes.HostingOrderRouteTree, xueqiao.trade.hosting.ttypes.HostingOrderRouteTree.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.ttypes.HostingOrderRouteTree()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingOrderRouteTree_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateHostingOrderRouteTree_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - routeTree
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRUCT, 'routeTree', (xueqiao.trade.hosting.ttypes.HostingOrderRouteTree, xueqiao.trade.hosting.ttypes.HostingOrderRouteTree.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, routeTree=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.routeTree = routeTree

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.routeTree = xueqiao.trade.hosting.ttypes.HostingOrderRouteTree()
          self.routeTree.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateHostingOrderRouteTree_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.routeTree is not None:
      oprot.writeFieldBegin('routeTree', TType.STRUCT, 4)
      self.routeTree.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateHostingOrderRouteTree_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateHostingOrderRouteTree_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingOrderRouteTreeVersion_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingOrderRouteTreeVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingOrderRouteTreeVersion_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingOrderRouteTreeVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createXQOrder_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - orderId
   - orderType
   - orderTarget
   - orderDetail
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRING, 'orderId', None, None, ), # 4
    (5, TType.I32, 'orderType', None, None, ), # 5
    (6, TType.STRUCT, 'orderTarget', (xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTarget, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTarget.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'orderDetail', (xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderDetail, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderDetail.thrift_spec), None, ), # 7
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, orderId=None, orderType=None, orderTarget=None, orderDetail=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.orderId = orderId
    self.orderType = orderType
    self.orderTarget = orderTarget
    self.orderDetail = orderDetail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.orderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.orderTarget = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTarget()
          self.orderTarget.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.orderDetail = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderDetail()
          self.orderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createXQOrder_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 4)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    if self.orderType is not None:
      oprot.writeFieldBegin('orderType', TType.I32, 5)
      oprot.writeI32(self.orderType)
      oprot.writeFieldEnd()
    if self.orderTarget is not None:
      oprot.writeFieldBegin('orderTarget', TType.STRUCT, 6)
      self.orderTarget.write(oprot)
      oprot.writeFieldEnd()
    if self.orderDetail is not None:
      oprot.writeFieldBegin('orderDetail', TType.STRUCT, 7)
      self.orderDetail.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createXQOrder_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createXQOrder_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSuspendXQOrders_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - orderIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'orderIds', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, orderIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.orderIds = orderIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.orderIds = set()
          (_etype135, _size132) = iprot.readSetBegin()
          for _i136 in xrange(_size132):
            _elem137 = iprot.readString();
            self.orderIds.add(_elem137)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSuspendXQOrders_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.SET, 3)
      oprot.writeSetBegin(TType.STRING, len(self.orderIds))
      for iter138 in self.orderIds:
        oprot.writeString(iter138)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSuspendXQOrders_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype140, _vtype141, _size139 ) = iprot.readMapBegin()
          for _i143 in xrange(_size139):
            _key144 = iprot.readString();
            _val145 = comm.ttypes.ErrorInfo()
            _val145.read(iprot)
            self.success[_key144] = _val145
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSuspendXQOrders_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter146,viter147 in self.success.items():
        oprot.writeString(kiter146)
        viter147.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchResumeXQOrders_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - orderIds
   - resumeModes
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'orderIds', (TType.STRING,None), None, ), # 3
    (4, TType.MAP, 'resumeModes', (TType.STRING,None,TType.I32,None), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, orderIds=None, resumeModes=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.orderIds = orderIds
    self.resumeModes = resumeModes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.orderIds = set()
          (_etype151, _size148) = iprot.readSetBegin()
          for _i152 in xrange(_size148):
            _elem153 = iprot.readString();
            self.orderIds.add(_elem153)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.resumeModes = {}
          (_ktype155, _vtype156, _size154 ) = iprot.readMapBegin()
          for _i158 in xrange(_size154):
            _key159 = iprot.readString();
            _val160 = iprot.readI32();
            self.resumeModes[_key159] = _val160
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchResumeXQOrders_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.SET, 3)
      oprot.writeSetBegin(TType.STRING, len(self.orderIds))
      for iter161 in self.orderIds:
        oprot.writeString(iter161)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.resumeModes is not None:
      oprot.writeFieldBegin('resumeModes', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.resumeModes))
      for kiter162,viter163 in self.resumeModes.items():
        oprot.writeString(kiter162)
        oprot.writeI32(viter163)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchResumeXQOrders_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype165, _vtype166, _size164 ) = iprot.readMapBegin()
          for _i168 in xrange(_size164):
            _key169 = iprot.readString();
            _val170 = comm.ttypes.ErrorInfo()
            _val170.read(iprot)
            self.success[_key169] = _val170
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchResumeXQOrders_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter171,viter172 in self.success.items():
        oprot.writeString(kiter171)
        viter172.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchCancelXQOrders_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - orderIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'orderIds', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, orderIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.orderIds = orderIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.orderIds = set()
          (_etype176, _size173) = iprot.readSetBegin()
          for _i177 in xrange(_size173):
            _elem178 = iprot.readString();
            self.orderIds.add(_elem178)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchCancelXQOrders_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.SET, 3)
      oprot.writeSetBegin(TType.STRING, len(self.orderIds))
      for iter179 in self.orderIds:
        oprot.writeString(iter179)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchCancelXQOrders_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype181, _vtype182, _size180 ) = iprot.readMapBegin()
          for _i184 in xrange(_size180):
            _key185 = iprot.readString();
            _val186 = comm.ttypes.ErrorInfo()
            _val186.read(iprot)
            self.success[_key185] = _val186
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchCancelXQOrders_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter187,viter188 in self.success.items():
        oprot.writeString(kiter187)
        viter188.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEffectXQOrderWithTradeListPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - qryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'qryOption', (xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.QueryEffectXQOrderIndexOption, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.QueryEffectXQOrderIndexOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, qryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.qryOption = qryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.qryOption = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.QueryEffectXQOrderIndexOption()
          self.qryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEffectXQOrderWithTradeListPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.qryOption is not None:
      oprot.writeFieldBegin('qryOption', TType.STRUCT, 3)
      self.qryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getEffectXQOrderWithTradeListPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (HostingXQOrderWithTradeListPage, HostingXQOrderWithTradeListPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = HostingXQOrderWithTradeListPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getEffectXQOrderWithTradeListPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderWithTradeLists_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - orderIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'orderIds', (TType.STRING,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, orderIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.orderIds = orderIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.orderIds = set()
          (_etype192, _size189) = iprot.readSetBegin()
          for _i193 in xrange(_size189):
            _elem194 = iprot.readString();
            self.orderIds.add(_elem194)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderWithTradeLists_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.orderIds is not None:
      oprot.writeFieldBegin('orderIds', TType.SET, 3)
      oprot.writeSetBegin(TType.STRING, len(self.orderIds))
      for iter195 in self.orderIds:
        oprot.writeString(iter195)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderWithTradeLists_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype197, _vtype198, _size196 ) = iprot.readMapBegin()
          for _i200 in xrange(_size196):
            _key201 = iprot.readString();
            _val202 = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList()
            _val202.read(iprot)
            self.success[_key201] = _val202
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderWithTradeLists_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter203,viter204 in self.success.items():
        oprot.writeString(kiter203)
        viter204.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderExecDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - orderId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'orderId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, orderId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.orderId = orderId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderExecDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.STRING, 3)
      oprot.writeString(self.orderId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderExecDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderExecDetail, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderExecDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderExecDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderExecDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderHisPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - qryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'qryOption', (xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQOrderHisIndexItemOption, xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQOrderHisIndexItemOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, qryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.qryOption = qryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.qryOption = xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQOrderHisIndexItemOption()
          self.qryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderHisPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.qryOption is not None:
      oprot.writeFieldBegin('qryOption', TType.STRUCT, 3)
      self.qryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQOrderHisPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (HostingXQOrderPage, HostingXQOrderPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = HostingXQOrderPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQOrderHisPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQTradeHisPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - qryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'qryOption', (xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQTradeHisIndexItemOption, xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQTradeHisIndexItemOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, qryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.qryOption = qryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.qryOption = xueqiao.trade.hosting.history.thriftapi.ttypes.QueryXQTradeHisIndexItemOption()
          self.qryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQTradeHisPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.qryOption is not None:
      oprot.writeFieldBegin('qryOption', TType.STRUCT, 3)
      self.qryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQTradeHisPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (HostingXQTradePage, HostingXQTradePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = HostingXQTradePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQTradeHisPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, key=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserSetting_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (HostingUserSetting, HostingUserSetting.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = HostingUserSetting()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserSetting_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - key
   - setting
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
    (4, TType.STRUCT, 'setting', (HostingUserSetting, HostingUserSetting.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, key=None, setting=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.key = key
    self.setting = setting

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.setting = HostingUserSetting()
          self.setting.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    if self.setting is not None:
      oprot.writeFieldBegin('setting', TType.STRUCT, 4)
      self.setting.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserSettingVersion_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - key
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'key', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, key=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.key = key

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserSettingVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.STRING, 3)
      oprot.writeString(self.key)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserSettingVersion_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserSettingVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSAWRUTListPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (QueryHostingSAWRUItemListOption, QueryHostingSAWRUItemListOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = QueryHostingSAWRUItemListOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSAWRUTListPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSAWRUTListPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (HostingSAWRUItemListPage, HostingSAWRUItemListPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = HostingSAWRUItemListPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSAWRUTListPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSARUTBySubAccountId_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'subAccountIds', (TType.I64,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountIds = subAccountIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.subAccountIds = set()
          (_etype208, _size205) = iprot.readSetBegin()
          for _i209 in xrange(_size205):
            _elem210 = iprot.readI64();
            self.subAccountIds.add(_elem210)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSARUTBySubAccountId_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountIds is not None:
      oprot.writeFieldBegin('subAccountIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.subAccountIds))
      for iter211 in self.subAccountIds:
        oprot.writeI64(iter211)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSARUTBySubAccountId_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.LIST,(TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem, xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype213, _vtype214, _size212 ) = iprot.readMapBegin()
          for _i216 in xrange(_size212):
            _key217 = iprot.readI64();
            _val218 = []
            (_etype222, _size219) = iprot.readListBegin()
            for _i223 in xrange(_size219):
              _elem224 = xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem()
              _elem224.read(iprot)
              _val218.append(_elem224)
            iprot.readListEnd()
            self.success[_key217] = _val218
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSARUTBySubAccountId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.success))
      for kiter225,viter226 in self.success.items():
        oprot.writeI64(kiter225)
        oprot.writeListBegin(TType.STRUCT, len(viter226))
        for iter227 in viter226:
          iter227.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSARUTBySubUserId_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subUserIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'subUserIds', (TType.I32,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subUserIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subUserIds = subUserIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.subUserIds = set()
          (_etype231, _size228) = iprot.readSetBegin()
          for _i232 in xrange(_size228):
            _elem233 = iprot.readI32();
            self.subUserIds.add(_elem233)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSARUTBySubUserId_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subUserIds is not None:
      oprot.writeFieldBegin('subUserIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I32, len(self.subUserIds))
      for iter234 in self.subUserIds:
        oprot.writeI32(iter234)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSARUTBySubUserId_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.LIST,(TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem, xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem.thrift_spec))), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype236, _vtype237, _size235 ) = iprot.readMapBegin()
          for _i239 in xrange(_size235):
            _key240 = iprot.readI32();
            _val241 = []
            (_etype245, _size242) = iprot.readListBegin()
            for _i246 in xrange(_size242):
              _elem247 = xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem()
              _elem247.read(iprot)
              _val241.append(_elem247)
            iprot.readListEnd()
            self.success[_key240] = _val241
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSARUTBySubUserId_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.LIST, len(self.success))
      for kiter248,viter249 in self.success.items():
        oprot.writeI32(kiter248)
        oprot.writeListBegin(TType.STRUCT, len(viter249))
        for iter250 in viter249:
          iter250.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignSubAccountRelatedUsers_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - relatedSubUserIds
   - unRelatedSubUserIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.SET, 'relatedSubUserIds', (TType.I32,None), None, ), # 4
    (5, TType.SET, 'unRelatedSubUserIds', (TType.I32,None), None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, relatedSubUserIds=None, unRelatedSubUserIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.relatedSubUserIds = relatedSubUserIds
    self.unRelatedSubUserIds = unRelatedSubUserIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.relatedSubUserIds = set()
          (_etype254, _size251) = iprot.readSetBegin()
          for _i255 in xrange(_size251):
            _elem256 = iprot.readI32();
            self.relatedSubUserIds.add(_elem256)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.unRelatedSubUserIds = set()
          (_etype260, _size257) = iprot.readSetBegin()
          for _i261 in xrange(_size257):
            _elem262 = iprot.readI32();
            self.unRelatedSubUserIds.add(_elem262)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignSubAccountRelatedUsers_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.relatedSubUserIds is not None:
      oprot.writeFieldBegin('relatedSubUserIds', TType.SET, 4)
      oprot.writeSetBegin(TType.I32, len(self.relatedSubUserIds))
      for iter263 in self.relatedSubUserIds:
        oprot.writeI32(iter263)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.unRelatedSubUserIds is not None:
      oprot.writeFieldBegin('unRelatedSubUserIds', TType.SET, 5)
      oprot.writeSetBegin(TType.I32, len(self.unRelatedSubUserIds))
      for iter264 in self.unRelatedSubUserIds:
        oprot.writeI32(iter264)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignSubAccountRelatedUsers_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignSubAccountRelatedUsers_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class renameSubAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - subAccountName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRING, 'subAccountName', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, subAccountName=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.subAccountName = subAccountName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.subAccountName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('renameSubAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.subAccountName is not None:
      oprot.writeFieldBegin('subAccountName', TType.STRING, 4)
      oprot.writeString(self.subAccountName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class renameSubAccount_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('renameSubAccount_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createSubAccount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - newSubAccount
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'newSubAccount', (xueqiao.trade.hosting.ttypes.HostingSubAccount, xueqiao.trade.hosting.ttypes.HostingSubAccount.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, newSubAccount=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.newSubAccount = newSubAccount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.newSubAccount = xueqiao.trade.hosting.ttypes.HostingSubAccount()
          self.newSubAccount.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createSubAccount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.newSubAccount is not None:
      oprot.writeFieldBegin('newSubAccount', TType.STRUCT, 3)
      self.newSubAccount.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createSubAccount_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createSubAccount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSledContractPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingSledContractPositionOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingSledContractPositionOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingSledContractPositionOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSledContractPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSledContractPosition_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSledContractPositionPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSledContractPositionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSledContractPositionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSledContractPosition_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSubAccountFund_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingFundOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingFundOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingFundOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSubAccountFund_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSubAccountFund_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSubAccountFund_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeSubAccountFund_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - fundChange
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'fundChange', (xueqiao.trade.hosting.asset.thriftapi.ttypes.FundChange, xueqiao.trade.hosting.asset.thriftapi.ttypes.FundChange.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, fundChange=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.fundChange = fundChange

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.fundChange = xueqiao.trade.hosting.asset.thriftapi.ttypes.FundChange()
          self.fundChange.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeSubAccountFund_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.fundChange is not None:
      oprot.writeFieldBegin('fundChange', TType.STRUCT, 3)
      self.fundChange.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeSubAccountFund_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeSubAccountFund_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSubAccountCreditAmount_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - amountChange
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'amountChange', (xueqiao.trade.hosting.asset.thriftapi.ttypes.CreditAmountChange, xueqiao.trade.hosting.asset.thriftapi.ttypes.CreditAmountChange.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, amountChange=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.amountChange = amountChange

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.amountChange = xueqiao.trade.hosting.asset.thriftapi.ttypes.CreditAmountChange()
          self.amountChange.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSubAccountCreditAmount_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.amountChange is not None:
      oprot.writeFieldBegin('amountChange', TType.STRUCT, 3)
      self.amountChange.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setSubAccountCreditAmount_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountFund()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setSubAccountCreditAmount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAssetPositionTradeDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingAssetTradeDetailOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingAssetTradeDetailOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqHostingAssetTradeDetailOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAssetPositionTradeDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAssetPositionTradeDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAssetPositionTradeDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSubAccountMoneyRecord_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqMoneyRecordOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqMoneyRecordOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqMoneyRecordOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSubAccountMoneyRecord_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getHostingSubAccountMoneyRecord_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountMoneyRecordPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountMoneyRecordPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingSubAccountMoneyRecordPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getHostingSubAccountMoneyRecord_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountFundHistory_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSubAccountFundHistoryOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSubAccountFundHistoryOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSubAccountFundHistoryOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountFundHistory_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountFundHistory_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.HostingFundPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountFundHistory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountPositionHistory_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionDetailOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionDetailOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionDetailOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountPositionHistory_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountPositionHistory_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.SettlementPositionDetailPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.SettlementPositionDetailPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.SettlementPositionDetailPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountPositionHistory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountPositionHistoryTradeDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionTradeDetailOption, xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionTradeDetailOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.asset.thriftapi.ttypes.ReqSettlementPositionTradeDetailOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountPositionHistoryTradeDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubAccountPositionHistoryTradeDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubAccountPositionHistoryTradeDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredContractPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I64, 'sledContractId', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, sledContractId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredContractPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 4)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredContractPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredContractPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountFundNow_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountFundNow_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountFundNow_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(HostingTAFundItem, HostingTAFundItem.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype268, _size265) = iprot.readListBegin()
          for _i269 in xrange(_size265):
            _elem270 = HostingTAFundItem()
            _elem270.read(iprot)
            self.success.append(_elem270)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountFundNow_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter271 in self.success:
        iter271.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountFundHis_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
   - fundDateBegin
   - fundDateEnd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.STRING, 'fundDateBegin', None, None, ), # 4
    (5, TType.STRING, 'fundDateEnd', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None, fundDateBegin=None, fundDateEnd=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId
    self.fundDateBegin = fundDateBegin
    self.fundDateEnd = fundDateEnd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.fundDateBegin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.fundDateEnd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountFundHis_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.fundDateBegin is not None:
      oprot.writeFieldBegin('fundDateBegin', TType.STRING, 4)
      oprot.writeString(self.fundDateBegin)
      oprot.writeFieldEnd()
    if self.fundDateEnd is not None:
      oprot.writeFieldBegin('fundDateEnd', TType.STRING, 5)
      oprot.writeString(self.fundDateEnd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountFundHis_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(HostingTAFundHisItem, HostingTAFundHisItem.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype275, _size272) = iprot.readListBegin()
          for _i276 in xrange(_size272):
            _elem277 = HostingTAFundHisItem()
            _elem277.read(iprot)
            self.success.append(_elem277)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountFundHis_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter278 in self.success:
        iter278.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountSettlementInfos_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
   - settlementDateBegin
   - settlementDateEnd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.STRING, 'settlementDateBegin', None, None, ), # 4
    (5, TType.STRING, 'settlementDateEnd', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None, settlementDateBegin=None, settlementDateEnd=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId
    self.settlementDateBegin = settlementDateBegin
    self.settlementDateEnd = settlementDateEnd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.settlementDateBegin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.settlementDateEnd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountSettlementInfos_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.settlementDateBegin is not None:
      oprot.writeFieldBegin('settlementDateBegin', TType.STRING, 4)
      oprot.writeString(self.settlementDateBegin)
      oprot.writeFieldEnd()
    if self.settlementDateEnd is not None:
      oprot.writeFieldBegin('settlementDateEnd', TType.STRING, 5)
      oprot.writeString(self.settlementDateEnd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountSettlementInfos_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo, xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype282, _size279) = iprot.readListBegin()
          for _i283 in xrange(_size279):
            _elem284 = xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo()
            _elem284.read(iprot)
            self.success.append(_elem284)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountSettlementInfos_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter285 in self.success:
        iter285.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountSettlementInfosWithRelatedTime_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - tradeAccountId
   - settlementDateBegin
   - settlementDateEnd
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.STRING, 'settlementDateBegin', None, None, ), # 4
    (5, TType.STRING, 'settlementDateEnd', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, tradeAccountId=None, settlementDateBegin=None, settlementDateEnd=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.tradeAccountId = tradeAccountId
    self.settlementDateBegin = settlementDateBegin
    self.settlementDateEnd = settlementDateEnd

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.settlementDateBegin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.settlementDateEnd = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountSettlementInfosWithRelatedTime_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.settlementDateBegin is not None:
      oprot.writeFieldBegin('settlementDateBegin', TType.STRING, 4)
      oprot.writeString(self.settlementDateBegin)
      oprot.writeFieldEnd()
    if self.settlementDateEnd is not None:
      oprot.writeFieldBegin('settlementDateEnd', TType.STRING, 5)
      oprot.writeString(self.settlementDateEnd)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountSettlementInfosWithRelatedTime_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(TradeAccountSettlementInfoWithRelatedTime, TradeAccountSettlementInfoWithRelatedTime.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype289, _size286) = iprot.readListBegin()
          for _i290 in xrange(_size286):
            _elem291 = TradeAccountSettlementInfoWithRelatedTime()
            _elem291.read(iprot)
            self.success.append(_elem291)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountSettlementInfosWithRelatedTime_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter292 in self.success:
        iter292.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountPositionTradeDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (ReqTradeAccountPositionOption, ReqTradeAccountPositionOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = ReqTradeAccountPositionOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountPositionTradeDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getTradeAccountPositionTradeDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage, xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.asset.thriftapi.ttypes.AssetTradeDetailPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getTradeAccountPositionTradeDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionVerify_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionVerifyOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionVerifyOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionVerifyOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionVerify_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionVerify_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionVerifyPage, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionVerifyPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionVerifyPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionVerify_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionDifference_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionDifferenceOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionDifferenceOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionDifferenceOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionDifference_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionDifference_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionDifferencePage, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionDifferencePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionDifferencePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionDifference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class manualInputPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - positionManualInputs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.LIST, 'positionManualInputs', (TType.STRUCT,(xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionManualInput, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionManualInput.thrift_spec)), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, positionManualInputs=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.positionManualInputs = positionManualInputs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.positionManualInputs = []
          (_etype296, _size293) = iprot.readListBegin()
          for _i297 in xrange(_size293):
            _elem298 = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionManualInput()
            _elem298.read(iprot)
            self.positionManualInputs.append(_elem298)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('manualInputPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.positionManualInputs is not None:
      oprot.writeFieldBegin('positionManualInputs', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.positionManualInputs))
      for iter299 in self.positionManualInputs:
        iter299.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class manualInputPosition_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ManualInputPositionResp, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ManualInputPositionResp.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ManualInputPositionResp()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('manualInputPosition_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionUnassigned_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionUnassignedOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionUnassignedOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionUnassignedOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionUnassigned_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionUnassigned_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionUnassignedPage, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionUnassignedPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionUnassignedPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionUnassigned_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - assignOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.LIST, 'assignOption', (TType.STRUCT,(xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignOption.thrift_spec)), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, assignOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.assignOption = assignOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.assignOption = []
          (_etype303, _size300) = iprot.readListBegin()
          for _i304 in xrange(_size300):
            _elem305 = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignOption()
            _elem305.read(iprot)
            self.assignOption.append(_elem305)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.assignOption is not None:
      oprot.writeFieldBegin('assignOption', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.assignOption))
      for iter306 in self.assignOption:
        iter306.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignPosition_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.AssignPositionResp, xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.AssignPositionResp.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.AssignPositionResp()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignPosition_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionEditLock_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - lockKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRING, 'lockKey', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, lockKey=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.lockKey = lockKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.lockKey = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionEditLock_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.lockKey is not None:
      oprot.writeFieldBegin('lockKey', TType.STRING, 3)
      oprot.writeString(self.lockKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionEditLock_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionEditLock_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addPositionEditLock_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - positionEditLock
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'positionEditLock', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, positionEditLock=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.positionEditLock = positionEditLock

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.positionEditLock = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock()
          self.positionEditLock.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addPositionEditLock_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.positionEditLock is not None:
      oprot.writeFieldBegin('positionEditLock', TType.STRUCT, 3)
      self.positionEditLock.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addPositionEditLock_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addPositionEditLock_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removePositionEditLock_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - positionEditLock
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'positionEditLock', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, positionEditLock=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.positionEditLock = positionEditLock

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.positionEditLock = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionEditLock()
          self.positionEditLock.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removePositionEditLock_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.positionEditLock is not None:
      oprot.writeFieldBegin('positionEditLock', TType.STRUCT, 3)
      self.positionEditLock.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removePositionEditLock_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removePositionEditLock_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqDailyPositionDifference_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqDailyPositionDifferenceOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqDailyPositionDifferenceOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqDailyPositionDifferenceOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqDailyPositionDifference_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqDailyPositionDifference_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifferencePage, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifferencePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifferencePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqDailyPositionDifference_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDailyPositionDifferenceNote_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - difference
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'difference', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifference, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifference.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, difference=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.difference = difference

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.difference = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.DailyPositionDifference()
          self.difference.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDailyPositionDifferenceNote_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.difference is not None:
      oprot.writeFieldBegin('difference', TType.STRUCT, 3)
      self.difference.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateDailyPositionDifferenceNote_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateDailyPositionDifferenceNote_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionAssigned_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionAssignedOption, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionAssignedOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.ReqPositionAssignedOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionAssigned_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class reqPositionAssigned_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignedPage, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignedPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.PositionAssignedPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('reqPositionAssigned_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class contructCompose_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - contructComposeReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'contructComposeReq', (xueqiao.trade.hosting.position.statis.ttypes.StatContructComposeReq, xueqiao.trade.hosting.position.statis.ttypes.StatContructComposeReq.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, contructComposeReq=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.contructComposeReq = contructComposeReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.contructComposeReq = xueqiao.trade.hosting.position.statis.ttypes.StatContructComposeReq()
          self.contructComposeReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('contructCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.contructComposeReq is not None:
      oprot.writeFieldBegin('contructComposeReq', TType.STRUCT, 3)
      self.contructComposeReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class contructCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('contructCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disassembleCompose_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - disassembleComposePositionReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'disassembleComposePositionReq', (xueqiao.trade.hosting.position.statis.ttypes.DisassembleComposePositionReq, xueqiao.trade.hosting.position.statis.ttypes.DisassembleComposePositionReq.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, disassembleComposePositionReq=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.disassembleComposePositionReq = disassembleComposePositionReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.disassembleComposePositionReq = xueqiao.trade.hosting.position.statis.ttypes.DisassembleComposePositionReq()
          self.disassembleComposePositionReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disassembleCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.disassembleComposePositionReq is not None:
      oprot.writeFieldBegin('disassembleComposePositionReq', TType.STRUCT, 3)
      self.disassembleComposePositionReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disassembleCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disassembleCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchClosePosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - batchClosedPositionReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'batchClosedPositionReq', (xueqiao.trade.hosting.position.statis.ttypes.BatchClosedPositionReq, xueqiao.trade.hosting.position.statis.ttypes.BatchClosedPositionReq.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, batchClosedPositionReq=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.batchClosedPositionReq = batchClosedPositionReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.batchClosedPositionReq = xueqiao.trade.hosting.position.statis.ttypes.BatchClosedPositionReq()
          self.batchClosedPositionReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchClosePosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.batchClosedPositionReq is not None:
      oprot.writeFieldBegin('batchClosedPositionReq', TType.STRUCT, 3)
      self.batchClosedPositionReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchClosePosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchClosePosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recoverClosedPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRING, 'targetKey', None, None, ), # 4
    (5, TType.I32, 'targetType', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, targetKey=None, targetType=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('recoverClosedPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 4)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 5)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recoverClosedPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('recoverClosedPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mergeToCompose_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - mergeToComposeReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'mergeToComposeReq', (xueqiao.trade.hosting.position.statis.ttypes.StatMergeToComposeReq, xueqiao.trade.hosting.position.statis.ttypes.StatMergeToComposeReq.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, mergeToComposeReq=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.mergeToComposeReq = mergeToComposeReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.mergeToComposeReq = xueqiao.trade.hosting.position.statis.ttypes.StatMergeToComposeReq()
          self.mergeToComposeReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mergeToCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.mergeToComposeReq is not None:
      oprot.writeFieldBegin('mergeToComposeReq', TType.STRUCT, 3)
      self.mergeToComposeReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mergeToCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mergeToCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredStatContractPosition_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I64, 'sledContractId', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, sledContractId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredStatContractPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 4)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredStatContractPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredStatContractPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryPage, xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionItemPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionItemOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionItemOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionItemPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionItemPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatPositionItemPage, xueqiao.trade.hosting.position.statis.ttypes.StatPositionItemPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatPositionItemPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionItemPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryCurrentDayStatClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRING, 'targetKey', None, None, ), # 4
    (5, TType.I32, 'targetType', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, targetKey=None, targetType=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryCurrentDayStatClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 4)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 5)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryCurrentDayStatClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryCurrentDayStatClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionItemOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionItemOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionDateSummaryOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionDateSummaryOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatClosedPositionDateSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatArchiveItemOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatArchiveItemOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatArchiveItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryExPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryExPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryExPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryExPage, xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryExPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatPositionSummaryExPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryExPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionUnitPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionUnitOption, xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionUnitOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryStatPositionUnitOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionUnitPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionUnitPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatPositionUnitPage, xueqiao.trade.hosting.position.statis.ttypes.StatPositionUnitPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatPositionUnitPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionUnitPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption, xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOption', (xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption, xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOption = xueqiao.trade.hosting.position.statis.ttypes.QueryHistoryClosedPositionOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 3)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail, xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.statis.ttypes.StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQTradeLameTaskNotePage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - qryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'qryOption', (QueryXQTradeLameTaskNotePageOption, QueryXQTradeLameTaskNotePageOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, qryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.qryOption = qryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.qryOption = QueryXQTradeLameTaskNotePageOption()
          self.qryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQTradeLameTaskNotePage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.qryOption is not None:
      oprot.writeFieldBegin('qryOption', TType.STRUCT, 3)
      self.qryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getXQTradeLameTaskNotePage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.tasknote.thriftapi.ttypes.HostingTaskNotePage, xueqiao.trade.hosting.tasknote.thriftapi.ttypes.HostingTaskNotePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.tasknote.thriftapi.ttypes.HostingTaskNotePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getXQTradeLameTaskNotePage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchDeleteXQTradeLameTaskNotes_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - xqTradeIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.SET, 'xqTradeIds', (TType.I64,None), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, xqTradeIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.xqTradeIds = xqTradeIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.xqTradeIds = set()
          (_etype310, _size307) = iprot.readSetBegin()
          for _i311 in xrange(_size307):
            _elem312 = iprot.readI64();
            self.xqTradeIds.add(_elem312)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchDeleteXQTradeLameTaskNotes_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.xqTradeIds is not None:
      oprot.writeFieldBegin('xqTradeIds', TType.SET, 4)
      oprot.writeSetBegin(TType.I64, len(self.xqTradeIds))
      for iter313 in self.xqTradeIds:
        oprot.writeI64(iter313)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchDeleteXQTradeLameTaskNotes_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.STRUCT,(comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype315, _vtype316, _size314 ) = iprot.readMapBegin()
          for _i318 in xrange(_size314):
            _key319 = iprot.readI64();
            _val320 = comm.ttypes.ErrorInfo()
            _val320.read(iprot)
            self.success[_key319] = _val320
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchDeleteXQTradeLameTaskNotes_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.STRUCT, len(self.success))
      for kiter321,viter322 in self.success.items():
        oprot.writeI64(kiter321)
        viter322.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryMailBoxMessage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - option
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'option', (ReqMailBoxMessageOption, ReqMailBoxMessageOption.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, option=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.option = option
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.option = ReqMailBoxMessageOption()
          self.option.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryMailBoxMessage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.option is not None:
      oprot.writeFieldBegin('option', TType.STRUCT, 3)
      self.option.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryMailBoxMessage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.mailbox.user.message.thriftapi.ttypes.UserMessagePage, xueqiao.mailbox.user.message.thriftapi.ttypes.UserMessagePage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.mailbox.user.message.thriftapi.ttypes.UserMessagePage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryMailBoxMessage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markMessageAsRead_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - hostingMessageIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.SET, 'hostingMessageIds', (TType.I64,None), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, hostingMessageIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.hostingMessageIds = hostingMessageIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.hostingMessageIds = set()
          (_etype326, _size323) = iprot.readSetBegin()
          for _i327 in xrange(_size323):
            _elem328 = iprot.readI64();
            self.hostingMessageIds.add(_elem328)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markMessageAsRead_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.hostingMessageIds is not None:
      oprot.writeFieldBegin('hostingMessageIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.hostingMessageIds))
      for iter329 in self.hostingMessageIds:
        oprot.writeI64(iter329)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class markMessageAsRead_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('markMessageAsRead_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllSupportedItems_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, landingInfo=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllSupportedItems_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllSupportedItems_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskSupportedItem, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskSupportedItem.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype333, _size330) = iprot.readListBegin()
          for _i334 in xrange(_size330):
            _elem335 = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskSupportedItem()
            _elem335.read(iprot)
            self.success.append(_elem335)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllSupportedItems_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter336 in self.success:
        iter336.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskRuleJointVersion_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskRuleJointVersion_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskRuleJointVersion_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.I32, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I32:
          self.success = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskRuleJointVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I32, 0)
      oprot.writeI32(self.success)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskRuleJoint_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskRuleJoint_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskRuleJoint_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskRuleJoint_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetSupportedItems_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - version
   - openedItemIds
   - closedItemIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.SET, 'openedItemIds', (TType.STRING,None), None, ), # 5
    (6, TType.SET, 'closedItemIds', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, version=None, openedItemIds=None, closedItemIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.version = version
    self.openedItemIds = openedItemIds
    self.closedItemIds = closedItemIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.openedItemIds = set()
          (_etype340, _size337) = iprot.readSetBegin()
          for _i341 in xrange(_size337):
            _elem342 = iprot.readString();
            self.openedItemIds.add(_elem342)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.closedItemIds = set()
          (_etype346, _size343) = iprot.readSetBegin()
          for _i347 in xrange(_size343):
            _elem348 = iprot.readString();
            self.closedItemIds.add(_elem348)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetSupportedItems_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.openedItemIds is not None:
      oprot.writeFieldBegin('openedItemIds', TType.SET, 5)
      oprot.writeSetBegin(TType.STRING, len(self.openedItemIds))
      for iter349 in self.openedItemIds:
        oprot.writeString(iter349)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.closedItemIds is not None:
      oprot.writeFieldBegin('closedItemIds', TType.SET, 6)
      oprot.writeSetBegin(TType.STRING, len(self.closedItemIds))
      for iter350 in self.closedItemIds:
        oprot.writeString(iter350)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetSupportedItems_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetSupportedItems_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetTradedCommodityItems_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - version
   - enabledCommodityIds
   - disabledCommodityIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.SET, 'enabledCommodityIds', (TType.I64,None), None, ), # 5
    (6, TType.SET, 'disabledCommodityIds', (TType.I64,None), None, ), # 6
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, version=None, enabledCommodityIds=None, disabledCommodityIds=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.version = version
    self.enabledCommodityIds = enabledCommodityIds
    self.disabledCommodityIds = disabledCommodityIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.SET:
          self.enabledCommodityIds = set()
          (_etype354, _size351) = iprot.readSetBegin()
          for _i355 in xrange(_size351):
            _elem356 = iprot.readI64();
            self.enabledCommodityIds.add(_elem356)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.disabledCommodityIds = set()
          (_etype360, _size357) = iprot.readSetBegin()
          for _i361 in xrange(_size357):
            _elem362 = iprot.readI64();
            self.disabledCommodityIds.add(_elem362)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetTradedCommodityItems_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.enabledCommodityIds is not None:
      oprot.writeFieldBegin('enabledCommodityIds', TType.SET, 5)
      oprot.writeSetBegin(TType.I64, len(self.enabledCommodityIds))
      for iter363 in self.enabledCommodityIds:
        oprot.writeI64(iter363)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.disabledCommodityIds is not None:
      oprot.writeFieldBegin('disabledCommodityIds', TType.SET, 6)
      oprot.writeSetBegin(TType.I64, len(self.disabledCommodityIds))
      for iter364 in self.disabledCommodityIds:
        oprot.writeI64(iter364)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetTradedCommodityItems_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetTradedCommodityItems_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetGlobalRules_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - version
   - ruleItems
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.MAP, 'ruleItems', (TType.STRING,None,TType.STRUCT,(xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem.thrift_spec)), None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, version=None, ruleItems=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.version = version
    self.ruleItems = ruleItems

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.ruleItems = {}
          (_ktype366, _vtype367, _size365 ) = iprot.readMapBegin()
          for _i369 in xrange(_size365):
            _key370 = iprot.readString();
            _val371 = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem()
            _val371.read(iprot)
            self.ruleItems[_key370] = _val371
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetGlobalRules_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.ruleItems is not None:
      oprot.writeFieldBegin('ruleItems', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.ruleItems))
      for kiter372,viter373 in self.ruleItems.items():
        oprot.writeString(kiter372)
        viter373.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetGlobalRules_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetGlobalRules_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetCommodityRules_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - version
   - rules
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.MAP, 'rules', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem.thrift_spec))), None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, version=None, rules=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.version = version
    self.rules = rules

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.rules = {}
          (_ktype375, _vtype376, _size374 ) = iprot.readMapBegin()
          for _i378 in xrange(_size374):
            _key379 = iprot.readI64();
            _val380 = {}
            (_ktype382, _vtype383, _size381 ) = iprot.readMapBegin()
            for _i385 in xrange(_size381):
              _key386 = iprot.readString();
              _val387 = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleItem()
              _val387.read(iprot)
              _val380[_key386] = _val387
            iprot.readMapEnd()
            self.rules[_key379] = _val380
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetCommodityRules_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.rules is not None:
      oprot.writeFieldBegin('rules', TType.MAP, 5)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.rules))
      for kiter388,viter389 in self.rules.items():
        oprot.writeI64(kiter388)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter389))
        for kiter390,viter391 in viter389.items():
          oprot.writeString(kiter390)
          viter391.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchSetCommodityRules_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchSetCommodityRules_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setRiskEnabled_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - version
   - riskEnabled
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'version', None, None, ), # 4
    (5, TType.BOOL, 'riskEnabled', None, None, ), # 5
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, version=None, riskEnabled=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.version = version
    self.riskEnabled = riskEnabled

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.riskEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setRiskEnabled_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 4)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.riskEnabled is not None:
      oprot.writeFieldBegin('riskEnabled', TType.BOOL, 5)
      oprot.writeBool(self.riskEnabled)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setRiskEnabled_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskRuleJoint()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setRiskEnabled_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskFrameDataInfo_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskFrameDataInfo_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRiskFrameDataInfo_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskFrameDataInfo, xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskFrameDataInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.risk.manager.thriftapi.ttypes.HostingRiskFrameDataInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRiskFrameDataInfo_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'marginSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.marginSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 3)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'commissionSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.commissionSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 3)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'marginSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.marginSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 3)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'commissionSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.commissionSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 3)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'marginSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.marginSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 3)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'commissionSettings', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.commissionSettings = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 3)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - commodityId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I64, 'commodityId', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, commodityId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.commodityId = commodityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 4)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
   - commodityId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I64, 'commodityId', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None, commodityId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId
    self.commodityId = commodityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 4)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralMarginSettings_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralMarginSettings_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralMarginSettings_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralMarginSettings()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralMarginSettings_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralCommissionSettings_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, landingInfo=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralCommissionSettings_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralCommissionSettings_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQGeneralCommissionSettings()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralCommissionSettings_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecMarginSettingPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecMarginSettingPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecMarginSettingPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettingPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettingPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecMarginSettingPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecMarginSettingPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecCommissionSettingPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQSpecSettingOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecCommissionSettingPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecCommissionSettingPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettingPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettingPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQSpecCommissionSettingPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecCommissionSettingPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractMarginPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractMarginPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractMarginPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractMarginPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractMarginPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractMarginPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractMarginPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractCommissionPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryUpsidePFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractCommissionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractCommissionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractCommissionPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractCommissionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.UpsideContractCommissionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractCommissionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractMarginPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractMarginPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractMarginPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractMarginPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractMarginPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractMarginPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractMarginPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractCommissionPage_args:
  """
  Attributes:
   - platformArgs
   - landingInfo
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'landingInfo', (LandingInfo, LandingInfo.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'queryOptions', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 4
  )

  def __init__(self, platformArgs=None, landingInfo=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.landingInfo = landingInfo
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.landingInfo = LandingInfo()
          self.landingInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.queryOptions = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.QueryXQPFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractCommissionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.landingInfo is not None:
      oprot.writeFieldBegin('landingInfo', TType.STRUCT, 2)
      self.landingInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 3)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 4)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractCommissionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractCommissionPage, xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractCommissionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = xueqiao.trade.hosting.position.fee.thriftapi.ttypes.XQContractCommissionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractCommissionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
