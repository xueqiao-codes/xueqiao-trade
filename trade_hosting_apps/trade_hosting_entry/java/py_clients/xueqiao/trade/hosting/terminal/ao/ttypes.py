#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes
import xueqiao.trade.hosting.ttypes
import xueqiao.trade.hosting.arbitrage.thriftapi.ttypes
import xueqiao.trade.hosting.asset.thriftapi.ttypes
import xueqiao.trade.hosting.history.thriftapi.ttypes
import xueqiao.trade.hosting.tradeaccount.data.ttypes
import xueqiao.trade.hosting.position.adjust.thriftapi.ttypes
import xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes
import xueqiao.trade.hosting.position.statis.ttypes
import xueqiao.trade.hosting.tasknote.thriftapi.ttypes
import xueqiao.mailbox.user.message.thriftapi.ttypes
import xueqiao.trade.hosting.risk.manager.thriftapi.ttypes
import xueqiao.trade.hosting.position.fee.thriftapi.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class LandingInfo:
  """
  登陆信息

  Attributes:
   - machineId
   - subUserId
   - token
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'machineId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.STRING, 'token', None, None, ), # 3
  )

  def __init__(self, machineId=None, subUserId=None, token=None,):
    self.machineId = machineId
    self.subUserId = subUserId
    self.token = token

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.machineId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('LandingInfo')
    if self.machineId is not None:
      oprot.writeFieldBegin('machineId', TType.I64, 1)
      oprot.writeI64(self.machineId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 3)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingComposeViewDetailOption:
  """
  Attributes:
   - subUserId
   - composeGraphId
   - aliasNamePartical
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'subUserId', None, None, ), # 1
    (2, TType.I64, 'composeGraphId', None, None, ), # 2
    (3, TType.STRING, 'aliasNamePartical', None, None, ), # 3
  )

  def __init__(self, subUserId=None, composeGraphId=None, aliasNamePartical=None,):
    self.subUserId = subUserId
    self.composeGraphId = composeGraphId
    self.aliasNamePartical = aliasNamePartical

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.aliasNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingComposeViewDetailOption')
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 1)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 2)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.aliasNamePartical is not None:
      oprot.writeFieldBegin('aliasNamePartical', TType.STRING, 3)
      oprot.writeString(self.aliasNamePartical)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingComposeViewDetail:
  """
  Attributes:
   - viewDetail
   - graphDetail
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'viewDetail', (xueqiao.trade.hosting.ttypes.HostingComposeView, xueqiao.trade.hosting.ttypes.HostingComposeView.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'graphDetail', (xueqiao.trade.hosting.ttypes.HostingComposeGraph, xueqiao.trade.hosting.ttypes.HostingComposeGraph.thrift_spec), None, ), # 2
  )

  def __init__(self, viewDetail=None, graphDetail=None,):
    self.viewDetail = viewDetail
    self.graphDetail = graphDetail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.viewDetail = xueqiao.trade.hosting.ttypes.HostingComposeView()
          self.viewDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.graphDetail = xueqiao.trade.hosting.ttypes.HostingComposeGraph()
          self.graphDetail.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingComposeViewDetail')
    if self.viewDetail is not None:
      oprot.writeFieldBegin('viewDetail', TType.STRUCT, 1)
      self.viewDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.graphDetail is not None:
      oprot.writeFieldBegin('graphDetail', TType.STRUCT, 2)
      self.graphDetail.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingComposeViewDetailPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(HostingComposeViewDetail, HostingComposeViewDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = HostingComposeViewDetail()
            _elem5.read(iprot)
            self.resultList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingComposeViewDetailPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter6 in self.resultList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QuerySameComposeGraphsPage:
  """
  Attributes:
   - totalCount
   - graphs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'graphs', (TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingComposeGraph, xueqiao.trade.hosting.ttypes.HostingComposeGraph.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, graphs=None,):
    self.totalCount = totalCount
    self.graphs = graphs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.graphs = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = xueqiao.trade.hosting.ttypes.HostingComposeGraph()
            _elem12.read(iprot)
            self.graphs.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QuerySameComposeGraphsPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.graphs is not None:
      oprot.writeFieldBegin('graphs', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.graphs))
      for iter13 in self.graphs:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingTradeAccountOption:
  """
  Attributes:
   - loginUserNamePartical
   - loginUserNameWhole
   - inAccountStates
   - notInAccountStates
   - tradeAccountId
   - brokerId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'loginUserNamePartical', None, None, ), # 2
    (3, TType.STRING, 'loginUserNameWhole', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.SET, 'inAccountStates', (TType.I32,None), None, ), # 6
    (7, TType.SET, 'notInAccountStates', (TType.I32,None), None, ), # 7
    (8, TType.I64, 'tradeAccountId', None, None, ), # 8
    (9, TType.I32, 'brokerId', None, None, ), # 9
  )

  def __init__(self, loginUserNamePartical=None, loginUserNameWhole=None, inAccountStates=None, notInAccountStates=None, tradeAccountId=None, brokerId=None,):
    self.loginUserNamePartical = loginUserNamePartical
    self.loginUserNameWhole = loginUserNameWhole
    self.inAccountStates = inAccountStates
    self.notInAccountStates = notInAccountStates
    self.tradeAccountId = tradeAccountId
    self.brokerId = brokerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.loginUserNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.loginUserNameWhole = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.inAccountStates = set()
          (_etype17, _size14) = iprot.readSetBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI32();
            self.inAccountStates.add(_elem19)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.SET:
          self.notInAccountStates = set()
          (_etype23, _size20) = iprot.readSetBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI32();
            self.notInAccountStates.add(_elem25)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.brokerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingTradeAccountOption')
    if self.loginUserNamePartical is not None:
      oprot.writeFieldBegin('loginUserNamePartical', TType.STRING, 2)
      oprot.writeString(self.loginUserNamePartical)
      oprot.writeFieldEnd()
    if self.loginUserNameWhole is not None:
      oprot.writeFieldBegin('loginUserNameWhole', TType.STRING, 3)
      oprot.writeString(self.loginUserNameWhole)
      oprot.writeFieldEnd()
    if self.inAccountStates is not None:
      oprot.writeFieldBegin('inAccountStates', TType.SET, 6)
      oprot.writeSetBegin(TType.I32, len(self.inAccountStates))
      for iter26 in self.inAccountStates:
        oprot.writeI32(iter26)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.notInAccountStates is not None:
      oprot.writeFieldBegin('notInAccountStates', TType.SET, 7)
      oprot.writeSetBegin(TType.I32, len(self.notInAccountStates))
      for iter27 in self.notInAccountStates:
        oprot.writeI32(iter27)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 8)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.brokerId is not None:
      oprot.writeFieldBegin('brokerId', TType.I32, 9)
      oprot.writeI32(self.brokerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingTradeAccountPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingTradeAccount, xueqiao.trade.hosting.ttypes.HostingTradeAccount.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = xueqiao.trade.hosting.ttypes.HostingTradeAccount()
            _elem33.read(iprot)
            self.resultList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingTradeAccountPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter34 in self.resultList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingUserSetting:
  """
  Attributes:
   - version
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'version', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
  )

  def __init__(self, version=None, content=None,):
    self.version = version
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingUserSetting')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 1)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingSAWRUItemListOption:
  """
  Attributes:
   - subAccountId
   - subAccountNameWhole
   - subAccountNamePartical
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'subAccountNameWhole', None, None, ), # 2
    (3, TType.STRING, 'subAccountNamePartical', None, None, ), # 3
  )

  def __init__(self, subAccountId=None, subAccountNameWhole=None, subAccountNamePartical=None,):
    self.subAccountId = subAccountId
    self.subAccountNameWhole = subAccountNameWhole
    self.subAccountNamePartical = subAccountNamePartical

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.subAccountNameWhole = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.subAccountNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingSAWRUItemListOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.subAccountNameWhole is not None:
      oprot.writeFieldBegin('subAccountNameWhole', TType.STRING, 2)
      oprot.writeString(self.subAccountNameWhole)
      oprot.writeFieldEnd()
    if self.subAccountNamePartical is not None:
      oprot.writeFieldBegin('subAccountNamePartical', TType.STRING, 3)
      oprot.writeString(self.subAccountNamePartical)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSAWRUItemList:
  """
  Attributes:
   - subAccount
   - relatedItemList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'subAccount', (xueqiao.trade.hosting.ttypes.HostingSubAccount, xueqiao.trade.hosting.ttypes.HostingSubAccount.thrift_spec), None, ), # 1
    (2, TType.LIST, 'relatedItemList', (TType.STRUCT,(xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem, xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, subAccount=None, relatedItemList=None,):
    self.subAccount = subAccount
    self.relatedItemList = relatedItemList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.subAccount = xueqiao.trade.hosting.ttypes.HostingSubAccount()
          self.subAccount.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.relatedItemList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = xueqiao.trade.hosting.ttypes.HostingSubAccountRelatedItem()
            _elem40.read(iprot)
            self.relatedItemList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSAWRUItemList')
    if self.subAccount is not None:
      oprot.writeFieldBegin('subAccount', TType.STRUCT, 1)
      self.subAccount.write(oprot)
      oprot.writeFieldEnd()
    if self.relatedItemList is not None:
      oprot.writeFieldBegin('relatedItemList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.relatedItemList))
      for iter41 in self.relatedItemList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSAWRUItemListPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(HostingSAWRUItemList, HostingSAWRUItemList.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = HostingSAWRUItemList()
            _elem47.read(iprot)
            self.resultList.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSAWRUItemListPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter48 in self.resultList:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrder, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrder.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrder()
            _elem54.read(iprot)
            self.resultList.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter55 in self.resultList:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQTradePage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTrade, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTrade.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQTrade()
            _elem61.read(iprot)
            self.resultList.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQTradePage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter62 in self.resultList:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingXQOrderWithTradeListPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList, xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = xueqiao.trade.hosting.arbitrage.thriftapi.ttypes.HostingXQOrderWithTradeList()
            _elem68.read(iprot)
            self.resultList.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingXQOrderWithTradeListPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter69 in self.resultList:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTAFundCurrencyGroup:
  """
  Attributes:
   - currencyNo
   - itemFunds
   - groupTotalFund
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'currencyNo', None, None, ), # 1
    (2, TType.LIST, 'itemFunds', (TType.STRUCT,(xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund, xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'groupTotalFund', (xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund, xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund.thrift_spec), None, ), # 3
  )

  def __init__(self, currencyNo=None, itemFunds=None, groupTotalFund=None,):
    self.currencyNo = currencyNo
    self.itemFunds = itemFunds
    self.groupTotalFund = groupTotalFund

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.currencyNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.itemFunds = []
          (_etype73, _size70) = iprot.readListBegin()
          for _i74 in xrange(_size70):
            _elem75 = xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund()
            _elem75.read(iprot)
            self.itemFunds.append(_elem75)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.groupTotalFund = xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund()
          self.groupTotalFund.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTAFundCurrencyGroup')
    if self.currencyNo is not None:
      oprot.writeFieldBegin('currencyNo', TType.STRING, 1)
      oprot.writeString(self.currencyNo)
      oprot.writeFieldEnd()
    if self.itemFunds is not None:
      oprot.writeFieldBegin('itemFunds', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.itemFunds))
      for iter76 in self.itemFunds:
        iter76.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.groupTotalFund is not None:
      oprot.writeFieldBegin('groupTotalFund', TType.STRUCT, 3)
      self.groupTotalFund.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTAFundItem:
  """
  Attributes:
   - tradeAccountId
   - updateTimestampMs
   - totalFund
   - groupFunds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.I64, 'updateTimestampMs', None, None, ), # 2
    (3, TType.STRUCT, 'totalFund', (xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund, xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund.thrift_spec), None, ), # 3
    (4, TType.MAP, 'groupFunds', (TType.STRING,None,TType.STRUCT,(HostingTAFundCurrencyGroup, HostingTAFundCurrencyGroup.thrift_spec)), None, ), # 4
  )

  def __init__(self, tradeAccountId=None, updateTimestampMs=None, totalFund=None, groupFunds=None,):
    self.tradeAccountId = tradeAccountId
    self.updateTimestampMs = updateTimestampMs
    self.totalFund = totalFund
    self.groupFunds = groupFunds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.updateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.totalFund = xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountFund()
          self.totalFund.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.groupFunds = {}
          (_ktype78, _vtype79, _size77 ) = iprot.readMapBegin()
          for _i81 in xrange(_size77):
            _key82 = iprot.readString();
            _val83 = HostingTAFundCurrencyGroup()
            _val83.read(iprot)
            self.groupFunds[_key82] = _val83
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTAFundItem')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.updateTimestampMs is not None:
      oprot.writeFieldBegin('updateTimestampMs', TType.I64, 2)
      oprot.writeI64(self.updateTimestampMs)
      oprot.writeFieldEnd()
    if self.totalFund is not None:
      oprot.writeFieldBegin('totalFund', TType.STRUCT, 3)
      self.totalFund.write(oprot)
      oprot.writeFieldEnd()
    if self.groupFunds is not None:
      oprot.writeFieldBegin('groupFunds', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.groupFunds))
      for kiter84,viter85 in self.groupFunds.items():
        oprot.writeString(kiter84)
        viter85.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTAFundHisItem:
  """
  Attributes:
   - item
   - date
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'item', (HostingTAFundItem, HostingTAFundItem.thrift_spec), None, ), # 1
    (2, TType.STRING, 'date', None, None, ), # 2
  )

  def __init__(self, item=None, date=None,):
    self.item = item
    self.date = date

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.item = HostingTAFundItem()
          self.item.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTAFundHisItem')
    if self.item is not None:
      oprot.writeFieldBegin('item', TType.STRUCT, 1)
      self.item.write(oprot)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 2)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqTradeAccountPositionOption:
  """
  资金持仓的明细查询条件
  时间条件：大于 startTradeTimestampMs, 小于 endTradeTimestampMs
  所有option使用逻辑与(AND)操作

  Attributes:
   - tradeAccountId
   - sledContractId
   - startTradeTimestampMs
   - endTradeTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    None, # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I64, 'startTradeTimestampMs', None, None, ), # 4
    (5, TType.I64, 'endTradeTimestampMs', None, None, ), # 5
  )

  def __init__(self, tradeAccountId=None, sledContractId=None, startTradeTimestampMs=None, endTradeTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.startTradeTimestampMs = startTradeTimestampMs
    self.endTradeTimestampMs = endTradeTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqTradeAccountPositionOption')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.startTradeTimestampMs is not None:
      oprot.writeFieldBegin('startTradeTimestampMs', TType.I64, 4)
      oprot.writeI64(self.startTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.endTradeTimestampMs is not None:
      oprot.writeFieldBegin('endTradeTimestampMs', TType.I64, 5)
      oprot.writeI64(self.endTradeTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountSettlementInfoWithRelatedTime:
  """
  Attributes:
   - tradeAccountSettlementInfo
   - reqTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'tradeAccountSettlementInfo', (xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo, xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'reqTime', (xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.SettlementTimeRelateSledReqTime, xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.SettlementTimeRelateSledReqTime.thrift_spec), None, ), # 2
  )

  def __init__(self, tradeAccountSettlementInfo=None, reqTime=None,):
    self.tradeAccountSettlementInfo = tradeAccountSettlementInfo
    self.reqTime = reqTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.tradeAccountSettlementInfo = xueqiao.trade.hosting.tradeaccount.data.ttypes.TradeAccountSettlementInfo()
          self.tradeAccountSettlementInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reqTime = xueqiao.trade.hosting.position.adjust.thriftapi.ttypes.SettlementTimeRelateSledReqTime()
          self.reqTime.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountSettlementInfoWithRelatedTime')
    if self.tradeAccountSettlementInfo is not None:
      oprot.writeFieldBegin('tradeAccountSettlementInfo', TType.STRUCT, 1)
      self.tradeAccountSettlementInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.reqTime is not None:
      oprot.writeFieldBegin('reqTime', TType.STRUCT, 2)
      self.reqTime.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryXQTradeLameTaskNotePageOption:
  """
  Attributes:
   - subAccountIds
   - xqTradeIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'subAccountIds', (TType.I64,None), None, ), # 1
    (2, TType.SET, 'xqTradeIds', (TType.I64,None), None, ), # 2
  )

  def __init__(self, subAccountIds=None, xqTradeIds=None,):
    self.subAccountIds = subAccountIds
    self.xqTradeIds = xqTradeIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.subAccountIds = set()
          (_etype89, _size86) = iprot.readSetBegin()
          for _i90 in xrange(_size86):
            _elem91 = iprot.readI64();
            self.subAccountIds.add(_elem91)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.xqTradeIds = set()
          (_etype95, _size92) = iprot.readSetBegin()
          for _i96 in xrange(_size92):
            _elem97 = iprot.readI64();
            self.xqTradeIds.add(_elem97)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryXQTradeLameTaskNotePageOption')
    if self.subAccountIds is not None:
      oprot.writeFieldBegin('subAccountIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.subAccountIds))
      for iter98 in self.subAccountIds:
        oprot.writeI64(iter98)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.xqTradeIds is not None:
      oprot.writeFieldBegin('xqTradeIds', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.xqTradeIds))
      for iter99 in self.xqTradeIds:
        oprot.writeI64(iter99)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqMailBoxMessageOption:
  """
  Attributes:
   - messageId
   - state
   - startTimestamp
   - endTimstamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'messageId', None, None, ), # 1
    (2, TType.I32, 'state', None, None, ), # 2
    (3, TType.I64, 'startTimestamp', None, None, ), # 3
    (4, TType.I64, 'endTimstamp', None, None, ), # 4
  )

  def __init__(self, messageId=None, state=None, startTimestamp=None, endTimstamp=None,):
    self.messageId = messageId
    self.state = state
    self.startTimestamp = startTimestamp
    self.endTimstamp = endTimstamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.messageId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endTimstamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqMailBoxMessageOption')
    if self.messageId is not None:
      oprot.writeFieldBegin('messageId', TType.I64, 1)
      oprot.writeI64(self.messageId)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 2)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.startTimestamp is not None:
      oprot.writeFieldBegin('startTimestamp', TType.I64, 3)
      oprot.writeI64(self.startTimestamp)
      oprot.writeFieldEnd()
    if self.endTimstamp is not None:
      oprot.writeFieldBegin('endTimstamp', TType.I64, 4)
      oprot.writeI64(self.endTimstamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
