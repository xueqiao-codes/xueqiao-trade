#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HostingStatus:
  EMPTY = 0
  NORMAL = 1
  CLEARING = 2

  _VALUES_TO_NAMES = {
    0: "EMPTY",
    1: "NORMAL",
    2: "CLEARING",
  }

  _NAMES_TO_VALUES = {
    "EMPTY": 0,
    "NORMAL": 1,
    "CLEARING": 2,
  }

class HostingRunningMode:
  ALLDAY_HOSTING = 1
  SIM_HOSTING = 2
  REAL_HOSTING = 3

  _VALUES_TO_NAMES = {
    1: "ALLDAY_HOSTING",
    2: "SIM_HOSTING",
    3: "REAL_HOSTING",
  }

  _NAMES_TO_VALUES = {
    "ALLDAY_HOSTING": 1,
    "SIM_HOSTING": 2,
    "REAL_HOSTING": 3,
  }

class EHostingUserRole:
  """
  托管用户角色
    分成1000个权限登记，权限等级越高，值越大
  """
  AdminGroup = 1000
  BossGroup = 500
  TraderGroup = 200

  _VALUES_TO_NAMES = {
    1000: "AdminGroup",
    500: "BossGroup",
    200: "TraderGroup",
  }

  _NAMES_TO_VALUES = {
    "AdminGroup": 1000,
    "BossGroup": 500,
    "TraderGroup": 200,
  }

class HostingUserOrderType:
  OrderByCreateTimestampAsc = 1
  OrderByCreateTimestampDesc = 2
  OrderByLoginNameAsc = 3
  OrderByLoginNameDesc = 4

  _VALUES_TO_NAMES = {
    1: "OrderByCreateTimestampAsc",
    2: "OrderByCreateTimestampDesc",
    3: "OrderByLoginNameAsc",
    4: "OrderByLoginNameDesc",
  }

  _NAMES_TO_VALUES = {
    "OrderByCreateTimestampAsc": 1,
    "OrderByCreateTimestampDesc": 2,
    "OrderByLoginNameAsc": 3,
    "OrderByLoginNameDesc": 4,
  }

class HostingUserState:
  """
  托管机用户状态
  """
  USER_NORMAL = 1
  USER_DISABLED = 2

  _VALUES_TO_NAMES = {
    1: "USER_NORMAL",
    2: "USER_DISABLED",
  }

  _NAMES_TO_VALUES = {
    "USER_NORMAL": 1,
    "USER_DISABLED": 2,
  }

class HostingComposeLegTradeDirection:
  """
  组合腿的买卖方向
  """
  COMPOSE_LEG_BUY = 0
  COMPOSE_LEG_SELL = 1

  _VALUES_TO_NAMES = {
    0: "COMPOSE_LEG_BUY",
    1: "COMPOSE_LEG_SELL",
  }

  _NAMES_TO_VALUES = {
    "COMPOSE_LEG_BUY": 0,
    "COMPOSE_LEG_SELL": 1,
  }

class HostingComposeGraphEnv:
  COMPOSE_GRAPH_SIM = 1
  COMPOSE_GRAPH_REAL = 2

  _VALUES_TO_NAMES = {
    1: "COMPOSE_GRAPH_SIM",
    2: "COMPOSE_GRAPH_REAL",
  }

  _NAMES_TO_VALUES = {
    "COMPOSE_GRAPH_SIM": 1,
    "COMPOSE_GRAPH_REAL": 2,
  }

class HostingComposeViewSource:
  USER_CREATED = 1
  USER_SEARCHED = 2
  GRAPH_SHARED = 3

  _VALUES_TO_NAMES = {
    1: "USER_CREATED",
    2: "USER_SEARCHED",
    3: "GRAPH_SHARED",
  }

  _NAMES_TO_VALUES = {
    "USER_CREATED": 1,
    "USER_SEARCHED": 2,
    "GRAPH_SHARED": 3,
  }

class HostingComposeViewSubscribeStatus:
  UNSUBSCRIBED = 0
  SUBSCRIBED = 1

  _VALUES_TO_NAMES = {
    0: "UNSUBSCRIBED",
    1: "SUBSCRIBED",
  }

  _NAMES_TO_VALUES = {
    "UNSUBSCRIBED": 0,
    "SUBSCRIBED": 1,
  }

class HostingComposeViewStatus:
  VIEW_NORMAL = 0
  VIEW_DELETED = 1

  _VALUES_TO_NAMES = {
    0: "VIEW_NORMAL",
    1: "VIEW_DELETED",
  }

  _NAMES_TO_VALUES = {
    "VIEW_NORMAL": 0,
    "VIEW_DELETED": 1,
  }

class BrokerTechPlatform:
  """
  交易账号相关
  """
  TECH_CTP = 1
  TECH_ESUNNY_9 = 2
  TECH_ESUNNY_3 = 3

  _VALUES_TO_NAMES = {
    1: "TECH_CTP",
    2: "TECH_ESUNNY_9",
    3: "TECH_ESUNNY_3",
  }

  _NAMES_TO_VALUES = {
    "TECH_CTP": 1,
    "TECH_ESUNNY_9": 2,
    "TECH_ESUNNY_3": 3,
  }

class TradeAccountState:
  """
  账号本身的状态
  """
  ACCOUNT_NORMAL = 1
  ACCOUNT_REMOVED = 2
  ACCOUNT_DISABLED = 3

  _VALUES_TO_NAMES = {
    1: "ACCOUNT_NORMAL",
    2: "ACCOUNT_REMOVED",
    3: "ACCOUNT_DISABLED",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_NORMAL": 1,
    "ACCOUNT_REMOVED": 2,
    "ACCOUNT_DISABLED": 3,
  }

class TradeAccountAccessState:
  """
  账号接入的状态
  """
  ACCOUNT_ACTIVE = 1
  ACCOUNT_INVALID = 2

  _VALUES_TO_NAMES = {
    1: "ACCOUNT_ACTIVE",
    2: "ACCOUNT_INVALID",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_ACTIVE": 1,
    "ACCOUNT_INVALID": 2,
  }

class HostingExecOrderType:
  """
  执行子订单模块
  """
  ORDER_LIMIT_PRICE = 1
  ORDER_WITH_CONDITION = 2

  _VALUES_TO_NAMES = {
    1: "ORDER_LIMIT_PRICE",
    2: "ORDER_WITH_CONDITION",
  }

  _NAMES_TO_VALUES = {
    "ORDER_LIMIT_PRICE": 1,
    "ORDER_WITH_CONDITION": 2,
  }

class HostingExecOrderTradeDirection:
  ORDER_BUY = 0
  ORDER_SELL = 1

  _VALUES_TO_NAMES = {
    0: "ORDER_BUY",
    1: "ORDER_SELL",
  }

  _NAMES_TO_VALUES = {
    "ORDER_BUY": 0,
    "ORDER_SELL": 1,
  }

class HostingExecOrderCreatorType:
  ORDER_ARTIFICAL = 1
  ORDER_MACHINE = 2

  _VALUES_TO_NAMES = {
    1: "ORDER_ARTIFICAL",
    2: "ORDER_MACHINE",
  }

  _NAMES_TO_VALUES = {
    "ORDER_ARTIFICAL": 1,
    "ORDER_MACHINE": 2,
  }

class HostingExecOrderMode:
  ORDER_FOK = 1
  ORDER_FAK = 2
  ORDER_GFD = 3
  ORDER_GTC = 4
  ORDER_GTD = 5

  _VALUES_TO_NAMES = {
    1: "ORDER_FOK",
    2: "ORDER_FAK",
    3: "ORDER_GFD",
    4: "ORDER_GTC",
    5: "ORDER_GTD",
  }

  _NAMES_TO_VALUES = {
    "ORDER_FOK": 1,
    "ORDER_FAK": 2,
    "ORDER_GFD": 3,
    "ORDER_GTC": 4,
    "ORDER_GTD": 5,
  }

class HostingExecOrderCondition:
  LASTEST_PRICE_GT = 1
  LASTEST_PRICE_GE = 2
  LASTEST_PRICE_LT = 3
  LASTEST_PRICE_LE = 4
  SELLONE_PRICE_GT = 5
  SELLONE_PRICE_GE = 6
  SELLONE_PRICE_LT = 7
  SELLONE_PRICE_LE = 8
  BUYONE_PRICE_GT = 9
  BUYONE_PRICE_GE = 10
  BUYONE_PRICE_LT = 11
  BUYONE_PRICE_LE = 12

  _VALUES_TO_NAMES = {
    1: "LASTEST_PRICE_GT",
    2: "LASTEST_PRICE_GE",
    3: "LASTEST_PRICE_LT",
    4: "LASTEST_PRICE_LE",
    5: "SELLONE_PRICE_GT",
    6: "SELLONE_PRICE_GE",
    7: "SELLONE_PRICE_LT",
    8: "SELLONE_PRICE_LE",
    9: "BUYONE_PRICE_GT",
    10: "BUYONE_PRICE_GE",
    11: "BUYONE_PRICE_LT",
    12: "BUYONE_PRICE_LE",
  }

  _NAMES_TO_VALUES = {
    "LASTEST_PRICE_GT": 1,
    "LASTEST_PRICE_GE": 2,
    "LASTEST_PRICE_LT": 3,
    "LASTEST_PRICE_LE": 4,
    "SELLONE_PRICE_GT": 5,
    "SELLONE_PRICE_GE": 6,
    "SELLONE_PRICE_LT": 7,
    "SELLONE_PRICE_LE": 8,
    "BUYONE_PRICE_GT": 9,
    "BUYONE_PRICE_GE": 10,
    "BUYONE_PRICE_LT": 11,
    "BUYONE_PRICE_LE": 12,
  }

class HostingExecOrderStateValue:
  ORDER_WAITING_VERIFY = 1
  ORDER_VERIFY_FAILED = 2
  ORDER_WAITING_SLED_SEND = 3
  ORDER_SLED_SEND_FAILED = 4
  ORDER_SLED_SEND_UNKOWN = 5
  ORDER_UPSIDE_REJECTED = 6
  ORDER_UPSIDE_RECEIVED = 7
  ORDER_UPSIDE_RESTING = 8
  ORDER_UPSIDE_PARTFINISHED = 9
  ORDER_UPSIDE_FINISHED = 11
  ORDER_UPSIDE_RECEIVED_WAITING_REVOKE = 12
  ORDER_UPSIDE_RESTING_WAITING_REVOKE = 13
  ORDER_UPSIDE_PARTFINISHED_WAITING_REVOKE = 14
  ORDER_UPSIDE_RECEIVED_REVOKE_SEND_UNKOWN = 15
  ORDER_UPSIDE_RESTING_REVOKE_SEND_UNKOWN = 16
  ORDER_UPSIDE_PARTFINISHED_REVOKE_SEND_UNKOWN = 17
  ORDER_UPSIDE_REVOKE_RECEIVED = 18
  ORDER_UPSIDE_DELETED = 20
  ORDER_CONDITION_NOT_TRIGGER = 23
  ORDER_CONDITION_TRIGGEDED = 24
  ORDER_CONDITION_NOT_TRIGGER_WAITING_REVOKE = 25
  ORDER_CONDITION_NOT_TRIGGER_REVOKE_SEND_UNKOWN = 26
  ORDER_SLED_ALLOC_REF_FINISHED = 30
  ORDER_EXPIRED = 31

  _VALUES_TO_NAMES = {
    1: "ORDER_WAITING_VERIFY",
    2: "ORDER_VERIFY_FAILED",
    3: "ORDER_WAITING_SLED_SEND",
    4: "ORDER_SLED_SEND_FAILED",
    5: "ORDER_SLED_SEND_UNKOWN",
    6: "ORDER_UPSIDE_REJECTED",
    7: "ORDER_UPSIDE_RECEIVED",
    8: "ORDER_UPSIDE_RESTING",
    9: "ORDER_UPSIDE_PARTFINISHED",
    11: "ORDER_UPSIDE_FINISHED",
    12: "ORDER_UPSIDE_RECEIVED_WAITING_REVOKE",
    13: "ORDER_UPSIDE_RESTING_WAITING_REVOKE",
    14: "ORDER_UPSIDE_PARTFINISHED_WAITING_REVOKE",
    15: "ORDER_UPSIDE_RECEIVED_REVOKE_SEND_UNKOWN",
    16: "ORDER_UPSIDE_RESTING_REVOKE_SEND_UNKOWN",
    17: "ORDER_UPSIDE_PARTFINISHED_REVOKE_SEND_UNKOWN",
    18: "ORDER_UPSIDE_REVOKE_RECEIVED",
    20: "ORDER_UPSIDE_DELETED",
    23: "ORDER_CONDITION_NOT_TRIGGER",
    24: "ORDER_CONDITION_TRIGGEDED",
    25: "ORDER_CONDITION_NOT_TRIGGER_WAITING_REVOKE",
    26: "ORDER_CONDITION_NOT_TRIGGER_REVOKE_SEND_UNKOWN",
    30: "ORDER_SLED_ALLOC_REF_FINISHED",
    31: "ORDER_EXPIRED",
  }

  _NAMES_TO_VALUES = {
    "ORDER_WAITING_VERIFY": 1,
    "ORDER_VERIFY_FAILED": 2,
    "ORDER_WAITING_SLED_SEND": 3,
    "ORDER_SLED_SEND_FAILED": 4,
    "ORDER_SLED_SEND_UNKOWN": 5,
    "ORDER_UPSIDE_REJECTED": 6,
    "ORDER_UPSIDE_RECEIVED": 7,
    "ORDER_UPSIDE_RESTING": 8,
    "ORDER_UPSIDE_PARTFINISHED": 9,
    "ORDER_UPSIDE_FINISHED": 11,
    "ORDER_UPSIDE_RECEIVED_WAITING_REVOKE": 12,
    "ORDER_UPSIDE_RESTING_WAITING_REVOKE": 13,
    "ORDER_UPSIDE_PARTFINISHED_WAITING_REVOKE": 14,
    "ORDER_UPSIDE_RECEIVED_REVOKE_SEND_UNKOWN": 15,
    "ORDER_UPSIDE_RESTING_REVOKE_SEND_UNKOWN": 16,
    "ORDER_UPSIDE_PARTFINISHED_REVOKE_SEND_UNKOWN": 17,
    "ORDER_UPSIDE_REVOKE_RECEIVED": 18,
    "ORDER_UPSIDE_DELETED": 20,
    "ORDER_CONDITION_NOT_TRIGGER": 23,
    "ORDER_CONDITION_TRIGGEDED": 24,
    "ORDER_CONDITION_NOT_TRIGGER_WAITING_REVOKE": 25,
    "ORDER_CONDITION_NOT_TRIGGER_REVOKE_SEND_UNKOWN": 26,
    "ORDER_SLED_ALLOC_REF_FINISHED": 30,
    "ORDER_EXPIRED": 31,
  }

class CTPCombOffsetFlagType:
  THOST_FTDC_OF_OPEN = 1
  THOST_FTDC_OF_ClOSE = 2
  THOST_FTDC_OF_FORCECLOSE = 3
  THOST_FTDC_OF_CLOSETODAY = 4
  THOST_FTDC_OF_CLOSEYESTERDAY = 5
  THOST_FTDC_OF_LOCALFORCECLOSE = 6

  _VALUES_TO_NAMES = {
    1: "THOST_FTDC_OF_OPEN",
    2: "THOST_FTDC_OF_ClOSE",
    3: "THOST_FTDC_OF_FORCECLOSE",
    4: "THOST_FTDC_OF_CLOSETODAY",
    5: "THOST_FTDC_OF_CLOSEYESTERDAY",
    6: "THOST_FTDC_OF_LOCALFORCECLOSE",
  }

  _NAMES_TO_VALUES = {
    "THOST_FTDC_OF_OPEN": 1,
    "THOST_FTDC_OF_ClOSE": 2,
    "THOST_FTDC_OF_FORCECLOSE": 3,
    "THOST_FTDC_OF_CLOSETODAY": 4,
    "THOST_FTDC_OF_CLOSEYESTERDAY": 5,
    "THOST_FTDC_OF_LOCALFORCECLOSE": 6,
  }

class CTPCombHedgeFlagType:
  THOST_FTDC_HF_SPECULATION = 1
  THOST_FTDC_HF_ARBITRAGE = 2
  THOST_FTDC_HF_HEDGE = 3
  THOST_FTDC_HF_MARKETMAKER = 4

  _VALUES_TO_NAMES = {
    1: "THOST_FTDC_HF_SPECULATION",
    2: "THOST_FTDC_HF_ARBITRAGE",
    3: "THOST_FTDC_HF_HEDGE",
    4: "THOST_FTDC_HF_MARKETMAKER",
  }

  _NAMES_TO_VALUES = {
    "THOST_FTDC_HF_SPECULATION": 1,
    "THOST_FTDC_HF_ARBITRAGE": 2,
    "THOST_FTDC_HF_HEDGE": 3,
    "THOST_FTDC_HF_MARKETMAKER": 4,
  }

class CTPTradeDirection:
  CTP_BUY = 0
  CTP_SELL = 1

  _VALUES_TO_NAMES = {
    0: "CTP_BUY",
    1: "CTP_SELL",
  }

  _NAMES_TO_VALUES = {
    "CTP_BUY": 0,
    "CTP_SELL": 1,
  }

class HostingUpsideNotifyStateType:
  NOTIFY_UPSIDE_RECIVED = 1
  NOTIFY_CONDITION_NOT_TRIGGERED = 2
  NOTIFY_CONDITION_TRIGGERED = 3
  NOTIFY_ORDER_RESTING = 4
  NOTIFY_ORDER_CANCELLED = 5
  NOTIFY_ORDER_PARTFINISHED = 6
  NOTIFY_ORDER_FINISHED = 7
  NOTIFY_ORDER_REJECTED = 8
  NOTIFY_ORDER_CANCEL_RECEIVED = 9

  _VALUES_TO_NAMES = {
    1: "NOTIFY_UPSIDE_RECIVED",
    2: "NOTIFY_CONDITION_NOT_TRIGGERED",
    3: "NOTIFY_CONDITION_TRIGGERED",
    4: "NOTIFY_ORDER_RESTING",
    5: "NOTIFY_ORDER_CANCELLED",
    6: "NOTIFY_ORDER_PARTFINISHED",
    7: "NOTIFY_ORDER_FINISHED",
    8: "NOTIFY_ORDER_REJECTED",
    9: "NOTIFY_ORDER_CANCEL_RECEIVED",
  }

  _NAMES_TO_VALUES = {
    "NOTIFY_UPSIDE_RECIVED": 1,
    "NOTIFY_CONDITION_NOT_TRIGGERED": 2,
    "NOTIFY_CONDITION_TRIGGERED": 3,
    "NOTIFY_ORDER_RESTING": 4,
    "NOTIFY_ORDER_CANCELLED": 5,
    "NOTIFY_ORDER_PARTFINISHED": 6,
    "NOTIFY_ORDER_FINISHED": 7,
    "NOTIFY_ORDER_REJECTED": 8,
    "NOTIFY_ORDER_CANCEL_RECEIVED": 9,
  }

class HostingUpsideNotifyStateSource:
  UPSIDE_FORWARD = 0
  UPSIDE_SYNC = 1

  _VALUES_TO_NAMES = {
    0: "UPSIDE_FORWARD",
    1: "UPSIDE_SYNC",
  }

  _NAMES_TO_VALUES = {
    "UPSIDE_FORWARD": 0,
    "UPSIDE_SYNC": 1,
  }

class HostingExecTradeDirection:
  TRADE_BUY = 0
  TRADE_SELL = 1

  _VALUES_TO_NAMES = {
    0: "TRADE_BUY",
    1: "TRADE_SELL",
  }

  _NAMES_TO_VALUES = {
    "TRADE_BUY": 0,
    "TRADE_SELL": 1,
  }


class HostingInfo:
  """
  Attributes:
   - status
   - tableVersion
   - subUserTotalCount
   - composeTotalCount
   - onlineUserTotalCount
   - machineId
   - runningMode
   - buildVersion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.I32, 'tableVersion', None, None, ), # 2
    (3, TType.I32, 'subUserTotalCount', None, None, ), # 3
    (4, TType.I32, 'composeTotalCount', None, None, ), # 4
    (5, TType.I32, 'onlineUserTotalCount', None, None, ), # 5
    (6, TType.I64, 'machineId', None, None, ), # 6
    (7, TType.I32, 'runningMode', None, None, ), # 7
    (8, TType.STRING, 'buildVersion', None, None, ), # 8
  )

  def __init__(self, status=None, tableVersion=None, subUserTotalCount=None, composeTotalCount=None, onlineUserTotalCount=None, machineId=None, runningMode=None, buildVersion=None,):
    self.status = status
    self.tableVersion = tableVersion
    self.subUserTotalCount = subUserTotalCount
    self.composeTotalCount = composeTotalCount
    self.onlineUserTotalCount = onlineUserTotalCount
    self.machineId = machineId
    self.runningMode = runningMode
    self.buildVersion = buildVersion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tableVersion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.subUserTotalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.composeTotalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.onlineUserTotalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.machineId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.runningMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.buildVersion = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingInfo')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.tableVersion is not None:
      oprot.writeFieldBegin('tableVersion', TType.I32, 2)
      oprot.writeI32(self.tableVersion)
      oprot.writeFieldEnd()
    if self.subUserTotalCount is not None:
      oprot.writeFieldBegin('subUserTotalCount', TType.I32, 3)
      oprot.writeI32(self.subUserTotalCount)
      oprot.writeFieldEnd()
    if self.composeTotalCount is not None:
      oprot.writeFieldBegin('composeTotalCount', TType.I32, 4)
      oprot.writeI32(self.composeTotalCount)
      oprot.writeFieldEnd()
    if self.onlineUserTotalCount is not None:
      oprot.writeFieldBegin('onlineUserTotalCount', TType.I32, 5)
      oprot.writeI32(self.onlineUserTotalCount)
      oprot.writeFieldEnd()
    if self.machineId is not None:
      oprot.writeFieldBegin('machineId', TType.I64, 6)
      oprot.writeI64(self.machineId)
      oprot.writeFieldEnd()
    if self.runningMode is not None:
      oprot.writeFieldBegin('runningMode', TType.I32, 7)
      oprot.writeI32(self.runningMode)
      oprot.writeFieldEnd()
    if self.buildVersion is not None:
      oprot.writeFieldBegin('buildVersion', TType.STRING, 8)
      oprot.writeString(self.buildVersion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingUser:
  """
  托管机用户

  Attributes:
   - subUserId
   - loginName
   - loginPasswd
   - phone
   - nickName
   - userRoleValue
   - email
   - userState
   - createTimestamp
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.STRING, 'loginName', None, None, ), # 3
    (4, TType.STRING, 'loginPasswd', None, None, ), # 4
    (5, TType.STRING, 'phone', None, None, ), # 5
    (6, TType.STRING, 'nickName', None, None, ), # 6
    (7, TType.I16, 'userRoleValue', None, None, ), # 7
    (8, TType.STRING, 'email', None, None, ), # 8
    (9, TType.I32, 'userState', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    (15, TType.I32, 'createTimestamp', None, None, ), # 15
    (16, TType.I32, 'lastmodifyTimestamp', None, None, ), # 16
  )

  def __init__(self, subUserId=None, loginName=None, loginPasswd=None, phone=None, nickName=None, userRoleValue=None, email=None, userState=None, createTimestamp=None, lastmodifyTimestamp=None,):
    self.subUserId = subUserId
    self.loginName = loginName
    self.loginPasswd = loginPasswd
    self.phone = phone
    self.nickName = nickName
    self.userRoleValue = userRoleValue
    self.email = email
    self.userState = userState
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.loginName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.loginPasswd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.phone = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.userRoleValue = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.userState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingUser')
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.loginName is not None:
      oprot.writeFieldBegin('loginName', TType.STRING, 3)
      oprot.writeString(self.loginName)
      oprot.writeFieldEnd()
    if self.loginPasswd is not None:
      oprot.writeFieldBegin('loginPasswd', TType.STRING, 4)
      oprot.writeString(self.loginPasswd)
      oprot.writeFieldEnd()
    if self.phone is not None:
      oprot.writeFieldBegin('phone', TType.STRING, 5)
      oprot.writeString(self.phone)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 6)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.userRoleValue is not None:
      oprot.writeFieldBegin('userRoleValue', TType.I16, 7)
      oprot.writeI16(self.userRoleValue)
      oprot.writeFieldEnd()
    if self.email is not None:
      oprot.writeFieldBegin('email', TType.STRING, 8)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.userState is not None:
      oprot.writeFieldBegin('userState', TType.I32, 9)
      oprot.writeI32(self.userState)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 15)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 16)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingUserOption:
  """
  Attributes:
   - subUserId
   - loginNamePartical
   - nickNamePartical
   - loginNameWhole
   - orderType
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.STRING, 'loginNamePartical', None, None, ), # 3
    (4, TType.STRING, 'nickNamePartical', None, None, ), # 4
    (5, TType.STRING, 'loginNameWhole', None, None, ), # 5
    (6, TType.I32, 'orderType', None, None, ), # 6
  )

  def __init__(self, subUserId=None, loginNamePartical=None, nickNamePartical=None, loginNameWhole=None, orderType=None,):
    self.subUserId = subUserId
    self.loginNamePartical = loginNamePartical
    self.nickNamePartical = nickNamePartical
    self.loginNameWhole = loginNameWhole
    self.orderType = orderType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.loginNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.nickNamePartical = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.loginNameWhole = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.orderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingUserOption')
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.loginNamePartical is not None:
      oprot.writeFieldBegin('loginNamePartical', TType.STRING, 3)
      oprot.writeString(self.loginNamePartical)
      oprot.writeFieldEnd()
    if self.nickNamePartical is not None:
      oprot.writeFieldBegin('nickNamePartical', TType.STRING, 4)
      oprot.writeString(self.nickNamePartical)
      oprot.writeFieldEnd()
    if self.loginNameWhole is not None:
      oprot.writeFieldBegin('loginNameWhole', TType.STRING, 5)
      oprot.writeString(self.loginNameWhole)
      oprot.writeFieldEnd()
    if self.orderType is not None:
      oprot.writeFieldBegin('orderType', TType.I32, 6)
      oprot.writeI32(self.orderType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHostingUserPage:
  """
  Attributes:
   - totalCount
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalCount', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(HostingUser, HostingUser.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalCount=None, resultList=None,):
    self.totalCount = totalCount
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = HostingUser()
            _elem5.read(iprot)
            self.resultList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHostingUserPage')
    if self.totalCount is not None:
      oprot.writeFieldBegin('totalCount', TType.I32, 1)
      oprot.writeI32(self.totalCount)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter6 in self.resultList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSession:
  """
  子用户Session

  Attributes:
   - machineId
   - subUserId
   - token
   - loginIP
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'machineId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.STRING, 'token', None, None, ), # 3
    (4, TType.STRING, 'loginIP', None, None, ), # 4
  )

  def __init__(self, machineId=None, subUserId=None, token=None, loginIP=None,):
    self.machineId = machineId
    self.subUserId = subUserId
    self.token = token
    self.loginIP = loginIP

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.machineId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.loginIP = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSession')
    if self.machineId is not None:
      oprot.writeFieldBegin('machineId', TType.I64, 1)
      oprot.writeI64(self.machineId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 3)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.loginIP is not None:
      oprot.writeFieldBegin('loginIP', TType.STRING, 4)
      oprot.writeString(self.loginIP)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSubAccount:
  """
  托管机子账户

  Attributes:
   - subAccountId
   - subAccountName
   - inAmount
   - outAmount
   - createTimestamp
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'subAccountName', None, None, ), # 2
    (3, TType.I64, 'inAmount', None, None, ), # 3
    (4, TType.I64, 'outAmount', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    (8, TType.I32, 'createTimestamp', None, None, ), # 8
    (9, TType.I32, 'lastmodifyTimestamp', None, None, ), # 9
  )

  def __init__(self, subAccountId=None, subAccountName=None, inAmount=None, outAmount=None, createTimestamp=None, lastmodifyTimestamp=None,):
    self.subAccountId = subAccountId
    self.subAccountName = subAccountName
    self.inAmount = inAmount
    self.outAmount = outAmount
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.subAccountName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.inAmount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.outAmount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSubAccount')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.subAccountName is not None:
      oprot.writeFieldBegin('subAccountName', TType.STRING, 2)
      oprot.writeString(self.subAccountName)
      oprot.writeFieldEnd()
    if self.inAmount is not None:
      oprot.writeFieldBegin('inAmount', TType.I64, 3)
      oprot.writeI64(self.inAmount)
      oprot.writeFieldEnd()
    if self.outAmount is not None:
      oprot.writeFieldBegin('outAmount', TType.I64, 4)
      oprot.writeI64(self.outAmount)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 8)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 9)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSubAccountRelatedItem:
  """
  托管机子账户关联条目

  Attributes:
   - subAccountId
   - subUserId
   - relatedTimestamp
   - subAccountName
   - subUserLoginName
   - subUserNickName
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.I32, 'relatedTimestamp', None, None, ), # 3
    (4, TType.STRING, 'subAccountName', None, None, ), # 4
    (5, TType.STRING, 'subUserLoginName', None, None, ), # 5
    (6, TType.STRING, 'subUserNickName', None, None, ), # 6
    (7, TType.I32, 'lastmodifyTimestamp', None, None, ), # 7
  )

  def __init__(self, subAccountId=None, subUserId=None, relatedTimestamp=None, subAccountName=None, subUserLoginName=None, subUserNickName=None, lastmodifyTimestamp=None,):
    self.subAccountId = subAccountId
    self.subUserId = subUserId
    self.relatedTimestamp = relatedTimestamp
    self.subAccountName = subAccountName
    self.subUserLoginName = subUserLoginName
    self.subUserNickName = subUserNickName
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.relatedTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.subAccountName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.subUserLoginName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.subUserNickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSubAccountRelatedItem')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.relatedTimestamp is not None:
      oprot.writeFieldBegin('relatedTimestamp', TType.I32, 3)
      oprot.writeI32(self.relatedTimestamp)
      oprot.writeFieldEnd()
    if self.subAccountName is not None:
      oprot.writeFieldBegin('subAccountName', TType.STRING, 4)
      oprot.writeString(self.subAccountName)
      oprot.writeFieldEnd()
    if self.subUserLoginName is not None:
      oprot.writeFieldBegin('subUserLoginName', TType.STRING, 5)
      oprot.writeString(self.subUserLoginName)
      oprot.writeFieldEnd()
    if self.subUserNickName is not None:
      oprot.writeFieldBegin('subUserNickName', TType.STRING, 6)
      oprot.writeString(self.subUserNickName)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 7)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingComposeLeg:
  """
  Attributes:
   - sledContractId
   - variableName
   - quantity
   - legTradeDirection
   - sledContractCode
   - sledCommodityId
   - sledCommodityType
   - sledCommodityCode
   - sledExchangeMic
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.STRING, 'variableName', None, None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
    None, # 4
    (5, TType.I32, 'legTradeDirection', None, None, ), # 5
    (6, TType.STRING, 'sledContractCode', None, None, ), # 6
    (7, TType.I64, 'sledCommodityId', None, None, ), # 7
    (8, TType.I16, 'sledCommodityType', None, None, ), # 8
    (9, TType.STRING, 'sledCommodityCode', None, None, ), # 9
    (10, TType.STRING, 'sledExchangeMic', None, None, ), # 10
  )

  def __init__(self, sledContractId=None, variableName=None, quantity=None, legTradeDirection=None, sledContractCode=None, sledCommodityId=None, sledCommodityType=None, sledCommodityCode=None, sledExchangeMic=None,):
    self.sledContractId = sledContractId
    self.variableName = variableName
    self.quantity = quantity
    self.legTradeDirection = legTradeDirection
    self.sledContractCode = sledContractCode
    self.sledCommodityId = sledCommodityId
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.sledExchangeMic = sledExchangeMic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.variableName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.legTradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.sledExchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingComposeLeg')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.variableName is not None:
      oprot.writeFieldBegin('variableName', TType.STRING, 2)
      oprot.writeString(self.variableName)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.legTradeDirection is not None:
      oprot.writeFieldBegin('legTradeDirection', TType.I32, 5)
      oprot.writeI32(self.legTradeDirection)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 6)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 7)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 8)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 9)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.sledExchangeMic is not None:
      oprot.writeFieldBegin('sledExchangeMic', TType.STRING, 10)
      oprot.writeString(self.sledExchangeMic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingComposeGraph:
  """
  Attributes:
   - createSubUserId
   - composeGraphId
   - formular
   - legs
   - composeGraphKey
   - composeGraphEnv
   - createTimestamp
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'createSubUserId', None, None, ), # 1
    (2, TType.I64, 'composeGraphId', None, None, ), # 2
    (3, TType.STRING, 'formular', None, None, ), # 3
    (4, TType.MAP, 'legs', (TType.STRING,None,TType.STRUCT,(HostingComposeLeg, HostingComposeLeg.thrift_spec)), None, ), # 4
    (5, TType.STRING, 'composeGraphKey', None, None, ), # 5
    (6, TType.I32, 'composeGraphEnv', None, None, ), # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    (11, TType.I32, 'createTimestamp', None, None, ), # 11
    (12, TType.I32, 'lastmodifyTimestamp', None, None, ), # 12
  )

  def __init__(self, createSubUserId=None, composeGraphId=None, formular=None, legs=None, composeGraphKey=None, composeGraphEnv=None, createTimestamp=None, lastmodifyTimestamp=None,):
    self.createSubUserId = createSubUserId
    self.composeGraphId = composeGraphId
    self.formular = formular
    self.legs = legs
    self.composeGraphKey = composeGraphKey
    self.composeGraphEnv = composeGraphEnv
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.createSubUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.formular = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.legs = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readString();
            _val13 = HostingComposeLeg()
            _val13.read(iprot)
            self.legs[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.composeGraphKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.composeGraphEnv = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingComposeGraph')
    if self.createSubUserId is not None:
      oprot.writeFieldBegin('createSubUserId', TType.I32, 1)
      oprot.writeI32(self.createSubUserId)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 2)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.formular is not None:
      oprot.writeFieldBegin('formular', TType.STRING, 3)
      oprot.writeString(self.formular)
      oprot.writeFieldEnd()
    if self.legs is not None:
      oprot.writeFieldBegin('legs', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.legs))
      for kiter14,viter15 in self.legs.items():
        oprot.writeString(kiter14)
        viter15.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.composeGraphKey is not None:
      oprot.writeFieldBegin('composeGraphKey', TType.STRING, 5)
      oprot.writeString(self.composeGraphKey)
      oprot.writeFieldEnd()
    if self.composeGraphEnv is not None:
      oprot.writeFieldBegin('composeGraphEnv', TType.I32, 6)
      oprot.writeI32(self.composeGraphEnv)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 11)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 12)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingComposeView:
  """
  Attributes:
   - subUserId
   - composeGraphId
   - aliasName
   - viewSource
   - subscribeStatus
   - viewStatus
   - precisionNumber
   - createTimestamp
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'subUserId', None, None, ), # 1
    (2, TType.I64, 'composeGraphId', None, None, ), # 2
    (3, TType.STRING, 'aliasName', None, None, ), # 3
    (4, TType.I32, 'viewSource', None, None, ), # 4
    (5, TType.I32, 'subscribeStatus', None, None, ), # 5
    (6, TType.I32, 'viewStatus', None, None, ), # 6
    (7, TType.I16, 'precisionNumber', None, None, ), # 7
    (8, TType.I32, 'createTimestamp', None, None, ), # 8
    (9, TType.I32, 'lastmodifyTimestamp', None, None, ), # 9
  )

  def __init__(self, subUserId=None, composeGraphId=None, aliasName=None, viewSource=None, subscribeStatus=None, viewStatus=None, precisionNumber=None, createTimestamp=None, lastmodifyTimestamp=None,):
    self.subUserId = subUserId
    self.composeGraphId = composeGraphId
    self.aliasName = aliasName
    self.viewSource = viewSource
    self.subscribeStatus = subscribeStatus
    self.viewStatus = viewStatus
    self.precisionNumber = precisionNumber
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.aliasName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.viewSource = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.subscribeStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.viewStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.precisionNumber = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingComposeView')
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 1)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 2)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.aliasName is not None:
      oprot.writeFieldBegin('aliasName', TType.STRING, 3)
      oprot.writeString(self.aliasName)
      oprot.writeFieldEnd()
    if self.viewSource is not None:
      oprot.writeFieldBegin('viewSource', TType.I32, 4)
      oprot.writeI32(self.viewSource)
      oprot.writeFieldEnd()
    if self.subscribeStatus is not None:
      oprot.writeFieldBegin('subscribeStatus', TType.I32, 5)
      oprot.writeI32(self.subscribeStatus)
      oprot.writeFieldEnd()
    if self.viewStatus is not None:
      oprot.writeFieldBegin('viewStatus', TType.I32, 6)
      oprot.writeI32(self.viewStatus)
      oprot.writeFieldEnd()
    if self.precisionNumber is not None:
      oprot.writeFieldBegin('precisionNumber', TType.I16, 7)
      oprot.writeI16(self.precisionNumber)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 8)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 9)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTradeAccount:
  """
  Attributes:
   - tradeAccountId
   - tradeBrokerAccessId
   - loginUserName
   - loginPassword
   - accountProperties
   - tradeBrokerId
   - brokerTechPlatform
   - tradeAccountRemark
   - accountState
   - invalidReason
   - invalidErrorCode
   - apiRetCode
   - accountAccessState
   - hadBeenActived
   - createTimestamp
   - lastmodifyTimestamp
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I32, 'tradeBrokerAccessId', None, None, ), # 3
    (4, TType.STRING, 'loginUserName', None, None, ), # 4
    (5, TType.STRING, 'loginPassword', None, None, ), # 5
    (6, TType.MAP, 'accountProperties', (TType.STRING,None,TType.STRING,None), None, ), # 6
    (7, TType.I32, 'tradeBrokerId', None, None, ), # 7
    (8, TType.I32, 'brokerTechPlatform', None, None, ), # 8
    (9, TType.STRING, 'tradeAccountRemark', None, None, ), # 9
    None, # 10
    (11, TType.I32, 'accountState', None, None, ), # 11
    (12, TType.STRING, 'invalidReason', None, None, ), # 12
    (13, TType.I32, 'invalidErrorCode', None, None, ), # 13
    (14, TType.I32, 'apiRetCode', None, None, ), # 14
    (15, TType.I32, 'accountAccessState', None, None, ), # 15
    (16, TType.BOOL, 'hadBeenActived', None, None, ), # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I32, 'createTimestamp', None, None, ), # 21
    (22, TType.I32, 'lastmodifyTimestamp', None, None, ), # 22
  )

  def __init__(self, tradeAccountId=None, tradeBrokerAccessId=None, loginUserName=None, loginPassword=None, accountProperties=None, tradeBrokerId=None, brokerTechPlatform=None, tradeAccountRemark=None, accountState=None, invalidReason=None, invalidErrorCode=None, apiRetCode=None, accountAccessState=None, hadBeenActived=None, createTimestamp=None, lastmodifyTimestamp=None,):
    self.tradeAccountId = tradeAccountId
    self.tradeBrokerAccessId = tradeBrokerAccessId
    self.loginUserName = loginUserName
    self.loginPassword = loginPassword
    self.accountProperties = accountProperties
    self.tradeBrokerId = tradeBrokerId
    self.brokerTechPlatform = brokerTechPlatform
    self.tradeAccountRemark = tradeAccountRemark
    self.accountState = accountState
    self.invalidReason = invalidReason
    self.invalidErrorCode = invalidErrorCode
    self.apiRetCode = apiRetCode
    self.accountAccessState = accountAccessState
    self.hadBeenActived = hadBeenActived
    self.createTimestamp = createTimestamp
    self.lastmodifyTimestamp = lastmodifyTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.tradeBrokerAccessId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.loginUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.loginPassword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.accountProperties = {}
          (_ktype17, _vtype18, _size16 ) = iprot.readMapBegin()
          for _i20 in xrange(_size16):
            _key21 = iprot.readString();
            _val22 = iprot.readString();
            self.accountProperties[_key21] = _val22
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.tradeBrokerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.brokerTechPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.tradeAccountRemark = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.accountState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.invalidReason = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.invalidErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.apiRetCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.accountAccessState = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.hadBeenActived = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.createTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.lastmodifyTimestamp = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTradeAccount')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.tradeBrokerAccessId is not None:
      oprot.writeFieldBegin('tradeBrokerAccessId', TType.I32, 3)
      oprot.writeI32(self.tradeBrokerAccessId)
      oprot.writeFieldEnd()
    if self.loginUserName is not None:
      oprot.writeFieldBegin('loginUserName', TType.STRING, 4)
      oprot.writeString(self.loginUserName)
      oprot.writeFieldEnd()
    if self.loginPassword is not None:
      oprot.writeFieldBegin('loginPassword', TType.STRING, 5)
      oprot.writeString(self.loginPassword)
      oprot.writeFieldEnd()
    if self.accountProperties is not None:
      oprot.writeFieldBegin('accountProperties', TType.MAP, 6)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.accountProperties))
      for kiter23,viter24 in self.accountProperties.items():
        oprot.writeString(kiter23)
        oprot.writeString(viter24)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.tradeBrokerId is not None:
      oprot.writeFieldBegin('tradeBrokerId', TType.I32, 7)
      oprot.writeI32(self.tradeBrokerId)
      oprot.writeFieldEnd()
    if self.brokerTechPlatform is not None:
      oprot.writeFieldBegin('brokerTechPlatform', TType.I32, 8)
      oprot.writeI32(self.brokerTechPlatform)
      oprot.writeFieldEnd()
    if self.tradeAccountRemark is not None:
      oprot.writeFieldBegin('tradeAccountRemark', TType.STRING, 9)
      oprot.writeString(self.tradeAccountRemark)
      oprot.writeFieldEnd()
    if self.accountState is not None:
      oprot.writeFieldBegin('accountState', TType.I32, 11)
      oprot.writeI32(self.accountState)
      oprot.writeFieldEnd()
    if self.invalidReason is not None:
      oprot.writeFieldBegin('invalidReason', TType.STRING, 12)
      oprot.writeString(self.invalidReason)
      oprot.writeFieldEnd()
    if self.invalidErrorCode is not None:
      oprot.writeFieldBegin('invalidErrorCode', TType.I32, 13)
      oprot.writeI32(self.invalidErrorCode)
      oprot.writeFieldEnd()
    if self.apiRetCode is not None:
      oprot.writeFieldBegin('apiRetCode', TType.I32, 14)
      oprot.writeI32(self.apiRetCode)
      oprot.writeFieldEnd()
    if self.accountAccessState is not None:
      oprot.writeFieldBegin('accountAccessState', TType.I32, 15)
      oprot.writeI32(self.accountAccessState)
      oprot.writeFieldEnd()
    if self.hadBeenActived is not None:
      oprot.writeFieldBegin('hadBeenActived', TType.BOOL, 16)
      oprot.writeBool(self.hadBeenActived)
      oprot.writeFieldEnd()
    if self.createTimestamp is not None:
      oprot.writeFieldBegin('createTimestamp', TType.I32, 21)
      oprot.writeI32(self.createTimestamp)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestamp is not None:
      oprot.writeFieldBegin('lastmodifyTimestamp', TType.I32, 22)
      oprot.writeI32(self.lastmodifyTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingOrderRouteRelatedInfo:
  """
  账号路由信息, 主要是子用户关联账户

  Attributes:
   - forbidden
   - mainTradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'forbidden', None, None, ), # 1
    (2, TType.I64, 'mainTradeAccountId', None, None, ), # 2
  )

  def __init__(self, forbidden=None, mainTradeAccountId=None,):
    self.forbidden = forbidden
    self.mainTradeAccountId = mainTradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.forbidden = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.mainTradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingOrderRouteRelatedInfo')
    if self.forbidden is not None:
      oprot.writeFieldBegin('forbidden', TType.BOOL, 1)
      oprot.writeBool(self.forbidden)
      oprot.writeFieldEnd()
    if self.mainTradeAccountId is not None:
      oprot.writeFieldBegin('mainTradeAccountId', TType.I64, 2)
      oprot.writeI64(self.mainTradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingOrderRouteCommodityCodeNode:
  """
  Attributes:
   - sledCommodityCode
   - relatedInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sledCommodityCode', None, None, ), # 1
    (2, TType.STRUCT, 'relatedInfo', (HostingOrderRouteRelatedInfo, HostingOrderRouteRelatedInfo.thrift_spec), None, ), # 2
  )

  def __init__(self, sledCommodityCode=None, relatedInfo=None,):
    self.sledCommodityCode = sledCommodityCode
    self.relatedInfo = relatedInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.relatedInfo = HostingOrderRouteRelatedInfo()
          self.relatedInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingOrderRouteCommodityCodeNode')
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 1)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.relatedInfo is not None:
      oprot.writeFieldBegin('relatedInfo', TType.STRUCT, 2)
      self.relatedInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingOrderRouteCommodityTypeNode:
  """
  Attributes:
   - sledCommodityType
   - subCommodityCodeNodes
   - relatedInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'sledCommodityType', None, None, ), # 1
    (2, TType.MAP, 'subCommodityCodeNodes', (TType.STRING,None,TType.STRUCT,(HostingOrderRouteCommodityCodeNode, HostingOrderRouteCommodityCodeNode.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'relatedInfo', (HostingOrderRouteRelatedInfo, HostingOrderRouteRelatedInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, sledCommodityType=None, subCommodityCodeNodes=None, relatedInfo=None,):
    self.sledCommodityType = sledCommodityType
    self.subCommodityCodeNodes = subCommodityCodeNodes
    self.relatedInfo = relatedInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.subCommodityCodeNodes = {}
          (_ktype26, _vtype27, _size25 ) = iprot.readMapBegin()
          for _i29 in xrange(_size25):
            _key30 = iprot.readString();
            _val31 = HostingOrderRouteCommodityCodeNode()
            _val31.read(iprot)
            self.subCommodityCodeNodes[_key30] = _val31
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.relatedInfo = HostingOrderRouteRelatedInfo()
          self.relatedInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingOrderRouteCommodityTypeNode')
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 1)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.subCommodityCodeNodes is not None:
      oprot.writeFieldBegin('subCommodityCodeNodes', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.subCommodityCodeNodes))
      for kiter32,viter33 in self.subCommodityCodeNodes.items():
        oprot.writeString(kiter32)
        viter33.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.relatedInfo is not None:
      oprot.writeFieldBegin('relatedInfo', TType.STRUCT, 3)
      self.relatedInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingOrderRouteExchangeNode:
  """
  Attributes:
   - sledExchangeCode
   - subCommodityTypeNodes
   - relatedInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sledExchangeCode', None, None, ), # 1
    (2, TType.MAP, 'subCommodityTypeNodes', (TType.I16,None,TType.STRUCT,(HostingOrderRouteCommodityTypeNode, HostingOrderRouteCommodityTypeNode.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'relatedInfo', (HostingOrderRouteRelatedInfo, HostingOrderRouteRelatedInfo.thrift_spec), None, ), # 3
  )

  def __init__(self, sledExchangeCode=None, subCommodityTypeNodes=None, relatedInfo=None,):
    self.sledExchangeCode = sledExchangeCode
    self.subCommodityTypeNodes = subCommodityTypeNodes
    self.relatedInfo = relatedInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sledExchangeCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.subCommodityTypeNodes = {}
          (_ktype35, _vtype36, _size34 ) = iprot.readMapBegin()
          for _i38 in xrange(_size34):
            _key39 = iprot.readI16();
            _val40 = HostingOrderRouteCommodityTypeNode()
            _val40.read(iprot)
            self.subCommodityTypeNodes[_key39] = _val40
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.relatedInfo = HostingOrderRouteRelatedInfo()
          self.relatedInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingOrderRouteExchangeNode')
    if self.sledExchangeCode is not None:
      oprot.writeFieldBegin('sledExchangeCode', TType.STRING, 1)
      oprot.writeString(self.sledExchangeCode)
      oprot.writeFieldEnd()
    if self.subCommodityTypeNodes is not None:
      oprot.writeFieldBegin('subCommodityTypeNodes', TType.MAP, 2)
      oprot.writeMapBegin(TType.I16, TType.STRUCT, len(self.subCommodityTypeNodes))
      for kiter41,viter42 in self.subCommodityTypeNodes.items():
        oprot.writeI16(kiter41)
        viter42.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.relatedInfo is not None:
      oprot.writeFieldBegin('relatedInfo', TType.STRUCT, 3)
      self.relatedInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingOrderRouteTree:
  """
  Attributes:
   - configVersion
   - subExchangeNodes
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'configVersion', None, None, ), # 1
    (2, TType.MAP, 'subExchangeNodes', (TType.STRING,None,TType.STRUCT,(HostingOrderRouteExchangeNode, HostingOrderRouteExchangeNode.thrift_spec)), None, ), # 2
  )

  def __init__(self, configVersion=None, subExchangeNodes=None,):
    self.configVersion = configVersion
    self.subExchangeNodes = subExchangeNodes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.configVersion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.subExchangeNodes = {}
          (_ktype44, _vtype45, _size43 ) = iprot.readMapBegin()
          for _i47 in xrange(_size43):
            _key48 = iprot.readString();
            _val49 = HostingOrderRouteExchangeNode()
            _val49.read(iprot)
            self.subExchangeNodes[_key48] = _val49
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingOrderRouteTree')
    if self.configVersion is not None:
      oprot.writeFieldBegin('configVersion', TType.I32, 1)
      oprot.writeI32(self.configVersion)
      oprot.writeFieldEnd()
    if self.subExchangeNodes is not None:
      oprot.writeFieldBegin('subExchangeNodes', TType.MAP, 2)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.subExchangeNodes))
      for kiter50,viter51 in self.subExchangeNodes.items():
        oprot.writeString(kiter50)
        viter51.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderDetail:
  """
  Attributes:
   - orderType
   - limitPrice
   - quantity
   - tradeDirection
   - orderCreatorType
   - orderMode
   - effectiveDateTime
   - condition
   - conditionPrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orderType', None, None, ), # 1
    (2, TType.DOUBLE, 'limitPrice', None, None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
    (4, TType.I32, 'tradeDirection', None, None, ), # 4
    (5, TType.I32, 'orderCreatorType', None, None, ), # 5
    (6, TType.I32, 'orderMode', None, None, ), # 6
    (7, TType.STRING, 'effectiveDateTime', None, None, ), # 7
    (8, TType.I32, 'condition', None, None, ), # 8
    (9, TType.DOUBLE, 'conditionPrice', None, None, ), # 9
  )

  def __init__(self, orderType=None, limitPrice=None, quantity=None, tradeDirection=None, orderCreatorType=None, orderMode=None, effectiveDateTime=None, condition=None, conditionPrice=None,):
    self.orderType = orderType
    self.limitPrice = limitPrice
    self.quantity = quantity
    self.tradeDirection = tradeDirection
    self.orderCreatorType = orderCreatorType
    self.orderMode = orderMode
    self.effectiveDateTime = effectiveDateTime
    self.condition = condition
    self.conditionPrice = conditionPrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.limitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.tradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.orderCreatorType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.orderMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.effectiveDateTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.condition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.conditionPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderDetail')
    if self.orderType is not None:
      oprot.writeFieldBegin('orderType', TType.I32, 1)
      oprot.writeI32(self.orderType)
      oprot.writeFieldEnd()
    if self.limitPrice is not None:
      oprot.writeFieldBegin('limitPrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.limitPrice)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.tradeDirection is not None:
      oprot.writeFieldBegin('tradeDirection', TType.I32, 4)
      oprot.writeI32(self.tradeDirection)
      oprot.writeFieldEnd()
    if self.orderCreatorType is not None:
      oprot.writeFieldBegin('orderCreatorType', TType.I32, 5)
      oprot.writeI32(self.orderCreatorType)
      oprot.writeFieldEnd()
    if self.orderMode is not None:
      oprot.writeFieldBegin('orderMode', TType.I32, 6)
      oprot.writeI32(self.orderMode)
      oprot.writeFieldEnd()
    if self.effectiveDateTime is not None:
      oprot.writeFieldBegin('effectiveDateTime', TType.STRING, 7)
      oprot.writeString(self.effectiveDateTime)
      oprot.writeFieldEnd()
    if self.condition is not None:
      oprot.writeFieldBegin('condition', TType.I32, 8)
      oprot.writeI32(self.condition)
      oprot.writeFieldEnd()
    if self.conditionPrice is not None:
      oprot.writeFieldBegin('conditionPrice', TType.DOUBLE, 9)
      oprot.writeDouble(self.conditionPrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderLegContractSummary:
  """
  Attributes:
   - legSledContractId
   - legSledContractCode
   - legSledCommodityId
   - legSledCommodityType
   - legSledCommodityCode
   - legSledExchangeMic
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'legSledContractId', None, None, ), # 1
    (2, TType.STRING, 'legSledContractCode', None, None, ), # 2
    (3, TType.I64, 'legSledCommodityId', None, None, ), # 3
    (4, TType.I16, 'legSledCommodityType', None, None, ), # 4
    (5, TType.STRING, 'legSledCommodityCode', None, None, ), # 5
    (6, TType.STRING, 'legSledExchangeMic', None, None, ), # 6
  )

  def __init__(self, legSledContractId=None, legSledContractCode=None, legSledCommodityId=None, legSledCommodityType=None, legSledCommodityCode=None, legSledExchangeMic=None,):
    self.legSledContractId = legSledContractId
    self.legSledContractCode = legSledContractCode
    self.legSledCommodityId = legSledCommodityId
    self.legSledCommodityType = legSledCommodityType
    self.legSledCommodityCode = legSledCommodityCode
    self.legSledExchangeMic = legSledExchangeMic

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.legSledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.legSledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.legSledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.legSledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.legSledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.legSledExchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderLegContractSummary')
    if self.legSledContractId is not None:
      oprot.writeFieldBegin('legSledContractId', TType.I64, 1)
      oprot.writeI64(self.legSledContractId)
      oprot.writeFieldEnd()
    if self.legSledContractCode is not None:
      oprot.writeFieldBegin('legSledContractCode', TType.STRING, 2)
      oprot.writeString(self.legSledContractCode)
      oprot.writeFieldEnd()
    if self.legSledCommodityId is not None:
      oprot.writeFieldBegin('legSledCommodityId', TType.I64, 3)
      oprot.writeI64(self.legSledCommodityId)
      oprot.writeFieldEnd()
    if self.legSledCommodityType is not None:
      oprot.writeFieldBegin('legSledCommodityType', TType.I16, 4)
      oprot.writeI16(self.legSledCommodityType)
      oprot.writeFieldEnd()
    if self.legSledCommodityCode is not None:
      oprot.writeFieldBegin('legSledCommodityCode', TType.STRING, 5)
      oprot.writeString(self.legSledCommodityCode)
      oprot.writeFieldEnd()
    if self.legSledExchangeMic is not None:
      oprot.writeFieldBegin('legSledExchangeMic', TType.STRING, 6)
      oprot.writeString(self.legSledExchangeMic)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderContractSummary:
  """
  Attributes:
   - sledContractId
   - sledContractCode
   - sledCommodityId
   - sledCommodityType
   - sledCommodityCode
   - sledExchangeMic
   - relatedLegs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.STRING, 'sledContractCode', None, None, ), # 2
    (3, TType.I64, 'sledCommodityId', None, None, ), # 3
    (4, TType.I16, 'sledCommodityType', None, None, ), # 4
    (5, TType.STRING, 'sledCommodityCode', None, None, ), # 5
    (6, TType.STRING, 'sledExchangeMic', None, None, ), # 6
    (7, TType.LIST, 'relatedLegs', (TType.STRUCT,(HostingExecOrderLegContractSummary, HostingExecOrderLegContractSummary.thrift_spec)), None, ), # 7
  )

  def __init__(self, sledContractId=None, sledContractCode=None, sledCommodityId=None, sledCommodityType=None, sledCommodityCode=None, sledExchangeMic=None, relatedLegs=None,):
    self.sledContractId = sledContractId
    self.sledContractCode = sledContractCode
    self.sledCommodityId = sledCommodityId
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.sledExchangeMic = sledExchangeMic
    self.relatedLegs = relatedLegs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sledExchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.relatedLegs = []
          (_etype55, _size52) = iprot.readListBegin()
          for _i56 in xrange(_size52):
            _elem57 = HostingExecOrderLegContractSummary()
            _elem57.read(iprot)
            self.relatedLegs.append(_elem57)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderContractSummary')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 2)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 3)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 4)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 5)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.sledExchangeMic is not None:
      oprot.writeFieldBegin('sledExchangeMic', TType.STRING, 6)
      oprot.writeString(self.sledExchangeMic)
      oprot.writeFieldEnd()
    if self.relatedLegs is not None:
      oprot.writeFieldBegin('relatedLegs', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.relatedLegs))
      for iter58 in self.relatedLegs:
        iter58.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderTradeAccountSummary:
  """
  Attributes:
   - tradeAccountId
   - brokerId
   - techPlatform
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.I32, 'brokerId', None, None, ), # 2
    (3, TType.I32, 'techPlatform', None, None, ), # 3
  )

  def __init__(self, tradeAccountId=None, brokerId=None, techPlatform=None,):
    self.tradeAccountId = tradeAccountId
    self.brokerId = brokerId
    self.techPlatform = techPlatform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.brokerId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.techPlatform = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderTradeAccountSummary')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.brokerId is not None:
      oprot.writeFieldBegin('brokerId', TType.I32, 2)
      oprot.writeI32(self.brokerId)
      oprot.writeFieldEnd()
    if self.techPlatform is not None:
      oprot.writeFieldBegin('techPlatform', TType.I32, 3)
      oprot.writeI32(self.techPlatform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderState:
  """
  Attributes:
   - value
   - timestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'value', None, None, ), # 1
    (2, TType.I64, 'timestampMs', None, None, ), # 2
  )

  def __init__(self, value=None, timestampMs=None,):
    self.value = value
    self.timestampMs = timestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.value = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.timestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderState')
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.I32, 1)
      oprot.writeI32(self.value)
      oprot.writeFieldEnd()
    if self.timestampMs is not None:
      oprot.writeFieldBegin('timestampMs', TType.I64, 2)
      oprot.writeI64(self.timestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderStateInfo:
  """
  Attributes:
   - currentState
   - historyStates
   - statusMsg
   - failedErrorCode
   - upsideErrorCode
   - upsideUsefulMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'currentState', (HostingExecOrderState, HostingExecOrderState.thrift_spec), None, ), # 1
    (2, TType.LIST, 'historyStates', (TType.STRUCT,(HostingExecOrderState, HostingExecOrderState.thrift_spec)), None, ), # 2
    (3, TType.STRING, 'statusMsg', None, None, ), # 3
    (4, TType.I32, 'failedErrorCode', None, None, ), # 4
    (5, TType.I32, 'upsideErrorCode', None, None, ), # 5
    (6, TType.STRING, 'upsideUsefulMsg', None, None, ), # 6
  )

  def __init__(self, currentState=None, historyStates=None, statusMsg=None, failedErrorCode=None, upsideErrorCode=None, upsideUsefulMsg=None,):
    self.currentState = currentState
    self.historyStates = historyStates
    self.statusMsg = statusMsg
    self.failedErrorCode = failedErrorCode
    self.upsideErrorCode = upsideErrorCode
    self.upsideUsefulMsg = upsideUsefulMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.currentState = HostingExecOrderState()
          self.currentState.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.historyStates = []
          (_etype62, _size59) = iprot.readListBegin()
          for _i63 in xrange(_size59):
            _elem64 = HostingExecOrderState()
            _elem64.read(iprot)
            self.historyStates.append(_elem64)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.statusMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.failedErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.upsideErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.upsideUsefulMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderStateInfo')
    if self.currentState is not None:
      oprot.writeFieldBegin('currentState', TType.STRUCT, 1)
      self.currentState.write(oprot)
      oprot.writeFieldEnd()
    if self.historyStates is not None:
      oprot.writeFieldBegin('historyStates', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.historyStates))
      for iter65 in self.historyStates:
        iter65.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.statusMsg is not None:
      oprot.writeFieldBegin('statusMsg', TType.STRING, 3)
      oprot.writeString(self.statusMsg)
      oprot.writeFieldEnd()
    if self.failedErrorCode is not None:
      oprot.writeFieldBegin('failedErrorCode', TType.I32, 4)
      oprot.writeI32(self.failedErrorCode)
      oprot.writeFieldEnd()
    if self.upsideErrorCode is not None:
      oprot.writeFieldBegin('upsideErrorCode', TType.I32, 5)
      oprot.writeI32(self.upsideErrorCode)
      oprot.writeFieldEnd()
    if self.upsideUsefulMsg is not None:
      oprot.writeFieldBegin('upsideUsefulMsg', TType.STRING, 6)
      oprot.writeString(self.upsideUsefulMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderRevokeInfo:
  """
  Attributes:
   - lastRevokeTimestampMs
   - lastRevokeFailedErrorCode
   - lastRevokeUpsideErrorCode
   - lastRevokeUpsideRejectReason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'lastRevokeTimestampMs', None, None, ), # 1
    (2, TType.I32, 'lastRevokeFailedErrorCode', None, None, ), # 2
    (3, TType.I32, 'lastRevokeUpsideErrorCode', None, None, ), # 3
    (4, TType.STRING, 'lastRevokeUpsideRejectReason', None, None, ), # 4
  )

  def __init__(self, lastRevokeTimestampMs=None, lastRevokeFailedErrorCode=None, lastRevokeUpsideErrorCode=None, lastRevokeUpsideRejectReason=None,):
    self.lastRevokeTimestampMs = lastRevokeTimestampMs
    self.lastRevokeFailedErrorCode = lastRevokeFailedErrorCode
    self.lastRevokeUpsideErrorCode = lastRevokeUpsideErrorCode
    self.lastRevokeUpsideRejectReason = lastRevokeUpsideRejectReason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.lastRevokeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.lastRevokeFailedErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.lastRevokeUpsideErrorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.lastRevokeUpsideRejectReason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderRevokeInfo')
    if self.lastRevokeTimestampMs is not None:
      oprot.writeFieldBegin('lastRevokeTimestampMs', TType.I64, 1)
      oprot.writeI64(self.lastRevokeTimestampMs)
      oprot.writeFieldEnd()
    if self.lastRevokeFailedErrorCode is not None:
      oprot.writeFieldBegin('lastRevokeFailedErrorCode', TType.I32, 2)
      oprot.writeI32(self.lastRevokeFailedErrorCode)
      oprot.writeFieldEnd()
    if self.lastRevokeUpsideErrorCode is not None:
      oprot.writeFieldBegin('lastRevokeUpsideErrorCode', TType.I32, 3)
      oprot.writeI32(self.lastRevokeUpsideErrorCode)
      oprot.writeFieldEnd()
    if self.lastRevokeUpsideRejectReason is not None:
      oprot.writeFieldBegin('lastRevokeUpsideRejectReason', TType.STRING, 4)
      oprot.writeString(self.lastRevokeUpsideRejectReason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CTPOrderRef:
  """
  Attributes:
   - frontID
   - sessionID
   - orderRef
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'frontID', None, None, ), # 1
    (2, TType.I32, 'sessionID', None, None, ), # 2
    (3, TType.STRING, 'orderRef', None, None, ), # 3
  )

  def __init__(self, frontID=None, sessionID=None, orderRef=None,):
    self.frontID = frontID
    self.sessionID = sessionID
    self.orderRef = orderRef

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.frontID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sessionID = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.orderRef = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CTPOrderRef')
    if self.frontID is not None:
      oprot.writeFieldBegin('frontID', TType.I32, 1)
      oprot.writeI32(self.frontID)
      oprot.writeFieldEnd()
    if self.sessionID is not None:
      oprot.writeFieldBegin('sessionID', TType.I32, 2)
      oprot.writeI32(self.sessionID)
      oprot.writeFieldEnd()
    if self.orderRef is not None:
      oprot.writeFieldBegin('orderRef', TType.STRING, 3)
      oprot.writeString(self.orderRef)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny3OrderRef:
  """
  Attributes:
   - saveString
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'saveString', None, None, ), # 1
  )

  def __init__(self, saveString=None,):
    self.saveString = saveString

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.saveString = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny3OrderRef')
    if self.saveString is not None:
      oprot.writeFieldBegin('saveString', TType.STRING, 1)
      oprot.writeString(self.saveString)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny9OrderRef:
  """
  Attributes:
   - refString
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'refString', None, None, ), # 1
  )

  def __init__(self, refString=None,):
    self.refString = refString

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.refString = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny9OrderRef')
    if self.refString is not None:
      oprot.writeFieldBegin('refString', TType.STRING, 1)
      oprot.writeString(self.refString)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderRef:
  """
  Attributes:
   - ctpRef
   - esunny3Ref
   - esunny9Ref
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ctpRef', (CTPOrderRef, CTPOrderRef.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'esunny3Ref', (ESunny3OrderRef, ESunny3OrderRef.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'esunny9Ref', (ESunny9OrderRef, ESunny9OrderRef.thrift_spec), None, ), # 3
  )

  def __init__(self, ctpRef=None, esunny3Ref=None, esunny9Ref=None,):
    self.ctpRef = ctpRef
    self.esunny3Ref = esunny3Ref
    self.esunny9Ref = esunny9Ref

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ctpRef = CTPOrderRef()
          self.ctpRef.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.esunny3Ref = ESunny3OrderRef()
          self.esunny3Ref.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.esunny9Ref = ESunny9OrderRef()
          self.esunny9Ref.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderRef')
    if self.ctpRef is not None:
      oprot.writeFieldBegin('ctpRef', TType.STRUCT, 1)
      self.ctpRef.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny3Ref is not None:
      oprot.writeFieldBegin('esunny3Ref', TType.STRUCT, 2)
      self.esunny3Ref.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny9Ref is not None:
      oprot.writeFieldBegin('esunny9Ref', TType.STRUCT, 3)
      self.esunny9Ref.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CTPContractSummary:
  """
  Attributes:
   - ctpExchangeCode
   - ctpCommodityCode
   - ctpCommodityType
   - ctpContractCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ctpExchangeCode', None, None, ), # 1
    (2, TType.STRING, 'ctpCommodityCode', None, None, ), # 2
    (3, TType.I16, 'ctpCommodityType', None, None, ), # 3
    (4, TType.STRING, 'ctpContractCode', None, None, ), # 4
  )

  def __init__(self, ctpExchangeCode=None, ctpCommodityCode=None, ctpCommodityType=None, ctpContractCode=None,):
    self.ctpExchangeCode = ctpExchangeCode
    self.ctpCommodityCode = ctpCommodityCode
    self.ctpCommodityType = ctpCommodityType
    self.ctpContractCode = ctpContractCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ctpExchangeCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ctpCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.ctpCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ctpContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CTPContractSummary')
    if self.ctpExchangeCode is not None:
      oprot.writeFieldBegin('ctpExchangeCode', TType.STRING, 1)
      oprot.writeString(self.ctpExchangeCode)
      oprot.writeFieldEnd()
    if self.ctpCommodityCode is not None:
      oprot.writeFieldBegin('ctpCommodityCode', TType.STRING, 2)
      oprot.writeString(self.ctpCommodityCode)
      oprot.writeFieldEnd()
    if self.ctpCommodityType is not None:
      oprot.writeFieldBegin('ctpCommodityType', TType.I16, 3)
      oprot.writeI16(self.ctpCommodityType)
      oprot.writeFieldEnd()
    if self.ctpContractCode is not None:
      oprot.writeFieldBegin('ctpContractCode', TType.STRING, 4)
      oprot.writeString(self.ctpContractCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CTPOrderInputExt:
  """
  Attributes:
   - contractSummary
   - combOffsetFlag
   - minVolume
   - combHedgeFlag
   - tradeDirection
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'contractSummary', (CTPContractSummary, CTPContractSummary.thrift_spec), None, ), # 1
    (2, TType.I32, 'combOffsetFlag', None, None, ), # 2
    (3, TType.I32, 'minVolume', None, None, ), # 3
    (4, TType.I32, 'combHedgeFlag', None, None, ), # 4
    (5, TType.I32, 'tradeDirection', None, None, ), # 5
  )

  def __init__(self, contractSummary=None, combOffsetFlag=None, minVolume=None, combHedgeFlag=None, tradeDirection=None,):
    self.contractSummary = contractSummary
    self.combOffsetFlag = combOffsetFlag
    self.minVolume = minVolume
    self.combHedgeFlag = combHedgeFlag
    self.tradeDirection = tradeDirection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.contractSummary = CTPContractSummary()
          self.contractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.combOffsetFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.minVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.combHedgeFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.tradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CTPOrderInputExt')
    if self.contractSummary is not None:
      oprot.writeFieldBegin('contractSummary', TType.STRUCT, 1)
      self.contractSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.combOffsetFlag is not None:
      oprot.writeFieldBegin('combOffsetFlag', TType.I32, 2)
      oprot.writeI32(self.combOffsetFlag)
      oprot.writeFieldEnd()
    if self.minVolume is not None:
      oprot.writeFieldBegin('minVolume', TType.I32, 3)
      oprot.writeI32(self.minVolume)
      oprot.writeFieldEnd()
    if self.combHedgeFlag is not None:
      oprot.writeFieldBegin('combHedgeFlag', TType.I32, 4)
      oprot.writeI32(self.combHedgeFlag)
      oprot.writeFieldEnd()
    if self.tradeDirection is not None:
      oprot.writeFieldBegin('tradeDirection', TType.I32, 5)
      oprot.writeI32(self.tradeDirection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny3ContractSummary:
  """
  Attributes:
   - esunny3ExchangeCode
   - esunny3CommodityType
   - esunny3CommodityCode
   - esunny3ContractCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'esunny3ExchangeCode', None, None, ), # 1
    (2, TType.I16, 'esunny3CommodityType', None, None, ), # 2
    (3, TType.STRING, 'esunny3CommodityCode', None, None, ), # 3
    (4, TType.STRING, 'esunny3ContractCode', None, None, ), # 4
  )

  def __init__(self, esunny3ExchangeCode=None, esunny3CommodityType=None, esunny3CommodityCode=None, esunny3ContractCode=None,):
    self.esunny3ExchangeCode = esunny3ExchangeCode
    self.esunny3CommodityType = esunny3CommodityType
    self.esunny3CommodityCode = esunny3CommodityCode
    self.esunny3ContractCode = esunny3ContractCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.esunny3ExchangeCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.esunny3CommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.esunny3CommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.esunny3ContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny3ContractSummary')
    if self.esunny3ExchangeCode is not None:
      oprot.writeFieldBegin('esunny3ExchangeCode', TType.STRING, 1)
      oprot.writeString(self.esunny3ExchangeCode)
      oprot.writeFieldEnd()
    if self.esunny3CommodityType is not None:
      oprot.writeFieldBegin('esunny3CommodityType', TType.I16, 2)
      oprot.writeI16(self.esunny3CommodityType)
      oprot.writeFieldEnd()
    if self.esunny3CommodityCode is not None:
      oprot.writeFieldBegin('esunny3CommodityCode', TType.STRING, 3)
      oprot.writeString(self.esunny3CommodityCode)
      oprot.writeFieldEnd()
    if self.esunny3ContractCode is not None:
      oprot.writeFieldBegin('esunny3ContractCode', TType.STRING, 4)
      oprot.writeString(self.esunny3ContractCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny3OrderInputExt:
  """
  Attributes:
   - contractSummary
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'contractSummary', (ESunny3ContractSummary, ESunny3ContractSummary.thrift_spec), None, ), # 1
  )

  def __init__(self, contractSummary=None,):
    self.contractSummary = contractSummary

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.contractSummary = ESunny3ContractSummary()
          self.contractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny3OrderInputExt')
    if self.contractSummary is not None:
      oprot.writeFieldBegin('contractSummary', TType.STRUCT, 1)
      self.contractSummary.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny9ContractSummary:
  """
  Attributes:
   - esunny9ExchangeNo
   - esunny9CommodityType
   - esunny9CommodityNo
   - esunny9ContractNo
   - esunny9ContractNo2
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'esunny9ExchangeNo', None, None, ), # 1
    (2, TType.I16, 'esunny9CommodityType', None, None, ), # 2
    (3, TType.STRING, 'esunny9CommodityNo', None, None, ), # 3
    (4, TType.STRING, 'esunny9ContractNo', None, None, ), # 4
    (5, TType.STRING, 'esunny9ContractNo2', None, None, ), # 5
  )

  def __init__(self, esunny9ExchangeNo=None, esunny9CommodityType=None, esunny9CommodityNo=None, esunny9ContractNo=None, esunny9ContractNo2=None,):
    self.esunny9ExchangeNo = esunny9ExchangeNo
    self.esunny9CommodityType = esunny9CommodityType
    self.esunny9CommodityNo = esunny9CommodityNo
    self.esunny9ContractNo = esunny9ContractNo
    self.esunny9ContractNo2 = esunny9ContractNo2

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.esunny9ExchangeNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.esunny9CommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.esunny9CommodityNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.esunny9ContractNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.esunny9ContractNo2 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny9ContractSummary')
    if self.esunny9ExchangeNo is not None:
      oprot.writeFieldBegin('esunny9ExchangeNo', TType.STRING, 1)
      oprot.writeString(self.esunny9ExchangeNo)
      oprot.writeFieldEnd()
    if self.esunny9CommodityType is not None:
      oprot.writeFieldBegin('esunny9CommodityType', TType.I16, 2)
      oprot.writeI16(self.esunny9CommodityType)
      oprot.writeFieldEnd()
    if self.esunny9CommodityNo is not None:
      oprot.writeFieldBegin('esunny9CommodityNo', TType.STRING, 3)
      oprot.writeString(self.esunny9CommodityNo)
      oprot.writeFieldEnd()
    if self.esunny9ContractNo is not None:
      oprot.writeFieldBegin('esunny9ContractNo', TType.STRING, 4)
      oprot.writeString(self.esunny9ContractNo)
      oprot.writeFieldEnd()
    if self.esunny9ContractNo2 is not None:
      oprot.writeFieldBegin('esunny9ContractNo2', TType.STRING, 5)
      oprot.writeString(self.esunny9ContractNo2)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny9OrderInputExt:
  """
  Attributes:
   - contractSummary
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'contractSummary', (ESunny9ContractSummary, ESunny9ContractSummary.thrift_spec), None, ), # 1
  )

  def __init__(self, contractSummary=None,):
    self.contractSummary = contractSummary

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.contractSummary = ESunny9ContractSummary()
          self.contractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny9OrderInputExt')
    if self.contractSummary is not None:
      oprot.writeFieldBegin('contractSummary', TType.STRUCT, 1)
      self.contractSummary.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderInputExt:
  """
  Attributes:
   - ctpInputExt
   - esunny3InputExt
   - esunny9InputExt
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ctpInputExt', (CTPOrderInputExt, CTPOrderInputExt.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'esunny3InputExt', (ESunny3OrderInputExt, ESunny3OrderInputExt.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'esunny9InputExt', (ESunny9OrderInputExt, ESunny9OrderInputExt.thrift_spec), None, ), # 3
  )

  def __init__(self, ctpInputExt=None, esunny3InputExt=None, esunny9InputExt=None,):
    self.ctpInputExt = ctpInputExt
    self.esunny3InputExt = esunny3InputExt
    self.esunny9InputExt = esunny9InputExt

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ctpInputExt = CTPOrderInputExt()
          self.ctpInputExt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.esunny3InputExt = ESunny3OrderInputExt()
          self.esunny3InputExt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.esunny9InputExt = ESunny9OrderInputExt()
          self.esunny9InputExt.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderInputExt')
    if self.ctpInputExt is not None:
      oprot.writeFieldBegin('ctpInputExt', TType.STRUCT, 1)
      self.ctpInputExt.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny3InputExt is not None:
      oprot.writeFieldBegin('esunny3InputExt', TType.STRUCT, 2)
      self.esunny3InputExt.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny9InputExt is not None:
      oprot.writeFieldBegin('esunny9InputExt', TType.STRUCT, 3)
      self.esunny9InputExt.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CTPDealID:
  """
  Attributes:
   - orderSysId
   - exchangeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderSysId', None, None, ), # 1
    (2, TType.STRING, 'exchangeId', None, None, ), # 2
  )

  def __init__(self, orderSysId=None, exchangeId=None,):
    self.orderSysId = orderSysId
    self.exchangeId = exchangeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderSysId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CTPDealID')
    if self.orderSysId is not None:
      oprot.writeFieldBegin('orderSysId', TType.STRING, 1)
      oprot.writeString(self.orderSysId)
      oprot.writeFieldEnd()
    if self.exchangeId is not None:
      oprot.writeFieldBegin('exchangeId', TType.STRING, 2)
      oprot.writeString(self.exchangeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny3DealID:
  """
  Attributes:
   - orderId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'orderId', None, None, ), # 1
  )

  def __init__(self, orderId=None,):
    self.orderId = orderId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.orderId = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny3DealID')
    if self.orderId is not None:
      oprot.writeFieldBegin('orderId', TType.I32, 1)
      oprot.writeI32(self.orderId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny9DealID:
  """
  Attributes:
   - orderNo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'orderNo', None, None, ), # 1
  )

  def __init__(self, orderNo=None,):
    self.orderNo = orderNo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.orderNo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny9DealID')
    if self.orderNo is not None:
      oprot.writeFieldBegin('orderNo', TType.STRING, 1)
      oprot.writeString(self.orderNo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderDealID:
  """
  Attributes:
   - ctpDealId
   - esunny3DealId
   - esunny9DealId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ctpDealId', (CTPDealID, CTPDealID.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'esunny3DealId', (ESunny3DealID, ESunny3DealID.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'esunny9DealId', (ESunny9DealID, ESunny9DealID.thrift_spec), None, ), # 3
  )

  def __init__(self, ctpDealId=None, esunny3DealId=None, esunny9DealId=None,):
    self.ctpDealId = ctpDealId
    self.esunny3DealId = esunny3DealId
    self.esunny9DealId = esunny9DealId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ctpDealId = CTPDealID()
          self.ctpDealId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.esunny3DealId = ESunny3DealID()
          self.esunny3DealId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.esunny9DealId = ESunny9DealID()
          self.esunny9DealId.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderDealID')
    if self.ctpDealId is not None:
      oprot.writeFieldBegin('ctpDealId', TType.STRUCT, 1)
      self.ctpDealId.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny3DealId is not None:
      oprot.writeFieldBegin('esunny3DealId', TType.STRUCT, 2)
      self.esunny3DealId.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny9DealId is not None:
      oprot.writeFieldBegin('esunny9DealId', TType.STRUCT, 3)
      self.esunny9DealId.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderDealCTPInfo:
  """
  Attributes:
   - offsetFlag
   - tradeDirection
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'offsetFlag', None, None, ), # 1
    (2, TType.I32, 'tradeDirection', None, None, ), # 2
  )

  def __init__(self, offsetFlag=None, tradeDirection=None,):
    self.offsetFlag = offsetFlag
    self.tradeDirection = tradeDirection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.offsetFlag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.tradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderDealCTPInfo')
    if self.offsetFlag is not None:
      oprot.writeFieldBegin('offsetFlag', TType.I32, 1)
      oprot.writeI32(self.offsetFlag)
      oprot.writeFieldEnd()
    if self.tradeDirection is not None:
      oprot.writeFieldBegin('tradeDirection', TType.I32, 2)
      oprot.writeI32(self.tradeDirection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderDealESunny9Info:
  """
  Attributes:
   - serverFlag
   - isAddOne
  """

  thrift_spec = (
    None, # 0
    (1, TType.BYTE, 'serverFlag', None, None, ), # 1
    (2, TType.BYTE, 'isAddOne', None, None, ), # 2
  )

  def __init__(self, serverFlag=None, isAddOne=None,):
    self.serverFlag = serverFlag
    self.isAddOne = isAddOne

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BYTE:
          self.serverFlag = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.isAddOne = iprot.readByte();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderDealESunny9Info')
    if self.serverFlag is not None:
      oprot.writeFieldBegin('serverFlag', TType.BYTE, 1)
      oprot.writeByte(self.serverFlag)
      oprot.writeFieldEnd()
    if self.isAddOne is not None:
      oprot.writeFieldBegin('isAddOne', TType.BYTE, 2)
      oprot.writeByte(self.isAddOne)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderDealInfo:
  """
  Attributes:
   - dealId
   - orderInsertDateTime
   - ctpDealInfo
   - esunny9DealInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'dealId', (HostingExecOrderDealID, HostingExecOrderDealID.thrift_spec), None, ), # 1
    (2, TType.STRING, 'orderInsertDateTime', None, None, ), # 2
    (3, TType.STRUCT, 'ctpDealInfo', (HostingExecOrderDealCTPInfo, HostingExecOrderDealCTPInfo.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'esunny9DealInfo', (HostingExecOrderDealESunny9Info, HostingExecOrderDealESunny9Info.thrift_spec), None, ), # 4
  )

  def __init__(self, dealId=None, orderInsertDateTime=None, ctpDealInfo=None, esunny9DealInfo=None,):
    self.dealId = dealId
    self.orderInsertDateTime = orderInsertDateTime
    self.ctpDealInfo = ctpDealInfo
    self.esunny9DealInfo = esunny9DealInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.dealId = HostingExecOrderDealID()
          self.dealId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.orderInsertDateTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.ctpDealInfo = HostingExecOrderDealCTPInfo()
          self.ctpDealInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.esunny9DealInfo = HostingExecOrderDealESunny9Info()
          self.esunny9DealInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderDealInfo')
    if self.dealId is not None:
      oprot.writeFieldBegin('dealId', TType.STRUCT, 1)
      self.dealId.write(oprot)
      oprot.writeFieldEnd()
    if self.orderInsertDateTime is not None:
      oprot.writeFieldBegin('orderInsertDateTime', TType.STRING, 2)
      oprot.writeString(self.orderInsertDateTime)
      oprot.writeFieldEnd()
    if self.ctpDealInfo is not None:
      oprot.writeFieldBegin('ctpDealInfo', TType.STRUCT, 3)
      self.ctpDealInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny9DealInfo is not None:
      oprot.writeFieldBegin('esunny9DealInfo', TType.STRUCT, 4)
      self.esunny9DealInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingUpsideNotifyStateInfo:
  """
  Attributes:
   - state
   - dealInfo
   - volumeTraded
   - volumeResting
   - tradeAveragePrice
   - statusUsefulMsg
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'state', None, None, ), # 1
    (2, TType.STRUCT, 'dealInfo', (HostingExecOrderDealInfo, HostingExecOrderDealInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.I32, 'volumeTraded', None, None, ), # 6
    (7, TType.I32, 'volumeResting', None, None, ), # 7
    (8, TType.DOUBLE, 'tradeAveragePrice', None, None, ), # 8
    (9, TType.STRING, 'statusUsefulMsg', None, None, ), # 9
  )

  def __init__(self, state=None, dealInfo=None, volumeTraded=None, volumeResting=None, tradeAveragePrice=None, statusUsefulMsg=None,):
    self.state = state
    self.dealInfo = dealInfo
    self.volumeTraded = volumeTraded
    self.volumeResting = volumeResting
    self.tradeAveragePrice = tradeAveragePrice
    self.statusUsefulMsg = statusUsefulMsg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.dealInfo = HostingExecOrderDealInfo()
          self.dealInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.volumeTraded = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.volumeResting = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.tradeAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.statusUsefulMsg = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingUpsideNotifyStateInfo')
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 1)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.dealInfo is not None:
      oprot.writeFieldBegin('dealInfo', TType.STRUCT, 2)
      self.dealInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.volumeTraded is not None:
      oprot.writeFieldBegin('volumeTraded', TType.I32, 6)
      oprot.writeI32(self.volumeTraded)
      oprot.writeFieldEnd()
    if self.volumeResting is not None:
      oprot.writeFieldBegin('volumeResting', TType.I32, 7)
      oprot.writeI32(self.volumeResting)
      oprot.writeFieldEnd()
    if self.tradeAveragePrice is not None:
      oprot.writeFieldBegin('tradeAveragePrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.tradeAveragePrice)
      oprot.writeFieldEnd()
    if self.statusUsefulMsg is not None:
      oprot.writeFieldBegin('statusUsefulMsg', TType.STRING, 9)
      oprot.writeString(self.statusUsefulMsg)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingUpsideNotifyStateHandleInfo:
  """
  Attributes:
   - stateInfo
   - eventCreateTimestampMs
   - handledTimestampMs
   - source
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'stateInfo', (HostingUpsideNotifyStateInfo, HostingUpsideNotifyStateInfo.thrift_spec), None, ), # 1
    (2, TType.I64, 'eventCreateTimestampMs', None, None, ), # 2
    (3, TType.I64, 'handledTimestampMs', None, None, ), # 3
    (4, TType.I32, 'source', None, None, ), # 4
  )

  def __init__(self, stateInfo=None, eventCreateTimestampMs=None, handledTimestampMs=None, source=None,):
    self.stateInfo = stateInfo
    self.eventCreateTimestampMs = eventCreateTimestampMs
    self.handledTimestampMs = handledTimestampMs
    self.source = source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.stateInfo = HostingUpsideNotifyStateInfo()
          self.stateInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.eventCreateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.handledTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingUpsideNotifyStateHandleInfo')
    if self.stateInfo is not None:
      oprot.writeFieldBegin('stateInfo', TType.STRUCT, 1)
      self.stateInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.eventCreateTimestampMs is not None:
      oprot.writeFieldBegin('eventCreateTimestampMs', TType.I64, 2)
      oprot.writeI64(self.eventCreateTimestampMs)
      oprot.writeFieldEnd()
    if self.handledTimestampMs is not None:
      oprot.writeFieldBegin('handledTimestampMs', TType.I64, 3)
      oprot.writeI64(self.handledTimestampMs)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 4)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrderTradeSummary:
  """
  Attributes:
   - upsideTradeTotalVolume
   - upsideTradeAveragePrice
   - upsideTradeRestingVolume
   - tradeListTotalVolume
   - tradeListAveragePrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'upsideTradeTotalVolume', None, None, ), # 1
    (2, TType.DOUBLE, 'upsideTradeAveragePrice', None, None, ), # 2
    (3, TType.I32, 'upsideTradeRestingVolume', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.I32, 'tradeListTotalVolume', None, None, ), # 6
    (7, TType.DOUBLE, 'tradeListAveragePrice', None, None, ), # 7
  )

  def __init__(self, upsideTradeTotalVolume=None, upsideTradeAveragePrice=None, upsideTradeRestingVolume=None, tradeListTotalVolume=None, tradeListAveragePrice=None,):
    self.upsideTradeTotalVolume = upsideTradeTotalVolume
    self.upsideTradeAveragePrice = upsideTradeAveragePrice
    self.upsideTradeRestingVolume = upsideTradeRestingVolume
    self.tradeListTotalVolume = tradeListTotalVolume
    self.tradeListAveragePrice = tradeListAveragePrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.upsideTradeTotalVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.upsideTradeAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.upsideTradeRestingVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.tradeListTotalVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.tradeListAveragePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrderTradeSummary')
    if self.upsideTradeTotalVolume is not None:
      oprot.writeFieldBegin('upsideTradeTotalVolume', TType.I32, 1)
      oprot.writeI32(self.upsideTradeTotalVolume)
      oprot.writeFieldEnd()
    if self.upsideTradeAveragePrice is not None:
      oprot.writeFieldBegin('upsideTradeAveragePrice', TType.DOUBLE, 2)
      oprot.writeDouble(self.upsideTradeAveragePrice)
      oprot.writeFieldEnd()
    if self.upsideTradeRestingVolume is not None:
      oprot.writeFieldBegin('upsideTradeRestingVolume', TType.I32, 3)
      oprot.writeI32(self.upsideTradeRestingVolume)
      oprot.writeFieldEnd()
    if self.tradeListTotalVolume is not None:
      oprot.writeFieldBegin('tradeListTotalVolume', TType.I32, 6)
      oprot.writeI32(self.tradeListTotalVolume)
      oprot.writeFieldEnd()
    if self.tradeListAveragePrice is not None:
      oprot.writeFieldBegin('tradeListAveragePrice', TType.DOUBLE, 7)
      oprot.writeDouble(self.tradeListAveragePrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecOrder:
  """
  Attributes:
   - execOrderId
   - subUserId
   - orderDetail
   - contractSummary
   - accountSummary
   - upsideOrderRef
   - orderInputExt
   - subAccountId
   - stateInfo
   - revokeInfo
   - dealInfo
   - tradeSummary
   - notifyStateHandleInfos
   - relateExecOrderId
   - createTimestampMs
   - lastmodifyTimestampMs
   - version
   - source
   - ttlTimestampMs
   - verifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'execOrderId', None, None, ), # 1
    (2, TType.I32, 'subUserId', None, None, ), # 2
    (3, TType.STRUCT, 'orderDetail', (HostingExecOrderDetail, HostingExecOrderDetail.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'contractSummary', (HostingExecOrderContractSummary, HostingExecOrderContractSummary.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'accountSummary', (HostingExecOrderTradeAccountSummary, HostingExecOrderTradeAccountSummary.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'upsideOrderRef', (HostingExecOrderRef, HostingExecOrderRef.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'orderInputExt', (HostingExecOrderInputExt, HostingExecOrderInputExt.thrift_spec), None, ), # 7
    (8, TType.I64, 'subAccountId', None, None, ), # 8
    None, # 9
    None, # 10
    (11, TType.STRUCT, 'stateInfo', (HostingExecOrderStateInfo, HostingExecOrderStateInfo.thrift_spec), None, ), # 11
    (12, TType.STRUCT, 'revokeInfo', (HostingExecOrderRevokeInfo, HostingExecOrderRevokeInfo.thrift_spec), None, ), # 12
    None, # 13
    None, # 14
    (15, TType.STRUCT, 'dealInfo', (HostingExecOrderDealInfo, HostingExecOrderDealInfo.thrift_spec), None, ), # 15
    (16, TType.STRUCT, 'tradeSummary', (HostingExecOrderTradeSummary, HostingExecOrderTradeSummary.thrift_spec), None, ), # 16
    (17, TType.LIST, 'notifyStateHandleInfos', (TType.STRUCT,(HostingUpsideNotifyStateHandleInfo, HostingUpsideNotifyStateHandleInfo.thrift_spec)), None, ), # 17
    (18, TType.I64, 'relateExecOrderId', None, None, ), # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
    (22, TType.I32, 'version', None, None, ), # 22
    (23, TType.STRING, 'source', None, None, ), # 23
    (24, TType.I64, 'ttlTimestampMs', None, None, ), # 24
    (25, TType.I64, 'verifyTimestampMs', None, None, ), # 25
  )

  def __init__(self, execOrderId=None, subUserId=None, orderDetail=None, contractSummary=None, accountSummary=None, upsideOrderRef=None, orderInputExt=None, subAccountId=None, stateInfo=None, revokeInfo=None, dealInfo=None, tradeSummary=None, notifyStateHandleInfos=None, relateExecOrderId=None, createTimestampMs=None, lastmodifyTimestampMs=None, version=None, source=None, ttlTimestampMs=None, verifyTimestampMs=None,):
    self.execOrderId = execOrderId
    self.subUserId = subUserId
    self.orderDetail = orderDetail
    self.contractSummary = contractSummary
    self.accountSummary = accountSummary
    self.upsideOrderRef = upsideOrderRef
    self.orderInputExt = orderInputExt
    self.subAccountId = subAccountId
    self.stateInfo = stateInfo
    self.revokeInfo = revokeInfo
    self.dealInfo = dealInfo
    self.tradeSummary = tradeSummary
    self.notifyStateHandleInfos = notifyStateHandleInfos
    self.relateExecOrderId = relateExecOrderId
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.version = version
    self.source = source
    self.ttlTimestampMs = ttlTimestampMs
    self.verifyTimestampMs = verifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.execOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.orderDetail = HostingExecOrderDetail()
          self.orderDetail.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.contractSummary = HostingExecOrderContractSummary()
          self.contractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.accountSummary = HostingExecOrderTradeAccountSummary()
          self.accountSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.upsideOrderRef = HostingExecOrderRef()
          self.upsideOrderRef.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.orderInputExt = HostingExecOrderInputExt()
          self.orderInputExt.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.stateInfo = HostingExecOrderStateInfo()
          self.stateInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRUCT:
          self.revokeInfo = HostingExecOrderRevokeInfo()
          self.revokeInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRUCT:
          self.dealInfo = HostingExecOrderDealInfo()
          self.dealInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRUCT:
          self.tradeSummary = HostingExecOrderTradeSummary()
          self.tradeSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.notifyStateHandleInfos = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = HostingUpsideNotifyStateHandleInfo()
            _elem71.read(iprot)
            self.notifyStateHandleInfos.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.relateExecOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I64:
          self.ttlTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          self.verifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecOrder')
    if self.execOrderId is not None:
      oprot.writeFieldBegin('execOrderId', TType.I64, 1)
      oprot.writeI64(self.execOrderId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 2)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.orderDetail is not None:
      oprot.writeFieldBegin('orderDetail', TType.STRUCT, 3)
      self.orderDetail.write(oprot)
      oprot.writeFieldEnd()
    if self.contractSummary is not None:
      oprot.writeFieldBegin('contractSummary', TType.STRUCT, 4)
      self.contractSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.accountSummary is not None:
      oprot.writeFieldBegin('accountSummary', TType.STRUCT, 5)
      self.accountSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.upsideOrderRef is not None:
      oprot.writeFieldBegin('upsideOrderRef', TType.STRUCT, 6)
      self.upsideOrderRef.write(oprot)
      oprot.writeFieldEnd()
    if self.orderInputExt is not None:
      oprot.writeFieldBegin('orderInputExt', TType.STRUCT, 7)
      self.orderInputExt.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 8)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.stateInfo is not None:
      oprot.writeFieldBegin('stateInfo', TType.STRUCT, 11)
      self.stateInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.revokeInfo is not None:
      oprot.writeFieldBegin('revokeInfo', TType.STRUCT, 12)
      self.revokeInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.dealInfo is not None:
      oprot.writeFieldBegin('dealInfo', TType.STRUCT, 15)
      self.dealInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeSummary is not None:
      oprot.writeFieldBegin('tradeSummary', TType.STRUCT, 16)
      self.tradeSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.notifyStateHandleInfos is not None:
      oprot.writeFieldBegin('notifyStateHandleInfos', TType.LIST, 17)
      oprot.writeListBegin(TType.STRUCT, len(self.notifyStateHandleInfos))
      for iter72 in self.notifyStateHandleInfos:
        iter72.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relateExecOrderId is not None:
      oprot.writeFieldBegin('relateExecOrderId', TType.I64, 18)
      oprot.writeI64(self.relateExecOrderId)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 22)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 23)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.ttlTimestampMs is not None:
      oprot.writeFieldBegin('ttlTimestampMs', TType.I64, 24)
      oprot.writeI64(self.ttlTimestampMs)
      oprot.writeFieldEnd()
    if self.verifyTimestampMs is not None:
      oprot.writeFieldBegin('verifyTimestampMs', TType.I64, 25)
      oprot.writeI64(self.verifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CTPTradeID:
  """
  Attributes:
   - tradeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'tradeId', None, None, ), # 1
  )

  def __init__(self, tradeId=None,):
    self.tradeId = tradeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.tradeId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CTPTradeID')
    if self.tradeId is not None:
      oprot.writeFieldBegin('tradeId', TType.STRING, 1)
      oprot.writeString(self.tradeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny3TradeID:
  """
  Attributes:
   - matchNo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'matchNo', None, None, ), # 1
  )

  def __init__(self, matchNo=None,):
    self.matchNo = matchNo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.matchNo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny3TradeID')
    if self.matchNo is not None:
      oprot.writeFieldBegin('matchNo', TType.STRING, 1)
      oprot.writeString(self.matchNo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ESunny9TradeID:
  """
  Attributes:
   - matchNo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'matchNo', None, None, ), # 1
  )

  def __init__(self, matchNo=None,):
    self.matchNo = matchNo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.matchNo = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ESunny9TradeID')
    if self.matchNo is not None:
      oprot.writeFieldBegin('matchNo', TType.STRING, 1)
      oprot.writeString(self.matchNo)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecUpsideTradeID:
  """
  Attributes:
   - ctpTradeId
   - esunny3TradeId
   - esunny9TradeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'ctpTradeId', (CTPTradeID, CTPTradeID.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'esunny3TradeId', (ESunny3TradeID, ESunny3TradeID.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'esunny9TradeId', (ESunny9TradeID, ESunny9TradeID.thrift_spec), None, ), # 3
  )

  def __init__(self, ctpTradeId=None, esunny3TradeId=None, esunny9TradeId=None,):
    self.ctpTradeId = ctpTradeId
    self.esunny3TradeId = esunny3TradeId
    self.esunny9TradeId = esunny9TradeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.ctpTradeId = CTPTradeID()
          self.ctpTradeId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.esunny3TradeId = ESunny3TradeID()
          self.esunny3TradeId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.esunny9TradeId = ESunny9TradeID()
          self.esunny9TradeId.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecUpsideTradeID')
    if self.ctpTradeId is not None:
      oprot.writeFieldBegin('ctpTradeId', TType.STRUCT, 1)
      self.ctpTradeId.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny3TradeId is not None:
      oprot.writeFieldBegin('esunny3TradeId', TType.STRUCT, 2)
      self.esunny3TradeId.write(oprot)
      oprot.writeFieldEnd()
    if self.esunny9TradeId is not None:
      oprot.writeFieldBegin('esunny9TradeId', TType.STRUCT, 3)
      self.esunny9TradeId.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecTrade:
  """
  Attributes:
   - execTradeId
   - execOrderId
   - subUserId
   - subAccountId
   - contractSummary
   - accountSummary
   - relatedTradeLegIds
   - tradePrice
   - tradeVolume
   - createTimestampMs
   - lastmodifyTimestampMs
   - relatedTradeLegPrices
   - orderTradeDirection
   - relatedTradeLegTradeDirections
   - relatedTradeLegContractSummaries
   - relatedTradeLegVolumes
   - relatedTradeLegCount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'execTradeId', None, None, ), # 1
    (2, TType.I64, 'execOrderId', None, None, ), # 2
    (3, TType.I32, 'subUserId', None, None, ), # 3
    (4, TType.I64, 'subAccountId', None, None, ), # 4
    (5, TType.STRUCT, 'contractSummary', (HostingExecOrderContractSummary, HostingExecOrderContractSummary.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'accountSummary', (HostingExecOrderTradeAccountSummary, HostingExecOrderTradeAccountSummary.thrift_spec), None, ), # 6
    (7, TType.LIST, 'relatedTradeLegIds', (TType.I64,None), None, ), # 7
    (8, TType.DOUBLE, 'tradePrice', None, None, ), # 8
    (9, TType.I32, 'tradeVolume', None, None, ), # 9
    (10, TType.I64, 'createTimestampMs', None, None, ), # 10
    (11, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 11
    (12, TType.LIST, 'relatedTradeLegPrices', (TType.DOUBLE,None), None, ), # 12
    (13, TType.I32, 'orderTradeDirection', None, None, ), # 13
    (14, TType.LIST, 'relatedTradeLegTradeDirections', (TType.I32,None), None, ), # 14
    (15, TType.LIST, 'relatedTradeLegContractSummaries', (TType.STRUCT,(HostingExecOrderLegContractSummary, HostingExecOrderLegContractSummary.thrift_spec)), None, ), # 15
    (16, TType.LIST, 'relatedTradeLegVolumes', (TType.I32,None), None, ), # 16
    (17, TType.I32, 'relatedTradeLegCount', None, None, ), # 17
  )

  def __init__(self, execTradeId=None, execOrderId=None, subUserId=None, subAccountId=None, contractSummary=None, accountSummary=None, relatedTradeLegIds=None, tradePrice=None, tradeVolume=None, createTimestampMs=None, lastmodifyTimestampMs=None, relatedTradeLegPrices=None, orderTradeDirection=None, relatedTradeLegTradeDirections=None, relatedTradeLegContractSummaries=None, relatedTradeLegVolumes=None, relatedTradeLegCount=None,):
    self.execTradeId = execTradeId
    self.execOrderId = execOrderId
    self.subUserId = subUserId
    self.subAccountId = subAccountId
    self.contractSummary = contractSummary
    self.accountSummary = accountSummary
    self.relatedTradeLegIds = relatedTradeLegIds
    self.tradePrice = tradePrice
    self.tradeVolume = tradeVolume
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.relatedTradeLegPrices = relatedTradeLegPrices
    self.orderTradeDirection = orderTradeDirection
    self.relatedTradeLegTradeDirections = relatedTradeLegTradeDirections
    self.relatedTradeLegContractSummaries = relatedTradeLegContractSummaries
    self.relatedTradeLegVolumes = relatedTradeLegVolumes
    self.relatedTradeLegCount = relatedTradeLegCount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.execTradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.execOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.contractSummary = HostingExecOrderContractSummary()
          self.contractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.accountSummary = HostingExecOrderTradeAccountSummary()
          self.accountSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.relatedTradeLegIds = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = iprot.readI64();
            self.relatedTradeLegIds.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.tradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.tradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.relatedTradeLegPrices = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = iprot.readDouble();
            self.relatedTradeLegPrices.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.orderTradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.relatedTradeLegTradeDirections = []
          (_etype88, _size85) = iprot.readListBegin()
          for _i89 in xrange(_size85):
            _elem90 = iprot.readI32();
            self.relatedTradeLegTradeDirections.append(_elem90)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.relatedTradeLegContractSummaries = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = HostingExecOrderLegContractSummary()
            _elem96.read(iprot)
            self.relatedTradeLegContractSummaries.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.LIST:
          self.relatedTradeLegVolumes = []
          (_etype100, _size97) = iprot.readListBegin()
          for _i101 in xrange(_size97):
            _elem102 = iprot.readI32();
            self.relatedTradeLegVolumes.append(_elem102)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.relatedTradeLegCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecTrade')
    if self.execTradeId is not None:
      oprot.writeFieldBegin('execTradeId', TType.I64, 1)
      oprot.writeI64(self.execTradeId)
      oprot.writeFieldEnd()
    if self.execOrderId is not None:
      oprot.writeFieldBegin('execOrderId', TType.I64, 2)
      oprot.writeI64(self.execOrderId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 3)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 4)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractSummary is not None:
      oprot.writeFieldBegin('contractSummary', TType.STRUCT, 5)
      self.contractSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.accountSummary is not None:
      oprot.writeFieldBegin('accountSummary', TType.STRUCT, 6)
      self.accountSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.relatedTradeLegIds is not None:
      oprot.writeFieldBegin('relatedTradeLegIds', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.relatedTradeLegIds))
      for iter103 in self.relatedTradeLegIds:
        oprot.writeI64(iter103)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.tradePrice is not None:
      oprot.writeFieldBegin('tradePrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.tradePrice)
      oprot.writeFieldEnd()
    if self.tradeVolume is not None:
      oprot.writeFieldBegin('tradeVolume', TType.I32, 9)
      oprot.writeI32(self.tradeVolume)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 10)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 11)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.relatedTradeLegPrices is not None:
      oprot.writeFieldBegin('relatedTradeLegPrices', TType.LIST, 12)
      oprot.writeListBegin(TType.DOUBLE, len(self.relatedTradeLegPrices))
      for iter104 in self.relatedTradeLegPrices:
        oprot.writeDouble(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.orderTradeDirection is not None:
      oprot.writeFieldBegin('orderTradeDirection', TType.I32, 13)
      oprot.writeI32(self.orderTradeDirection)
      oprot.writeFieldEnd()
    if self.relatedTradeLegTradeDirections is not None:
      oprot.writeFieldBegin('relatedTradeLegTradeDirections', TType.LIST, 14)
      oprot.writeListBegin(TType.I32, len(self.relatedTradeLegTradeDirections))
      for iter105 in self.relatedTradeLegTradeDirections:
        oprot.writeI32(iter105)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relatedTradeLegContractSummaries is not None:
      oprot.writeFieldBegin('relatedTradeLegContractSummaries', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.relatedTradeLegContractSummaries))
      for iter106 in self.relatedTradeLegContractSummaries:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relatedTradeLegVolumes is not None:
      oprot.writeFieldBegin('relatedTradeLegVolumes', TType.LIST, 16)
      oprot.writeListBegin(TType.I32, len(self.relatedTradeLegVolumes))
      for iter107 in self.relatedTradeLegVolumes:
        oprot.writeI32(iter107)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.relatedTradeLegCount is not None:
      oprot.writeFieldBegin('relatedTradeLegCount', TType.I32, 17)
      oprot.writeI32(self.relatedTradeLegCount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecTradeLegInfo:
  """
  Attributes:
   - legTradePrice
   - legTradeVolume
   - legTradeDateTime
   - legUpsideTradeId
   - legUpsideTradeDirection
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'legTradePrice', None, None, ), # 1
    (2, TType.I32, 'legTradeVolume', None, None, ), # 2
    (3, TType.STRING, 'legTradeDateTime', None, None, ), # 3
    (4, TType.STRUCT, 'legUpsideTradeId', (HostingExecUpsideTradeID, HostingExecUpsideTradeID.thrift_spec), None, ), # 4
    (5, TType.I32, 'legUpsideTradeDirection', None, None, ), # 5
  )

  def __init__(self, legTradePrice=None, legTradeVolume=None, legTradeDateTime=None, legUpsideTradeId=None, legUpsideTradeDirection=None,):
    self.legTradePrice = legTradePrice
    self.legTradeVolume = legTradeVolume
    self.legTradeDateTime = legTradeDateTime
    self.legUpsideTradeId = legUpsideTradeId
    self.legUpsideTradeDirection = legUpsideTradeDirection

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.legTradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.legTradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.legTradeDateTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.legUpsideTradeId = HostingExecUpsideTradeID()
          self.legUpsideTradeId.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.legUpsideTradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecTradeLegInfo')
    if self.legTradePrice is not None:
      oprot.writeFieldBegin('legTradePrice', TType.DOUBLE, 1)
      oprot.writeDouble(self.legTradePrice)
      oprot.writeFieldEnd()
    if self.legTradeVolume is not None:
      oprot.writeFieldBegin('legTradeVolume', TType.I32, 2)
      oprot.writeI32(self.legTradeVolume)
      oprot.writeFieldEnd()
    if self.legTradeDateTime is not None:
      oprot.writeFieldBegin('legTradeDateTime', TType.STRING, 3)
      oprot.writeString(self.legTradeDateTime)
      oprot.writeFieldEnd()
    if self.legUpsideTradeId is not None:
      oprot.writeFieldBegin('legUpsideTradeId', TType.STRUCT, 4)
      self.legUpsideTradeId.write(oprot)
      oprot.writeFieldEnd()
    if self.legUpsideTradeDirection is not None:
      oprot.writeFieldBegin('legUpsideTradeDirection', TType.I32, 5)
      oprot.writeI32(self.legUpsideTradeDirection)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingExecTradeLeg:
  """
  Attributes:
   - execTradeLegId
   - execOrderId
   - relatedExecTradeId
   - legIndex
   - legContractSummary
   - tradeLegInfo
   - accountSummary
   - subUserId
   - createTimestampMs
   - lastmodifyTimestampMs
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'execTradeLegId', None, None, ), # 1
    (2, TType.I64, 'execOrderId', None, None, ), # 2
    (3, TType.I64, 'relatedExecTradeId', None, None, ), # 3
    (4, TType.I16, 'legIndex', None, None, ), # 4
    (5, TType.STRUCT, 'legContractSummary', (HostingExecOrderLegContractSummary, HostingExecOrderLegContractSummary.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'tradeLegInfo', (HostingExecTradeLegInfo, HostingExecTradeLegInfo.thrift_spec), None, ), # 6
    (7, TType.STRUCT, 'accountSummary', (HostingExecOrderTradeAccountSummary, HostingExecOrderTradeAccountSummary.thrift_spec), None, ), # 7
    (8, TType.I32, 'subUserId', None, None, ), # 8
    (9, TType.I64, 'createTimestampMs', None, None, ), # 9
    (10, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 10
    (11, TType.I64, 'subAccountId', None, None, ), # 11
  )

  def __init__(self, execTradeLegId=None, execOrderId=None, relatedExecTradeId=None, legIndex=None, legContractSummary=None, tradeLegInfo=None, accountSummary=None, subUserId=None, createTimestampMs=None, lastmodifyTimestampMs=None, subAccountId=None,):
    self.execTradeLegId = execTradeLegId
    self.execOrderId = execOrderId
    self.relatedExecTradeId = relatedExecTradeId
    self.legIndex = legIndex
    self.legContractSummary = legContractSummary
    self.tradeLegInfo = tradeLegInfo
    self.accountSummary = accountSummary
    self.subUserId = subUserId
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.execTradeLegId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.execOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.relatedExecTradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.legIndex = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.legContractSummary = HostingExecOrderLegContractSummary()
          self.legContractSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.tradeLegInfo = HostingExecTradeLegInfo()
          self.tradeLegInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.accountSummary = HostingExecOrderTradeAccountSummary()
          self.accountSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingExecTradeLeg')
    if self.execTradeLegId is not None:
      oprot.writeFieldBegin('execTradeLegId', TType.I64, 1)
      oprot.writeI64(self.execTradeLegId)
      oprot.writeFieldEnd()
    if self.execOrderId is not None:
      oprot.writeFieldBegin('execOrderId', TType.I64, 2)
      oprot.writeI64(self.execOrderId)
      oprot.writeFieldEnd()
    if self.relatedExecTradeId is not None:
      oprot.writeFieldBegin('relatedExecTradeId', TType.I64, 3)
      oprot.writeI64(self.relatedExecTradeId)
      oprot.writeFieldEnd()
    if self.legIndex is not None:
      oprot.writeFieldBegin('legIndex', TType.I16, 4)
      oprot.writeI16(self.legIndex)
      oprot.writeFieldEnd()
    if self.legContractSummary is not None:
      oprot.writeFieldBegin('legContractSummary', TType.STRUCT, 5)
      self.legContractSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.tradeLegInfo is not None:
      oprot.writeFieldBegin('tradeLegInfo', TType.STRUCT, 6)
      self.tradeLegInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.accountSummary is not None:
      oprot.writeFieldBegin('accountSummary', TType.STRUCT, 7)
      self.accountSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 8)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 9)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 10)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 11)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
