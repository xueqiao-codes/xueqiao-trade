#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class EHostingRiskLevel:
  OPERATION_ACCOUNT_GLOBAL = 1
  OPERATION_ACCOUNT_COMMODITY = 2

  _VALUES_TO_NAMES = {
    1: "OPERATION_ACCOUNT_GLOBAL",
    2: "OPERATION_ACCOUNT_COMMODITY",
  }

  _NAMES_TO_VALUES = {
    "OPERATION_ACCOUNT_GLOBAL": 1,
    "OPERATION_ACCOUNT_COMMODITY": 2,
  }

class EHostingRiskItemValueType:
  DOUBLE_VALUE = 1
  PERCENT_VALUE = 2
  LONG_VALUE = 3

  _VALUES_TO_NAMES = {
    1: "DOUBLE_VALUE",
    2: "PERCENT_VALUE",
    3: "LONG_VALUE",
  }

  _NAMES_TO_VALUES = {
    "DOUBLE_VALUE": 1,
    "PERCENT_VALUE": 2,
    "LONG_VALUE": 3,
  }

class EHostingRiskItemValueLevel:
  OPERATION_ACCOUNT_GLOBAL_VALUE = 1
  OPERATION_ACCOUNT_COMMODITY_VALUE = 2
  OPERATION_ACCOUNT_CONTRACT_VALUE = 3

  _VALUES_TO_NAMES = {
    1: "OPERATION_ACCOUNT_GLOBAL_VALUE",
    2: "OPERATION_ACCOUNT_COMMODITY_VALUE",
    3: "OPERATION_ACCOUNT_CONTRACT_VALUE",
  }

  _NAMES_TO_VALUES = {
    "OPERATION_ACCOUNT_GLOBAL_VALUE": 1,
    "OPERATION_ACCOUNT_COMMODITY_VALUE": 2,
    "OPERATION_ACCOUNT_CONTRACT_VALUE": 3,
  }

class EHostingRiskLadderType:
  HIGH_VALUE_HIGH_RISK = 1
  LOW_VALUE_HIGH_RISK = 2

  _VALUES_TO_NAMES = {
    1: "HIGH_VALUE_HIGH_RISK",
    2: "LOW_VALUE_HIGH_RISK",
  }

  _NAMES_TO_VALUES = {
    "HIGH_VALUE_HIGH_RISK": 1,
    "LOW_VALUE_HIGH_RISK": 2,
  }


class HostingRiskSupportedItem:
  """
  Attributes:
   - itemId
   - riskLevel
   - itemCnName
   - itemDescription
   - itemValueType
   - riskLadderType
   - itemValueLevel
   - orderNum
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.I32, 'riskLevel', None, None, ), # 2
    (3, TType.STRING, 'itemCnName', None, None, ), # 3
    (4, TType.STRING, 'itemDescription', None, None, ), # 4
    (5, TType.I32, 'itemValueType', None, None, ), # 5
    (6, TType.I32, 'riskLadderType', None, None, ), # 6
    (7, TType.I32, 'itemValueLevel', None, None, ), # 7
    (8, TType.I32, 'orderNum', None, None, ), # 8
  )

  def __init__(self, itemId=None, riskLevel=None, itemCnName=None, itemDescription=None, itemValueType=None, riskLadderType=None, itemValueLevel=None, orderNum=None,):
    self.itemId = itemId
    self.riskLevel = riskLevel
    self.itemCnName = itemCnName
    self.itemDescription = itemDescription
    self.itemValueType = itemValueType
    self.riskLadderType = riskLadderType
    self.itemValueLevel = itemValueLevel
    self.orderNum = orderNum

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.riskLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.itemCnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.itemDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.itemValueType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.riskLadderType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.itemValueLevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.orderNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskSupportedItem')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId)
      oprot.writeFieldEnd()
    if self.riskLevel is not None:
      oprot.writeFieldBegin('riskLevel', TType.I32, 2)
      oprot.writeI32(self.riskLevel)
      oprot.writeFieldEnd()
    if self.itemCnName is not None:
      oprot.writeFieldBegin('itemCnName', TType.STRING, 3)
      oprot.writeString(self.itemCnName)
      oprot.writeFieldEnd()
    if self.itemDescription is not None:
      oprot.writeFieldBegin('itemDescription', TType.STRING, 4)
      oprot.writeString(self.itemDescription)
      oprot.writeFieldEnd()
    if self.itemValueType is not None:
      oprot.writeFieldBegin('itemValueType', TType.I32, 5)
      oprot.writeI32(self.itemValueType)
      oprot.writeFieldEnd()
    if self.riskLadderType is not None:
      oprot.writeFieldBegin('riskLadderType', TType.I32, 6)
      oprot.writeI32(self.riskLadderType)
      oprot.writeFieldEnd()
    if self.itemValueLevel is not None:
      oprot.writeFieldBegin('itemValueLevel', TType.I32, 7)
      oprot.writeI32(self.itemValueLevel)
      oprot.writeFieldEnd()
    if self.orderNum is not None:
      oprot.writeFieldBegin('orderNum', TType.I32, 8)
      oprot.writeI32(self.orderNum)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingRiskRuleItemValue:
  """
  Attributes:
   - longValue
   - doubeValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'longValue', None, None, ), # 1
    (2, TType.DOUBLE, 'doubeValue', None, None, ), # 2
  )

  def __init__(self, longValue=None, doubeValue=None,):
    self.longValue = longValue
    self.doubeValue = doubeValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.longValue = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.doubeValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskRuleItemValue')
    if self.longValue is not None:
      oprot.writeFieldBegin('longValue', TType.I64, 1)
      oprot.writeI64(self.longValue)
      oprot.writeFieldEnd()
    if self.doubeValue is not None:
      oprot.writeFieldBegin('doubeValue', TType.DOUBLE, 2)
      oprot.writeDouble(self.doubeValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingRiskRuleItem:
  """
  Attributes:
   - ruleEnabled
   - alarmValue
   - forbiddenOpenPositionValue
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'ruleEnabled', None, None, ), # 1
    (2, TType.STRUCT, 'alarmValue', (HostingRiskRuleItemValue, HostingRiskRuleItemValue.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'forbiddenOpenPositionValue', (HostingRiskRuleItemValue, HostingRiskRuleItemValue.thrift_spec), None, ), # 3
  )

  def __init__(self, ruleEnabled=None, alarmValue=None, forbiddenOpenPositionValue=None,):
    self.ruleEnabled = ruleEnabled
    self.alarmValue = alarmValue
    self.forbiddenOpenPositionValue = forbiddenOpenPositionValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.ruleEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.alarmValue = HostingRiskRuleItemValue()
          self.alarmValue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.forbiddenOpenPositionValue = HostingRiskRuleItemValue()
          self.forbiddenOpenPositionValue.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskRuleItem')
    if self.ruleEnabled is not None:
      oprot.writeFieldBegin('ruleEnabled', TType.BOOL, 1)
      oprot.writeBool(self.ruleEnabled)
      oprot.writeFieldEnd()
    if self.alarmValue is not None:
      oprot.writeFieldBegin('alarmValue', TType.STRUCT, 2)
      self.alarmValue.write(oprot)
      oprot.writeFieldEnd()
    if self.forbiddenOpenPositionValue is not None:
      oprot.writeFieldBegin('forbiddenOpenPositionValue', TType.STRUCT, 3)
      self.forbiddenOpenPositionValue.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingRiskRuleJoint:
  """
  风控结构

  Attributes:
   - version
   - subAccountId
   - riskEnabled
   - globalOpenedItemIds
   - globalRules
   - tradedCommodityIds
   - commodityRules
   - commodityOpenedItemIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'version', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.BOOL, 'riskEnabled', None, None, ), # 3
    (4, TType.SET, 'globalOpenedItemIds', (TType.STRING,None), None, ), # 4
    (5, TType.MAP, 'globalRules', (TType.STRING,None,TType.STRUCT,(HostingRiskRuleItem, HostingRiskRuleItem.thrift_spec)), None, ), # 5
    (6, TType.SET, 'tradedCommodityIds', (TType.I64,None), None, ), # 6
    (7, TType.MAP, 'commodityRules', (TType.I64,None,TType.MAP,(TType.STRING,None,TType.STRUCT,(HostingRiskRuleItem, HostingRiskRuleItem.thrift_spec))), None, ), # 7
    (8, TType.SET, 'commodityOpenedItemIds', (TType.STRING,None), None, ), # 8
  )

  def __init__(self, version=None, subAccountId=None, riskEnabled=None, globalOpenedItemIds=None, globalRules=None, tradedCommodityIds=None, commodityRules=None, commodityOpenedItemIds=None,):
    self.version = version
    self.subAccountId = subAccountId
    self.riskEnabled = riskEnabled
    self.globalOpenedItemIds = globalOpenedItemIds
    self.globalRules = globalRules
    self.tradedCommodityIds = tradedCommodityIds
    self.commodityRules = commodityRules
    self.commodityOpenedItemIds = commodityOpenedItemIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.riskEnabled = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.globalOpenedItemIds = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.globalOpenedItemIds.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.globalRules = {}
          (_ktype7, _vtype8, _size6 ) = iprot.readMapBegin()
          for _i10 in xrange(_size6):
            _key11 = iprot.readString();
            _val12 = HostingRiskRuleItem()
            _val12.read(iprot)
            self.globalRules[_key11] = _val12
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.SET:
          self.tradedCommodityIds = set()
          (_etype16, _size13) = iprot.readSetBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI64();
            self.tradedCommodityIds.add(_elem18)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.MAP:
          self.commodityRules = {}
          (_ktype20, _vtype21, _size19 ) = iprot.readMapBegin()
          for _i23 in xrange(_size19):
            _key24 = iprot.readI64();
            _val25 = {}
            (_ktype27, _vtype28, _size26 ) = iprot.readMapBegin()
            for _i30 in xrange(_size26):
              _key31 = iprot.readString();
              _val32 = HostingRiskRuleItem()
              _val32.read(iprot)
              _val25[_key31] = _val32
            iprot.readMapEnd()
            self.commodityRules[_key24] = _val25
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.SET:
          self.commodityOpenedItemIds = set()
          (_etype36, _size33) = iprot.readSetBegin()
          for _i37 in xrange(_size33):
            _elem38 = iprot.readString();
            self.commodityOpenedItemIds.add(_elem38)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskRuleJoint')
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 1)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.riskEnabled is not None:
      oprot.writeFieldBegin('riskEnabled', TType.BOOL, 3)
      oprot.writeBool(self.riskEnabled)
      oprot.writeFieldEnd()
    if self.globalOpenedItemIds is not None:
      oprot.writeFieldBegin('globalOpenedItemIds', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.globalOpenedItemIds))
      for iter39 in self.globalOpenedItemIds:
        oprot.writeString(iter39)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.globalRules is not None:
      oprot.writeFieldBegin('globalRules', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.globalRules))
      for kiter40,viter41 in self.globalRules.items():
        oprot.writeString(kiter40)
        viter41.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.tradedCommodityIds is not None:
      oprot.writeFieldBegin('tradedCommodityIds', TType.SET, 6)
      oprot.writeSetBegin(TType.I64, len(self.tradedCommodityIds))
      for iter42 in self.tradedCommodityIds:
        oprot.writeI64(iter42)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.commodityRules is not None:
      oprot.writeFieldBegin('commodityRules', TType.MAP, 7)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.commodityRules))
      for kiter43,viter44 in self.commodityRules.items():
        oprot.writeI64(kiter43)
        oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(viter44))
        for kiter45,viter46 in viter44.items():
          oprot.writeString(kiter45)
          viter46.write(oprot)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.commodityOpenedItemIds is not None:
      oprot.writeFieldBegin('commodityOpenedItemIds', TType.SET, 8)
      oprot.writeSetBegin(TType.STRING, len(self.commodityOpenedItemIds))
      for iter47 in self.commodityOpenedItemIds:
        oprot.writeString(iter47)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingRiskItemDataInfo:
  """
  风控条目的数据信息

  Attributes:
   - itemId
   - sledCommodityId
   - sledContractId
   - itemValue
   - alarmTriggered
   - forbiddenOpenPositionTriggered
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'itemId', None, None, ), # 1
    (2, TType.I64, 'sledCommodityId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.STRUCT, 'itemValue', (HostingRiskRuleItemValue, HostingRiskRuleItemValue.thrift_spec), None, ), # 4
    (5, TType.BOOL, 'alarmTriggered', None, None, ), # 5
    (6, TType.BOOL, 'forbiddenOpenPositionTriggered', None, None, ), # 6
  )

  def __init__(self, itemId=None, sledCommodityId=None, sledContractId=None, itemValue=None, alarmTriggered=None, forbiddenOpenPositionTriggered=None,):
    self.itemId = itemId
    self.sledCommodityId = sledCommodityId
    self.sledContractId = sledContractId
    self.itemValue = itemValue
    self.alarmTriggered = alarmTriggered
    self.forbiddenOpenPositionTriggered = forbiddenOpenPositionTriggered

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.itemId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.itemValue = HostingRiskRuleItemValue()
          self.itemValue.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.alarmTriggered = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.forbiddenOpenPositionTriggered = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskItemDataInfo')
    if self.itemId is not None:
      oprot.writeFieldBegin('itemId', TType.STRING, 1)
      oprot.writeString(self.itemId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 2)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.itemValue is not None:
      oprot.writeFieldBegin('itemValue', TType.STRUCT, 4)
      self.itemValue.write(oprot)
      oprot.writeFieldEnd()
    if self.alarmTriggered is not None:
      oprot.writeFieldBegin('alarmTriggered', TType.BOOL, 5)
      oprot.writeBool(self.alarmTriggered)
      oprot.writeFieldEnd()
    if self.forbiddenOpenPositionTriggered is not None:
      oprot.writeFieldBegin('forbiddenOpenPositionTriggered', TType.BOOL, 6)
      oprot.writeBool(self.forbiddenOpenPositionTriggered)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingRiskFrameDataInfo:
  """
  切面数据聚合

  Attributes:
   - globalDataInfos
   - commodityDataInfos
   - contractDataInfos
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'globalDataInfos', (TType.STRUCT,(HostingRiskItemDataInfo, HostingRiskItemDataInfo.thrift_spec)), None, ), # 1
    (2, TType.MAP, 'commodityDataInfos', (TType.I64,None,TType.LIST,(TType.STRUCT,(HostingRiskItemDataInfo, HostingRiskItemDataInfo.thrift_spec))), None, ), # 2
    (3, TType.MAP, 'contractDataInfos', (TType.I64,None,TType.MAP,(TType.I64,None,TType.LIST,(TType.STRUCT,(HostingRiskItemDataInfo, HostingRiskItemDataInfo.thrift_spec)))), None, ), # 3
  )

  def __init__(self, globalDataInfos=None, commodityDataInfos=None, contractDataInfos=None,):
    self.globalDataInfos = globalDataInfos
    self.commodityDataInfos = commodityDataInfos
    self.contractDataInfos = contractDataInfos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.globalDataInfos = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = HostingRiskItemDataInfo()
            _elem53.read(iprot)
            self.globalDataInfos.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.commodityDataInfos = {}
          (_ktype55, _vtype56, _size54 ) = iprot.readMapBegin()
          for _i58 in xrange(_size54):
            _key59 = iprot.readI64();
            _val60 = []
            (_etype64, _size61) = iprot.readListBegin()
            for _i65 in xrange(_size61):
              _elem66 = HostingRiskItemDataInfo()
              _elem66.read(iprot)
              _val60.append(_elem66)
            iprot.readListEnd()
            self.commodityDataInfos[_key59] = _val60
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.contractDataInfos = {}
          (_ktype68, _vtype69, _size67 ) = iprot.readMapBegin()
          for _i71 in xrange(_size67):
            _key72 = iprot.readI64();
            _val73 = {}
            (_ktype75, _vtype76, _size74 ) = iprot.readMapBegin()
            for _i78 in xrange(_size74):
              _key79 = iprot.readI64();
              _val80 = []
              (_etype84, _size81) = iprot.readListBegin()
              for _i85 in xrange(_size81):
                _elem86 = HostingRiskItemDataInfo()
                _elem86.read(iprot)
                _val80.append(_elem86)
              iprot.readListEnd()
              _val73[_key79] = _val80
            iprot.readMapEnd()
            self.contractDataInfos[_key72] = _val73
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingRiskFrameDataInfo')
    if self.globalDataInfos is not None:
      oprot.writeFieldBegin('globalDataInfos', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.globalDataInfos))
      for iter87 in self.globalDataInfos:
        iter87.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.commodityDataInfos is not None:
      oprot.writeFieldBegin('commodityDataInfos', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.LIST, len(self.commodityDataInfos))
      for kiter88,viter89 in self.commodityDataInfos.items():
        oprot.writeI64(kiter88)
        oprot.writeListBegin(TType.STRUCT, len(viter89))
        for iter90 in viter89:
          iter90.write(oprot)
        oprot.writeListEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.contractDataInfos is not None:
      oprot.writeFieldBegin('contractDataInfos', TType.MAP, 3)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.contractDataInfos))
      for kiter91,viter92 in self.contractDataInfos.items():
        oprot.writeI64(kiter91)
        oprot.writeMapBegin(TType.I64, TType.LIST, len(viter92))
        for kiter93,viter94 in viter92.items():
          oprot.writeI64(kiter93)
          oprot.writeListBegin(TType.STRUCT, len(viter94))
          for iter95 in viter94:
            iter95.write(oprot)
          oprot.writeListEnd()
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
