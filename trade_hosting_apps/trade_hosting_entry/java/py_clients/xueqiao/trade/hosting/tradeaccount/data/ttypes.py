#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TradeAccountFund:
  """
  Attributes:
   - tradeAccountId
   - currencyNo
   - currencyChannel
   - credit
   - preBalance
   - deposit
   - withdraw
   - frozenMargin
   - frozenCash
   - currMargin
   - commission
   - closeProfit
   - positionProfit
   - available
   - dynamicBenefit
   - riskRate
   - updateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.STRING, 'currencyNo', None, None, ), # 2
    (3, TType.STRING, 'currencyChannel', None, None, ), # 3
    (4, TType.DOUBLE, 'credit', None, None, ), # 4
    (5, TType.DOUBLE, 'preBalance', None, None, ), # 5
    (6, TType.DOUBLE, 'deposit', None, None, ), # 6
    (7, TType.DOUBLE, 'withdraw', None, None, ), # 7
    (8, TType.DOUBLE, 'frozenMargin', None, None, ), # 8
    (9, TType.DOUBLE, 'frozenCash', None, None, ), # 9
    (10, TType.DOUBLE, 'currMargin', None, None, ), # 10
    (11, TType.DOUBLE, 'commission', None, None, ), # 11
    (12, TType.DOUBLE, 'closeProfit', None, None, ), # 12
    (13, TType.DOUBLE, 'positionProfit', None, None, ), # 13
    (14, TType.DOUBLE, 'available', None, None, ), # 14
    (15, TType.DOUBLE, 'dynamicBenefit', None, None, ), # 15
    (16, TType.DOUBLE, 'riskRate', None, None, ), # 16
    (17, TType.I64, 'updateTimestampMs', None, None, ), # 17
  )

  def __init__(self, tradeAccountId=None, currencyNo=None, currencyChannel=None, credit=None, preBalance=None, deposit=None, withdraw=None, frozenMargin=None, frozenCash=None, currMargin=None, commission=None, closeProfit=None, positionProfit=None, available=None, dynamicBenefit=None, riskRate=None, updateTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.currencyNo = currencyNo
    self.currencyChannel = currencyChannel
    self.credit = credit
    self.preBalance = preBalance
    self.deposit = deposit
    self.withdraw = withdraw
    self.frozenMargin = frozenMargin
    self.frozenCash = frozenCash
    self.currMargin = currMargin
    self.commission = commission
    self.closeProfit = closeProfit
    self.positionProfit = positionProfit
    self.available = available
    self.dynamicBenefit = dynamicBenefit
    self.riskRate = riskRate
    self.updateTimestampMs = updateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currencyNo = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.currencyChannel = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.credit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.preBalance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.deposit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.withdraw = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.frozenMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.frozenCash = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.currMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.commission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.positionProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.DOUBLE:
          self.available = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.dynamicBenefit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.riskRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.updateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountFund')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.currencyNo is not None:
      oprot.writeFieldBegin('currencyNo', TType.STRING, 2)
      oprot.writeString(self.currencyNo)
      oprot.writeFieldEnd()
    if self.currencyChannel is not None:
      oprot.writeFieldBegin('currencyChannel', TType.STRING, 3)
      oprot.writeString(self.currencyChannel)
      oprot.writeFieldEnd()
    if self.credit is not None:
      oprot.writeFieldBegin('credit', TType.DOUBLE, 4)
      oprot.writeDouble(self.credit)
      oprot.writeFieldEnd()
    if self.preBalance is not None:
      oprot.writeFieldBegin('preBalance', TType.DOUBLE, 5)
      oprot.writeDouble(self.preBalance)
      oprot.writeFieldEnd()
    if self.deposit is not None:
      oprot.writeFieldBegin('deposit', TType.DOUBLE, 6)
      oprot.writeDouble(self.deposit)
      oprot.writeFieldEnd()
    if self.withdraw is not None:
      oprot.writeFieldBegin('withdraw', TType.DOUBLE, 7)
      oprot.writeDouble(self.withdraw)
      oprot.writeFieldEnd()
    if self.frozenMargin is not None:
      oprot.writeFieldBegin('frozenMargin', TType.DOUBLE, 8)
      oprot.writeDouble(self.frozenMargin)
      oprot.writeFieldEnd()
    if self.frozenCash is not None:
      oprot.writeFieldBegin('frozenCash', TType.DOUBLE, 9)
      oprot.writeDouble(self.frozenCash)
      oprot.writeFieldEnd()
    if self.currMargin is not None:
      oprot.writeFieldBegin('currMargin', TType.DOUBLE, 10)
      oprot.writeDouble(self.currMargin)
      oprot.writeFieldEnd()
    if self.commission is not None:
      oprot.writeFieldBegin('commission', TType.DOUBLE, 11)
      oprot.writeDouble(self.commission)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 12)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.positionProfit is not None:
      oprot.writeFieldBegin('positionProfit', TType.DOUBLE, 13)
      oprot.writeDouble(self.positionProfit)
      oprot.writeFieldEnd()
    if self.available is not None:
      oprot.writeFieldBegin('available', TType.DOUBLE, 14)
      oprot.writeDouble(self.available)
      oprot.writeFieldEnd()
    if self.dynamicBenefit is not None:
      oprot.writeFieldBegin('dynamicBenefit', TType.DOUBLE, 15)
      oprot.writeDouble(self.dynamicBenefit)
      oprot.writeFieldEnd()
    if self.riskRate is not None:
      oprot.writeFieldBegin('riskRate', TType.DOUBLE, 16)
      oprot.writeDouble(self.riskRate)
      oprot.writeFieldEnd()
    if self.updateTimestampMs is not None:
      oprot.writeFieldBegin('updateTimestampMs', TType.I64, 17)
      oprot.writeI64(self.updateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountFundHisItem:
  """
  Attributes:
   - funds
   - date
   - createTimestampMs
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'funds', (TType.STRUCT,(TradeAccountFund, TradeAccountFund.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'date', None, None, ), # 2
    (3, TType.I64, 'createTimestampMs', None, None, ), # 3
    (4, TType.I64, 'tradeAccountId', None, None, ), # 4
  )

  def __init__(self, funds=None, date=None, createTimestampMs=None, tradeAccountId=None,):
    self.funds = funds
    self.date = date
    self.createTimestampMs = createTimestampMs
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.funds = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TradeAccountFund()
            _elem5.read(iprot)
            self.funds.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.date = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountFundHisItem')
    if self.funds is not None:
      oprot.writeFieldBegin('funds', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.funds))
      for iter6 in self.funds:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.STRING, 2)
      oprot.writeString(self.date)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 3)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 4)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountSettlementInfo:
  """
  Attributes:
   - tradeAccountId
   - settlementDate
   - settlementContent
   - createTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.STRING, 'settlementDate', None, None, ), # 2
    (3, TType.STRING, 'settlementContent', None, None, ), # 3
    (4, TType.I64, 'createTimestampMs', None, None, ), # 4
  )

  def __init__(self, tradeAccountId=None, settlementDate=None, settlementContent=None, createTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.settlementDate = settlementDate
    self.settlementContent = settlementContent
    self.createTimestampMs = createTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.settlementDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.settlementContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountSettlementInfo')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.settlementDate is not None:
      oprot.writeFieldBegin('settlementDate', TType.STRING, 2)
      oprot.writeString(self.settlementDate)
      oprot.writeFieldEnd()
    if self.settlementContent is not None:
      oprot.writeFieldBegin('settlementContent', TType.STRING, 3)
      oprot.writeString(self.settlementContent)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 4)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountNetPositionSummary:
  """
  Attributes:
   - tradeAccountId
   - sledExchangeCode
   - sledCommodityType
   - sledCommodityCode
   - sledCommodityId
   - sledContractCode
   - netVolume
   - averagePrice
   - updateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.STRING, 'sledExchangeCode', None, None, ), # 2
    (3, TType.I16, 'sledCommodityType', None, None, ), # 3
    (4, TType.STRING, 'sledCommodityCode', None, None, ), # 4
    (5, TType.I64, 'sledCommodityId', None, None, ), # 5
    (6, TType.STRING, 'sledContractCode', None, None, ), # 6
    (7, TType.I64, 'netVolume', None, None, ), # 7
    (8, TType.DOUBLE, 'averagePrice', None, None, ), # 8
    None, # 9
    (10, TType.I64, 'updateTimestampMs', None, None, ), # 10
  )

  def __init__(self, tradeAccountId=None, sledExchangeCode=None, sledCommodityType=None, sledCommodityCode=None, sledCommodityId=None, sledContractCode=None, netVolume=None, averagePrice=None, updateTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.sledExchangeCode = sledExchangeCode
    self.sledCommodityType = sledCommodityType
    self.sledCommodityCode = sledCommodityCode
    self.sledCommodityId = sledCommodityId
    self.sledContractCode = sledContractCode
    self.netVolume = netVolume
    self.averagePrice = averagePrice
    self.updateTimestampMs = updateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.sledExchangeCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.sledCommodityType = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sledCommodityCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.sledContractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.netVolume = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.averagePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.updateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountNetPositionSummary')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledExchangeCode is not None:
      oprot.writeFieldBegin('sledExchangeCode', TType.STRING, 2)
      oprot.writeString(self.sledExchangeCode)
      oprot.writeFieldEnd()
    if self.sledCommodityType is not None:
      oprot.writeFieldBegin('sledCommodityType', TType.I16, 3)
      oprot.writeI16(self.sledCommodityType)
      oprot.writeFieldEnd()
    if self.sledCommodityCode is not None:
      oprot.writeFieldBegin('sledCommodityCode', TType.STRING, 4)
      oprot.writeString(self.sledCommodityCode)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 5)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.sledContractCode is not None:
      oprot.writeFieldBegin('sledContractCode', TType.STRING, 6)
      oprot.writeString(self.sledContractCode)
      oprot.writeFieldEnd()
    if self.netVolume is not None:
      oprot.writeFieldBegin('netVolume', TType.I64, 7)
      oprot.writeI64(self.netVolume)
      oprot.writeFieldEnd()
    if self.averagePrice is not None:
      oprot.writeFieldBegin('averagePrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.averagePrice)
      oprot.writeFieldEnd()
    if self.updateTimestampMs is not None:
      oprot.writeFieldBegin('updateTimestampMs', TType.I64, 10)
      oprot.writeI64(self.updateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
