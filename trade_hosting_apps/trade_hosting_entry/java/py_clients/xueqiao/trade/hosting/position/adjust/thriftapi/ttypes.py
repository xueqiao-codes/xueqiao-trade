#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes
import xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Milestone:
  DAILY = 0
  INIT = 1
  TODAY = 2

  _VALUES_TO_NAMES = {
    0: "DAILY",
    1: "INIT",
    2: "TODAY",
  }

  _NAMES_TO_VALUES = {
    "DAILY": 0,
    "INIT": 1,
    "TODAY": 2,
  }

class VerifyStatus:
  WAITING_VERIFY = 0
  DOING_VERIFY = 1
  VERIFY_COMPLETE = 2

  _VALUES_TO_NAMES = {
    0: "WAITING_VERIFY",
    1: "DOING_VERIFY",
    2: "VERIFY_COMPLETE",
  }

  _NAMES_TO_VALUES = {
    "WAITING_VERIFY": 0,
    "DOING_VERIFY": 1,
    "VERIFY_COMPLETE": 2,
  }

class AoType:
  """
  持仓分配时，需要调用的其他服务ao类型
  """
  ASSET = 0
  STATIS = 1

  _VALUES_TO_NAMES = {
    0: "ASSET",
    1: "STATIS",
  }

  _NAMES_TO_VALUES = {
    "ASSET": 0,
    "STATIS": 1,
  }


class PositionManualInput:
  """
  持仓录入明细

  Attributes:
   - inputId
   - subUserId
   - tradeAccountId
   - sledContractId
   - sledCommodityId
   - price
   - volume
   - positionDirection
   - positionTimestampMs
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'inputId', None, None, ), # 1
    (2, TType.I64, 'subUserId', None, None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.I64, 'sledContractId', None, None, ), # 4
    (5, TType.I64, 'sledCommodityId', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.DOUBLE, 'price', None, None, ), # 10
    (11, TType.I32, 'volume', None, None, ), # 11
    (12, TType.I32, 'positionDirection', None, None, ), # 12
    (13, TType.I64, 'positionTimestampMs', None, None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'createTimestampMs', None, None, ), # 30
    (31, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 31
  )

  def __init__(self, inputId=None, subUserId=None, tradeAccountId=None, sledContractId=None, sledCommodityId=None, price=None, volume=None, positionDirection=None, positionTimestampMs=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.inputId = inputId
    self.subUserId = subUserId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledCommodityId = sledCommodityId
    self.price = price
    self.volume = volume
    self.positionDirection = positionDirection
    self.positionTimestampMs = positionTimestampMs
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.positionDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.positionTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionManualInput')
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 1)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I64, 2)
      oprot.writeI64(self.subUserId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 4)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 5)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 10)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 11)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.positionDirection is not None:
      oprot.writeFieldBegin('positionDirection', TType.I32, 12)
      oprot.writeI32(self.positionDirection)
      oprot.writeFieldEnd()
    if self.positionTimestampMs is not None:
      oprot.writeFieldBegin('positionTimestampMs', TType.I64, 13)
      oprot.writeI64(self.positionTimestampMs)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 30)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 31)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionUnassigned:
  """
  未分配持仓

  Attributes:
   - inputId
   - inputSubUserId
   - tradeAccountId
   - sledContractId
   - sledCommodityId
   - price
   - volume
   - positionDirection
   - positionTimestampMs
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'inputId', None, None, ), # 1
    (2, TType.I64, 'inputSubUserId', None, None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.I64, 'sledContractId', None, None, ), # 4
    (5, TType.I64, 'sledCommodityId', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.DOUBLE, 'price', None, None, ), # 10
    (11, TType.I32, 'volume', None, None, ), # 11
    (12, TType.I32, 'positionDirection', None, None, ), # 12
    (13, TType.I64, 'positionTimestampMs', None, None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'createTimestampMs', None, None, ), # 30
    (31, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 31
  )

  def __init__(self, inputId=None, inputSubUserId=None, tradeAccountId=None, sledContractId=None, sledCommodityId=None, price=None, volume=None, positionDirection=None, positionTimestampMs=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.inputId = inputId
    self.inputSubUserId = inputSubUserId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledCommodityId = sledCommodityId
    self.price = price
    self.volume = volume
    self.positionDirection = positionDirection
    self.positionTimestampMs = positionTimestampMs
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.inputSubUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.positionDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.positionTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionUnassigned')
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 1)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.inputSubUserId is not None:
      oprot.writeFieldBegin('inputSubUserId', TType.I64, 2)
      oprot.writeI64(self.inputSubUserId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 4)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 5)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 10)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 11)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.positionDirection is not None:
      oprot.writeFieldBegin('positionDirection', TType.I32, 12)
      oprot.writeI32(self.positionDirection)
      oprot.writeFieldEnd()
    if self.positionTimestampMs is not None:
      oprot.writeFieldBegin('positionTimestampMs', TType.I64, 13)
      oprot.writeI64(self.positionTimestampMs)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 30)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 31)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionAssignOption:
  """
  分配持仓输入信息

  Attributes:
   - inputId
   - subAccountId
   - subUserId
   - volume
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'inputId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'subUserId', None, None, ), # 3
    (4, TType.I32, 'volume', None, None, ), # 4
  )

  def __init__(self, inputId=None, subAccountId=None, subUserId=None, volume=None,):
    self.inputId = inputId
    self.subAccountId = subAccountId
    self.subUserId = subUserId
    self.volume = volume

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionAssignOption')
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 1)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I64, 3)
      oprot.writeI64(self.subUserId)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 4)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionEditLock:
  """
  持仓编辑锁

  Attributes:
   - lockArea
   - subUserId
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'lockArea', None, None, ), # 1
    (2, TType.I64, 'subUserId', None, None, ), # 2
    (3, TType.I64, 'createTimestampMs', None, None, ), # 3
    (4, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 4
  )

  def __init__(self, lockArea=None, subUserId=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.lockArea = lockArea
    self.subUserId = subUserId
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.lockArea = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionEditLock')
    if self.lockArea is not None:
      oprot.writeFieldBegin('lockArea', TType.STRING, 1)
      oprot.writeString(self.lockArea)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I64, 2)
      oprot.writeI64(self.subUserId)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 3)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 4)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionVerify:
  """
  资金账户持仓核对时间点

  Attributes:
   - verifyId
   - tradeAccountId
   - verifyTimestampMs
   - different
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'verifyId', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'verifyTimestampMs', None, None, ), # 3
    (4, TType.BOOL, 'different', None, None, ), # 4
    (5, TType.I64, 'createTimestampMs', None, None, ), # 5
    (6, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 6
  )

  def __init__(self, verifyId=None, tradeAccountId=None, verifyTimestampMs=None, different=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.verifyId = verifyId
    self.tradeAccountId = tradeAccountId
    self.verifyTimestampMs = verifyTimestampMs
    self.different = different
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.verifyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.verifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.different = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionVerify')
    if self.verifyId is not None:
      oprot.writeFieldBegin('verifyId', TType.I64, 1)
      oprot.writeI64(self.verifyId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.verifyTimestampMs is not None:
      oprot.writeFieldBegin('verifyTimestampMs', TType.I64, 3)
      oprot.writeI64(self.verifyTimestampMs)
      oprot.writeFieldEnd()
    if self.different is not None:
      oprot.writeFieldBegin('different', TType.BOOL, 4)
      oprot.writeBool(self.different)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 5)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 6)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionDifference:
  """
  资金账户合约的总净持仓差异

  Attributes:
   - verifyId
   - tradeAccountId
   - sledContractId
   - sledNetPosition
   - upsideNetPosition
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'verifyId', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I32, 'sledNetPosition', None, None, ), # 4
    (5, TType.I32, 'upsideNetPosition', None, None, ), # 5
  )

  def __init__(self, verifyId=None, tradeAccountId=None, sledContractId=None, sledNetPosition=None, upsideNetPosition=None,):
    self.verifyId = verifyId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledNetPosition = sledNetPosition
    self.upsideNetPosition = upsideNetPosition

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.verifyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sledNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.upsideNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionDifference')
    if self.verifyId is not None:
      oprot.writeFieldBegin('verifyId', TType.I64, 1)
      oprot.writeI64(self.verifyId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledNetPosition is not None:
      oprot.writeFieldBegin('sledNetPosition', TType.I32, 4)
      oprot.writeI32(self.sledNetPosition)
      oprot.writeFieldEnd()
    if self.upsideNetPosition is not None:
      oprot.writeFieldBegin('upsideNetPosition', TType.I32, 5)
      oprot.writeI32(self.upsideNetPosition)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PrePositionDifference:
  """
  资金账户上次打点的合约总净持仓差异

  Attributes:
   - dateSec
   - tradeAccountId
   - sledContractId
   - sledNetPosition
   - upsideNetPosition
   - dotTimestampMs
   - createTimestampMs
   - lastmodifyTimestampMs
   - startTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateSec', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I32, 'sledNetPosition', None, None, ), # 4
    (5, TType.I32, 'upsideNetPosition', None, None, ), # 5
    (6, TType.I64, 'dotTimestampMs', None, None, ), # 6
    (7, TType.I64, 'createTimestampMs', None, None, ), # 7
    (8, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 8
    (9, TType.I64, 'startTimestampMs', None, None, ), # 9
  )

  def __init__(self, dateSec=None, tradeAccountId=None, sledContractId=None, sledNetPosition=None, upsideNetPosition=None, dotTimestampMs=None, createTimestampMs=None, lastmodifyTimestampMs=None, startTimestampMs=None,):
    self.dateSec = dateSec
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledNetPosition = sledNetPosition
    self.upsideNetPosition = upsideNetPosition
    self.dotTimestampMs = dotTimestampMs
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.startTimestampMs = startTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateSec = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sledNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.upsideNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.dotTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PrePositionDifference')
    if self.dateSec is not None:
      oprot.writeFieldBegin('dateSec', TType.I64, 1)
      oprot.writeI64(self.dateSec)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledNetPosition is not None:
      oprot.writeFieldBegin('sledNetPosition', TType.I32, 4)
      oprot.writeI32(self.sledNetPosition)
      oprot.writeFieldEnd()
    if self.upsideNetPosition is not None:
      oprot.writeFieldBegin('upsideNetPosition', TType.I32, 5)
      oprot.writeI32(self.upsideNetPosition)
      oprot.writeFieldEnd()
    if self.dotTimestampMs is not None:
      oprot.writeFieldBegin('dotTimestampMs', TType.I64, 6)
      oprot.writeI64(self.dotTimestampMs)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 7)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 8)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 9)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyPositionDifference:
  """
  资金账户合约的每日净持仓差异

  Attributes:
   - dateSec
   - tradeAccountId
   - sledContractId
   - sledNetPosition
   - upsideNetPosition
   - inputNetPosition
   - sumNetPosition
   - persisted
   - dotTimestampMs
   - milestone
   - verifyStatus
   - note
   - createTimestampMs
   - lastmodifyTimestampMs
   - startTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateSec', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I32, 'sledNetPosition', None, None, ), # 4
    (5, TType.I32, 'upsideNetPosition', None, None, ), # 5
    (6, TType.I32, 'inputNetPosition', None, None, ), # 6
    (7, TType.I32, 'sumNetPosition', None, None, ), # 7
    (8, TType.BOOL, 'persisted', None, None, ), # 8
    (9, TType.I64, 'dotTimestampMs', None, None, ), # 9
    (10, TType.I32, 'milestone', None, None, ), # 10
    (11, TType.I32, 'verifyStatus', None, None, ), # 11
    (12, TType.STRING, 'note', None, None, ), # 12
    (13, TType.I64, 'createTimestampMs', None, None, ), # 13
    (14, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 14
    (15, TType.I64, 'startTimestampMs', None, None, ), # 15
  )

  def __init__(self, dateSec=None, tradeAccountId=None, sledContractId=None, sledNetPosition=None, upsideNetPosition=None, inputNetPosition=None, sumNetPosition=None, persisted=None, dotTimestampMs=None, milestone=None, verifyStatus=None, note=None, createTimestampMs=None, lastmodifyTimestampMs=None, startTimestampMs=None,):
    self.dateSec = dateSec
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledNetPosition = sledNetPosition
    self.upsideNetPosition = upsideNetPosition
    self.inputNetPosition = inputNetPosition
    self.sumNetPosition = sumNetPosition
    self.persisted = persisted
    self.dotTimestampMs = dotTimestampMs
    self.milestone = milestone
    self.verifyStatus = verifyStatus
    self.note = note
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.startTimestampMs = startTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateSec = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.sledNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.upsideNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.inputNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sumNetPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.persisted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.dotTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.milestone = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.verifyStatus = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.note = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyPositionDifference')
    if self.dateSec is not None:
      oprot.writeFieldBegin('dateSec', TType.I64, 1)
      oprot.writeI64(self.dateSec)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledNetPosition is not None:
      oprot.writeFieldBegin('sledNetPosition', TType.I32, 4)
      oprot.writeI32(self.sledNetPosition)
      oprot.writeFieldEnd()
    if self.upsideNetPosition is not None:
      oprot.writeFieldBegin('upsideNetPosition', TType.I32, 5)
      oprot.writeI32(self.upsideNetPosition)
      oprot.writeFieldEnd()
    if self.inputNetPosition is not None:
      oprot.writeFieldBegin('inputNetPosition', TType.I32, 6)
      oprot.writeI32(self.inputNetPosition)
      oprot.writeFieldEnd()
    if self.sumNetPosition is not None:
      oprot.writeFieldBegin('sumNetPosition', TType.I32, 7)
      oprot.writeI32(self.sumNetPosition)
      oprot.writeFieldEnd()
    if self.persisted is not None:
      oprot.writeFieldBegin('persisted', TType.BOOL, 8)
      oprot.writeBool(self.persisted)
      oprot.writeFieldEnd()
    if self.dotTimestampMs is not None:
      oprot.writeFieldBegin('dotTimestampMs', TType.I64, 9)
      oprot.writeI64(self.dotTimestampMs)
      oprot.writeFieldEnd()
    if self.milestone is not None:
      oprot.writeFieldBegin('milestone', TType.I32, 10)
      oprot.writeI32(self.milestone)
      oprot.writeFieldEnd()
    if self.verifyStatus is not None:
      oprot.writeFieldBegin('verifyStatus', TType.I32, 11)
      oprot.writeI32(self.verifyStatus)
      oprot.writeFieldEnd()
    if self.note is not None:
      oprot.writeFieldBegin('note', TType.STRING, 12)
      oprot.writeString(self.note)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 13)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 14)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 15)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqDailyPositionDifferenceOption:
  """
  Attributes:
   - dateSec
   - tradeAccountId
   - sledContractId
   - startDateTimestampMs
   - endDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateSec', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I64, 'startDateTimestampMs', None, None, ), # 4
    (5, TType.I64, 'endDateTimestampMs', None, None, ), # 5
  )

  def __init__(self, dateSec=None, tradeAccountId=None, sledContractId=None, startDateTimestampMs=None, endDateTimestampMs=None,):
    self.dateSec = dateSec
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.startDateTimestampMs = startDateTimestampMs
    self.endDateTimestampMs = endDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateSec = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqDailyPositionDifferenceOption')
    if self.dateSec is not None:
      oprot.writeFieldBegin('dateSec', TType.I64, 1)
      oprot.writeI64(self.dateSec)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.startDateTimestampMs is not None:
      oprot.writeFieldBegin('startDateTimestampMs', TType.I64, 4)
      oprot.writeI64(self.startDateTimestampMs)
      oprot.writeFieldEnd()
    if self.endDateTimestampMs is not None:
      oprot.writeFieldBegin('endDateTimestampMs', TType.I64, 5)
      oprot.writeI64(self.endDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DailyPositionDifferencePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(DailyPositionDifference, DailyPositionDifference.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = DailyPositionDifference()
            _elem5.read(iprot)
            self.page.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DailyPositionDifferencePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter6 in self.page:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionAssignTask:
  """
  持仓分配时，需要添加同步调用任务，用于持仓分配影响到其他服务时，确保成功调用

  Attributes:
   - taskId
   - positionAssigned
   - aoType
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'taskId', None, None, ), # 1
    (2, TType.STRUCT, 'positionAssigned', (xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned, xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned.thrift_spec), None, ), # 2
    (3, TType.I32, 'aoType', None, None, ), # 3
    None, # 4
    (5, TType.I64, 'createTimestampMs', None, None, ), # 5
    (6, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 6
  )

  def __init__(self, taskId=None, positionAssigned=None, aoType=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.taskId = taskId
    self.positionAssigned = positionAssigned
    self.aoType = aoType
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.taskId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.positionAssigned = xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned()
          self.positionAssigned.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.aoType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionAssignTask')
    if self.taskId is not None:
      oprot.writeFieldBegin('taskId', TType.I64, 1)
      oprot.writeI64(self.taskId)
      oprot.writeFieldEnd()
    if self.positionAssigned is not None:
      oprot.writeFieldBegin('positionAssigned', TType.STRUCT, 2)
      self.positionAssigned.write(oprot)
      oprot.writeFieldEnd()
    if self.aoType is not None:
      oprot.writeFieldBegin('aoType', TType.I32, 3)
      oprot.writeI32(self.aoType)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 5)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 6)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqPositionAssignedOption:
  """
  查询持仓分配明细

  Attributes:
   - subAccountId
   - inputId
   - tradeAccountId
   - subUserId
   - sledContractId
   - assignStartTimestamp
   - assignEndTimestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'inputId', None, None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.I64, 'subUserId', None, None, ), # 4
    (5, TType.I64, 'sledContractId', None, None, ), # 5
    (6, TType.I64, 'assignStartTimestamp', None, None, ), # 6
    (7, TType.I64, 'assignEndTimestamp', None, None, ), # 7
  )

  def __init__(self, subAccountId=None, inputId=None, tradeAccountId=None, subUserId=None, sledContractId=None, assignStartTimestamp=None, assignEndTimestamp=None,):
    self.subAccountId = subAccountId
    self.inputId = inputId
    self.tradeAccountId = tradeAccountId
    self.subUserId = subUserId
    self.sledContractId = sledContractId
    self.assignStartTimestamp = assignStartTimestamp
    self.assignEndTimestamp = assignEndTimestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.subUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.assignStartTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.assignEndTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqPositionAssignedOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 2)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I64, 4)
      oprot.writeI64(self.subUserId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 5)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.assignStartTimestamp is not None:
      oprot.writeFieldBegin('assignStartTimestamp', TType.I64, 6)
      oprot.writeI64(self.assignStartTimestamp)
      oprot.writeFieldEnd()
    if self.assignEndTimestamp is not None:
      oprot.writeFieldBegin('assignEndTimestamp', TType.I64, 7)
      oprot.writeI64(self.assignEndTimestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionVerifyPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(PositionVerify, PositionVerify.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = PositionVerify()
            _elem12.read(iprot)
            self.page.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionVerifyPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter13 in self.page:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionUnassignedPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(PositionUnassigned, PositionUnassigned.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = PositionUnassigned()
            _elem19.read(iprot)
            self.page.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionUnassignedPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter20 in self.page:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionManualInputPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(PositionManualInput, PositionManualInput.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = PositionManualInput()
            _elem26.read(iprot)
            self.page.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionManualInputPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter27 in self.page:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ManualInputPositionResp:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ManualInputPositionResp')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqPositionUnassignedOption:
  """
  查询未分配持仓明细
  时间条件：大于 startTradeTimestamp, 小于 endTradeTimestamp
  所有option使用逻辑与(AND)操作

  Attributes:
   - manualInputUserId
   - inputId
   - tradeAccountId
   - sledContractId
   - positionDirection
   - startTradeTimestampMs
   - endTradeTimestampMs
   - startInputTimestampMs
   - endInputTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'manualInputUserId', None, None, ), # 1
    (2, TType.I64, 'inputId', None, None, ), # 2
    (3, TType.I64, 'tradeAccountId', None, None, ), # 3
    (4, TType.I64, 'sledContractId', None, None, ), # 4
    (5, TType.I32, 'positionDirection', None, None, ), # 5
    (6, TType.I64, 'startTradeTimestampMs', None, None, ), # 6
    (7, TType.I64, 'endTradeTimestampMs', None, None, ), # 7
    (8, TType.I64, 'startInputTimestampMs', None, None, ), # 8
    (9, TType.I64, 'endInputTimestampMs', None, None, ), # 9
  )

  def __init__(self, manualInputUserId=None, inputId=None, tradeAccountId=None, sledContractId=None, positionDirection=None, startTradeTimestampMs=None, endTradeTimestampMs=None, startInputTimestampMs=None, endInputTimestampMs=None,):
    self.manualInputUserId = manualInputUserId
    self.inputId = inputId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.positionDirection = positionDirection
    self.startTradeTimestampMs = startTradeTimestampMs
    self.endTradeTimestampMs = endTradeTimestampMs
    self.startInputTimestampMs = startInputTimestampMs
    self.endInputTimestampMs = endInputTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.manualInputUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.positionDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.startTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.endTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.startInputTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.endInputTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqPositionUnassignedOption')
    if self.manualInputUserId is not None:
      oprot.writeFieldBegin('manualInputUserId', TType.I64, 1)
      oprot.writeI64(self.manualInputUserId)
      oprot.writeFieldEnd()
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 2)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 3)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 4)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.positionDirection is not None:
      oprot.writeFieldBegin('positionDirection', TType.I32, 5)
      oprot.writeI32(self.positionDirection)
      oprot.writeFieldEnd()
    if self.startTradeTimestampMs is not None:
      oprot.writeFieldBegin('startTradeTimestampMs', TType.I64, 6)
      oprot.writeI64(self.startTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.endTradeTimestampMs is not None:
      oprot.writeFieldBegin('endTradeTimestampMs', TType.I64, 7)
      oprot.writeI64(self.endTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.startInputTimestampMs is not None:
      oprot.writeFieldBegin('startInputTimestampMs', TType.I64, 8)
      oprot.writeI64(self.startInputTimestampMs)
      oprot.writeFieldEnd()
    if self.endInputTimestampMs is not None:
      oprot.writeFieldBegin('endInputTimestampMs', TType.I64, 9)
      oprot.writeI64(self.endInputTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqPositionManualInputOption:
  """
  录入持仓明细查询条件
  时间条件：大于 startTradeTimestamp, 小于 endTradeTimestamp
  所有option使用逻辑与(AND)操作

  Attributes:
   - tradeAccountId
   - subUserId
   - sledContractId
   - startTradeTimestampMs
   - endTradeTimestampMs
   - inputId
   - subAccountId
   - assignSubUserId
   - positionDirection
   - startInputTimestampMs
   - endInputTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.I64, 'subUserId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I64, 'startTradeTimestampMs', None, None, ), # 4
    (5, TType.I64, 'endTradeTimestampMs', None, None, ), # 5
    (6, TType.I64, 'inputId', None, None, ), # 6
    (7, TType.I64, 'subAccountId', None, None, ), # 7
    (8, TType.I64, 'assignSubUserId', None, None, ), # 8
    (9, TType.I32, 'positionDirection', None, None, ), # 9
    (10, TType.I64, 'startInputTimestampMs', None, None, ), # 10
    (11, TType.I64, 'endInputTimestampMs', None, None, ), # 11
  )

  def __init__(self, tradeAccountId=None, subUserId=None, sledContractId=None, startTradeTimestampMs=None, endTradeTimestampMs=None, inputId=None, subAccountId=None, assignSubUserId=None, positionDirection=None, startInputTimestampMs=None, endInputTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.subUserId = subUserId
    self.sledContractId = sledContractId
    self.startTradeTimestampMs = startTradeTimestampMs
    self.endTradeTimestampMs = endTradeTimestampMs
    self.inputId = inputId
    self.subAccountId = subAccountId
    self.assignSubUserId = assignSubUserId
    self.positionDirection = positionDirection
    self.startInputTimestampMs = startInputTimestampMs
    self.endInputTimestampMs = endInputTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.assignSubUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.positionDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.startInputTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.endInputTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqPositionManualInputOption')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I64, 2)
      oprot.writeI64(self.subUserId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.startTradeTimestampMs is not None:
      oprot.writeFieldBegin('startTradeTimestampMs', TType.I64, 4)
      oprot.writeI64(self.startTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.endTradeTimestampMs is not None:
      oprot.writeFieldBegin('endTradeTimestampMs', TType.I64, 5)
      oprot.writeI64(self.endTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 6)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 7)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.assignSubUserId is not None:
      oprot.writeFieldBegin('assignSubUserId', TType.I64, 8)
      oprot.writeI64(self.assignSubUserId)
      oprot.writeFieldEnd()
    if self.positionDirection is not None:
      oprot.writeFieldBegin('positionDirection', TType.I32, 9)
      oprot.writeI32(self.positionDirection)
      oprot.writeFieldEnd()
    if self.startInputTimestampMs is not None:
      oprot.writeFieldBegin('startInputTimestampMs', TType.I64, 10)
      oprot.writeI64(self.startInputTimestampMs)
      oprot.writeFieldEnd()
    if self.endInputTimestampMs is not None:
      oprot.writeFieldBegin('endInputTimestampMs', TType.I64, 11)
      oprot.writeI64(self.endInputTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqPositionVerifyOption:
  """
  Attributes:
   - verifyId
   - tradeAccountId
   - startVerifyTimestampMs
   - endVerifyTimestampMs
   - latest
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'verifyId', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'startVerifyTimestampMs', None, None, ), # 3
    (4, TType.I64, 'endVerifyTimestampMs', None, None, ), # 4
    (5, TType.BOOL, 'latest', None, None, ), # 5
    (6, TType.I64, 'sledContractId', None, None, ), # 6
  )

  def __init__(self, verifyId=None, tradeAccountId=None, startVerifyTimestampMs=None, endVerifyTimestampMs=None, latest=None, sledContractId=None,):
    self.verifyId = verifyId
    self.tradeAccountId = tradeAccountId
    self.startVerifyTimestampMs = startVerifyTimestampMs
    self.endVerifyTimestampMs = endVerifyTimestampMs
    self.latest = latest
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.verifyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startVerifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endVerifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.latest = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqPositionVerifyOption')
    if self.verifyId is not None:
      oprot.writeFieldBegin('verifyId', TType.I64, 1)
      oprot.writeI64(self.verifyId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.startVerifyTimestampMs is not None:
      oprot.writeFieldBegin('startVerifyTimestampMs', TType.I64, 3)
      oprot.writeI64(self.startVerifyTimestampMs)
      oprot.writeFieldEnd()
    if self.endVerifyTimestampMs is not None:
      oprot.writeFieldBegin('endVerifyTimestampMs', TType.I64, 4)
      oprot.writeI64(self.endVerifyTimestampMs)
      oprot.writeFieldEnd()
    if self.latest is not None:
      oprot.writeFieldBegin('latest', TType.BOOL, 5)
      oprot.writeBool(self.latest)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 6)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqPositionDifferenceOption:
  """
  Attributes:
   - verifyId
   - tradeAccountId
   - sledContractId
   - startVerifyTimestampMs
   - endVerifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'verifyId', None, None, ), # 1
    (2, TType.I64, 'tradeAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I64, 'startVerifyTimestampMs', None, None, ), # 4
    (5, TType.I64, 'endVerifyTimestampMs', None, None, ), # 5
  )

  def __init__(self, verifyId=None, tradeAccountId=None, sledContractId=None, startVerifyTimestampMs=None, endVerifyTimestampMs=None,):
    self.verifyId = verifyId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.startVerifyTimestampMs = startVerifyTimestampMs
    self.endVerifyTimestampMs = endVerifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.verifyId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.startVerifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.endVerifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqPositionDifferenceOption')
    if self.verifyId is not None:
      oprot.writeFieldBegin('verifyId', TType.I64, 1)
      oprot.writeI64(self.verifyId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 2)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.startVerifyTimestampMs is not None:
      oprot.writeFieldBegin('startVerifyTimestampMs', TType.I64, 4)
      oprot.writeI64(self.startVerifyTimestampMs)
      oprot.writeFieldEnd()
    if self.endVerifyTimestampMs is not None:
      oprot.writeFieldBegin('endVerifyTimestampMs', TType.I64, 5)
      oprot.writeI64(self.endVerifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionDifferencePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(PositionDifference, PositionDifference.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = PositionDifference()
            _elem33.read(iprot)
            self.page.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionDifferencePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter34 in self.page:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionAssignedPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned, xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned()
            _elem40.read(iprot)
            self.page.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionAssignedPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter41 in self.page:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettlementTimeRelateSledReqTime:
  """
  Attributes:
   - tradeAccountId
   - settlementDate
   - startTimestampMs
   - endTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.STRING, 'settlementDate', None, None, ), # 2
    (3, TType.I64, 'startTimestampMs', None, None, ), # 3
    (4, TType.I64, 'endTimestampMs', None, None, ), # 4
  )

  def __init__(self, tradeAccountId=None, settlementDate=None, startTimestampMs=None, endTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.settlementDate = settlementDate
    self.startTimestampMs = startTimestampMs
    self.endTimestampMs = endTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.settlementDate = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettlementTimeRelateSledReqTime')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.settlementDate is not None:
      oprot.writeFieldBegin('settlementDate', TType.STRING, 2)
      oprot.writeString(self.settlementDate)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 3)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    if self.endTimestampMs is not None:
      oprot.writeFieldBegin('endTimestampMs', TType.I64, 4)
      oprot.writeI64(self.endTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
