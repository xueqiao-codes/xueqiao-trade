#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


TradeHostingPositionFee_SERVICE_KEY=722
class Iface:
  def clearAll(self, platformArgs):
    """
    Parameters:
     - platformArgs
    """
    pass

  def setGeneralMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    pass

  def setGeneralCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    pass

  def addSpecMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    pass

  def addSpecCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    pass

  def updateSpecMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    pass

  def updateSpecCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    pass

  def deleteSpecMarginSetting(self, platformArgs, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - commodityId
    """
    pass

  def deleteSpecCommissionSetting(self, platformArgs, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - commodityId
    """
    pass

  def queryXQGeneralMarginSettings(self, platformArgs, subAccountId):
    """
    Parameters:
     - platformArgs
     - subAccountId
    """
    pass

  def queryXQGeneralCommissionSettings(self, platformArgs, subAccountId):
    """
    Parameters:
     - platformArgs
     - subAccountId
    """
    pass

  def queryXQSpecMarginSettingPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryXQSpecCommissionSettingPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryUpsideContractMarginPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryUpsideContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryXQContractMarginPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryXQContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    pass

  def queryPositionFee(self, platformArgs, subAccountId, contractId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - contractId
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def clearAll(self, platformArgs):
    """
    Parameters:
     - platformArgs
    """
    self.send_clearAll(platformArgs)
    self.recv_clearAll()

  def send_clearAll(self, platformArgs):
    self._oprot.writeMessageBegin('clearAll', TMessageType.CALL, self._seqid)
    args = clearAll_args()
    args.platformArgs = platformArgs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearAll(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = clearAll_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def setGeneralMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    self.send_setGeneralMarginSetting(platformArgs, marginSettings)
    self.recv_setGeneralMarginSetting()

  def send_setGeneralMarginSetting(self, platformArgs, marginSettings):
    self._oprot.writeMessageBegin('setGeneralMarginSetting', TMessageType.CALL, self._seqid)
    args = setGeneralMarginSetting_args()
    args.platformArgs = platformArgs
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setGeneralMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setGeneralMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def setGeneralCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    self.send_setGeneralCommissionSetting(platformArgs, commissionSettings)
    self.recv_setGeneralCommissionSetting()

  def send_setGeneralCommissionSetting(self, platformArgs, commissionSettings):
    self._oprot.writeMessageBegin('setGeneralCommissionSetting', TMessageType.CALL, self._seqid)
    args = setGeneralCommissionSetting_args()
    args.platformArgs = platformArgs
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_setGeneralCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = setGeneralCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def addSpecMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    self.send_addSpecMarginSetting(platformArgs, marginSettings)
    self.recv_addSpecMarginSetting()

  def send_addSpecMarginSetting(self, platformArgs, marginSettings):
    self._oprot.writeMessageBegin('addSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = addSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def addSpecCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    self.send_addSpecCommissionSetting(platformArgs, commissionSettings)
    self.recv_addSpecCommissionSetting()

  def send_addSpecCommissionSetting(self, platformArgs, commissionSettings):
    self._oprot.writeMessageBegin('addSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = addSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def updateSpecMarginSetting(self, platformArgs, marginSettings):
    """
    Parameters:
     - platformArgs
     - marginSettings
    """
    self.send_updateSpecMarginSetting(platformArgs, marginSettings)
    self.recv_updateSpecMarginSetting()

  def send_updateSpecMarginSetting(self, platformArgs, marginSettings):
    self._oprot.writeMessageBegin('updateSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = updateSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.marginSettings = marginSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def updateSpecCommissionSetting(self, platformArgs, commissionSettings):
    """
    Parameters:
     - platformArgs
     - commissionSettings
    """
    self.send_updateSpecCommissionSetting(platformArgs, commissionSettings)
    self.recv_updateSpecCommissionSetting()

  def send_updateSpecCommissionSetting(self, platformArgs, commissionSettings):
    self._oprot.writeMessageBegin('updateSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = updateSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.commissionSettings = commissionSettings
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteSpecMarginSetting(self, platformArgs, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - commodityId
    """
    self.send_deleteSpecMarginSetting(platformArgs, subAccountId, commodityId)
    self.recv_deleteSpecMarginSetting()

  def send_deleteSpecMarginSetting(self, platformArgs, subAccountId, commodityId):
    self._oprot.writeMessageBegin('deleteSpecMarginSetting', TMessageType.CALL, self._seqid)
    args = deleteSpecMarginSetting_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.commodityId = commodityId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteSpecMarginSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteSpecMarginSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteSpecCommissionSetting(self, platformArgs, subAccountId, commodityId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - commodityId
    """
    self.send_deleteSpecCommissionSetting(platformArgs, subAccountId, commodityId)
    self.recv_deleteSpecCommissionSetting()

  def send_deleteSpecCommissionSetting(self, platformArgs, subAccountId, commodityId):
    self._oprot.writeMessageBegin('deleteSpecCommissionSetting', TMessageType.CALL, self._seqid)
    args = deleteSpecCommissionSetting_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.commodityId = commodityId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteSpecCommissionSetting(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteSpecCommissionSetting_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def queryXQGeneralMarginSettings(self, platformArgs, subAccountId):
    """
    Parameters:
     - platformArgs
     - subAccountId
    """
    self.send_queryXQGeneralMarginSettings(platformArgs, subAccountId)
    return self.recv_queryXQGeneralMarginSettings()

  def send_queryXQGeneralMarginSettings(self, platformArgs, subAccountId):
    self._oprot.writeMessageBegin('queryXQGeneralMarginSettings', TMessageType.CALL, self._seqid)
    args = queryXQGeneralMarginSettings_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQGeneralMarginSettings(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQGeneralMarginSettings_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQGeneralMarginSettings failed: unknown result");

  def queryXQGeneralCommissionSettings(self, platformArgs, subAccountId):
    """
    Parameters:
     - platformArgs
     - subAccountId
    """
    self.send_queryXQGeneralCommissionSettings(platformArgs, subAccountId)
    return self.recv_queryXQGeneralCommissionSettings()

  def send_queryXQGeneralCommissionSettings(self, platformArgs, subAccountId):
    self._oprot.writeMessageBegin('queryXQGeneralCommissionSettings', TMessageType.CALL, self._seqid)
    args = queryXQGeneralCommissionSettings_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQGeneralCommissionSettings(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQGeneralCommissionSettings_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQGeneralCommissionSettings failed: unknown result");

  def queryXQSpecMarginSettingPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryXQSpecMarginSettingPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryXQSpecMarginSettingPage()

  def send_queryXQSpecMarginSettingPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQSpecMarginSettingPage', TMessageType.CALL, self._seqid)
    args = queryXQSpecMarginSettingPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQSpecMarginSettingPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQSpecMarginSettingPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQSpecMarginSettingPage failed: unknown result");

  def queryXQSpecCommissionSettingPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryXQSpecCommissionSettingPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryXQSpecCommissionSettingPage()

  def send_queryXQSpecCommissionSettingPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQSpecCommissionSettingPage', TMessageType.CALL, self._seqid)
    args = queryXQSpecCommissionSettingPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQSpecCommissionSettingPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQSpecCommissionSettingPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQSpecCommissionSettingPage failed: unknown result");

  def queryUpsideContractMarginPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryUpsideContractMarginPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryUpsideContractMarginPage()

  def send_queryUpsideContractMarginPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryUpsideContractMarginPage', TMessageType.CALL, self._seqid)
    args = queryUpsideContractMarginPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryUpsideContractMarginPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryUpsideContractMarginPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryUpsideContractMarginPage failed: unknown result");

  def queryUpsideContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryUpsideContractCommissionPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryUpsideContractCommissionPage()

  def send_queryUpsideContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryUpsideContractCommissionPage', TMessageType.CALL, self._seqid)
    args = queryUpsideContractCommissionPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryUpsideContractCommissionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryUpsideContractCommissionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryUpsideContractCommissionPage failed: unknown result");

  def queryXQContractMarginPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryXQContractMarginPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryXQContractMarginPage()

  def send_queryXQContractMarginPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQContractMarginPage', TMessageType.CALL, self._seqid)
    args = queryXQContractMarginPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQContractMarginPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQContractMarginPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQContractMarginPage failed: unknown result");

  def queryXQContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOptions
     - pageOption
    """
    self.send_queryXQContractCommissionPage(platformArgs, queryOptions, pageOption)
    return self.recv_queryXQContractCommissionPage()

  def send_queryXQContractCommissionPage(self, platformArgs, queryOptions, pageOption):
    self._oprot.writeMessageBegin('queryXQContractCommissionPage', TMessageType.CALL, self._seqid)
    args = queryXQContractCommissionPage_args()
    args.platformArgs = platformArgs
    args.queryOptions = queryOptions
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryXQContractCommissionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryXQContractCommissionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryXQContractCommissionPage failed: unknown result");

  def queryPositionFee(self, platformArgs, subAccountId, contractId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - contractId
    """
    self.send_queryPositionFee(platformArgs, subAccountId, contractId)
    return self.recv_queryPositionFee()

  def send_queryPositionFee(self, platformArgs, subAccountId, contractId):
    self._oprot.writeMessageBegin('queryPositionFee', TMessageType.CALL, self._seqid)
    args = queryPositionFee_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.contractId = contractId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryPositionFee(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryPositionFee_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryPositionFee failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["clearAll"] = Processor.process_clearAll
    self._processMap["setGeneralMarginSetting"] = Processor.process_setGeneralMarginSetting
    self._processMap["setGeneralCommissionSetting"] = Processor.process_setGeneralCommissionSetting
    self._processMap["addSpecMarginSetting"] = Processor.process_addSpecMarginSetting
    self._processMap["addSpecCommissionSetting"] = Processor.process_addSpecCommissionSetting
    self._processMap["updateSpecMarginSetting"] = Processor.process_updateSpecMarginSetting
    self._processMap["updateSpecCommissionSetting"] = Processor.process_updateSpecCommissionSetting
    self._processMap["deleteSpecMarginSetting"] = Processor.process_deleteSpecMarginSetting
    self._processMap["deleteSpecCommissionSetting"] = Processor.process_deleteSpecCommissionSetting
    self._processMap["queryXQGeneralMarginSettings"] = Processor.process_queryXQGeneralMarginSettings
    self._processMap["queryXQGeneralCommissionSettings"] = Processor.process_queryXQGeneralCommissionSettings
    self._processMap["queryXQSpecMarginSettingPage"] = Processor.process_queryXQSpecMarginSettingPage
    self._processMap["queryXQSpecCommissionSettingPage"] = Processor.process_queryXQSpecCommissionSettingPage
    self._processMap["queryUpsideContractMarginPage"] = Processor.process_queryUpsideContractMarginPage
    self._processMap["queryUpsideContractCommissionPage"] = Processor.process_queryUpsideContractCommissionPage
    self._processMap["queryXQContractMarginPage"] = Processor.process_queryXQContractMarginPage
    self._processMap["queryXQContractCommissionPage"] = Processor.process_queryXQContractCommissionPage
    self._processMap["queryPositionFee"] = Processor.process_queryPositionFee

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_clearAll(self, seqid, iprot, oprot):
    args = clearAll_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearAll_result()
    try:
      self._handler.clearAll(args.platformArgs)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("clearAll", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setGeneralMarginSetting(self, seqid, iprot, oprot):
    args = setGeneralMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setGeneralMarginSetting_result()
    try:
      self._handler.setGeneralMarginSetting(args.platformArgs, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setGeneralMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_setGeneralCommissionSetting(self, seqid, iprot, oprot):
    args = setGeneralCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = setGeneralCommissionSetting_result()
    try:
      self._handler.setGeneralCommissionSetting(args.platformArgs, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("setGeneralCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSpecMarginSetting(self, seqid, iprot, oprot):
    args = addSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSpecMarginSetting_result()
    try:
      self._handler.addSpecMarginSetting(args.platformArgs, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSpecCommissionSetting(self, seqid, iprot, oprot):
    args = addSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSpecCommissionSetting_result()
    try:
      self._handler.addSpecCommissionSetting(args.platformArgs, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("addSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSpecMarginSetting(self, seqid, iprot, oprot):
    args = updateSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSpecMarginSetting_result()
    try:
      self._handler.updateSpecMarginSetting(args.platformArgs, args.marginSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateSpecCommissionSetting(self, seqid, iprot, oprot):
    args = updateSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateSpecCommissionSetting_result()
    try:
      self._handler.updateSpecCommissionSetting(args.platformArgs, args.commissionSettings)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("updateSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteSpecMarginSetting(self, seqid, iprot, oprot):
    args = deleteSpecMarginSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteSpecMarginSetting_result()
    try:
      self._handler.deleteSpecMarginSetting(args.platformArgs, args.subAccountId, args.commodityId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteSpecMarginSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteSpecCommissionSetting(self, seqid, iprot, oprot):
    args = deleteSpecCommissionSetting_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteSpecCommissionSetting_result()
    try:
      self._handler.deleteSpecCommissionSetting(args.platformArgs, args.subAccountId, args.commodityId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteSpecCommissionSetting", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQGeneralMarginSettings(self, seqid, iprot, oprot):
    args = queryXQGeneralMarginSettings_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQGeneralMarginSettings_result()
    try:
      result.success = self._handler.queryXQGeneralMarginSettings(args.platformArgs, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQGeneralMarginSettings", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQGeneralCommissionSettings(self, seqid, iprot, oprot):
    args = queryXQGeneralCommissionSettings_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQGeneralCommissionSettings_result()
    try:
      result.success = self._handler.queryXQGeneralCommissionSettings(args.platformArgs, args.subAccountId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQGeneralCommissionSettings", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQSpecMarginSettingPage(self, seqid, iprot, oprot):
    args = queryXQSpecMarginSettingPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQSpecMarginSettingPage_result()
    try:
      result.success = self._handler.queryXQSpecMarginSettingPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQSpecMarginSettingPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQSpecCommissionSettingPage(self, seqid, iprot, oprot):
    args = queryXQSpecCommissionSettingPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQSpecCommissionSettingPage_result()
    try:
      result.success = self._handler.queryXQSpecCommissionSettingPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQSpecCommissionSettingPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryUpsideContractMarginPage(self, seqid, iprot, oprot):
    args = queryUpsideContractMarginPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryUpsideContractMarginPage_result()
    try:
      result.success = self._handler.queryUpsideContractMarginPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryUpsideContractMarginPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryUpsideContractCommissionPage(self, seqid, iprot, oprot):
    args = queryUpsideContractCommissionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryUpsideContractCommissionPage_result()
    try:
      result.success = self._handler.queryUpsideContractCommissionPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryUpsideContractCommissionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQContractMarginPage(self, seqid, iprot, oprot):
    args = queryXQContractMarginPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQContractMarginPage_result()
    try:
      result.success = self._handler.queryXQContractMarginPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQContractMarginPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryXQContractCommissionPage(self, seqid, iprot, oprot):
    args = queryXQContractCommissionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryXQContractCommissionPage_result()
    try:
      result.success = self._handler.queryXQContractCommissionPage(args.platformArgs, args.queryOptions, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryXQContractCommissionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryPositionFee(self, seqid, iprot, oprot):
    args = queryPositionFee_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryPositionFee_result()
    try:
      result.success = self._handler.queryPositionFee(args.platformArgs, args.subAccountId, args.contractId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryPositionFee", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class clearAll_args:
  """
  Attributes:
   - platformArgs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
  )

  def __init__(self, platformArgs=None,):
    self.platformArgs = platformArgs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearAll_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearAll_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearAll_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'marginSettings', (XQGeneralMarginSettings, XQGeneralMarginSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.marginSettings = XQGeneralMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 2)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'commissionSettings', (XQGeneralCommissionSettings, XQGeneralCommissionSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.commissionSettings = XQGeneralCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 2)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class setGeneralCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('setGeneralCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'marginSettings', (XQSpecMarginSettings, XQSpecMarginSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.marginSettings = XQSpecMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 2)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'commissionSettings', (XQSpecCommissionSettings, XQSpecCommissionSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.commissionSettings = XQSpecCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 2)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - marginSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'marginSettings', (XQSpecMarginSettings, XQSpecMarginSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, marginSettings=None,):
    self.platformArgs = platformArgs
    self.marginSettings = marginSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.marginSettings = XQSpecMarginSettings()
          self.marginSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.marginSettings is not None:
      oprot.writeFieldBegin('marginSettings', TType.STRUCT, 2)
      self.marginSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - commissionSettings
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'commissionSettings', (XQSpecCommissionSettings, XQSpecCommissionSettings.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, commissionSettings=None,):
    self.platformArgs = platformArgs
    self.commissionSettings = commissionSettings

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.commissionSettings = XQSpecCommissionSettings()
          self.commissionSettings.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.commissionSettings is not None:
      oprot.writeFieldBegin('commissionSettings', TType.STRUCT, 2)
      self.commissionSettings.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecMarginSetting_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - commodityId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'commodityId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, subAccountId=None, commodityId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.commodityId = commodityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecMarginSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 3)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecMarginSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecMarginSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecCommissionSetting_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - commodityId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'commodityId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, subAccountId=None, commodityId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.commodityId = commodityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecCommissionSetting_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 3)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpecCommissionSetting_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpecCommissionSetting_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralMarginSettings_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
  )

  def __init__(self, platformArgs=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralMarginSettings_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralMarginSettings_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQGeneralMarginSettings, XQGeneralMarginSettings.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQGeneralMarginSettings()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralMarginSettings_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralCommissionSettings_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
  )

  def __init__(self, platformArgs=None, subAccountId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralCommissionSettings_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQGeneralCommissionSettings_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQGeneralCommissionSettings, XQGeneralCommissionSettings.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQGeneralCommissionSettings()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQGeneralCommissionSettings_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecMarginSettingPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryXQSpecSettingOptions, QueryXQSpecSettingOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryXQSpecSettingOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecMarginSettingPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecMarginSettingPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQSpecMarginSettingPage, XQSpecMarginSettingPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQSpecMarginSettingPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecMarginSettingPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecCommissionSettingPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryXQSpecSettingOptions, QueryXQSpecSettingOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryXQSpecSettingOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecCommissionSettingPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQSpecCommissionSettingPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQSpecCommissionSettingPage, XQSpecCommissionSettingPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQSpecCommissionSettingPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQSpecCommissionSettingPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractMarginPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryUpsidePFeeOptions, QueryUpsidePFeeOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryUpsidePFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractMarginPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractMarginPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UpsideContractMarginPage, UpsideContractMarginPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = UpsideContractMarginPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractMarginPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractCommissionPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryUpsidePFeeOptions, QueryUpsidePFeeOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryUpsidePFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractCommissionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryUpsideContractCommissionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (UpsideContractCommissionPage, UpsideContractCommissionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = UpsideContractCommissionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryUpsideContractCommissionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractMarginPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryXQPFeeOptions, QueryXQPFeeOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryXQPFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractMarginPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractMarginPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQContractMarginPage, XQContractMarginPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQContractMarginPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractMarginPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractCommissionPage_args:
  """
  Attributes:
   - platformArgs
   - queryOptions
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOptions', (QueryXQPFeeOptions, QueryXQPFeeOptions.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOptions=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOptions = queryOptions
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOptions = QueryXQPFeeOptions()
          self.queryOptions.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractCommissionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOptions is not None:
      oprot.writeFieldBegin('queryOptions', TType.STRUCT, 2)
      self.queryOptions.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryXQContractCommissionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (XQContractCommissionPage, XQContractCommissionPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = XQContractCommissionPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryXQContractCommissionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryPositionFee_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - contractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'contractId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, subAccountId=None, contractId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.contractId = contractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.contractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryPositionFee_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractId is not None:
      oprot.writeFieldBegin('contractId', TType.I64, 3)
      oprot.writeI64(self.contractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryPositionFee_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (PositionFee, PositionFee.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = PositionFee()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryPositionFee_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
