#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class FeeCalculateType:
  FR_DELTA_ADD = 0
  FR_DELTA_SUB = 1

  _VALUES_TO_NAMES = {
    0: "FR_DELTA_ADD",
    1: "FR_DELTA_SUB",
  }

  _NAMES_TO_VALUES = {
    "FR_DELTA_ADD": 0,
    "FR_DELTA_SUB": 1,
  }

class UpsideDataType:
  UDT_NO_DATA = 0
  UDT_COMMODITY = 1
  UDT_CONTRACT = 2

  _VALUES_TO_NAMES = {
    0: "UDT_NO_DATA",
    1: "UDT_COMMODITY",
    2: "UDT_CONTRACT",
  }

  _NAMES_TO_VALUES = {
    "UDT_NO_DATA": 0,
    "UDT_COMMODITY": 1,
    "UDT_CONTRACT": 2,
  }

class XQSettingsDataType:
  SDT_NO_DATA = 0
  SDT_GENERAL = 1
  SDT_COMMODITY = 2

  _VALUES_TO_NAMES = {
    0: "SDT_NO_DATA",
    1: "SDT_GENERAL",
    2: "SDT_COMMODITY",
  }

  _NAMES_TO_VALUES = {
    "SDT_NO_DATA": 0,
    "SDT_GENERAL": 1,
    "SDT_COMMODITY": 2,
  }


class MarginInfo:
  """
  Attributes:
   - longMarginRatioByMoney
   - longMarginRatioByVolume
   - shortMarginRatioByMoney
   - shortMarginRatioByVolume
   - currency
   - currencyGroup
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'longMarginRatioByMoney', None, None, ), # 1
    (2, TType.DOUBLE, 'longMarginRatioByVolume', None, None, ), # 2
    (3, TType.DOUBLE, 'shortMarginRatioByMoney', None, None, ), # 3
    (4, TType.DOUBLE, 'shortMarginRatioByVolume', None, None, ), # 4
    (5, TType.STRING, 'currency', None, None, ), # 5
    (6, TType.STRING, 'currencyGroup', None, None, ), # 6
  )

  def __init__(self, longMarginRatioByMoney=None, longMarginRatioByVolume=None, shortMarginRatioByMoney=None, shortMarginRatioByVolume=None, currency=None, currencyGroup=None,):
    self.longMarginRatioByMoney = longMarginRatioByMoney
    self.longMarginRatioByVolume = longMarginRatioByVolume
    self.shortMarginRatioByMoney = shortMarginRatioByMoney
    self.shortMarginRatioByVolume = shortMarginRatioByVolume
    self.currency = currency
    self.currencyGroup = currencyGroup

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.longMarginRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longMarginRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.shortMarginRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.shortMarginRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.currencyGroup = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MarginInfo')
    if self.longMarginRatioByMoney is not None:
      oprot.writeFieldBegin('longMarginRatioByMoney', TType.DOUBLE, 1)
      oprot.writeDouble(self.longMarginRatioByMoney)
      oprot.writeFieldEnd()
    if self.longMarginRatioByVolume is not None:
      oprot.writeFieldBegin('longMarginRatioByVolume', TType.DOUBLE, 2)
      oprot.writeDouble(self.longMarginRatioByVolume)
      oprot.writeFieldEnd()
    if self.shortMarginRatioByMoney is not None:
      oprot.writeFieldBegin('shortMarginRatioByMoney', TType.DOUBLE, 3)
      oprot.writeDouble(self.shortMarginRatioByMoney)
      oprot.writeFieldEnd()
    if self.shortMarginRatioByVolume is not None:
      oprot.writeFieldBegin('shortMarginRatioByVolume', TType.DOUBLE, 4)
      oprot.writeDouble(self.shortMarginRatioByVolume)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 5)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.currencyGroup is not None:
      oprot.writeFieldBegin('currencyGroup', TType.STRING, 6)
      oprot.writeString(self.currencyGroup)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommissionInfo:
  """
  Attributes:
   - openRatioByMoney
   - openRatioByVolume
   - closeRatioByMoney
   - closeRatioByVolume
   - closeTodayRatioByMoney
   - closeTodayRatioByVolume
   - currency
   - currencyGroup
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'openRatioByMoney', None, None, ), # 1
    (2, TType.DOUBLE, 'openRatioByVolume', None, None, ), # 2
    (3, TType.DOUBLE, 'closeRatioByMoney', None, None, ), # 3
    (4, TType.DOUBLE, 'closeRatioByVolume', None, None, ), # 4
    (5, TType.DOUBLE, 'closeTodayRatioByMoney', None, None, ), # 5
    (6, TType.DOUBLE, 'closeTodayRatioByVolume', None, None, ), # 6
    (7, TType.STRING, 'currency', None, None, ), # 7
    (8, TType.STRING, 'currencyGroup', None, None, ), # 8
  )

  def __init__(self, openRatioByMoney=None, openRatioByVolume=None, closeRatioByMoney=None, closeRatioByVolume=None, closeTodayRatioByMoney=None, closeTodayRatioByVolume=None, currency=None, currencyGroup=None,):
    self.openRatioByMoney = openRatioByMoney
    self.openRatioByVolume = openRatioByVolume
    self.closeRatioByMoney = closeRatioByMoney
    self.closeRatioByVolume = closeRatioByVolume
    self.closeTodayRatioByMoney = closeTodayRatioByMoney
    self.closeTodayRatioByVolume = closeTodayRatioByVolume
    self.currency = currency
    self.currencyGroup = currencyGroup

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.openRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.openRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.closeRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.closeRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.closeTodayRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.closeTodayRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.currencyGroup = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommissionInfo')
    if self.openRatioByMoney is not None:
      oprot.writeFieldBegin('openRatioByMoney', TType.DOUBLE, 1)
      oprot.writeDouble(self.openRatioByMoney)
      oprot.writeFieldEnd()
    if self.openRatioByVolume is not None:
      oprot.writeFieldBegin('openRatioByVolume', TType.DOUBLE, 2)
      oprot.writeDouble(self.openRatioByVolume)
      oprot.writeFieldEnd()
    if self.closeRatioByMoney is not None:
      oprot.writeFieldBegin('closeRatioByMoney', TType.DOUBLE, 3)
      oprot.writeDouble(self.closeRatioByMoney)
      oprot.writeFieldEnd()
    if self.closeRatioByVolume is not None:
      oprot.writeFieldBegin('closeRatioByVolume', TType.DOUBLE, 4)
      oprot.writeDouble(self.closeRatioByVolume)
      oprot.writeFieldEnd()
    if self.closeTodayRatioByMoney is not None:
      oprot.writeFieldBegin('closeTodayRatioByMoney', TType.DOUBLE, 5)
      oprot.writeDouble(self.closeTodayRatioByMoney)
      oprot.writeFieldEnd()
    if self.closeTodayRatioByVolume is not None:
      oprot.writeFieldBegin('closeTodayRatioByVolume', TType.DOUBLE, 6)
      oprot.writeDouble(self.closeTodayRatioByVolume)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 7)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.currencyGroup is not None:
      oprot.writeFieldBegin('currencyGroup', TType.STRING, 8)
      oprot.writeString(self.currencyGroup)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQGeneralMarginSettings:
  """
  Attributes:
   - subAccountId
   - type
   - marginDelta
   - isSync
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    None, # 2
    None, # 3
    (4, TType.I32, 'type', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'marginDelta', (MarginInfo, MarginInfo.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, type=None, marginDelta=None, isSync=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.type = type
    self.marginDelta = marginDelta
    self.isSync = isSync
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.marginDelta = MarginInfo()
          self.marginDelta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQGeneralMarginSettings')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.marginDelta is not None:
      oprot.writeFieldBegin('marginDelta', TType.STRUCT, 10)
      self.marginDelta.write(oprot)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQGeneralCommissionSettings:
  """
  Attributes:
   - subAccountId
   - type
   - commissionDelta
   - isSync
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    None, # 2
    None, # 3
    (4, TType.I32, 'type', None, None, ), # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'commissionDelta', (CommissionInfo, CommissionInfo.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, type=None, commissionDelta=None, isSync=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.type = type
    self.commissionDelta = commissionDelta
    self.isSync = isSync
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.commissionDelta = CommissionInfo()
          self.commissionDelta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQGeneralCommissionSettings')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.commissionDelta is not None:
      oprot.writeFieldBegin('commissionDelta', TType.STRUCT, 10)
      self.commissionDelta.write(oprot)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommodityInfo:
  """
  Attributes:
   - exchangeMic
   - commodityEngAcronym
   - commodityCnAcronym
   - exchangeAcronym
   - exchangeCnAcronym
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'exchangeMic', None, None, ), # 1
    None, # 2
    (3, TType.STRING, 'commodityEngAcronym', None, None, ), # 3
    (4, TType.STRING, 'commodityCnAcronym', None, None, ), # 4
    (5, TType.STRING, 'exchangeAcronym', None, None, ), # 5
    (6, TType.STRING, 'exchangeCnAcronym', None, None, ), # 6
  )

  def __init__(self, exchangeMic=None, commodityEngAcronym=None, commodityCnAcronym=None, exchangeAcronym=None, exchangeCnAcronym=None,):
    self.exchangeMic = exchangeMic
    self.commodityEngAcronym = commodityEngAcronym
    self.commodityCnAcronym = commodityCnAcronym
    self.exchangeAcronym = exchangeAcronym
    self.exchangeCnAcronym = exchangeCnAcronym

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.commodityEngAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.commodityCnAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.exchangeAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.exchangeCnAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommodityInfo')
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 1)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.commodityEngAcronym is not None:
      oprot.writeFieldBegin('commodityEngAcronym', TType.STRING, 3)
      oprot.writeString(self.commodityEngAcronym)
      oprot.writeFieldEnd()
    if self.commodityCnAcronym is not None:
      oprot.writeFieldBegin('commodityCnAcronym', TType.STRING, 4)
      oprot.writeString(self.commodityCnAcronym)
      oprot.writeFieldEnd()
    if self.exchangeAcronym is not None:
      oprot.writeFieldBegin('exchangeAcronym', TType.STRING, 5)
      oprot.writeString(self.exchangeAcronym)
      oprot.writeFieldEnd()
    if self.exchangeCnAcronym is not None:
      oprot.writeFieldBegin('exchangeCnAcronym', TType.STRING, 6)
      oprot.writeString(self.exchangeCnAcronym)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQSpecMarginSettings:
  """
  Attributes:
   - subAccountId
   - commodityId
   - commodityInfo
   - type
   - marginDelta
   - isSync
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'commodityId', None, None, ), # 2
    (3, TType.STRUCT, 'commodityInfo', (CommodityInfo, CommodityInfo.thrift_spec), None, ), # 3
    None, # 4
    (5, TType.I32, 'type', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'marginDelta', (MarginInfo, MarginInfo.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, commodityId=None, commodityInfo=None, type=None, marginDelta=None, isSync=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.commodityId = commodityId
    self.commodityInfo = commodityInfo
    self.type = type
    self.marginDelta = marginDelta
    self.isSync = isSync
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.commodityInfo = CommodityInfo()
          self.commodityInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.marginDelta = MarginInfo()
          self.marginDelta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQSpecMarginSettings')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 2)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    if self.commodityInfo is not None:
      oprot.writeFieldBegin('commodityInfo', TType.STRUCT, 3)
      self.commodityInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.marginDelta is not None:
      oprot.writeFieldBegin('marginDelta', TType.STRUCT, 10)
      self.marginDelta.write(oprot)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQSpecCommissionSettings:
  """
  Attributes:
   - subAccountId
   - commodityId
   - commodityInfo
   - type
   - commissionDelta
   - isSync
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'commodityId', None, None, ), # 2
    (3, TType.STRUCT, 'commodityInfo', (CommodityInfo, CommodityInfo.thrift_spec), None, ), # 3
    None, # 4
    (5, TType.I32, 'type', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'commissionDelta', (CommissionInfo, CommissionInfo.thrift_spec), None, ), # 10
    None, # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, commodityId=None, commodityInfo=None, type=None, commissionDelta=None, isSync=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.commodityId = commodityId
    self.commodityInfo = commodityInfo
    self.type = type
    self.commissionDelta = commissionDelta
    self.isSync = isSync
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.commodityInfo = CommodityInfo()
          self.commodityInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.commissionDelta = CommissionInfo()
          self.commissionDelta.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQSpecCommissionSettings')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 2)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    if self.commodityInfo is not None:
      oprot.writeFieldBegin('commodityInfo', TType.STRUCT, 3)
      self.commodityInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 5)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.commissionDelta is not None:
      oprot.writeFieldBegin('commissionDelta', TType.STRUCT, 10)
      self.commissionDelta.write(oprot)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContractInfo:
  """
  Attributes:
   - tradeAccountId
   - commodityId
   - contractCode
   - contractId
   - exchangeMic
   - contractEngName
   - contractCnName
   - commodityEngAcronym
   - commodityCnAcronym
   - exchangeAcronym
   - exchangeCnAcronym
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.I64, 'commodityId', None, None, ), # 2
    (3, TType.STRING, 'contractCode', None, None, ), # 3
    (4, TType.I64, 'contractId', None, None, ), # 4
    (5, TType.STRING, 'exchangeMic', None, None, ), # 5
    (6, TType.STRING, 'contractEngName', None, None, ), # 6
    (7, TType.STRING, 'contractCnName', None, None, ), # 7
    (8, TType.STRING, 'commodityEngAcronym', None, None, ), # 8
    (9, TType.STRING, 'commodityCnAcronym', None, None, ), # 9
    (10, TType.STRING, 'exchangeAcronym', None, None, ), # 10
    (11, TType.STRING, 'exchangeCnAcronym', None, None, ), # 11
  )

  def __init__(self, tradeAccountId=None, commodityId=None, contractCode=None, contractId=None, exchangeMic=None, contractEngName=None, contractCnName=None, commodityEngAcronym=None, commodityCnAcronym=None, exchangeAcronym=None, exchangeCnAcronym=None,):
    self.tradeAccountId = tradeAccountId
    self.commodityId = commodityId
    self.contractCode = contractCode
    self.contractId = contractId
    self.exchangeMic = exchangeMic
    self.contractEngName = contractEngName
    self.contractCnName = contractCnName
    self.commodityEngAcronym = commodityEngAcronym
    self.commodityCnAcronym = commodityCnAcronym
    self.exchangeAcronym = exchangeAcronym
    self.exchangeCnAcronym = exchangeCnAcronym

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.contractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.contractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.contractEngName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.contractCnName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.commodityEngAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.commodityCnAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.exchangeAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.exchangeCnAcronym = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContractInfo')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 2)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    if self.contractCode is not None:
      oprot.writeFieldBegin('contractCode', TType.STRING, 3)
      oprot.writeString(self.contractCode)
      oprot.writeFieldEnd()
    if self.contractId is not None:
      oprot.writeFieldBegin('contractId', TType.I64, 4)
      oprot.writeI64(self.contractId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 5)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.contractEngName is not None:
      oprot.writeFieldBegin('contractEngName', TType.STRING, 6)
      oprot.writeString(self.contractEngName)
      oprot.writeFieldEnd()
    if self.contractCnName is not None:
      oprot.writeFieldBegin('contractCnName', TType.STRING, 7)
      oprot.writeString(self.contractCnName)
      oprot.writeFieldEnd()
    if self.commodityEngAcronym is not None:
      oprot.writeFieldBegin('commodityEngAcronym', TType.STRING, 8)
      oprot.writeString(self.commodityEngAcronym)
      oprot.writeFieldEnd()
    if self.commodityCnAcronym is not None:
      oprot.writeFieldBegin('commodityCnAcronym', TType.STRING, 9)
      oprot.writeString(self.commodityCnAcronym)
      oprot.writeFieldEnd()
    if self.exchangeAcronym is not None:
      oprot.writeFieldBegin('exchangeAcronym', TType.STRING, 10)
      oprot.writeString(self.exchangeAcronym)
      oprot.writeFieldEnd()
    if self.exchangeCnAcronym is not None:
      oprot.writeFieldBegin('exchangeCnAcronym', TType.STRING, 11)
      oprot.writeString(self.exchangeCnAcronym)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpsideContractMargin:
  """
  Attributes:
   - subAccountId
   - contractInfo
   - margin
   - dataType
   - isSync
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRUCT, 'contractInfo', (ContractInfo, ContractInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'margin', (MarginInfo, MarginInfo.thrift_spec), None, ), # 10
    (11, TType.I32, 'dataType', None, None, ), # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, contractInfo=None, margin=None, dataType=None, isSync=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.contractInfo = contractInfo
    self.margin = margin
    self.dataType = dataType
    self.isSync = isSync
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractInfo = ContractInfo()
          self.contractInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.margin = MarginInfo()
          self.margin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpsideContractMargin')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractInfo is not None:
      oprot.writeFieldBegin('contractInfo', TType.STRUCT, 2)
      self.contractInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.margin is not None:
      oprot.writeFieldBegin('margin', TType.STRUCT, 10)
      self.margin.write(oprot)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 11)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpsideContractCommission:
  """
  Attributes:
   - subAccountId
   - contractInfo
   - commission
   - dataType
   - isSync
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRUCT, 'contractInfo', (ContractInfo, ContractInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'commission', (CommissionInfo, CommissionInfo.thrift_spec), None, ), # 10
    (11, TType.I32, 'dataType', None, None, ), # 11
    (12, TType.BOOL, 'isSync', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, contractInfo=None, commission=None, dataType=None, isSync=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.contractInfo = contractInfo
    self.commission = commission
    self.dataType = dataType
    self.isSync = isSync
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractInfo = ContractInfo()
          self.contractInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.commission = CommissionInfo()
          self.commission.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.BOOL:
          self.isSync = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpsideContractCommission')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractInfo is not None:
      oprot.writeFieldBegin('contractInfo', TType.STRUCT, 2)
      self.contractInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.commission is not None:
      oprot.writeFieldBegin('commission', TType.STRUCT, 10)
      self.commission.write(oprot)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 11)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    if self.isSync is not None:
      oprot.writeFieldBegin('isSync', TType.BOOL, 12)
      oprot.writeBool(self.isSync)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQContractMargin:
  """
  Attributes:
   - subAccountId
   - contractInfo
   - margin
   - dataType
   - settingsDataType
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRUCT, 'contractInfo', (ContractInfo, ContractInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'margin', (MarginInfo, MarginInfo.thrift_spec), None, ), # 10
    (11, TType.I32, 'dataType', None, None, ), # 11
    (12, TType.I32, 'settingsDataType', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, contractInfo=None, margin=None, dataType=None, settingsDataType=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.contractInfo = contractInfo
    self.margin = margin
    self.dataType = dataType
    self.settingsDataType = settingsDataType
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractInfo = ContractInfo()
          self.contractInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.margin = MarginInfo()
          self.margin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.settingsDataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQContractMargin')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractInfo is not None:
      oprot.writeFieldBegin('contractInfo', TType.STRUCT, 2)
      self.contractInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.margin is not None:
      oprot.writeFieldBegin('margin', TType.STRUCT, 10)
      self.margin.write(oprot)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 11)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    if self.settingsDataType is not None:
      oprot.writeFieldBegin('settingsDataType', TType.I32, 12)
      oprot.writeI32(self.settingsDataType)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQContractCommission:
  """
  Attributes:
   - subAccountId
   - contractInfo
   - commission
   - dataType
   - settingsDataType
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRUCT, 'contractInfo', (ContractInfo, ContractInfo.thrift_spec), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'commission', (CommissionInfo, CommissionInfo.thrift_spec), None, ), # 10
    (11, TType.I32, 'dataType', None, None, ), # 11
    (12, TType.I32, 'settingsDataType', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, contractInfo=None, commission=None, dataType=None, settingsDataType=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.contractInfo = contractInfo
    self.commission = commission
    self.dataType = dataType
    self.settingsDataType = settingsDataType
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contractInfo = ContractInfo()
          self.contractInfo.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.commission = CommissionInfo()
          self.commission.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.dataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.settingsDataType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQContractCommission')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractInfo is not None:
      oprot.writeFieldBegin('contractInfo', TType.STRUCT, 2)
      self.contractInfo.write(oprot)
      oprot.writeFieldEnd()
    if self.commission is not None:
      oprot.writeFieldBegin('commission', TType.STRUCT, 10)
      self.commission.write(oprot)
      oprot.writeFieldEnd()
    if self.dataType is not None:
      oprot.writeFieldBegin('dataType', TType.I32, 11)
      oprot.writeI32(self.dataType)
      oprot.writeFieldEnd()
    if self.settingsDataType is not None:
      oprot.writeFieldBegin('settingsDataType', TType.I32, 12)
      oprot.writeI32(self.settingsDataType)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQSpecMarginSettingPage:
  """
  Attributes:
   - totalNum
   - XQSpecMarginSettingList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'XQSpecMarginSettingList', (TType.STRUCT,(XQSpecMarginSettings, XQSpecMarginSettings.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, XQSpecMarginSettingList=None,):
    self.totalNum = totalNum
    self.XQSpecMarginSettingList = XQSpecMarginSettingList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.XQSpecMarginSettingList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = XQSpecMarginSettings()
            _elem5.read(iprot)
            self.XQSpecMarginSettingList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQSpecMarginSettingPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.XQSpecMarginSettingList is not None:
      oprot.writeFieldBegin('XQSpecMarginSettingList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.XQSpecMarginSettingList))
      for iter6 in self.XQSpecMarginSettingList:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQSpecCommissionSettingPage:
  """
  Attributes:
   - totalNum
   - XQSpecCommissionSettingList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'XQSpecCommissionSettingList', (TType.STRUCT,(XQSpecCommissionSettings, XQSpecCommissionSettings.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, XQSpecCommissionSettingList=None,):
    self.totalNum = totalNum
    self.XQSpecCommissionSettingList = XQSpecCommissionSettingList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.XQSpecCommissionSettingList = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = XQSpecCommissionSettings()
            _elem12.read(iprot)
            self.XQSpecCommissionSettingList.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQSpecCommissionSettingPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.XQSpecCommissionSettingList is not None:
      oprot.writeFieldBegin('XQSpecCommissionSettingList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.XQSpecCommissionSettingList))
      for iter13 in self.XQSpecCommissionSettingList:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpsideContractMarginPage:
  """
  Attributes:
   - totalNum
   - upsideContractMarginList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'upsideContractMarginList', (TType.STRUCT,(UpsideContractMargin, UpsideContractMargin.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, upsideContractMarginList=None,):
    self.totalNum = totalNum
    self.upsideContractMarginList = upsideContractMarginList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.upsideContractMarginList = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = UpsideContractMargin()
            _elem19.read(iprot)
            self.upsideContractMarginList.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpsideContractMarginPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.upsideContractMarginList is not None:
      oprot.writeFieldBegin('upsideContractMarginList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.upsideContractMarginList))
      for iter20 in self.upsideContractMarginList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UpsideContractCommissionPage:
  """
  Attributes:
   - totalNum
   - upsideContractCommissionList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'upsideContractCommissionList', (TType.STRUCT,(UpsideContractCommission, UpsideContractCommission.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, upsideContractCommissionList=None,):
    self.totalNum = totalNum
    self.upsideContractCommissionList = upsideContractCommissionList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.upsideContractCommissionList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = UpsideContractCommission()
            _elem26.read(iprot)
            self.upsideContractCommissionList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UpsideContractCommissionPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.upsideContractCommissionList is not None:
      oprot.writeFieldBegin('upsideContractCommissionList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.upsideContractCommissionList))
      for iter27 in self.upsideContractCommissionList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQContractMarginPage:
  """
  Attributes:
   - totalNum
   - xqContractMarginList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'xqContractMarginList', (TType.STRUCT,(XQContractMargin, XQContractMargin.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, xqContractMarginList=None,):
    self.totalNum = totalNum
    self.xqContractMarginList = xqContractMarginList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.xqContractMarginList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = XQContractMargin()
            _elem33.read(iprot)
            self.xqContractMarginList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQContractMarginPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.xqContractMarginList is not None:
      oprot.writeFieldBegin('xqContractMarginList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.xqContractMarginList))
      for iter34 in self.xqContractMarginList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class XQContractCommissionPage:
  """
  Attributes:
   - totalNum
   - xqContractCommissionList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'xqContractCommissionList', (TType.STRUCT,(XQContractCommission, XQContractCommission.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, xqContractCommissionList=None,):
    self.totalNum = totalNum
    self.xqContractCommissionList = xqContractCommissionList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.xqContractCommissionList = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = XQContractCommission()
            _elem40.read(iprot)
            self.xqContractCommissionList.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('XQContractCommissionPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.xqContractCommissionList is not None:
      oprot.writeFieldBegin('xqContractCommissionList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.xqContractCommissionList))
      for iter41 in self.xqContractCommissionList:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionFee:
  """
  Attributes:
   - subAccountId
   - contractId
   - margin
   - commission
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'contractId', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'margin', (MarginInfo, MarginInfo.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'commission', (CommissionInfo, CommissionInfo.thrift_spec), None, ), # 11
  )

  def __init__(self, subAccountId=None, contractId=None, margin=None, commission=None,):
    self.subAccountId = subAccountId
    self.contractId = contractId
    self.margin = margin
    self.commission = commission

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.contractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.margin = MarginInfo()
          self.margin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.commission = CommissionInfo()
          self.commission.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionFee')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.contractId is not None:
      oprot.writeFieldBegin('contractId', TType.I64, 2)
      oprot.writeI64(self.contractId)
      oprot.writeFieldEnd()
    if self.margin is not None:
      oprot.writeFieldBegin('margin', TType.STRUCT, 10)
      self.margin.write(oprot)
      oprot.writeFieldEnd()
    if self.commission is not None:
      oprot.writeFieldBegin('commission', TType.STRUCT, 11)
      self.commission.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryXQSpecSettingOptions:
  """
  Attributes:
   - subAccountId
   - exchangeMic
   - commodityIds
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.SET, 'commodityIds', (TType.I64,None), None, ), # 3
    (4, TType.I32, 'type', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, exchangeMic=None, commodityIds=None, type=None,):
    self.subAccountId = subAccountId
    self.exchangeMic = exchangeMic
    self.commodityIds = commodityIds
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.commodityIds = set()
          (_etype45, _size42) = iprot.readSetBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readI64();
            self.commodityIds.add(_elem47)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryXQSpecSettingOptions')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.commodityIds is not None:
      oprot.writeFieldBegin('commodityIds', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.commodityIds))
      for iter48 in self.commodityIds:
        oprot.writeI64(iter48)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryUpsidePFeeOptions:
  """
  Attributes:
   - subAccountId
   - exchangeMic
   - commodityId
   - contractCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.I64, 'commodityId', None, None, ), # 3
    (4, TType.STRING, 'contractCode', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, exchangeMic=None, commodityId=None, contractCode=None,):
    self.subAccountId = subAccountId
    self.exchangeMic = exchangeMic
    self.commodityId = commodityId
    self.contractCode = contractCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.contractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryUpsidePFeeOptions')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 3)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    if self.contractCode is not None:
      oprot.writeFieldBegin('contractCode', TType.STRING, 4)
      oprot.writeString(self.contractCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryXQPFeeOptions:
  """
  Attributes:
   - subAccountId
   - exchangeMic
   - commodityId
   - contractCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'exchangeMic', None, None, ), # 2
    (3, TType.I64, 'commodityId', None, None, ), # 3
    (4, TType.STRING, 'contractCode', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, exchangeMic=None, commodityId=None, contractCode=None,):
    self.subAccountId = subAccountId
    self.exchangeMic = exchangeMic
    self.commodityId = commodityId
    self.contractCode = contractCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.exchangeMic = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.commodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.contractCode = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryXQPFeeOptions')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.exchangeMic is not None:
      oprot.writeFieldBegin('exchangeMic', TType.STRING, 2)
      oprot.writeString(self.exchangeMic)
      oprot.writeFieldEnd()
    if self.commodityId is not None:
      oprot.writeFieldBegin('commodityId', TType.I64, 3)
      oprot.writeI64(self.commodityId)
      oprot.writeFieldEnd()
    if self.contractCode is not None:
      oprot.writeFieldBegin('contractCode', TType.STRING, 4)
      oprot.writeString(self.contractCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
