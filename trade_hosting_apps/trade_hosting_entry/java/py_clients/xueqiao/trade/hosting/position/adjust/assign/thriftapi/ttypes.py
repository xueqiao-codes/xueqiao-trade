#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class PositionDirection:
  POSITION_BUY = 0
  POSITION_SELL = 1

  _VALUES_TO_NAMES = {
    0: "POSITION_BUY",
    1: "POSITION_SELL",
  }

  _NAMES_TO_VALUES = {
    "POSITION_BUY": 0,
    "POSITION_SELL": 1,
  }


class PositionAssigned:
  """
  持仓分配明细

  Attributes:
   - assignId
   - subAccountId
   - inputSubUserId
   - assignSubUserId
   - inputId
   - tradeAccountId
   - sledContractId
   - sledCommodityId
   - price
   - volume
   - positionDirection
   - positionTimestampMs
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'assignId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'inputSubUserId', None, None, ), # 3
    (4, TType.I64, 'assignSubUserId', None, None, ), # 4
    (5, TType.I64, 'inputId', None, None, ), # 5
    (6, TType.I64, 'tradeAccountId', None, None, ), # 6
    (7, TType.I64, 'sledContractId', None, None, ), # 7
    (8, TType.I64, 'sledCommodityId', None, None, ), # 8
    None, # 9
    (10, TType.DOUBLE, 'price', None, None, ), # 10
    (11, TType.I32, 'volume', None, None, ), # 11
    (12, TType.I32, 'positionDirection', None, None, ), # 12
    (13, TType.I64, 'positionTimestampMs', None, None, ), # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'createTimestampMs', None, None, ), # 30
    (31, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 31
  )

  def __init__(self, assignId=None, subAccountId=None, inputSubUserId=None, assignSubUserId=None, inputId=None, tradeAccountId=None, sledContractId=None, sledCommodityId=None, price=None, volume=None, positionDirection=None, positionTimestampMs=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.assignId = assignId
    self.subAccountId = subAccountId
    self.inputSubUserId = inputSubUserId
    self.assignSubUserId = assignSubUserId
    self.inputId = inputId
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.sledCommodityId = sledCommodityId
    self.price = price
    self.volume = volume
    self.positionDirection = positionDirection
    self.positionTimestampMs = positionTimestampMs
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.assignId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.inputSubUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.assignSubUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.inputId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.positionDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.positionTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionAssigned')
    if self.assignId is not None:
      oprot.writeFieldBegin('assignId', TType.I64, 1)
      oprot.writeI64(self.assignId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.inputSubUserId is not None:
      oprot.writeFieldBegin('inputSubUserId', TType.I64, 3)
      oprot.writeI64(self.inputSubUserId)
      oprot.writeFieldEnd()
    if self.assignSubUserId is not None:
      oprot.writeFieldBegin('assignSubUserId', TType.I64, 4)
      oprot.writeI64(self.assignSubUserId)
      oprot.writeFieldEnd()
    if self.inputId is not None:
      oprot.writeFieldBegin('inputId', TType.I64, 5)
      oprot.writeI64(self.inputId)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 6)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 7)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 8)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 10)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 11)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.positionDirection is not None:
      oprot.writeFieldBegin('positionDirection', TType.I32, 12)
      oprot.writeI32(self.positionDirection)
      oprot.writeFieldEnd()
    if self.positionTimestampMs is not None:
      oprot.writeFieldBegin('positionTimestampMs', TType.I64, 13)
      oprot.writeI64(self.positionTimestampMs)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 30)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 31)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AssignPositionResp:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'success', None, None, ), # 1
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AssignPositionResp')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 1)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
