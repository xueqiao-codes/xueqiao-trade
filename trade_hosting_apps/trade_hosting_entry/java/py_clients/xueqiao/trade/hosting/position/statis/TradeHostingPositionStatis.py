#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


TradeHostingPositionStatis_SERVICE_KEY=717
class Iface:
  def clearAll(self, platformArgs):
    """
    Parameters:
     - platformArgs
    """
    pass

  def contructCompose(self, platformArgs, contructComposeReq):
    """
    Parameters:
     - platformArgs
     - contructComposeReq
    """
    pass

  def disassembleCompose(self, platformArgs, disassembleComposePositionReq):
    """
    Parameters:
     - platformArgs
     - disassembleComposePositionReq
    """
    pass

  def batchClosePosition(self, platformArgs, batchClosedPositionReq):
    """
    Parameters:
     - platformArgs
     - batchClosedPositionReq
    """
    pass

  def recoverClosedPosition(self, platformArgs, subAccountId, targetKey, targetType):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - targetKey
     - targetType
    """
    pass

  def assignPosition(self, platformArgs, positionAssigned):
    """
    Parameters:
     - platformArgs
     - positionAssigned
    """
    pass

  def mergeToCompose(self, platformArgs, mergeToComposeReq):
    """
    Parameters:
     - platformArgs
     - mergeToComposeReq
    """
    pass

  def deleteExpiredStatContractPosition(self, platformArgs, subAccountId, sledContractId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - sledContractId
    """
    pass

  def queryStatPositionSummaryPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionItemPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryCurrentDayStatClosedPositionPage(self, platformArgs, subAccountId, targetKey, targetType):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - targetKey
     - targetType
    """
    pass

  def queryStatClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryArchivedClosedPositionPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryArchivedClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionSummaryExPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryStatPositionUnitPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryHistoryClosedPositionPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass

  def queryHistoryClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def clearAll(self, platformArgs):
    """
    Parameters:
     - platformArgs
    """
    self.send_clearAll(platformArgs)
    self.recv_clearAll()

  def send_clearAll(self, platformArgs):
    self._oprot.writeMessageBegin('clearAll', TMessageType.CALL, self._seqid)
    args = clearAll_args()
    args.platformArgs = platformArgs
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_clearAll(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = clearAll_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def contructCompose(self, platformArgs, contructComposeReq):
    """
    Parameters:
     - platformArgs
     - contructComposeReq
    """
    self.send_contructCompose(platformArgs, contructComposeReq)
    self.recv_contructCompose()

  def send_contructCompose(self, platformArgs, contructComposeReq):
    self._oprot.writeMessageBegin('contructCompose', TMessageType.CALL, self._seqid)
    args = contructCompose_args()
    args.platformArgs = platformArgs
    args.contructComposeReq = contructComposeReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_contructCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = contructCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def disassembleCompose(self, platformArgs, disassembleComposePositionReq):
    """
    Parameters:
     - platformArgs
     - disassembleComposePositionReq
    """
    self.send_disassembleCompose(platformArgs, disassembleComposePositionReq)
    self.recv_disassembleCompose()

  def send_disassembleCompose(self, platformArgs, disassembleComposePositionReq):
    self._oprot.writeMessageBegin('disassembleCompose', TMessageType.CALL, self._seqid)
    args = disassembleCompose_args()
    args.platformArgs = platformArgs
    args.disassembleComposePositionReq = disassembleComposePositionReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disassembleCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disassembleCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def batchClosePosition(self, platformArgs, batchClosedPositionReq):
    """
    Parameters:
     - platformArgs
     - batchClosedPositionReq
    """
    self.send_batchClosePosition(platformArgs, batchClosedPositionReq)
    self.recv_batchClosePosition()

  def send_batchClosePosition(self, platformArgs, batchClosedPositionReq):
    self._oprot.writeMessageBegin('batchClosePosition', TMessageType.CALL, self._seqid)
    args = batchClosePosition_args()
    args.platformArgs = platformArgs
    args.batchClosedPositionReq = batchClosedPositionReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_batchClosePosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = batchClosePosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def recoverClosedPosition(self, platformArgs, subAccountId, targetKey, targetType):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - targetKey
     - targetType
    """
    self.send_recoverClosedPosition(platformArgs, subAccountId, targetKey, targetType)
    self.recv_recoverClosedPosition()

  def send_recoverClosedPosition(self, platformArgs, subAccountId, targetKey, targetType):
    self._oprot.writeMessageBegin('recoverClosedPosition', TMessageType.CALL, self._seqid)
    args = recoverClosedPosition_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.targetKey = targetKey
    args.targetType = targetType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_recoverClosedPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = recoverClosedPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def assignPosition(self, platformArgs, positionAssigned):
    """
    Parameters:
     - platformArgs
     - positionAssigned
    """
    self.send_assignPosition(platformArgs, positionAssigned)
    self.recv_assignPosition()

  def send_assignPosition(self, platformArgs, positionAssigned):
    self._oprot.writeMessageBegin('assignPosition', TMessageType.CALL, self._seqid)
    args = assignPosition_args()
    args.platformArgs = platformArgs
    args.positionAssigned = positionAssigned
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_assignPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = assignPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def mergeToCompose(self, platformArgs, mergeToComposeReq):
    """
    Parameters:
     - platformArgs
     - mergeToComposeReq
    """
    self.send_mergeToCompose(platformArgs, mergeToComposeReq)
    self.recv_mergeToCompose()

  def send_mergeToCompose(self, platformArgs, mergeToComposeReq):
    self._oprot.writeMessageBegin('mergeToCompose', TMessageType.CALL, self._seqid)
    args = mergeToCompose_args()
    args.platformArgs = platformArgs
    args.mergeToComposeReq = mergeToComposeReq
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_mergeToCompose(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = mergeToCompose_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def deleteExpiredStatContractPosition(self, platformArgs, subAccountId, sledContractId):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - sledContractId
    """
    self.send_deleteExpiredStatContractPosition(platformArgs, subAccountId, sledContractId)
    self.recv_deleteExpiredStatContractPosition()

  def send_deleteExpiredStatContractPosition(self, platformArgs, subAccountId, sledContractId):
    self._oprot.writeMessageBegin('deleteExpiredStatContractPosition', TMessageType.CALL, self._seqid)
    args = deleteExpiredStatContractPosition_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.sledContractId = sledContractId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteExpiredStatContractPosition(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteExpiredStatContractPosition_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.err is not None:
      raise result.err
    return

  def queryStatPositionSummaryPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionSummaryPage(platformArgs, queryOption, pageOption)
    return self.recv_queryStatPositionSummaryPage()

  def send_queryStatPositionSummaryPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionSummaryPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionSummaryPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionSummaryPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionSummaryPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionSummaryPage failed: unknown result");

  def queryStatPositionItemPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionItemPage(platformArgs, queryOption, pageOption)
    return self.recv_queryStatPositionItemPage()

  def send_queryStatPositionItemPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionItemPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionItemPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionItemPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionItemPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionItemPage failed: unknown result");

  def queryCurrentDayStatClosedPositionPage(self, platformArgs, subAccountId, targetKey, targetType):
    """
    Parameters:
     - platformArgs
     - subAccountId
     - targetKey
     - targetType
    """
    self.send_queryCurrentDayStatClosedPositionPage(platformArgs, subAccountId, targetKey, targetType)
    return self.recv_queryCurrentDayStatClosedPositionPage()

  def send_queryCurrentDayStatClosedPositionPage(self, platformArgs, subAccountId, targetKey, targetType):
    self._oprot.writeMessageBegin('queryCurrentDayStatClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryCurrentDayStatClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.subAccountId = subAccountId
    args.targetKey = targetKey
    args.targetType = targetType
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryCurrentDayStatClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryCurrentDayStatClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryCurrentDayStatClosedPositionPage failed: unknown result");

  def queryStatClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryStatClosedPositionDetail(platformArgs, queryOption, pageOption)
    return self.recv_queryStatClosedPositionDetail()

  def send_queryStatClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryStatClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatClosedPositionDetail failed: unknown result");

  def queryArchivedClosedPositionPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryArchivedClosedPositionPage(platformArgs, queryOption, pageOption)
    return self.recv_queryArchivedClosedPositionPage()

  def send_queryArchivedClosedPositionPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryArchivedClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryArchivedClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryArchivedClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryArchivedClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryArchivedClosedPositionPage failed: unknown result");

  def queryArchivedClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryArchivedClosedPositionDetail(platformArgs, queryOption, pageOption)
    return self.recv_queryArchivedClosedPositionDetail()

  def send_queryArchivedClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryArchivedClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryArchivedClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryArchivedClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryArchivedClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryArchivedClosedPositionDetail failed: unknown result");

  def queryStatPositionSummaryExPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionSummaryExPage(platformArgs, queryOption, pageOption)
    return self.recv_queryStatPositionSummaryExPage()

  def send_queryStatPositionSummaryExPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionSummaryExPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionSummaryExPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionSummaryExPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionSummaryExPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionSummaryExPage failed: unknown result");

  def queryStatPositionUnitPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryStatPositionUnitPage(platformArgs, queryOption, pageOption)
    return self.recv_queryStatPositionUnitPage()

  def send_queryStatPositionUnitPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryStatPositionUnitPage', TMessageType.CALL, self._seqid)
    args = queryStatPositionUnitPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryStatPositionUnitPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryStatPositionUnitPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryStatPositionUnitPage failed: unknown result");

  def queryHistoryClosedPositionPage(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryHistoryClosedPositionPage(platformArgs, queryOption, pageOption)
    return self.recv_queryHistoryClosedPositionPage()

  def send_queryHistoryClosedPositionPage(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryHistoryClosedPositionPage', TMessageType.CALL, self._seqid)
    args = queryHistoryClosedPositionPage_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryHistoryClosedPositionPage(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryHistoryClosedPositionPage_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryHistoryClosedPositionPage failed: unknown result");

  def queryHistoryClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    """
    Parameters:
     - platformArgs
     - queryOption
     - pageOption
    """
    self.send_queryHistoryClosedPositionDetail(platformArgs, queryOption, pageOption)
    return self.recv_queryHistoryClosedPositionDetail()

  def send_queryHistoryClosedPositionDetail(self, platformArgs, queryOption, pageOption):
    self._oprot.writeMessageBegin('queryHistoryClosedPositionDetail', TMessageType.CALL, self._seqid)
    args = queryHistoryClosedPositionDetail_args()
    args.platformArgs = platformArgs
    args.queryOption = queryOption
    args.pageOption = pageOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_queryHistoryClosedPositionDetail(self):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = queryHistoryClosedPositionDetail_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.err is not None:
      raise result.err
    raise TApplicationException(TApplicationException.MISSING_RESULT, "queryHistoryClosedPositionDetail failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["clearAll"] = Processor.process_clearAll
    self._processMap["contructCompose"] = Processor.process_contructCompose
    self._processMap["disassembleCompose"] = Processor.process_disassembleCompose
    self._processMap["batchClosePosition"] = Processor.process_batchClosePosition
    self._processMap["recoverClosedPosition"] = Processor.process_recoverClosedPosition
    self._processMap["assignPosition"] = Processor.process_assignPosition
    self._processMap["mergeToCompose"] = Processor.process_mergeToCompose
    self._processMap["deleteExpiredStatContractPosition"] = Processor.process_deleteExpiredStatContractPosition
    self._processMap["queryStatPositionSummaryPage"] = Processor.process_queryStatPositionSummaryPage
    self._processMap["queryStatPositionItemPage"] = Processor.process_queryStatPositionItemPage
    self._processMap["queryCurrentDayStatClosedPositionPage"] = Processor.process_queryCurrentDayStatClosedPositionPage
    self._processMap["queryStatClosedPositionDetail"] = Processor.process_queryStatClosedPositionDetail
    self._processMap["queryArchivedClosedPositionPage"] = Processor.process_queryArchivedClosedPositionPage
    self._processMap["queryArchivedClosedPositionDetail"] = Processor.process_queryArchivedClosedPositionDetail
    self._processMap["queryStatPositionSummaryExPage"] = Processor.process_queryStatPositionSummaryExPage
    self._processMap["queryStatPositionUnitPage"] = Processor.process_queryStatPositionUnitPage
    self._processMap["queryHistoryClosedPositionPage"] = Processor.process_queryHistoryClosedPositionPage
    self._processMap["queryHistoryClosedPositionDetail"] = Processor.process_queryHistoryClosedPositionDetail

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_clearAll(self, seqid, iprot, oprot):
    args = clearAll_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = clearAll_result()
    try:
      self._handler.clearAll(args.platformArgs)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("clearAll", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_contructCompose(self, seqid, iprot, oprot):
    args = contructCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = contructCompose_result()
    try:
      self._handler.contructCompose(args.platformArgs, args.contructComposeReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("contructCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disassembleCompose(self, seqid, iprot, oprot):
    args = disassembleCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disassembleCompose_result()
    try:
      self._handler.disassembleCompose(args.platformArgs, args.disassembleComposePositionReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("disassembleCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_batchClosePosition(self, seqid, iprot, oprot):
    args = batchClosePosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = batchClosePosition_result()
    try:
      self._handler.batchClosePosition(args.platformArgs, args.batchClosedPositionReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("batchClosePosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_recoverClosedPosition(self, seqid, iprot, oprot):
    args = recoverClosedPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = recoverClosedPosition_result()
    try:
      self._handler.recoverClosedPosition(args.platformArgs, args.subAccountId, args.targetKey, args.targetType)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("recoverClosedPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_assignPosition(self, seqid, iprot, oprot):
    args = assignPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = assignPosition_result()
    try:
      self._handler.assignPosition(args.platformArgs, args.positionAssigned)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("assignPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_mergeToCompose(self, seqid, iprot, oprot):
    args = mergeToCompose_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = mergeToCompose_result()
    try:
      self._handler.mergeToCompose(args.platformArgs, args.mergeToComposeReq)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("mergeToCompose", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteExpiredStatContractPosition(self, seqid, iprot, oprot):
    args = deleteExpiredStatContractPosition_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteExpiredStatContractPosition_result()
    try:
      self._handler.deleteExpiredStatContractPosition(args.platformArgs, args.subAccountId, args.sledContractId)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("deleteExpiredStatContractPosition", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionSummaryPage(self, seqid, iprot, oprot):
    args = queryStatPositionSummaryPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionSummaryPage_result()
    try:
      result.success = self._handler.queryStatPositionSummaryPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionSummaryPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionItemPage(self, seqid, iprot, oprot):
    args = queryStatPositionItemPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionItemPage_result()
    try:
      result.success = self._handler.queryStatPositionItemPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionItemPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryCurrentDayStatClosedPositionPage(self, seqid, iprot, oprot):
    args = queryCurrentDayStatClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryCurrentDayStatClosedPositionPage_result()
    try:
      result.success = self._handler.queryCurrentDayStatClosedPositionPage(args.platformArgs, args.subAccountId, args.targetKey, args.targetType)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryCurrentDayStatClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryStatClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatClosedPositionDetail_result()
    try:
      result.success = self._handler.queryStatClosedPositionDetail(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryArchivedClosedPositionPage(self, seqid, iprot, oprot):
    args = queryArchivedClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryArchivedClosedPositionPage_result()
    try:
      result.success = self._handler.queryArchivedClosedPositionPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryArchivedClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryArchivedClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryArchivedClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryArchivedClosedPositionDetail_result()
    try:
      result.success = self._handler.queryArchivedClosedPositionDetail(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryArchivedClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionSummaryExPage(self, seqid, iprot, oprot):
    args = queryStatPositionSummaryExPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionSummaryExPage_result()
    try:
      result.success = self._handler.queryStatPositionSummaryExPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionSummaryExPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryStatPositionUnitPage(self, seqid, iprot, oprot):
    args = queryStatPositionUnitPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryStatPositionUnitPage_result()
    try:
      result.success = self._handler.queryStatPositionUnitPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryStatPositionUnitPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryHistoryClosedPositionPage(self, seqid, iprot, oprot):
    args = queryHistoryClosedPositionPage_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryHistoryClosedPositionPage_result()
    try:
      result.success = self._handler.queryHistoryClosedPositionPage(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryHistoryClosedPositionPage", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_queryHistoryClosedPositionDetail(self, seqid, iprot, oprot):
    args = queryHistoryClosedPositionDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = queryHistoryClosedPositionDetail_result()
    try:
      result.success = self._handler.queryHistoryClosedPositionDetail(args.platformArgs, args.queryOption, args.pageOption)
    except comm.ttypes.ErrorInfo, err:
      result.err = err
    oprot.writeMessageBegin("queryHistoryClosedPositionDetail", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class clearAll_args:
  """
  Attributes:
   - platformArgs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
  )

  def __init__(self, platformArgs=None,):
    self.platformArgs = platformArgs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearAll_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class clearAll_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('clearAll_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class contructCompose_args:
  """
  Attributes:
   - platformArgs
   - contructComposeReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'contructComposeReq', (StatContructComposeReq, StatContructComposeReq.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, contructComposeReq=None,):
    self.platformArgs = platformArgs
    self.contructComposeReq = contructComposeReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.contructComposeReq = StatContructComposeReq()
          self.contructComposeReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('contructCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.contructComposeReq is not None:
      oprot.writeFieldBegin('contructComposeReq', TType.STRUCT, 2)
      self.contructComposeReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class contructCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('contructCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disassembleCompose_args:
  """
  Attributes:
   - platformArgs
   - disassembleComposePositionReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'disassembleComposePositionReq', (DisassembleComposePositionReq, DisassembleComposePositionReq.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, disassembleComposePositionReq=None,):
    self.platformArgs = platformArgs
    self.disassembleComposePositionReq = disassembleComposePositionReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.disassembleComposePositionReq = DisassembleComposePositionReq()
          self.disassembleComposePositionReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disassembleCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.disassembleComposePositionReq is not None:
      oprot.writeFieldBegin('disassembleComposePositionReq', TType.STRUCT, 2)
      self.disassembleComposePositionReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disassembleCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disassembleCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchClosePosition_args:
  """
  Attributes:
   - platformArgs
   - batchClosedPositionReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'batchClosedPositionReq', (BatchClosedPositionReq, BatchClosedPositionReq.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, batchClosedPositionReq=None,):
    self.platformArgs = platformArgs
    self.batchClosedPositionReq = batchClosedPositionReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.batchClosedPositionReq = BatchClosedPositionReq()
          self.batchClosedPositionReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchClosePosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.batchClosedPositionReq is not None:
      oprot.writeFieldBegin('batchClosedPositionReq', TType.STRUCT, 2)
      self.batchClosedPositionReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class batchClosePosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('batchClosePosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recoverClosedPosition_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, subAccountId=None, targetKey=None, targetType=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('recoverClosedPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class recoverClosedPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('recoverClosedPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignPosition_args:
  """
  Attributes:
   - platformArgs
   - positionAssigned
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'positionAssigned', (xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned, xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, positionAssigned=None,):
    self.platformArgs = platformArgs
    self.positionAssigned = positionAssigned

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.positionAssigned = xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes.PositionAssigned()
          self.positionAssigned.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.positionAssigned is not None:
      oprot.writeFieldBegin('positionAssigned', TType.STRUCT, 2)
      self.positionAssigned.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class assignPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('assignPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mergeToCompose_args:
  """
  Attributes:
   - platformArgs
   - mergeToComposeReq
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'mergeToComposeReq', (StatMergeToComposeReq, StatMergeToComposeReq.thrift_spec), None, ), # 2
  )

  def __init__(self, platformArgs=None, mergeToComposeReq=None,):
    self.platformArgs = platformArgs
    self.mergeToComposeReq = mergeToComposeReq

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.mergeToComposeReq = StatMergeToComposeReq()
          self.mergeToComposeReq.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mergeToCompose_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.mergeToComposeReq is not None:
      oprot.writeFieldBegin('mergeToComposeReq', TType.STRUCT, 2)
      self.mergeToComposeReq.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class mergeToCompose_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('mergeToCompose_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredStatContractPosition_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
  )

  def __init__(self, platformArgs=None, subAccountId=None, sledContractId=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredStatContractPosition_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteExpiredStatContractPosition_result:
  """
  Attributes:
   - err
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, err=None,):
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteExpiredStatContractPosition_result')
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatPositionSummaryOption, QueryStatPositionSummaryOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatPositionSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatPositionSummaryPage, StatPositionSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatPositionSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionItemPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatPositionItemOption, QueryStatPositionItemOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatPositionItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionItemPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionItemPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatPositionItemPage, StatPositionItemPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatPositionItemPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionItemPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryCurrentDayStatClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, platformArgs=None, subAccountId=None, targetKey=None, targetType=None,):
    self.platformArgs = platformArgs
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryCurrentDayStatClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryCurrentDayStatClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDateSummaryPage, StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryCurrentDayStatClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatClosedPositionItemOption, QueryStatClosedPositionItemOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatClosedPositionItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDetail, StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatClosedPositionDateSummaryOption, QueryStatClosedPositionDateSummaryOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatClosedPositionDateSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDateSummaryPage, StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatArchiveItemOption, QueryStatArchiveItemOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatArchiveItemOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryArchivedClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDetail, StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryArchivedClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryExPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatPositionSummaryOption, QueryStatPositionSummaryOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatPositionSummaryOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryExPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionSummaryExPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatPositionSummaryExPage, StatPositionSummaryExPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatPositionSummaryExPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionSummaryExPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionUnitPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryStatPositionUnitOption, QueryStatPositionUnitOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryStatPositionUnitOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionUnitPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryStatPositionUnitPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatPositionUnitPage, StatPositionUnitPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatPositionUnitPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryStatPositionUnitPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionPage_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryHistoryClosedPositionOption, QueryHistoryClosedPositionOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryHistoryClosedPositionOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionPage_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionPage_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDateSummaryPage, StatClosedPositionDateSummaryPage.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDateSummaryPage()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionPage_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionDetail_args:
  """
  Attributes:
   - platformArgs
   - queryOption
   - pageOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'platformArgs', (comm.ttypes.PlatformArgs, comm.ttypes.PlatformArgs.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'queryOption', (QueryHistoryClosedPositionOption, QueryHistoryClosedPositionOption.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'pageOption', (page.ttypes.IndexedPageOption, page.ttypes.IndexedPageOption.thrift_spec), None, ), # 3
  )

  def __init__(self, platformArgs=None, queryOption=None, pageOption=None,):
    self.platformArgs = platformArgs
    self.queryOption = queryOption
    self.pageOption = pageOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.platformArgs = comm.ttypes.PlatformArgs()
          self.platformArgs.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.queryOption = QueryHistoryClosedPositionOption()
          self.queryOption.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.pageOption = page.ttypes.IndexedPageOption()
          self.pageOption.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionDetail_args')
    if self.platformArgs is not None:
      oprot.writeFieldBegin('platformArgs', TType.STRUCT, 1)
      self.platformArgs.write(oprot)
      oprot.writeFieldEnd()
    if self.queryOption is not None:
      oprot.writeFieldBegin('queryOption', TType.STRUCT, 2)
      self.queryOption.write(oprot)
      oprot.writeFieldEnd()
    if self.pageOption is not None:
      oprot.writeFieldBegin('pageOption', TType.STRUCT, 3)
      self.pageOption.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class queryHistoryClosedPositionDetail_result:
  """
  Attributes:
   - success
   - err
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (StatClosedPositionDetail, StatClosedPositionDetail.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'err', (comm.ttypes.ErrorInfo, comm.ttypes.ErrorInfo.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, err=None,):
    self.success = success
    self.err = err

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = StatClosedPositionDetail()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.err = comm.ttypes.ErrorInfo()
          self.err.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('queryHistoryClosedPositionDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.err is not None:
      oprot.writeFieldBegin('err', TType.STRUCT, 1)
      self.err.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
