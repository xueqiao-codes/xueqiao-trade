#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from page.ttypes import *
from xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes import *
from xueqiao.trade.hosting.position.adjust.thriftapi.ttypes import *
from xueqiao.trade.hosting.position.adjust.thriftapi import TradeHostingPositionAdjust

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class TradeHostingPositionAdjustStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, methodName, routeKey)

  def manualInputPosition(self, routeKey, timeout, positionManualInputs,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('manualInputPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.manualInputPosition(platformArgs,positionManualInputs,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'manualInputPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'manualInputPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqManualInputPosition(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqManualInputPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqManualInputPosition(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqManualInputPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqManualInputPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqPositionUnassigned(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqPositionUnassigned', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqPositionUnassigned(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionUnassigned', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionUnassigned', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqPositionAssigned(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqPositionAssigned', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqPositionAssigned(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionAssigned', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionAssigned', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def assignPosition(self, routeKey, timeout, assignOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('assignPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.assignPosition(platformArgs,assignOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'assignPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'assignPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqPositionEditLock(self, routeKey, timeout, lockKey,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqPositionEditLock', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqPositionEditLock(platformArgs,lockKey,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionEditLock', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionEditLock', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addPositionEditLock(self, routeKey, timeout, positionEditLock,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addPositionEditLock', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.addPositionEditLock(platformArgs,positionEditLock,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'addPositionEditLock', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'addPositionEditLock', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removePositionEditLock(self, routeKey, timeout, positionEditLock,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removePositionEditLock', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.removePositionEditLock(platformArgs,positionEditLock,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'removePositionEditLock', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'removePositionEditLock', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqPositionVerify(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqPositionVerify', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqPositionVerify(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionVerify', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionVerify', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqPositionDifference(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqPositionDifference', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqPositionDifference(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionDifference', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqPositionDifference', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqSettlementTimeRelateSledReqTime(self, routeKey, timeout, tradeAccountId,settlementDate,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqSettlementTimeRelateSledReqTime', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqSettlementTimeRelateSledReqTime(platformArgs,tradeAccountId,settlementDate,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqSettlementTimeRelateSledReqTime', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqSettlementTimeRelateSledReqTime', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def reqDailyPositionDifference(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('reqDailyPositionDifference', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.reqDailyPositionDifference(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqDailyPositionDifference', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'reqDailyPositionDifference', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateDailyPositionDifferenceNote(self, routeKey, timeout, difference,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateDailyPositionDifferenceNote', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.updateDailyPositionDifferenceNote(platformArgs,difference,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'updateDailyPositionDifferenceNote', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'updateDailyPositionDifferenceNote', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def clearAll(self, routeKey, timeout, ):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('clearAll', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionAdjust.Client(protocol)
    try:
      transport.open()
      result = client.clearAll(platformArgs,)
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionAdjust.TradeHostingPositionAdjust_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

