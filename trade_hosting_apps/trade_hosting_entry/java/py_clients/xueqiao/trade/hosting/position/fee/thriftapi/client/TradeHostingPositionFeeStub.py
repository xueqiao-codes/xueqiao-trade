#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from page.ttypes import *
from xueqiao.trade.hosting.position.fee.thriftapi.ttypes import *
from xueqiao.trade.hosting.position.fee.thriftapi import TradeHostingPositionFee

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class TradeHostingPositionFeeStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, methodName, routeKey)

  def clearAll(self, routeKey, timeout, ):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('clearAll', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.clearAll(platformArgs,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'clearAll', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def setGeneralMarginSetting(self, routeKey, timeout, marginSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('setGeneralMarginSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.setGeneralMarginSetting(platformArgs,marginSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'setGeneralMarginSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'setGeneralMarginSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def setGeneralCommissionSetting(self, routeKey, timeout, commissionSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('setGeneralCommissionSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.setGeneralCommissionSetting(platformArgs,commissionSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'setGeneralCommissionSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'setGeneralCommissionSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addSpecMarginSetting(self, routeKey, timeout, marginSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addSpecMarginSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.addSpecMarginSetting(platformArgs,marginSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'addSpecMarginSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'addSpecMarginSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def addSpecCommissionSetting(self, routeKey, timeout, commissionSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('addSpecCommissionSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.addSpecCommissionSetting(platformArgs,commissionSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'addSpecCommissionSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'addSpecCommissionSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateSpecMarginSetting(self, routeKey, timeout, marginSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateSpecMarginSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.updateSpecMarginSetting(platformArgs,marginSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'updateSpecMarginSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'updateSpecMarginSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def updateSpecCommissionSetting(self, routeKey, timeout, commissionSettings,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('updateSpecCommissionSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.updateSpecCommissionSetting(platformArgs,commissionSettings,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'updateSpecCommissionSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'updateSpecCommissionSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def deleteSpecMarginSetting(self, routeKey, timeout, subAccountId,commodityId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('deleteSpecMarginSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.deleteSpecMarginSetting(platformArgs,subAccountId,commodityId,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'deleteSpecMarginSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'deleteSpecMarginSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def deleteSpecCommissionSetting(self, routeKey, timeout, subAccountId,commodityId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('deleteSpecCommissionSetting', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.deleteSpecCommissionSetting(platformArgs,subAccountId,commodityId,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'deleteSpecCommissionSetting', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'deleteSpecCommissionSetting', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQGeneralMarginSettings(self, routeKey, timeout, subAccountId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQGeneralMarginSettings', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQGeneralMarginSettings(platformArgs,subAccountId,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQGeneralMarginSettings', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQGeneralMarginSettings', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQGeneralCommissionSettings(self, routeKey, timeout, subAccountId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQGeneralCommissionSettings', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQGeneralCommissionSettings(platformArgs,subAccountId,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQGeneralCommissionSettings', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQGeneralCommissionSettings', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQSpecMarginSettingPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQSpecMarginSettingPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQSpecMarginSettingPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQSpecMarginSettingPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQSpecMarginSettingPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQSpecCommissionSettingPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQSpecCommissionSettingPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQSpecCommissionSettingPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQSpecCommissionSettingPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQSpecCommissionSettingPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryUpsideContractMarginPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryUpsideContractMarginPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryUpsideContractMarginPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryUpsideContractMarginPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryUpsideContractMarginPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryUpsideContractCommissionPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryUpsideContractCommissionPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryUpsideContractCommissionPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryUpsideContractCommissionPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryUpsideContractCommissionPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQContractMarginPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQContractMarginPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQContractMarginPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQContractMarginPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQContractMarginPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryXQContractCommissionPage(self, routeKey, timeout, queryOptions,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryXQContractCommissionPage', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryXQContractCommissionPage(platformArgs,queryOptions,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQContractCommissionPage', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryXQContractCommissionPage', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def queryPositionFee(self, routeKey, timeout, subAccountId,contractId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('queryPositionFee', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingPositionFee.Client(protocol)
    try:
      transport.open()
      result = client.queryPositionFee(platformArgs,subAccountId,contractId,)
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryPositionFee', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingPositionFee.TradeHostingPositionFee_SERVICE_KEY, 'queryPositionFee', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

