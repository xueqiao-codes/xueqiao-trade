#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes
import xueqiao.trade.hosting.arbitrage.thriftapi.ttypes
import xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class StatDirection:
  STAT_BUY = 0
  STAT_SELL = 1

  _VALUES_TO_NAMES = {
    0: "STAT_BUY",
    1: "STAT_SELL",
  }

  _NAMES_TO_VALUES = {
    "STAT_BUY": 0,
    "STAT_SELL": 1,
  }

class DataSourceChannel:
  FROM_XQ_CONTRACT_TRADE = 1
  FROM_XQ_COMPOSE_TRADE = 2
  FROM_XQ_PARTIAL_COMPOSE_TRADE = 3
  FROM_CONTRACT_ASSIGNATION = 10
  FROM_COMPOSE_CONSTRUCTION = 20
  FROM_COMPOSE_REVERSE_CONSTRUCTION = 21
  FROM_CONTRACT_MERGE = 22
  FROM_COMPOSE_TRADE_DISASSEMBLY = 30
  FROM_COMPOSE_CONSTRUCTION_DISASSEMBLY = 31
  FROM_COMPOSE_DISASSEMBLY = 32

  _VALUES_TO_NAMES = {
    1: "FROM_XQ_CONTRACT_TRADE",
    2: "FROM_XQ_COMPOSE_TRADE",
    3: "FROM_XQ_PARTIAL_COMPOSE_TRADE",
    10: "FROM_CONTRACT_ASSIGNATION",
    20: "FROM_COMPOSE_CONSTRUCTION",
    21: "FROM_COMPOSE_REVERSE_CONSTRUCTION",
    22: "FROM_CONTRACT_MERGE",
    30: "FROM_COMPOSE_TRADE_DISASSEMBLY",
    31: "FROM_COMPOSE_CONSTRUCTION_DISASSEMBLY",
    32: "FROM_COMPOSE_DISASSEMBLY",
  }

  _NAMES_TO_VALUES = {
    "FROM_XQ_CONTRACT_TRADE": 1,
    "FROM_XQ_COMPOSE_TRADE": 2,
    "FROM_XQ_PARTIAL_COMPOSE_TRADE": 3,
    "FROM_CONTRACT_ASSIGNATION": 10,
    "FROM_COMPOSE_CONSTRUCTION": 20,
    "FROM_COMPOSE_REVERSE_CONSTRUCTION": 21,
    "FROM_CONTRACT_MERGE": 22,
    "FROM_COMPOSE_TRADE_DISASSEMBLY": 30,
    "FROM_COMPOSE_CONSTRUCTION_DISASSEMBLY": 31,
    "FROM_COMPOSE_DISASSEMBLY": 32,
  }

class SourceType:
  ST_UNKNOWN = 0
  ST_ASSIGN = 1
  ST_TRADE = 2
  ST_MERGE_TO_COMPOSE_NOT_TRADE = 3

  _VALUES_TO_NAMES = {
    0: "ST_UNKNOWN",
    1: "ST_ASSIGN",
    2: "ST_TRADE",
    3: "ST_MERGE_TO_COMPOSE_NOT_TRADE",
  }

  _NAMES_TO_VALUES = {
    "ST_UNKNOWN": 0,
    "ST_ASSIGN": 1,
    "ST_TRADE": 2,
    "ST_MERGE_TO_COMPOSE_NOT_TRADE": 3,
  }


class StatDataSource:
  """
  Attributes:
   - sourceDataChannel
   - sourceDataTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sourceDataChannel', None, None, ), # 1
    (2, TType.I64, 'sourceDataTimestampMs', None, None, ), # 2
  )

  def __init__(self, sourceDataChannel=None, sourceDataTimestampMs=None,):
    self.sourceDataChannel = sourceDataChannel
    self.sourceDataTimestampMs = sourceDataTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sourceDataChannel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sourceDataTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatDataSource')
    if self.sourceDataChannel is not None:
      oprot.writeFieldBegin('sourceDataChannel', TType.I32, 1)
      oprot.writeI32(self.sourceDataChannel)
      oprot.writeFieldEnd()
    if self.sourceDataTimestampMs is not None:
      oprot.writeFieldBegin('sourceDataTimestampMs', TType.I64, 2)
      oprot.writeI64(self.sourceDataTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ExternalDataSource:
  """
  Attributes:
   - sourceType
   - sourceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'sourceType', None, None, ), # 1
    (2, TType.I64, 'sourceId', None, None, ), # 2
  )

  def __init__(self, sourceType=None, sourceId=None,):
    self.sourceType = sourceType
    self.sourceId = sourceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.sourceType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sourceId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ExternalDataSource')
    if self.sourceType is not None:
      oprot.writeFieldBegin('sourceType', TType.I32, 1)
      oprot.writeI32(self.sourceType)
      oprot.writeFieldEnd()
    if self.sourceId is not None:
      oprot.writeFieldBegin('sourceId', TType.I64, 2)
      oprot.writeI64(self.sourceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionItem:
  """
  Attributes:
   - positionItemId
   - subAccountId
   - targetKey
   - targetType
   - price
   - quantity
   - direction
   - source
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'positionItemId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
    (5, TType.DOUBLE, 'price', None, None, ), # 5
    (6, TType.I32, 'quantity', None, None, ), # 6
    (7, TType.I32, 'direction', None, None, ), # 7
    (8, TType.STRUCT, 'source', (StatDataSource, StatDataSource.thrift_spec), None, ), # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, positionItemId=None, subAccountId=None, targetKey=None, targetType=None, price=None, quantity=None, direction=None, source=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.positionItemId = positionItemId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.price = price
    self.quantity = quantity
    self.direction = direction
    self.source = source
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.source = StatDataSource()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionItem')
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 1)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 5)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 6)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 7)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 8)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionUnit:
  """
  Attributes:
   - unitId
   - positionItemId
   - sledContractId
   - unitPrice
   - unitQuantity
   - direction
   - sourceDataTimestampMs
   - subAccountId
   - targetKey
   - targetType
   - source
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'unitId', None, None, ), # 1
    (2, TType.I64, 'positionItemId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.DOUBLE, 'unitPrice', None, None, ), # 4
    (5, TType.I32, 'unitQuantity', None, None, ), # 5
    (6, TType.I32, 'direction', None, None, ), # 6
    (7, TType.I64, 'sourceDataTimestampMs', None, None, ), # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'subAccountId', None, None, ), # 10
    (11, TType.STRING, 'targetKey', None, None, ), # 11
    (12, TType.I32, 'targetType', None, None, ), # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    None, # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    None, # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    None, # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    None, # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    None, # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    None, # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    None, # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    None, # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    None, # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    None, # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    None, # 130
    (131, TType.STRUCT, 'source', (ExternalDataSource, ExternalDataSource.thrift_spec), None, ), # 131
  )

  def __init__(self, unitId=None, positionItemId=None, sledContractId=None, unitPrice=None, unitQuantity=None, direction=None, sourceDataTimestampMs=None, subAccountId=None, targetKey=None, targetType=None, source=None,):
    self.unitId = unitId
    self.positionItemId = positionItemId
    self.sledContractId = sledContractId
    self.unitPrice = unitPrice
    self.unitQuantity = unitQuantity
    self.direction = direction
    self.sourceDataTimestampMs = sourceDataTimestampMs
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.source = source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.unitId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.unitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.unitQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.sourceDataTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 131:
        if ftype == TType.STRUCT:
          self.source = ExternalDataSource()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionUnit')
    if self.unitId is not None:
      oprot.writeFieldBegin('unitId', TType.I64, 1)
      oprot.writeI64(self.unitId)
      oprot.writeFieldEnd()
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 2)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.unitPrice is not None:
      oprot.writeFieldBegin('unitPrice', TType.DOUBLE, 4)
      oprot.writeDouble(self.unitPrice)
      oprot.writeFieldEnd()
    if self.unitQuantity is not None:
      oprot.writeFieldBegin('unitQuantity', TType.I32, 5)
      oprot.writeI32(self.unitQuantity)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 6)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.sourceDataTimestampMs is not None:
      oprot.writeFieldBegin('sourceDataTimestampMs', TType.I64, 7)
      oprot.writeI64(self.sourceDataTimestampMs)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 10)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 11)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 12)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 131)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedUnit:
  """
  Attributes:
   - closedUnitId
   - closedItemId
   - positionUnitId
   - positionItemId
   - sledContractId
   - unitPrice
   - unitQuantity
   - direction
   - sourceDataTimestampMs
   - subAccountId
   - targetKey
   - targetType
   - source
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'closedUnitId', None, None, ), # 1
    (2, TType.I64, 'closedItemId', None, None, ), # 2
    (3, TType.I64, 'positionUnitId', None, None, ), # 3
    (4, TType.I64, 'positionItemId', None, None, ), # 4
    (5, TType.I64, 'sledContractId', None, None, ), # 5
    (6, TType.DOUBLE, 'unitPrice', None, None, ), # 6
    (7, TType.I32, 'unitQuantity', None, None, ), # 7
    (8, TType.I32, 'direction', None, None, ), # 8
    (9, TType.I64, 'sourceDataTimestampMs', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    (15, TType.I64, 'subAccountId', None, None, ), # 15
    (16, TType.STRING, 'targetKey', None, None, ), # 16
    (17, TType.I32, 'targetType', None, None, ), # 17
    (18, TType.STRUCT, 'source', (ExternalDataSource, ExternalDataSource.thrift_spec), None, ), # 18
  )

  def __init__(self, closedUnitId=None, closedItemId=None, positionUnitId=None, positionItemId=None, sledContractId=None, unitPrice=None, unitQuantity=None, direction=None, sourceDataTimestampMs=None, subAccountId=None, targetKey=None, targetType=None, source=None,):
    self.closedUnitId = closedUnitId
    self.closedItemId = closedItemId
    self.positionUnitId = positionUnitId
    self.positionItemId = positionItemId
    self.sledContractId = sledContractId
    self.unitPrice = unitPrice
    self.unitQuantity = unitQuantity
    self.direction = direction
    self.sourceDataTimestampMs = sourceDataTimestampMs
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.source = source

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.closedUnitId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.closedItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.positionUnitId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.unitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.unitQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.sourceDataTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRUCT:
          self.source = ExternalDataSource()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedUnit')
    if self.closedUnitId is not None:
      oprot.writeFieldBegin('closedUnitId', TType.I64, 1)
      oprot.writeI64(self.closedUnitId)
      oprot.writeFieldEnd()
    if self.closedItemId is not None:
      oprot.writeFieldBegin('closedItemId', TType.I64, 2)
      oprot.writeI64(self.closedItemId)
      oprot.writeFieldEnd()
    if self.positionUnitId is not None:
      oprot.writeFieldBegin('positionUnitId', TType.I64, 3)
      oprot.writeI64(self.positionUnitId)
      oprot.writeFieldEnd()
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 4)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 5)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.unitPrice is not None:
      oprot.writeFieldBegin('unitPrice', TType.DOUBLE, 6)
      oprot.writeDouble(self.unitPrice)
      oprot.writeFieldEnd()
    if self.unitQuantity is not None:
      oprot.writeFieldBegin('unitQuantity', TType.I32, 7)
      oprot.writeI32(self.unitQuantity)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 8)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.sourceDataTimestampMs is not None:
      oprot.writeFieldBegin('sourceDataTimestampMs', TType.I64, 9)
      oprot.writeI64(self.sourceDataTimestampMs)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 15)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 16)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 17)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 18)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionSummary:
  """
  Attributes:
   - targetKey
   - subAccountId
   - targetType
   - longPosition
   - shortPosition
   - netPosition
   - positionAvgPrice
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
    (5, TType.I64, 'longPosition', None, None, ), # 5
    (6, TType.I64, 'shortPosition', None, None, ), # 6
    (7, TType.I64, 'netPosition', None, None, ), # 7
    (8, TType.DOUBLE, 'positionAvgPrice', None, None, ), # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, targetKey=None, subAccountId=None, targetType=None, longPosition=None, shortPosition=None, netPosition=None, positionAvgPrice=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.targetKey = targetKey
    self.subAccountId = subAccountId
    self.targetType = targetType
    self.longPosition = longPosition
    self.shortPosition = shortPosition
    self.netPosition = netPosition
    self.positionAvgPrice = positionAvgPrice
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.longPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.shortPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.netPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.positionAvgPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionSummary')
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.longPosition is not None:
      oprot.writeFieldBegin('longPosition', TType.I64, 5)
      oprot.writeI64(self.longPosition)
      oprot.writeFieldEnd()
    if self.shortPosition is not None:
      oprot.writeFieldBegin('shortPosition', TType.I64, 6)
      oprot.writeI64(self.shortPosition)
      oprot.writeFieldEnd()
    if self.netPosition is not None:
      oprot.writeFieldBegin('netPosition', TType.I64, 7)
      oprot.writeI64(self.netPosition)
      oprot.writeFieldEnd()
    if self.positionAvgPrice is not None:
      oprot.writeFieldBegin('positionAvgPrice', TType.DOUBLE, 8)
      oprot.writeDouble(self.positionAvgPrice)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionDynamicInfo:
  """
  Attributes:
   - targetKey
   - subAccountId
   - targetType
   - lastPrice
   - positionProfit
   - closedProfit
   - totalProfit
   - positionValue
   - leverage
   - positionValueMap
   - currency
   - modifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'targetKey', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I32, 'targetType', None, None, ), # 3
    None, # 4
    (5, TType.DOUBLE, 'lastPrice', None, None, ), # 5
    (6, TType.DOUBLE, 'positionProfit', None, None, ), # 6
    (7, TType.DOUBLE, 'closedProfit', None, None, ), # 7
    (8, TType.DOUBLE, 'totalProfit', None, None, ), # 8
    (9, TType.DOUBLE, 'positionValue', None, None, ), # 9
    (10, TType.DOUBLE, 'leverage', None, None, ), # 10
    None, # 11
    None, # 12
    (13, TType.MAP, 'positionValueMap', (TType.STRING,None,TType.DOUBLE,None), None, ), # 13
    None, # 14
    (15, TType.STRING, 'currency', None, None, ), # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'modifyTimestampMs', None, None, ), # 20
  )

  def __init__(self, targetKey=None, subAccountId=None, targetType=None, lastPrice=None, positionProfit=None, closedProfit=None, totalProfit=None, positionValue=None, leverage=None, positionValueMap=None, currency=None, modifyTimestampMs=None,):
    self.targetKey = targetKey
    self.subAccountId = subAccountId
    self.targetType = targetType
    self.lastPrice = lastPrice
    self.positionProfit = positionProfit
    self.closedProfit = closedProfit
    self.totalProfit = totalProfit
    self.positionValue = positionValue
    self.leverage = leverage
    self.positionValueMap = positionValueMap
    self.currency = currency
    self.modifyTimestampMs = modifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.lastPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.positionProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.closedProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.totalProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.positionValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.leverage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.positionValueMap = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readDouble();
            self.positionValueMap[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.modifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionDynamicInfo')
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 1)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 3)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.lastPrice is not None:
      oprot.writeFieldBegin('lastPrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.lastPrice)
      oprot.writeFieldEnd()
    if self.positionProfit is not None:
      oprot.writeFieldBegin('positionProfit', TType.DOUBLE, 6)
      oprot.writeDouble(self.positionProfit)
      oprot.writeFieldEnd()
    if self.closedProfit is not None:
      oprot.writeFieldBegin('closedProfit', TType.DOUBLE, 7)
      oprot.writeDouble(self.closedProfit)
      oprot.writeFieldEnd()
    if self.totalProfit is not None:
      oprot.writeFieldBegin('totalProfit', TType.DOUBLE, 8)
      oprot.writeDouble(self.totalProfit)
      oprot.writeFieldEnd()
    if self.positionValue is not None:
      oprot.writeFieldBegin('positionValue', TType.DOUBLE, 9)
      oprot.writeDouble(self.positionValue)
      oprot.writeFieldEnd()
    if self.leverage is not None:
      oprot.writeFieldBegin('leverage', TType.DOUBLE, 10)
      oprot.writeDouble(self.leverage)
      oprot.writeFieldEnd()
    if self.positionValueMap is not None:
      oprot.writeFieldBegin('positionValueMap', TType.MAP, 13)
      oprot.writeMapBegin(TType.STRING, TType.DOUBLE, len(self.positionValueMap))
      for kiter7,viter8 in self.positionValueMap.items():
        oprot.writeString(kiter7)
        oprot.writeDouble(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 15)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.modifyTimestampMs is not None:
      oprot.writeFieldBegin('modifyTimestampMs', TType.I64, 20)
      oprot.writeI64(self.modifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionSummaryEx:
  """
  Attributes:
   - targetKey
   - subAccountId
   - targetType
   - positionSummary
   - positionDynamicInfo
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'targetKey', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I32, 'targetType', None, None, ), # 3
    None, # 4
    (5, TType.STRUCT, 'positionSummary', (StatPositionSummary, StatPositionSummary.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'positionDynamicInfo', (StatPositionDynamicInfo, StatPositionDynamicInfo.thrift_spec), None, ), # 6
  )

  def __init__(self, targetKey=None, subAccountId=None, targetType=None, positionSummary=None, positionDynamicInfo=None,):
    self.targetKey = targetKey
    self.subAccountId = subAccountId
    self.targetType = targetType
    self.positionSummary = positionSummary
    self.positionDynamicInfo = positionDynamicInfo

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.positionSummary = StatPositionSummary()
          self.positionSummary.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.positionDynamicInfo = StatPositionDynamicInfo()
          self.positionDynamicInfo.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionSummaryEx')
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 1)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 3)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.positionSummary is not None:
      oprot.writeFieldBegin('positionSummary', TType.STRUCT, 5)
      self.positionSummary.write(oprot)
      oprot.writeFieldEnd()
    if self.positionDynamicInfo is not None:
      oprot.writeFieldBegin('positionDynamicInfo', TType.STRUCT, 6)
      self.positionDynamicInfo.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClosedProfit:
  """
  Attributes:
   - tradeCurrency
   - closedProfitValue
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.STRING, 'tradeCurrency', None, None, ), # 2
    (3, TType.DOUBLE, 'closedProfitValue', None, None, ), # 3
  )

  def __init__(self, tradeCurrency=None, closedProfitValue=None,):
    self.tradeCurrency = tradeCurrency
    self.closedProfitValue = closedProfitValue

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.STRING:
          self.tradeCurrency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.closedProfitValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClosedProfit')
    if self.tradeCurrency is not None:
      oprot.writeFieldBegin('tradeCurrency', TType.STRING, 2)
      oprot.writeString(self.tradeCurrency)
      oprot.writeFieldEnd()
    if self.closedProfitValue is not None:
      oprot.writeFieldBegin('closedProfitValue', TType.DOUBLE, 3)
      oprot.writeDouble(self.closedProfitValue)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedPositionSummary:
  """
  Attributes:
   - closedId
   - subAccountId
   - targetKey
   - targetType
   - closedPosition
   - closedProfits
   - spreadProfit
   - closedTimestampMs
   - archivedDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'closedId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
    (5, TType.I64, 'closedPosition', None, None, ), # 5
    None, # 6
    None, # 7
    (8, TType.LIST, 'closedProfits', (TType.STRUCT,(ClosedProfit, ClosedProfit.thrift_spec)), None, ), # 8
    (9, TType.DOUBLE, 'spreadProfit', None, None, ), # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'closedTimestampMs', None, None, ), # 20
    (21, TType.I64, 'archivedDateTimestampMs', None, None, ), # 21
  )

  def __init__(self, closedId=None, subAccountId=None, targetKey=None, targetType=None, closedPosition=None, closedProfits=None, spreadProfit=None, closedTimestampMs=None, archivedDateTimestampMs=None,):
    self.closedId = closedId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.closedPosition = closedPosition
    self.closedProfits = closedProfits
    self.spreadProfit = spreadProfit
    self.closedTimestampMs = closedTimestampMs
    self.archivedDateTimestampMs = archivedDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.closedId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.closedPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.closedProfits = []
          (_etype12, _size9) = iprot.readListBegin()
          for _i13 in xrange(_size9):
            _elem14 = ClosedProfit()
            _elem14.read(iprot)
            self.closedProfits.append(_elem14)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.spreadProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.closedTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.archivedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedPositionSummary')
    if self.closedId is not None:
      oprot.writeFieldBegin('closedId', TType.I64, 1)
      oprot.writeI64(self.closedId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.closedPosition is not None:
      oprot.writeFieldBegin('closedPosition', TType.I64, 5)
      oprot.writeI64(self.closedPosition)
      oprot.writeFieldEnd()
    if self.closedProfits is not None:
      oprot.writeFieldBegin('closedProfits', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.closedProfits))
      for iter15 in self.closedProfits:
        iter15.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.spreadProfit is not None:
      oprot.writeFieldBegin('spreadProfit', TType.DOUBLE, 9)
      oprot.writeDouble(self.spreadProfit)
      oprot.writeFieldEnd()
    if self.closedTimestampMs is not None:
      oprot.writeFieldBegin('closedTimestampMs', TType.I64, 20)
      oprot.writeI64(self.closedTimestampMs)
      oprot.writeFieldEnd()
    if self.archivedDateTimestampMs is not None:
      oprot.writeFieldBegin('archivedDateTimestampMs', TType.I64, 21)
      oprot.writeI64(self.archivedDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedPositionDateSummary:
  """
  Attributes:
   - dateSummaryId
   - subAccountId
   - targetKey
   - archivedDateTimestampMs
   - targetType
   - closedPosition
   - closedProfits
   - spreadProfit
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'dateSummaryId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I64, 'archivedDateTimestampMs', None, None, ), # 4
    (5, TType.I32, 'targetType', None, None, ), # 5
    (6, TType.I64, 'closedPosition', None, None, ), # 6
    None, # 7
    None, # 8
    (9, TType.LIST, 'closedProfits', (TType.STRUCT,(ClosedProfit, ClosedProfit.thrift_spec)), None, ), # 9
    (10, TType.DOUBLE, 'spreadProfit', None, None, ), # 10
  )

  def __init__(self, dateSummaryId=None, subAccountId=None, targetKey=None, archivedDateTimestampMs=None, targetType=None, closedPosition=None, closedProfits=None, spreadProfit=None,):
    self.dateSummaryId = dateSummaryId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.archivedDateTimestampMs = archivedDateTimestampMs
    self.targetType = targetType
    self.closedPosition = closedPosition
    self.closedProfits = closedProfits
    self.spreadProfit = spreadProfit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.dateSummaryId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.archivedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.closedPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.closedProfits = []
          (_etype19, _size16) = iprot.readListBegin()
          for _i20 in xrange(_size16):
            _elem21 = ClosedProfit()
            _elem21.read(iprot)
            self.closedProfits.append(_elem21)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.spreadProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedPositionDateSummary')
    if self.dateSummaryId is not None:
      oprot.writeFieldBegin('dateSummaryId', TType.I64, 1)
      oprot.writeI64(self.dateSummaryId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.archivedDateTimestampMs is not None:
      oprot.writeFieldBegin('archivedDateTimestampMs', TType.I64, 4)
      oprot.writeI64(self.archivedDateTimestampMs)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 5)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.closedPosition is not None:
      oprot.writeFieldBegin('closedPosition', TType.I64, 6)
      oprot.writeI64(self.closedPosition)
      oprot.writeFieldEnd()
    if self.closedProfits is not None:
      oprot.writeFieldBegin('closedProfits', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.closedProfits))
      for iter22 in self.closedProfits:
        iter22.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.spreadProfit is not None:
      oprot.writeFieldBegin('spreadProfit', TType.DOUBLE, 10)
      oprot.writeDouble(self.spreadProfit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedPositionItem:
  """
  Attributes:
   - closedItemId
   - closedId
   - positionItemId
   - subAccountId
   - targetKey
   - targetType
   - price
   - closedQuantity
   - direction
   - source
   - positionCreateTimestampMs
   - closedTimestampMs
   - archivedDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'closedItemId', None, None, ), # 1
    (2, TType.I64, 'closedId', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    (6, TType.I64, 'positionItemId', None, None, ), # 6
    (7, TType.I64, 'subAccountId', None, None, ), # 7
    (8, TType.STRING, 'targetKey', None, None, ), # 8
    (9, TType.I32, 'targetType', None, None, ), # 9
    (10, TType.DOUBLE, 'price', None, None, ), # 10
    (11, TType.I32, 'closedQuantity', None, None, ), # 11
    (12, TType.I32, 'direction', None, None, ), # 12
    (13, TType.STRUCT, 'source', (StatDataSource, StatDataSource.thrift_spec), None, ), # 13
    (14, TType.I64, 'positionCreateTimestampMs', None, None, ), # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'closedTimestampMs', None, None, ), # 20
    (21, TType.I64, 'archivedDateTimestampMs', None, None, ), # 21
  )

  def __init__(self, closedItemId=None, closedId=None, positionItemId=None, subAccountId=None, targetKey=None, targetType=None, price=None, closedQuantity=None, direction=None, source=None, positionCreateTimestampMs=None, closedTimestampMs=None, archivedDateTimestampMs=None,):
    self.closedItemId = closedItemId
    self.closedId = closedId
    self.positionItemId = positionItemId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.price = price
    self.closedQuantity = closedQuantity
    self.direction = direction
    self.source = source
    self.positionCreateTimestampMs = positionCreateTimestampMs
    self.closedTimestampMs = closedTimestampMs
    self.archivedDateTimestampMs = archivedDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.closedItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.closedId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.closedQuantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRUCT:
          self.source = StatDataSource()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.positionCreateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.closedTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.archivedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedPositionItem')
    if self.closedItemId is not None:
      oprot.writeFieldBegin('closedItemId', TType.I64, 1)
      oprot.writeI64(self.closedItemId)
      oprot.writeFieldEnd()
    if self.closedId is not None:
      oprot.writeFieldBegin('closedId', TType.I64, 2)
      oprot.writeI64(self.closedId)
      oprot.writeFieldEnd()
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 6)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 7)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 8)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 9)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 10)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.closedQuantity is not None:
      oprot.writeFieldBegin('closedQuantity', TType.I32, 11)
      oprot.writeI32(self.closedQuantity)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 12)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRUCT, 13)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.positionCreateTimestampMs is not None:
      oprot.writeFieldBegin('positionCreateTimestampMs', TType.I64, 14)
      oprot.writeI64(self.positionCreateTimestampMs)
      oprot.writeFieldEnd()
    if self.closedTimestampMs is not None:
      oprot.writeFieldBegin('closedTimestampMs', TType.I64, 20)
      oprot.writeI64(self.closedTimestampMs)
      oprot.writeFieldEnd()
    if self.archivedDateTimestampMs is not None:
      oprot.writeFieldBegin('archivedDateTimestampMs', TType.I64, 21)
      oprot.writeI64(self.archivedDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatComposeLeg:
  """
  Attributes:
   - sledContractId
   - legTradePrice
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    None, # 2
    (3, TType.DOUBLE, 'legTradePrice', None, None, ), # 3
  )

  def __init__(self, sledContractId=None, legTradePrice=None,):
    self.sledContractId = sledContractId
    self.legTradePrice = legTradePrice

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.legTradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatComposeLeg')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.legTradePrice is not None:
      oprot.writeFieldBegin('legTradePrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.legTradePrice)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatContructComposeReq:
  """
  Attributes:
   - subAccountId
   - composeGraphId
   - diretion
   - volume
   - composePrice
   - composeLegs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'composeGraphId', None, None, ), # 2
    (3, TType.I32, 'diretion', None, None, ), # 3
    (4, TType.I32, 'volume', None, None, ), # 4
    (5, TType.DOUBLE, 'composePrice', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'composeLegs', (TType.STRUCT,(StatComposeLeg, StatComposeLeg.thrift_spec)), None, ), # 10
  )

  def __init__(self, subAccountId=None, composeGraphId=None, diretion=None, volume=None, composePrice=None, composeLegs=None,):
    self.subAccountId = subAccountId
    self.composeGraphId = composeGraphId
    self.diretion = diretion
    self.volume = volume
    self.composePrice = composePrice
    self.composeLegs = composeLegs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.diretion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.composePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.composeLegs = []
          (_etype26, _size23) = iprot.readListBegin()
          for _i27 in xrange(_size23):
            _elem28 = StatComposeLeg()
            _elem28.read(iprot)
            self.composeLegs.append(_elem28)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatContructComposeReq')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 2)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.diretion is not None:
      oprot.writeFieldBegin('diretion', TType.I32, 3)
      oprot.writeI32(self.diretion)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 4)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.composePrice is not None:
      oprot.writeFieldBegin('composePrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.composePrice)
      oprot.writeFieldEnd()
    if self.composeLegs is not None:
      oprot.writeFieldBegin('composeLegs', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.composeLegs))
      for iter29 in self.composeLegs:
        iter29.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionItemData:
  """
  Attributes:
   - positionItemId
   - quantity
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'positionItemId', None, None, ), # 1
    (2, TType.I32, 'quantity', None, None, ), # 2
  )

  def __init__(self, positionItemId=None, quantity=None,):
    self.positionItemId = positionItemId
    self.quantity = quantity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionItemData')
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 1)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 2)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class MergeComposeLegData:
  """
  Attributes:
   - positionItemId
   - sledContractId
   - quantity
   - price
   - diretion
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'positionItemId', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
    (3, TType.I32, 'quantity', None, None, ), # 3
    (4, TType.DOUBLE, 'price', None, None, ), # 4
    (5, TType.I32, 'diretion', None, None, ), # 5
  )

  def __init__(self, positionItemId=None, sledContractId=None, quantity=None, price=None, diretion=None,):
    self.positionItemId = positionItemId
    self.sledContractId = sledContractId
    self.quantity = quantity
    self.price = price
    self.diretion = diretion

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.price = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.diretion = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MergeComposeLegData')
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 1)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 3)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.price is not None:
      oprot.writeFieldBegin('price', TType.DOUBLE, 4)
      oprot.writeDouble(self.price)
      oprot.writeFieldEnd()
    if self.diretion is not None:
      oprot.writeFieldBegin('diretion', TType.I32, 5)
      oprot.writeI32(self.diretion)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatMergeToComposeReq:
  """
  Attributes:
   - subAccountId
   - composeGraphId
   - composePrice
   - volume
   - diretion
   - mergeComposeLegDataList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'composeGraphId', None, None, ), # 2
    (3, TType.DOUBLE, 'composePrice', None, None, ), # 3
    (4, TType.I32, 'volume', None, None, ), # 4
    (5, TType.I32, 'diretion', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'mergeComposeLegDataList', (TType.STRUCT,(MergeComposeLegData, MergeComposeLegData.thrift_spec)), None, ), # 10
  )

  def __init__(self, subAccountId=None, composeGraphId=None, composePrice=None, volume=None, diretion=None, mergeComposeLegDataList=None,):
    self.subAccountId = subAccountId
    self.composeGraphId = composeGraphId
    self.composePrice = composePrice
    self.volume = volume
    self.diretion = diretion
    self.mergeComposeLegDataList = mergeComposeLegDataList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.composeGraphId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.composePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.volume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.diretion = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.mergeComposeLegDataList = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = MergeComposeLegData()
            _elem35.read(iprot)
            self.mergeComposeLegDataList.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatMergeToComposeReq')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.composeGraphId is not None:
      oprot.writeFieldBegin('composeGraphId', TType.I64, 2)
      oprot.writeI64(self.composeGraphId)
      oprot.writeFieldEnd()
    if self.composePrice is not None:
      oprot.writeFieldBegin('composePrice', TType.DOUBLE, 3)
      oprot.writeDouble(self.composePrice)
      oprot.writeFieldEnd()
    if self.volume is not None:
      oprot.writeFieldBegin('volume', TType.I32, 4)
      oprot.writeI32(self.volume)
      oprot.writeFieldEnd()
    if self.diretion is not None:
      oprot.writeFieldBegin('diretion', TType.I32, 5)
      oprot.writeI32(self.diretion)
      oprot.writeFieldEnd()
    if self.mergeComposeLegDataList is not None:
      oprot.writeFieldBegin('mergeComposeLegDataList', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.mergeComposeLegDataList))
      for iter36 in self.mergeComposeLegDataList:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DisassembleComposePositionReq:
  """
  Attributes:
   - subAccountId
   - targetKey
   - positionItemDataList
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.LIST, 'positionItemDataList', (TType.STRUCT,(PositionItemData, PositionItemData.thrift_spec)), None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, targetKey=None, positionItemDataList=None, targetType=None,):
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.positionItemDataList = positionItemDataList
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.positionItemDataList = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = PositionItemData()
            _elem42.read(iprot)
            self.positionItemDataList.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DisassembleComposePositionReq')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.positionItemDataList is not None:
      oprot.writeFieldBegin('positionItemDataList', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.positionItemDataList))
      for iter43 in self.positionItemDataList:
        iter43.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ClosedPositionDetailItem:
  """
  Attributes:
   - positionItemId
   - closedVolume
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'positionItemId', None, None, ), # 1
    (2, TType.I32, 'closedVolume', None, None, ), # 2
  )

  def __init__(self, positionItemId=None, closedVolume=None,):
    self.positionItemId = positionItemId
    self.closedVolume = closedVolume

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.closedVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ClosedPositionDetailItem')
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 1)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.closedVolume is not None:
      oprot.writeFieldBegin('closedVolume', TType.I32, 2)
      oprot.writeI32(self.closedVolume)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class BatchClosedPositionReq:
  """
  Attributes:
   - subAccountId
   - targetKey
   - closedPositionDetailItems
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.LIST, 'closedPositionDetailItems', (TType.STRUCT,(ClosedPositionDetailItem, ClosedPositionDetailItem.thrift_spec)), None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, targetKey=None, closedPositionDetailItems=None, targetType=None,):
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.closedPositionDetailItems = closedPositionDetailItems
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.closedPositionDetailItems = []
          (_etype47, _size44) = iprot.readListBegin()
          for _i48 in xrange(_size44):
            _elem49 = ClosedPositionDetailItem()
            _elem49.read(iprot)
            self.closedPositionDetailItems.append(_elem49)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BatchClosedPositionReq')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.closedPositionDetailItems is not None:
      oprot.writeFieldBegin('closedPositionDetailItems', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.closedPositionDetailItems))
      for iter50 in self.closedPositionDetailItems:
        iter50.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionSummaryPage:
  """
  Attributes:
   - totalNum
   - statPositionSummaryList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statPositionSummaryList', (TType.STRUCT,(StatPositionSummary, StatPositionSummary.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statPositionSummaryList=None,):
    self.totalNum = totalNum
    self.statPositionSummaryList = statPositionSummaryList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statPositionSummaryList = []
          (_etype54, _size51) = iprot.readListBegin()
          for _i55 in xrange(_size51):
            _elem56 = StatPositionSummary()
            _elem56.read(iprot)
            self.statPositionSummaryList.append(_elem56)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionSummaryPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statPositionSummaryList is not None:
      oprot.writeFieldBegin('statPositionSummaryList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statPositionSummaryList))
      for iter57 in self.statPositionSummaryList:
        iter57.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionSummaryExPage:
  """
  Attributes:
   - totalNum
   - statPositionSummaryExList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statPositionSummaryExList', (TType.STRUCT,(StatPositionSummaryEx, StatPositionSummaryEx.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statPositionSummaryExList=None,):
    self.totalNum = totalNum
    self.statPositionSummaryExList = statPositionSummaryExList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statPositionSummaryExList = []
          (_etype61, _size58) = iprot.readListBegin()
          for _i62 in xrange(_size58):
            _elem63 = StatPositionSummaryEx()
            _elem63.read(iprot)
            self.statPositionSummaryExList.append(_elem63)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionSummaryExPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statPositionSummaryExList is not None:
      oprot.writeFieldBegin('statPositionSummaryExList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statPositionSummaryExList))
      for iter64 in self.statPositionSummaryExList:
        iter64.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatPositionSummaryOption:
  """
  Attributes:
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.I32, 'targetType', None, None, ), # 3
  )

  def __init__(self, subAccountId=None, targetKey=None, targetType=None,):
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatPositionSummaryOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 3)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.subAccountId is None:
      raise TProtocol.TProtocolException(message='Required field subAccountId is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionItemPage:
  """
  Attributes:
   - totalNum
   - statPositionItemList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statPositionItemList', (TType.STRUCT,(StatPositionItem, StatPositionItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statPositionItemList=None,):
    self.totalNum = totalNum
    self.statPositionItemList = statPositionItemList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statPositionItemList = []
          (_etype68, _size65) = iprot.readListBegin()
          for _i69 in xrange(_size65):
            _elem70 = StatPositionItem()
            _elem70.read(iprot)
            self.statPositionItemList.append(_elem70)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionItemPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statPositionItemList is not None:
      oprot.writeFieldBegin('statPositionItemList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statPositionItemList))
      for iter71 in self.statPositionItemList:
        iter71.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatPositionItemOption:
  """
  Attributes:
   - subAccountId
   - positionItemId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'positionItemId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, positionItemId=None, targetKey=None, targetType=None,):
    self.subAccountId = subAccountId
    self.positionItemId = positionItemId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatPositionItemOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 2)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedPositionDateSummaryPage:
  """
  Attributes:
   - totalNum
   - statClosedPositionDateSummaryList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statClosedPositionDateSummaryList', (TType.STRUCT,(StatClosedPositionDateSummary, StatClosedPositionDateSummary.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statClosedPositionDateSummaryList=None,):
    self.totalNum = totalNum
    self.statClosedPositionDateSummaryList = statClosedPositionDateSummaryList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statClosedPositionDateSummaryList = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = StatClosedPositionDateSummary()
            _elem77.read(iprot)
            self.statClosedPositionDateSummaryList.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedPositionDateSummaryPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statClosedPositionDateSummaryList is not None:
      oprot.writeFieldBegin('statClosedPositionDateSummaryList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statClosedPositionDateSummaryList))
      for iter78 in self.statClosedPositionDateSummaryList:
        iter78.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatClosedPositionDateSummaryOption:
  """
  Attributes:
   - subAccountId
   - targetKey
   - targetType
   - archiveStartDateTimestampMs
   - archiveEndDateTimestampMs
   - archivedDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.I32, 'targetType', None, None, ), # 3
    None, # 4
    None, # 5
    None, # 6
    (7, TType.I64, 'archiveStartDateTimestampMs', None, None, ), # 7
    (8, TType.I64, 'archiveEndDateTimestampMs', None, None, ), # 8
    (9, TType.I64, 'archivedDateTimestampMs', None, None, ), # 9
  )

  def __init__(self, subAccountId=None, targetKey=None, targetType=None, archiveStartDateTimestampMs=None, archiveEndDateTimestampMs=None, archivedDateTimestampMs=None,):
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.archiveStartDateTimestampMs = archiveStartDateTimestampMs
    self.archiveEndDateTimestampMs = archiveEndDateTimestampMs
    self.archivedDateTimestampMs = archivedDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.archiveStartDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.archiveEndDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.archivedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatClosedPositionDateSummaryOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 3)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.archiveStartDateTimestampMs is not None:
      oprot.writeFieldBegin('archiveStartDateTimestampMs', TType.I64, 7)
      oprot.writeI64(self.archiveStartDateTimestampMs)
      oprot.writeFieldEnd()
    if self.archiveEndDateTimestampMs is not None:
      oprot.writeFieldBegin('archiveEndDateTimestampMs', TType.I64, 8)
      oprot.writeI64(self.archiveEndDateTimestampMs)
      oprot.writeFieldEnd()
    if self.archivedDateTimestampMs is not None:
      oprot.writeFieldBegin('archivedDateTimestampMs', TType.I64, 9)
      oprot.writeI64(self.archivedDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatClosedPositionDetail:
  """
  Attributes:
   - totalNum
   - statClosedPositionItemList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statClosedPositionItemList', (TType.STRUCT,(StatClosedPositionItem, StatClosedPositionItem.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statClosedPositionItemList=None,):
    self.totalNum = totalNum
    self.statClosedPositionItemList = statClosedPositionItemList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statClosedPositionItemList = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = StatClosedPositionItem()
            _elem84.read(iprot)
            self.statClosedPositionItemList.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatClosedPositionDetail')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statClosedPositionItemList is not None:
      oprot.writeFieldBegin('statClosedPositionItemList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statClosedPositionItemList))
      for iter85 in self.statClosedPositionItemList:
        iter85.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatClosedPositionItemOption:
  """
  Attributes:
   - closedId
   - subAccountId
   - targetKey
   - targetType
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'closedId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.STRING, 'targetKey', None, None, ), # 3
    (4, TType.I32, 'targetType', None, None, ), # 4
  )

  def __init__(self, closedId=None, subAccountId=None, targetKey=None, targetType=None,):
    self.closedId = closedId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.closedId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatClosedPositionItemOption')
    if self.closedId is not None:
      oprot.writeFieldBegin('closedId', TType.I64, 1)
      oprot.writeI64(self.closedId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 3)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 4)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatArchiveItemOption:
  """
  Attributes:
   - closedId
   - subAccountId
   - targetKey
   - targetType
   - archiveStartDateTimestampMs
   - archiveEndDateTimestampMs
   - archivedDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'closedId', None, None, ), # 1
    None, # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.STRING, 'targetKey', None, None, ), # 4
    (5, TType.I32, 'targetType', None, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'archiveStartDateTimestampMs', None, None, ), # 10
    (11, TType.I64, 'archiveEndDateTimestampMs', None, None, ), # 11
    (12, TType.I64, 'archivedDateTimestampMs', None, None, ), # 12
  )

  def __init__(self, closedId=None, subAccountId=None, targetKey=None, targetType=None, archiveStartDateTimestampMs=None, archiveEndDateTimestampMs=None, archivedDateTimestampMs=None,):
    self.closedId = closedId
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.archiveStartDateTimestampMs = archiveStartDateTimestampMs
    self.archiveEndDateTimestampMs = archiveEndDateTimestampMs
    self.archivedDateTimestampMs = archivedDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.closedId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.archiveStartDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.archiveEndDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.archivedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatArchiveItemOption')
    if self.closedId is not None:
      oprot.writeFieldBegin('closedId', TType.I64, 1)
      oprot.writeI64(self.closedId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 4)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 5)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.archiveStartDateTimestampMs is not None:
      oprot.writeFieldBegin('archiveStartDateTimestampMs', TType.I64, 10)
      oprot.writeI64(self.archiveStartDateTimestampMs)
      oprot.writeFieldEnd()
    if self.archiveEndDateTimestampMs is not None:
      oprot.writeFieldBegin('archiveEndDateTimestampMs', TType.I64, 11)
      oprot.writeI64(self.archiveEndDateTimestampMs)
      oprot.writeFieldEnd()
    if self.archivedDateTimestampMs is not None:
      oprot.writeFieldBegin('archivedDateTimestampMs', TType.I64, 12)
      oprot.writeI64(self.archivedDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryStatPositionUnitOption:
  """
  Attributes:
   - subAccountId
   - positionItemId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'positionItemId', None, None, ), # 2
  )

  def __init__(self, subAccountId=None, positionItemId=None,):
    self.subAccountId = subAccountId
    self.positionItemId = positionItemId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.positionItemId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryStatPositionUnitOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.positionItemId is not None:
      oprot.writeFieldBegin('positionItemId', TType.I64, 2)
      oprot.writeI64(self.positionItemId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatPositionUnitPage:
  """
  Attributes:
   - totalNum
   - statPositionUnitList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'statPositionUnitList', (TType.STRUCT,(StatPositionUnit, StatPositionUnit.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, statPositionUnitList=None,):
    self.totalNum = totalNum
    self.statPositionUnitList = statPositionUnitList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.statPositionUnitList = []
          (_etype89, _size86) = iprot.readListBegin()
          for _i90 in xrange(_size86):
            _elem91 = StatPositionUnit()
            _elem91.read(iprot)
            self.statPositionUnitList.append(_elem91)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatPositionUnitPage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.statPositionUnitList is not None:
      oprot.writeFieldBegin('statPositionUnitList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.statPositionUnitList))
      for iter92 in self.statPositionUnitList:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryHistoryClosedPositionOption:
  """
  Attributes:
   - subAccountId
   - targetKey
   - targetType
   - closedDateTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'targetKey', None, None, ), # 2
    (3, TType.I32, 'targetType', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.I64, 'closedDateTimestampMs', None, None, ), # 6
  )

  def __init__(self, subAccountId=None, targetKey=None, targetType=None, closedDateTimestampMs=None,):
    self.subAccountId = subAccountId
    self.targetKey = targetKey
    self.targetType = targetType
    self.closedDateTimestampMs = closedDateTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.targetKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.targetType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.closedDateTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryHistoryClosedPositionOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.targetKey is not None:
      oprot.writeFieldBegin('targetKey', TType.STRING, 2)
      oprot.writeString(self.targetKey)
      oprot.writeFieldEnd()
    if self.targetType is not None:
      oprot.writeFieldBegin('targetType', TType.I32, 3)
      oprot.writeI32(self.targetType)
      oprot.writeFieldEnd()
    if self.closedDateTimestampMs is not None:
      oprot.writeFieldBegin('closedDateTimestampMs', TType.I64, 6)
      oprot.writeI64(self.closedDateTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
