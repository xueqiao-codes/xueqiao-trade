#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import xueqiao.trade.hosting.ttypes
import page.ttypes
import xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HostingSubAccountMoneyRecordDirection:
  """
  出入金方向
  """
  DEPOSIT = 1
  WITHDRAW = 2

  _VALUES_TO_NAMES = {
    1: "DEPOSIT",
    2: "WITHDRAW",
  }

  _NAMES_TO_VALUES = {
    "DEPOSIT": 1,
    "WITHDRAW": 2,
  }

class CalculateMode:
  """
  手续费, 保证金的计算方式(来源: 商品信息或者用户设置)
  """
  PERCENTAGE = 1
  QUOTA = 2
  COMBINE = 3

  _VALUES_TO_NAMES = {
    1: "PERCENTAGE",
    2: "QUOTA",
    3: "COMBINE",
  }

  _NAMES_TO_VALUES = {
    "PERCENTAGE": 1,
    "QUOTA": 2,
    "COMBINE": 3,
  }

class TradeDetailSource:
  XQ_TRADE = 0
  ASSIGN = 1

  _VALUES_TO_NAMES = {
    0: "XQ_TRADE",
    1: "ASSIGN",
  }

  _NAMES_TO_VALUES = {
    "XQ_TRADE": 0,
    "ASSIGN": 1,
  }


class HostingSubAccountFund:
  """
  托管机子账户资金信息

  Attributes:
   - subAccountId
   - currency
   - balance
   - depositAmount
   - withdrawAmount
   - creditAmount
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'currency', None, None, ), # 2
    (3, TType.DOUBLE, 'balance', None, None, ), # 3
    None, # 4
    None, # 5
    (6, TType.DOUBLE, 'depositAmount', None, None, ), # 6
    (7, TType.DOUBLE, 'withdrawAmount', None, None, ), # 7
    (8, TType.DOUBLE, 'creditAmount', None, None, ), # 8
    None, # 9
    (10, TType.I64, 'createTimestampMs', None, None, ), # 10
    (11, TType.I64, 'lastModifyTimestampMs', None, None, ), # 11
  )

  def __init__(self, subAccountId=None, currency=None, balance=None, depositAmount=None, withdrawAmount=None, creditAmount=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.currency = currency
    self.balance = balance
    self.depositAmount = depositAmount
    self.withdrawAmount = withdrawAmount
    self.creditAmount = creditAmount
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.balance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.depositAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.withdrawAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.creditAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSubAccountFund')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 2)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.DOUBLE, 3)
      oprot.writeDouble(self.balance)
      oprot.writeFieldEnd()
    if self.depositAmount is not None:
      oprot.writeFieldBegin('depositAmount', TType.DOUBLE, 6)
      oprot.writeDouble(self.depositAmount)
      oprot.writeFieldEnd()
    if self.withdrawAmount is not None:
      oprot.writeFieldBegin('withdrawAmount', TType.DOUBLE, 7)
      oprot.writeDouble(self.withdrawAmount)
      oprot.writeFieldEnd()
    if self.creditAmount is not None:
      oprot.writeFieldBegin('creditAmount', TType.DOUBLE, 8)
      oprot.writeDouble(self.creditAmount)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 10)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 11)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSubAccountMoneyRecord:
  """
  托管机出入金记录

  Attributes:
   - subAccountId
   - direction
   - totalAmount
   - depositAmountBefore
   - depositAmountAfter
   - withdrawAmountBefore
   - withdrawAmountAfter
   - recordTimestampMs
   - ticket
   - currency
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I32, 'direction', None, None, ), # 2
    (3, TType.DOUBLE, 'totalAmount', None, None, ), # 3
    None, # 4
    (5, TType.DOUBLE, 'depositAmountBefore', None, None, ), # 5
    (6, TType.DOUBLE, 'depositAmountAfter', None, None, ), # 6
    (7, TType.DOUBLE, 'withdrawAmountBefore', None, None, ), # 7
    (8, TType.DOUBLE, 'withdrawAmountAfter', None, None, ), # 8
    (9, TType.I64, 'recordTimestampMs', None, None, ), # 9
    (10, TType.STRING, 'ticket', None, None, ), # 10
    (11, TType.STRING, 'currency', None, None, ), # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastModifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, subAccountId=None, direction=None, totalAmount=None, depositAmountBefore=None, depositAmountAfter=None, withdrawAmountBefore=None, withdrawAmountAfter=None, recordTimestampMs=None, ticket=None, currency=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.direction = direction
    self.totalAmount = totalAmount
    self.depositAmountBefore = depositAmountBefore
    self.depositAmountAfter = depositAmountAfter
    self.withdrawAmountBefore = withdrawAmountBefore
    self.withdrawAmountAfter = withdrawAmountAfter
    self.recordTimestampMs = recordTimestampMs
    self.ticket = ticket
    self.currency = currency
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.totalAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.depositAmountBefore = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.depositAmountAfter = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.withdrawAmountBefore = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.withdrawAmountAfter = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.recordTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ticket = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSubAccountMoneyRecord')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 2)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.totalAmount is not None:
      oprot.writeFieldBegin('totalAmount', TType.DOUBLE, 3)
      oprot.writeDouble(self.totalAmount)
      oprot.writeFieldEnd()
    if self.depositAmountBefore is not None:
      oprot.writeFieldBegin('depositAmountBefore', TType.DOUBLE, 5)
      oprot.writeDouble(self.depositAmountBefore)
      oprot.writeFieldEnd()
    if self.depositAmountAfter is not None:
      oprot.writeFieldBegin('depositAmountAfter', TType.DOUBLE, 6)
      oprot.writeDouble(self.depositAmountAfter)
      oprot.writeFieldEnd()
    if self.withdrawAmountBefore is not None:
      oprot.writeFieldBegin('withdrawAmountBefore', TType.DOUBLE, 7)
      oprot.writeDouble(self.withdrawAmountBefore)
      oprot.writeFieldEnd()
    if self.withdrawAmountAfter is not None:
      oprot.writeFieldBegin('withdrawAmountAfter', TType.DOUBLE, 8)
      oprot.writeDouble(self.withdrawAmountAfter)
      oprot.writeFieldEnd()
    if self.recordTimestampMs is not None:
      oprot.writeFieldBegin('recordTimestampMs', TType.I64, 9)
      oprot.writeI64(self.recordTimestampMs)
      oprot.writeFieldEnd()
    if self.ticket is not None:
      oprot.writeFieldBegin('ticket', TType.STRING, 10)
      oprot.writeString(self.ticket)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 11)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Margin:
  """
  Attributes:
   - longMarginRatioByMoney
   - longMarginRatioByVolume
   - shortMarginRatioByMoney
   - shortMarginRatioByVolume
   - currency
   - currencyGroup
   - currencyRate
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'longMarginRatioByMoney', None, None, ), # 1
    (2, TType.DOUBLE, 'longMarginRatioByVolume', None, None, ), # 2
    (3, TType.DOUBLE, 'shortMarginRatioByMoney', None, None, ), # 3
    (4, TType.DOUBLE, 'shortMarginRatioByVolume', None, None, ), # 4
    (5, TType.STRING, 'currency', None, None, ), # 5
    (6, TType.STRING, 'currencyGroup', None, None, ), # 6
    (7, TType.DOUBLE, 'currencyRate', None, None, ), # 7
  )

  def __init__(self, longMarginRatioByMoney=None, longMarginRatioByVolume=None, shortMarginRatioByMoney=None, shortMarginRatioByVolume=None, currency=None, currencyGroup=None, currencyRate=None,):
    self.longMarginRatioByMoney = longMarginRatioByMoney
    self.longMarginRatioByVolume = longMarginRatioByVolume
    self.shortMarginRatioByMoney = shortMarginRatioByMoney
    self.shortMarginRatioByVolume = shortMarginRatioByVolume
    self.currency = currency
    self.currencyGroup = currencyGroup
    self.currencyRate = currencyRate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.longMarginRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.longMarginRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.shortMarginRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.shortMarginRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.currencyGroup = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.currencyRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Margin')
    if self.longMarginRatioByMoney is not None:
      oprot.writeFieldBegin('longMarginRatioByMoney', TType.DOUBLE, 1)
      oprot.writeDouble(self.longMarginRatioByMoney)
      oprot.writeFieldEnd()
    if self.longMarginRatioByVolume is not None:
      oprot.writeFieldBegin('longMarginRatioByVolume', TType.DOUBLE, 2)
      oprot.writeDouble(self.longMarginRatioByVolume)
      oprot.writeFieldEnd()
    if self.shortMarginRatioByMoney is not None:
      oprot.writeFieldBegin('shortMarginRatioByMoney', TType.DOUBLE, 3)
      oprot.writeDouble(self.shortMarginRatioByMoney)
      oprot.writeFieldEnd()
    if self.shortMarginRatioByVolume is not None:
      oprot.writeFieldBegin('shortMarginRatioByVolume', TType.DOUBLE, 4)
      oprot.writeDouble(self.shortMarginRatioByVolume)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 5)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.currencyGroup is not None:
      oprot.writeFieldBegin('currencyGroup', TType.STRING, 6)
      oprot.writeString(self.currencyGroup)
      oprot.writeFieldEnd()
    if self.currencyRate is not None:
      oprot.writeFieldBegin('currencyRate', TType.DOUBLE, 7)
      oprot.writeDouble(self.currencyRate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CommissionFee:
  """
  Attributes:
   - openRatioByMoney
   - openRatioByVolume
   - closeRatioByMoney
   - closeRatioByVolume
   - closeTodayRatioByMoney
   - closeTodayRatioByVolume
   - currency
   - currencyGroup
   - currencyRate
  """

  thrift_spec = (
    None, # 0
    (1, TType.DOUBLE, 'openRatioByMoney', None, None, ), # 1
    (2, TType.DOUBLE, 'openRatioByVolume', None, None, ), # 2
    (3, TType.DOUBLE, 'closeRatioByMoney', None, None, ), # 3
    (4, TType.DOUBLE, 'closeRatioByVolume', None, None, ), # 4
    (5, TType.DOUBLE, 'closeTodayRatioByMoney', None, None, ), # 5
    (6, TType.DOUBLE, 'closeTodayRatioByVolume', None, None, ), # 6
    (7, TType.STRING, 'currency', None, None, ), # 7
    (8, TType.STRING, 'currencyGroup', None, None, ), # 8
    (9, TType.DOUBLE, 'currencyRate', None, None, ), # 9
  )

  def __init__(self, openRatioByMoney=None, openRatioByVolume=None, closeRatioByMoney=None, closeRatioByVolume=None, closeTodayRatioByMoney=None, closeTodayRatioByVolume=None, currency=None, currencyGroup=None, currencyRate=None,):
    self.openRatioByMoney = openRatioByMoney
    self.openRatioByVolume = openRatioByVolume
    self.closeRatioByMoney = closeRatioByMoney
    self.closeRatioByVolume = closeRatioByVolume
    self.closeTodayRatioByMoney = closeTodayRatioByMoney
    self.closeTodayRatioByVolume = closeTodayRatioByVolume
    self.currency = currency
    self.currencyGroup = currencyGroup
    self.currencyRate = currencyRate

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.DOUBLE:
          self.openRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.openRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.closeRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.closeRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.closeTodayRatioByMoney = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.closeTodayRatioByVolume = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.currencyGroup = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.currencyRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CommissionFee')
    if self.openRatioByMoney is not None:
      oprot.writeFieldBegin('openRatioByMoney', TType.DOUBLE, 1)
      oprot.writeDouble(self.openRatioByMoney)
      oprot.writeFieldEnd()
    if self.openRatioByVolume is not None:
      oprot.writeFieldBegin('openRatioByVolume', TType.DOUBLE, 2)
      oprot.writeDouble(self.openRatioByVolume)
      oprot.writeFieldEnd()
    if self.closeRatioByMoney is not None:
      oprot.writeFieldBegin('closeRatioByMoney', TType.DOUBLE, 3)
      oprot.writeDouble(self.closeRatioByMoney)
      oprot.writeFieldEnd()
    if self.closeRatioByVolume is not None:
      oprot.writeFieldBegin('closeRatioByVolume', TType.DOUBLE, 4)
      oprot.writeDouble(self.closeRatioByVolume)
      oprot.writeFieldEnd()
    if self.closeTodayRatioByMoney is not None:
      oprot.writeFieldBegin('closeTodayRatioByMoney', TType.DOUBLE, 5)
      oprot.writeDouble(self.closeTodayRatioByMoney)
      oprot.writeFieldEnd()
    if self.closeTodayRatioByVolume is not None:
      oprot.writeFieldBegin('closeTodayRatioByVolume', TType.DOUBLE, 6)
      oprot.writeDouble(self.closeTodayRatioByVolume)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 7)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.currencyGroup is not None:
      oprot.writeFieldBegin('currencyGroup', TType.STRING, 8)
      oprot.writeString(self.currencyGroup)
      oprot.writeFieldEnd()
    if self.currencyRate is not None:
      oprot.writeFieldBegin('currencyRate', TType.DOUBLE, 9)
      oprot.writeDouble(self.currencyRate)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AssetCalculateConfig:
  """
  计算参数
  成交时的商品设置信息, 做存档排查(来源: 商品信息或者用户设置)

  Attributes:
   - sledCommodityId
   - currency
   - contractSize
   - chargeUnit
   - commissionFee
   - margin
   - sledContractId
   - openCloseFee
   - initialMargin
   - sellInitialMargin
   - commissionCalculateMode
   - marginCalculateMode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledCommodityId', None, None, ), # 1
    (2, TType.STRING, 'currency', None, None, ), # 2
    (3, TType.DOUBLE, 'contractSize', None, None, ), # 3
    (4, TType.DOUBLE, 'chargeUnit', None, None, ), # 4
    (5, TType.DOUBLE, 'openCloseFee', None, None, ), # 5
    (6, TType.DOUBLE, 'initialMargin', None, None, ), # 6
    (7, TType.DOUBLE, 'sellInitialMargin', None, None, ), # 7
    (8, TType.I32, 'commissionCalculateMode', None, None, ), # 8
    (9, TType.I32, 'marginCalculateMode', None, None, ), # 9
    (10, TType.STRUCT, 'commissionFee', (CommissionFee, CommissionFee.thrift_spec), None, ), # 10
    (11, TType.STRUCT, 'margin', (Margin, Margin.thrift_spec), None, ), # 11
    (12, TType.I64, 'sledContractId', None, None, ), # 12
  )

  def __init__(self, sledCommodityId=None, currency=None, contractSize=None, chargeUnit=None, commissionFee=None, margin=None, sledContractId=None, openCloseFee=None, initialMargin=None, sellInitialMargin=None, commissionCalculateMode=None, marginCalculateMode=None,):
    self.sledCommodityId = sledCommodityId
    self.currency = currency
    self.contractSize = contractSize
    self.chargeUnit = chargeUnit
    self.commissionFee = commissionFee
    self.margin = margin
    self.sledContractId = sledContractId
    self.openCloseFee = openCloseFee
    self.initialMargin = initialMargin
    self.sellInitialMargin = sellInitialMargin
    self.commissionCalculateMode = commissionCalculateMode
    self.marginCalculateMode = marginCalculateMode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.contractSize = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.chargeUnit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRUCT:
          self.commissionFee = CommissionFee()
          self.commissionFee.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.margin = Margin()
          self.margin.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.openCloseFee = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.initialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.sellInitialMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.commissionCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.marginCalculateMode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AssetCalculateConfig')
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 1)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 2)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.contractSize is not None:
      oprot.writeFieldBegin('contractSize', TType.DOUBLE, 3)
      oprot.writeDouble(self.contractSize)
      oprot.writeFieldEnd()
    if self.chargeUnit is not None:
      oprot.writeFieldBegin('chargeUnit', TType.DOUBLE, 4)
      oprot.writeDouble(self.chargeUnit)
      oprot.writeFieldEnd()
    if self.openCloseFee is not None:
      oprot.writeFieldBegin('openCloseFee', TType.DOUBLE, 5)
      oprot.writeDouble(self.openCloseFee)
      oprot.writeFieldEnd()
    if self.initialMargin is not None:
      oprot.writeFieldBegin('initialMargin', TType.DOUBLE, 6)
      oprot.writeDouble(self.initialMargin)
      oprot.writeFieldEnd()
    if self.sellInitialMargin is not None:
      oprot.writeFieldBegin('sellInitialMargin', TType.DOUBLE, 7)
      oprot.writeDouble(self.sellInitialMargin)
      oprot.writeFieldEnd()
    if self.commissionCalculateMode is not None:
      oprot.writeFieldBegin('commissionCalculateMode', TType.I32, 8)
      oprot.writeI32(self.commissionCalculateMode)
      oprot.writeFieldEnd()
    if self.marginCalculateMode is not None:
      oprot.writeFieldBegin('marginCalculateMode', TType.I32, 9)
      oprot.writeI32(self.marginCalculateMode)
      oprot.writeFieldEnd()
    if self.commissionFee is not None:
      oprot.writeFieldBegin('commissionFee', TType.STRUCT, 10)
      self.commissionFee.write(oprot)
      oprot.writeFieldEnd()
    if self.margin is not None:
      oprot.writeFieldBegin('margin', TType.STRUCT, 11)
      self.margin.write(oprot)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 12)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AssetTradeDetail:
  """
  资源结算层面的成交明细（从成交列表中的成交明细转换成适合结算用的成交明细）

  Attributes:
   - execTradeId
   - subAccountId
   - sledContractId
   - execOrderId
   - tradePrice
   - tradeVolume
   - execTradeDirection
   - createTimestampMs
   - lastmodifyTimestampMs
   - sledCommodityId
   - config
   - orderTotalVolume
   - limitPrice
   - source
   - tradeAccountId
   - tradeTimestampMs
   - assetTradeDetailId
   - subUserId
   - sledOrderId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'execTradeId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'sledContractId', None, None, ), # 3
    (4, TType.I64, 'execOrderId', None, None, ), # 4
    (5, TType.DOUBLE, 'tradePrice', None, None, ), # 5
    (6, TType.I32, 'tradeVolume', None, None, ), # 6
    (7, TType.I32, 'execTradeDirection', None, None, ), # 7
    (8, TType.I64, 'createTimestampMs', None, None, ), # 8
    (9, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 9
    (10, TType.I64, 'sledCommodityId', None, None, ), # 10
    (11, TType.STRUCT, 'config', (AssetCalculateConfig, AssetCalculateConfig.thrift_spec), None, ), # 11
    (12, TType.I32, 'orderTotalVolume', None, None, ), # 12
    (13, TType.DOUBLE, 'limitPrice', None, None, ), # 13
    (14, TType.STRING, 'source', None, None, ), # 14
    (15, TType.I64, 'tradeAccountId', None, None, ), # 15
    (16, TType.I64, 'tradeTimestampMs', None, None, ), # 16
    (17, TType.I64, 'assetTradeDetailId', None, None, ), # 17
    (18, TType.I32, 'subUserId', None, None, ), # 18
    (19, TType.STRING, 'sledOrderId', None, None, ), # 19
  )

  def __init__(self, execTradeId=None, subAccountId=None, sledContractId=None, execOrderId=None, tradePrice=None, tradeVolume=None, execTradeDirection=None, createTimestampMs=None, lastmodifyTimestampMs=None, sledCommodityId=None, config=None, orderTotalVolume=None, limitPrice=None, source=None, tradeAccountId=None, tradeTimestampMs=None, assetTradeDetailId=None, subUserId=None, sledOrderId=None,):
    self.execTradeId = execTradeId
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId
    self.execOrderId = execOrderId
    self.tradePrice = tradePrice
    self.tradeVolume = tradeVolume
    self.execTradeDirection = execTradeDirection
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs
    self.sledCommodityId = sledCommodityId
    self.config = config
    self.orderTotalVolume = orderTotalVolume
    self.limitPrice = limitPrice
    self.source = source
    self.tradeAccountId = tradeAccountId
    self.tradeTimestampMs = tradeTimestampMs
    self.assetTradeDetailId = assetTradeDetailId
    self.subUserId = subUserId
    self.sledOrderId = sledOrderId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.execTradeId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.execOrderId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.tradePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.tradeVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.execTradeDirection = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRUCT:
          self.config = AssetCalculateConfig()
          self.config.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.orderTotalVolume = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.limitPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.source = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I64:
          self.tradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I64:
          self.assetTradeDetailId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.subUserId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.sledOrderId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AssetTradeDetail')
    if self.execTradeId is not None:
      oprot.writeFieldBegin('execTradeId', TType.I64, 1)
      oprot.writeI64(self.execTradeId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 3)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.execOrderId is not None:
      oprot.writeFieldBegin('execOrderId', TType.I64, 4)
      oprot.writeI64(self.execOrderId)
      oprot.writeFieldEnd()
    if self.tradePrice is not None:
      oprot.writeFieldBegin('tradePrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.tradePrice)
      oprot.writeFieldEnd()
    if self.tradeVolume is not None:
      oprot.writeFieldBegin('tradeVolume', TType.I32, 6)
      oprot.writeI32(self.tradeVolume)
      oprot.writeFieldEnd()
    if self.execTradeDirection is not None:
      oprot.writeFieldBegin('execTradeDirection', TType.I32, 7)
      oprot.writeI32(self.execTradeDirection)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 8)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 9)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 10)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.config is not None:
      oprot.writeFieldBegin('config', TType.STRUCT, 11)
      self.config.write(oprot)
      oprot.writeFieldEnd()
    if self.orderTotalVolume is not None:
      oprot.writeFieldBegin('orderTotalVolume', TType.I32, 12)
      oprot.writeI32(self.orderTotalVolume)
      oprot.writeFieldEnd()
    if self.limitPrice is not None:
      oprot.writeFieldBegin('limitPrice', TType.DOUBLE, 13)
      oprot.writeDouble(self.limitPrice)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 14)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 15)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.tradeTimestampMs is not None:
      oprot.writeFieldBegin('tradeTimestampMs', TType.I64, 16)
      oprot.writeI64(self.tradeTimestampMs)
      oprot.writeFieldEnd()
    if self.assetTradeDetailId is not None:
      oprot.writeFieldBegin('assetTradeDetailId', TType.I64, 17)
      oprot.writeI64(self.assetTradeDetailId)
      oprot.writeFieldEnd()
    if self.subUserId is not None:
      oprot.writeFieldBegin('subUserId', TType.I32, 18)
      oprot.writeI32(self.subUserId)
      oprot.writeFieldEnd()
    if self.sledOrderId is not None:
      oprot.writeFieldBegin('sledOrderId', TType.STRING, 19)
      oprot.writeString(self.sledOrderId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettlementPositionDetail:
  """
  子账号合约持仓结算明细

  Attributes:
   - settlementId
   - sledContractId
   - subAccountId
   - position
   - positionAvgPrice
   - positionProfit
   - calculatePrice
   - currency
   - sledCommodityId
   - prevPosition
   - longPosition
   - shortPosition
   - closeProfit
   - goodsValue
   - leverage
   - useMargin
   - useCommission
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'settlementId', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
    (3, TType.I64, 'subAccountId', None, None, ), # 3
    (4, TType.I64, 'position', None, None, ), # 4
    (5, TType.DOUBLE, 'positionAvgPrice', None, None, ), # 5
    (6, TType.DOUBLE, 'positionProfit', None, None, ), # 6
    (7, TType.DOUBLE, 'calculatePrice', None, None, ), # 7
    None, # 8
    (9, TType.STRING, 'currency', None, None, ), # 9
    None, # 10
    (11, TType.I64, 'sledCommodityId', None, None, ), # 11
    (12, TType.I64, 'prevPosition', None, None, ), # 12
    (13, TType.I64, 'longPosition', None, None, ), # 13
    (14, TType.I64, 'shortPosition', None, None, ), # 14
    (15, TType.DOUBLE, 'closeProfit', None, None, ), # 15
    (16, TType.DOUBLE, 'goodsValue', None, None, ), # 16
    (17, TType.DOUBLE, 'leverage', None, None, ), # 17
    (18, TType.DOUBLE, 'useMargin', None, None, ), # 18
    (19, TType.DOUBLE, 'useCommission', None, None, ), # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'createTimestampMs', None, None, ), # 30
    (31, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 31
  )

  def __init__(self, settlementId=None, sledContractId=None, subAccountId=None, position=None, positionAvgPrice=None, positionProfit=None, calculatePrice=None, currency=None, sledCommodityId=None, prevPosition=None, longPosition=None, shortPosition=None, closeProfit=None, goodsValue=None, leverage=None, useMargin=None, useCommission=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.settlementId = settlementId
    self.sledContractId = sledContractId
    self.subAccountId = subAccountId
    self.position = position
    self.positionAvgPrice = positionAvgPrice
    self.positionProfit = positionProfit
    self.calculatePrice = calculatePrice
    self.currency = currency
    self.sledCommodityId = sledCommodityId
    self.prevPosition = prevPosition
    self.longPosition = longPosition
    self.shortPosition = shortPosition
    self.closeProfit = closeProfit
    self.goodsValue = goodsValue
    self.leverage = leverage
    self.useMargin = useMargin
    self.useCommission = useCommission
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.settlementId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.position = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.positionAvgPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.positionProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.calculatePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.prevPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I64:
          self.longPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.shortPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.goodsValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.leverage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.useMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.DOUBLE:
          self.useCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettlementPositionDetail')
    if self.settlementId is not None:
      oprot.writeFieldBegin('settlementId', TType.I64, 1)
      oprot.writeI64(self.settlementId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 3)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I64, 4)
      oprot.writeI64(self.position)
      oprot.writeFieldEnd()
    if self.positionAvgPrice is not None:
      oprot.writeFieldBegin('positionAvgPrice', TType.DOUBLE, 5)
      oprot.writeDouble(self.positionAvgPrice)
      oprot.writeFieldEnd()
    if self.positionProfit is not None:
      oprot.writeFieldBegin('positionProfit', TType.DOUBLE, 6)
      oprot.writeDouble(self.positionProfit)
      oprot.writeFieldEnd()
    if self.calculatePrice is not None:
      oprot.writeFieldBegin('calculatePrice', TType.DOUBLE, 7)
      oprot.writeDouble(self.calculatePrice)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 9)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 11)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.prevPosition is not None:
      oprot.writeFieldBegin('prevPosition', TType.I64, 12)
      oprot.writeI64(self.prevPosition)
      oprot.writeFieldEnd()
    if self.longPosition is not None:
      oprot.writeFieldBegin('longPosition', TType.I64, 13)
      oprot.writeI64(self.longPosition)
      oprot.writeFieldEnd()
    if self.shortPosition is not None:
      oprot.writeFieldBegin('shortPosition', TType.I64, 14)
      oprot.writeI64(self.shortPosition)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 15)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.goodsValue is not None:
      oprot.writeFieldBegin('goodsValue', TType.DOUBLE, 16)
      oprot.writeDouble(self.goodsValue)
      oprot.writeFieldEnd()
    if self.leverage is not None:
      oprot.writeFieldBegin('leverage', TType.DOUBLE, 17)
      oprot.writeDouble(self.leverage)
      oprot.writeFieldEnd()
    if self.useMargin is not None:
      oprot.writeFieldBegin('useMargin', TType.DOUBLE, 18)
      oprot.writeDouble(self.useMargin)
      oprot.writeFieldEnd()
    if self.useCommission is not None:
      oprot.writeFieldBegin('useCommission', TType.DOUBLE, 19)
      oprot.writeDouble(self.useCommission)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 30)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 31)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettlementFundDetail:
  """
  子账号资金结算时的资金明细

  Attributes:
   - settlementId
   - subAccountId
   - preFund
   - currency
   - settlementTimestamp
   - depositAmount
   - withdrawAmount
   - closeProfit
   - useMargin
   - useCommission
   - createTimestampMs
   - lastModifyTimestampMs
   - balance
   - exchangeRateHistoryId
   - goodsValue
   - leverage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'settlementId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.DOUBLE, 'preFund', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.I64, 'settlementTimestamp', None, None, ), # 5
    (6, TType.DOUBLE, 'depositAmount', None, None, ), # 6
    (7, TType.DOUBLE, 'withdrawAmount', None, None, ), # 7
    (8, TType.DOUBLE, 'closeProfit', None, None, ), # 8
    (9, TType.DOUBLE, 'useMargin', None, None, ), # 9
    (10, TType.DOUBLE, 'useCommission', None, None, ), # 10
    (11, TType.I64, 'createTimestampMs', None, None, ), # 11
    (12, TType.I64, 'lastModifyTimestampMs', None, None, ), # 12
    (13, TType.DOUBLE, 'balance', None, None, ), # 13
    (14, TType.I64, 'exchangeRateHistoryId', None, None, ), # 14
    None, # 15
    (16, TType.DOUBLE, 'goodsValue', None, None, ), # 16
    (17, TType.DOUBLE, 'leverage', None, None, ), # 17
  )

  def __init__(self, settlementId=None, subAccountId=None, preFund=None, currency=None, settlementTimestamp=None, depositAmount=None, withdrawAmount=None, closeProfit=None, useMargin=None, useCommission=None, createTimestampMs=None, lastModifyTimestampMs=None, balance=None, exchangeRateHistoryId=None, goodsValue=None, leverage=None,):
    self.settlementId = settlementId
    self.subAccountId = subAccountId
    self.preFund = preFund
    self.currency = currency
    self.settlementTimestamp = settlementTimestamp
    self.depositAmount = depositAmount
    self.withdrawAmount = withdrawAmount
    self.closeProfit = closeProfit
    self.useMargin = useMargin
    self.useCommission = useCommission
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs
    self.balance = balance
    self.exchangeRateHistoryId = exchangeRateHistoryId
    self.goodsValue = goodsValue
    self.leverage = leverage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.settlementId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.preFund = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.settlementTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.depositAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.withdrawAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.useMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.useCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.balance = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I64:
          self.exchangeRateHistoryId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.goodsValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.leverage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettlementFundDetail')
    if self.settlementId is not None:
      oprot.writeFieldBegin('settlementId', TType.I64, 1)
      oprot.writeI64(self.settlementId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.preFund is not None:
      oprot.writeFieldBegin('preFund', TType.DOUBLE, 3)
      oprot.writeDouble(self.preFund)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.settlementTimestamp is not None:
      oprot.writeFieldBegin('settlementTimestamp', TType.I64, 5)
      oprot.writeI64(self.settlementTimestamp)
      oprot.writeFieldEnd()
    if self.depositAmount is not None:
      oprot.writeFieldBegin('depositAmount', TType.DOUBLE, 6)
      oprot.writeDouble(self.depositAmount)
      oprot.writeFieldEnd()
    if self.withdrawAmount is not None:
      oprot.writeFieldBegin('withdrawAmount', TType.DOUBLE, 7)
      oprot.writeDouble(self.withdrawAmount)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 8)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.useMargin is not None:
      oprot.writeFieldBegin('useMargin', TType.DOUBLE, 9)
      oprot.writeDouble(self.useMargin)
      oprot.writeFieldEnd()
    if self.useCommission is not None:
      oprot.writeFieldBegin('useCommission', TType.DOUBLE, 10)
      oprot.writeDouble(self.useCommission)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 11)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 12)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.DOUBLE, 13)
      oprot.writeDouble(self.balance)
      oprot.writeFieldEnd()
    if self.exchangeRateHistoryId is not None:
      oprot.writeFieldBegin('exchangeRateHistoryId', TType.I64, 14)
      oprot.writeI64(self.exchangeRateHistoryId)
      oprot.writeFieldEnd()
    if self.goodsValue is not None:
      oprot.writeFieldBegin('goodsValue', TType.DOUBLE, 16)
      oprot.writeDouble(self.goodsValue)
      oprot.writeFieldEnd()
    if self.leverage is not None:
      oprot.writeFieldBegin('leverage', TType.DOUBLE, 17)
      oprot.writeDouble(self.leverage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingFund:
  """
  子账号实时某一时刻的资金

  Attributes:
   - subAccountId
   - preFund
   - depositAmount
   - withdrawAmount
   - closeProfit
   - positionProfit
   - useMargin
   - frozenMargin
   - useCommission
   - frozenCommission
   - availableFund
   - dynamicBenefit
   - riskRate
   - currency
   - creditAmount
   - goodsValue
   - leverage
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.DOUBLE, 'preFund', None, None, ), # 2
    (3, TType.DOUBLE, 'depositAmount', None, None, ), # 3
    (4, TType.DOUBLE, 'withdrawAmount', None, None, ), # 4
    (5, TType.DOUBLE, 'closeProfit', None, None, ), # 5
    (6, TType.DOUBLE, 'positionProfit', None, None, ), # 6
    (7, TType.DOUBLE, 'useMargin', None, None, ), # 7
    (8, TType.DOUBLE, 'frozenMargin', None, None, ), # 8
    (9, TType.DOUBLE, 'useCommission', None, None, ), # 9
    (10, TType.DOUBLE, 'frozenCommission', None, None, ), # 10
    (11, TType.DOUBLE, 'availableFund', None, None, ), # 11
    (12, TType.DOUBLE, 'dynamicBenefit', None, None, ), # 12
    (13, TType.DOUBLE, 'riskRate', None, None, ), # 13
    (14, TType.STRING, 'currency', None, None, ), # 14
    (15, TType.DOUBLE, 'creditAmount', None, None, ), # 15
    (16, TType.DOUBLE, 'goodsValue', None, None, ), # 16
    (17, TType.DOUBLE, 'leverage', None, None, ), # 17
    None, # 18
    None, # 19
    None, # 20
    (21, TType.I64, 'createTimestampMs', None, None, ), # 21
    (22, TType.I64, 'lastModifyTimestampMs', None, None, ), # 22
  )

  def __init__(self, subAccountId=None, preFund=None, depositAmount=None, withdrawAmount=None, closeProfit=None, positionProfit=None, useMargin=None, frozenMargin=None, useCommission=None, frozenCommission=None, availableFund=None, dynamicBenefit=None, riskRate=None, currency=None, creditAmount=None, goodsValue=None, leverage=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.subAccountId = subAccountId
    self.preFund = preFund
    self.depositAmount = depositAmount
    self.withdrawAmount = withdrawAmount
    self.closeProfit = closeProfit
    self.positionProfit = positionProfit
    self.useMargin = useMargin
    self.frozenMargin = frozenMargin
    self.useCommission = useCommission
    self.frozenCommission = frozenCommission
    self.availableFund = availableFund
    self.dynamicBenefit = dynamicBenefit
    self.riskRate = riskRate
    self.currency = currency
    self.creditAmount = creditAmount
    self.goodsValue = goodsValue
    self.leverage = leverage
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.preFund = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.depositAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.withdrawAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.DOUBLE:
          self.positionProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.useMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.frozenMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.useCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.frozenCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.availableFund = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.dynamicBenefit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.riskRate = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.creditAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.DOUBLE:
          self.goodsValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.leverage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingFund')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.preFund is not None:
      oprot.writeFieldBegin('preFund', TType.DOUBLE, 2)
      oprot.writeDouble(self.preFund)
      oprot.writeFieldEnd()
    if self.depositAmount is not None:
      oprot.writeFieldBegin('depositAmount', TType.DOUBLE, 3)
      oprot.writeDouble(self.depositAmount)
      oprot.writeFieldEnd()
    if self.withdrawAmount is not None:
      oprot.writeFieldBegin('withdrawAmount', TType.DOUBLE, 4)
      oprot.writeDouble(self.withdrawAmount)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 5)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.positionProfit is not None:
      oprot.writeFieldBegin('positionProfit', TType.DOUBLE, 6)
      oprot.writeDouble(self.positionProfit)
      oprot.writeFieldEnd()
    if self.useMargin is not None:
      oprot.writeFieldBegin('useMargin', TType.DOUBLE, 7)
      oprot.writeDouble(self.useMargin)
      oprot.writeFieldEnd()
    if self.frozenMargin is not None:
      oprot.writeFieldBegin('frozenMargin', TType.DOUBLE, 8)
      oprot.writeDouble(self.frozenMargin)
      oprot.writeFieldEnd()
    if self.useCommission is not None:
      oprot.writeFieldBegin('useCommission', TType.DOUBLE, 9)
      oprot.writeDouble(self.useCommission)
      oprot.writeFieldEnd()
    if self.frozenCommission is not None:
      oprot.writeFieldBegin('frozenCommission', TType.DOUBLE, 10)
      oprot.writeDouble(self.frozenCommission)
      oprot.writeFieldEnd()
    if self.availableFund is not None:
      oprot.writeFieldBegin('availableFund', TType.DOUBLE, 11)
      oprot.writeDouble(self.availableFund)
      oprot.writeFieldEnd()
    if self.dynamicBenefit is not None:
      oprot.writeFieldBegin('dynamicBenefit', TType.DOUBLE, 12)
      oprot.writeDouble(self.dynamicBenefit)
      oprot.writeFieldEnd()
    if self.riskRate is not None:
      oprot.writeFieldBegin('riskRate', TType.DOUBLE, 13)
      oprot.writeDouble(self.riskRate)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 14)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.creditAmount is not None:
      oprot.writeFieldBegin('creditAmount', TType.DOUBLE, 15)
      oprot.writeDouble(self.creditAmount)
      oprot.writeFieldEnd()
    if self.goodsValue is not None:
      oprot.writeFieldBegin('goodsValue', TType.DOUBLE, 16)
      oprot.writeDouble(self.goodsValue)
      oprot.writeFieldEnd()
    if self.leverage is not None:
      oprot.writeFieldBegin('leverage', TType.DOUBLE, 17)
      oprot.writeDouble(self.leverage)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 21)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 22)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingPositionVolume:
  """
  雪橇合约持仓量信息

  Attributes:
   - sledContractId
   - subAccountId
   - prevPosition
   - longPosition
   - shortPosition
   - netPosition
   - useCommission
   - closeProfit
   - positionAvgPrice
   - currency
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'prevPosition', None, None, ), # 3
    (4, TType.I64, 'longPosition', None, None, ), # 4
    (5, TType.I64, 'shortPosition', None, None, ), # 5
    (6, TType.I64, 'netPosition', None, None, ), # 6
    (7, TType.DOUBLE, 'useCommission', None, None, ), # 7
    (8, TType.DOUBLE, 'closeProfit', None, None, ), # 8
    None, # 9
    (10, TType.DOUBLE, 'positionAvgPrice', None, None, ), # 10
    (11, TType.STRING, 'currency', None, None, ), # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    None, # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    (29, TType.I64, 'createTimestampMs', None, None, ), # 29
    (30, TType.I64, 'lastModifyTimestampMs', None, None, ), # 30
  )

  def __init__(self, sledContractId=None, subAccountId=None, prevPosition=None, longPosition=None, shortPosition=None, netPosition=None, useCommission=None, closeProfit=None, positionAvgPrice=None, currency=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.sledContractId = sledContractId
    self.subAccountId = subAccountId
    self.prevPosition = prevPosition
    self.longPosition = longPosition
    self.shortPosition = shortPosition
    self.netPosition = netPosition
    self.useCommission = useCommission
    self.closeProfit = closeProfit
    self.positionAvgPrice = positionAvgPrice
    self.currency = currency
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.prevPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.longPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.shortPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.netPosition = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.DOUBLE:
          self.useCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.closeProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.DOUBLE:
          self.positionAvgPrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingPositionVolume')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.prevPosition is not None:
      oprot.writeFieldBegin('prevPosition', TType.I64, 3)
      oprot.writeI64(self.prevPosition)
      oprot.writeFieldEnd()
    if self.longPosition is not None:
      oprot.writeFieldBegin('longPosition', TType.I64, 4)
      oprot.writeI64(self.longPosition)
      oprot.writeFieldEnd()
    if self.shortPosition is not None:
      oprot.writeFieldBegin('shortPosition', TType.I64, 5)
      oprot.writeI64(self.shortPosition)
      oprot.writeFieldEnd()
    if self.netPosition is not None:
      oprot.writeFieldBegin('netPosition', TType.I64, 6)
      oprot.writeI64(self.netPosition)
      oprot.writeFieldEnd()
    if self.useCommission is not None:
      oprot.writeFieldBegin('useCommission', TType.DOUBLE, 7)
      oprot.writeDouble(self.useCommission)
      oprot.writeFieldEnd()
    if self.closeProfit is not None:
      oprot.writeFieldBegin('closeProfit', TType.DOUBLE, 8)
      oprot.writeDouble(self.closeProfit)
      oprot.writeFieldEnd()
    if self.positionAvgPrice is not None:
      oprot.writeFieldBegin('positionAvgPrice', TType.DOUBLE, 10)
      oprot.writeDouble(self.positionAvgPrice)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 11)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 29)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 30)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingPositionFund:
  """
  雪橇合约资金根据不同价格计算变动信息

  Attributes:
   - sledContractId
   - subAccountId
   - positionProfit
   - calculatePrice
   - useMargin
   - frozenMargin
   - frozenCommission
   - currency
   - goodsValue
   - leverage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    (9, TType.DOUBLE, 'positionProfit', None, None, ), # 9
    None, # 10
    (11, TType.DOUBLE, 'calculatePrice', None, None, ), # 11
    (12, TType.DOUBLE, 'useMargin', None, None, ), # 12
    (13, TType.DOUBLE, 'frozenMargin', None, None, ), # 13
    None, # 14
    (15, TType.DOUBLE, 'frozenCommission', None, None, ), # 15
    (16, TType.STRING, 'currency', None, None, ), # 16
    (17, TType.DOUBLE, 'goodsValue', None, None, ), # 17
    (18, TType.DOUBLE, 'leverage', None, None, ), # 18
  )

  def __init__(self, sledContractId=None, subAccountId=None, positionProfit=None, calculatePrice=None, useMargin=None, frozenMargin=None, frozenCommission=None, currency=None, goodsValue=None, leverage=None,):
    self.sledContractId = sledContractId
    self.subAccountId = subAccountId
    self.positionProfit = positionProfit
    self.calculatePrice = calculatePrice
    self.useMargin = useMargin
    self.frozenMargin = frozenMargin
    self.frozenCommission = frozenCommission
    self.currency = currency
    self.goodsValue = goodsValue
    self.leverage = leverage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.DOUBLE:
          self.positionProfit = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.DOUBLE:
          self.calculatePrice = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.DOUBLE:
          self.useMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.DOUBLE:
          self.frozenMargin = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.DOUBLE:
          self.frozenCommission = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.DOUBLE:
          self.goodsValue = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.DOUBLE:
          self.leverage = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingPositionFund')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.positionProfit is not None:
      oprot.writeFieldBegin('positionProfit', TType.DOUBLE, 9)
      oprot.writeDouble(self.positionProfit)
      oprot.writeFieldEnd()
    if self.calculatePrice is not None:
      oprot.writeFieldBegin('calculatePrice', TType.DOUBLE, 11)
      oprot.writeDouble(self.calculatePrice)
      oprot.writeFieldEnd()
    if self.useMargin is not None:
      oprot.writeFieldBegin('useMargin', TType.DOUBLE, 12)
      oprot.writeDouble(self.useMargin)
      oprot.writeFieldEnd()
    if self.frozenMargin is not None:
      oprot.writeFieldBegin('frozenMargin', TType.DOUBLE, 13)
      oprot.writeDouble(self.frozenMargin)
      oprot.writeFieldEnd()
    if self.frozenCommission is not None:
      oprot.writeFieldBegin('frozenCommission', TType.DOUBLE, 15)
      oprot.writeDouble(self.frozenCommission)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 16)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.goodsValue is not None:
      oprot.writeFieldBegin('goodsValue', TType.DOUBLE, 17)
      oprot.writeDouble(self.goodsValue)
      oprot.writeFieldEnd()
    if self.leverage is not None:
      oprot.writeFieldBegin('leverage', TType.DOUBLE, 18)
      oprot.writeDouble(self.leverage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSledContractPosition:
  """
  实时某一时刻雪橇合约持仓

  Attributes:
   - sledContractId
   - subAccountId
   - sledCommodityId
   - currency
   - positionVolume
   - positionFund
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'sledCommodityId', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
    (5, TType.STRUCT, 'positionVolume', (HostingPositionVolume, HostingPositionVolume.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'positionFund', (HostingPositionFund, HostingPositionFund.thrift_spec), None, ), # 6
  )

  def __init__(self, sledContractId=None, subAccountId=None, sledCommodityId=None, currency=None, positionVolume=None, positionFund=None,):
    self.sledContractId = sledContractId
    self.subAccountId = subAccountId
    self.sledCommodityId = sledCommodityId
    self.currency = currency
    self.positionVolume = positionVolume
    self.positionFund = positionFund

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sledCommodityId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.positionVolume = HostingPositionVolume()
          self.positionVolume.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.positionFund = HostingPositionFund()
          self.positionFund.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSledContractPosition')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledCommodityId is not None:
      oprot.writeFieldBegin('sledCommodityId', TType.I64, 3)
      oprot.writeI64(self.sledCommodityId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.positionVolume is not None:
      oprot.writeFieldBegin('positionVolume', TType.STRUCT, 5)
      self.positionVolume.write(oprot)
      oprot.writeFieldEnd()
    if self.positionFund is not None:
      oprot.writeFieldBegin('positionFund', TType.STRUCT, 6)
      self.positionFund.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqMoneyRecordOption:
  """
  Attributes:
   - subAccountId
   - startTimestampMs
   - endTimestampMs
   - currency
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'startTimestampMs', None, None, ), # 2
    (3, TType.I64, 'endTimestampMs', None, None, ), # 3
    (4, TType.STRING, 'currency', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, startTimestampMs=None, endTimestampMs=None, currency=None,):
    self.subAccountId = subAccountId
    self.startTimestampMs = startTimestampMs
    self.endTimestampMs = endTimestampMs
    self.currency = currency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.endTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqMoneyRecordOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 2)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    if self.endTimestampMs is not None:
      oprot.writeFieldBegin('endTimestampMs', TType.I64, 3)
      oprot.writeI64(self.endTimestampMs)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 4)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSubAccountFundOption:
  """
  Attributes:
   - subAccountId
   - currency
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'currency', None, None, ), # 2
  )

  def __init__(self, subAccountId=None, currency=None,):
    self.subAccountId = subAccountId
    self.currency = currency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSubAccountFundOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 2)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSettlementPositionDetailOption:
  """
  Attributes:
   - sledContractId
   - subAccountId
   - startTimestampMs
   - endTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sledContractId', None, None, ), # 1
    (2, TType.I64, 'subAccountId', None, None, ), # 2
    (3, TType.I64, 'startTimestampMs', None, None, ), # 3
    (4, TType.I64, 'endTimestampMs', None, None, ), # 4
  )

  def __init__(self, sledContractId=None, subAccountId=None, startTimestampMs=None, endTimestampMs=None,):
    self.sledContractId = sledContractId
    self.subAccountId = subAccountId
    self.startTimestampMs = startTimestampMs
    self.endTimestampMs = endTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.endTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSettlementPositionDetailOption')
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 1)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 2)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 3)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    if self.endTimestampMs is not None:
      oprot.writeFieldBegin('endTimestampMs', TType.I64, 4)
      oprot.writeI64(self.endTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqHostingSledContractPositionOption:
  """
  Attributes:
   - subAccountId
   - sledContractIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.SET, 'sledContractIds', (TType.I64,None), None, ), # 2
  )

  def __init__(self, subAccountId=None, sledContractIds=None,):
    self.subAccountId = subAccountId
    self.sledContractIds = sledContractIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.sledContractIds = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.sledContractIds.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHostingSledContractPositionOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractIds is not None:
      oprot.writeFieldBegin('sledContractIds', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.sledContractIds))
      for iter6 in self.sledContractIds:
        oprot.writeI64(iter6)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqHostingFundOption:
  """
  Attributes:
   - subAccountIds
   - baseCurrency
  """

  thrift_spec = (
    None, # 0
    (1, TType.SET, 'subAccountIds', (TType.I64,None), None, ), # 1
    (2, TType.BOOL, 'baseCurrency', None, None, ), # 2
  )

  def __init__(self, subAccountIds=None, baseCurrency=None,):
    self.subAccountIds = subAccountIds
    self.baseCurrency = baseCurrency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.SET:
          self.subAccountIds = set()
          (_etype10, _size7) = iprot.readSetBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.subAccountIds.add(_elem12)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.baseCurrency = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHostingFundOption')
    if self.subAccountIds is not None:
      oprot.writeFieldBegin('subAccountIds', TType.SET, 1)
      oprot.writeSetBegin(TType.I64, len(self.subAccountIds))
      for iter13 in self.subAccountIds:
        oprot.writeI64(iter13)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.baseCurrency is not None:
      oprot.writeFieldBegin('baseCurrency', TType.BOOL, 2)
      oprot.writeBool(self.baseCurrency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FundChange:
  """
  Attributes:
   - subAccountId
   - currency
   - amount
   - direction
   - ticket
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.STRING, 'currency', None, None, ), # 2
    (3, TType.DOUBLE, 'amount', None, None, ), # 3
    (4, TType.I32, 'direction', None, None, ), # 4
    (5, TType.STRING, 'ticket', None, None, ), # 5
  )

  def __init__(self, subAccountId=None, currency=None, amount=None, direction=None, ticket=None,):
    self.subAccountId = subAccountId
    self.currency = currency
    self.amount = amount
    self.direction = direction
    self.ticket = ticket

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.amount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.direction = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ticket = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FundChange')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 2)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.amount is not None:
      oprot.writeFieldBegin('amount', TType.DOUBLE, 3)
      oprot.writeDouble(self.amount)
      oprot.writeFieldEnd()
    if self.direction is not None:
      oprot.writeFieldBegin('direction', TType.I32, 4)
      oprot.writeI32(self.direction)
      oprot.writeFieldEnd()
    if self.ticket is not None:
      oprot.writeFieldBegin('ticket', TType.STRING, 5)
      oprot.writeString(self.ticket)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSledContractPositionPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(HostingSledContractPosition, HostingSledContractPosition.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = HostingSledContractPosition()
            _elem19.read(iprot)
            self.page.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSledContractPositionPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter20 in self.page:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingFundPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(HostingFund, HostingFund.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = HostingFund()
            _elem26.read(iprot)
            self.page.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingFundPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter27 in self.page:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CreditAmountChange:
  """
  Attributes:
   - subAccount
   - currency
   - totalAmount
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccount', None, None, ), # 1
    (2, TType.STRING, 'currency', None, None, ), # 2
    (3, TType.DOUBLE, 'totalAmount', None, None, ), # 3
  )

  def __init__(self, subAccount=None, currency=None, totalAmount=None,):
    self.subAccount = subAccount
    self.currency = currency
    self.totalAmount = totalAmount

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.currency = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.totalAmount = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CreditAmountChange')
    if self.subAccount is not None:
      oprot.writeFieldBegin('subAccount', TType.I64, 1)
      oprot.writeI64(self.subAccount)
      oprot.writeFieldEnd()
    if self.currency is not None:
      oprot.writeFieldBegin('currency', TType.STRING, 2)
      oprot.writeString(self.currency)
      oprot.writeFieldEnd()
    if self.totalAmount is not None:
      oprot.writeFieldBegin('totalAmount', TType.DOUBLE, 3)
      oprot.writeDouble(self.totalAmount)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettlementFundDetailPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SettlementFundDetail, SettlementFundDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = SettlementFundDetail()
            _elem33.read(iprot)
            self.page.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettlementFundDetailPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter34 in self.page:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingSubAccountMoneyRecordPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(HostingSubAccountMoneyRecord, HostingSubAccountMoneyRecord.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = HostingSubAccountMoneyRecord()
            _elem40.read(iprot)
            self.page.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingSubAccountMoneyRecordPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter41 in self.page:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SettlementPositionDetailPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(SettlementPositionDetail, SettlementPositionDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = SettlementPositionDetail()
            _elem47.read(iprot)
            self.page.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SettlementPositionDetailPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter48 in self.page:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqHostingAssetTradeDetailOption:
  """
  Attributes:
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
  )

  def __init__(self, subAccountId=None, sledContractId=None,):
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHostingAssetTradeDetailOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSettlementPositionTradeDetailOption:
  """
  Attributes:
   - settlementId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'settlementId', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
  )

  def __init__(self, settlementId=None, sledContractId=None,):
    self.settlementId = settlementId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.settlementId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSettlementPositionTradeDetailOption')
    if self.settlementId is not None:
      oprot.writeFieldBegin('settlementId', TType.I64, 1)
      oprot.writeI64(self.settlementId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AssetTradeDetailPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(AssetTradeDetail, AssetTradeDetail.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = AssetTradeDetail()
            _elem54.read(iprot)
            self.page.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AssetTradeDetailPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter55 in self.page:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqHostingPositionVolumeOption:
  """
  Attributes:
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.SET, 'sledContractId', (TType.I64,None), None, ), # 2
  )

  def __init__(self, subAccountId=None, sledContractId=None,):
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.sledContractId = set()
          (_etype59, _size56) = iprot.readSetBegin()
          for _i60 in xrange(_size56):
            _elem61 = iprot.readI64();
            self.sledContractId.add(_elem61)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHostingPositionVolumeOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.sledContractId))
      for iter62 in self.sledContractId:
        oprot.writeI64(iter62)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingPositionVolumePage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(HostingPositionVolume, HostingPositionVolume.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = HostingPositionVolume()
            _elem68.read(iprot)
            self.page.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingPositionVolumePage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter69 in self.page:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqHostingPositionFundOption:
  """
  Attributes:
   - subAccountId
   - sledContractId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.SET, 'sledContractId', (TType.I64,None), None, ), # 2
  )

  def __init__(self, subAccountId=None, sledContractId=None,):
    self.subAccountId = subAccountId
    self.sledContractId = sledContractId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.sledContractId = set()
          (_etype73, _size70) = iprot.readSetBegin()
          for _i74 in xrange(_size70):
            _elem75 = iprot.readI64();
            self.sledContractId.add(_elem75)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqHostingPositionFundOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.sledContractId))
      for iter76 in self.sledContractId:
        oprot.writeI64(iter76)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingPositionFundPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(HostingPositionFund, HostingPositionFund.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype80, _size77) = iprot.readListBegin()
          for _i81 in xrange(_size77):
            _elem82 = HostingPositionFund()
            _elem82.read(iprot)
            self.page.append(_elem82)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingPositionFundPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter83 in self.page:
        iter83.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountPosition:
  """
  Attributes:
   - tradeAccountId
   - sledContractNetPositionMap
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.MAP, 'sledContractNetPositionMap', (TType.I64,None,TType.I32,None), None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    None, # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'createTimestampMs', None, None, ), # 20
    (21, TType.I64, 'lastModifyTimestampMs', None, None, ), # 21
  )

  def __init__(self, tradeAccountId=None, sledContractNetPositionMap=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.sledContractNetPositionMap = sledContractNetPositionMap
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.MAP:
          self.sledContractNetPositionMap = {}
          (_ktype85, _vtype86, _size84 ) = iprot.readMapBegin()
          for _i88 in xrange(_size84):
            _key89 = iprot.readI64();
            _val90 = iprot.readI32();
            self.sledContractNetPositionMap[_key89] = _val90
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountPosition')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractNetPositionMap is not None:
      oprot.writeFieldBegin('sledContractNetPositionMap', TType.MAP, 2)
      oprot.writeMapBegin(TType.I64, TType.I32, len(self.sledContractNetPositionMap))
      for kiter91,viter92 in self.sledContractNetPositionMap.items():
        oprot.writeI64(kiter91)
        oprot.writeI32(viter92)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 20)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 21)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountPositionTable:
  """
  Attributes:
   - tradeAccount
   - sledContractId
   - netPosition
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccount', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
    (3, TType.I32, 'netPosition', None, None, ), # 3
    (4, TType.I64, 'createTimestampMs', None, None, ), # 4
    (5, TType.I64, 'lastModifyTimestampMs', None, None, ), # 5
  )

  def __init__(self, tradeAccount=None, sledContractId=None, netPosition=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.tradeAccount = tradeAccount
    self.sledContractId = sledContractId
    self.netPosition = netPosition
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.netPosition = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountPositionTable')
    if self.tradeAccount is not None:
      oprot.writeFieldBegin('tradeAccount', TType.I64, 1)
      oprot.writeI64(self.tradeAccount)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.netPosition is not None:
      oprot.writeFieldBegin('netPosition', TType.I32, 3)
      oprot.writeI32(self.netPosition)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 4)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 5)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqTradeAccountPositionTradeDetailOption:
  """
  Attributes:
   - tradeAccountId
   - sledContractId
   - startTradeTimestampMs
   - endTradeTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
    (2, TType.I64, 'sledContractId', None, None, ), # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'startTradeTimestampMs', None, None, ), # 10
    (11, TType.I64, 'endTradeTimestampMs', None, None, ), # 11
  )

  def __init__(self, tradeAccountId=None, sledContractId=None, startTradeTimestampMs=None, endTradeTimestampMs=None,):
    self.tradeAccountId = tradeAccountId
    self.sledContractId = sledContractId
    self.startTradeTimestampMs = startTradeTimestampMs
    self.endTradeTimestampMs = endTradeTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sledContractId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.startTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.endTradeTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqTradeAccountPositionTradeDetailOption')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    if self.sledContractId is not None:
      oprot.writeFieldBegin('sledContractId', TType.I64, 2)
      oprot.writeI64(self.sledContractId)
      oprot.writeFieldEnd()
    if self.startTradeTimestampMs is not None:
      oprot.writeFieldBegin('startTradeTimestampMs', TType.I64, 10)
      oprot.writeI64(self.startTradeTimestampMs)
      oprot.writeFieldEnd()
    if self.endTradeTimestampMs is not None:
      oprot.writeFieldBegin('endTradeTimestampMs', TType.I64, 11)
      oprot.writeI64(self.endTradeTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqTradeAccountPositionOption:
  """
  Attributes:
   - tradeAccountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tradeAccountId', None, None, ), # 1
  )

  def __init__(self, tradeAccountId=None,):
    self.tradeAccountId = tradeAccountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tradeAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqTradeAccountPositionOption')
    if self.tradeAccountId is not None:
      oprot.writeFieldBegin('tradeAccountId', TType.I64, 1)
      oprot.writeI64(self.tradeAccountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TradeAccountPositionPage:
  """
  Attributes:
   - total
   - page
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'total', None, None, ), # 1
    (2, TType.LIST, 'page', (TType.STRUCT,(TradeAccountPosition, TradeAccountPosition.thrift_spec)), None, ), # 2
  )

  def __init__(self, total=None, page=None,):
    self.total = total
    self.page = page

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.total = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.page = []
          (_etype96, _size93) = iprot.readListBegin()
          for _i97 in xrange(_size93):
            _elem98 = TradeAccountPosition()
            _elem98.read(iprot)
            self.page.append(_elem98)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TradeAccountPositionPage')
    if self.total is not None:
      oprot.writeFieldBegin('total', TType.I32, 1)
      oprot.writeI32(self.total)
      oprot.writeFieldEnd()
    if self.page is not None:
      oprot.writeFieldBegin('page', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.page))
      for iter99 in self.page:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ReqSubAccountFundHistoryOption:
  """
  Attributes:
   - subAccountId
   - startTimestampMs
   - endTimestampMs
   - baseCurrency
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'subAccountId', None, None, ), # 1
    (2, TType.I64, 'startTimestampMs', None, None, ), # 2
    (3, TType.I64, 'endTimestampMs', None, None, ), # 3
    (4, TType.BOOL, 'baseCurrency', None, None, ), # 4
  )

  def __init__(self, subAccountId=None, startTimestampMs=None, endTimestampMs=None, baseCurrency=None,):
    self.subAccountId = subAccountId
    self.startTimestampMs = startTimestampMs
    self.endTimestampMs = endTimestampMs
    self.baseCurrency = baseCurrency

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.subAccountId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.startTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.endTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.BOOL:
          self.baseCurrency = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ReqSubAccountFundHistoryOption')
    if self.subAccountId is not None:
      oprot.writeFieldBegin('subAccountId', TType.I64, 1)
      oprot.writeI64(self.subAccountId)
      oprot.writeFieldEnd()
    if self.startTimestampMs is not None:
      oprot.writeFieldBegin('startTimestampMs', TType.I64, 2)
      oprot.writeI64(self.startTimestampMs)
      oprot.writeFieldEnd()
    if self.endTimestampMs is not None:
      oprot.writeFieldBegin('endTimestampMs', TType.I64, 3)
      oprot.writeI64(self.endTimestampMs)
      oprot.writeFieldEnd()
    if self.baseCurrency is not None:
      oprot.writeFieldBegin('baseCurrency', TType.BOOL, 4)
      oprot.writeBool(self.baseCurrency)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PositionAssignHistory:
  """
  Attributes:
   - assignId
   - content
   - createTimestampMs
   - lastModifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'assignId', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.I64, 'createTimestampMs', None, None, ), # 3
    (4, TType.I64, 'lastModifyTimestampMs', None, None, ), # 4
  )

  def __init__(self, assignId=None, content=None, createTimestampMs=None, lastModifyTimestampMs=None,):
    self.assignId = assignId
    self.content = content
    self.createTimestampMs = createTimestampMs
    self.lastModifyTimestampMs = lastModifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.assignId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.lastModifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PositionAssignHistory')
    if self.assignId is not None:
      oprot.writeFieldBegin('assignId', TType.I64, 1)
      oprot.writeI64(self.assignId)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 3)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastModifyTimestampMs is not None:
      oprot.writeFieldBegin('lastModifyTimestampMs', TType.I64, 4)
      oprot.writeI64(self.lastModifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
