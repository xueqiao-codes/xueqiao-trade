#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import socket
from thrift import Thrift
from thrift.transport import TSocket
from thrift.transport import TTransport
from thrift.protocol import TCompactProtocol
from thrift.transport.TTransport import TTransportException
from comm.ttypes import *
from xueqiao.trade.hosting.ttypes import *
from page.ttypes import *
from xueqiao.trade.hosting.position.adjust.assign.thriftapi.ttypes import *
from xueqiao.trade.hosting.asset.thriftapi.ttypes import *
from xueqiao.trade.hosting.asset.thriftapi import TradeHostingAsset

PYTHON_SUPPORT_DIR='/usr/local/soldier/route_agent'
if not (PYTHON_SUPPORT_DIR in sys.path):
  sys.path.append(PYTHON_SUPPORT_DIR)
from route_finder_python import *

class TradeHostingAssetStub:
  def __init__(self):
    self.__peerAddr = None

  def setPeerAddr(self, peerAddr):
    self.__peerAddr = peerAddr

  def __getServiceAddr(self, methodName='', routeKey=0):
    if self.__peerAddr != None and self.__peerAddr !='':
      return self.__peerAddr
    return route_finder.GetRouteIp(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, methodName, routeKey)

  def getHostingSledContractPosition(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getHostingSledContractPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getHostingSledContractPosition(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSledContractPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSledContractPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getHostingSubAccountFund(self, routeKey, timeout, option,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getHostingSubAccountFund', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getHostingSubAccountFund(platformArgs,option,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSubAccountFund', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSubAccountFund', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def changeSubAccountFund(self, routeKey, timeout, fundChange,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('changeSubAccountFund', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.changeSubAccountFund(platformArgs,fundChange,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'changeSubAccountFund', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'changeSubAccountFund', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def setSubAccountCreditAmount(self, routeKey, timeout, amountChange,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('setSubAccountCreditAmount', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.setSubAccountCreditAmount(platformArgs,amountChange,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'setSubAccountCreditAmount', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'setSubAccountCreditAmount', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getSettlementPositionDetail(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getSettlementPositionDetail', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getSettlementPositionDetail(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSettlementPositionDetail', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSettlementPositionDetail', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getHostingSubAccountMoneyRecord(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getHostingSubAccountMoneyRecord', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getHostingSubAccountMoneyRecord(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSubAccountMoneyRecord', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingSubAccountMoneyRecord', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getAssetPositionTradeDetail(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getAssetPositionTradeDetail', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getAssetPositionTradeDetail(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getAssetPositionTradeDetail', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getAssetPositionTradeDetail', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getSettlementPositionTradeDetail(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getSettlementPositionTradeDetail', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getSettlementPositionTradeDetail(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSettlementPositionTradeDetail', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSettlementPositionTradeDetail', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getHostingPositionVolume(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getHostingPositionVolume', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getHostingPositionVolume(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingPositionVolume', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingPositionVolume', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getHostingPositionFund(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getHostingPositionFund', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getHostingPositionFund(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingPositionFund', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getHostingPositionFund', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getSubAccountFundHistory(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getSubAccountFundHistory', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getSubAccountFundHistory(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSubAccountFundHistory', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getSubAccountFundHistory', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def deleteExpiredContractPosition(self, routeKey, timeout, subAccountId,sledContractId,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('deleteExpiredContractPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.deleteExpiredContractPosition(platformArgs,subAccountId,sledContractId,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'deleteExpiredContractPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'deleteExpiredContractPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getTradeAccountPositionTradeDetail(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getTradeAccountPositionTradeDetail', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getTradeAccountPositionTradeDetail(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getTradeAccountPositionTradeDetail', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getTradeAccountPositionTradeDetail', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def getTradeAccountPosition(self, routeKey, timeout, option,pageOption,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('getTradeAccountPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.getTradeAccountPosition(platformArgs,option,pageOption,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getTradeAccountPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'getTradeAccountPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def assignPosition(self, routeKey, timeout, positonAssigneds,):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('assignPosition', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.assignPosition(platformArgs,positonAssigneds,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'assignPosition', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'assignPosition', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

  def removeAllAssetData(self, routeKey, timeout, ):
    platformArgs=PlatformArgs()
    frame = sys._getframe(1)
    code = frame.f_code
    platformArgs.sourceDesc = code.co_filename + '[' + code.co_name + ":" + str(code.co_firstlineno) + ']'
    platformArgs.sourceIp = socket.gethostbyname(socket.getfqdn())
    platformArgs.remoteAddress = self.__getServiceAddr('removeAllAssetData', routeKey)
    if platformArgs.remoteAddress == None or platformArgs.remoteAddress == '':
      raise Exception('No RouteIp is Found')
    platformArgs.remotePort = 10000 + TradeHostingAsset.TradeHostingAsset_SERVICE_KEY

    transport_socket = TSocket.TSocket(platformArgs.remoteAddress, platformArgs.remotePort)

    transport_socket.setTimeout(timeout)
    transport = TTransport.TFramedTransport(transport_socket)
    protocol = TCompactProtocol.TCompactProtocol(transport)
    client=TradeHostingAsset.Client(protocol)
    try:
      transport.open()
      result = client.removeAllAssetData(platformArgs,)
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'removeAllAssetData', platformArgs.remoteAddress, 0)
      return result
    except TTransportException,t:
      route_finder.UpdateCallInfo(TradeHostingAsset.TradeHostingAsset_SERVICE_KEY, 'removeAllAssetData', platformArgs.remoteAddress, 1)
      raise t
    finally:
      transport.close()

