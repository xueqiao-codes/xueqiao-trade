#
# -*- coding: utf-8 -*-
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import comm.ttypes
import page.ttypes


from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class HostingTaskNoteType:
  XQ_TRADE_LAME = 1

  _VALUES_TO_NAMES = {
    1: "XQ_TRADE_LAME",
  }

  _NAMES_TO_VALUES = {
    "XQ_TRADE_LAME": 1,
  }


class HostingTaskNoteKey:
  """
  对应的一个Key结构

  Attributes:
   - key1
   - key2
   - key3
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'key1', None, None, ), # 1
    (2, TType.I64, 'key2', None, None, ), # 2
    (3, TType.STRING, 'key3', None, None, ), # 3
  )

  def __init__(self, key1=None, key2=None, key3=None,):
    self.key1 = key1
    self.key2 = key2
    self.key3 = key3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.key1 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.key2 = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.key3 = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTaskNoteKey')
    if self.key1 is not None:
      oprot.writeFieldBegin('key1', TType.I64, 1)
      oprot.writeI64(self.key1)
      oprot.writeFieldEnd()
    if self.key2 is not None:
      oprot.writeFieldBegin('key2', TType.I64, 2)
      oprot.writeI64(self.key2)
      oprot.writeFieldEnd()
    if self.key3 is not None:
      oprot.writeFieldBegin('key3', TType.STRING, 3)
      oprot.writeString(self.key3)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTaskNote:
  """
  Attributes:
   - noteType
   - noteKey
   - noteContent
   - createTimestampMs
   - lastmodifyTimestampMs
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'noteType', None, None, ), # 1
    (2, TType.STRUCT, 'noteKey', (HostingTaskNoteKey, HostingTaskNoteKey.thrift_spec), None, ), # 2
    (3, TType.STRING, 'noteContent', None, None, ), # 3
    (4, TType.I64, 'createTimestampMs', None, None, ), # 4
    (5, TType.I64, 'lastmodifyTimestampMs', None, None, ), # 5
  )

  def __init__(self, noteType=None, noteKey=None, noteContent=None, createTimestampMs=None, lastmodifyTimestampMs=None,):
    self.noteType = noteType
    self.noteKey = noteKey
    self.noteContent = noteContent
    self.createTimestampMs = createTimestampMs
    self.lastmodifyTimestampMs = lastmodifyTimestampMs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.noteType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.noteKey = HostingTaskNoteKey()
          self.noteKey.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.noteContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.lastmodifyTimestampMs = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTaskNote')
    if self.noteType is not None:
      oprot.writeFieldBegin('noteType', TType.I32, 1)
      oprot.writeI32(self.noteType)
      oprot.writeFieldEnd()
    if self.noteKey is not None:
      oprot.writeFieldBegin('noteKey', TType.STRUCT, 2)
      self.noteKey.write(oprot)
      oprot.writeFieldEnd()
    if self.noteContent is not None:
      oprot.writeFieldBegin('noteContent', TType.STRING, 3)
      oprot.writeString(self.noteContent)
      oprot.writeFieldEnd()
    if self.createTimestampMs is not None:
      oprot.writeFieldBegin('createTimestampMs', TType.I64, 4)
      oprot.writeI64(self.createTimestampMs)
      oprot.writeFieldEnd()
    if self.lastmodifyTimestampMs is not None:
      oprot.writeFieldBegin('lastmodifyTimestampMs', TType.I64, 5)
      oprot.writeI64(self.lastmodifyTimestampMs)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class QueryTaskNoteOption:
  """
  Attributes:
   - noteType
   - key1
   - key2
   - key3
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'noteType', None, None, ), # 1
    (2, TType.SET, 'key1', (TType.I64,None), None, ), # 2
    (3, TType.SET, 'key2', (TType.I64,None), None, ), # 3
    (4, TType.SET, 'key3', (TType.STRING,None), None, ), # 4
  )

  def __init__(self, noteType=None, key1=None, key2=None, key3=None,):
    self.noteType = noteType
    self.key1 = key1
    self.key2 = key2
    self.key3 = key3

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.noteType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.SET:
          self.key1 = set()
          (_etype3, _size0) = iprot.readSetBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.key1.add(_elem5)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.SET:
          self.key2 = set()
          (_etype9, _size6) = iprot.readSetBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.key2.add(_elem11)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.SET:
          self.key3 = set()
          (_etype15, _size12) = iprot.readSetBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.key3.add(_elem17)
          iprot.readSetEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('QueryTaskNoteOption')
    if self.noteType is not None:
      oprot.writeFieldBegin('noteType', TType.I32, 1)
      oprot.writeI32(self.noteType)
      oprot.writeFieldEnd()
    if self.key1 is not None:
      oprot.writeFieldBegin('key1', TType.SET, 2)
      oprot.writeSetBegin(TType.I64, len(self.key1))
      for iter18 in self.key1:
        oprot.writeI64(iter18)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.key2 is not None:
      oprot.writeFieldBegin('key2', TType.SET, 3)
      oprot.writeSetBegin(TType.I64, len(self.key2))
      for iter19 in self.key2:
        oprot.writeI64(iter19)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    if self.key3 is not None:
      oprot.writeFieldBegin('key3', TType.SET, 4)
      oprot.writeSetBegin(TType.STRING, len(self.key3))
      for iter20 in self.key3:
        oprot.writeString(iter20)
      oprot.writeSetEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.noteType is None:
      raise TProtocol.TProtocolException(message='Required field noteType is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HostingTaskNotePage:
  """
  Attributes:
   - totalNum
   - resultList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'totalNum', None, None, ), # 1
    (2, TType.LIST, 'resultList', (TType.STRUCT,(HostingTaskNote, HostingTaskNote.thrift_spec)), None, ), # 2
  )

  def __init__(self, totalNum=None, resultList=None,):
    self.totalNum = totalNum
    self.resultList = resultList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.totalNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.resultList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = HostingTaskNote()
            _elem26.read(iprot)
            self.resultList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HostingTaskNotePage')
    if self.totalNum is not None:
      oprot.writeFieldBegin('totalNum', TType.I32, 1)
      oprot.writeI32(self.totalNum)
      oprot.writeFieldEnd()
    if self.resultList is not None:
      oprot.writeFieldBegin('resultList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.resultList))
      for iter27 in self.resultList:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
