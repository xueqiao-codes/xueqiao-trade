/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.hosting.taskqueue;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TSyncTaskQueue implements org.apache.thrift.TBase<TSyncTaskQueue, TSyncTaskQueue._Fields>, java.io.Serializable, Cloneable, Comparable<TSyncTaskQueue> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSyncTaskQueue");

  private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("taskType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField QUEUE_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("queueMessage", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RETRY_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("retryTimes", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TASK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskStatus", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField CREATE_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("createTimestamp", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LAST_MODIFY_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastModifyTimestamp", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSyncTaskQueueStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSyncTaskQueueTupleSchemeFactory());
  }

  public int taskId; // optional
  public int taskType; // optional
  public String queueMessage; // optional
  public int retryTimes; // optional
  /**
   * 
   * @see TaskStatus
   */
  public TaskStatus taskStatus; // optional
  public int createTimestamp; // optional
  public int lastModifyTimestamp; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_ID((short)1, "taskId"),
    TASK_TYPE((short)2, "taskType"),
    QUEUE_MESSAGE((short)3, "queueMessage"),
    RETRY_TIMES((short)4, "retryTimes"),
    /**
     * 
     * @see TaskStatus
     */
    TASK_STATUS((short)5, "taskStatus"),
    CREATE_TIMESTAMP((short)10, "createTimestamp"),
    LAST_MODIFY_TIMESTAMP((short)11, "lastModifyTimestamp");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_ID
          return TASK_ID;
        case 2: // TASK_TYPE
          return TASK_TYPE;
        case 3: // QUEUE_MESSAGE
          return QUEUE_MESSAGE;
        case 4: // RETRY_TIMES
          return RETRY_TIMES;
        case 5: // TASK_STATUS
          return TASK_STATUS;
        case 10: // CREATE_TIMESTAMP
          return CREATE_TIMESTAMP;
        case 11: // LAST_MODIFY_TIMESTAMP
          return LAST_MODIFY_TIMESTAMP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TASKID_ISSET_ID = 0;
  private static final int __TASKTYPE_ISSET_ID = 1;
  private static final int __RETRYTIMES_ISSET_ID = 2;
  private static final int __CREATETIMESTAMP_ISSET_ID = 3;
  private static final int __LASTMODIFYTIMESTAMP_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.TASK_ID,_Fields.TASK_TYPE,_Fields.QUEUE_MESSAGE,_Fields.RETRY_TIMES,_Fields.TASK_STATUS,_Fields.CREATE_TIMESTAMP,_Fields.LAST_MODIFY_TIMESTAMP};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_TYPE, new org.apache.thrift.meta_data.FieldMetaData("taskType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUEUE_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("queueMessage", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RETRY_TIMES, new org.apache.thrift.meta_data.FieldMetaData("retryTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TASK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("taskStatus", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TaskStatus.class)));
    tmpMap.put(_Fields.CREATE_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("createTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_MODIFY_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastModifyTimestamp", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSyncTaskQueue.class, metaDataMap);
  }

  public TSyncTaskQueue() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSyncTaskQueue(TSyncTaskQueue other) {
    __isset_bitfield = other.__isset_bitfield;
    this.taskId = other.taskId;
    this.taskType = other.taskType;
    if (other.isSetQueueMessage()) {
      this.queueMessage = other.queueMessage;
    }
    this.retryTimes = other.retryTimes;
    if (other.isSetTaskStatus()) {
      this.taskStatus = other.taskStatus;
    }
    this.createTimestamp = other.createTimestamp;
    this.lastModifyTimestamp = other.lastModifyTimestamp;
  }

  public TSyncTaskQueue deepCopy() {
    return new TSyncTaskQueue(this);
  }

  @Override
  public void clear() {
    setTaskIdIsSet(false);
    this.taskId = 0;
    setTaskTypeIsSet(false);
    this.taskType = 0;
    this.queueMessage = null;
    setRetryTimesIsSet(false);
    this.retryTimes = 0;
    this.taskStatus = null;
    setCreateTimestampIsSet(false);
    this.createTimestamp = 0;
    setLastModifyTimestampIsSet(false);
    this.lastModifyTimestamp = 0;
  }

  public int getTaskId() {
    return this.taskId;
  }

  public TSyncTaskQueue setTaskId(int taskId) {
    this.taskId = taskId;
    setTaskIdIsSet(true);
    return this;
  }

  public void unsetTaskId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  /** Returns true if field taskId is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskId() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKID_ISSET_ID);
  }

  public void setTaskIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKID_ISSET_ID, value);
  }

  public int getTaskType() {
    return this.taskType;
  }

  public TSyncTaskQueue setTaskType(int taskType) {
    this.taskType = taskType;
    setTaskTypeIsSet(true);
    return this;
  }

  public void unsetTaskType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  /** Returns true if field taskType is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskType() {
    return EncodingUtils.testBit(__isset_bitfield, __TASKTYPE_ISSET_ID);
  }

  public void setTaskTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TASKTYPE_ISSET_ID, value);
  }

  public String getQueueMessage() {
    return this.queueMessage;
  }

  public TSyncTaskQueue setQueueMessage(String queueMessage) {
    this.queueMessage = queueMessage;
    return this;
  }

  public void unsetQueueMessage() {
    this.queueMessage = null;
  }

  /** Returns true if field queueMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetQueueMessage() {
    return this.queueMessage != null;
  }

  public void setQueueMessageIsSet(boolean value) {
    if (!value) {
      this.queueMessage = null;
    }
  }

  public int getRetryTimes() {
    return this.retryTimes;
  }

  public TSyncTaskQueue setRetryTimes(int retryTimes) {
    this.retryTimes = retryTimes;
    setRetryTimesIsSet(true);
    return this;
  }

  public void unsetRetryTimes() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  /** Returns true if field retryTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRetryTimes() {
    return EncodingUtils.testBit(__isset_bitfield, __RETRYTIMES_ISSET_ID);
  }

  public void setRetryTimesIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RETRYTIMES_ISSET_ID, value);
  }

  /**
   * 
   * @see TaskStatus
   */
  public TaskStatus getTaskStatus() {
    return this.taskStatus;
  }

  /**
   * 
   * @see TaskStatus
   */
  public TSyncTaskQueue setTaskStatus(TaskStatus taskStatus) {
    this.taskStatus = taskStatus;
    return this;
  }

  public void unsetTaskStatus() {
    this.taskStatus = null;
  }

  /** Returns true if field taskStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskStatus() {
    return this.taskStatus != null;
  }

  public void setTaskStatusIsSet(boolean value) {
    if (!value) {
      this.taskStatus = null;
    }
  }

  public int getCreateTimestamp() {
    return this.createTimestamp;
  }

  public TSyncTaskQueue setCreateTimestamp(int createTimestamp) {
    this.createTimestamp = createTimestamp;
    setCreateTimestampIsSet(true);
    return this;
  }

  public void unsetCreateTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  /** Returns true if field createTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID);
  }

  public void setCreateTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CREATETIMESTAMP_ISSET_ID, value);
  }

  public int getLastModifyTimestamp() {
    return this.lastModifyTimestamp;
  }

  public TSyncTaskQueue setLastModifyTimestamp(int lastModifyTimestamp) {
    this.lastModifyTimestamp = lastModifyTimestamp;
    setLastModifyTimestampIsSet(true);
    return this;
  }

  public void unsetLastModifyTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastModifyTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastModifyTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID);
  }

  public void setLastModifyTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTMODIFYTIMESTAMP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_ID:
      if (value == null) {
        unsetTaskId();
      } else {
        setTaskId((Integer)value);
      }
      break;

    case TASK_TYPE:
      if (value == null) {
        unsetTaskType();
      } else {
        setTaskType((Integer)value);
      }
      break;

    case QUEUE_MESSAGE:
      if (value == null) {
        unsetQueueMessage();
      } else {
        setQueueMessage((String)value);
      }
      break;

    case RETRY_TIMES:
      if (value == null) {
        unsetRetryTimes();
      } else {
        setRetryTimes((Integer)value);
      }
      break;

    case TASK_STATUS:
      if (value == null) {
        unsetTaskStatus();
      } else {
        setTaskStatus((TaskStatus)value);
      }
      break;

    case CREATE_TIMESTAMP:
      if (value == null) {
        unsetCreateTimestamp();
      } else {
        setCreateTimestamp((Integer)value);
      }
      break;

    case LAST_MODIFY_TIMESTAMP:
      if (value == null) {
        unsetLastModifyTimestamp();
      } else {
        setLastModifyTimestamp((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_ID:
      return Integer.valueOf(getTaskId());

    case TASK_TYPE:
      return Integer.valueOf(getTaskType());

    case QUEUE_MESSAGE:
      return getQueueMessage();

    case RETRY_TIMES:
      return Integer.valueOf(getRetryTimes());

    case TASK_STATUS:
      return getTaskStatus();

    case CREATE_TIMESTAMP:
      return Integer.valueOf(getCreateTimestamp());

    case LAST_MODIFY_TIMESTAMP:
      return Integer.valueOf(getLastModifyTimestamp());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_ID:
      return isSetTaskId();
    case TASK_TYPE:
      return isSetTaskType();
    case QUEUE_MESSAGE:
      return isSetQueueMessage();
    case RETRY_TIMES:
      return isSetRetryTimes();
    case TASK_STATUS:
      return isSetTaskStatus();
    case CREATE_TIMESTAMP:
      return isSetCreateTimestamp();
    case LAST_MODIFY_TIMESTAMP:
      return isSetLastModifyTimestamp();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSyncTaskQueue)
      return this.equals((TSyncTaskQueue)that);
    return false;
  }

  public boolean equals(TSyncTaskQueue that) {
    if (that == null)
      return false;

    boolean this_present_taskId = true && this.isSetTaskId();
    boolean that_present_taskId = true && that.isSetTaskId();
    if (this_present_taskId || that_present_taskId) {
      if (!(this_present_taskId && that_present_taskId))
        return false;
      if (this.taskId != that.taskId)
        return false;
    }

    boolean this_present_taskType = true && this.isSetTaskType();
    boolean that_present_taskType = true && that.isSetTaskType();
    if (this_present_taskType || that_present_taskType) {
      if (!(this_present_taskType && that_present_taskType))
        return false;
      if (this.taskType != that.taskType)
        return false;
    }

    boolean this_present_queueMessage = true && this.isSetQueueMessage();
    boolean that_present_queueMessage = true && that.isSetQueueMessage();
    if (this_present_queueMessage || that_present_queueMessage) {
      if (!(this_present_queueMessage && that_present_queueMessage))
        return false;
      if (!this.queueMessage.equals(that.queueMessage))
        return false;
    }

    boolean this_present_retryTimes = true && this.isSetRetryTimes();
    boolean that_present_retryTimes = true && that.isSetRetryTimes();
    if (this_present_retryTimes || that_present_retryTimes) {
      if (!(this_present_retryTimes && that_present_retryTimes))
        return false;
      if (this.retryTimes != that.retryTimes)
        return false;
    }

    boolean this_present_taskStatus = true && this.isSetTaskStatus();
    boolean that_present_taskStatus = true && that.isSetTaskStatus();
    if (this_present_taskStatus || that_present_taskStatus) {
      if (!(this_present_taskStatus && that_present_taskStatus))
        return false;
      if (!this.taskStatus.equals(that.taskStatus))
        return false;
    }

    boolean this_present_createTimestamp = true && this.isSetCreateTimestamp();
    boolean that_present_createTimestamp = true && that.isSetCreateTimestamp();
    if (this_present_createTimestamp || that_present_createTimestamp) {
      if (!(this_present_createTimestamp && that_present_createTimestamp))
        return false;
      if (this.createTimestamp != that.createTimestamp)
        return false;
    }

    boolean this_present_lastModifyTimestamp = true && this.isSetLastModifyTimestamp();
    boolean that_present_lastModifyTimestamp = true && that.isSetLastModifyTimestamp();
    if (this_present_lastModifyTimestamp || that_present_lastModifyTimestamp) {
      if (!(this_present_lastModifyTimestamp && that_present_lastModifyTimestamp))
        return false;
      if (this.lastModifyTimestamp != that.lastModifyTimestamp)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TSyncTaskQueue other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskType()).compareTo(other.isSetTaskType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskType, other.taskType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQueueMessage()).compareTo(other.isSetQueueMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQueueMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueMessage, other.queueMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRetryTimes()).compareTo(other.isSetRetryTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRetryTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.retryTimes, other.retryTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTaskStatus()).compareTo(other.isSetTaskStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskStatus, other.taskStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCreateTimestamp()).compareTo(other.isSetCreateTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTimestamp, other.createTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastModifyTimestamp()).compareTo(other.isSetLastModifyTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastModifyTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastModifyTimestamp, other.lastModifyTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSyncTaskQueue(");
    boolean first = true;

    if (isSetTaskId()) {
      sb.append("taskId:");
      sb.append(this.taskId);
      first = false;
    }
    if (isSetTaskType()) {
      if (!first) sb.append(", ");
      sb.append("taskType:");
      sb.append(this.taskType);
      first = false;
    }
    if (isSetQueueMessage()) {
      if (!first) sb.append(", ");
      sb.append("queueMessage:");
      if (this.queueMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.queueMessage);
      }
      first = false;
    }
    if (isSetRetryTimes()) {
      if (!first) sb.append(", ");
      sb.append("retryTimes:");
      sb.append(this.retryTimes);
      first = false;
    }
    if (isSetTaskStatus()) {
      if (!first) sb.append(", ");
      sb.append("taskStatus:");
      if (this.taskStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.taskStatus);
      }
      first = false;
    }
    if (isSetCreateTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("createTimestamp:");
      sb.append(this.createTimestamp);
      first = false;
    }
    if (isSetLastModifyTimestamp()) {
      if (!first) sb.append(", ");
      sb.append("lastModifyTimestamp:");
      sb.append(this.lastModifyTimestamp);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSyncTaskQueueStandardSchemeFactory implements SchemeFactory {
    public TSyncTaskQueueStandardScheme getScheme() {
      return new TSyncTaskQueueStandardScheme();
    }
  }

  private static class TSyncTaskQueueStandardScheme extends StandardScheme<TSyncTaskQueue> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSyncTaskQueue struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskId = iprot.readI32();
              struct.setTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskType = iprot.readI32();
              struct.setTaskTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // QUEUE_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.queueMessage = iprot.readString();
              struct.setQueueMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RETRY_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.retryTimes = iprot.readI32();
              struct.setRetryTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TASK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.taskStatus = TaskStatus.findByValue(iprot.readI32());
              struct.setTaskStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.createTimestamp = iprot.readI32();
              struct.setCreateTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LAST_MODIFY_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.lastModifyTimestamp = iprot.readI32();
              struct.setLastModifyTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSyncTaskQueue struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetTaskId()) {
        oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
        oprot.writeI32(struct.taskId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTaskType()) {
        oprot.writeFieldBegin(TASK_TYPE_FIELD_DESC);
        oprot.writeI32(struct.taskType);
        oprot.writeFieldEnd();
      }
      if (struct.queueMessage != null) {
        if (struct.isSetQueueMessage()) {
          oprot.writeFieldBegin(QUEUE_MESSAGE_FIELD_DESC);
          oprot.writeString(struct.queueMessage);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRetryTimes()) {
        oprot.writeFieldBegin(RETRY_TIMES_FIELD_DESC);
        oprot.writeI32(struct.retryTimes);
        oprot.writeFieldEnd();
      }
      if (struct.taskStatus != null) {
        if (struct.isSetTaskStatus()) {
          oprot.writeFieldBegin(TASK_STATUS_FIELD_DESC);
          oprot.writeI32(struct.taskStatus.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeFieldBegin(CREATE_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.createTimestamp);
        oprot.writeFieldEnd();
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeFieldBegin(LAST_MODIFY_TIMESTAMP_FIELD_DESC);
        oprot.writeI32(struct.lastModifyTimestamp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSyncTaskQueueTupleSchemeFactory implements SchemeFactory {
    public TSyncTaskQueueTupleScheme getScheme() {
      return new TSyncTaskQueueTupleScheme();
    }
  }

  private static class TSyncTaskQueueTupleScheme extends TupleScheme<TSyncTaskQueue> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSyncTaskQueue struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTaskId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskType()) {
        optionals.set(1);
      }
      if (struct.isSetQueueMessage()) {
        optionals.set(2);
      }
      if (struct.isSetRetryTimes()) {
        optionals.set(3);
      }
      if (struct.isSetTaskStatus()) {
        optionals.set(4);
      }
      if (struct.isSetCreateTimestamp()) {
        optionals.set(5);
      }
      if (struct.isSetLastModifyTimestamp()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTaskId()) {
        oprot.writeI32(struct.taskId);
      }
      if (struct.isSetTaskType()) {
        oprot.writeI32(struct.taskType);
      }
      if (struct.isSetQueueMessage()) {
        oprot.writeString(struct.queueMessage);
      }
      if (struct.isSetRetryTimes()) {
        oprot.writeI32(struct.retryTimes);
      }
      if (struct.isSetTaskStatus()) {
        oprot.writeI32(struct.taskStatus.getValue());
      }
      if (struct.isSetCreateTimestamp()) {
        oprot.writeI32(struct.createTimestamp);
      }
      if (struct.isSetLastModifyTimestamp()) {
        oprot.writeI32(struct.lastModifyTimestamp);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSyncTaskQueue struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.taskId = iprot.readI32();
        struct.setTaskIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.taskType = iprot.readI32();
        struct.setTaskTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.queueMessage = iprot.readString();
        struct.setQueueMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.retryTimes = iprot.readI32();
        struct.setRetryTimesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.taskStatus = TaskStatus.findByValue(iprot.readI32());
        struct.setTaskStatusIsSet(true);
      }
      if (incoming.get(5)) {
        struct.createTimestamp = iprot.readI32();
        struct.setCreateTimestampIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastModifyTimestamp = iprot.readI32();
        struct.setLastModifyTimestampIsSet(true);
      }
    }
  }

}

