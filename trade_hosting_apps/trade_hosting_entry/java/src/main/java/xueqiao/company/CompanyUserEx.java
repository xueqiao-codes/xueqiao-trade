/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.company;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CompanyUserEx implements org.apache.thrift.TBase<CompanyUserEx, CompanyUserEx._Fields>, java.io.Serializable, Cloneable, Comparable<CompanyUserEx> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CompanyUserEx");

  private static final org.apache.thrift.protocol.TField COMPANY_USER_FIELD_DESC = new org.apache.thrift.protocol.TField("companyUser", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField GROUP_USER_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("groupUserList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CompanyUserExStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CompanyUserExTupleSchemeFactory());
  }

  public CompanyUser companyUser; // optional
  public List<GroupUser> groupUserList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COMPANY_USER((short)1, "companyUser"),
    GROUP_USER_LIST((short)2, "groupUserList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COMPANY_USER
          return COMPANY_USER;
        case 2: // GROUP_USER_LIST
          return GROUP_USER_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.COMPANY_USER,_Fields.GROUP_USER_LIST};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COMPANY_USER, new org.apache.thrift.meta_data.FieldMetaData("companyUser", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CompanyUser.class)));
    tmpMap.put(_Fields.GROUP_USER_LIST, new org.apache.thrift.meta_data.FieldMetaData("groupUserList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupUser.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CompanyUserEx.class, metaDataMap);
  }

  public CompanyUserEx() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompanyUserEx(CompanyUserEx other) {
    if (other.isSetCompanyUser()) {
      this.companyUser = new CompanyUser(other.companyUser);
    }
    if (other.isSetGroupUserList()) {
      List<GroupUser> __this__groupUserList = new ArrayList<GroupUser>(other.groupUserList.size());
      for (GroupUser other_element : other.groupUserList) {
        __this__groupUserList.add(new GroupUser(other_element));
      }
      this.groupUserList = __this__groupUserList;
    }
  }

  public CompanyUserEx deepCopy() {
    return new CompanyUserEx(this);
  }

  @Override
  public void clear() {
    this.companyUser = null;
    this.groupUserList = null;
  }

  public CompanyUser getCompanyUser() {
    return this.companyUser;
  }

  public CompanyUserEx setCompanyUser(CompanyUser companyUser) {
    this.companyUser = companyUser;
    return this;
  }

  public void unsetCompanyUser() {
    this.companyUser = null;
  }

  /** Returns true if field companyUser is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyUser() {
    return this.companyUser != null;
  }

  public void setCompanyUserIsSet(boolean value) {
    if (!value) {
      this.companyUser = null;
    }
  }

  public int getGroupUserListSize() {
    return (this.groupUserList == null) ? 0 : this.groupUserList.size();
  }

  public java.util.Iterator<GroupUser> getGroupUserListIterator() {
    return (this.groupUserList == null) ? null : this.groupUserList.iterator();
  }

  public void addToGroupUserList(GroupUser elem) {
    if (this.groupUserList == null) {
      this.groupUserList = new ArrayList<GroupUser>();
    }
    this.groupUserList.add(elem);
  }

  public List<GroupUser> getGroupUserList() {
    return this.groupUserList;
  }

  public CompanyUserEx setGroupUserList(List<GroupUser> groupUserList) {
    this.groupUserList = groupUserList;
    return this;
  }

  public void unsetGroupUserList() {
    this.groupUserList = null;
  }

  /** Returns true if field groupUserList is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupUserList() {
    return this.groupUserList != null;
  }

  public void setGroupUserListIsSet(boolean value) {
    if (!value) {
      this.groupUserList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COMPANY_USER:
      if (value == null) {
        unsetCompanyUser();
      } else {
        setCompanyUser((CompanyUser)value);
      }
      break;

    case GROUP_USER_LIST:
      if (value == null) {
        unsetGroupUserList();
      } else {
        setGroupUserList((List<GroupUser>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COMPANY_USER:
      return getCompanyUser();

    case GROUP_USER_LIST:
      return getGroupUserList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COMPANY_USER:
      return isSetCompanyUser();
    case GROUP_USER_LIST:
      return isSetGroupUserList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompanyUserEx)
      return this.equals((CompanyUserEx)that);
    return false;
  }

  public boolean equals(CompanyUserEx that) {
    if (that == null)
      return false;

    boolean this_present_companyUser = true && this.isSetCompanyUser();
    boolean that_present_companyUser = true && that.isSetCompanyUser();
    if (this_present_companyUser || that_present_companyUser) {
      if (!(this_present_companyUser && that_present_companyUser))
        return false;
      if (!this.companyUser.equals(that.companyUser))
        return false;
    }

    boolean this_present_groupUserList = true && this.isSetGroupUserList();
    boolean that_present_groupUserList = true && that.isSetGroupUserList();
    if (this_present_groupUserList || that_present_groupUserList) {
      if (!(this_present_groupUserList && that_present_groupUserList))
        return false;
      if (!this.groupUserList.equals(that.groupUserList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CompanyUserEx other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCompanyUser()).compareTo(other.isSetCompanyUser());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyUser()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyUser, other.companyUser);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupUserList()).compareTo(other.isSetGroupUserList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupUserList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupUserList, other.groupUserList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CompanyUserEx(");
    boolean first = true;

    if (isSetCompanyUser()) {
      sb.append("companyUser:");
      if (this.companyUser == null) {
        sb.append("null");
      } else {
        sb.append(this.companyUser);
      }
      first = false;
    }
    if (isSetGroupUserList()) {
      if (!first) sb.append(", ");
      sb.append("groupUserList:");
      if (this.groupUserList == null) {
        sb.append("null");
      } else {
        sb.append(this.groupUserList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (companyUser != null) {
      companyUser.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CompanyUserExStandardSchemeFactory implements SchemeFactory {
    public CompanyUserExStandardScheme getScheme() {
      return new CompanyUserExStandardScheme();
    }
  }

  private static class CompanyUserExStandardScheme extends StandardScheme<CompanyUserEx> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CompanyUserEx struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COMPANY_USER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.companyUser = new CompanyUser();
              struct.companyUser.read(iprot);
              struct.setCompanyUserIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GROUP_USER_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                struct.groupUserList = new ArrayList<GroupUser>(_list8.size);
                for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                {
                  GroupUser _elem10;
                  _elem10 = new GroupUser();
                  _elem10.read(iprot);
                  struct.groupUserList.add(_elem10);
                }
                iprot.readListEnd();
              }
              struct.setGroupUserListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CompanyUserEx struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.companyUser != null) {
        if (struct.isSetCompanyUser()) {
          oprot.writeFieldBegin(COMPANY_USER_FIELD_DESC);
          struct.companyUser.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupUserList != null) {
        if (struct.isSetGroupUserList()) {
          oprot.writeFieldBegin(GROUP_USER_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.groupUserList.size()));
            for (GroupUser _iter11 : struct.groupUserList)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CompanyUserExTupleSchemeFactory implements SchemeFactory {
    public CompanyUserExTupleScheme getScheme() {
      return new CompanyUserExTupleScheme();
    }
  }

  private static class CompanyUserExTupleScheme extends TupleScheme<CompanyUserEx> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CompanyUserEx struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCompanyUser()) {
        optionals.set(0);
      }
      if (struct.isSetGroupUserList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetCompanyUser()) {
        struct.companyUser.write(oprot);
      }
      if (struct.isSetGroupUserList()) {
        {
          oprot.writeI32(struct.groupUserList.size());
          for (GroupUser _iter12 : struct.groupUserList)
          {
            _iter12.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CompanyUserEx struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.companyUser = new CompanyUser();
        struct.companyUser.read(iprot);
        struct.setCompanyUserIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.groupUserList = new ArrayList<GroupUser>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            GroupUser _elem15;
            _elem15 = new GroupUser();
            _elem15.read(iprot);
            struct.groupUserList.add(_elem15);
          }
        }
        struct.setGroupUserListIsSet(true);
      }
    }
  }

}

