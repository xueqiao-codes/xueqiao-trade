/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.working.order.dao.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 工单信息存储类型，dao内部使用
 */
public class WorkingOrderStorage implements org.apache.thrift.TBase<WorkingOrderStorage, WorkingOrderStorage._Fields>, java.io.Serializable, Cloneable, Comparable<WorkingOrderStorage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkingOrderStorage");

  private static final org.apache.thrift.protocol.TField BASE_WORKING_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("baseWorkingOrder", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_CLASS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderClassType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkingOrderStorageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkingOrderStorageTupleSchemeFactory());
  }

  public xueqiao.working.order.thriftapi.BaseWorkingOrder baseWorkingOrder; // optional
  public String orderClassType; // optional
  public String content; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASE_WORKING_ORDER((short)1, "baseWorkingOrder"),
    ORDER_CLASS_TYPE((short)2, "orderClassType"),
    CONTENT((short)3, "content");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASE_WORKING_ORDER
          return BASE_WORKING_ORDER;
        case 2: // ORDER_CLASS_TYPE
          return ORDER_CLASS_TYPE;
        case 3: // CONTENT
          return CONTENT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.BASE_WORKING_ORDER,_Fields.ORDER_CLASS_TYPE,_Fields.CONTENT};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASE_WORKING_ORDER, new org.apache.thrift.meta_data.FieldMetaData("baseWorkingOrder", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.working.order.thriftapi.BaseWorkingOrder.class)));
    tmpMap.put(_Fields.ORDER_CLASS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderClassType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkingOrderStorage.class, metaDataMap);
  }

  public WorkingOrderStorage() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkingOrderStorage(WorkingOrderStorage other) {
    if (other.isSetBaseWorkingOrder()) {
      this.baseWorkingOrder = new xueqiao.working.order.thriftapi.BaseWorkingOrder(other.baseWorkingOrder);
    }
    if (other.isSetOrderClassType()) {
      this.orderClassType = other.orderClassType;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
  }

  public WorkingOrderStorage deepCopy() {
    return new WorkingOrderStorage(this);
  }

  @Override
  public void clear() {
    this.baseWorkingOrder = null;
    this.orderClassType = null;
    this.content = null;
  }

  public xueqiao.working.order.thriftapi.BaseWorkingOrder getBaseWorkingOrder() {
    return this.baseWorkingOrder;
  }

  public WorkingOrderStorage setBaseWorkingOrder(xueqiao.working.order.thriftapi.BaseWorkingOrder baseWorkingOrder) {
    this.baseWorkingOrder = baseWorkingOrder;
    return this;
  }

  public void unsetBaseWorkingOrder() {
    this.baseWorkingOrder = null;
  }

  /** Returns true if field baseWorkingOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseWorkingOrder() {
    return this.baseWorkingOrder != null;
  }

  public void setBaseWorkingOrderIsSet(boolean value) {
    if (!value) {
      this.baseWorkingOrder = null;
    }
  }

  public String getOrderClassType() {
    return this.orderClassType;
  }

  public WorkingOrderStorage setOrderClassType(String orderClassType) {
    this.orderClassType = orderClassType;
    return this;
  }

  public void unsetOrderClassType() {
    this.orderClassType = null;
  }

  /** Returns true if field orderClassType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderClassType() {
    return this.orderClassType != null;
  }

  public void setOrderClassTypeIsSet(boolean value) {
    if (!value) {
      this.orderClassType = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public WorkingOrderStorage setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BASE_WORKING_ORDER:
      if (value == null) {
        unsetBaseWorkingOrder();
      } else {
        setBaseWorkingOrder((xueqiao.working.order.thriftapi.BaseWorkingOrder)value);
      }
      break;

    case ORDER_CLASS_TYPE:
      if (value == null) {
        unsetOrderClassType();
      } else {
        setOrderClassType((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BASE_WORKING_ORDER:
      return getBaseWorkingOrder();

    case ORDER_CLASS_TYPE:
      return getOrderClassType();

    case CONTENT:
      return getContent();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BASE_WORKING_ORDER:
      return isSetBaseWorkingOrder();
    case ORDER_CLASS_TYPE:
      return isSetOrderClassType();
    case CONTENT:
      return isSetContent();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkingOrderStorage)
      return this.equals((WorkingOrderStorage)that);
    return false;
  }

  public boolean equals(WorkingOrderStorage that) {
    if (that == null)
      return false;

    boolean this_present_baseWorkingOrder = true && this.isSetBaseWorkingOrder();
    boolean that_present_baseWorkingOrder = true && that.isSetBaseWorkingOrder();
    if (this_present_baseWorkingOrder || that_present_baseWorkingOrder) {
      if (!(this_present_baseWorkingOrder && that_present_baseWorkingOrder))
        return false;
      if (!this.baseWorkingOrder.equals(that.baseWorkingOrder))
        return false;
    }

    boolean this_present_orderClassType = true && this.isSetOrderClassType();
    boolean that_present_orderClassType = true && that.isSetOrderClassType();
    if (this_present_orderClassType || that_present_orderClassType) {
      if (!(this_present_orderClassType && that_present_orderClassType))
        return false;
      if (!this.orderClassType.equals(that.orderClassType))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WorkingOrderStorage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBaseWorkingOrder()).compareTo(other.isSetBaseWorkingOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseWorkingOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseWorkingOrder, other.baseWorkingOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderClassType()).compareTo(other.isSetOrderClassType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderClassType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderClassType, other.orderClassType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkingOrderStorage(");
    boolean first = true;

    if (isSetBaseWorkingOrder()) {
      sb.append("baseWorkingOrder:");
      if (this.baseWorkingOrder == null) {
        sb.append("null");
      } else {
        sb.append(this.baseWorkingOrder);
      }
      first = false;
    }
    if (isSetOrderClassType()) {
      if (!first) sb.append(", ");
      sb.append("orderClassType:");
      if (this.orderClassType == null) {
        sb.append("null");
      } else {
        sb.append(this.orderClassType);
      }
      first = false;
    }
    if (isSetContent()) {
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (baseWorkingOrder != null) {
      baseWorkingOrder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkingOrderStorageStandardSchemeFactory implements SchemeFactory {
    public WorkingOrderStorageStandardScheme getScheme() {
      return new WorkingOrderStorageStandardScheme();
    }
  }

  private static class WorkingOrderStorageStandardScheme extends StandardScheme<WorkingOrderStorage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkingOrderStorage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASE_WORKING_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseWorkingOrder = new xueqiao.working.order.thriftapi.BaseWorkingOrder();
              struct.baseWorkingOrder.read(iprot);
              struct.setBaseWorkingOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_CLASS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderClassType = iprot.readString();
              struct.setOrderClassTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkingOrderStorage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.baseWorkingOrder != null) {
        if (struct.isSetBaseWorkingOrder()) {
          oprot.writeFieldBegin(BASE_WORKING_ORDER_FIELD_DESC);
          struct.baseWorkingOrder.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderClassType != null) {
        if (struct.isSetOrderClassType()) {
          oprot.writeFieldBegin(ORDER_CLASS_TYPE_FIELD_DESC);
          oprot.writeString(struct.orderClassType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.content != null) {
        if (struct.isSetContent()) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkingOrderStorageTupleSchemeFactory implements SchemeFactory {
    public WorkingOrderStorageTupleScheme getScheme() {
      return new WorkingOrderStorageTupleScheme();
    }
  }

  private static class WorkingOrderStorageTupleScheme extends TupleScheme<WorkingOrderStorage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkingOrderStorage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBaseWorkingOrder()) {
        optionals.set(0);
      }
      if (struct.isSetOrderClassType()) {
        optionals.set(1);
      }
      if (struct.isSetContent()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetBaseWorkingOrder()) {
        struct.baseWorkingOrder.write(oprot);
      }
      if (struct.isSetOrderClassType()) {
        oprot.writeString(struct.orderClassType);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkingOrderStorage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.baseWorkingOrder = new xueqiao.working.order.thriftapi.BaseWorkingOrder();
        struct.baseWorkingOrder.read(iprot);
        struct.setBaseWorkingOrderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orderClassType = iprot.readString();
        struct.setOrderClassTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
    }
  }

}

