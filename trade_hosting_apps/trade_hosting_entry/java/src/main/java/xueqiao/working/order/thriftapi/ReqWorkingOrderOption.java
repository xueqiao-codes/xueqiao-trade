/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.working.order.thriftapi;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ReqWorkingOrderOption implements org.apache.thrift.TBase<ReqWorkingOrderOption, ReqWorkingOrderOption._Fields>, java.io.Serializable, Cloneable, Comparable<ReqWorkingOrderOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReqWorkingOrderOption");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField COMPANY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyUserId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ORDER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("orderIds", org.apache.thrift.protocol.TType.SET, (short)5);
  private static final org.apache.thrift.protocol.TField COMPANY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("companyId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField COMPANY_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("companyIds", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField COMPANY_USER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("companyUserIds", org.apache.thrift.protocol.TType.SET, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ReqWorkingOrderOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ReqWorkingOrderOptionTupleSchemeFactory());
  }

  public long orderId; // optional
  public long companyUserId; // optional
  /**
   * 
   * @see WorkingOrderType
   */
  public WorkingOrderType type; // optional
  /**
   * 
   * @see WorkingOrderState
   */
  public WorkingOrderState state; // optional
  public Set<Long> orderIds; // optional
  public long companyId; // optional
  public Set<Long> companyIds; // optional
  public Set<Long> companyUserIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    COMPANY_USER_ID((short)2, "companyUserId"),
    /**
     * 
     * @see WorkingOrderType
     */
    TYPE((short)3, "type"),
    /**
     * 
     * @see WorkingOrderState
     */
    STATE((short)4, "state"),
    ORDER_IDS((short)5, "orderIds"),
    COMPANY_ID((short)6, "companyId"),
    COMPANY_IDS((short)7, "companyIds"),
    COMPANY_USER_IDS((short)8, "companyUserIds");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // COMPANY_USER_ID
          return COMPANY_USER_ID;
        case 3: // TYPE
          return TYPE;
        case 4: // STATE
          return STATE;
        case 5: // ORDER_IDS
          return ORDER_IDS;
        case 6: // COMPANY_ID
          return COMPANY_ID;
        case 7: // COMPANY_IDS
          return COMPANY_IDS;
        case 8: // COMPANY_USER_IDS
          return COMPANY_USER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERID_ISSET_ID = 0;
  private static final int __COMPANYUSERID_ISSET_ID = 1;
  private static final int __COMPANYID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.ORDER_ID,_Fields.COMPANY_USER_ID,_Fields.TYPE,_Fields.STATE,_Fields.ORDER_IDS,_Fields.COMPANY_ID,_Fields.COMPANY_IDS,_Fields.COMPANY_USER_IDS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("companyUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkingOrderType.class)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, WorkingOrderState.class)));
    tmpMap.put(_Fields.ORDER_IDS, new org.apache.thrift.meta_data.FieldMetaData("orderIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COMPANY_ID, new org.apache.thrift.meta_data.FieldMetaData("companyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.COMPANY_IDS, new org.apache.thrift.meta_data.FieldMetaData("companyIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    tmpMap.put(_Fields.COMPANY_USER_IDS, new org.apache.thrift.meta_data.FieldMetaData("companyUserIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReqWorkingOrderOption.class, metaDataMap);
  }

  public ReqWorkingOrderOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReqWorkingOrderOption(ReqWorkingOrderOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.orderId = other.orderId;
    this.companyUserId = other.companyUserId;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetOrderIds()) {
      Set<Long> __this__orderIds = new HashSet<Long>(other.orderIds);
      this.orderIds = __this__orderIds;
    }
    this.companyId = other.companyId;
    if (other.isSetCompanyIds()) {
      Set<Long> __this__companyIds = new HashSet<Long>(other.companyIds);
      this.companyIds = __this__companyIds;
    }
    if (other.isSetCompanyUserIds()) {
      Set<Long> __this__companyUserIds = new HashSet<Long>(other.companyUserIds);
      this.companyUserIds = __this__companyUserIds;
    }
  }

  public ReqWorkingOrderOption deepCopy() {
    return new ReqWorkingOrderOption(this);
  }

  @Override
  public void clear() {
    setOrderIdIsSet(false);
    this.orderId = 0;
    setCompanyUserIdIsSet(false);
    this.companyUserId = 0;
    this.type = null;
    this.state = null;
    this.orderIds = null;
    setCompanyIdIsSet(false);
    this.companyId = 0;
    this.companyIds = null;
    this.companyUserIds = null;
  }

  public long getOrderId() {
    return this.orderId;
  }

  public ReqWorkingOrderOption setOrderId(long orderId) {
    this.orderId = orderId;
    setOrderIdIsSet(true);
    return this;
  }

  public void unsetOrderId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
  }

  public void setOrderIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
  }

  public long getCompanyUserId() {
    return this.companyUserId;
  }

  public ReqWorkingOrderOption setCompanyUserId(long companyUserId) {
    this.companyUserId = companyUserId;
    setCompanyUserIdIsSet(true);
    return this;
  }

  public void unsetCompanyUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYUSERID_ISSET_ID);
  }

  /** Returns true if field companyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYUSERID_ISSET_ID);
  }

  public void setCompanyUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYUSERID_ISSET_ID, value);
  }

  /**
   * 
   * @see WorkingOrderType
   */
  public WorkingOrderType getType() {
    return this.type;
  }

  /**
   * 
   * @see WorkingOrderType
   */
  public ReqWorkingOrderOption setType(WorkingOrderType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  /**
   * 
   * @see WorkingOrderState
   */
  public WorkingOrderState getState() {
    return this.state;
  }

  /**
   * 
   * @see WorkingOrderState
   */
  public ReqWorkingOrderOption setState(WorkingOrderState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getOrderIdsSize() {
    return (this.orderIds == null) ? 0 : this.orderIds.size();
  }

  public java.util.Iterator<Long> getOrderIdsIterator() {
    return (this.orderIds == null) ? null : this.orderIds.iterator();
  }

  public void addToOrderIds(long elem) {
    if (this.orderIds == null) {
      this.orderIds = new HashSet<Long>();
    }
    this.orderIds.add(elem);
  }

  public Set<Long> getOrderIds() {
    return this.orderIds;
  }

  public ReqWorkingOrderOption setOrderIds(Set<Long> orderIds) {
    this.orderIds = orderIds;
    return this;
  }

  public void unsetOrderIds() {
    this.orderIds = null;
  }

  /** Returns true if field orderIds is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderIds() {
    return this.orderIds != null;
  }

  public void setOrderIdsIsSet(boolean value) {
    if (!value) {
      this.orderIds = null;
    }
  }

  public long getCompanyId() {
    return this.companyId;
  }

  public ReqWorkingOrderOption setCompanyId(long companyId) {
    this.companyId = companyId;
    setCompanyIdIsSet(true);
    return this;
  }

  public void unsetCompanyId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  /** Returns true if field companyId is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyId() {
    return EncodingUtils.testBit(__isset_bitfield, __COMPANYID_ISSET_ID);
  }

  public void setCompanyIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COMPANYID_ISSET_ID, value);
  }

  public int getCompanyIdsSize() {
    return (this.companyIds == null) ? 0 : this.companyIds.size();
  }

  public java.util.Iterator<Long> getCompanyIdsIterator() {
    return (this.companyIds == null) ? null : this.companyIds.iterator();
  }

  public void addToCompanyIds(long elem) {
    if (this.companyIds == null) {
      this.companyIds = new HashSet<Long>();
    }
    this.companyIds.add(elem);
  }

  public Set<Long> getCompanyIds() {
    return this.companyIds;
  }

  public ReqWorkingOrderOption setCompanyIds(Set<Long> companyIds) {
    this.companyIds = companyIds;
    return this;
  }

  public void unsetCompanyIds() {
    this.companyIds = null;
  }

  /** Returns true if field companyIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyIds() {
    return this.companyIds != null;
  }

  public void setCompanyIdsIsSet(boolean value) {
    if (!value) {
      this.companyIds = null;
    }
  }

  public int getCompanyUserIdsSize() {
    return (this.companyUserIds == null) ? 0 : this.companyUserIds.size();
  }

  public java.util.Iterator<Long> getCompanyUserIdsIterator() {
    return (this.companyUserIds == null) ? null : this.companyUserIds.iterator();
  }

  public void addToCompanyUserIds(long elem) {
    if (this.companyUserIds == null) {
      this.companyUserIds = new HashSet<Long>();
    }
    this.companyUserIds.add(elem);
  }

  public Set<Long> getCompanyUserIds() {
    return this.companyUserIds;
  }

  public ReqWorkingOrderOption setCompanyUserIds(Set<Long> companyUserIds) {
    this.companyUserIds = companyUserIds;
    return this;
  }

  public void unsetCompanyUserIds() {
    this.companyUserIds = null;
  }

  /** Returns true if field companyUserIds is set (has been assigned a value) and false otherwise */
  public boolean isSetCompanyUserIds() {
    return this.companyUserIds != null;
  }

  public void setCompanyUserIdsIsSet(boolean value) {
    if (!value) {
      this.companyUserIds = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((Long)value);
      }
      break;

    case COMPANY_USER_ID:
      if (value == null) {
        unsetCompanyUserId();
      } else {
        setCompanyUserId((Long)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((WorkingOrderType)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((WorkingOrderState)value);
      }
      break;

    case ORDER_IDS:
      if (value == null) {
        unsetOrderIds();
      } else {
        setOrderIds((Set<Long>)value);
      }
      break;

    case COMPANY_ID:
      if (value == null) {
        unsetCompanyId();
      } else {
        setCompanyId((Long)value);
      }
      break;

    case COMPANY_IDS:
      if (value == null) {
        unsetCompanyIds();
      } else {
        setCompanyIds((Set<Long>)value);
      }
      break;

    case COMPANY_USER_IDS:
      if (value == null) {
        unsetCompanyUserIds();
      } else {
        setCompanyUserIds((Set<Long>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return Long.valueOf(getOrderId());

    case COMPANY_USER_ID:
      return Long.valueOf(getCompanyUserId());

    case TYPE:
      return getType();

    case STATE:
      return getState();

    case ORDER_IDS:
      return getOrderIds();

    case COMPANY_ID:
      return Long.valueOf(getCompanyId());

    case COMPANY_IDS:
      return getCompanyIds();

    case COMPANY_USER_IDS:
      return getCompanyUserIds();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case COMPANY_USER_ID:
      return isSetCompanyUserId();
    case TYPE:
      return isSetType();
    case STATE:
      return isSetState();
    case ORDER_IDS:
      return isSetOrderIds();
    case COMPANY_ID:
      return isSetCompanyId();
    case COMPANY_IDS:
      return isSetCompanyIds();
    case COMPANY_USER_IDS:
      return isSetCompanyUserIds();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ReqWorkingOrderOption)
      return this.equals((ReqWorkingOrderOption)that);
    return false;
  }

  public boolean equals(ReqWorkingOrderOption that) {
    if (that == null)
      return false;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (this.orderId != that.orderId)
        return false;
    }

    boolean this_present_companyUserId = true && this.isSetCompanyUserId();
    boolean that_present_companyUserId = true && that.isSetCompanyUserId();
    if (this_present_companyUserId || that_present_companyUserId) {
      if (!(this_present_companyUserId && that_present_companyUserId))
        return false;
      if (this.companyUserId != that.companyUserId)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_orderIds = true && this.isSetOrderIds();
    boolean that_present_orderIds = true && that.isSetOrderIds();
    if (this_present_orderIds || that_present_orderIds) {
      if (!(this_present_orderIds && that_present_orderIds))
        return false;
      if (!this.orderIds.equals(that.orderIds))
        return false;
    }

    boolean this_present_companyId = true && this.isSetCompanyId();
    boolean that_present_companyId = true && that.isSetCompanyId();
    if (this_present_companyId || that_present_companyId) {
      if (!(this_present_companyId && that_present_companyId))
        return false;
      if (this.companyId != that.companyId)
        return false;
    }

    boolean this_present_companyIds = true && this.isSetCompanyIds();
    boolean that_present_companyIds = true && that.isSetCompanyIds();
    if (this_present_companyIds || that_present_companyIds) {
      if (!(this_present_companyIds && that_present_companyIds))
        return false;
      if (!this.companyIds.equals(that.companyIds))
        return false;
    }

    boolean this_present_companyUserIds = true && this.isSetCompanyUserIds();
    boolean that_present_companyUserIds = true && that.isSetCompanyUserIds();
    if (this_present_companyUserIds || that_present_companyUserIds) {
      if (!(this_present_companyUserIds && that_present_companyUserIds))
        return false;
      if (!this.companyUserIds.equals(that.companyUserIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ReqWorkingOrderOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyUserId()).compareTo(other.isSetCompanyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyUserId, other.companyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOrderIds()).compareTo(other.isSetOrderIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderIds, other.orderIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyId()).compareTo(other.isSetCompanyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyId, other.companyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyIds()).compareTo(other.isSetCompanyIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyIds, other.companyIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCompanyUserIds()).compareTo(other.isSetCompanyUserIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompanyUserIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.companyUserIds, other.companyUserIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ReqWorkingOrderOption(");
    boolean first = true;

    if (isSetOrderId()) {
      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
    }
    if (isSetCompanyUserId()) {
      if (!first) sb.append(", ");
      sb.append("companyUserId:");
      sb.append(this.companyUserId);
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetState()) {
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
    }
    if (isSetOrderIds()) {
      if (!first) sb.append(", ");
      sb.append("orderIds:");
      if (this.orderIds == null) {
        sb.append("null");
      } else {
        sb.append(this.orderIds);
      }
      first = false;
    }
    if (isSetCompanyId()) {
      if (!first) sb.append(", ");
      sb.append("companyId:");
      sb.append(this.companyId);
      first = false;
    }
    if (isSetCompanyIds()) {
      if (!first) sb.append(", ");
      sb.append("companyIds:");
      if (this.companyIds == null) {
        sb.append("null");
      } else {
        sb.append(this.companyIds);
      }
      first = false;
    }
    if (isSetCompanyUserIds()) {
      if (!first) sb.append(", ");
      sb.append("companyUserIds:");
      if (this.companyUserIds == null) {
        sb.append("null");
      } else {
        sb.append(this.companyUserIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReqWorkingOrderOptionStandardSchemeFactory implements SchemeFactory {
    public ReqWorkingOrderOptionStandardScheme getScheme() {
      return new ReqWorkingOrderOptionStandardScheme();
    }
  }

  private static class ReqWorkingOrderOptionStandardScheme extends StandardScheme<ReqWorkingOrderOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReqWorkingOrderOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderId = iprot.readI64();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COMPANY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyUserId = iprot.readI64();
              struct.setCompanyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = WorkingOrderType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = WorkingOrderState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORDER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set44 = iprot.readSetBegin();
                struct.orderIds = new HashSet<Long>(2*_set44.size);
                for (int _i45 = 0; _i45 < _set44.size; ++_i45)
                {
                  long _elem46;
                  _elem46 = iprot.readI64();
                  struct.orderIds.add(_elem46);
                }
                iprot.readSetEnd();
              }
              struct.setOrderIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPANY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.companyId = iprot.readI64();
              struct.setCompanyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPANY_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set47 = iprot.readSetBegin();
                struct.companyIds = new HashSet<Long>(2*_set47.size);
                for (int _i48 = 0; _i48 < _set47.size; ++_i48)
                {
                  long _elem49;
                  _elem49 = iprot.readI64();
                  struct.companyIds.add(_elem49);
                }
                iprot.readSetEnd();
              }
              struct.setCompanyIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // COMPANY_USER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set50 = iprot.readSetBegin();
                struct.companyUserIds = new HashSet<Long>(2*_set50.size);
                for (int _i51 = 0; _i51 < _set50.size; ++_i51)
                {
                  long _elem52;
                  _elem52 = iprot.readI64();
                  struct.companyUserIds.add(_elem52);
                }
                iprot.readSetEnd();
              }
              struct.setCompanyUserIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReqWorkingOrderOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetOrderId()) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCompanyUserId()) {
        oprot.writeFieldBegin(COMPANY_USER_ID_FIELD_DESC);
        oprot.writeI64(struct.companyUserId);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.state != null) {
        if (struct.isSetState()) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.orderIds != null) {
        if (struct.isSetOrderIds()) {
          oprot.writeFieldBegin(ORDER_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.orderIds.size()));
            for (long _iter53 : struct.orderIds)
            {
              oprot.writeI64(_iter53);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeFieldBegin(COMPANY_ID_FIELD_DESC);
        oprot.writeI64(struct.companyId);
        oprot.writeFieldEnd();
      }
      if (struct.companyIds != null) {
        if (struct.isSetCompanyIds()) {
          oprot.writeFieldBegin(COMPANY_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.companyIds.size()));
            for (long _iter54 : struct.companyIds)
            {
              oprot.writeI64(_iter54);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.companyUserIds != null) {
        if (struct.isSetCompanyUserIds()) {
          oprot.writeFieldBegin(COMPANY_USER_IDS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, struct.companyUserIds.size()));
            for (long _iter55 : struct.companyUserIds)
            {
              oprot.writeI64(_iter55);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReqWorkingOrderOptionTupleSchemeFactory implements SchemeFactory {
    public ReqWorkingOrderOptionTupleScheme getScheme() {
      return new ReqWorkingOrderOptionTupleScheme();
    }
  }

  private static class ReqWorkingOrderOptionTupleScheme extends TupleScheme<ReqWorkingOrderOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReqWorkingOrderOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetCompanyUserId()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetState()) {
        optionals.set(3);
      }
      if (struct.isSetOrderIds()) {
        optionals.set(4);
      }
      if (struct.isSetCompanyId()) {
        optionals.set(5);
      }
      if (struct.isSetCompanyIds()) {
        optionals.set(6);
      }
      if (struct.isSetCompanyUserIds()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetOrderId()) {
        oprot.writeI64(struct.orderId);
      }
      if (struct.isSetCompanyUserId()) {
        oprot.writeI64(struct.companyUserId);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetOrderIds()) {
        {
          oprot.writeI32(struct.orderIds.size());
          for (long _iter56 : struct.orderIds)
          {
            oprot.writeI64(_iter56);
          }
        }
      }
      if (struct.isSetCompanyId()) {
        oprot.writeI64(struct.companyId);
      }
      if (struct.isSetCompanyIds()) {
        {
          oprot.writeI32(struct.companyIds.size());
          for (long _iter57 : struct.companyIds)
          {
            oprot.writeI64(_iter57);
          }
        }
      }
      if (struct.isSetCompanyUserIds()) {
        {
          oprot.writeI32(struct.companyUserIds.size());
          for (long _iter58 : struct.companyUserIds)
          {
            oprot.writeI64(_iter58);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReqWorkingOrderOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.orderId = iprot.readI64();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.companyUserId = iprot.readI64();
        struct.setCompanyUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = WorkingOrderType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.state = WorkingOrderState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TSet _set59 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.orderIds = new HashSet<Long>(2*_set59.size);
          for (int _i60 = 0; _i60 < _set59.size; ++_i60)
          {
            long _elem61;
            _elem61 = iprot.readI64();
            struct.orderIds.add(_elem61);
          }
        }
        struct.setOrderIdsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.companyId = iprot.readI64();
        struct.setCompanyIdIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TSet _set62 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.companyIds = new HashSet<Long>(2*_set62.size);
          for (int _i63 = 0; _i63 < _set62.size; ++_i63)
          {
            long _elem64;
            _elem64 = iprot.readI64();
            struct.companyIds.add(_elem64);
          }
        }
        struct.setCompanyIdsIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set65 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I64, iprot.readI32());
          struct.companyUserIds = new HashSet<Long>(2*_set65.size);
          for (int _i66 = 0; _i66 < _set65.size; ++_i66)
          {
            long _elem67;
            _elem67 = iprot.readI64();
            struct.companyUserIds.add(_elem67);
          }
        }
        struct.setCompanyUserIdsIsSet(true);
      }
    }
  }

}

