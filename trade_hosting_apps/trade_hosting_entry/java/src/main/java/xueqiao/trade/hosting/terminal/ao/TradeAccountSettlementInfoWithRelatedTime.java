/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.terminal.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TradeAccountSettlementInfoWithRelatedTime implements org.apache.thrift.TBase<TradeAccountSettlementInfoWithRelatedTime, TradeAccountSettlementInfoWithRelatedTime._Fields>, java.io.Serializable, Cloneable, Comparable<TradeAccountSettlementInfoWithRelatedTime> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TradeAccountSettlementInfoWithRelatedTime");

  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_SETTLEMENT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountSettlementInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField REQ_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reqTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TradeAccountSettlementInfoWithRelatedTimeStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TradeAccountSettlementInfoWithRelatedTimeTupleSchemeFactory());
  }

  public xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo tradeAccountSettlementInfo; // optional
  public xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime reqTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRADE_ACCOUNT_SETTLEMENT_INFO((short)1, "tradeAccountSettlementInfo"),
    REQ_TIME((short)2, "reqTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRADE_ACCOUNT_SETTLEMENT_INFO
          return TRADE_ACCOUNT_SETTLEMENT_INFO;
        case 2: // REQ_TIME
          return REQ_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.TRADE_ACCOUNT_SETTLEMENT_INFO,_Fields.REQ_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRADE_ACCOUNT_SETTLEMENT_INFO, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountSettlementInfo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo.class)));
    tmpMap.put(_Fields.REQ_TIME, new org.apache.thrift.meta_data.FieldMetaData("reqTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TradeAccountSettlementInfoWithRelatedTime.class, metaDataMap);
  }

  public TradeAccountSettlementInfoWithRelatedTime() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TradeAccountSettlementInfoWithRelatedTime(TradeAccountSettlementInfoWithRelatedTime other) {
    if (other.isSetTradeAccountSettlementInfo()) {
      this.tradeAccountSettlementInfo = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo(other.tradeAccountSettlementInfo);
    }
    if (other.isSetReqTime()) {
      this.reqTime = new xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime(other.reqTime);
    }
  }

  public TradeAccountSettlementInfoWithRelatedTime deepCopy() {
    return new TradeAccountSettlementInfoWithRelatedTime(this);
  }

  @Override
  public void clear() {
    this.tradeAccountSettlementInfo = null;
    this.reqTime = null;
  }

  public xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo getTradeAccountSettlementInfo() {
    return this.tradeAccountSettlementInfo;
  }

  public TradeAccountSettlementInfoWithRelatedTime setTradeAccountSettlementInfo(xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo tradeAccountSettlementInfo) {
    this.tradeAccountSettlementInfo = tradeAccountSettlementInfo;
    return this;
  }

  public void unsetTradeAccountSettlementInfo() {
    this.tradeAccountSettlementInfo = null;
  }

  /** Returns true if field tradeAccountSettlementInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountSettlementInfo() {
    return this.tradeAccountSettlementInfo != null;
  }

  public void setTradeAccountSettlementInfoIsSet(boolean value) {
    if (!value) {
      this.tradeAccountSettlementInfo = null;
    }
  }

  public xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime getReqTime() {
    return this.reqTime;
  }

  public TradeAccountSettlementInfoWithRelatedTime setReqTime(xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime reqTime) {
    this.reqTime = reqTime;
    return this;
  }

  public void unsetReqTime() {
    this.reqTime = null;
  }

  /** Returns true if field reqTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReqTime() {
    return this.reqTime != null;
  }

  public void setReqTimeIsSet(boolean value) {
    if (!value) {
      this.reqTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRADE_ACCOUNT_SETTLEMENT_INFO:
      if (value == null) {
        unsetTradeAccountSettlementInfo();
      } else {
        setTradeAccountSettlementInfo((xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo)value);
      }
      break;

    case REQ_TIME:
      if (value == null) {
        unsetReqTime();
      } else {
        setReqTime((xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRADE_ACCOUNT_SETTLEMENT_INFO:
      return getTradeAccountSettlementInfo();

    case REQ_TIME:
      return getReqTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRADE_ACCOUNT_SETTLEMENT_INFO:
      return isSetTradeAccountSettlementInfo();
    case REQ_TIME:
      return isSetReqTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TradeAccountSettlementInfoWithRelatedTime)
      return this.equals((TradeAccountSettlementInfoWithRelatedTime)that);
    return false;
  }

  public boolean equals(TradeAccountSettlementInfoWithRelatedTime that) {
    if (that == null)
      return false;

    boolean this_present_tradeAccountSettlementInfo = true && this.isSetTradeAccountSettlementInfo();
    boolean that_present_tradeAccountSettlementInfo = true && that.isSetTradeAccountSettlementInfo();
    if (this_present_tradeAccountSettlementInfo || that_present_tradeAccountSettlementInfo) {
      if (!(this_present_tradeAccountSettlementInfo && that_present_tradeAccountSettlementInfo))
        return false;
      if (!this.tradeAccountSettlementInfo.equals(that.tradeAccountSettlementInfo))
        return false;
    }

    boolean this_present_reqTime = true && this.isSetReqTime();
    boolean that_present_reqTime = true && that.isSetReqTime();
    if (this_present_reqTime || that_present_reqTime) {
      if (!(this_present_reqTime && that_present_reqTime))
        return false;
      if (!this.reqTime.equals(that.reqTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TradeAccountSettlementInfoWithRelatedTime other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTradeAccountSettlementInfo()).compareTo(other.isSetTradeAccountSettlementInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountSettlementInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountSettlementInfo, other.tradeAccountSettlementInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReqTime()).compareTo(other.isSetReqTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reqTime, other.reqTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TradeAccountSettlementInfoWithRelatedTime(");
    boolean first = true;

    if (isSetTradeAccountSettlementInfo()) {
      sb.append("tradeAccountSettlementInfo:");
      if (this.tradeAccountSettlementInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tradeAccountSettlementInfo);
      }
      first = false;
    }
    if (isSetReqTime()) {
      if (!first) sb.append(", ");
      sb.append("reqTime:");
      if (this.reqTime == null) {
        sb.append("null");
      } else {
        sb.append(this.reqTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (tradeAccountSettlementInfo != null) {
      tradeAccountSettlementInfo.validate();
    }
    if (reqTime != null) {
      reqTime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TradeAccountSettlementInfoWithRelatedTimeStandardSchemeFactory implements SchemeFactory {
    public TradeAccountSettlementInfoWithRelatedTimeStandardScheme getScheme() {
      return new TradeAccountSettlementInfoWithRelatedTimeStandardScheme();
    }
  }

  private static class TradeAccountSettlementInfoWithRelatedTimeStandardScheme extends StandardScheme<TradeAccountSettlementInfoWithRelatedTime> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TradeAccountSettlementInfoWithRelatedTime struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRADE_ACCOUNT_SETTLEMENT_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tradeAccountSettlementInfo = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo();
              struct.tradeAccountSettlementInfo.read(iprot);
              struct.setTradeAccountSettlementInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REQ_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.reqTime = new xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime();
              struct.reqTime.read(iprot);
              struct.setReqTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TradeAccountSettlementInfoWithRelatedTime struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tradeAccountSettlementInfo != null) {
        if (struct.isSetTradeAccountSettlementInfo()) {
          oprot.writeFieldBegin(TRADE_ACCOUNT_SETTLEMENT_INFO_FIELD_DESC);
          struct.tradeAccountSettlementInfo.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.reqTime != null) {
        if (struct.isSetReqTime()) {
          oprot.writeFieldBegin(REQ_TIME_FIELD_DESC);
          struct.reqTime.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TradeAccountSettlementInfoWithRelatedTimeTupleSchemeFactory implements SchemeFactory {
    public TradeAccountSettlementInfoWithRelatedTimeTupleScheme getScheme() {
      return new TradeAccountSettlementInfoWithRelatedTimeTupleScheme();
    }
  }

  private static class TradeAccountSettlementInfoWithRelatedTimeTupleScheme extends TupleScheme<TradeAccountSettlementInfoWithRelatedTime> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TradeAccountSettlementInfoWithRelatedTime struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTradeAccountSettlementInfo()) {
        optionals.set(0);
      }
      if (struct.isSetReqTime()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTradeAccountSettlementInfo()) {
        struct.tradeAccountSettlementInfo.write(oprot);
      }
      if (struct.isSetReqTime()) {
        struct.reqTime.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TradeAccountSettlementInfoWithRelatedTime struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.tradeAccountSettlementInfo = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountSettlementInfo();
        struct.tradeAccountSettlementInfo.read(iprot);
        struct.setTradeAccountSettlementInfoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.reqTime = new xueqiao.trade.hosting.position.adjust.thriftapi.SettlementTimeRelateSledReqTime();
        struct.reqTime.read(iprot);
        struct.setReqTimeIsSet(true);
      }
    }
  }

}

