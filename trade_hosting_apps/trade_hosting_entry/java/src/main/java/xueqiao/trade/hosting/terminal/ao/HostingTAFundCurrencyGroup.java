/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.terminal.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingTAFundCurrencyGroup implements org.apache.thrift.TBase<HostingTAFundCurrencyGroup, HostingTAFundCurrencyGroup._Fields>, java.io.Serializable, Cloneable, Comparable<HostingTAFundCurrencyGroup> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingTAFundCurrencyGroup");

  private static final org.apache.thrift.protocol.TField CURRENCY_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("currencyNo", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_FUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("itemFunds", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField GROUP_TOTAL_FUND_FIELD_DESC = new org.apache.thrift.protocol.TField("groupTotalFund", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingTAFundCurrencyGroupStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingTAFundCurrencyGroupTupleSchemeFactory());
  }

  public String currencyNo; // optional
  public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund> itemFunds; // optional
  public xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund groupTotalFund; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CURRENCY_NO((short)1, "currencyNo"),
    ITEM_FUNDS((short)2, "itemFunds"),
    GROUP_TOTAL_FUND((short)3, "groupTotalFund");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CURRENCY_NO
          return CURRENCY_NO;
        case 2: // ITEM_FUNDS
          return ITEM_FUNDS;
        case 3: // GROUP_TOTAL_FUND
          return GROUP_TOTAL_FUND;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.CURRENCY_NO,_Fields.ITEM_FUNDS,_Fields.GROUP_TOTAL_FUND};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CURRENCY_NO, new org.apache.thrift.meta_data.FieldMetaData("currencyNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_FUNDS, new org.apache.thrift.meta_data.FieldMetaData("itemFunds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund.class))));
    tmpMap.put(_Fields.GROUP_TOTAL_FUND, new org.apache.thrift.meta_data.FieldMetaData("groupTotalFund", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingTAFundCurrencyGroup.class, metaDataMap);
  }

  public HostingTAFundCurrencyGroup() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingTAFundCurrencyGroup(HostingTAFundCurrencyGroup other) {
    if (other.isSetCurrencyNo()) {
      this.currencyNo = other.currencyNo;
    }
    if (other.isSetItemFunds()) {
      List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund> __this__itemFunds = new ArrayList<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund>(other.itemFunds.size());
      for (xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund other_element : other.itemFunds) {
        __this__itemFunds.add(new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund(other_element));
      }
      this.itemFunds = __this__itemFunds;
    }
    if (other.isSetGroupTotalFund()) {
      this.groupTotalFund = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund(other.groupTotalFund);
    }
  }

  public HostingTAFundCurrencyGroup deepCopy() {
    return new HostingTAFundCurrencyGroup(this);
  }

  @Override
  public void clear() {
    this.currencyNo = null;
    this.itemFunds = null;
    this.groupTotalFund = null;
  }

  public String getCurrencyNo() {
    return this.currencyNo;
  }

  public HostingTAFundCurrencyGroup setCurrencyNo(String currencyNo) {
    this.currencyNo = currencyNo;
    return this;
  }

  public void unsetCurrencyNo() {
    this.currencyNo = null;
  }

  /** Returns true if field currencyNo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyNo() {
    return this.currencyNo != null;
  }

  public void setCurrencyNoIsSet(boolean value) {
    if (!value) {
      this.currencyNo = null;
    }
  }

  public int getItemFundsSize() {
    return (this.itemFunds == null) ? 0 : this.itemFunds.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund> getItemFundsIterator() {
    return (this.itemFunds == null) ? null : this.itemFunds.iterator();
  }

  public void addToItemFunds(xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund elem) {
    if (this.itemFunds == null) {
      this.itemFunds = new ArrayList<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund>();
    }
    this.itemFunds.add(elem);
  }

  public List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund> getItemFunds() {
    return this.itemFunds;
  }

  public HostingTAFundCurrencyGroup setItemFunds(List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund> itemFunds) {
    this.itemFunds = itemFunds;
    return this;
  }

  public void unsetItemFunds() {
    this.itemFunds = null;
  }

  /** Returns true if field itemFunds is set (has been assigned a value) and false otherwise */
  public boolean isSetItemFunds() {
    return this.itemFunds != null;
  }

  public void setItemFundsIsSet(boolean value) {
    if (!value) {
      this.itemFunds = null;
    }
  }

  public xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund getGroupTotalFund() {
    return this.groupTotalFund;
  }

  public HostingTAFundCurrencyGroup setGroupTotalFund(xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund groupTotalFund) {
    this.groupTotalFund = groupTotalFund;
    return this;
  }

  public void unsetGroupTotalFund() {
    this.groupTotalFund = null;
  }

  /** Returns true if field groupTotalFund is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupTotalFund() {
    return this.groupTotalFund != null;
  }

  public void setGroupTotalFundIsSet(boolean value) {
    if (!value) {
      this.groupTotalFund = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CURRENCY_NO:
      if (value == null) {
        unsetCurrencyNo();
      } else {
        setCurrencyNo((String)value);
      }
      break;

    case ITEM_FUNDS:
      if (value == null) {
        unsetItemFunds();
      } else {
        setItemFunds((List<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund>)value);
      }
      break;

    case GROUP_TOTAL_FUND:
      if (value == null) {
        unsetGroupTotalFund();
      } else {
        setGroupTotalFund((xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CURRENCY_NO:
      return getCurrencyNo();

    case ITEM_FUNDS:
      return getItemFunds();

    case GROUP_TOTAL_FUND:
      return getGroupTotalFund();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CURRENCY_NO:
      return isSetCurrencyNo();
    case ITEM_FUNDS:
      return isSetItemFunds();
    case GROUP_TOTAL_FUND:
      return isSetGroupTotalFund();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingTAFundCurrencyGroup)
      return this.equals((HostingTAFundCurrencyGroup)that);
    return false;
  }

  public boolean equals(HostingTAFundCurrencyGroup that) {
    if (that == null)
      return false;

    boolean this_present_currencyNo = true && this.isSetCurrencyNo();
    boolean that_present_currencyNo = true && that.isSetCurrencyNo();
    if (this_present_currencyNo || that_present_currencyNo) {
      if (!(this_present_currencyNo && that_present_currencyNo))
        return false;
      if (!this.currencyNo.equals(that.currencyNo))
        return false;
    }

    boolean this_present_itemFunds = true && this.isSetItemFunds();
    boolean that_present_itemFunds = true && that.isSetItemFunds();
    if (this_present_itemFunds || that_present_itemFunds) {
      if (!(this_present_itemFunds && that_present_itemFunds))
        return false;
      if (!this.itemFunds.equals(that.itemFunds))
        return false;
    }

    boolean this_present_groupTotalFund = true && this.isSetGroupTotalFund();
    boolean that_present_groupTotalFund = true && that.isSetGroupTotalFund();
    if (this_present_groupTotalFund || that_present_groupTotalFund) {
      if (!(this_present_groupTotalFund && that_present_groupTotalFund))
        return false;
      if (!this.groupTotalFund.equals(that.groupTotalFund))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingTAFundCurrencyGroup other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetCurrencyNo()).compareTo(other.isSetCurrencyNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currencyNo, other.currencyNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetItemFunds()).compareTo(other.isSetItemFunds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemFunds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemFunds, other.itemFunds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupTotalFund()).compareTo(other.isSetGroupTotalFund());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupTotalFund()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupTotalFund, other.groupTotalFund);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingTAFundCurrencyGroup(");
    boolean first = true;

    if (isSetCurrencyNo()) {
      sb.append("currencyNo:");
      if (this.currencyNo == null) {
        sb.append("null");
      } else {
        sb.append(this.currencyNo);
      }
      first = false;
    }
    if (isSetItemFunds()) {
      if (!first) sb.append(", ");
      sb.append("itemFunds:");
      if (this.itemFunds == null) {
        sb.append("null");
      } else {
        sb.append(this.itemFunds);
      }
      first = false;
    }
    if (isSetGroupTotalFund()) {
      if (!first) sb.append(", ");
      sb.append("groupTotalFund:");
      if (this.groupTotalFund == null) {
        sb.append("null");
      } else {
        sb.append(this.groupTotalFund);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (groupTotalFund != null) {
      groupTotalFund.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingTAFundCurrencyGroupStandardSchemeFactory implements SchemeFactory {
    public HostingTAFundCurrencyGroupStandardScheme getScheme() {
      return new HostingTAFundCurrencyGroupStandardScheme();
    }
  }

  private static class HostingTAFundCurrencyGroupStandardScheme extends StandardScheme<HostingTAFundCurrencyGroup> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingTAFundCurrencyGroup struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CURRENCY_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.currencyNo = iprot.readString();
              struct.setCurrencyNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_FUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                struct.itemFunds = new ArrayList<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund>(_list160.size);
                for (int _i161 = 0; _i161 < _list160.size; ++_i161)
                {
                  xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund _elem162;
                  _elem162 = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund();
                  _elem162.read(iprot);
                  struct.itemFunds.add(_elem162);
                }
                iprot.readListEnd();
              }
              struct.setItemFundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // GROUP_TOTAL_FUND
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.groupTotalFund = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund();
              struct.groupTotalFund.read(iprot);
              struct.setGroupTotalFundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingTAFundCurrencyGroup struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.currencyNo != null) {
        if (struct.isSetCurrencyNo()) {
          oprot.writeFieldBegin(CURRENCY_NO_FIELD_DESC);
          oprot.writeString(struct.currencyNo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.itemFunds != null) {
        if (struct.isSetItemFunds()) {
          oprot.writeFieldBegin(ITEM_FUNDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.itemFunds.size()));
            for (xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund _iter163 : struct.itemFunds)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.groupTotalFund != null) {
        if (struct.isSetGroupTotalFund()) {
          oprot.writeFieldBegin(GROUP_TOTAL_FUND_FIELD_DESC);
          struct.groupTotalFund.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingTAFundCurrencyGroupTupleSchemeFactory implements SchemeFactory {
    public HostingTAFundCurrencyGroupTupleScheme getScheme() {
      return new HostingTAFundCurrencyGroupTupleScheme();
    }
  }

  private static class HostingTAFundCurrencyGroupTupleScheme extends TupleScheme<HostingTAFundCurrencyGroup> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingTAFundCurrencyGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetCurrencyNo()) {
        optionals.set(0);
      }
      if (struct.isSetItemFunds()) {
        optionals.set(1);
      }
      if (struct.isSetGroupTotalFund()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetCurrencyNo()) {
        oprot.writeString(struct.currencyNo);
      }
      if (struct.isSetItemFunds()) {
        {
          oprot.writeI32(struct.itemFunds.size());
          for (xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund _iter164 : struct.itemFunds)
          {
            _iter164.write(oprot);
          }
        }
      }
      if (struct.isSetGroupTotalFund()) {
        struct.groupTotalFund.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingTAFundCurrencyGroup struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.currencyNo = iprot.readString();
        struct.setCurrencyNoIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.itemFunds = new ArrayList<xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund>(_list165.size);
          for (int _i166 = 0; _i166 < _list165.size; ++_i166)
          {
            xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund _elem167;
            _elem167 = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund();
            _elem167.read(iprot);
            struct.itemFunds.add(_elem167);
          }
        }
        struct.setItemFundsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.groupTotalFund = new xueqiao.trade.hosting.tradeaccount.data.TradeAccountFund();
        struct.groupTotalFund.read(iprot);
        struct.setGroupTotalFundIsSet(true);
      }
    }
  }

}

