/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.terminal.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HostingComposeViewDetail implements org.apache.thrift.TBase<HostingComposeViewDetail, HostingComposeViewDetail._Fields>, java.io.Serializable, Cloneable, Comparable<HostingComposeViewDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("HostingComposeViewDetail");

  private static final org.apache.thrift.protocol.TField VIEW_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("viewDetail", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField GRAPH_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("graphDetail", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new HostingComposeViewDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new HostingComposeViewDetailTupleSchemeFactory());
  }

  public xueqiao.trade.hosting.HostingComposeView viewDetail; // optional
  public xueqiao.trade.hosting.HostingComposeGraph graphDetail; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    VIEW_DETAIL((short)1, "viewDetail"),
    GRAPH_DETAIL((short)2, "graphDetail");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VIEW_DETAIL
          return VIEW_DETAIL;
        case 2: // GRAPH_DETAIL
          return GRAPH_DETAIL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.VIEW_DETAIL,_Fields.GRAPH_DETAIL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VIEW_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("viewDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingComposeView.class)));
    tmpMap.put(_Fields.GRAPH_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("graphDetail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, xueqiao.trade.hosting.HostingComposeGraph.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(HostingComposeViewDetail.class, metaDataMap);
  }

  public HostingComposeViewDetail() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HostingComposeViewDetail(HostingComposeViewDetail other) {
    if (other.isSetViewDetail()) {
      this.viewDetail = new xueqiao.trade.hosting.HostingComposeView(other.viewDetail);
    }
    if (other.isSetGraphDetail()) {
      this.graphDetail = new xueqiao.trade.hosting.HostingComposeGraph(other.graphDetail);
    }
  }

  public HostingComposeViewDetail deepCopy() {
    return new HostingComposeViewDetail(this);
  }

  @Override
  public void clear() {
    this.viewDetail = null;
    this.graphDetail = null;
  }

  public xueqiao.trade.hosting.HostingComposeView getViewDetail() {
    return this.viewDetail;
  }

  public HostingComposeViewDetail setViewDetail(xueqiao.trade.hosting.HostingComposeView viewDetail) {
    this.viewDetail = viewDetail;
    return this;
  }

  public void unsetViewDetail() {
    this.viewDetail = null;
  }

  /** Returns true if field viewDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetViewDetail() {
    return this.viewDetail != null;
  }

  public void setViewDetailIsSet(boolean value) {
    if (!value) {
      this.viewDetail = null;
    }
  }

  public xueqiao.trade.hosting.HostingComposeGraph getGraphDetail() {
    return this.graphDetail;
  }

  public HostingComposeViewDetail setGraphDetail(xueqiao.trade.hosting.HostingComposeGraph graphDetail) {
    this.graphDetail = graphDetail;
    return this;
  }

  public void unsetGraphDetail() {
    this.graphDetail = null;
  }

  /** Returns true if field graphDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetGraphDetail() {
    return this.graphDetail != null;
  }

  public void setGraphDetailIsSet(boolean value) {
    if (!value) {
      this.graphDetail = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case VIEW_DETAIL:
      if (value == null) {
        unsetViewDetail();
      } else {
        setViewDetail((xueqiao.trade.hosting.HostingComposeView)value);
      }
      break;

    case GRAPH_DETAIL:
      if (value == null) {
        unsetGraphDetail();
      } else {
        setGraphDetail((xueqiao.trade.hosting.HostingComposeGraph)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case VIEW_DETAIL:
      return getViewDetail();

    case GRAPH_DETAIL:
      return getGraphDetail();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case VIEW_DETAIL:
      return isSetViewDetail();
    case GRAPH_DETAIL:
      return isSetGraphDetail();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HostingComposeViewDetail)
      return this.equals((HostingComposeViewDetail)that);
    return false;
  }

  public boolean equals(HostingComposeViewDetail that) {
    if (that == null)
      return false;

    boolean this_present_viewDetail = true && this.isSetViewDetail();
    boolean that_present_viewDetail = true && that.isSetViewDetail();
    if (this_present_viewDetail || that_present_viewDetail) {
      if (!(this_present_viewDetail && that_present_viewDetail))
        return false;
      if (!this.viewDetail.equals(that.viewDetail))
        return false;
    }

    boolean this_present_graphDetail = true && this.isSetGraphDetail();
    boolean that_present_graphDetail = true && that.isSetGraphDetail();
    if (this_present_graphDetail || that_present_graphDetail) {
      if (!(this_present_graphDetail && that_present_graphDetail))
        return false;
      if (!this.graphDetail.equals(that.graphDetail))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HostingComposeViewDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetViewDetail()).compareTo(other.isSetViewDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.viewDetail, other.viewDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGraphDetail()).compareTo(other.isSetGraphDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGraphDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.graphDetail, other.graphDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("HostingComposeViewDetail(");
    boolean first = true;

    if (isSetViewDetail()) {
      sb.append("viewDetail:");
      if (this.viewDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.viewDetail);
      }
      first = false;
    }
    if (isSetGraphDetail()) {
      if (!first) sb.append(", ");
      sb.append("graphDetail:");
      if (this.graphDetail == null) {
        sb.append("null");
      } else {
        sb.append(this.graphDetail);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (viewDetail != null) {
      viewDetail.validate();
    }
    if (graphDetail != null) {
      graphDetail.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class HostingComposeViewDetailStandardSchemeFactory implements SchemeFactory {
    public HostingComposeViewDetailStandardScheme getScheme() {
      return new HostingComposeViewDetailStandardScheme();
    }
  }

  private static class HostingComposeViewDetailStandardScheme extends StandardScheme<HostingComposeViewDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, HostingComposeViewDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VIEW_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.viewDetail = new xueqiao.trade.hosting.HostingComposeView();
              struct.viewDetail.read(iprot);
              struct.setViewDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // GRAPH_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.graphDetail = new xueqiao.trade.hosting.HostingComposeGraph();
              struct.graphDetail.read(iprot);
              struct.setGraphDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, HostingComposeViewDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.viewDetail != null) {
        if (struct.isSetViewDetail()) {
          oprot.writeFieldBegin(VIEW_DETAIL_FIELD_DESC);
          struct.viewDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.graphDetail != null) {
        if (struct.isSetGraphDetail()) {
          oprot.writeFieldBegin(GRAPH_DETAIL_FIELD_DESC);
          struct.graphDetail.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class HostingComposeViewDetailTupleSchemeFactory implements SchemeFactory {
    public HostingComposeViewDetailTupleScheme getScheme() {
      return new HostingComposeViewDetailTupleScheme();
    }
  }

  private static class HostingComposeViewDetailTupleScheme extends TupleScheme<HostingComposeViewDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, HostingComposeViewDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetViewDetail()) {
        optionals.set(0);
      }
      if (struct.isSetGraphDetail()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetViewDetail()) {
        struct.viewDetail.write(oprot);
      }
      if (struct.isSetGraphDetail()) {
        struct.graphDetail.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, HostingComposeViewDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.viewDetail = new xueqiao.trade.hosting.HostingComposeView();
        struct.viewDetail.read(iprot);
        struct.setViewDetailIsSet(true);
      }
      if (incoming.get(1)) {
        struct.graphDetail = new xueqiao.trade.hosting.HostingComposeGraph();
        struct.graphDetail.read(iprot);
        struct.setGraphDetailIsSet(true);
      }
    }
  }

}

