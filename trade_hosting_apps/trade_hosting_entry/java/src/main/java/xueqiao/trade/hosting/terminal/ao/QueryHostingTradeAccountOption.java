/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.terminal.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryHostingTradeAccountOption implements org.apache.thrift.TBase<QueryHostingTradeAccountOption, QueryHostingTradeAccountOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryHostingTradeAccountOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryHostingTradeAccountOption");

  private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserNamePartical", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LOGIN_USER_NAME_WHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("loginUserNameWhole", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IN_ACCOUNT_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("inAccountStates", org.apache.thrift.protocol.TType.SET, (short)6);
  private static final org.apache.thrift.protocol.TField NOT_IN_ACCOUNT_STATES_FIELD_DESC = new org.apache.thrift.protocol.TField("notInAccountStates", org.apache.thrift.protocol.TType.SET, (short)7);
  private static final org.apache.thrift.protocol.TField TRADE_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tradeAccountId", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField BROKER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("brokerId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryHostingTradeAccountOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryHostingTradeAccountOptionTupleSchemeFactory());
  }

  public String loginUserNamePartical; // optional
  public String loginUserNameWhole; // optional
  public Set<xueqiao.trade.hosting.TradeAccountState> inAccountStates; // optional
  public Set<xueqiao.trade.hosting.TradeAccountState> notInAccountStates; // optional
  public long tradeAccountId; // optional
  public int brokerId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOGIN_USER_NAME_PARTICAL((short)2, "loginUserNamePartical"),
    LOGIN_USER_NAME_WHOLE((short)3, "loginUserNameWhole"),
    IN_ACCOUNT_STATES((short)6, "inAccountStates"),
    NOT_IN_ACCOUNT_STATES((short)7, "notInAccountStates"),
    TRADE_ACCOUNT_ID((short)8, "tradeAccountId"),
    BROKER_ID((short)9, "brokerId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // LOGIN_USER_NAME_PARTICAL
          return LOGIN_USER_NAME_PARTICAL;
        case 3: // LOGIN_USER_NAME_WHOLE
          return LOGIN_USER_NAME_WHOLE;
        case 6: // IN_ACCOUNT_STATES
          return IN_ACCOUNT_STATES;
        case 7: // NOT_IN_ACCOUNT_STATES
          return NOT_IN_ACCOUNT_STATES;
        case 8: // TRADE_ACCOUNT_ID
          return TRADE_ACCOUNT_ID;
        case 9: // BROKER_ID
          return BROKER_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRADEACCOUNTID_ISSET_ID = 0;
  private static final int __BROKERID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.LOGIN_USER_NAME_PARTICAL,_Fields.LOGIN_USER_NAME_WHOLE,_Fields.IN_ACCOUNT_STATES,_Fields.NOT_IN_ACCOUNT_STATES,_Fields.TRADE_ACCOUNT_ID,_Fields.BROKER_ID};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOGIN_USER_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("loginUserNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_USER_NAME_WHOLE, new org.apache.thrift.meta_data.FieldMetaData("loginUserNameWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_ACCOUNT_STATES, new org.apache.thrift.meta_data.FieldMetaData("inAccountStates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.TradeAccountState.class))));
    tmpMap.put(_Fields.NOT_IN_ACCOUNT_STATES, new org.apache.thrift.meta_data.FieldMetaData("notInAccountStates", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, xueqiao.trade.hosting.TradeAccountState.class))));
    tmpMap.put(_Fields.TRADE_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("tradeAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BROKER_ID, new org.apache.thrift.meta_data.FieldMetaData("brokerId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryHostingTradeAccountOption.class, metaDataMap);
  }

  public QueryHostingTradeAccountOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryHostingTradeAccountOption(QueryHostingTradeAccountOption other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLoginUserNamePartical()) {
      this.loginUserNamePartical = other.loginUserNamePartical;
    }
    if (other.isSetLoginUserNameWhole()) {
      this.loginUserNameWhole = other.loginUserNameWhole;
    }
    if (other.isSetInAccountStates()) {
      Set<xueqiao.trade.hosting.TradeAccountState> __this__inAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(other.inAccountStates.size());
      for (xueqiao.trade.hosting.TradeAccountState other_element : other.inAccountStates) {
        __this__inAccountStates.add(other_element);
      }
      this.inAccountStates = __this__inAccountStates;
    }
    if (other.isSetNotInAccountStates()) {
      Set<xueqiao.trade.hosting.TradeAccountState> __this__notInAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(other.notInAccountStates.size());
      for (xueqiao.trade.hosting.TradeAccountState other_element : other.notInAccountStates) {
        __this__notInAccountStates.add(other_element);
      }
      this.notInAccountStates = __this__notInAccountStates;
    }
    this.tradeAccountId = other.tradeAccountId;
    this.brokerId = other.brokerId;
  }

  public QueryHostingTradeAccountOption deepCopy() {
    return new QueryHostingTradeAccountOption(this);
  }

  @Override
  public void clear() {
    this.loginUserNamePartical = null;
    this.loginUserNameWhole = null;
    this.inAccountStates = null;
    this.notInAccountStates = null;
    setTradeAccountIdIsSet(false);
    this.tradeAccountId = 0;
    setBrokerIdIsSet(false);
    this.brokerId = 0;
  }

  public String getLoginUserNamePartical() {
    return this.loginUserNamePartical;
  }

  public QueryHostingTradeAccountOption setLoginUserNamePartical(String loginUserNamePartical) {
    this.loginUserNamePartical = loginUserNamePartical;
    return this;
  }

  public void unsetLoginUserNamePartical() {
    this.loginUserNamePartical = null;
  }

  /** Returns true if field loginUserNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginUserNamePartical() {
    return this.loginUserNamePartical != null;
  }

  public void setLoginUserNameParticalIsSet(boolean value) {
    if (!value) {
      this.loginUserNamePartical = null;
    }
  }

  public String getLoginUserNameWhole() {
    return this.loginUserNameWhole;
  }

  public QueryHostingTradeAccountOption setLoginUserNameWhole(String loginUserNameWhole) {
    this.loginUserNameWhole = loginUserNameWhole;
    return this;
  }

  public void unsetLoginUserNameWhole() {
    this.loginUserNameWhole = null;
  }

  /** Returns true if field loginUserNameWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginUserNameWhole() {
    return this.loginUserNameWhole != null;
  }

  public void setLoginUserNameWholeIsSet(boolean value) {
    if (!value) {
      this.loginUserNameWhole = null;
    }
  }

  public int getInAccountStatesSize() {
    return (this.inAccountStates == null) ? 0 : this.inAccountStates.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.TradeAccountState> getInAccountStatesIterator() {
    return (this.inAccountStates == null) ? null : this.inAccountStates.iterator();
  }

  public void addToInAccountStates(xueqiao.trade.hosting.TradeAccountState elem) {
    if (this.inAccountStates == null) {
      this.inAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>();
    }
    this.inAccountStates.add(elem);
  }

  public Set<xueqiao.trade.hosting.TradeAccountState> getInAccountStates() {
    return this.inAccountStates;
  }

  public QueryHostingTradeAccountOption setInAccountStates(Set<xueqiao.trade.hosting.TradeAccountState> inAccountStates) {
    this.inAccountStates = inAccountStates;
    return this;
  }

  public void unsetInAccountStates() {
    this.inAccountStates = null;
  }

  /** Returns true if field inAccountStates is set (has been assigned a value) and false otherwise */
  public boolean isSetInAccountStates() {
    return this.inAccountStates != null;
  }

  public void setInAccountStatesIsSet(boolean value) {
    if (!value) {
      this.inAccountStates = null;
    }
  }

  public int getNotInAccountStatesSize() {
    return (this.notInAccountStates == null) ? 0 : this.notInAccountStates.size();
  }

  public java.util.Iterator<xueqiao.trade.hosting.TradeAccountState> getNotInAccountStatesIterator() {
    return (this.notInAccountStates == null) ? null : this.notInAccountStates.iterator();
  }

  public void addToNotInAccountStates(xueqiao.trade.hosting.TradeAccountState elem) {
    if (this.notInAccountStates == null) {
      this.notInAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>();
    }
    this.notInAccountStates.add(elem);
  }

  public Set<xueqiao.trade.hosting.TradeAccountState> getNotInAccountStates() {
    return this.notInAccountStates;
  }

  public QueryHostingTradeAccountOption setNotInAccountStates(Set<xueqiao.trade.hosting.TradeAccountState> notInAccountStates) {
    this.notInAccountStates = notInAccountStates;
    return this;
  }

  public void unsetNotInAccountStates() {
    this.notInAccountStates = null;
  }

  /** Returns true if field notInAccountStates is set (has been assigned a value) and false otherwise */
  public boolean isSetNotInAccountStates() {
    return this.notInAccountStates != null;
  }

  public void setNotInAccountStatesIsSet(boolean value) {
    if (!value) {
      this.notInAccountStates = null;
    }
  }

  public long getTradeAccountId() {
    return this.tradeAccountId;
  }

  public QueryHostingTradeAccountOption setTradeAccountId(long tradeAccountId) {
    this.tradeAccountId = tradeAccountId;
    setTradeAccountIdIsSet(true);
    return this;
  }

  public void unsetTradeAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  /** Returns true if field tradeAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetTradeAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID);
  }

  public void setTradeAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRADEACCOUNTID_ISSET_ID, value);
  }

  public int getBrokerId() {
    return this.brokerId;
  }

  public QueryHostingTradeAccountOption setBrokerId(int brokerId) {
    this.brokerId = brokerId;
    setBrokerIdIsSet(true);
    return this;
  }

  public void unsetBrokerId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  /** Returns true if field brokerId is set (has been assigned a value) and false otherwise */
  public boolean isSetBrokerId() {
    return EncodingUtils.testBit(__isset_bitfield, __BROKERID_ISSET_ID);
  }

  public void setBrokerIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BROKERID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LOGIN_USER_NAME_PARTICAL:
      if (value == null) {
        unsetLoginUserNamePartical();
      } else {
        setLoginUserNamePartical((String)value);
      }
      break;

    case LOGIN_USER_NAME_WHOLE:
      if (value == null) {
        unsetLoginUserNameWhole();
      } else {
        setLoginUserNameWhole((String)value);
      }
      break;

    case IN_ACCOUNT_STATES:
      if (value == null) {
        unsetInAccountStates();
      } else {
        setInAccountStates((Set<xueqiao.trade.hosting.TradeAccountState>)value);
      }
      break;

    case NOT_IN_ACCOUNT_STATES:
      if (value == null) {
        unsetNotInAccountStates();
      } else {
        setNotInAccountStates((Set<xueqiao.trade.hosting.TradeAccountState>)value);
      }
      break;

    case TRADE_ACCOUNT_ID:
      if (value == null) {
        unsetTradeAccountId();
      } else {
        setTradeAccountId((Long)value);
      }
      break;

    case BROKER_ID:
      if (value == null) {
        unsetBrokerId();
      } else {
        setBrokerId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LOGIN_USER_NAME_PARTICAL:
      return getLoginUserNamePartical();

    case LOGIN_USER_NAME_WHOLE:
      return getLoginUserNameWhole();

    case IN_ACCOUNT_STATES:
      return getInAccountStates();

    case NOT_IN_ACCOUNT_STATES:
      return getNotInAccountStates();

    case TRADE_ACCOUNT_ID:
      return Long.valueOf(getTradeAccountId());

    case BROKER_ID:
      return Integer.valueOf(getBrokerId());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LOGIN_USER_NAME_PARTICAL:
      return isSetLoginUserNamePartical();
    case LOGIN_USER_NAME_WHOLE:
      return isSetLoginUserNameWhole();
    case IN_ACCOUNT_STATES:
      return isSetInAccountStates();
    case NOT_IN_ACCOUNT_STATES:
      return isSetNotInAccountStates();
    case TRADE_ACCOUNT_ID:
      return isSetTradeAccountId();
    case BROKER_ID:
      return isSetBrokerId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryHostingTradeAccountOption)
      return this.equals((QueryHostingTradeAccountOption)that);
    return false;
  }

  public boolean equals(QueryHostingTradeAccountOption that) {
    if (that == null)
      return false;

    boolean this_present_loginUserNamePartical = true && this.isSetLoginUserNamePartical();
    boolean that_present_loginUserNamePartical = true && that.isSetLoginUserNamePartical();
    if (this_present_loginUserNamePartical || that_present_loginUserNamePartical) {
      if (!(this_present_loginUserNamePartical && that_present_loginUserNamePartical))
        return false;
      if (!this.loginUserNamePartical.equals(that.loginUserNamePartical))
        return false;
    }

    boolean this_present_loginUserNameWhole = true && this.isSetLoginUserNameWhole();
    boolean that_present_loginUserNameWhole = true && that.isSetLoginUserNameWhole();
    if (this_present_loginUserNameWhole || that_present_loginUserNameWhole) {
      if (!(this_present_loginUserNameWhole && that_present_loginUserNameWhole))
        return false;
      if (!this.loginUserNameWhole.equals(that.loginUserNameWhole))
        return false;
    }

    boolean this_present_inAccountStates = true && this.isSetInAccountStates();
    boolean that_present_inAccountStates = true && that.isSetInAccountStates();
    if (this_present_inAccountStates || that_present_inAccountStates) {
      if (!(this_present_inAccountStates && that_present_inAccountStates))
        return false;
      if (!this.inAccountStates.equals(that.inAccountStates))
        return false;
    }

    boolean this_present_notInAccountStates = true && this.isSetNotInAccountStates();
    boolean that_present_notInAccountStates = true && that.isSetNotInAccountStates();
    if (this_present_notInAccountStates || that_present_notInAccountStates) {
      if (!(this_present_notInAccountStates && that_present_notInAccountStates))
        return false;
      if (!this.notInAccountStates.equals(that.notInAccountStates))
        return false;
    }

    boolean this_present_tradeAccountId = true && this.isSetTradeAccountId();
    boolean that_present_tradeAccountId = true && that.isSetTradeAccountId();
    if (this_present_tradeAccountId || that_present_tradeAccountId) {
      if (!(this_present_tradeAccountId && that_present_tradeAccountId))
        return false;
      if (this.tradeAccountId != that.tradeAccountId)
        return false;
    }

    boolean this_present_brokerId = true && this.isSetBrokerId();
    boolean that_present_brokerId = true && that.isSetBrokerId();
    if (this_present_brokerId || that_present_brokerId) {
      if (!(this_present_brokerId && that_present_brokerId))
        return false;
      if (this.brokerId != that.brokerId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryHostingTradeAccountOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLoginUserNamePartical()).compareTo(other.isSetLoginUserNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginUserNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserNamePartical, other.loginUserNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginUserNameWhole()).compareTo(other.isSetLoginUserNameWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginUserNameWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginUserNameWhole, other.loginUserNameWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInAccountStates()).compareTo(other.isSetInAccountStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInAccountStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inAccountStates, other.inAccountStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotInAccountStates()).compareTo(other.isSetNotInAccountStates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotInAccountStates()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notInAccountStates, other.notInAccountStates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTradeAccountId()).compareTo(other.isSetTradeAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTradeAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tradeAccountId, other.tradeAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBrokerId()).compareTo(other.isSetBrokerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBrokerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brokerId, other.brokerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryHostingTradeAccountOption(");
    boolean first = true;

    if (isSetLoginUserNamePartical()) {
      sb.append("loginUserNamePartical:");
      if (this.loginUserNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserNamePartical);
      }
      first = false;
    }
    if (isSetLoginUserNameWhole()) {
      if (!first) sb.append(", ");
      sb.append("loginUserNameWhole:");
      if (this.loginUserNameWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.loginUserNameWhole);
      }
      first = false;
    }
    if (isSetInAccountStates()) {
      if (!first) sb.append(", ");
      sb.append("inAccountStates:");
      if (this.inAccountStates == null) {
        sb.append("null");
      } else {
        sb.append(this.inAccountStates);
      }
      first = false;
    }
    if (isSetNotInAccountStates()) {
      if (!first) sb.append(", ");
      sb.append("notInAccountStates:");
      if (this.notInAccountStates == null) {
        sb.append("null");
      } else {
        sb.append(this.notInAccountStates);
      }
      first = false;
    }
    if (isSetTradeAccountId()) {
      if (!first) sb.append(", ");
      sb.append("tradeAccountId:");
      sb.append(this.tradeAccountId);
      first = false;
    }
    if (isSetBrokerId()) {
      if (!first) sb.append(", ");
      sb.append("brokerId:");
      sb.append(this.brokerId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryHostingTradeAccountOptionStandardSchemeFactory implements SchemeFactory {
    public QueryHostingTradeAccountOptionStandardScheme getScheme() {
      return new QueryHostingTradeAccountOptionStandardScheme();
    }
  }

  private static class QueryHostingTradeAccountOptionStandardScheme extends StandardScheme<QueryHostingTradeAccountOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryHostingTradeAccountOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // LOGIN_USER_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginUserNamePartical = iprot.readString();
              struct.setLoginUserNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LOGIN_USER_NAME_WHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginUserNameWhole = iprot.readString();
              struct.setLoginUserNameWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IN_ACCOUNT_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set32 = iprot.readSetBegin();
                struct.inAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(2*_set32.size);
                for (int _i33 = 0; _i33 < _set32.size; ++_i33)
                {
                  xueqiao.trade.hosting.TradeAccountState _elem34;
                  _elem34 = xueqiao.trade.hosting.TradeAccountState.findByValue(iprot.readI32());
                  struct.inAccountStates.add(_elem34);
                }
                iprot.readSetEnd();
              }
              struct.setInAccountStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NOT_IN_ACCOUNT_STATES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                struct.notInAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(2*_set35.size);
                for (int _i36 = 0; _i36 < _set35.size; ++_i36)
                {
                  xueqiao.trade.hosting.TradeAccountState _elem37;
                  _elem37 = xueqiao.trade.hosting.TradeAccountState.findByValue(iprot.readI32());
                  struct.notInAccountStates.add(_elem37);
                }
                iprot.readSetEnd();
              }
              struct.setNotInAccountStatesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TRADE_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.tradeAccountId = iprot.readI64();
              struct.setTradeAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // BROKER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.brokerId = iprot.readI32();
              struct.setBrokerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryHostingTradeAccountOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.loginUserNamePartical != null) {
        if (struct.isSetLoginUserNamePartical()) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.loginUserNamePartical);
          oprot.writeFieldEnd();
        }
      }
      if (struct.loginUserNameWhole != null) {
        if (struct.isSetLoginUserNameWhole()) {
          oprot.writeFieldBegin(LOGIN_USER_NAME_WHOLE_FIELD_DESC);
          oprot.writeString(struct.loginUserNameWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.inAccountStates != null) {
        if (struct.isSetInAccountStates()) {
          oprot.writeFieldBegin(IN_ACCOUNT_STATES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.inAccountStates.size()));
            for (xueqiao.trade.hosting.TradeAccountState _iter38 : struct.inAccountStates)
            {
              oprot.writeI32(_iter38.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.notInAccountStates != null) {
        if (struct.isSetNotInAccountStates()) {
          oprot.writeFieldBegin(NOT_IN_ACCOUNT_STATES_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.notInAccountStates.size()));
            for (xueqiao.trade.hosting.TradeAccountState _iter39 : struct.notInAccountStates)
            {
              oprot.writeI32(_iter39.getValue());
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeFieldBegin(TRADE_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.tradeAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetBrokerId()) {
        oprot.writeFieldBegin(BROKER_ID_FIELD_DESC);
        oprot.writeI32(struct.brokerId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryHostingTradeAccountOptionTupleSchemeFactory implements SchemeFactory {
    public QueryHostingTradeAccountOptionTupleScheme getScheme() {
      return new QueryHostingTradeAccountOptionTupleScheme();
    }
  }

  private static class QueryHostingTradeAccountOptionTupleScheme extends TupleScheme<QueryHostingTradeAccountOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryHostingTradeAccountOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLoginUserNamePartical()) {
        optionals.set(0);
      }
      if (struct.isSetLoginUserNameWhole()) {
        optionals.set(1);
      }
      if (struct.isSetInAccountStates()) {
        optionals.set(2);
      }
      if (struct.isSetNotInAccountStates()) {
        optionals.set(3);
      }
      if (struct.isSetTradeAccountId()) {
        optionals.set(4);
      }
      if (struct.isSetBrokerId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetLoginUserNamePartical()) {
        oprot.writeString(struct.loginUserNamePartical);
      }
      if (struct.isSetLoginUserNameWhole()) {
        oprot.writeString(struct.loginUserNameWhole);
      }
      if (struct.isSetInAccountStates()) {
        {
          oprot.writeI32(struct.inAccountStates.size());
          for (xueqiao.trade.hosting.TradeAccountState _iter40 : struct.inAccountStates)
          {
            oprot.writeI32(_iter40.getValue());
          }
        }
      }
      if (struct.isSetNotInAccountStates()) {
        {
          oprot.writeI32(struct.notInAccountStates.size());
          for (xueqiao.trade.hosting.TradeAccountState _iter41 : struct.notInAccountStates)
          {
            oprot.writeI32(_iter41.getValue());
          }
        }
      }
      if (struct.isSetTradeAccountId()) {
        oprot.writeI64(struct.tradeAccountId);
      }
      if (struct.isSetBrokerId()) {
        oprot.writeI32(struct.brokerId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryHostingTradeAccountOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.loginUserNamePartical = iprot.readString();
        struct.setLoginUserNameParticalIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginUserNameWhole = iprot.readString();
        struct.setLoginUserNameWholeIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set42 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.inAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(2*_set42.size);
          for (int _i43 = 0; _i43 < _set42.size; ++_i43)
          {
            xueqiao.trade.hosting.TradeAccountState _elem44;
            _elem44 = xueqiao.trade.hosting.TradeAccountState.findByValue(iprot.readI32());
            struct.inAccountStates.add(_elem44);
          }
        }
        struct.setInAccountStatesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set45 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.notInAccountStates = new HashSet<xueqiao.trade.hosting.TradeAccountState>(2*_set45.size);
          for (int _i46 = 0; _i46 < _set45.size; ++_i46)
          {
            xueqiao.trade.hosting.TradeAccountState _elem47;
            _elem47 = xueqiao.trade.hosting.TradeAccountState.findByValue(iprot.readI32());
            struct.notInAccountStates.add(_elem47);
          }
        }
        struct.setNotInAccountStatesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tradeAccountId = iprot.readI64();
        struct.setTradeAccountIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.brokerId = iprot.readI32();
        struct.setBrokerIdIsSet(true);
      }
    }
  }

}

