/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package xueqiao.trade.hosting.terminal.ao;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QueryHostingSAWRUItemListOption implements org.apache.thrift.TBase<QueryHostingSAWRUItemListOption, QueryHostingSAWRUItemListOption._Fields>, java.io.Serializable, Cloneable, Comparable<QueryHostingSAWRUItemListOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueryHostingSAWRUItemListOption");

  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_NAME_WHOLE_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountNameWhole", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SUB_ACCOUNT_NAME_PARTICAL_FIELD_DESC = new org.apache.thrift.protocol.TField("subAccountNamePartical", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QueryHostingSAWRUItemListOptionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QueryHostingSAWRUItemListOptionTupleSchemeFactory());
  }

  public long subAccountId; // optional
  public String subAccountNameWhole; // optional
  public String subAccountNamePartical; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUB_ACCOUNT_ID((short)1, "subAccountId"),
    SUB_ACCOUNT_NAME_WHOLE((short)2, "subAccountNameWhole"),
    SUB_ACCOUNT_NAME_PARTICAL((short)3, "subAccountNamePartical");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUB_ACCOUNT_ID
          return SUB_ACCOUNT_ID;
        case 2: // SUB_ACCOUNT_NAME_WHOLE
          return SUB_ACCOUNT_NAME_WHOLE;
        case 3: // SUB_ACCOUNT_NAME_PARTICAL
          return SUB_ACCOUNT_NAME_PARTICAL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBACCOUNTID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.SUB_ACCOUNT_ID,_Fields.SUB_ACCOUNT_NAME_WHOLE,_Fields.SUB_ACCOUNT_NAME_PARTICAL};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUB_ACCOUNT_ID, new org.apache.thrift.meta_data.FieldMetaData("subAccountId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUB_ACCOUNT_NAME_WHOLE, new org.apache.thrift.meta_data.FieldMetaData("subAccountNameWhole", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUB_ACCOUNT_NAME_PARTICAL, new org.apache.thrift.meta_data.FieldMetaData("subAccountNamePartical", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryHostingSAWRUItemListOption.class, metaDataMap);
  }

  public QueryHostingSAWRUItemListOption() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryHostingSAWRUItemListOption(QueryHostingSAWRUItemListOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subAccountId = other.subAccountId;
    if (other.isSetSubAccountNameWhole()) {
      this.subAccountNameWhole = other.subAccountNameWhole;
    }
    if (other.isSetSubAccountNamePartical()) {
      this.subAccountNamePartical = other.subAccountNamePartical;
    }
  }

  public QueryHostingSAWRUItemListOption deepCopy() {
    return new QueryHostingSAWRUItemListOption(this);
  }

  @Override
  public void clear() {
    setSubAccountIdIsSet(false);
    this.subAccountId = 0;
    this.subAccountNameWhole = null;
    this.subAccountNamePartical = null;
  }

  public long getSubAccountId() {
    return this.subAccountId;
  }

  public QueryHostingSAWRUItemListOption setSubAccountId(long subAccountId) {
    this.subAccountId = subAccountId;
    setSubAccountIdIsSet(true);
    return this;
  }

  public void unsetSubAccountId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  /** Returns true if field subAccountId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountId() {
    return EncodingUtils.testBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID);
  }

  public void setSubAccountIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUBACCOUNTID_ISSET_ID, value);
  }

  public String getSubAccountNameWhole() {
    return this.subAccountNameWhole;
  }

  public QueryHostingSAWRUItemListOption setSubAccountNameWhole(String subAccountNameWhole) {
    this.subAccountNameWhole = subAccountNameWhole;
    return this;
  }

  public void unsetSubAccountNameWhole() {
    this.subAccountNameWhole = null;
  }

  /** Returns true if field subAccountNameWhole is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountNameWhole() {
    return this.subAccountNameWhole != null;
  }

  public void setSubAccountNameWholeIsSet(boolean value) {
    if (!value) {
      this.subAccountNameWhole = null;
    }
  }

  public String getSubAccountNamePartical() {
    return this.subAccountNamePartical;
  }

  public QueryHostingSAWRUItemListOption setSubAccountNamePartical(String subAccountNamePartical) {
    this.subAccountNamePartical = subAccountNamePartical;
    return this;
  }

  public void unsetSubAccountNamePartical() {
    this.subAccountNamePartical = null;
  }

  /** Returns true if field subAccountNamePartical is set (has been assigned a value) and false otherwise */
  public boolean isSetSubAccountNamePartical() {
    return this.subAccountNamePartical != null;
  }

  public void setSubAccountNameParticalIsSet(boolean value) {
    if (!value) {
      this.subAccountNamePartical = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      if (value == null) {
        unsetSubAccountId();
      } else {
        setSubAccountId((Long)value);
      }
      break;

    case SUB_ACCOUNT_NAME_WHOLE:
      if (value == null) {
        unsetSubAccountNameWhole();
      } else {
        setSubAccountNameWhole((String)value);
      }
      break;

    case SUB_ACCOUNT_NAME_PARTICAL:
      if (value == null) {
        unsetSubAccountNamePartical();
      } else {
        setSubAccountNamePartical((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SUB_ACCOUNT_ID:
      return Long.valueOf(getSubAccountId());

    case SUB_ACCOUNT_NAME_WHOLE:
      return getSubAccountNameWhole();

    case SUB_ACCOUNT_NAME_PARTICAL:
      return getSubAccountNamePartical();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SUB_ACCOUNT_ID:
      return isSetSubAccountId();
    case SUB_ACCOUNT_NAME_WHOLE:
      return isSetSubAccountNameWhole();
    case SUB_ACCOUNT_NAME_PARTICAL:
      return isSetSubAccountNamePartical();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QueryHostingSAWRUItemListOption)
      return this.equals((QueryHostingSAWRUItemListOption)that);
    return false;
  }

  public boolean equals(QueryHostingSAWRUItemListOption that) {
    if (that == null)
      return false;

    boolean this_present_subAccountId = true && this.isSetSubAccountId();
    boolean that_present_subAccountId = true && that.isSetSubAccountId();
    if (this_present_subAccountId || that_present_subAccountId) {
      if (!(this_present_subAccountId && that_present_subAccountId))
        return false;
      if (this.subAccountId != that.subAccountId)
        return false;
    }

    boolean this_present_subAccountNameWhole = true && this.isSetSubAccountNameWhole();
    boolean that_present_subAccountNameWhole = true && that.isSetSubAccountNameWhole();
    if (this_present_subAccountNameWhole || that_present_subAccountNameWhole) {
      if (!(this_present_subAccountNameWhole && that_present_subAccountNameWhole))
        return false;
      if (!this.subAccountNameWhole.equals(that.subAccountNameWhole))
        return false;
    }

    boolean this_present_subAccountNamePartical = true && this.isSetSubAccountNamePartical();
    boolean that_present_subAccountNamePartical = true && that.isSetSubAccountNamePartical();
    if (this_present_subAccountNamePartical || that_present_subAccountNamePartical) {
      if (!(this_present_subAccountNamePartical && that_present_subAccountNamePartical))
        return false;
      if (!this.subAccountNamePartical.equals(that.subAccountNamePartical))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QueryHostingSAWRUItemListOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSubAccountId()).compareTo(other.isSetSubAccountId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountId, other.subAccountId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountNameWhole()).compareTo(other.isSetSubAccountNameWhole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountNameWhole()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountNameWhole, other.subAccountNameWhole);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubAccountNamePartical()).compareTo(other.isSetSubAccountNamePartical());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubAccountNamePartical()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subAccountNamePartical, other.subAccountNamePartical);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QueryHostingSAWRUItemListOption(");
    boolean first = true;

    if (isSetSubAccountId()) {
      sb.append("subAccountId:");
      sb.append(this.subAccountId);
      first = false;
    }
    if (isSetSubAccountNameWhole()) {
      if (!first) sb.append(", ");
      sb.append("subAccountNameWhole:");
      if (this.subAccountNameWhole == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountNameWhole);
      }
      first = false;
    }
    if (isSetSubAccountNamePartical()) {
      if (!first) sb.append(", ");
      sb.append("subAccountNamePartical:");
      if (this.subAccountNamePartical == null) {
        sb.append("null");
      } else {
        sb.append(this.subAccountNamePartical);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryHostingSAWRUItemListOptionStandardSchemeFactory implements SchemeFactory {
    public QueryHostingSAWRUItemListOptionStandardScheme getScheme() {
      return new QueryHostingSAWRUItemListOptionStandardScheme();
    }
  }

  private static class QueryHostingSAWRUItemListOptionStandardScheme extends StandardScheme<QueryHostingSAWRUItemListOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryHostingSAWRUItemListOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUB_ACCOUNT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subAccountId = iprot.readI64();
              struct.setSubAccountIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUB_ACCOUNT_NAME_WHOLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subAccountNameWhole = iprot.readString();
              struct.setSubAccountNameWholeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SUB_ACCOUNT_NAME_PARTICAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.subAccountNamePartical = iprot.readString();
              struct.setSubAccountNameParticalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryHostingSAWRUItemListOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetSubAccountId()) {
        oprot.writeFieldBegin(SUB_ACCOUNT_ID_FIELD_DESC);
        oprot.writeI64(struct.subAccountId);
        oprot.writeFieldEnd();
      }
      if (struct.subAccountNameWhole != null) {
        if (struct.isSetSubAccountNameWhole()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_NAME_WHOLE_FIELD_DESC);
          oprot.writeString(struct.subAccountNameWhole);
          oprot.writeFieldEnd();
        }
      }
      if (struct.subAccountNamePartical != null) {
        if (struct.isSetSubAccountNamePartical()) {
          oprot.writeFieldBegin(SUB_ACCOUNT_NAME_PARTICAL_FIELD_DESC);
          oprot.writeString(struct.subAccountNamePartical);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryHostingSAWRUItemListOptionTupleSchemeFactory implements SchemeFactory {
    public QueryHostingSAWRUItemListOptionTupleScheme getScheme() {
      return new QueryHostingSAWRUItemListOptionTupleScheme();
    }
  }

  private static class QueryHostingSAWRUItemListOptionTupleScheme extends TupleScheme<QueryHostingSAWRUItemListOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryHostingSAWRUItemListOption struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSubAccountId()) {
        optionals.set(0);
      }
      if (struct.isSetSubAccountNameWhole()) {
        optionals.set(1);
      }
      if (struct.isSetSubAccountNamePartical()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSubAccountId()) {
        oprot.writeI64(struct.subAccountId);
      }
      if (struct.isSetSubAccountNameWhole()) {
        oprot.writeString(struct.subAccountNameWhole);
      }
      if (struct.isSetSubAccountNamePartical()) {
        oprot.writeString(struct.subAccountNamePartical);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryHostingSAWRUItemListOption struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.subAccountId = iprot.readI64();
        struct.setSubAccountIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.subAccountNameWhole = iprot.readString();
        struct.setSubAccountNameWholeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.subAccountNamePartical = iprot.readString();
        struct.setSubAccountNameParticalIsSet(true);
      }
    }
  }

}

